
armband-all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800fdd0  0800fdd0  00010dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010530  08010530  00012210  2**0
                  CONTENTS
  4 .ARM          00000008  08010530  08010530  00011530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010538  08010538  00012210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010538  08010538  00011538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801053c  0801053c  0001153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08010540  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000210  08010750  00012210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  08010750  00012824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b2aa  00000000  00000000  00012240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000375c  00000000  00000000  0002d4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00030c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142c  00000000  00000000  00032610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254d1  00000000  00000000  00033a3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e122  00000000  00000000  00058f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1f26  00000000  00000000  0007702f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008644  00000000  00000000  00158f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001615dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fdb8 	.word	0x0800fdb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800fdb8 	.word	0x0800fdb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <fix_msb_loss>:
 * exceed 286 m/s2
 * this is 100% fine for gravity vector
 * this is most likely fine for acc vector as no runner is
 * putting out 30g's while running
 */
uint16_t fix_msb_loss(uint16_t val){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	if ((val & 0xF000) == 0x7000) {
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8000ff4:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000ff8:	d105      	bne.n	8001006 <fix_msb_loss+0x22>
		val |= 0x8000;
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001004:	80fb      	strh	r3, [r7, #6]
	}
	return val;
 8001006:	88fb      	ldrh	r3, [r7, #6]
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <startup_IMU>:

void startup_IMU(I2C_HandleTypeDef *hi2c){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	// verify i2c is working properly by reading chip id
	read_to_buf(hi2c, 0x00, buf, 1);
 800101c:	f107 020c 	add.w	r2, r7, #12
 8001020:	2301      	movs	r3, #1
 8001022:	2100      	movs	r1, #0
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f848 	bl	80010ba <read_to_buf>
	if(buf[0] != 0xA0) {
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	2ba0      	cmp	r3, #160	@ 0xa0
 800102e:	d003      	beq.n	8001038 <startup_IMU+0x24>
		printf("chip error, wrong/no chip ID returned\n\r");
 8001030:	4808      	ldr	r0, [pc, #32]	@ (8001054 <startup_IMU+0x40>)
 8001032:	f00a ff05 	bl	800be40 <iprintf>
 8001036:	e00a      	b.n	800104e <startup_IMU+0x3a>
		return;
	}

	// put chip in configuration mode
	buf[0] = 0x3D;
 8001038:	233d      	movs	r3, #61	@ 0x3d
 800103a:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2202      	movs	r2, #2
 8001046:	4619      	mov	r1, r3
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f81b 	bl	8001084 <transmit_buf>
}
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	0800fdd0 	.word	0x0800fdd0

08001058 <init_IMU>:

void init_IMU(I2C_HandleTypeDef *hi2c){
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	startup_IMU(hi2c);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffd7 	bl	8001014 <startup_IMU>

	// put chip in IMU mode
	buf[0] = 0x3D;
 8001066:	233d      	movs	r3, #61	@ 0x3d
 8001068:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x08;
 800106a:	2308      	movs	r3, #8
 800106c:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2202      	movs	r2, #2
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f804 	bl	8001084 <transmit_buf>
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <transmit_buf>:
	buf[1] = buf[0];
	buf[0] = 0x3B;
	transmit_buf(hi2c, buf, 2);
}

uint8_t transmit_buf(I2C_HandleTypeDef *hi2c, uint8_t *buf, uint16_t bytes) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, bytes, 1000);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001098:	9200      	str	r2, [sp, #0]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	2150      	movs	r1, #80	@ 0x50
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f004 f82e 	bl	8005100 <HAL_I2C_Master_Transmit>
 80010a4:	4603      	mov	r3, r0
 80010a6:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f838 	bl	8001120 <check_ret>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <read_to_buf>:

uint8_t read_to_buf(I2C_HandleTypeDef *hi2c, uint8_t subAddr, uint8_t *buf, uint16_t bytes){
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b088      	sub	sp, #32
 80010be:	af02      	add	r7, sp, #8
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	461a      	mov	r2, r3
 80010c6:	460b      	mov	r3, r1
 80010c8:	72fb      	strb	r3, [r7, #11]
 80010ca:	4613      	mov	r3, r2
 80010cc:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, &subAddr, 1, 1000);
 80010ce:	f107 020b 	add.w	r2, r7, #11
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2150      	movs	r1, #80	@ 0x50
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f004 f80f 	bl	8005100 <HAL_I2C_Master_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	75fb      	strb	r3, [r7, #23]
	if (!check_ret(ret)) return 0;
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f819 	bl	8001120 <check_ret>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <read_to_buf+0x3e>
 80010f4:	2300      	movs	r3, #0
 80010f6:	e00f      	b.n	8001118 <read_to_buf+0x5e>
	ret = HAL_I2C_Master_Receive(hi2c, SAD_R, buf, bytes, 1000);
 80010f8:	893b      	ldrh	r3, [r7, #8]
 80010fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	2151      	movs	r1, #81	@ 0x51
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f004 f913 	bl	8005330 <HAL_I2C_Master_Receive>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f805 	bl	8001120 <check_ret>
 8001116:	4603      	mov	r3, r0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <check_ret>:

uint8_t check_ret(HAL_StatusTypeDef ret) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK) {
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <check_ret+0x14>
		return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <check_ret+0x16>
	} else {
		// TODO:
		// add more descriptive error
		//printf("i2c error!\n\r");
		return 0;
 8001134:	2300      	movs	r3, #0
	}
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <lin_acc_vec_raw>:

void lin_acc_vec_raw(I2C_HandleTypeDef *hi2c, int16_t* vec) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];
	read_to_buf(hi2c, 0x28, buf, 6);
 800114c:	f107 0208 	add.w	r2, r7, #8
 8001150:	2306      	movs	r3, #6
 8001152:	2128      	movs	r1, #40	@ 0x28
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffb0 	bl	80010ba <read_to_buf>
	vec[0] = fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 800115a:	7a3b      	ldrb	r3, [r7, #8]
 800115c:	b21a      	sxth	r2, r3
 800115e:	7a7b      	ldrb	r3, [r7, #9]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21b      	sxth	r3, r3
 8001168:	b29b      	uxth	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff3a 	bl	8000fe4 <fix_msb_loss>
 8001170:	4603      	mov	r3, r0
 8001172:	b21a      	sxth	r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	801a      	strh	r2, [r3, #0]
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	b21a      	sxth	r2, r3
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff2b 	bl	8000fe4 <fix_msb_loss>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3302      	adds	r3, #2
 8001196:	b212      	sxth	r2, r2
 8001198:	801a      	strh	r2, [r3, #0]
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	b21a      	sxth	r2, r3
 800119e:	7b7b      	ldrb	r3, [r7, #13]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff1a 	bl	8000fe4 <fix_msb_loss>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3304      	adds	r3, #4
 80011b8:	b212      	sxth	r2, r2
 80011ba:	801a      	strh	r2, [r3, #0]
	return;
 80011bc:	bf00      	nop
}
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <lin_acc_vec>:
	uint8_t buf[2];
	read_to_buf(hi2c, 0x2C, buf, 2);
	return fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
}

void lin_acc_vec(I2C_HandleTypeDef *hi2c, float* vec){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	int16_t veci[3];
	lin_acc_vec_raw(hi2c, veci);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffb4 	bl	8001142 <lin_acc_vec_raw>
	vec[0] = veci[0] / 100.0f;
 80011da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e6:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001234 <lin_acc_vec+0x70>
 80011ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	edc3 7a00 	vstr	s15, [r3]
	vec[1] = veci[1] / 100.0f;
 80011f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3304      	adds	r3, #4
 8001204:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001234 <lin_acc_vec+0x70>
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	edc3 7a00 	vstr	s15, [r3]
	vec[2] = veci[2] / 100.0f;
 8001210:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3308      	adds	r3, #8
 8001220:	eddf 6a04 	vldr	s13, [pc, #16]	@ 8001234 <lin_acc_vec+0x70>
 8001224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001228:	edc3 7a00 	vstr	s15, [r3]
	return;
 800122c:	bf00      	nop
}
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	42c80000 	.word	0x42c80000

08001238 <grav_vec_raw>:
float z_lin_acc(I2C_HandleTypeDef *hi2c){
	return z_lin_acc_raw(hi2c) / 100.0f;
}


void grav_vec_raw(I2C_HandleTypeDef *hi2c, int16_t* vec) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];
	read_to_buf(hi2c, 0x2E, buf, 6);
 8001242:	f107 0208 	add.w	r2, r7, #8
 8001246:	2306      	movs	r3, #6
 8001248:	212e      	movs	r1, #46	@ 0x2e
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff35 	bl	80010ba <read_to_buf>
	vec[0] = fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 8001250:	7a3b      	ldrb	r3, [r7, #8]
 8001252:	b21a      	sxth	r2, r3
 8001254:	7a7b      	ldrb	r3, [r7, #9]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff febf 	bl	8000fe4 <fix_msb_loss>
 8001266:	4603      	mov	r3, r0
 8001268:	b21a      	sxth	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	801a      	strh	r2, [r3, #0]
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
 800126e:	7abb      	ldrb	r3, [r7, #10]
 8001270:	b21a      	sxth	r2, r3
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21b      	sxth	r3, r3
 800127c:	b29b      	uxth	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff feb0 	bl	8000fe4 <fix_msb_loss>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3302      	adds	r3, #2
 800128c:	b212      	sxth	r2, r2
 800128e:	801a      	strh	r2, [r3, #0]
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	b21a      	sxth	r2, r3
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe9f 	bl	8000fe4 <fix_msb_loss>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3304      	adds	r3, #4
 80012ae:	b212      	sxth	r2, r2
 80012b0:	801a      	strh	r2, [r3, #0]
	return;
 80012b2:	bf00      	nop
}
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <grav_vec>:
	uint8_t buf[2];
	read_to_buf(hi2c, 0x32, buf, 2);
	return fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
}

void grav_vec(I2C_HandleTypeDef *hi2c, float* vec) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	int16_t veci[3];
	grav_vec_raw(hi2c, veci);
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4619      	mov	r1, r3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ffb3 	bl	8001238 <grav_vec_raw>
	vec[0] = veci[0] / 100.0f;
 80012d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012de:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800132c <grav_vec+0x70>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	edc3 7a00 	vstr	s15, [r3]
	vec[1] = veci[1] / 100.0f;
 80012ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	3304      	adds	r3, #4
 80012fc:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800132c <grav_vec+0x70>
 8001300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001304:	edc3 7a00 	vstr	s15, [r3]
	vec[2] = veci[2] / 100.0f;
 8001308:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3308      	adds	r3, #8
 8001318:	eddf 6a04 	vldr	s13, [pc, #16]	@ 800132c <grav_vec+0x70>
 800131c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001320:	edc3 7a00 	vstr	s15, [r3]
	return;
 8001324:	bf00      	nop
}
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	42c80000 	.word	0x42c80000

08001330 <initPulseSensor>:
static bool first_beat = true;		// first beat bool
static bool second_beat = false; 	// second beat bool
static bool pulse = false; 		// pulse recognized bool
static int samples_since_last_beat = 0;

void initPulseSensor(ADC_HandleTypeDef *hadc_in) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	hadc = hadc_in;
 8001338:	4a04      	ldr	r2, [pc, #16]	@ (800134c <initPulseSensor+0x1c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000022c 	.word	0x2000022c

08001350 <updatePulseSensor>:

void updatePulseSensor(void){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	read_ADC();
 8001354:	f000 f804 	bl	8001360 <read_ADC>
	get_pulse();
 8001358:	f000 f834 	bl	80013c4 <get_pulse>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <read_ADC>:

void read_ADC(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	//uint32_t val;
	unsigned int val;

	HAL_ADC_Start(hadc);
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <read_ADC+0x54>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fd7e 	bl	8003e6c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 0xFFFFFFFF);
 8001370:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <read_ADC+0x54>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fdda 	bl	8003f32 <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(hadc);
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <read_ADC+0x54>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fe64 	bl	8004050 <HAL_ADC_GetValue>
 8001388:	6078      	str	r0, [r7, #4]
	signal = val * 3.3f / 4096.0f;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001394:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80013b8 <read_ADC+0x58>
 8001398:	ee27 7a87 	vmul.f32	s14, s15, s14
 800139c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80013bc <read_ADC+0x5c>
 80013a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <read_ADC+0x60>)
 80013a6:	edc3 7a00 	vstr	s15, [r3]
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000022c 	.word	0x2000022c
 80013b8:	40533333 	.word	0x40533333
 80013bc:	45800000 	.word	0x45800000
 80013c0:	2000025c 	.word	0x2000025c

080013c4 <get_pulse>:

void get_pulse() {
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
	++samples_since_last_beat;
 80013ca:	4b95      	ldr	r3, [pc, #596]	@ (8001620 <get_pulse+0x25c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a93      	ldr	r2, [pc, #588]	@ (8001620 <get_pulse+0x25c>)
 80013d2:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_beat * SAMPLE_PERIOD;
 80013d4:	4b92      	ldr	r3, [pc, #584]	@ (8001620 <get_pulse+0x25c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	603b      	str	r3, [r7, #0]
	if (signal < thresh && N > (IBI / 5) * 3) { // avoid dicrotic noise by waiting 3/5 of last IBI
 80013e0:	4b90      	ldr	r3, [pc, #576]	@ (8001624 <get_pulse+0x260>)
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	4b90      	ldr	r3, [pc, #576]	@ (8001628 <get_pulse+0x264>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	d51c      	bpl.n	8001430 <get_pulse+0x6c>
 80013f6:	4b8d      	ldr	r3, [pc, #564]	@ (800162c <get_pulse+0x268>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a8d      	ldr	r2, [pc, #564]	@ (8001630 <get_pulse+0x26c>)
 80013fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001400:	1052      	asrs	r2, r2, #1
 8001402:	17db      	asrs	r3, r3, #31
 8001404:	1ad2      	subs	r2, r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	dd0e      	ble.n	8001430 <get_pulse+0x6c>
	    if (signal < trough_amp) {                        // T is the trough
 8001412:	4b84      	ldr	r3, [pc, #528]	@ (8001624 <get_pulse+0x260>)
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	4b86      	ldr	r3, [pc, #536]	@ (8001634 <get_pulse+0x270>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d503      	bpl.n	8001430 <get_pulse+0x6c>
	      trough_amp = signal;                            // keep track of lowest point in pulse wave
 8001428:	4b7e      	ldr	r3, [pc, #504]	@ (8001624 <get_pulse+0x260>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a81      	ldr	r2, [pc, #516]	@ (8001634 <get_pulse+0x270>)
 800142e:	6013      	str	r3, [r2, #0]
	    }
	  }

	  if (signal > thresh && signal > peak_amp) {       // thresh condition helps avoid noise
 8001430:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <get_pulse+0x260>)
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	4b7c      	ldr	r3, [pc, #496]	@ (8001628 <get_pulse+0x264>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001444:	dd0e      	ble.n	8001464 <get_pulse+0xa0>
 8001446:	4b77      	ldr	r3, [pc, #476]	@ (8001624 <get_pulse+0x260>)
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	4b7a      	ldr	r3, [pc, #488]	@ (8001638 <get_pulse+0x274>)
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	dd03      	ble.n	8001464 <get_pulse+0xa0>
		  peak_amp = signal;                              // P is the peak
 800145c:	4b71      	ldr	r3, [pc, #452]	@ (8001624 <get_pulse+0x260>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a75      	ldr	r2, [pc, #468]	@ (8001638 <get_pulse+0x274>)
 8001462:	6013      	str	r3, [r2, #0]
	  }                                          // keep track of highest point in pulse wave

	  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	  // signal surges up in value every time there is a pulse
	  if (N > 250) {                             // avoid high frequency noise
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2bfa      	cmp	r3, #250	@ 0xfa
 8001468:	dd7c      	ble.n	8001564 <get_pulse+0x1a0>
	    if ( (signal > thresh) && (pulse == false) && (N > ((IBI / 5) * 3)) ) {
 800146a:	4b6e      	ldr	r3, [pc, #440]	@ (8001624 <get_pulse+0x260>)
 800146c:	ed93 7a00 	vldr	s14, [r3]
 8001470:	4b6d      	ldr	r3, [pc, #436]	@ (8001628 <get_pulse+0x264>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	dd71      	ble.n	8001564 <get_pulse+0x1a0>
 8001480:	4b6e      	ldr	r3, [pc, #440]	@ (800163c <get_pulse+0x278>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f083 0301 	eor.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d06a      	beq.n	8001564 <get_pulse+0x1a0>
 800148e:	4b67      	ldr	r3, [pc, #412]	@ (800162c <get_pulse+0x268>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a67      	ldr	r2, [pc, #412]	@ (8001630 <get_pulse+0x26c>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	1052      	asrs	r2, r2, #1
 800149a:	17db      	asrs	r3, r3, #31
 800149c:	1ad2      	subs	r2, r2, r3
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dd5c      	ble.n	8001564 <get_pulse+0x1a0>
	      pulse = true;                             // set the Pulse flag when we think there is a pulse
 80014aa:	4b64      	ldr	r3, [pc, #400]	@ (800163c <get_pulse+0x278>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
	      IBI = N;    // measure time between beats in mS
 80014b0:	4a5e      	ldr	r2, [pc, #376]	@ (800162c <get_pulse+0x268>)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	6013      	str	r3, [r2, #0]
	      samples_since_last_beat = 0;
 80014b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001620 <get_pulse+0x25c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

	      if (second_beat) {                      // if this is the second beat, if secondBeat == TRUE
 80014bc:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <get_pulse+0x27c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d011      	beq.n	80014e8 <get_pulse+0x124>
	        second_beat = false;                    // clear secondBeat flag
 80014c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001640 <get_pulse+0x27c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e008      	b.n	80014e2 <get_pulse+0x11e>
	          rate[i] = IBI;
 80014d0:	4b56      	ldr	r3, [pc, #344]	@ (800162c <get_pulse+0x268>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	495b      	ldr	r1, [pc, #364]	@ (8001644 <get_pulse+0x280>)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3301      	adds	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	ddf3      	ble.n	80014d0 <get_pulse+0x10c>
	        }
	      }

	      if (first_beat) {                       // if it's the first time we found a beat, if firstBeat == TRUE
 80014e8:	4b57      	ldr	r3, [pc, #348]	@ (8001648 <get_pulse+0x284>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <get_pulse+0x13a>
	    	first_beat = 0;                       // clear firstBeat flag
 80014f0:	4b55      	ldr	r3, [pc, #340]	@ (8001648 <get_pulse+0x284>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
	    	second_beat = 1;                      // set the second beat flag
 80014f6:	4b52      	ldr	r3, [pc, #328]	@ (8001640 <get_pulse+0x27c>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
	        // IBI value is unreliable so discard it
	        return;
 80014fc:	e08a      	b.n	8001614 <get_pulse+0x250>
	      }


	      // keep a running total of the last 10 IBI values
	      int runningTotal = 0;                  // clear the runningTotal variable
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]

	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	e012      	b.n	800152e <get_pulse+0x16a>
	        rate[i] = rate[i + 1];                // and drop the oldest IBI value
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3301      	adds	r3, #1
 800150c:	4a4d      	ldr	r2, [pc, #308]	@ (8001644 <get_pulse+0x280>)
 800150e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001512:	494c      	ldr	r1, [pc, #304]	@ (8001644 <get_pulse+0x280>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        runningTotal += rate[i];              // add up the 9 oldest IBI values
 800151a:	4a4a      	ldr	r2, [pc, #296]	@ (8001644 <get_pulse+0x280>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4413      	add	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3301      	adds	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b08      	cmp	r3, #8
 8001532:	dde9      	ble.n	8001508 <get_pulse+0x144>
	      }

	      rate[BUF_LENGTH - 1] = IBI;                          // add the latest IBI to the rate array
 8001534:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <get_pulse+0x268>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a42      	ldr	r2, [pc, #264]	@ (8001644 <get_pulse+0x280>)
 800153a:	6253      	str	r3, [r2, #36]	@ 0x24
	      runningTotal += rate[BUF_LENGTH - 1];                // add the latest IBI to runningTotal
 800153c:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <get_pulse+0x280>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	4413      	add	r3, r2
 8001544:	60bb      	str	r3, [r7, #8]
	      runningTotal /= BUF_LENGTH;                     // average the last 10 IBI values
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	4a39      	ldr	r2, [pc, #228]	@ (8001630 <get_pulse+0x26c>)
 800154a:	fb82 1203 	smull	r1, r2, r2, r3
 800154e:	1092      	asrs	r2, r2, #2
 8001550:	17db      	asrs	r3, r3, #31
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	60bb      	str	r3, [r7, #8]
	      BPM = 60000 / runningTotal;             // how many beats can fit into a minute? that's BPM!
 8001556:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001560:	4a3a      	ldr	r2, [pc, #232]	@ (800164c <get_pulse+0x288>)
 8001562:	6013      	str	r3, [r2, #0]
	      //fadeLevel = MAX_FADE_LEVEL;             // If we're fading, re-light that LED.
	    }
	  }

	  if (signal < thresh && pulse) {  // when the values are going down, the beat is over
 8001564:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <get_pulse+0x260>)
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <get_pulse+0x264>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	d528      	bpl.n	80015cc <get_pulse+0x208>
 800157a:	4b30      	ldr	r3, [pc, #192]	@ (800163c <get_pulse+0x278>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d024      	beq.n	80015cc <get_pulse+0x208>
	    pulse = false;                         // reset the Pulse flag so we can do it again
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <get_pulse+0x278>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
	    amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <get_pulse+0x274>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <get_pulse+0x270>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	4b2d      	ldr	r3, [pc, #180]	@ (8001650 <get_pulse+0x28c>)
 800159a:	edc3 7a00 	vstr	s15, [r3]
	    thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 800159e:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <get_pulse+0x28c>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80015a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015ac:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <get_pulse+0x270>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <get_pulse+0x264>)
 80015b8:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <get_pulse+0x264>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <get_pulse+0x274>)
 80015c2:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <get_pulse+0x264>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001634 <get_pulse+0x270>)
 80015ca:	6013      	str	r3, [r2, #0]
	  }

	  if (N > 2500) {                          // if 2.5 seconds go by without a beat
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80015d2:	4293      	cmp	r3, r2
 80015d4:	dd1e      	ble.n	8001614 <get_pulse+0x250>
	    thresh = THRESH_DEFAULT;                // set thresh default
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <get_pulse+0x264>)
 80015d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001654 <get_pulse+0x290>)
 80015da:	601a      	str	r2, [r3, #0]
	    peak_amp = THRESH_DEFAULT;                               // set P default
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <get_pulse+0x274>)
 80015de:	4a1d      	ldr	r2, [pc, #116]	@ (8001654 <get_pulse+0x290>)
 80015e0:	601a      	str	r2, [r3, #0]
	    trough_amp = THRESH_DEFAULT;                               // set T default
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <get_pulse+0x270>)
 80015e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <get_pulse+0x290>)
 80015e6:	601a      	str	r2, [r3, #0]
	    samples_since_last_beat = 0;          // bring the lastBeatTime up to date
 80015e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <get_pulse+0x25c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
	    first_beat = true;                      // set these to avoid noise
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <get_pulse+0x284>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
	    second_beat = false;                    // when we get the heartbeat back
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <get_pulse+0x27c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
	    BPM = 0;
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <get_pulse+0x288>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
	    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <get_pulse+0x268>)
 8001602:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001606:	601a      	str	r2, [r3, #0]
	    pulse = false;
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <get_pulse+0x278>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	    amp = 100;                  // beat amplitude 1/10 of input range.
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <get_pulse+0x28c>)
 8001610:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <get_pulse+0x294>)
 8001612:	601a      	str	r2, [r3, #0]

	  }
}
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000264 	.word	0x20000264
 8001624:	2000025c 	.word	0x2000025c
 8001628:	20000008 	.word	0x20000008
 800162c:	20000000 	.word	0x20000000
 8001630:	66666667 	.word	0x66666667
 8001634:	20000010 	.word	0x20000010
 8001638:	2000000c 	.word	0x2000000c
 800163c:	20000261 	.word	0x20000261
 8001640:	20000260 	.word	0x20000260
 8001644:	20000234 	.word	0x20000234
 8001648:	20000014 	.word	0x20000014
 800164c:	20000230 	.word	0x20000230
 8001650:	20000004 	.word	0x20000004
 8001654:	3fcccccd 	.word	0x3fcccccd
 8001658:	42c80000 	.word	0x42c80000

0800165c <get_BPM>:

int get_BPM(void) {
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return BPM;
 8001660:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <get_BPM+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000230 	.word	0x20000230

08001674 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	ed87 0a01 	vstr	s0, [r7, #4]
 800167e:	4603      	mov	r3, r0
 8001680:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001682:	ed97 7a01 	vldr	s14, [r7, #4]
 8001686:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001708 <GPS_nmea_to_dec+0x94>
 800168a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001692:	ee17 3a90 	vmov	r3, s15
 8001696:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2264      	movs	r2, #100	@ 0x64
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80016b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b8:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800170c <GPS_nmea_to_dec+0x98>
 80016bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c0:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80016d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	2b53      	cmp	r3, #83	@ 0x53
 80016de:	d002      	beq.n	80016e6 <GPS_nmea_to_dec+0x72>
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b57      	cmp	r3, #87	@ 0x57
 80016e4:	d105      	bne.n	80016f2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80016e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ea:	eef1 7a67 	vneg.f32	s15, s15
 80016ee:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	ee07 3a90 	vmov	s15, r3
}
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	42c80000 	.word	0x42c80000
 800170c:	42700000 	.word	0x42700000

08001710 <updateGPS>:

updateGPS(){
 8001710:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001714:	b08e      	sub	sp, #56	@ 0x38
 8001716:	af00      	add	r7, sp, #0
	// imu_ctr = 1;
	  int counter = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	@ 0x34
	  int counter2 = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	@ 0x30
	  while(1){
		  HAL_StatusTypeDef ret = HAL_UART_Receive(&huart1, a, 1, 5000);
 8001720:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001724:	2201      	movs	r2, #1
 8001726:	4980      	ldr	r1, [pc, #512]	@ (8001928 <updateGPS+0x218>)
 8001728:	4880      	ldr	r0, [pc, #512]	@ (800192c <updateGPS+0x21c>)
 800172a:	f008 f8e2 	bl	80098f2 <HAL_UART_Receive>
 800172e:	4603      	mov	r3, r0
 8001730:	75fb      	strb	r3, [r7, #23]
		  if (ret == HAL_TIMEOUT) {
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b03      	cmp	r3, #3
 8001736:	f000 81b6 	beq.w	8001aa6 <updateGPS+0x396>
			  break;
		  }
		  if(a[0] == '$'){
 800173a:	4b7b      	ldr	r3, [pc, #492]	@ (8001928 <updateGPS+0x218>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b24      	cmp	r3, #36	@ 0x24
 8001740:	f040 810d 	bne.w	800195e <updateGPS+0x24e>
			  gps_buf[gps_idx++] = a[0];
 8001744:	4b7a      	ldr	r3, [pc, #488]	@ (8001930 <updateGPS+0x220>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	b2d1      	uxtb	r1, r2
 800174c:	4a78      	ldr	r2, [pc, #480]	@ (8001930 <updateGPS+0x220>)
 800174e:	7011      	strb	r1, [r2, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <updateGPS+0x218>)
 8001754:	7819      	ldrb	r1, [r3, #0]
 8001756:	4b77      	ldr	r3, [pc, #476]	@ (8001934 <updateGPS+0x224>)
 8001758:	5499      	strb	r1, [r3, r2]
			  //printf("%c", a[0]);
			  while (a[0] != 10){
 800175a:	e011      	b.n	8001780 <updateGPS+0x70>
				  HAL_UART_Receive(&huart1, a, 1, 5000);
 800175c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001760:	2201      	movs	r2, #1
 8001762:	4971      	ldr	r1, [pc, #452]	@ (8001928 <updateGPS+0x218>)
 8001764:	4871      	ldr	r0, [pc, #452]	@ (800192c <updateGPS+0x21c>)
 8001766:	f008 f8c4 	bl	80098f2 <HAL_UART_Receive>
				  gps_buf[gps_idx++] = a[0];
 800176a:	4b71      	ldr	r3, [pc, #452]	@ (8001930 <updateGPS+0x220>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	b2d1      	uxtb	r1, r2
 8001772:	4a6f      	ldr	r2, [pc, #444]	@ (8001930 <updateGPS+0x220>)
 8001774:	7011      	strb	r1, [r2, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4b6b      	ldr	r3, [pc, #428]	@ (8001928 <updateGPS+0x218>)
 800177a:	7819      	ldrb	r1, [r3, #0]
 800177c:	4b6d      	ldr	r3, [pc, #436]	@ (8001934 <updateGPS+0x224>)
 800177e:	5499      	strb	r1, [r3, r2]
			  while (a[0] != 10){
 8001780:	4b69      	ldr	r3, [pc, #420]	@ (8001928 <updateGPS+0x218>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b0a      	cmp	r3, #10
 8001786:	d1e9      	bne.n	800175c <updateGPS+0x4c>
				  //printf("%c", a[0]);
			  }
			  for (int i = 0; i < 7; ++i){
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800178c:	e00b      	b.n	80017a6 <updateGPS+0x96>
				  temp[i] = gps_buf[i];
 800178e:	4a69      	ldr	r2, [pc, #420]	@ (8001934 <updateGPS+0x224>)
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	4413      	add	r3, r2
 8001794:	7819      	ldrb	r1, [r3, #0]
 8001796:	4a68      	ldr	r2, [pc, #416]	@ (8001938 <updateGPS+0x228>)
 8001798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179a:	4413      	add	r3, r2
 800179c:	460a      	mov	r2, r1
 800179e:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; ++i){
 80017a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a2:	3301      	adds	r3, #1
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a8:	2b06      	cmp	r3, #6
 80017aa:	ddf0      	ble.n	800178e <updateGPS+0x7e>
			  }
			  temp[6] = '\0';
 80017ac:	4b62      	ldr	r3, [pc, #392]	@ (8001938 <updateGPS+0x228>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	719a      	strb	r2, [r3, #6]
			  for (int i = 0; i < 128; ++i){
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b6:	e009      	b.n	80017cc <updateGPS+0xbc>
				  printf("%c", gps_buf[i]);////////
 80017b8:	4a5e      	ldr	r2, [pc, #376]	@ (8001934 <updateGPS+0x224>)
 80017ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f00a fb4f 	bl	800be64 <putchar>
			  for (int i = 0; i < 128; ++i){
 80017c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c8:	3301      	adds	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80017d0:	ddf2      	ble.n	80017b8 <updateGPS+0xa8>
			  }


			  //printf("done\n");
			  counter++;
 80017d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d4:	3301      	adds	r3, #1
 80017d6:	637b      	str	r3, [r7, #52]	@ 0x34
			  gps_idx = 0;
 80017d8:	4b55      	ldr	r3, [pc, #340]	@ (8001930 <updateGPS+0x220>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]


			  if (!strncmp((char*)temp, "$GPGGA", 6)){
 80017de:	2206      	movs	r2, #6
 80017e0:	4956      	ldr	r1, [pc, #344]	@ (800193c <updateGPS+0x22c>)
 80017e2:	4855      	ldr	r0, [pc, #340]	@ (8001938 <updateGPS+0x228>)
 80017e4:	f00a fbb1 	bl	800bf4a <strncmp>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 8081 	bne.w	80018f2 <updateGPS+0x1e2>
				  char lat[9];
				  char lat_ns;
				  char lon[9];
				  char lon_ew;

				  for (int i = 18; i < 27; i++){
 80017f0:	2312      	movs	r3, #18
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f4:	e00c      	b.n	8001810 <updateGPS+0x100>
					  lat[i-18] = gps_buf[i];
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	3b12      	subs	r3, #18
 80017fa:	494e      	ldr	r1, [pc, #312]	@ (8001934 <updateGPS+0x224>)
 80017fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017fe:	440a      	add	r2, r1
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	3338      	adds	r3, #56	@ 0x38
 8001804:	443b      	add	r3, r7
 8001806:	f803 2c2c 	strb.w	r2, [r3, #-44]
				  for (int i = 18; i < 27; i++){
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	3301      	adds	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	2b1a      	cmp	r3, #26
 8001814:	ddef      	ble.n	80017f6 <updateGPS+0xe6>

				  }
				  lat_ns = gps_buf[28];
 8001816:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <updateGPS+0x224>)
 8001818:	7f1b      	ldrb	r3, [r3, #28]
 800181a:	75bb      	strb	r3, [r7, #22]
				  for (int i = 30; i < 40; i++){
 800181c:	231e      	movs	r3, #30
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	e00c      	b.n	800183c <updateGPS+0x12c>
					  lon[i-30] = gps_buf[i];
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	3b1e      	subs	r3, #30
 8001826:	4943      	ldr	r1, [pc, #268]	@ (8001934 <updateGPS+0x224>)
 8001828:	6a3a      	ldr	r2, [r7, #32]
 800182a:	440a      	add	r2, r1
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	3338      	adds	r3, #56	@ 0x38
 8001830:	443b      	add	r3, r7
 8001832:	f803 2c38 	strb.w	r2, [r3, #-56]
				  for (int i = 30; i < 40; i++){
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	3301      	adds	r3, #1
 800183a:	623b      	str	r3, [r7, #32]
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	2b27      	cmp	r3, #39	@ 0x27
 8001840:	ddef      	ble.n	8001822 <updateGPS+0x112>
				  }
				  lon_ew = gps_buf[41];
 8001842:	4b3c      	ldr	r3, [pc, #240]	@ (8001934 <updateGPS+0x224>)
 8001844:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001848:	757b      	strb	r3, [r7, #21]
				  for (int i = 0; i < 128; ++i){
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e007      	b.n	8001860 <updateGPS+0x150>
					  gps_buf[i] = 0;
 8001850:	4a38      	ldr	r2, [pc, #224]	@ (8001934 <updateGPS+0x224>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 128; ++i){
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3301      	adds	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b7f      	cmp	r3, #127	@ 0x7f
 8001864:	ddf4      	ble.n	8001850 <updateGPS+0x140>
				  }
				  GPS2.dec_latitude = GPS_nmea_to_dec(strtof(lat, NULL), lat_ns)*(PI/180);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f009 fb55 	bl	800af1c <strtof>
 8001872:	ee07 0a90 	vmov	s15, r0
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	7dbb      	ldrb	r3, [r7, #22]
 800187c:	4618      	mov	r0, r3
 800187e:	eeb0 0a67 	vmov.f32	s0, s15
 8001882:	f7ff fef7 	bl	8001674 <GPS_nmea_to_dec>
 8001886:	ee10 3a10 	vmov	r3, s0
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe5c 	bl	8000548 <__aeabi_f2d>
 8001890:	a323      	add	r3, pc, #140	@ (adr r3, 8001920 <updateGPS+0x210>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe feaf 	bl	80005f8 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f9a1 	bl	8000be8 <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a25      	ldr	r2, [pc, #148]	@ (8001940 <updateGPS+0x230>)
 80018aa:	6053      	str	r3, [r2, #4]
				  GPS2.dec_longitude = GPS_nmea_to_dec(strtof(lon, NULL), lon_ew)*(PI/180);
 80018ac:	463b      	mov	r3, r7
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f009 fb33 	bl	800af1c <strtof>
 80018b6:	ee07 0a90 	vmov	s15, r0
 80018ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018be:	7d7b      	ldrb	r3, [r7, #21]
 80018c0:	4618      	mov	r0, r3
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	f7ff fed5 	bl	8001674 <GPS_nmea_to_dec>
 80018ca:	ee10 3a10 	vmov	r3, s0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe3a 	bl	8000548 <__aeabi_f2d>
 80018d4:	a312      	add	r3, pc, #72	@ (adr r3, 8001920 <updateGPS+0x210>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fe8d 	bl	80005f8 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f97f 	bl	8000be8 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <updateGPS+0x230>)
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e011      	b.n	8001916 <updateGPS+0x206>

			  }
			  else if (!strncmp((char*)temp, "$GPRMC", 6)){
 80018f2:	2206      	movs	r2, #6
 80018f4:	4913      	ldr	r1, [pc, #76]	@ (8001944 <updateGPS+0x234>)
 80018f6:	4810      	ldr	r0, [pc, #64]	@ (8001938 <updateGPS+0x228>)
 80018f8:	f00a fb27 	bl	800bf4a <strncmp>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <updateGPS+0x206>
				//sscanf((char*)gps_buf, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS2.utc_time, &GPS2.nmea_latitude, &GPS2.ns, &GPS2.nmea_longitude, &GPS2.ew, &GPS2.speed_k, &GPS2.course_d, &GPS2.date);
				  GPS2.speed_k++;
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <updateGPS+0x230>)
 8001904:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800190c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <updateGPS+0x230>)
 8001912:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			  }
			  for (int i = 0; i < 128; ++i){
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e01d      	b.n	8001958 <updateGPS+0x248>
 800191c:	f3af 8000 	nop.w
 8001920:	a2529d39 	.word	0xa2529d39
 8001924:	3f91df46 	.word	0x3f91df46
 8001928:	20000268 	.word	0x20000268
 800192c:	200004c0 	.word	0x200004c0
 8001930:	200002f4 	.word	0x200002f4
 8001934:	20000274 	.word	0x20000274
 8001938:	20000370 	.word	0x20000370
 800193c:	0800fe40 	.word	0x0800fe40
 8001940:	200002f8 	.word	0x200002f8
 8001944:	0800fe70 	.word	0x0800fe70
				  gps_buf[i] = 0;
 8001948:	4a5d      	ldr	r2, [pc, #372]	@ (8001ac0 <updateGPS+0x3b0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4413      	add	r3, r2
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 128; ++i){
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	3301      	adds	r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b7f      	cmp	r3, #127	@ 0x7f
 800195c:	ddf4      	ble.n	8001948 <updateGPS+0x238>
			  }
		  }

		  if(counter == 6){
 800195e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001960:	2b06      	cmp	r3, #6
 8001962:	f47f aedd 	bne.w	8001720 <updateGPS+0x10>
//				  printf("long: %f, longdec: %f\n\r", GPS2.nmea_latitude, GPS2.dec_longitude);
//				  printf("lat: %f, latdec: %f\n\r", GPS2.nmea_longitude, GPS2.dec_latitude);
//				  printf("speed: %f\n\r", GPS2.speed_k);
//				  printf("date: %f\n\r", GPS2.utc_time);

			  if(counter2 == 1){
 8001966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 8096 	bne.w	8001a9a <updateGPS+0x38a>
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 800196e:	4b55      	ldr	r3, [pc, #340]	@ (8001ac4 <updateGPS+0x3b4>)
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <updateGPS+0x3b4>)
 8001976:	edd3 7a02 	vldr	s15, [r3, #8]
 800197a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197e:	ee17 0a90 	vmov	r0, s15
 8001982:	f7fe fde1 	bl	8000548 <__aeabi_f2d>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
						  (cos(((double)GPS2.dec_longitude+(double)GPS2.dec_longitude_prev)/2));
 800198a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac4 <updateGPS+0x3b4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdda 	bl	8000548 <__aeabi_f2d>
 8001994:	4680      	mov	r8, r0
 8001996:	4689      	mov	r9, r1
 8001998:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac4 <updateGPS+0x3b4>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdd3 	bl	8000548 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4640      	mov	r0, r8
 80019a8:	4649      	mov	r1, r9
 80019aa:	f7fe fc6f 	bl	800028c <__adddf3>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019be:	f7fe ff45 	bl	800084c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b17 	vmov	d7, r2, r3
 80019ca:	eeb0 0a47 	vmov.f32	s0, s14
 80019ce:	eef0 0a67 	vmov.f32	s1, s15
 80019d2:	f00d f8e5 	bl	800eba0 <cos>
 80019d6:	ec53 2b10 	vmov	r2, r3, d0
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fe0b 	bl	80005f8 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4938      	ldr	r1, [pc, #224]	@ (8001ac8 <updateGPS+0x3b8>)
 80019e8:	e9c1 2300 	strd	r2, r3, [r1]
				  y_cord = (double)(GPS2.dec_latitude - GPS2.dec_latitude_prev);
 80019ec:	4b35      	ldr	r3, [pc, #212]	@ (8001ac4 <updateGPS+0x3b4>)
 80019ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f2:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <updateGPS+0x3b4>)
 80019f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80019f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fc:	ee17 0a90 	vmov	r0, s15
 8001a00:	f7fe fda2 	bl	8000548 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4930      	ldr	r1, [pc, #192]	@ (8001acc <updateGPS+0x3bc>)
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]
				  p2p_dist = sqrt(x_cord*x_cord + y_cord*y_cord)*6371000;
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <updateGPS+0x3b8>)
 8001a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a14:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <updateGPS+0x3b8>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fded 	bl	80005f8 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4614      	mov	r4, r2
 8001a24:	461d      	mov	r5, r3
 8001a26:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <updateGPS+0x3bc>)
 8001a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a2c:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <updateGPS+0x3bc>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fde1 	bl	80005f8 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	f7fe fc25 	bl	800028c <__adddf3>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	ec43 2b17 	vmov	d7, r2, r3
 8001a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a4e:	eef0 0a67 	vmov.f32	s1, s15
 8001a52:	f00d f879 	bl	800eb48 <sqrt>
 8001a56:	ec51 0b10 	vmov	r0, r1, d0
 8001a5a:	a317      	add	r3, pc, #92	@ (adr r3, 8001ab8 <updateGPS+0x3a8>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fdca 	bl	80005f8 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4919      	ldr	r1, [pc, #100]	@ (8001ad0 <updateGPS+0x3c0>)
 8001a6a:	e9c1 2300 	strd	r2, r3, [r1]
				  velocity = p2p_dist/5;// m/s, timer is set for 5 sec
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <updateGPS+0x3c0>)
 8001a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <updateGPS+0x3c4>)
 8001a7a:	f7fe fee7 	bl	800084c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4915      	ldr	r1, [pc, #84]	@ (8001ad8 <updateGPS+0x3c8>)
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]
				  //printf("p2p: %f\nmeter/sec: %f\n\r", p2p_dist,velocity);
				  //printf("Minute Per Mile: %f\n\r", .08333/(p2p_dist/1609.3));
				  GPS2.dec_latitude_prev = GPS2.dec_latitude;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <updateGPS+0x3b4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <updateGPS+0x3b4>)
 8001a8e:	60d3      	str	r3, [r2, #12]
				  GPS2.dec_longitude_prev = GPS2.dec_longitude;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <updateGPS+0x3b4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac4 <updateGPS+0x3b4>)
 8001a96:	6093      	str	r3, [r2, #8]


				  break;
 8001a98:	e006      	b.n	8001aa8 <updateGPS+0x398>
			  }
			  counter2++;
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30
			  counter = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	@ 0x34
	  while(1){
 8001aa4:	e63c      	b.n	8001720 <updateGPS+0x10>
			  break;
 8001aa6:	bf00      	nop


		  }
	  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3738      	adds	r7, #56	@ 0x38
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab2:	bf00      	nop
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	41584dae 	.word	0x41584dae
 8001ac0:	20000274 	.word	0x20000274
 8001ac4:	200002f8 	.word	0x200002f8
 8001ac8:	20000360 	.word	0x20000360
 8001acc:	20000368 	.word	0x20000368
 8001ad0:	20000358 	.word	0x20000358
 8001ad4:	40140000 	.word	0x40140000
 8001ad8:	20000378 	.word	0x20000378

08001adc <get_distance>:

double get_distance(){
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	return p2p_dist;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <get_distance+0x20>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001aea:	eeb0 0a47 	vmov.f32	s0, s14
 8001aee:	eef0 0a67 	vmov.f32	s1, s15
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000358 	.word	0x20000358

08001b00 <get_velocity>:

double get_velocity(){
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	return velocity;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <get_velocity+0x20>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b12:	eef0 0a67 	vmov.f32	s1, s15
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000378 	.word	0x20000378

08001b24 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6858      	ldr	r0, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	8adb      	ldrh	r3, [r3, #22]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f003 fa03 	bl	8004f54 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	1cf9      	adds	r1, r7, #3
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f005 fa30 	bl	8006fbe <HAL_SPI_Transmit>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f107 010f 	add.w	r1, r7, #15
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f005 fb9a 	bl	80072a8 <HAL_SPI_Receive>
 8001b74:	4603      	mov	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6858      	ldr	r0, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8adb      	ldrh	r3, [r3, #22]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4619      	mov	r1, r3
 8001b84:	f003 f9e6 	bl	8004f54 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70fb      	strb	r3, [r7, #3]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ba8:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001baa:	78bb      	ldrb	r3, [r7, #2]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6858      	ldr	r0, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8adb      	ldrh	r3, [r3, #22]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f003 f9c4 	bl	8004f54 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f107 010a 	add.w	r1, r7, #10
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f005 f9f0 	bl	8006fbe <HAL_SPI_Transmit>
 8001bde:	4603      	mov	r3, r0
 8001be0:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6858      	ldr	r0, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	8adb      	ldrh	r3, [r3, #22]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4619      	mov	r1, r3
 8001bee:	f003 f9b1 	bl	8004f54 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b088      	sub	sp, #32
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	4611      	mov	r1, r2
 8001c06:	461a      	mov	r2, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6858      	ldr	r0, [r3, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8adb      	ldrh	r3, [r3, #22]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f003 f998 	bl	8004f54 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f107 0117 	add.w	r1, r7, #23
 8001c30:	2201      	movs	r2, #1
 8001c32:	f005 f9c4 	bl	8006fbe <HAL_SPI_Transmit>
 8001c36:	4603      	mov	r3, r0
 8001c38:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	b292      	uxth	r2, r2
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 fe86 	bl	800795c <HAL_SPI_Transmit_DMA>
 8001c50:	e012      	b.n	8001c78 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	f005 f9ad 	bl	8006fbe <HAL_SPI_Transmit>
 8001c64:	4603      	mov	r3, r0
 8001c66:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6858      	ldr	r0, [r3, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8adb      	ldrh	r3, [r3, #22]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4619      	mov	r1, r3
 8001c74:	f003 f96e 	bl	8004f54 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <read_fifo>:

// Reads data "len" size from FIFO into buffer
static void read_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b088      	sub	sp, #32
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO;
 8001c94:	2300      	movs	r3, #0
 8001c96:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6858      	ldr	r0, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8adb      	ldrh	r3, [r3, #22]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f003 f956 	bl	8004f54 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f107 0117 	add.w	r1, r7, #23
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f005 f982 	bl	8006fbe <HAL_SPI_Transmit>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	61fb      	str	r3, [r7, #28]
  uint32_t res2;
  if (mode == TRANSFER_MODE_DMA) {
 8001cbe:	79bb      	ldrb	r3, [r7, #6]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d10a      	bne.n	8001cda <read_fifo+0x5c>
    res2 = HAL_SPI_Receive_DMA(lora->spi, buffer, len);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	79fa      	ldrb	r2, [r7, #7]
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	68b9      	ldr	r1, [r7, #8]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f005 ff34 	bl	8007b3c <HAL_SPI_Receive_DMA>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	61bb      	str	r3, [r7, #24]
  }

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI receive/transmit failed");
  }
}
 8001cd8:	e012      	b.n	8001d00 <read_fifo+0x82>
    res2 = HAL_SPI_Receive(lora->spi, buffer, len, lora->spi_timeout);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	68b9      	ldr	r1, [r7, #8]
 8001ce8:	f005 fade 	bl	80072a8 <HAL_SPI_Receive>
 8001cec:	4603      	mov	r3, r0
 8001cee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6858      	ldr	r0, [r3, #4]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8adb      	ldrh	r3, [r3, #22]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f003 f92a 	bl	8004f54 <HAL_GPIO_WritePin>
}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <set_mode>:

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2101      	movs	r1, #1
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff36 	bl	8001b92 <write_register>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d40:	d801      	bhi.n	8001d46 <set_OCP+0x16>
    imax = 45;
 8001d42:	232d      	movs	r3, #45	@ 0x2d
 8001d44:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001d46:	78fb      	ldrb	r3, [r7, #3]
 8001d48:	2bf0      	cmp	r3, #240	@ 0xf0
 8001d4a:	d901      	bls.n	8001d50 <set_OCP+0x20>
    imax = 240;
 8001d4c:	23f0      	movs	r3, #240	@ 0xf0
 8001d4e:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	2b81      	cmp	r3, #129	@ 0x81
 8001d54:	d809      	bhi.n	8001d6a <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	3b2d      	subs	r3, #45	@ 0x2d
 8001d5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <set_OCP+0x68>)
 8001d5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d60:	1052      	asrs	r2, r2, #1
 8001d62:	17db      	asrs	r3, r3, #31
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	e008      	b.n	8001d7c <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	331e      	adds	r3, #30
 8001d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d98 <set_OCP+0x68>)
 8001d70:	fb82 1203 	smull	r1, r2, r2, r3
 8001d74:	1092      	asrs	r2, r2, #2
 8001d76:	17db      	asrs	r3, r3, #31
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	f043 0320 	orr.w	r3, r3, #32
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	210b      	movs	r1, #11
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff02 	bl	8001b92 <write_register>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	66666667 	.word	0x66666667

08001d9c <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001da4:	211d      	movs	r1, #29
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff febc 	bl	8001b24 <read_register>
 8001dac:	4603      	mov	r3, r0
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2200      	movs	r2, #0
 8001db6:	461c      	mov	r4, r3
 8001db8:	4615      	mov	r5, r2
 8001dba:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001dbe:	211e      	movs	r1, #30
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff feaf 	bl	8001b24 <read_register>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	091b      	lsrs	r3, r3, #4
 8001dca:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	2b0a      	cmp	r3, #10
 8001dd4:	d908      	bls.n	8001de8 <set_low_data_rate_optimization+0x4c>
 8001dd6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dda:	1fd1      	subs	r1, r2, #7
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	d103      	bne.n	8001de8 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001de0:	7ffb      	ldrb	r3, [r7, #31]
 8001de2:	f043 0308 	orr.w	r3, r3, #8
 8001de6:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001de8:	7ffb      	ldrb	r3, [r7, #31]
 8001dea:	461a      	mov	r2, r3
 8001dec:	2126      	movs	r1, #38	@ 0x26
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fecf 	bl	8001b92 <write_register>
}
 8001df4:	bf00      	nop
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bdb0      	pop	{r4, r5, r7, pc}

08001dfc <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001e04:	2100      	movs	r1, #0
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff7e 	bl	8001d08 <set_mode>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <lora_mode_receive_single>:

  set_mode(lora, OPMODE_RX_CONTINUOUS);
}

void lora_mode_receive_single(lora_sx1276 *lora)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7d5b      	ldrb	r3, [r3, #21]
 8001e20:	461a      	mov	r2, r3
 8001e22:	210f      	movs	r1, #15
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff feb4 	bl	8001b92 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8001e2a:	22f0      	movs	r2, #240	@ 0xf0
 8001e2c:	2112      	movs	r1, #18
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff feaf 	bl	8001b92 <write_register>

  set_mode(lora, OPMODE_RX_SINGLE);
 8001e34:	2106      	movs	r1, #6
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff ff66 	bl	8001d08 <set_mode>
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <lora_mode_standby>:

void lora_mode_standby(lora_sx1276 *lora)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff5a 	bl	8001d08 <set_mode>
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001e64:	211d      	movs	r1, #29
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fe5c 	bl	8001b24 <read_register>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	f023 0301 	bic.w	r3, r3, #1
 8001e76:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	211d      	movs	r1, #29
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fe87 	bl	8001b92 <write_register>
}
 8001e84:	bf00      	nop
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10e      	bne.n	8001ebe <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	d901      	bls.n	8001eaa <lora_set_tx_power+0x1e>
      level = 15;
 8001ea6:	230f      	movs	r3, #15
 8001ea8:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2109      	movs	r1, #9
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fe6b 	bl	8001b92 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001ebc:	e02e      	b.n	8001f1c <lora_set_tx_power+0x90>
    if (level > 20) {
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	2b14      	cmp	r3, #20
 8001ec2:	d901      	bls.n	8001ec8 <lora_set_tx_power+0x3c>
      level = 20;
 8001ec4:	2314      	movs	r3, #20
 8001ec6:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d801      	bhi.n	8001ed2 <lora_set_tx_power+0x46>
      level = 2;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	2b11      	cmp	r3, #17
 8001ed6:	d90c      	bls.n	8001ef2 <lora_set_tx_power+0x66>
      level -= 3;
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	3b03      	subs	r3, #3
 8001edc:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001ede:	2287      	movs	r2, #135	@ 0x87
 8001ee0:	214d      	movs	r1, #77	@ 0x4d
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fe55 	bl	8001b92 <write_register>
      set_OCP(lora, 140);
 8001ee8:	218c      	movs	r1, #140	@ 0x8c
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff20 	bl	8001d30 <set_OCP>
 8001ef0:	e008      	b.n	8001f04 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8001ef2:	2284      	movs	r2, #132	@ 0x84
 8001ef4:	214d      	movs	r1, #77	@ 0x4d
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fe4b 	bl	8001b92 <write_register>
      set_OCP(lora, 97);
 8001efc:	2161      	movs	r1, #97	@ 0x61
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ff16 	bl	8001d30 <set_OCP>
    level -= 2;
 8001f04:	78fb      	ldrb	r3, [r7, #3]
 8001f06:	3b02      	subs	r3, #2
 8001f08:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001f0a:	78fb      	ldrb	r3, [r7, #3]
 8001f0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	2109      	movs	r1, #9
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff fe3b 	bl	8001b92 <write_register>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8001f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f34:	f04f 0000 	mov.w	r0, #0
 8001f38:	f04f 0100 	mov.w	r1, #0
 8001f3c:	04d9      	lsls	r1, r3, #19
 8001f3e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001f42:	04d0      	lsls	r0, r2, #19
 8001f44:	4a19      	ldr	r2, [pc, #100]	@ (8001fac <lora_set_frequency+0x88>)
 8001f46:	f04f 0300 	mov.w	r3, #0
 8001f4a:	f7fe fe9d 	bl	8000c88 <__aeabi_uldivmod>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001f56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	0c02      	lsrs	r2, r0, #16
 8001f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f68:	0c0b      	lsrs	r3, r1, #16
 8001f6a:	b2d3      	uxtb	r3, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2106      	movs	r1, #6
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f7ff fe0e 	bl	8001b92 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001f76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	0a02      	lsrs	r2, r0, #8
 8001f84:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001f88:	0a0b      	lsrs	r3, r1, #8
 8001f8a:	b2d3      	uxtb	r3, r2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2107      	movs	r1, #7
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f7ff fdfe 	bl	8001b92 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001f96:	7c3b      	ldrb	r3, [r7, #16]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2108      	movs	r1, #8
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff fdf8 	bl	8001b92 <write_register>
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	01e84800 	.word	0x01e84800

08001fb0 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d802      	bhi.n	8001fc8 <lora_set_spreading_factor+0x18>
    sf = 6;
 8001fc2:	2306      	movs	r3, #6
 8001fc4:	70fb      	strb	r3, [r7, #3]
 8001fc6:	e004      	b.n	8001fd2 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d901      	bls.n	8001fd2 <lora_set_spreading_factor+0x22>
    sf = 12;
 8001fce:	230c      	movs	r3, #12
 8001fd0:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	2b06      	cmp	r3, #6
 8001fd6:	d10a      	bne.n	8001fee <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001fd8:	22c5      	movs	r2, #197	@ 0xc5
 8001fda:	2131      	movs	r1, #49	@ 0x31
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff fdd8 	bl	8001b92 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	2137      	movs	r1, #55	@ 0x37
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fdd3 	bl	8001b92 <write_register>
 8001fec:	e009      	b.n	8002002 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001fee:	22c3      	movs	r2, #195	@ 0xc3
 8001ff0:	2131      	movs	r1, #49	@ 0x31
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fdcd 	bl	8001b92 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001ff8:	220a      	movs	r2, #10
 8001ffa:	2137      	movs	r1, #55	@ 0x37
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fdc8 	bl	8001b92 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8002002:	211e      	movs	r1, #30
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7ff fd8d 	bl	8001b24 <read_register>
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	b25a      	sxtb	r2, r3
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	b25b      	sxtb	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b25b      	sxtb	r3, r3
 8002022:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	461a      	mov	r2, r3
 8002028:	211e      	movs	r1, #30
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fdb1 	bl	8001b92 <write_register>

  set_low_data_rate_optimization(lora);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff feb3 	bl	8001d9c <set_low_data_rate_optimization>
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	460b      	mov	r3, r1
 8002048:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 800204a:	887b      	ldrh	r3, [r7, #2]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b29b      	uxth	r3, r3
 8002050:	b2db      	uxtb	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	2120      	movs	r1, #32
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fd9b 	bl	8001b92 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f003 030f 	and.w	r3, r3, #15
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	2121      	movs	r1, #33	@ 0x21
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fd91 	bl	8001b92 <write_register>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8002080:	2142      	movs	r1, #66	@ 0x42
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fd4e 	bl	8001b24 <read_register>
 8002088:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 800209a:	2101      	movs	r1, #1
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fd41 	bl	8001b24 <read_register>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d101      	bne.n	80020b4 <lora_is_transmitting+0x22>
 80020b0:	2305      	movs	r3, #5
 80020b2:	e000      	b.n	80020b6 <lora_is_transmitting+0x24>
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	60f8      	str	r0, [r7, #12]
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	4611      	mov	r1, r2
 80020ca:	461a      	mov	r2, r3
 80020cc:	460b      	mov	r3, r1
 80020ce:	71fb      	strb	r3, [r7, #7]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f7ff ffdc 	bl	8002092 <lora_is_transmitting>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 80020e0:	2305      	movs	r3, #5
 80020e2:	e02a      	b.n	800213a <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 80020e4:	2101      	movs	r1, #1
 80020e6:	68f8      	ldr	r0, [r7, #12]
 80020e8:	f7ff fe0e 	bl	8001d08 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f911 	bl	8002314 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	7d1b      	ldrb	r3, [r3, #20]
 80020f6:	461a      	mov	r2, r3
 80020f8:	210d      	movs	r1, #13
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f7ff fd49 	bl	8001b92 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	7d1b      	ldrb	r3, [r3, #20]
 8002104:	461a      	mov	r2, r3
 8002106:	210e      	movs	r1, #14
 8002108:	68f8      	ldr	r0, [r7, #12]
 800210a:	f7ff fd42 	bl	8001b92 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	461a      	mov	r2, r3
 8002112:	2122      	movs	r1, #34	@ 0x22
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff fd3c 	bl	8001b92 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 800211a:	79bb      	ldrb	r3, [r7, #6]
 800211c:	79fa      	ldrb	r2, [r7, #7]
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f7ff fd6a 	bl	8001bfa <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8002126:	79bb      	ldrb	r3, [r7, #6]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <lora_send_packet_base+0x72>
    return LORA_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e004      	b.n	800213a <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8002130:	2103      	movs	r1, #3
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f7ff fde8 	bl	8001d08 <set_mode>
  return LORA_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	4613      	mov	r3, r2
 800214e:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8002150:	79fa      	ldrb	r2, [r7, #7]
 8002152:	2302      	movs	r3, #2
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7ff ffb1 	bl	80020be <lora_send_packet_base>
 800215c:	4603      	mov	r3, r0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b084      	sub	sp, #16
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 800216e:	2112      	movs	r1, #18
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fcd7 	bl	8001b24 <read_register>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002180:	b2db      	uxtb	r3, r3
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <lora_pending_packet_length>:

uint8_t lora_pending_packet_length(lora_sx1276 *lora)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  uint8_t len;

  // Query for current header mode - implicit / explicit
  uint8_t implicit = read_register(lora, REG_MODEM_CONFIG_1) & MC1_IMPLICIT_HEADER_MODE;
 8002192:	211d      	movs	r1, #29
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff fcc5 	bl	8001b24 <read_register>
 800219a:	4603      	mov	r3, r0
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	73bb      	strb	r3, [r7, #14]
  if (implicit) {
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <lora_pending_packet_length+0x2c>
    len = read_register(lora, REG_PAYLOAD_LENGTH);
 80021a8:	2122      	movs	r1, #34	@ 0x22
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fcba 	bl	8001b24 <read_register>
 80021b0:	4603      	mov	r3, r0
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e005      	b.n	80021c2 <lora_pending_packet_length+0x38>
  } else {
    len = read_register(lora, REG_RX_NB_BYTES);
 80021b6:	2113      	movs	r1, #19
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fcb3 	bl	8001b24 <read_register>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
  }

  return len;
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <lora_receive_packet_base>:


static uint8_t lora_receive_packet_base(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error, uint8_t mode)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint8_t res = LORA_EMPTY;
 80021dc:	2306      	movs	r3, #6
 80021de:	75fb      	strb	r3, [r7, #23]
  uint8_t len = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	75bb      	strb	r3, [r7, #22]

  // Read/Reset IRQs
  uint8_t state = read_register(lora, REG_IRQ_FLAGS);
 80021e4:	2112      	movs	r1, #18
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff fc9c 	bl	8001b24 <read_register>
 80021ec:	4603      	mov	r3, r0
 80021ee:	757b      	strb	r3, [r7, #21]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 80021f0:	22f0      	movs	r2, #240	@ 0xf0
 80021f2:	2112      	movs	r1, #18
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7ff fccc 	bl	8001b92 <write_register>

  if (state & IRQ_FLAGS_RX_TIMEOUT) {
 80021fa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	da02      	bge.n	8002208 <lora_receive_packet_base+0x3c>
    DEBUGF("timeout");
    res = LORA_TIMEOUT;
 8002202:	2302      	movs	r3, #2
 8002204:	75fb      	strb	r3, [r7, #23]
    goto done;
 8002206:	e030      	b.n	800226a <lora_receive_packet_base+0x9e>
  }

  if (state & IRQ_FLAGS_RX_DONE) {
 8002208:	7d7b      	ldrb	r3, [r7, #21]
 800220a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d02a      	beq.n	8002268 <lora_receive_packet_base+0x9c>
    if (!(state & IRQ_FLAGS_VALID_HEADER)) {
 8002212:	7d7b      	ldrb	r3, [r7, #21]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <lora_receive_packet_base+0x56>
      DEBUGF("invalid header");
      res = LORA_INVALID_HEADER;
 800221c:	2303      	movs	r3, #3
 800221e:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002220:	e023      	b.n	800226a <lora_receive_packet_base+0x9e>
    }
    // Packet has been received
    if (state & IRQ_FLAGS_PAYLOAD_CRC_ERROR) {
 8002222:	7d7b      	ldrb	r3, [r7, #21]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <lora_receive_packet_base+0x66>
      DEBUGF("CRC error");
      res = LORA_CRC_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	75fb      	strb	r3, [r7, #23]
      goto done;
 8002230:	e01b      	b.n	800226a <lora_receive_packet_base+0x9e>
    }
    // Query for current header mode - implicit / explicit
    len = lora_pending_packet_length(lora);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff ffa9 	bl	800218a <lora_pending_packet_length>
 8002238:	4603      	mov	r3, r0
 800223a:	75bb      	strb	r3, [r7, #22]
    // Set FIFO to beginning of the packet
    uint8_t offset = read_register(lora, REG_FIFO_RX_CURRENT_ADDR);
 800223c:	2110      	movs	r1, #16
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7ff fc70 	bl	8001b24 <read_register>
 8002244:	4603      	mov	r3, r0
 8002246:	753b      	strb	r3, [r7, #20]
    write_register(lora, REG_FIFO_ADDR_PTR, offset);
 8002248:	7d3b      	ldrb	r3, [r7, #20]
 800224a:	461a      	mov	r2, r3
 800224c:	210d      	movs	r1, #13
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff fc9f 	bl	8001b92 <write_register>
    // Read payload
    read_fifo(lora, buffer, len, mode);
 8002254:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002258:	7dba      	ldrb	r2, [r7, #22]
 800225a:	68b9      	ldr	r1, [r7, #8]
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f7ff fd0e 	bl	8001c7e <read_fifo>
    res = LORA_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	75fb      	strb	r3, [r7, #23]
 8002266:	e000      	b.n	800226a <lora_receive_packet_base+0x9e>
  }

done:
 8002268:	bf00      	nop
  if (error) {
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <lora_receive_packet_base+0xaa>
    *error = res;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	7dfa      	ldrb	r2, [r7, #23]
 8002274:	701a      	strb	r2, [r3, #0]
  }

  return len;
 8002276:	7dbb      	ldrb	r3, [r7, #22]
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <lora_receive_packet>:

uint8_t lora_receive_packet(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len, uint8_t *error)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	603b      	str	r3, [r7, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	71fb      	strb	r3, [r7, #7]
  return lora_receive_packet_base(lora, buffer, buffer_len, error, TRANSFER_MODE_BLOCKING);
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	2302      	movs	r3, #2
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7ff ff96 	bl	80021cc <lora_receive_packet_base>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <lora_receive_packet_blocking>:
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
}

uint8_t lora_receive_packet_blocking(lora_sx1276 *lora, uint8_t *buffer, uint8_t buffer_len,
                   uint32_t timeout, uint8_t *error)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	603b      	str	r3, [r7, #0]
 80022b6:	4613      	mov	r3, r2
 80022b8:	71fb      	strb	r3, [r7, #7]
  assert_param(lora && buffer && buffer_len > 0);

  uint32_t elapsed = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]

  // Wait up to timeout for packet
  while (elapsed < timeout) {
 80022be:	e00b      	b.n	80022d8 <lora_receive_packet_blocking+0x2e>
    if (lora_is_packet_available(lora)) {
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff ff50 	bl	8002166 <lora_is_packet_available>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <lora_receive_packet_blocking+0x38>
      break;
    }
    HAL_Delay(1);
 80022cc:	2001      	movs	r0, #1
 80022ce:	f001 fa9f 	bl	8003810 <HAL_Delay>
    elapsed++;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
  while (elapsed < timeout) {
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d3ef      	bcc.n	80022c0 <lora_receive_packet_blocking+0x16>
 80022e0:	e000      	b.n	80022e4 <lora_receive_packet_blocking+0x3a>
      break;
 80022e2:	bf00      	nop
  }

  return lora_receive_packet(lora, buffer, buffer_len, error);
 80022e4:	79fa      	ldrb	r2, [r7, #7]
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff ffc8 	bl	8002280 <lora_receive_packet>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <lora_enable_interrupt_rx_done>:

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8002302:	2200      	movs	r2, #0
 8002304:	2140      	movs	r1, #64	@ 0x40
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fc43 	bl	8001b92 <write_register>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 800231c:	2208      	movs	r2, #8
 800231e:	2112      	movs	r1, #18
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fc36 	bl	8001b92 <write_register>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 800234e:	6a3a      	ldr	r2, [r7, #32]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2201      	movs	r2, #1
 8002358:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800236c:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff fe82 	bl	8002078 <lora_version>
 8002374:	4603      	mov	r3, r0
 8002376:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8002378:	7dfb      	ldrb	r3, [r7, #23]
 800237a:	2b12      	cmp	r3, #18
 800237c:	d001      	beq.n	8002382 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 800237e:	2304      	movs	r3, #4
 8002380:	e031      	b.n	80023e6 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff fd3a 	bl	8001dfc <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f7ff fd37 	bl	8001dfc <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 800238e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f7ff fdc6 	bl	8001f24 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8002398:	2107      	movs	r1, #7
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f7ff fe08 	bl	8001fb0 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80023a0:	210a      	movs	r1, #10
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f7ff fe4b 	bl	800203e <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f7ff fd57 	bl	8001e5c <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80023ae:	210c      	movs	r1, #12
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f7ff fbb7 	bl	8001b24 <read_register>
 80023b6:	4603      	mov	r3, r0
 80023b8:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80023ba:	7dbb      	ldrb	r3, [r7, #22]
 80023bc:	f043 0303 	orr.w	r3, r3, #3
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	210c      	movs	r1, #12
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f7ff fbe3 	bl	8001b92 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80023cc:	2204      	movs	r2, #4
 80023ce:	2126      	movs	r1, #38	@ 0x26
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f7ff fbde 	bl	8001b92 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80023d6:	2111      	movs	r1, #17
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff fd57 	bl	8001e8c <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f7ff fd30 	bl	8001e44 <lora_mode_standby>

  return LORA_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <lora_infINIT>:
/* USER CODE BEGIN 0 */

/* lora initiation helper, executes up to 100 times */
// AHHHH, why recursion??
// Stack frames, but idk if that matters...
uint8_t lora_infINIT(int init_ctr) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	6078      	str	r0, [r7, #4]
	if (init_ctr < 100) {
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b63      	cmp	r3, #99	@ 0x63
 80023fc:	dc18      	bgt.n	8002430 <lora_infINIT+0x40>
		uint8_t res = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 80023fe:	a313      	add	r3, pc, #76	@ (adr r3, 800244c <lora_infINIT+0x5c>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	e9cd 2300 	strd	r2, r3, [sp]
 8002408:	2301      	movs	r3, #1
 800240a:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <lora_infINIT+0x50>)
 800240c:	490d      	ldr	r1, [pc, #52]	@ (8002444 <lora_infINIT+0x54>)
 800240e:	480e      	ldr	r0, [pc, #56]	@ (8002448 <lora_infINIT+0x58>)
 8002410:	f7ff ff8d 	bl	800232e <lora_init>
 8002414:	4603      	mov	r3, r0
 8002416:	73fb      	strb	r3, [r7, #15]
		if (res != LORA_OK) {
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <lora_infINIT+0x3c>
			// Initialization failed
			// retry lol
			return lora_infINIT(init_ctr + 1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3301      	adds	r3, #1
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ffe4 	bl	80023f0 <lora_infINIT>
 8002428:	4603      	mov	r3, r0
 800242a:	e002      	b.n	8002432 <lora_infINIT+0x42>
	  	} else {
	  		return LORA_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <lora_infINIT+0x42>
	  	}
	} else {
		return LORA_ERROR;
 8002430:	2304      	movs	r3, #4
	}
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	f3af 8000 	nop.w
 8002440:	48000400 	.word	0x48000400
 8002444:	20000548 	.word	0x20000548
 8002448:	20000694 	.word	0x20000694
 800244c:	36e55840 	.word	0x36e55840
 8002450:	00000000 	.word	0x00000000

08002454 <IMUcallback>:

/* called @ 200Hz, updates step count based on IMU data */
inline void IMUcallback(void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
	vec_t acc_vec, gravity_vec;
	lin_acc_vec(&hi2c3, &acc_vec.x);
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	4619      	mov	r1, r3
 8002460:	4812      	ldr	r0, [pc, #72]	@ (80024ac <IMUcallback+0x58>)
 8002462:	f7fe feaf 	bl	80011c4 <lin_acc_vec>
	grav_vec(&hi2c3, &gravity_vec.x);
 8002466:	463b      	mov	r3, r7
 8002468:	4619      	mov	r1, r3
 800246a:	4810      	ldr	r0, [pc, #64]	@ (80024ac <IMUcallback+0x58>)
 800246c:	f7fe ff26 	bl	80012bc <grav_vec>
	input_step_data(gravity_vec, acc_vec);
 8002470:	ed97 5a03 	vldr	s10, [r7, #12]
 8002474:	edd7 5a04 	vldr	s11, [r7, #16]
 8002478:	ed97 6a05 	vldr	s12, [r7, #20]
 800247c:	edd7 6a00 	vldr	s13, [r7]
 8002480:	ed97 7a01 	vldr	s14, [r7, #4]
 8002484:	edd7 7a02 	vldr	s15, [r7, #8]
 8002488:	eef0 1a45 	vmov.f32	s3, s10
 800248c:	eeb0 2a65 	vmov.f32	s4, s11
 8002490:	eef0 2a46 	vmov.f32	s5, s12
 8002494:	eeb0 0a66 	vmov.f32	s0, s13
 8002498:	eef0 0a47 	vmov.f32	s1, s14
 800249c:	eeb0 1a67 	vmov.f32	s2, s15
 80024a0:	f000 fbee 	bl	8002c80 <input_step_data>
	//input_acc(gravity_vec, acc_vec);
	// do somethign to add to speed vec or acc vec idk
}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	200003e4 	.word	0x200003e4

080024b0 <loraCallback>:
	}

}

/* loraCallback(): called after gps is read (5s period) to send relevant data */
inline void loraCallback(void) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
	// possibly send 5 seconds late
	// before next* gps poll in order
	// to send at a precise times
	// --> 5 second delay should not have large effect

	lora_data.speed = get_velocity();	// speed from gps file
 80024b4:	f7ff fb24 	bl	8001b00 <get_velocity>
 80024b8:	ec53 2b10 	vmov	r2, r3, d0
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fb92 	bl	8000be8 <__aeabi_d2f>
 80024c4:	4603      	mov	r3, r0
 80024c6:	4a10      	ldr	r2, [pc, #64]	@ (8002508 <loraCallback+0x58>)
 80024c8:	6013      	str	r3, [r2, #0]
	lora_data.distance = get_distance();	// distance from gps file
 80024ca:	f7ff fb07 	bl	8001adc <get_distance>
 80024ce:	ec53 2b10 	vmov	r2, r3, d0
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe fb87 	bl	8000be8 <__aeabi_d2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <loraCallback+0x58>)
 80024de:	6053      	str	r3, [r2, #4]
	lora_data.heart_rate = get_BPM();	// bpm from pulse sensor file
 80024e0:	f7ff f8bc 	bl	800165c <get_BPM>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4a08      	ldr	r2, [pc, #32]	@ (8002508 <loraCallback+0x58>)
 80024e8:	6093      	str	r3, [r2, #8]
	lora_data.steps = get_step_count();	// step count from steps file
 80024ea:	f000 fd27 	bl	8002f3c <get_step_count>
 80024ee:	4603      	mov	r3, r0
 80024f0:	4a05      	ldr	r2, [pc, #20]	@ (8002508 <loraCallback+0x58>)
 80024f2:	60d3      	str	r3, [r2, #12]
//	lora_data.speed++;	// speed from gps file
//	lora_data.distance++;	// distance from gps file
//	lora_data.heart_rate++;	// bpm from pulse sensor file
//	lora_data.steps++;	// step count from steps file
	lora_send_packet(&lora, (uint8_t*)&lora_data, sizeof(lora_data));
 80024f4:	2210      	movs	r2, #16
 80024f6:	4904      	ldr	r1, [pc, #16]	@ (8002508 <loraCallback+0x58>)
 80024f8:	4804      	ldr	r0, [pc, #16]	@ (800250c <loraCallback+0x5c>)
 80024fa:	f7ff fe22 	bl	8002142 <lora_send_packet>
	lora_mode_receive_single(&lora);
 80024fe:	4803      	ldr	r0, [pc, #12]	@ (800250c <loraCallback+0x5c>)
 8002500:	f7ff fc88 	bl	8001e14 <lora_mode_receive_single>
}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200006b0 	.word	0x200006b0
 800250c:	20000694 	.word	0x20000694

08002510 <HAL_TIM_PeriodElapsedCallback>:

/* timer checker */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a09      	ldr	r2, [pc, #36]	@ (8002540 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d104      	bne.n	800252a <HAL_TIM_PeriodElapsedCallback+0x1a>
		IMUcallback();
 8002520:	f7ff ff98 	bl	8002454 <IMUcallback>
		updatePulseSensor();
 8002524:	f7fe ff14 	bl	8001350 <updatePulseSensor>
	} else if (htim == &htim7) {
		/* timer controlling GPS and LoRa data */
		gps_flag = 1;
		//vibratorCallback();
	}
}
 8002528:	e006      	b.n	8002538 <HAL_TIM_PeriodElapsedCallback+0x28>
	} else if (htim == &htim7) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a05      	ldr	r2, [pc, #20]	@ (8002544 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d102      	bne.n	8002538 <HAL_TIM_PeriodElapsedCallback+0x28>
		gps_flag = 1;
 8002532:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	200005f8 	.word	0x200005f8
 8002544:	20000644 	.word	0x20000644
 8002548:	200006ac 	.word	0x200006ac

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b0a4      	sub	sp, #144	@ 0x90
 8002550:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002552:	f001 f8e8 	bl	8003726 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002556:	f000 f891 	bl	800267c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800255a:	f000 fb0f 	bl	8002b7c <MX_GPIO_Init>
  MX_TIM6_Init();
 800255e:	f000 fa9f 	bl	8002aa0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002562:	f000 f99f 	bl	80028a4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002566:	f000 f8cf 	bl	8002708 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800256a:	f000 f96f 	bl	800284c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800256e:	f000 f9c9 	bl	8002904 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002572:	f000 fa05 	bl	8002980 <MX_TIM1_Init>
  MX_TIM7_Init();
 8002576:	f000 fac9 	bl	8002b0c <MX_TIM7_Init>
  MX_I2C3_Init();
 800257a:	f000 f929 	bl	80027d0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  initPulseSensor(&hadc1);
 800257e:	4836      	ldr	r0, [pc, #216]	@ (8002658 <main+0x10c>)
 8002580:	f7fe fed6 	bl	8001330 <initPulseSensor>
  init_IMU(&hi2c3);
 8002584:	4835      	ldr	r0, [pc, #212]	@ (800265c <main+0x110>)
 8002586:	f7fe fd67 	bl	8001058 <init_IMU>
  uint8_t res = lora_infINIT(0);
 800258a:	2000      	movs	r0, #0
 800258c:	f7ff ff30 	bl	80023f0 <lora_infINIT>
 8002590:	4603      	mov	r3, r0
 8002592:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  if (res != LORA_OK) {
	  // restart whole system idk
  }

  // start your engines!
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002596:	2100      	movs	r1, #0
 8002598:	4831      	ldr	r0, [pc, #196]	@ (8002660 <main+0x114>)
 800259a:	f006 f9b3 	bl	8008904 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800259e:	4831      	ldr	r0, [pc, #196]	@ (8002664 <main+0x118>)
 80025a0:	f006 f904 	bl	80087ac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80025a4:	4830      	ldr	r0, [pc, #192]	@ (8002668 <main+0x11c>)
 80025a6:	f006 f901 	bl	80087ac <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buzz = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  // Wait at least 5 seconds before clearing buzzer
  uint8_t wait = 1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
  lora_enable_interrupt_rx_done(&lora);
 80025b6:	482d      	ldr	r0, [pc, #180]	@ (800266c <main+0x120>)
 80025b8:	f7ff fe9f 	bl	80022fa <lora_enable_interrupt_rx_done>
  char buffer[128];
  lora_mode_receive_single(&lora);
 80025bc:	482b      	ldr	r0, [pc, #172]	@ (800266c <main+0x120>)
 80025be:	f7ff fc29 	bl	8001e14 <lora_mode_receive_single>

  while (1)
  {

	  /* GPS Polling */
	  if (gps_flag) {
 80025c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002670 <main+0x124>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01f      	beq.n	800260a <main+0xbe>
		  updateGPS();
 80025ca:	f7ff f8a1 	bl	8001710 <updateGPS>
		  gps_flag = 0;
 80025ce:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <main+0x124>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
		  loraCallback(); // transmit lora data after GPS bottleneck finishes
 80025d4:	f7ff ff6c 	bl	80024b0 <loraCallback>
		  if (buzz && !wait) {
 80025d8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00d      	beq.n	80025fc <main+0xb0>
 80025e0:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <main+0xb0>
		  		  TIM1->CCR1 = 0;
 80025e8:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <main+0x128>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	635a      	str	r2, [r3, #52]	@ 0x34
		  		  buzz = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		  		  wait = 1;
 80025f4:	2301      	movs	r3, #1
 80025f6:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 80025fa:	e006      	b.n	800260a <main+0xbe>
		  } else if (buzz) {
 80025fc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <main+0xbe>
			  wait = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		  }
	  }
	  if(LoRaRecieve == 1){
 800260a:	4b1b      	ldr	r3, [pc, #108]	@ (8002678 <main+0x12c>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d118      	bne.n	8002644 <main+0xf8>
	  		  //Get data
	  //		  	  lora_mode_receive_continuous(&lora);

	  		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
 8002612:	1d39      	adds	r1, r7, #4
 8002614:	f107 0385 	add.w	r3, r7, #133	@ 0x85
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800261e:	2280      	movs	r2, #128	@ 0x80
 8002620:	4812      	ldr	r0, [pc, #72]	@ (800266c <main+0x120>)
 8002622:	f7ff fe42 	bl	80022aa <lora_receive_packet_blocking>
	  		  	if (!lora_is_packet_available(&lora)) {
 8002626:	4811      	ldr	r0, [pc, #68]	@ (800266c <main+0x120>)
 8002628:	f7ff fd9d 	bl	8002166 <lora_is_packet_available>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d108      	bne.n	8002644 <main+0xf8>
	  		  		LoRaRecieve = 0;
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <main+0x12c>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
	  		  		buzz = 1;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	  		  		lora_mode_receive_single(&lora);
 800263e:	480b      	ldr	r0, [pc, #44]	@ (800266c <main+0x120>)
 8002640:	f7ff fbe8 	bl	8001e14 <lora_mode_receive_single>
	  		  	}

	  }
	  if (buzz) {
 8002644:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002648:	2b00      	cmp	r3, #0
 800264a:	d0ba      	beq.n	80025c2 <main+0x76>
		  TIM1->CCR1 = 65534;
 800264c:	4b09      	ldr	r3, [pc, #36]	@ (8002674 <main+0x128>)
 800264e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002652:	635a      	str	r2, [r3, #52]	@ 0x34
	  if (gps_flag) {
 8002654:	e7b5      	b.n	80025c2 <main+0x76>
 8002656:	bf00      	nop
 8002658:	20000380 	.word	0x20000380
 800265c:	200003e4 	.word	0x200003e4
 8002660:	200005ac 	.word	0x200005ac
 8002664:	200005f8 	.word	0x200005f8
 8002668:	20000644 	.word	0x20000644
 800266c:	20000694 	.word	0x20000694
 8002670:	200006ac 	.word	0x200006ac
 8002674:	40012c00 	.word	0x40012c00
 8002678:	20000690 	.word	0x20000690

0800267c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b096      	sub	sp, #88	@ 0x58
 8002680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	2244      	movs	r2, #68	@ 0x44
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f009 fc55 	bl	800bf3a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002690:	463b      	mov	r3, r7
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
 800269c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800269e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80026a2:	f003 fa73 	bl	8005b8c <HAL_PWREx_ControlVoltageScaling>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80026ac:	f000 fae0 	bl	8002c70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80026b0:	2310      	movs	r3, #16
 80026b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80026b4:	2301      	movs	r3, #1
 80026b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80026bc:	2360      	movs	r3, #96	@ 0x60
 80026be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026c4:	f107 0314 	add.w	r3, r7, #20
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 fab5 	bl	8005c38 <HAL_RCC_OscConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80026d4:	f000 facc 	bl	8002c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026d8:	230f      	movs	r3, #15
 80026da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80026dc:	2300      	movs	r3, #0
 80026de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80026ec:	463b      	mov	r3, r7
 80026ee:	2100      	movs	r1, #0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f003 feb5 	bl	8006460 <HAL_RCC_ClockConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80026fc:	f000 fab8 	bl	8002c70 <Error_Handler>
  }
}
 8002700:	bf00      	nop
 8002702:	3758      	adds	r7, #88	@ 0x58
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800270e:	463b      	mov	r3, r7
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
 800271c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800271e:	4b29      	ldr	r3, [pc, #164]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002720:	4a29      	ldr	r2, [pc, #164]	@ (80027c8 <MX_ADC1_Init+0xc0>)
 8002722:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002726:	2200      	movs	r2, #0
 8002728:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800272a:	4b26      	ldr	r3, [pc, #152]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 800272c:	2200      	movs	r2, #0
 800272e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002730:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002736:	4b23      	ldr	r3, [pc, #140]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800273c:	4b21      	ldr	r3, [pc, #132]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 800273e:	2204      	movs	r2, #4
 8002740:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002742:	4b20      	ldr	r3, [pc, #128]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002744:	2200      	movs	r2, #0
 8002746:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002748:	4b1e      	ldr	r3, [pc, #120]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 800274a:	2200      	movs	r2, #0
 800274c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800274e:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002750:	2201      	movs	r2, #1
 8002752:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800275c:	4b19      	ldr	r3, [pc, #100]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 800275e:	2200      	movs	r2, #0
 8002760:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002762:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002764:	2200      	movs	r2, #0
 8002766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002768:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002770:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002772:	2200      	movs	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002776:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800277e:	4811      	ldr	r0, [pc, #68]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 8002780:	f001 fa32 	bl	8003be8 <HAL_ADC_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800278a:	f000 fa71 	bl	8002c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800278e:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <MX_ADC1_Init+0xc4>)
 8002790:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002792:	2306      	movs	r3, #6
 8002794:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800279a:	237f      	movs	r3, #127	@ 0x7f
 800279c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800279e:	2304      	movs	r3, #4
 80027a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a6:	463b      	mov	r3, r7
 80027a8:	4619      	mov	r1, r3
 80027aa:	4806      	ldr	r0, [pc, #24]	@ (80027c4 <MX_ADC1_Init+0xbc>)
 80027ac:	f001 fc5e 	bl	800406c <HAL_ADC_ConfigChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80027b6:	f000 fa5b 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000380 	.word	0x20000380
 80027c8:	50040000 	.word	0x50040000
 80027cc:	14f00020 	.word	0x14f00020

080027d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002848 <MX_I2C3_Init+0x78>)
 80027d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80027da:	4b1a      	ldr	r3, [pc, #104]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027dc:	f640 6214 	movw	r2, #3604	@ 0xe14
 80027e0:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80027e2:	4b18      	ldr	r3, [pc, #96]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027e8:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027ee:	4b15      	ldr	r3, [pc, #84]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80027f4:	4b13      	ldr	r3, [pc, #76]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80027fa:	4b12      	ldr	r3, [pc, #72]	@ (8002844 <MX_I2C3_Init+0x74>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002800:	4b10      	ldr	r3, [pc, #64]	@ (8002844 <MX_I2C3_Init+0x74>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002806:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <MX_I2C3_Init+0x74>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800280c:	480d      	ldr	r0, [pc, #52]	@ (8002844 <MX_I2C3_Init+0x74>)
 800280e:	f002 fbdc 	bl	8004fca <HAL_I2C_Init>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002818:	f000 fa2a 	bl	8002c70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800281c:	2100      	movs	r1, #0
 800281e:	4809      	ldr	r0, [pc, #36]	@ (8002844 <MX_I2C3_Init+0x74>)
 8002820:	f003 f90e 	bl	8005a40 <HAL_I2CEx_ConfigAnalogFilter>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800282a:	f000 fa21 	bl	8002c70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800282e:	2100      	movs	r1, #0
 8002830:	4804      	ldr	r0, [pc, #16]	@ (8002844 <MX_I2C3_Init+0x74>)
 8002832:	f003 f950 	bl	8005ad6 <HAL_I2CEx_ConfigDigitalFilter>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800283c:	f000 fa18 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200003e4 	.word	0x200003e4
 8002848:	40005c00 	.word	0x40005c00

0800284c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002850:	4b12      	ldr	r3, [pc, #72]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 8002852:	4a13      	ldr	r2, [pc, #76]	@ (80028a0 <MX_LPUART1_UART_Init+0x54>)
 8002854:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 8002858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800285c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800285e:	4b0f      	ldr	r3, [pc, #60]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002864:	4b0d      	ldr	r3, [pc, #52]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 8002866:	2200      	movs	r2, #0
 8002868:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800286a:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 800286c:	2200      	movs	r2, #0
 800286e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002870:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 8002872:	220c      	movs	r2, #12
 8002874:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002876:	4b09      	ldr	r3, [pc, #36]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800287c:	4b07      	ldr	r3, [pc, #28]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 800287e:	2200      	movs	r2, #0
 8002880:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 8002884:	2200      	movs	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002888:	4804      	ldr	r0, [pc, #16]	@ (800289c <MX_LPUART1_UART_Init+0x50>)
 800288a:	f006 ff5b 	bl	8009744 <HAL_UART_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002894:	f000 f9ec 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000438 	.word	0x20000438
 80028a0:	40008000 	.word	0x40008000

080028a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028a8:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028aa:	4a15      	ldr	r2, [pc, #84]	@ (8002900 <MX_USART1_UART_Init+0x5c>)
 80028ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028ae:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80028b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028b6:	4b11      	ldr	r3, [pc, #68]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028ca:	220c      	movs	r2, #12
 80028cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d4:	4b09      	ldr	r3, [pc, #36]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028da:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028e6:	4805      	ldr	r0, [pc, #20]	@ (80028fc <MX_USART1_UART_Init+0x58>)
 80028e8:	f006 ff2c 	bl	8009744 <HAL_UART_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80028f2:	f000 f9bd 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200004c0 	.word	0x200004c0
 8002900:	40013800 	.word	0x40013800

08002904 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002908:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <MX_SPI1_Init+0x74>)
 800290a:	4a1c      	ldr	r2, [pc, #112]	@ (800297c <MX_SPI1_Init+0x78>)
 800290c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <MX_SPI1_Init+0x74>)
 8002910:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002914:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002916:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <MX_SPI1_Init+0x74>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800291c:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <MX_SPI1_Init+0x74>)
 800291e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002922:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002924:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <MX_SPI1_Init+0x74>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800292a:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <MX_SPI1_Init+0x74>)
 800292c:	2200      	movs	r2, #0
 800292e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <MX_SPI1_Init+0x74>)
 8002932:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002936:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002938:	4b0f      	ldr	r3, [pc, #60]	@ (8002978 <MX_SPI1_Init+0x74>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800293e:	4b0e      	ldr	r3, [pc, #56]	@ (8002978 <MX_SPI1_Init+0x74>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002944:	4b0c      	ldr	r3, [pc, #48]	@ (8002978 <MX_SPI1_Init+0x74>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294a:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <MX_SPI1_Init+0x74>)
 800294c:	2200      	movs	r2, #0
 800294e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002950:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <MX_SPI1_Init+0x74>)
 8002952:	2207      	movs	r2, #7
 8002954:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002956:	4b08      	ldr	r3, [pc, #32]	@ (8002978 <MX_SPI1_Init+0x74>)
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <MX_SPI1_Init+0x74>)
 800295e:	2208      	movs	r2, #8
 8002960:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002962:	4805      	ldr	r0, [pc, #20]	@ (8002978 <MX_SPI1_Init+0x74>)
 8002964:	f004 fa88 	bl	8006e78 <HAL_SPI_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800296e:	f000 f97f 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000548 	.word	0x20000548
 800297c:	40013000 	.word	0x40013000

08002980 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b096      	sub	sp, #88	@ 0x58
 8002984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002986:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002992:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	615a      	str	r2, [r3, #20]
 80029a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	222c      	movs	r2, #44	@ 0x2c
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f009 fac4 	bl	800bf3a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029b2:	4b39      	ldr	r3, [pc, #228]	@ (8002a98 <MX_TIM1_Init+0x118>)
 80029b4:	4a39      	ldr	r2, [pc, #228]	@ (8002a9c <MX_TIM1_Init+0x11c>)
 80029b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029b8:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <MX_TIM1_Init+0x118>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029be:	4b36      	ldr	r3, [pc, #216]	@ (8002a98 <MX_TIM1_Init+0x118>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029c4:	4b34      	ldr	r3, [pc, #208]	@ (8002a98 <MX_TIM1_Init+0x118>)
 80029c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029cc:	4b32      	ldr	r3, [pc, #200]	@ (8002a98 <MX_TIM1_Init+0x118>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029d2:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <MX_TIM1_Init+0x118>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002a98 <MX_TIM1_Init+0x118>)
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029de:	482e      	ldr	r0, [pc, #184]	@ (8002a98 <MX_TIM1_Init+0x118>)
 80029e0:	f005 ff38 	bl	8008854 <HAL_TIM_PWM_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80029ea:	f000 f941 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80029fe:	4619      	mov	r1, r3
 8002a00:	4825      	ldr	r0, [pc, #148]	@ (8002a98 <MX_TIM1_Init+0x118>)
 8002a02:	f006 fda3 	bl	800954c <HAL_TIMEx_MasterConfigSynchronization>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002a0c:	f000 f930 	bl	8002c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a10:	2360      	movs	r3, #96	@ 0x60
 8002a12:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a30:	2200      	movs	r2, #0
 8002a32:	4619      	mov	r1, r3
 8002a34:	4818      	ldr	r0, [pc, #96]	@ (8002a98 <MX_TIM1_Init+0x118>)
 8002a36:	f006 f945 	bl	8008cc4 <HAL_TIM_PWM_ConfigChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a40:	f000 f916 	bl	8002c70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	4619      	mov	r1, r3
 8002a78:	4807      	ldr	r0, [pc, #28]	@ (8002a98 <MX_TIM1_Init+0x118>)
 8002a7a:	f006 fdcd 	bl	8009618 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002a84:	f000 f8f4 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a88:	4803      	ldr	r0, [pc, #12]	@ (8002a98 <MX_TIM1_Init+0x118>)
 8002a8a:	f000 fcc3 	bl	8003414 <HAL_TIM_MspPostInit>

}
 8002a8e:	bf00      	nop
 8002a90:	3758      	adds	r7, #88	@ 0x58
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	200005ac 	.word	0x200005ac
 8002a9c:	40012c00 	.word	0x40012c00

08002aa0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa6:	1d3b      	adds	r3, r7, #4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ab0:	4b14      	ldr	r3, [pc, #80]	@ (8002b04 <MX_TIM6_Init+0x64>)
 8002ab2:	4a15      	ldr	r2, [pc, #84]	@ (8002b08 <MX_TIM6_Init+0x68>)
 8002ab4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 8002ab6:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <MX_TIM6_Init+0x64>)
 8002ab8:	2227      	movs	r2, #39	@ 0x27
 8002aba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002abc:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <MX_TIM6_Init+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <MX_TIM6_Init+0x64>)
 8002ac4:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002ac8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <MX_TIM6_Init+0x64>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002ad0:	480c      	ldr	r0, [pc, #48]	@ (8002b04 <MX_TIM6_Init+0x64>)
 8002ad2:	f005 fe13 	bl	80086fc <HAL_TIM_Base_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002adc:	f000 f8c8 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	4619      	mov	r1, r3
 8002aec:	4805      	ldr	r0, [pc, #20]	@ (8002b04 <MX_TIM6_Init+0x64>)
 8002aee:	f006 fd2d 	bl	800954c <HAL_TIMEx_MasterConfigSynchronization>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002af8:	f000 f8ba 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	200005f8 	.word	0x200005f8
 8002b08:	40001000 	.word	0x40001000

08002b0c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b12:	1d3b      	adds	r3, r7, #4
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b1c:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <MX_TIM7_Init+0x68>)
 8002b1e:	4a16      	ldr	r2, [pc, #88]	@ (8002b78 <MX_TIM7_Init+0x6c>)
 8002b20:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 399;
 8002b22:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <MX_TIM7_Init+0x68>)
 8002b24:	f240 128f 	movw	r2, #399	@ 0x18f
 8002b28:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <MX_TIM7_Init+0x68>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8002b30:	4b10      	ldr	r3, [pc, #64]	@ (8002b74 <MX_TIM7_Init+0x68>)
 8002b32:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8002b36:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <MX_TIM7_Init+0x68>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b3e:	480d      	ldr	r0, [pc, #52]	@ (8002b74 <MX_TIM7_Init+0x68>)
 8002b40:	f005 fddc 	bl	80086fc <HAL_TIM_Base_Init>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002b4a:	f000 f891 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4806      	ldr	r0, [pc, #24]	@ (8002b74 <MX_TIM7_Init+0x68>)
 8002b5c:	f006 fcf6 	bl	800954c <HAL_TIMEx_MasterConfigSynchronization>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002b66:	f000 f883 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20000644 	.word	0x20000644
 8002b78:	40001400 	.word	0x40001400

08002b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b82:	f107 030c 	add.w	r3, r7, #12
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	60da      	str	r2, [r3, #12]
 8002b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b92:	4b2c      	ldr	r3, [pc, #176]	@ (8002c44 <MX_GPIO_Init+0xc8>)
 8002b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b96:	4a2b      	ldr	r2, [pc, #172]	@ (8002c44 <MX_GPIO_Init+0xc8>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b9e:	4b29      	ldr	r3, [pc, #164]	@ (8002c44 <MX_GPIO_Init+0xc8>)
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002baa:	4b26      	ldr	r3, [pc, #152]	@ (8002c44 <MX_GPIO_Init+0xc8>)
 8002bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bae:	4a25      	ldr	r2, [pc, #148]	@ (8002c44 <MX_GPIO_Init+0xc8>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bb6:	4b23      	ldr	r3, [pc, #140]	@ (8002c44 <MX_GPIO_Init+0xc8>)
 8002bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2120      	movs	r1, #32
 8002bc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bca:	f002 f9c3 	bl	8004f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8002bce:	2201      	movs	r2, #1
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	481d      	ldr	r0, [pc, #116]	@ (8002c48 <MX_GPIO_Init+0xcc>)
 8002bd4:	f002 f9be 	bl	8004f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bd8:	2320      	movs	r3, #32
 8002bda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be8:	f107 030c 	add.w	r3, r7, #12
 8002bec:	4619      	mov	r1, r3
 8002bee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bf2:	f002 f845 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 030c 	add.w	r3, r7, #12
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480e      	ldr	r0, [pc, #56]	@ (8002c48 <MX_GPIO_Init+0xcc>)
 8002c0e:	f002 f837 	bl	8004c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c12:	2320      	movs	r3, #32
 8002c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002c1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	4619      	mov	r1, r3
 8002c26:	4808      	ldr	r0, [pc, #32]	@ (8002c48 <MX_GPIO_Init+0xcc>)
 8002c28:	f002 f82a 	bl	8004c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2100      	movs	r1, #0
 8002c30:	2017      	movs	r0, #23
 8002c32:	f001 ff5e 	bl	8004af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c36:	2017      	movs	r0, #23
 8002c38:	f001 ff77 	bl	8004b2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c3c:	bf00      	nop
 8002c3e:	3720      	adds	r7, #32
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	48000400 	.word	0x48000400

08002c4c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002c54:	1d39      	adds	r1, r7, #4
 8002c56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	4803      	ldr	r0, [pc, #12]	@ (8002c6c <__io_putchar+0x20>)
 8002c5e:	f006 fdbf 	bl	80097e0 <HAL_UART_Transmit>
  return ch;
 8002c62:	687b      	ldr	r3, [r7, #4]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000438 	.word	0x20000438

08002c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c74:	b672      	cpsid	i
}
 8002c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <Error_Handler+0x8>
 8002c7c:	0000      	movs	r0, r0
	...

08002c80 <input_step_data>:

static bool first_step = true;		// first beat bool
static bool second_step = false; 	// second beat bool
static bool step = false; 		// pulse recognized bool

void input_step_data(vec_t gravity_vec, vec_t acc_vec) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	eeb0 5a40 	vmov.f32	s10, s0
 8002c8a:	eef0 5a60 	vmov.f32	s11, s1
 8002c8e:	eeb0 6a41 	vmov.f32	s12, s2
 8002c92:	eef0 6a61 	vmov.f32	s13, s3
 8002c96:	eeb0 7a42 	vmov.f32	s14, s4
 8002c9a:	eef0 7a62 	vmov.f32	s15, s5
 8002c9e:	ed87 5a03 	vstr	s10, [r7, #12]
 8002ca2:	edc7 5a04 	vstr	s11, [r7, #16]
 8002ca6:	ed87 6a05 	vstr	s12, [r7, #20]
 8002caa:	edc7 6a00 	vstr	s13, [r7]
 8002cae:	ed87 7a01 	vstr	s14, [r7, #4]
 8002cb2:	edc7 7a02 	vstr	s15, [r7, #8]
	curr_step_mag = 0;
 8002cb6:	4b36      	ldr	r3, [pc, #216]	@ (8002d90 <input_step_data+0x110>)
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	601a      	str	r2, [r3, #0]

	// normalize gravity vector
	gravity_vec.x /= 9.8;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd fc41 	bl	8000548 <__aeabi_f2d>
 8002cc6:	a330      	add	r3, pc, #192	@ (adr r3, 8002d88 <input_step_data+0x108>)
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	f7fd fdbe 	bl	800084c <__aeabi_ddiv>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7fd ff86 	bl	8000be8 <__aeabi_d2f>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	60fb      	str	r3, [r7, #12]
	gravity_vec.y /= 9.8;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7fd fc30 	bl	8000548 <__aeabi_f2d>
 8002ce8:	a327      	add	r3, pc, #156	@ (adr r3, 8002d88 <input_step_data+0x108>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f7fd fdad 	bl	800084c <__aeabi_ddiv>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fd ff75 	bl	8000be8 <__aeabi_d2f>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	613b      	str	r3, [r7, #16]
	gravity_vec.z /= 9.8;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fc1f 	bl	8000548 <__aeabi_f2d>
 8002d0a:	a31f      	add	r3, pc, #124	@ (adr r3, 8002d88 <input_step_data+0x108>)
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f7fd fd9c 	bl	800084c <__aeabi_ddiv>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd ff64 	bl	8000be8 <__aeabi_d2f>
 8002d20:	4603      	mov	r3, r0
 8002d22:	617b      	str	r3, [r7, #20]

	// dot product
	curr_step_mag += acc_vec.x * gravity_vec.x;
 8002d24:	ed97 7a00 	vldr	s14, [r7]
 8002d28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d30:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <input_step_data+0x110>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d3a:	4b15      	ldr	r3, [pc, #84]	@ (8002d90 <input_step_data+0x110>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
	curr_step_mag += acc_vec.y * gravity_vec.y;
 8002d40:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d4c:	4b10      	ldr	r3, [pc, #64]	@ (8002d90 <input_step_data+0x110>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <input_step_data+0x110>)
 8002d58:	edc3 7a00 	vstr	s15, [r3]
	curr_step_mag += acc_vec.z * gravity_vec.z;
 8002d5c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d60:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d68:	4b09      	ldr	r3, [pc, #36]	@ (8002d90 <input_step_data+0x110>)
 8002d6a:	edd3 7a00 	vldr	s15, [r3]
 8002d6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d72:	4b07      	ldr	r3, [pc, #28]	@ (8002d90 <input_step_data+0x110>)
 8002d74:	edc3 7a00 	vstr	s15, [r3]

	get_step();
 8002d78:	f000 f80c 	bl	8002d94 <get_step>
	return steps;
 8002d7c:	bf00      	nop
}
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	f3af 8000 	nop.w
 8002d88:	9999999a 	.word	0x9999999a
 8002d8c:	40239999 	.word	0x40239999
 8002d90:	200006c0 	.word	0x200006c0

08002d94 <get_step>:

void get_step() {
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
	++samples_since_last_step;
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f10 <get_step+0x17c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	4a5b      	ldr	r2, [pc, #364]	@ (8002f10 <get_step+0x17c>)
 8002da2:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_step * STEP_SAMPLE_PERIOD;
 8002da4:	4b5a      	ldr	r3, [pc, #360]	@ (8002f10 <get_step+0x17c>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	607b      	str	r3, [r7, #4]

	if (curr_step_mag < thresh && curr_step_mag < trough_amp) { // update trough
 8002db0:	4b58      	ldr	r3, [pc, #352]	@ (8002f14 <get_step+0x180>)
 8002db2:	ed93 7a00 	vldr	s14, [r3]
 8002db6:	4b58      	ldr	r3, [pc, #352]	@ (8002f18 <get_step+0x184>)
 8002db8:	edd3 7a00 	vldr	s15, [r3]
 8002dbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc4:	d50e      	bpl.n	8002de4 <get_step+0x50>
 8002dc6:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <get_step+0x180>)
 8002dc8:	ed93 7a00 	vldr	s14, [r3]
 8002dcc:	4b53      	ldr	r3, [pc, #332]	@ (8002f1c <get_step+0x188>)
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	d503      	bpl.n	8002de4 <get_step+0x50>
		trough_amp = curr_step_mag;
 8002ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8002f14 <get_step+0x180>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a4e      	ldr	r2, [pc, #312]	@ (8002f1c <get_step+0x188>)
 8002de2:	6013      	str	r3, [r2, #0]
	}// if.. lower trough

	if (curr_step_mag > thresh && curr_step_mag > peak_amp && curr_step_mag > min_peak_amp) {  // thresh condition helps avoid noise
 8002de4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f14 <get_step+0x180>)
 8002de6:	ed93 7a00 	vldr	s14, [r3]
 8002dea:	4b4b      	ldr	r3, [pc, #300]	@ (8002f18 <get_step+0x184>)
 8002dec:	edd3 7a00 	vldr	s15, [r3]
 8002df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	dd19      	ble.n	8002e2e <get_step+0x9a>
 8002dfa:	4b46      	ldr	r3, [pc, #280]	@ (8002f14 <get_step+0x180>)
 8002dfc:	ed93 7a00 	vldr	s14, [r3]
 8002e00:	4b47      	ldr	r3, [pc, #284]	@ (8002f20 <get_step+0x18c>)
 8002e02:	edd3 7a00 	vldr	s15, [r3]
 8002e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	dd0e      	ble.n	8002e2e <get_step+0x9a>
 8002e10:	4b40      	ldr	r3, [pc, #256]	@ (8002f14 <get_step+0x180>)
 8002e12:	ed93 7a00 	vldr	s14, [r3]
 8002e16:	4b43      	ldr	r3, [pc, #268]	@ (8002f24 <get_step+0x190>)
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e24:	dd03      	ble.n	8002e2e <get_step+0x9a>
		peak_amp = curr_step_mag;
 8002e26:	4b3b      	ldr	r3, [pc, #236]	@ (8002f14 <get_step+0x180>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f20 <get_step+0x18c>)
 8002e2c:	6013      	str	r3, [r2, #0]
	}// if.. higher peak

	//  NOW IT'S TIME TO LOOK FOR THE step
	// signal surges up in value every time there is a step
	if (N > 100 && (curr_step_mag > thresh) && (step == false) ) {
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b64      	cmp	r3, #100	@ 0x64
 8002e32:	dd1c      	ble.n	8002e6e <get_step+0xda>
 8002e34:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <get_step+0x180>)
 8002e36:	ed93 7a00 	vldr	s14, [r3]
 8002e3a:	4b37      	ldr	r3, [pc, #220]	@ (8002f18 <get_step+0x184>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e48:	dd11      	ble.n	8002e6e <get_step+0xda>
 8002e4a:	4b37      	ldr	r3, [pc, #220]	@ (8002f28 <get_step+0x194>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00a      	beq.n	8002e6e <get_step+0xda>
		step = true;                             // set the Pulse flag when we think there is a pulse
 8002e58:	4b33      	ldr	r3, [pc, #204]	@ (8002f28 <get_step+0x194>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
	  	samples_since_last_step = 0;
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f10 <get_step+0x17c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
	  	++steps;
 8002e64:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <get_step+0x198>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	4a30      	ldr	r2, [pc, #192]	@ (8002f2c <get_step+0x198>)
 8002e6c:	6013      	str	r3, [r2, #0]
	}// if.. new step

	if (curr_step_mag < thresh && step) {  // when the values are going down, the beat is over
 8002e6e:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <get_step+0x180>)
 8002e70:	ed93 7a00 	vldr	s14, [r3]
 8002e74:	4b28      	ldr	r3, [pc, #160]	@ (8002f18 <get_step+0x184>)
 8002e76:	edd3 7a00 	vldr	s15, [r3]
 8002e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e82:	d528      	bpl.n	8002ed6 <get_step+0x142>
 8002e84:	4b28      	ldr	r3, [pc, #160]	@ (8002f28 <get_step+0x194>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d024      	beq.n	8002ed6 <get_step+0x142>
		step = false;                         // reset the Pulse flag so we can do it again
 8002e8c:	4b26      	ldr	r3, [pc, #152]	@ (8002f28 <get_step+0x194>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
		amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 8002e92:	4b23      	ldr	r3, [pc, #140]	@ (8002f20 <get_step+0x18c>)
 8002e94:	ed93 7a00 	vldr	s14, [r3]
 8002e98:	4b20      	ldr	r3, [pc, #128]	@ (8002f1c <get_step+0x188>)
 8002e9a:	edd3 7a00 	vldr	s15, [r3]
 8002e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea2:	4b23      	ldr	r3, [pc, #140]	@ (8002f30 <get_step+0x19c>)
 8002ea4:	edc3 7a00 	vstr	s15, [r3]
		thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 8002ea8:	4b21      	ldr	r3, [pc, #132]	@ (8002f30 <get_step+0x19c>)
 8002eaa:	edd3 7a00 	vldr	s15, [r3]
 8002eae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002eb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002eb6:	4b19      	ldr	r3, [pc, #100]	@ (8002f1c <get_step+0x188>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <get_step+0x184>)
 8002ec2:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 8002ec6:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <get_step+0x184>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a15      	ldr	r2, [pc, #84]	@ (8002f20 <get_step+0x18c>)
 8002ecc:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 8002ece:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <get_step+0x184>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a12      	ldr	r2, [pc, #72]	@ (8002f1c <get_step+0x188>)
 8002ed4:	6013      	str	r3, [r2, #0]
	}// if.. step over

	if (N > 2500) {                          // if 2.5 seconds go by without a beat
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002edc:	4293      	cmp	r3, r2
 8002ede:	dd11      	ble.n	8002f04 <get_step+0x170>
	    thresh = STEP_THRESH_DEFAULT;                // set thresh default
 8002ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <get_step+0x184>)
 8002ee2:	4a14      	ldr	r2, [pc, #80]	@ (8002f34 <get_step+0x1a0>)
 8002ee4:	601a      	str	r2, [r3, #0]
	    peak_amp = STEP_THRESH_DEFAULT;                               // set P default
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <get_step+0x18c>)
 8002ee8:	4a12      	ldr	r2, [pc, #72]	@ (8002f34 <get_step+0x1a0>)
 8002eea:	601a      	str	r2, [r3, #0]
	    trough_amp = STEP_THRESH_DEFAULT;                               // set T default
 8002eec:	4b0b      	ldr	r3, [pc, #44]	@ (8002f1c <get_step+0x188>)
 8002eee:	4a11      	ldr	r2, [pc, #68]	@ (8002f34 <get_step+0x1a0>)
 8002ef0:	601a      	str	r2, [r3, #0]
	    samples_since_last_step = 0;          // bring the lastBeatTime up to date
 8002ef2:	4b07      	ldr	r3, [pc, #28]	@ (8002f10 <get_step+0x17c>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
	    step = false;
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f28 <get_step+0x194>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
	    amp = 20;
 8002efe:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <get_step+0x19c>)
 8002f00:	4a0d      	ldr	r2, [pc, #52]	@ (8002f38 <get_step+0x1a4>)
 8002f02:	601a      	str	r2, [r3, #0]
	}// if.. N>2500
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	200006c4 	.word	0x200006c4
 8002f14:	200006c0 	.word	0x200006c0
 8002f18:	2000001c 	.word	0x2000001c
 8002f1c:	20000028 	.word	0x20000028
 8002f20:	20000020 	.word	0x20000020
 8002f24:	20000024 	.word	0x20000024
 8002f28:	200006cc 	.word	0x200006cc
 8002f2c:	200006c8 	.word	0x200006c8
 8002f30:	20000018 	.word	0x20000018
 8002f34:	41200000 	.word	0x41200000
 8002f38:	41a00000 	.word	0x41a00000

08002f3c <get_step_count>:

int get_step_count(void) {
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
	return steps;
 8002f40:	4b03      	ldr	r3, [pc, #12]	@ (8002f50 <get_step_count+0x14>)
 8002f42:	681b      	ldr	r3, [r3, #0]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200006c8 	.word	0x200006c8

08002f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002f98 <HAL_MspInit+0x44>)
 8002f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f98 <HAL_MspInit+0x44>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f66:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <HAL_MspInit+0x44>)
 8002f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	607b      	str	r3, [r7, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_MspInit+0x44>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f76:	4a08      	ldr	r2, [pc, #32]	@ (8002f98 <HAL_MspInit+0x44>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_MspInit+0x44>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f86:	603b      	str	r3, [r7, #0]
 8002f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000

08002f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b09e      	sub	sp, #120	@ 0x78
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	2254      	movs	r2, #84	@ 0x54
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f008 ffbc 	bl	800bf3a <memset>
  if(hadc->Instance==ADC1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a25      	ldr	r2, [pc, #148]	@ (800305c <HAL_ADC_MspInit+0xc0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d143      	bne.n	8003054 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002fcc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002fd0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fd2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002fec:	2302      	movs	r3, #2
 8002fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002ff0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff6:	f107 0310 	add.w	r3, r7, #16
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fc54 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003006:	f7ff fe33 	bl	8002c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800300a:	4b15      	ldr	r3, [pc, #84]	@ (8003060 <HAL_ADC_MspInit+0xc4>)
 800300c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300e:	4a14      	ldr	r2, [pc, #80]	@ (8003060 <HAL_ADC_MspInit+0xc4>)
 8003010:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003016:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_ADC_MspInit+0xc4>)
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_ADC_MspInit+0xc4>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	4a0e      	ldr	r2, [pc, #56]	@ (8003060 <HAL_ADC_MspInit+0xc4>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800302e:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <HAL_ADC_MspInit+0xc4>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800303a:	2301      	movs	r3, #1
 800303c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800303e:	230b      	movs	r3, #11
 8003040:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2300      	movs	r3, #0
 8003044:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003046:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800304a:	4619      	mov	r1, r3
 800304c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003050:	f001 fe16 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003054:	bf00      	nop
 8003056:	3778      	adds	r7, #120	@ 0x78
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	50040000 	.word	0x50040000
 8003060:	40021000 	.word	0x40021000

08003064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b0a0      	sub	sp, #128	@ 0x80
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800307c:	f107 0318 	add.w	r3, r7, #24
 8003080:	2254      	movs	r2, #84	@ 0x54
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f008 ff58 	bl	800bf3a <memset>
  if(hi2c->Instance==I2C3)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2d      	ldr	r2, [pc, #180]	@ (8003144 <HAL_I2C_MspInit+0xe0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d153      	bne.n	800313c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003094:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003098:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800309a:	2300      	movs	r3, #0
 800309c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800309e:	f107 0318 	add.w	r3, r7, #24
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 fc00 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80030ae:	f7ff fddf 	bl	8002c70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <HAL_I2C_MspInit+0xe4>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b6:	4a24      	ldr	r2, [pc, #144]	@ (8003148 <HAL_I2C_MspInit+0xe4>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030be:	4b22      	ldr	r3, [pc, #136]	@ (8003148 <HAL_I2C_MspInit+0xe4>)
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003148 <HAL_I2C_MspInit+0xe4>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003148 <HAL_I2C_MspInit+0xe4>)
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003148 <HAL_I2C_MspInit+0xe4>)
 80030d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030e2:	2380      	movs	r3, #128	@ 0x80
 80030e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030e6:	2312      	movs	r3, #18
 80030e8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ee:	2303      	movs	r3, #3
 80030f0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030f2:	2304      	movs	r3, #4
 80030f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030f6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80030fa:	4619      	mov	r1, r3
 80030fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003100:	f001 fdbe 	bl	8004c80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003104:	2310      	movs	r3, #16
 8003106:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003108:	2312      	movs	r3, #18
 800310a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003110:	2303      	movs	r3, #3
 8003112:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003114:	2304      	movs	r3, #4
 8003116:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003118:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800311c:	4619      	mov	r1, r3
 800311e:	480b      	ldr	r0, [pc, #44]	@ (800314c <HAL_I2C_MspInit+0xe8>)
 8003120:	f001 fdae 	bl	8004c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003124:	4b08      	ldr	r3, [pc, #32]	@ (8003148 <HAL_I2C_MspInit+0xe4>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003128:	4a07      	ldr	r2, [pc, #28]	@ (8003148 <HAL_I2C_MspInit+0xe4>)
 800312a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800312e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_I2C_MspInit+0xe4>)
 8003132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800313c:	bf00      	nop
 800313e:	3780      	adds	r7, #128	@ 0x80
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40005c00 	.word	0x40005c00
 8003148:	40021000 	.word	0x40021000
 800314c:	48000400 	.word	0x48000400

08003150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b0a2      	sub	sp, #136	@ 0x88
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003168:	f107 0320 	add.w	r3, r7, #32
 800316c:	2254      	movs	r2, #84	@ 0x54
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f008 fee2 	bl	800bf3a <memset>
  if(huart->Instance==LPUART1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a4f      	ldr	r2, [pc, #316]	@ (80032b8 <HAL_UART_MspInit+0x168>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d139      	bne.n	80031f4 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003180:	2320      	movs	r3, #32
 8003182:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003184:	2300      	movs	r3, #0
 8003186:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003188:	f107 0320 	add.w	r3, r7, #32
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fb8b 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003198:	f7ff fd6a 	bl	8002c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800319c:	4b47      	ldr	r3, [pc, #284]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 800319e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a0:	4a46      	ldr	r2, [pc, #280]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80031a8:	4b44      	ldr	r3, [pc, #272]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 80031aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b4:	4b41      	ldr	r3, [pc, #260]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 80031b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031b8:	4a40      	ldr	r2, [pc, #256]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031c0:	4b3e      	ldr	r3, [pc, #248]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 80031c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031cc:	230c      	movs	r3, #12
 80031ce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	2302      	movs	r3, #2
 80031d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d8:	2303      	movs	r3, #3
 80031da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031de:	2308      	movs	r3, #8
 80031e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80031e8:	4619      	mov	r1, r3
 80031ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031ee:	f001 fd47 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031f2:	e05c      	b.n	80032ae <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a31      	ldr	r2, [pc, #196]	@ (80032c0 <HAL_UART_MspInit+0x170>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d157      	bne.n	80032ae <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031fe:	2301      	movs	r3, #1
 8003200:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003202:	2300      	movs	r3, #0
 8003204:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003206:	f107 0320 	add.w	r3, r7, #32
 800320a:	4618      	mov	r0, r3
 800320c:	f003 fb4c 	bl	80068a8 <HAL_RCCEx_PeriphCLKConfig>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8003216:	f7ff fd2b 	bl	8002c70 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800321a:	4b28      	ldr	r3, [pc, #160]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 800321c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800321e:	4a27      	ldr	r2, [pc, #156]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 8003220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003224:	6613      	str	r3, [r2, #96]	@ 0x60
 8003226:	4b25      	ldr	r3, [pc, #148]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 8003228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800322a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003232:	4b22      	ldr	r3, [pc, #136]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 8003234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003236:	4a21      	ldr	r2, [pc, #132]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800323e:	4b1f      	ldr	r3, [pc, #124]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 8003240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800324a:	4b1c      	ldr	r3, [pc, #112]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 800324c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324e:	4a1b      	ldr	r2, [pc, #108]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003256:	4b19      	ldr	r3, [pc, #100]	@ (80032bc <HAL_UART_MspInit+0x16c>)
 8003258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003266:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326c:	2300      	movs	r3, #0
 800326e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003270:	2303      	movs	r3, #3
 8003272:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003276:	2307      	movs	r3, #7
 8003278:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003280:	4619      	mov	r1, r3
 8003282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003286:	f001 fcfb 	bl	8004c80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800328a:	2340      	movs	r3, #64	@ 0x40
 800328c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003296:	2303      	movs	r3, #3
 8003298:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800329c:	2307      	movs	r3, #7
 800329e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80032a6:	4619      	mov	r1, r3
 80032a8:	4806      	ldr	r0, [pc, #24]	@ (80032c4 <HAL_UART_MspInit+0x174>)
 80032aa:	f001 fce9 	bl	8004c80 <HAL_GPIO_Init>
}
 80032ae:	bf00      	nop
 80032b0:	3788      	adds	r7, #136	@ 0x88
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40008000 	.word	0x40008000
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40013800 	.word	0x40013800
 80032c4:	48000400 	.word	0x48000400

080032c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	@ 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a18      	ldr	r2, [pc, #96]	@ (8003348 <HAL_SPI_MspInit+0x80>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d129      	bne.n	800333e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ea:	4b18      	ldr	r3, [pc, #96]	@ (800334c <HAL_SPI_MspInit+0x84>)
 80032ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ee:	4a17      	ldr	r2, [pc, #92]	@ (800334c <HAL_SPI_MspInit+0x84>)
 80032f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80032f6:	4b15      	ldr	r3, [pc, #84]	@ (800334c <HAL_SPI_MspInit+0x84>)
 80032f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003302:	4b12      	ldr	r3, [pc, #72]	@ (800334c <HAL_SPI_MspInit+0x84>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003306:	4a11      	ldr	r2, [pc, #68]	@ (800334c <HAL_SPI_MspInit+0x84>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800330e:	4b0f      	ldr	r3, [pc, #60]	@ (800334c <HAL_SPI_MspInit+0x84>)
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800331a:	f641 0302 	movw	r3, #6146	@ 0x1802
 800331e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003324:	2300      	movs	r3, #0
 8003326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003328:	2303      	movs	r3, #3
 800332a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800332c:	2305      	movs	r3, #5
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003330:	f107 0314 	add.w	r3, r7, #20
 8003334:	4619      	mov	r1, r3
 8003336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800333a:	f001 fca1 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800333e:	bf00      	nop
 8003340:	3728      	adds	r7, #40	@ 0x28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40013000 	.word	0x40013000
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0a      	ldr	r2, [pc, #40]	@ (8003388 <HAL_TIM_PWM_MspInit+0x38>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10b      	bne.n	800337a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003362:	4b0a      	ldr	r3, [pc, #40]	@ (800338c <HAL_TIM_PWM_MspInit+0x3c>)
 8003364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003366:	4a09      	ldr	r2, [pc, #36]	@ (800338c <HAL_TIM_PWM_MspInit+0x3c>)
 8003368:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800336c:	6613      	str	r3, [r2, #96]	@ 0x60
 800336e:	4b07      	ldr	r3, [pc, #28]	@ (800338c <HAL_TIM_PWM_MspInit+0x3c>)
 8003370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40012c00 	.word	0x40012c00
 800338c:	40021000 	.word	0x40021000

08003390 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1a      	ldr	r2, [pc, #104]	@ (8003408 <HAL_TIM_Base_MspInit+0x78>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d114      	bne.n	80033cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80033a2:	4b1a      	ldr	r3, [pc, #104]	@ (800340c <HAL_TIM_Base_MspInit+0x7c>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a6:	4a19      	ldr	r2, [pc, #100]	@ (800340c <HAL_TIM_Base_MspInit+0x7c>)
 80033a8:	f043 0310 	orr.w	r3, r3, #16
 80033ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80033ae:	4b17      	ldr	r3, [pc, #92]	@ (800340c <HAL_TIM_Base_MspInit+0x7c>)
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	f003 0310 	and.w	r3, r3, #16
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80033ba:	2200      	movs	r2, #0
 80033bc:	2100      	movs	r1, #0
 80033be:	2036      	movs	r0, #54	@ 0x36
 80033c0:	f001 fb97 	bl	8004af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80033c4:	2036      	movs	r0, #54	@ 0x36
 80033c6:	f001 fbb0 	bl	8004b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80033ca:	e018      	b.n	80033fe <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003410 <HAL_TIM_Base_MspInit+0x80>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d113      	bne.n	80033fe <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80033d6:	4b0d      	ldr	r3, [pc, #52]	@ (800340c <HAL_TIM_Base_MspInit+0x7c>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033da:	4a0c      	ldr	r2, [pc, #48]	@ (800340c <HAL_TIM_Base_MspInit+0x7c>)
 80033dc:	f043 0320 	orr.w	r3, r3, #32
 80033e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e2:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_TIM_Base_MspInit+0x7c>)
 80033e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	60bb      	str	r3, [r7, #8]
 80033ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	2037      	movs	r0, #55	@ 0x37
 80033f4:	f001 fb7d 	bl	8004af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80033f8:	2037      	movs	r0, #55	@ 0x37
 80033fa:	f001 fb96 	bl	8004b2a <HAL_NVIC_EnableIRQ>
}
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40001000 	.word	0x40001000
 800340c:	40021000 	.word	0x40021000
 8003410:	40001400 	.word	0x40001400

08003414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a12      	ldr	r2, [pc, #72]	@ (800347c <HAL_TIM_MspPostInit+0x68>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d11d      	bne.n	8003472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003436:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <HAL_TIM_MspPostInit+0x6c>)
 8003438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800343a:	4a11      	ldr	r2, [pc, #68]	@ (8003480 <HAL_TIM_MspPostInit+0x6c>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003442:	4b0f      	ldr	r3, [pc, #60]	@ (8003480 <HAL_TIM_MspPostInit+0x6c>)
 8003444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800344e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003452:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003454:	2302      	movs	r3, #2
 8003456:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003460:	2301      	movs	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003464:	f107 030c 	add.w	r3, r7, #12
 8003468:	4619      	mov	r1, r3
 800346a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800346e:	f001 fc07 	bl	8004c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003472:	bf00      	nop
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40012c00 	.word	0x40012c00
 8003480:	40021000 	.word	0x40021000

08003484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <NMI_Handler+0x4>

0800348c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003490:	bf00      	nop
 8003492:	e7fd      	b.n	8003490 <HardFault_Handler+0x4>

08003494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <MemManage_Handler+0x4>

0800349c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <BusFault_Handler+0x4>

080034a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a8:	bf00      	nop
 80034aa:	e7fd      	b.n	80034a8 <UsageFault_Handler+0x4>

080034ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034cc:	bf00      	nop
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034da:	f000 f979 	bl	80037d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	LoRaRecieve = 1;
 80034e8:	4b03      	ldr	r3, [pc, #12]	@ (80034f8 <EXTI9_5_IRQHandler+0x14>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80034ee:	2020      	movs	r0, #32
 80034f0:	f001 fd48 	bl	8004f84 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000690 	.word	0x20000690

080034fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003500:	4802      	ldr	r0, [pc, #8]	@ (800350c <TIM6_DAC_IRQHandler+0x10>)
 8003502:	f005 fadd 	bl	8008ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	200005f8 	.word	0x200005f8

08003510 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003514:	4802      	ldr	r0, [pc, #8]	@ (8003520 <TIM7_IRQHandler+0x10>)
 8003516:	f005 fad3 	bl	8008ac0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000644 	.word	0x20000644

08003524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return 1;
 8003528:	2301      	movs	r3, #1
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <_kill>:

int _kill(int pid, int sig)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800353e:	f008 fd61 	bl	800c004 <__errno>
 8003542:	4603      	mov	r3, r0
 8003544:	2216      	movs	r2, #22
 8003546:	601a      	str	r2, [r3, #0]
  return -1;
 8003548:	f04f 33ff 	mov.w	r3, #4294967295
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_exit>:

void _exit (int status)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ffe7 	bl	8003534 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003566:	bf00      	nop
 8003568:	e7fd      	b.n	8003566 <_exit+0x12>

0800356a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003576:	2300      	movs	r3, #0
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	e00a      	b.n	8003592 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800357c:	f3af 8000 	nop.w
 8003580:	4601      	mov	r1, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	60ba      	str	r2, [r7, #8]
 8003588:	b2ca      	uxtb	r2, r1
 800358a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	3301      	adds	r3, #1
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	429a      	cmp	r2, r3
 8003598:	dbf0      	blt.n	800357c <_read+0x12>
  }

  return len;
 800359a:	687b      	ldr	r3, [r7, #4]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	e009      	b.n	80035ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	60ba      	str	r2, [r7, #8]
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fb44 	bl	8002c4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3301      	adds	r3, #1
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	dbf1      	blt.n	80035b6 <_write+0x12>
  }
  return len;
 80035d2:	687b      	ldr	r3, [r7, #4]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <_close>:

int _close(int file)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003604:	605a      	str	r2, [r3, #4]
  return 0;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_isatty>:

int _isatty(int file)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800361c:	2301      	movs	r3, #1
}
 800361e:	4618      	mov	r0, r3
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800364c:	4a14      	ldr	r2, [pc, #80]	@ (80036a0 <_sbrk+0x5c>)
 800364e:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <_sbrk+0x60>)
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003658:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <_sbrk+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <_sbrk+0x64>)
 8003662:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <_sbrk+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d207      	bcs.n	8003684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003674:	f008 fcc6 	bl	800c004 <__errno>
 8003678:	4603      	mov	r3, r0
 800367a:	220c      	movs	r2, #12
 800367c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	e009      	b.n	8003698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003684:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368a:	4b07      	ldr	r3, [pc, #28]	@ (80036a8 <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	4a05      	ldr	r2, [pc, #20]	@ (80036a8 <_sbrk+0x64>)
 8003694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20010000 	.word	0x20010000
 80036a4:	00000400 	.word	0x00000400
 80036a8:	200006d0 	.word	0x200006d0
 80036ac:	20000828 	.word	0x20000828

080036b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80036b4:	4b06      	ldr	r3, [pc, #24]	@ (80036d0 <SystemInit+0x20>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ba:	4a05      	ldr	r2, [pc, #20]	@ (80036d0 <SystemInit+0x20>)
 80036bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80036c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	e000ed00 	.word	0xe000ed00

080036d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80036d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800370c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036d8:	f7ff ffea 	bl	80036b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036dc:	480c      	ldr	r0, [pc, #48]	@ (8003710 <LoopForever+0x6>)
  ldr r1, =_edata
 80036de:	490d      	ldr	r1, [pc, #52]	@ (8003714 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003718 <LoopForever+0xe>)
  movs r3, #0
 80036e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e4:	e002      	b.n	80036ec <LoopCopyDataInit>

080036e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ea:	3304      	adds	r3, #4

080036ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036f0:	d3f9      	bcc.n	80036e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036f2:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <LoopForever+0x12>)
  ldr r4, =_ebss
 80036f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003720 <LoopForever+0x16>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f8:	e001      	b.n	80036fe <LoopFillZerobss>

080036fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036fc:	3204      	adds	r2, #4

080036fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003700:	d3fb      	bcc.n	80036fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003702:	f008 fc85 	bl	800c010 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003706:	f7fe ff21 	bl	800254c <main>

0800370a <LoopForever>:

LoopForever:
    b LoopForever
 800370a:	e7fe      	b.n	800370a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800370c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003710:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003714:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003718:	08010540 	.word	0x08010540
  ldr r2, =_sbss
 800371c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003720:	20000824 	.word	0x20000824

08003724 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003724:	e7fe      	b.n	8003724 <ADC1_IRQHandler>

08003726 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003730:	2003      	movs	r0, #3
 8003732:	f001 f9d3 	bl	8004adc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003736:	200f      	movs	r0, #15
 8003738:	f000 f80e 	bl	8003758 <HAL_InitTick>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	71fb      	strb	r3, [r7, #7]
 8003746:	e001      	b.n	800374c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003748:	f7ff fc04 	bl	8002f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800374c:	79fb      	ldrb	r3, [r7, #7]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003764:	4b17      	ldr	r3, [pc, #92]	@ (80037c4 <HAL_InitTick+0x6c>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800376c:	4b16      	ldr	r3, [pc, #88]	@ (80037c8 <HAL_InitTick+0x70>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	4b14      	ldr	r3, [pc, #80]	@ (80037c4 <HAL_InitTick+0x6c>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800377a:	fbb3 f3f1 	udiv	r3, r3, r1
 800377e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003782:	4618      	mov	r0, r3
 8003784:	f001 f9df 	bl	8004b46 <HAL_SYSTICK_Config>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b0f      	cmp	r3, #15
 8003792:	d809      	bhi.n	80037a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003794:	2200      	movs	r2, #0
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	f04f 30ff 	mov.w	r0, #4294967295
 800379c:	f001 f9a9 	bl	8004af2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037a0:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <HAL_InitTick+0x74>)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e007      	b.n	80037b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
 80037ac:	e004      	b.n	80037b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	73fb      	strb	r3, [r7, #15]
 80037b2:	e001      	b.n	80037b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000034 	.word	0x20000034
 80037c8:	2000002c 	.word	0x2000002c
 80037cc:	20000030 	.word	0x20000030

080037d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80037d4:	4b06      	ldr	r3, [pc, #24]	@ (80037f0 <HAL_IncTick+0x20>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	461a      	mov	r2, r3
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_IncTick+0x24>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4413      	add	r3, r2
 80037e0:	4a04      	ldr	r2, [pc, #16]	@ (80037f4 <HAL_IncTick+0x24>)
 80037e2:	6013      	str	r3, [r2, #0]
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	20000034 	.word	0x20000034
 80037f4:	200006d4 	.word	0x200006d4

080037f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return uwTick;
 80037fc:	4b03      	ldr	r3, [pc, #12]	@ (800380c <HAL_GetTick+0x14>)
 80037fe:	681b      	ldr	r3, [r3, #0]
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	200006d4 	.word	0x200006d4

08003810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003818:	f7ff ffee 	bl	80037f8 <HAL_GetTick>
 800381c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003828:	d005      	beq.n	8003836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800382a:	4b0a      	ldr	r3, [pc, #40]	@ (8003854 <HAL_Delay+0x44>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	4413      	add	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003836:	bf00      	nop
 8003838:	f7ff ffde 	bl	80037f8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	429a      	cmp	r2, r3
 8003846:	d8f7      	bhi.n	8003838 <HAL_Delay+0x28>
  {
  }
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000034 	.word	0x20000034

08003858 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	609a      	str	r2, [r3, #8]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	609a      	str	r2, [r3, #8]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	3360      	adds	r3, #96	@ 0x60
 80038d2:	461a      	mov	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4413      	add	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b08      	ldr	r3, [pc, #32]	@ (8003904 <LL_ADC_SetOffset+0x44>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	430a      	orrs	r2, r1
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	03fff000 	.word	0x03fff000

08003908 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	3360      	adds	r3, #96	@ 0x60
 8003916:	461a      	mov	r2, r3
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	3360      	adds	r3, #96	@ 0x60
 8003944:	461a      	mov	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	431a      	orrs	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800395e:	bf00      	nop
 8003960:	371c      	adds	r7, #28
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800397e:	2301      	movs	r3, #1
 8003980:	e000      	b.n	8003984 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003990:	b480      	push	{r7}
 8003992:	b087      	sub	sp, #28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	3330      	adds	r3, #48	@ 0x30
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	0a1b      	lsrs	r3, r3, #8
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	f003 030c 	and.w	r3, r3, #12
 80039ac:	4413      	add	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	211f      	movs	r1, #31
 80039bc:	fa01 f303 	lsl.w	r3, r1, r3
 80039c0:	43db      	mvns	r3, r3
 80039c2:	401a      	ands	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	0e9b      	lsrs	r3, r3, #26
 80039c8:	f003 011f 	and.w	r1, r3, #31
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f003 031f 	and.w	r3, r3, #31
 80039d2:	fa01 f303 	lsl.w	r3, r1, r3
 80039d6:	431a      	orrs	r2, r3
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	3314      	adds	r3, #20
 80039f8:	461a      	mov	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	0e5b      	lsrs	r3, r3, #25
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	4413      	add	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	0d1b      	lsrs	r3, r3, #20
 8003a10:	f003 031f 	and.w	r3, r3, #31
 8003a14:	2107      	movs	r1, #7
 8003a16:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	0d1b      	lsrs	r3, r3, #20
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 0318 	and.w	r3, r3, #24
 8003a62:	4908      	ldr	r1, [pc, #32]	@ (8003a84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a64:	40d9      	lsrs	r1, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	400b      	ands	r3, r1
 8003a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	0007ffff 	.word	0x0007ffff

08003a88 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003a98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6093      	str	r3, [r2, #8]
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003abc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ac0:	d101      	bne.n	8003ac6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ae4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ae8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b10:	d101      	bne.n	8003b16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e000      	b.n	8003b18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b38:	f043 0201 	orr.w	r2, r3, #1
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <LL_ADC_IsEnabled+0x18>
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <LL_ADC_IsEnabled+0x1a>
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b82:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003b86:	f043 0204 	orr.w	r2, r3, #4
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b083      	sub	sp, #12
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d101      	bne.n	8003bb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d101      	bne.n	8003bd8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e126      	b.n	8003e50 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff f9c3 	bl	8002f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff3f 	bl	8003aac <LL_ADC_IsDeepPowerDownEnabled>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff25 	bl	8003a88 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff ff5a 	bl	8003afc <LL_ADC_IsInternalRegulatorEnabled>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d115      	bne.n	8003c7a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff ff3e 	bl	8003ad4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c58:	4b7f      	ldr	r3, [pc, #508]	@ (8003e58 <HAL_ADC_Init+0x270>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	099b      	lsrs	r3, r3, #6
 8003c5e:	4a7f      	ldr	r2, [pc, #508]	@ (8003e5c <HAL_ADC_Init+0x274>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	099b      	lsrs	r3, r3, #6
 8003c66:	3301      	adds	r3, #1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c6c:	e002      	b.n	8003c74 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	3b01      	subs	r3, #1
 8003c72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f9      	bne.n	8003c6e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ff3c 	bl	8003afc <LL_ADC_IsInternalRegulatorEnabled>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10d      	bne.n	8003ca6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8e:	f043 0210 	orr.w	r2, r3, #16
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	f043 0201 	orr.w	r2, r3, #1
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff ff75 	bl	8003b9a <LL_ADC_REG_IsConversionOngoing>
 8003cb0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f040 80bf 	bne.w	8003e3e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f040 80bb 	bne.w	8003e3e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ccc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003cd0:	f043 0202 	orr.w	r2, r3, #2
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7ff ff35 	bl	8003b4c <LL_ADC_IsEnabled>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10b      	bne.n	8003d00 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ce8:	485d      	ldr	r0, [pc, #372]	@ (8003e60 <HAL_ADC_Init+0x278>)
 8003cea:	f7ff ff2f 	bl	8003b4c <LL_ADC_IsEnabled>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d105      	bne.n	8003d00 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	485a      	ldr	r0, [pc, #360]	@ (8003e64 <HAL_ADC_Init+0x27c>)
 8003cfc:	f7ff fdac 	bl	8003858 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	7e5b      	ldrb	r3, [r3, #25]
 8003d04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003d10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003d16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d106      	bne.n	8003d3c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d32:	3b01      	subs	r3, #1
 8003d34:	045b      	lsls	r3, r3, #17
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d009      	beq.n	8003d58 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d48:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	4b42      	ldr	r3, [pc, #264]	@ (8003e68 <HAL_ADC_Init+0x280>)
 8003d60:	4013      	ands	r3, r2
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6812      	ldr	r2, [r2, #0]
 8003d66:	69b9      	ldr	r1, [r7, #24]
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff25 	bl	8003bc0 <LL_ADC_INJ_IsConversionOngoing>
 8003d76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d13d      	bne.n	8003dfa <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d13a      	bne.n	8003dfa <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003da0:	f023 0302 	bic.w	r3, r3, #2
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	69b9      	ldr	r1, [r7, #24]
 8003daa:	430b      	orrs	r3, r1
 8003dac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d118      	bne.n	8003dea <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003dc2:	f023 0304 	bic.w	r3, r3, #4
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dce:	4311      	orrs	r1, r2
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003dd4:	4311      	orrs	r1, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	611a      	str	r2, [r3, #16]
 8003de8:	e007      	b.n	8003dfa <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0201 	bic.w	r2, r2, #1
 8003df8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d10c      	bne.n	8003e1c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	f023 010f 	bic.w	r1, r3, #15
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	1e5a      	subs	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e1a:	e007      	b.n	8003e2c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 020f 	bic.w	r2, r2, #15
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e30:	f023 0303 	bic.w	r3, r3, #3
 8003e34:	f043 0201 	orr.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8003e3c:	e007      	b.n	8003e4e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e42:	f043 0210 	orr.w	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003e4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	2000002c 	.word	0x2000002c
 8003e5c:	053e2d63 	.word	0x053e2d63
 8003e60:	50040000 	.word	0x50040000
 8003e64:	50040300 	.word	0x50040300
 8003e68:	fff0c007 	.word	0xfff0c007

08003e6c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f7ff fe8e 	bl	8003b9a <LL_ADC_REG_IsConversionOngoing>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d14f      	bne.n	8003f24 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADC_Start+0x26>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e04b      	b.n	8003f2a <HAL_ADC_Start+0xbe>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fcc8 	bl	8004830 <ADC_Enable>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d137      	bne.n	8003f1a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eb2:	f023 0301 	bic.w	r3, r3, #1
 8003eb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eca:	d106      	bne.n	8003eda <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed0:	f023 0206 	bic.w	r2, r3, #6
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ed8:	e002      	b.n	8003ee0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	221c      	movs	r2, #28
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fe2d 	bl	8003b72 <LL_ADC_REG_StartConversion>
 8003f18:	e006      	b.n	8003f28 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003f22:	e001      	b.n	8003f28 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
 8003f26:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d102      	bne.n	8003f4a <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003f44:	2308      	movs	r3, #8
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	e010      	b.n	8003f6c <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e06f      	b.n	8004048 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003f68:	2304      	movs	r3, #4
 8003f6a:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003f6c:	f7ff fc44 	bl	80037f8 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f72:	e021      	b.n	8003fb8 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d01d      	beq.n	8003fb8 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003f7c:	f7ff fc3c 	bl	80037f8 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d302      	bcc.n	8003f92 <HAL_ADC_PollForConversion+0x60>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d112      	bne.n	8003fb8 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa4:	f043 0204 	orr.w	r2, r3, #4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e047      	b.n	8004048 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0d6      	beq.n	8003f74 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fca:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fcc7 	bl	800396a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d01c      	beq.n	800401c <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	7e5b      	ldrb	r3, [r3, #25]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d118      	bne.n	800401c <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d111      	bne.n	800401c <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004008:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d105      	bne.n	800401c <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004014:	f043 0201 	orr.w	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2b08      	cmp	r3, #8
 8004028:	d104      	bne.n	8004034 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2208      	movs	r2, #8
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e008      	b.n	8004046 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	220c      	movs	r2, #12
 8004044:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b0b6      	sub	sp, #216	@ 0xd8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800407c:	2300      	movs	r3, #0
 800407e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_ADC_ConfigChannel+0x22>
 800408a:	2302      	movs	r3, #2
 800408c:	e3bb      	b.n	8004806 <HAL_ADC_ConfigChannel+0x79a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fd7d 	bl	8003b9a <LL_ADC_REG_IsConversionOngoing>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f040 83a0 	bne.w	80047e8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d824      	bhi.n	8004102 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	3b02      	subs	r3, #2
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d81b      	bhi.n	80040fa <HAL_ADC_ConfigChannel+0x8e>
 80040c2:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <HAL_ADC_ConfigChannel+0x5c>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040e1 	.word	0x080040e1
 80040d0:	080040e9 	.word	0x080040e9
 80040d4:	080040f1 	.word	0x080040f1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80040d8:	230c      	movs	r3, #12
 80040da:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040de:	e010      	b.n	8004102 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80040e0:	2312      	movs	r3, #18
 80040e2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040e6:	e00c      	b.n	8004102 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80040e8:	2318      	movs	r3, #24
 80040ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040ee:	e008      	b.n	8004102 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80040f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80040f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80040f8:	e003      	b.n	8004102 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80040fa:	2306      	movs	r3, #6
 80040fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8004100:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	461a      	mov	r2, r3
 800410c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8004110:	f7ff fc3e 	bl	8003990 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7ff fd3e 	bl	8003b9a <LL_ADC_REG_IsConversionOngoing>
 800411e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff fd4a 	bl	8003bc0 <LL_ADC_INJ_IsConversionOngoing>
 800412c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004130:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 81a4 	bne.w	8004482 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800413a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800413e:	2b00      	cmp	r3, #0
 8004140:	f040 819f 	bne.w	8004482 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	461a      	mov	r2, r3
 8004152:	f7ff fc49 	bl	80039e8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	08db      	lsrs	r3, r3, #3
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b04      	cmp	r3, #4
 8004176:	d00a      	beq.n	800418e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	6919      	ldr	r1, [r3, #16]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004188:	f7ff fb9a 	bl	80038c0 <LL_ADC_SetOffset>
 800418c:	e179      	b.n	8004482 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2100      	movs	r1, #0
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff fbb7 	bl	8003908 <LL_ADC_GetOffsetChannel>
 800419a:	4603      	mov	r3, r0
 800419c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <HAL_ADC_ConfigChannel+0x14e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fbac 	bl	8003908 <LL_ADC_GetOffsetChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	0e9b      	lsrs	r3, r3, #26
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	e01e      	b.n	80041f8 <HAL_ADC_ConfigChannel+0x18c>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff fba1 	bl	8003908 <LL_ADC_GetOffsetChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80041dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80041e8:	2320      	movs	r3, #32
 80041ea:	e004      	b.n	80041f6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80041ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80041f0:	fab3 f383 	clz	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x1a4>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0e9b      	lsrs	r3, r3, #26
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	e018      	b.n	8004242 <HAL_ADC_ConfigChannel+0x1d6>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800421c:	fa93 f3a3 	rbit	r3, r3
 8004220:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004228:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 800422c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8004234:	2320      	movs	r3, #32
 8004236:	e004      	b.n	8004242 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8004238:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800423c:	fab3 f383 	clz	r3, r3
 8004240:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004242:	429a      	cmp	r2, r3
 8004244:	d106      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fb70 	bl	8003934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2101      	movs	r1, #1
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fb54 	bl	8003908 <LL_ADC_GetOffsetChannel>
 8004260:	4603      	mov	r3, r0
 8004262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <HAL_ADC_ConfigChannel+0x214>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2101      	movs	r1, #1
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff fb49 	bl	8003908 <LL_ADC_GetOffsetChannel>
 8004276:	4603      	mov	r3, r0
 8004278:	0e9b      	lsrs	r3, r3, #26
 800427a:	f003 021f 	and.w	r2, r3, #31
 800427e:	e01e      	b.n	80042be <HAL_ADC_ConfigChannel+0x252>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2101      	movs	r1, #1
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fb3e 	bl	8003908 <LL_ADC_GetOffsetChannel>
 800428c:	4603      	mov	r3, r0
 800428e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800429e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80042a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80042ae:	2320      	movs	r3, #32
 80042b0:	e004      	b.n	80042bc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80042b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80042b6:	fab3 f383 	clz	r3, r3
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x26a>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	0e9b      	lsrs	r3, r3, #26
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	e018      	b.n	8004308 <HAL_ADC_ConfigChannel+0x29c>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80042ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80042ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80042f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80042fa:	2320      	movs	r3, #32
 80042fc:	e004      	b.n	8004308 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80042fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004302:	fab3 f383 	clz	r3, r3
 8004306:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004308:	429a      	cmp	r2, r3
 800430a:	d106      	bne.n	800431a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2200      	movs	r2, #0
 8004312:	2101      	movs	r1, #1
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fb0d 	bl	8003934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff faf1 	bl	8003908 <LL_ADC_GetOffsetChannel>
 8004326:	4603      	mov	r3, r0
 8004328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <HAL_ADC_ConfigChannel+0x2da>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f7ff fae6 	bl	8003908 <LL_ADC_GetOffsetChannel>
 800433c:	4603      	mov	r3, r0
 800433e:	0e9b      	lsrs	r3, r3, #26
 8004340:	f003 021f 	and.w	r2, r3, #31
 8004344:	e01e      	b.n	8004384 <HAL_ADC_ConfigChannel+0x318>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2102      	movs	r1, #2
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fadb 	bl	8003908 <LL_ADC_GetOffsetChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800435c:	fa93 f3a3 	rbit	r3, r3
 8004360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004364:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004368:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800436c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8004374:	2320      	movs	r3, #32
 8004376:	e004      	b.n	8004382 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004378:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800437c:	fab3 f383 	clz	r3, r3
 8004380:	b2db      	uxtb	r3, r3
 8004382:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800438c:	2b00      	cmp	r3, #0
 800438e:	d105      	bne.n	800439c <HAL_ADC_ConfigChannel+0x330>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	0e9b      	lsrs	r3, r3, #26
 8004396:	f003 031f 	and.w	r3, r3, #31
 800439a:	e014      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x35a>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043a4:	fa93 f3a3 	rbit	r3, r3
 80043a8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80043aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80043b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80043b8:	2320      	movs	r3, #32
 80043ba:	e004      	b.n	80043c6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80043bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80043c0:	fab3 f383 	clz	r3, r3
 80043c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d106      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2200      	movs	r2, #0
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7ff faae 	bl	8003934 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2103      	movs	r1, #3
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff fa92 	bl	8003908 <LL_ADC_GetOffsetChannel>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <HAL_ADC_ConfigChannel+0x398>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2103      	movs	r1, #3
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fa87 	bl	8003908 <LL_ADC_GetOffsetChannel>
 80043fa:	4603      	mov	r3, r0
 80043fc:	0e9b      	lsrs	r3, r3, #26
 80043fe:	f003 021f 	and.w	r2, r3, #31
 8004402:	e017      	b.n	8004434 <HAL_ADC_ConfigChannel+0x3c8>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2103      	movs	r1, #3
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff fa7c 	bl	8003908 <LL_ADC_GetOffsetChannel>
 8004410:	4603      	mov	r3, r0
 8004412:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800441c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800441e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004420:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004426:	2320      	movs	r3, #32
 8004428:	e003      	b.n	8004432 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800442a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800442c:	fab3 f383 	clz	r3, r3
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <HAL_ADC_ConfigChannel+0x3e0>
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	0e9b      	lsrs	r3, r3, #26
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	e011      	b.n	8004470 <HAL_ADC_ConfigChannel+0x404>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800445a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800445c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800445e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004464:	2320      	movs	r3, #32
 8004466:	e003      	b.n	8004470 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004470:	429a      	cmp	r2, r3
 8004472:	d106      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2200      	movs	r2, #0
 800447a:	2103      	movs	r1, #3
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fa59 	bl	8003934 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fb60 	bl	8003b4c <LL_ADC_IsEnabled>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 8140 	bne.w	8004714 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	6819      	ldr	r1, [r3, #0]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	461a      	mov	r2, r3
 80044a2:	f7ff facd 	bl	8003a40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	4a8f      	ldr	r2, [pc, #572]	@ (80046e8 <HAL_ADC_ConfigChannel+0x67c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	f040 8131 	bne.w	8004714 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <HAL_ADC_ConfigChannel+0x46e>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	0e9b      	lsrs	r3, r3, #26
 80044c8:	3301      	adds	r3, #1
 80044ca:	f003 031f 	and.w	r3, r3, #31
 80044ce:	2b09      	cmp	r3, #9
 80044d0:	bf94      	ite	ls
 80044d2:	2301      	movls	r3, #1
 80044d4:	2300      	movhi	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e019      	b.n	800450e <HAL_ADC_ConfigChannel+0x4a2>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80044e2:	fa93 f3a3 	rbit	r3, r3
 80044e6:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80044e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80044ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80044f2:	2320      	movs	r3, #32
 80044f4:	e003      	b.n	80044fe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80044f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044f8:	fab3 f383 	clz	r3, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	3301      	adds	r3, #1
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	2b09      	cmp	r3, #9
 8004506:	bf94      	ite	ls
 8004508:	2301      	movls	r3, #1
 800450a:	2300      	movhi	r3, #0
 800450c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800450e:	2b00      	cmp	r3, #0
 8004510:	d079      	beq.n	8004606 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800451a:	2b00      	cmp	r3, #0
 800451c:	d107      	bne.n	800452e <HAL_ADC_ConfigChannel+0x4c2>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	0e9b      	lsrs	r3, r3, #26
 8004524:	3301      	adds	r3, #1
 8004526:	069b      	lsls	r3, r3, #26
 8004528:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800452c:	e015      	b.n	800455a <HAL_ADC_ConfigChannel+0x4ee>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004536:	fa93 f3a3 	rbit	r3, r3
 800453a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800453c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800453e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004540:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004546:	2320      	movs	r3, #32
 8004548:	e003      	b.n	8004552 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800454a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800454c:	fab3 f383 	clz	r3, r3
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3301      	adds	r3, #1
 8004554:	069b      	lsls	r3, r3, #26
 8004556:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <HAL_ADC_ConfigChannel+0x50e>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	0e9b      	lsrs	r3, r3, #26
 800456c:	3301      	adds	r3, #1
 800456e:	f003 031f 	and.w	r3, r3, #31
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f303 	lsl.w	r3, r1, r3
 8004578:	e017      	b.n	80045aa <HAL_ADC_ConfigChannel+0x53e>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004582:	fa93 f3a3 	rbit	r3, r3
 8004586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800458a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800458c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004592:	2320      	movs	r3, #32
 8004594:	e003      	b.n	800459e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004596:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004598:	fab3 f383 	clz	r3, r3
 800459c:	b2db      	uxtb	r3, r3
 800459e:	3301      	adds	r3, #1
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	2101      	movs	r1, #1
 80045a6:	fa01 f303 	lsl.w	r3, r1, r3
 80045aa:	ea42 0103 	orr.w	r1, r2, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x564>
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	0e9b      	lsrs	r3, r3, #26
 80045c0:	3301      	adds	r3, #1
 80045c2:	f003 021f 	and.w	r2, r3, #31
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	051b      	lsls	r3, r3, #20
 80045ce:	e018      	b.n	8004602 <HAL_ADC_ConfigChannel+0x596>
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d8:	fa93 f3a3 	rbit	r3, r3
 80045dc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80045de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80045e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80045e8:	2320      	movs	r3, #32
 80045ea:	e003      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80045ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3301      	adds	r3, #1
 80045f6:	f003 021f 	and.w	r2, r3, #31
 80045fa:	4613      	mov	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	4413      	add	r3, r2
 8004600:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004602:	430b      	orrs	r3, r1
 8004604:	e081      	b.n	800470a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460e:	2b00      	cmp	r3, #0
 8004610:	d107      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x5b6>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	0e9b      	lsrs	r3, r3, #26
 8004618:	3301      	adds	r3, #1
 800461a:	069b      	lsls	r3, r3, #26
 800461c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004620:	e015      	b.n	800464e <HAL_ADC_ConfigChannel+0x5e2>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8004630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800463a:	2320      	movs	r3, #32
 800463c:	e003      	b.n	8004646 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	3301      	adds	r3, #1
 8004648:	069b      	lsls	r3, r3, #26
 800464a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <HAL_ADC_ConfigChannel+0x602>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	0e9b      	lsrs	r3, r3, #26
 8004660:	3301      	adds	r3, #1
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	2101      	movs	r1, #1
 8004668:	fa01 f303 	lsl.w	r3, r1, r3
 800466c:	e017      	b.n	800469e <HAL_ADC_ConfigChannel+0x632>
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	61bb      	str	r3, [r7, #24]
  return result;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004686:	2320      	movs	r3, #32
 8004688:	e003      	b.n	8004692 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	fab3 f383 	clz	r3, r3
 8004690:	b2db      	uxtb	r3, r3
 8004692:	3301      	adds	r3, #1
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2101      	movs	r1, #1
 800469a:	fa01 f303 	lsl.w	r3, r1, r3
 800469e:	ea42 0103 	orr.w	r1, r2, r3
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10d      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x65e>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	0e9b      	lsrs	r3, r3, #26
 80046b4:	3301      	adds	r3, #1
 80046b6:	f003 021f 	and.w	r2, r3, #31
 80046ba:	4613      	mov	r3, r2
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	3b1e      	subs	r3, #30
 80046c2:	051b      	lsls	r3, r3, #20
 80046c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80046c8:	e01e      	b.n	8004708 <HAL_ADC_ConfigChannel+0x69c>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	60fb      	str	r3, [r7, #12]
  return result;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d104      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80046e2:	2320      	movs	r3, #32
 80046e4:	e006      	b.n	80046f4 <HAL_ADC_ConfigChannel+0x688>
 80046e6:	bf00      	nop
 80046e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3301      	adds	r3, #1
 80046f6:	f003 021f 	and.w	r2, r3, #31
 80046fa:	4613      	mov	r3, r2
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	3b1e      	subs	r3, #30
 8004702:	051b      	lsls	r3, r3, #20
 8004704:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004708:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800470e:	4619      	mov	r1, r3
 8004710:	f7ff f96a 	bl	80039e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b3d      	ldr	r3, [pc, #244]	@ (8004810 <HAL_ADC_ConfigChannel+0x7a4>)
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d06c      	beq.n	80047fa <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004720:	483c      	ldr	r0, [pc, #240]	@ (8004814 <HAL_ADC_ConfigChannel+0x7a8>)
 8004722:	f7ff f8bf 	bl	80038a4 <LL_ADC_GetCommonPathInternalCh>
 8004726:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a3a      	ldr	r2, [pc, #232]	@ (8004818 <HAL_ADC_ConfigChannel+0x7ac>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d127      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004734:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004738:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d121      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a35      	ldr	r2, [pc, #212]	@ (800481c <HAL_ADC_ConfigChannel+0x7b0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d157      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800474a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800474e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004752:	4619      	mov	r1, r3
 8004754:	482f      	ldr	r0, [pc, #188]	@ (8004814 <HAL_ADC_ConfigChannel+0x7a8>)
 8004756:	f7ff f892 	bl	800387e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800475a:	4b31      	ldr	r3, [pc, #196]	@ (8004820 <HAL_ADC_ConfigChannel+0x7b4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	4a30      	ldr	r2, [pc, #192]	@ (8004824 <HAL_ADC_ConfigChannel+0x7b8>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	099b      	lsrs	r3, r3, #6
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004774:	e002      	b.n	800477c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3b01      	subs	r3, #1
 800477a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f9      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004782:	e03a      	b.n	80047fa <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a27      	ldr	r2, [pc, #156]	@ (8004828 <HAL_ADC_ConfigChannel+0x7bc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d113      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800478e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004792:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10d      	bne.n	80047b6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1f      	ldr	r2, [pc, #124]	@ (800481c <HAL_ADC_ConfigChannel+0x7b0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d12a      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ac:	4619      	mov	r1, r3
 80047ae:	4819      	ldr	r0, [pc, #100]	@ (8004814 <HAL_ADC_ConfigChannel+0x7a8>)
 80047b0:	f7ff f865 	bl	800387e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80047b4:	e021      	b.n	80047fa <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <HAL_ADC_ConfigChannel+0x7c0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d11c      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80047c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d116      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a12      	ldr	r2, [pc, #72]	@ (800481c <HAL_ADC_ConfigChannel+0x7b0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d111      	bne.n	80047fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80047de:	4619      	mov	r1, r3
 80047e0:	480c      	ldr	r0, [pc, #48]	@ (8004814 <HAL_ADC_ConfigChannel+0x7a8>)
 80047e2:	f7ff f84c 	bl	800387e <LL_ADC_SetCommonPathInternalCh>
 80047e6:	e008      	b.n	80047fa <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ec:	f043 0220 	orr.w	r2, r3, #32
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004802:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004806:	4618      	mov	r0, r3
 8004808:	37d8      	adds	r7, #216	@ 0xd8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	80080000 	.word	0x80080000
 8004814:	50040300 	.word	0x50040300
 8004818:	c7520000 	.word	0xc7520000
 800481c:	50040000 	.word	0x50040000
 8004820:	2000002c 	.word	0x2000002c
 8004824:	053e2d63 	.word	0x053e2d63
 8004828:	cb840000 	.word	0xcb840000
 800482c:	80000001 	.word	0x80000001

08004830 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004838:	2300      	movs	r3, #0
 800483a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff f983 	bl	8003b4c <LL_ADC_IsEnabled>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d169      	bne.n	8004920 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	4b36      	ldr	r3, [pc, #216]	@ (800492c <ADC_Enable+0xfc>)
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00d      	beq.n	8004876 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485e:	f043 0210 	orr.w	r2, r3, #16
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e055      	b.n	8004922 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff f952 	bl	8003b24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004880:	482b      	ldr	r0, [pc, #172]	@ (8004930 <ADC_Enable+0x100>)
 8004882:	f7ff f80f 	bl	80038a4 <LL_ADC_GetCommonPathInternalCh>
 8004886:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004888:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004890:	4b28      	ldr	r3, [pc, #160]	@ (8004934 <ADC_Enable+0x104>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	099b      	lsrs	r3, r3, #6
 8004896:	4a28      	ldr	r2, [pc, #160]	@ (8004938 <ADC_Enable+0x108>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	099b      	lsrs	r3, r3, #6
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048aa:	e002      	b.n	80048b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1f9      	bne.n	80048ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80048b8:	f7fe ff9e 	bl	80037f8 <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048be:	e028      	b.n	8004912 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f941 	bl	8003b4c <LL_ADC_IsEnabled>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4618      	mov	r0, r3
 80048d6:	f7ff f925 	bl	8003b24 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048da:	f7fe ff8d 	bl	80037f8 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d914      	bls.n	8004912 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d00d      	beq.n	8004912 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048fa:	f043 0210 	orr.w	r2, r3, #16
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004906:	f043 0201 	orr.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e007      	b.n	8004922 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b01      	cmp	r3, #1
 800491e:	d1cf      	bne.n	80048c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	8000003f 	.word	0x8000003f
 8004930:	50040300 	.word	0x50040300
 8004934:	2000002c 	.word	0x2000002c
 8004938:	053e2d63 	.word	0x053e2d63

0800493c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f003 0307 	and.w	r3, r3, #7
 800494a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800494c:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <__NVIC_SetPriorityGrouping+0x44>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004958:	4013      	ands	r3, r2
 800495a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800496c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800496e:	4a04      	ldr	r2, [pc, #16]	@ (8004980 <__NVIC_SetPriorityGrouping+0x44>)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	60d3      	str	r3, [r2, #12]
}
 8004974:	bf00      	nop
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004988:	4b04      	ldr	r3, [pc, #16]	@ (800499c <__NVIC_GetPriorityGrouping+0x18>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	0a1b      	lsrs	r3, r3, #8
 800498e:	f003 0307 	and.w	r3, r3, #7
}
 8004992:	4618      	mov	r0, r3
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	e000ed00 	.word	0xe000ed00

080049a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	db0b      	blt.n	80049ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049b2:	79fb      	ldrb	r3, [r7, #7]
 80049b4:	f003 021f 	and.w	r2, r3, #31
 80049b8:	4907      	ldr	r1, [pc, #28]	@ (80049d8 <__NVIC_EnableIRQ+0x38>)
 80049ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2001      	movs	r0, #1
 80049c2:	fa00 f202 	lsl.w	r2, r0, r2
 80049c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	e000e100 	.word	0xe000e100

080049dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	6039      	str	r1, [r7, #0]
 80049e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	db0a      	blt.n	8004a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	490c      	ldr	r1, [pc, #48]	@ (8004a28 <__NVIC_SetPriority+0x4c>)
 80049f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fa:	0112      	lsls	r2, r2, #4
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	440b      	add	r3, r1
 8004a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a04:	e00a      	b.n	8004a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4908      	ldr	r1, [pc, #32]	@ (8004a2c <__NVIC_SetPriority+0x50>)
 8004a0c:	79fb      	ldrb	r3, [r7, #7]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	3b04      	subs	r3, #4
 8004a14:	0112      	lsls	r2, r2, #4
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	440b      	add	r3, r1
 8004a1a:	761a      	strb	r2, [r3, #24]
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	e000e100 	.word	0xe000e100
 8004a2c:	e000ed00 	.word	0xe000ed00

08004a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b089      	sub	sp, #36	@ 0x24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f003 0307 	and.w	r3, r3, #7
 8004a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f1c3 0307 	rsb	r3, r3, #7
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	bf28      	it	cs
 8004a4e:	2304      	movcs	r3, #4
 8004a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2b06      	cmp	r3, #6
 8004a58:	d902      	bls.n	8004a60 <NVIC_EncodePriority+0x30>
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	3b03      	subs	r3, #3
 8004a5e:	e000      	b.n	8004a62 <NVIC_EncodePriority+0x32>
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a64:	f04f 32ff 	mov.w	r2, #4294967295
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6e:	43da      	mvns	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	401a      	ands	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a78:	f04f 31ff 	mov.w	r1, #4294967295
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a82:	43d9      	mvns	r1, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a88:	4313      	orrs	r3, r2
         );
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3724      	adds	r7, #36	@ 0x24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa8:	d301      	bcc.n	8004aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e00f      	b.n	8004ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aae:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad8 <SysTick_Config+0x40>)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ab6:	210f      	movs	r1, #15
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8004abc:	f7ff ff8e 	bl	80049dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <SysTick_Config+0x40>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ac6:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <SysTick_Config+0x40>)
 8004ac8:	2207      	movs	r2, #7
 8004aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	e000e010 	.word	0xe000e010

08004adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ff29 	bl	800493c <__NVIC_SetPriorityGrouping>
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b086      	sub	sp, #24
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	4603      	mov	r3, r0
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b04:	f7ff ff3e 	bl	8004984 <__NVIC_GetPriorityGrouping>
 8004b08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	6978      	ldr	r0, [r7, #20]
 8004b10:	f7ff ff8e 	bl	8004a30 <NVIC_EncodePriority>
 8004b14:	4602      	mov	r2, r0
 8004b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff ff5d 	bl	80049dc <__NVIC_SetPriority>
}
 8004b22:	bf00      	nop
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	4603      	mov	r3, r0
 8004b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff31 	bl	80049a0 <__NVIC_EnableIRQ>
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff ffa2 	bl	8004a98 <SysTick_Config>
 8004b54:	4603      	mov	r3, r0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b086      	sub	sp, #24
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	607a      	str	r2, [r7, #4]
 8004b6a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_DMA_Start_IT+0x20>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	e04b      	b.n	8004c16 <HAL_DMA_Start_IT+0xb8>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d13a      	bne.n	8004c08 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0201 	bic.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f831 	bl	8004c1e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 020e 	orr.w	r2, r2, #14
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	e00f      	b.n	8004bf6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0204 	bic.w	r2, r2, #4
 8004be4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 020a 	orr.w	r2, r2, #10
 8004bf4:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f042 0201 	orr.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]
 8004c06:	e005      	b.n	8004c14 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c10:	2302      	movs	r3, #2
 8004c12:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b085      	sub	sp, #20
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
 8004c2a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c30:	f003 021c 	and.w	r2, r3, #28
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c38:	2101      	movs	r1, #1
 8004c3a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c3e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d108      	bne.n	8004c62 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c60:	e007      	b.n	8004c72 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	60da      	str	r2, [r3, #12]
}
 8004c72:	bf00      	nop
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
	...

08004c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c8e:	e148      	b.n	8004f22 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 813a 	beq.w	8004f1c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d005      	beq.n	8004cc0 <HAL_GPIO_Init+0x40>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 0303 	and.w	r3, r3, #3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d130      	bne.n	8004d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	2203      	movs	r2, #3
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68da      	ldr	r2, [r3, #12]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4013      	ands	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	091b      	lsrs	r3, r3, #4
 8004d0c:	f003 0201 	and.w	r2, r3, #1
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d017      	beq.n	8004d5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	2203      	movs	r2, #3
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	4013      	ands	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	689a      	ldr	r2, [r3, #8]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	693a      	ldr	r2, [r7, #16]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d123      	bne.n	8004db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	08da      	lsrs	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3208      	adds	r2, #8
 8004d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	220f      	movs	r2, #15
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691a      	ldr	r2, [r3, #16]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	08da      	lsrs	r2, r3, #3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3208      	adds	r2, #8
 8004dac:	6939      	ldr	r1, [r7, #16]
 8004dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	005b      	lsls	r3, r3, #1
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f003 0203 	and.w	r2, r3, #3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8094 	beq.w	8004f1c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004df4:	4b52      	ldr	r3, [pc, #328]	@ (8004f40 <HAL_GPIO_Init+0x2c0>)
 8004df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df8:	4a51      	ldr	r2, [pc, #324]	@ (8004f40 <HAL_GPIO_Init+0x2c0>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e00:	4b4f      	ldr	r3, [pc, #316]	@ (8004f40 <HAL_GPIO_Init+0x2c0>)
 8004e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	60bb      	str	r3, [r7, #8]
 8004e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e0c:	4a4d      	ldr	r2, [pc, #308]	@ (8004f44 <HAL_GPIO_Init+0x2c4>)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	089b      	lsrs	r3, r3, #2
 8004e12:	3302      	adds	r3, #2
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	220f      	movs	r2, #15
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e36:	d00d      	beq.n	8004e54 <HAL_GPIO_Init+0x1d4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a43      	ldr	r2, [pc, #268]	@ (8004f48 <HAL_GPIO_Init+0x2c8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <HAL_GPIO_Init+0x1d0>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a42      	ldr	r2, [pc, #264]	@ (8004f4c <HAL_GPIO_Init+0x2cc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d101      	bne.n	8004e4c <HAL_GPIO_Init+0x1cc>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e004      	b.n	8004e56 <HAL_GPIO_Init+0x1d6>
 8004e4c:	2307      	movs	r3, #7
 8004e4e:	e002      	b.n	8004e56 <HAL_GPIO_Init+0x1d6>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <HAL_GPIO_Init+0x1d6>
 8004e54:	2300      	movs	r3, #0
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	f002 0203 	and.w	r2, r2, #3
 8004e5c:	0092      	lsls	r2, r2, #2
 8004e5e:	4093      	lsls	r3, r2
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e66:	4937      	ldr	r1, [pc, #220]	@ (8004f44 <HAL_GPIO_Init+0x2c4>)
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	089b      	lsrs	r3, r3, #2
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e74:	4b36      	ldr	r3, [pc, #216]	@ (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4013      	ands	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d003      	beq.n	8004e98 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e98:	4a2d      	ldr	r2, [pc, #180]	@ (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ec2:	4a23      	ldr	r2, [pc, #140]	@ (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004ec8:	4b21      	ldr	r3, [pc, #132]	@ (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	43db      	mvns	r3, r3
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004eec:	4a18      	ldr	r2, [pc, #96]	@ (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004ef2:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	43db      	mvns	r3, r3
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	4013      	ands	r3, r2
 8004f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f16:	4a0e      	ldr	r2, [pc, #56]	@ (8004f50 <HAL_GPIO_Init+0x2d0>)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	fa22 f303 	lsr.w	r3, r2, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f47f aeaf 	bne.w	8004c90 <HAL_GPIO_Init+0x10>
  }
}
 8004f32:	bf00      	nop
 8004f34:	bf00      	nop
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40010000 	.word	0x40010000
 8004f48:	48000400 	.word	0x48000400
 8004f4c:	48000800 	.word	0x48000800
 8004f50:	40010400 	.word	0x40010400

08004f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	807b      	strh	r3, [r7, #2]
 8004f60:	4613      	mov	r3, r2
 8004f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f64:	787b      	ldrb	r3, [r7, #1]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f6a:	887a      	ldrh	r2, [r7, #2]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f70:	e002      	b.n	8004f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f72:	887a      	ldrh	r2, [r7, #2]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f8e:	4b08      	ldr	r3, [pc, #32]	@ (8004fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f90:	695a      	ldr	r2, [r3, #20]
 8004f92:	88fb      	ldrh	r3, [r7, #6]
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d006      	beq.n	8004fa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f9a:	4a05      	ldr	r2, [pc, #20]	@ (8004fb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f806 	bl	8004fb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fa8:	bf00      	nop
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40010400 	.word	0x40010400

08004fb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	4603      	mov	r3, r0
 8004fbc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004fbe:	bf00      	nop
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b082      	sub	sp, #8
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e08d      	b.n	80050f8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fe f837 	bl	8003064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2224      	movs	r2, #36	@ 0x24
 8004ffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800501a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800502a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d107      	bne.n	8005044 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005040:	609a      	str	r2, [r3, #8]
 8005042:	e006      	b.n	8005052 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005050:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d108      	bne.n	800506c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005068:	605a      	str	r2, [r3, #4]
 800506a:	e007      	b.n	800507c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800507a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6812      	ldr	r2, [r2, #0]
 8005086:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800508a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800508e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800509e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691a      	ldr	r2, [r3, #16]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69d9      	ldr	r1, [r3, #28]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1a      	ldr	r2, [r3, #32]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 0201 	orr.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	607a      	str	r2, [r7, #4]
 800510a:	461a      	mov	r2, r3
 800510c:	460b      	mov	r3, r1
 800510e:	817b      	strh	r3, [r7, #10]
 8005110:	4613      	mov	r3, r2
 8005112:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b20      	cmp	r3, #32
 800511e:	f040 80fd 	bne.w	800531c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_I2C_Master_Transmit+0x30>
 800512c:	2302      	movs	r3, #2
 800512e:	e0f6      	b.n	800531e <HAL_I2C_Master_Transmit+0x21e>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005138:	f7fe fb5e 	bl	80037f8 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	9300      	str	r3, [sp, #0]
 8005142:	2319      	movs	r3, #25
 8005144:	2201      	movs	r2, #1
 8005146:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fa0a 	bl	8005564 <I2C_WaitOnFlagUntilTimeout>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e0e1      	b.n	800531e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2221      	movs	r2, #33	@ 0x21
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2210      	movs	r2, #16
 8005166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	893a      	ldrh	r2, [r7, #8]
 800517a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005186:	b29b      	uxth	r3, r3
 8005188:	2bff      	cmp	r3, #255	@ 0xff
 800518a:	d906      	bls.n	800519a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	22ff      	movs	r2, #255	@ 0xff
 8005190:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005192:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e007      	b.n	80051aa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80051a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051a8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d024      	beq.n	80051fc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	3301      	adds	r3, #1
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	8979      	ldrh	r1, [r7, #10]
 80051ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005328 <HAL_I2C_Master_Transmit+0x228>)
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fbf1 	bl	80059dc <I2C_TransferConfig>
 80051fa:	e066      	b.n	80052ca <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005200:	b2da      	uxtb	r2, r3
 8005202:	8979      	ldrh	r1, [r7, #10]
 8005204:	4b48      	ldr	r3, [pc, #288]	@ (8005328 <HAL_I2C_Master_Transmit+0x228>)
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fbe6 	bl	80059dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005210:	e05b      	b.n	80052ca <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	6a39      	ldr	r1, [r7, #32]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f9f3 	bl	8005602 <I2C_WaitOnTXISFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e07b      	b.n	800531e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522a:	781a      	ldrb	r2, [r3, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d034      	beq.n	80052ca <HAL_I2C_Master_Transmit+0x1ca>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005264:	2b00      	cmp	r3, #0
 8005266:	d130      	bne.n	80052ca <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	2200      	movs	r2, #0
 8005270:	2180      	movs	r1, #128	@ 0x80
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f976 	bl	8005564 <I2C_WaitOnFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e04d      	b.n	800531e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005286:	b29b      	uxth	r3, r3
 8005288:	2bff      	cmp	r3, #255	@ 0xff
 800528a:	d90e      	bls.n	80052aa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	22ff      	movs	r2, #255	@ 0xff
 8005290:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005296:	b2da      	uxtb	r2, r3
 8005298:	8979      	ldrh	r1, [r7, #10]
 800529a:	2300      	movs	r3, #0
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 fb9a 	bl	80059dc <I2C_TransferConfig>
 80052a8:	e00f      	b.n	80052ca <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	8979      	ldrh	r1, [r7, #10]
 80052bc:	2300      	movs	r3, #0
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 fb89 	bl	80059dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d19e      	bne.n	8005212 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	6a39      	ldr	r1, [r7, #32]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f9d9 	bl	8005690 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e01a      	b.n	800531e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2220      	movs	r2, #32
 80052ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	4b0c      	ldr	r3, [pc, #48]	@ (800532c <HAL_I2C_Master_Transmit+0x22c>)
 80052fc:	400b      	ands	r3, r1
 80052fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2220      	movs	r2, #32
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800531c:	2302      	movs	r3, #2
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	80002000 	.word	0x80002000
 800532c:	fe00e800 	.word	0xfe00e800

08005330 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b088      	sub	sp, #32
 8005334:	af02      	add	r7, sp, #8
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	461a      	mov	r2, r3
 800533c:	460b      	mov	r3, r1
 800533e:	817b      	strh	r3, [r7, #10]
 8005340:	4613      	mov	r3, r2
 8005342:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b20      	cmp	r3, #32
 800534e:	f040 80db 	bne.w	8005508 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_I2C_Master_Receive+0x30>
 800535c:	2302      	movs	r3, #2
 800535e:	e0d4      	b.n	800550a <HAL_I2C_Master_Receive+0x1da>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005368:	f7fe fa46 	bl	80037f8 <HAL_GetTick>
 800536c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	2319      	movs	r3, #25
 8005374:	2201      	movs	r2, #1
 8005376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 f8f2 	bl	8005564 <I2C_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0bf      	b.n	800550a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2222      	movs	r2, #34	@ 0x22
 800538e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2210      	movs	r2, #16
 8005396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	893a      	ldrh	r2, [r7, #8]
 80053aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2bff      	cmp	r3, #255	@ 0xff
 80053ba:	d90e      	bls.n	80053da <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	22ff      	movs	r2, #255	@ 0xff
 80053c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	8979      	ldrh	r1, [r7, #10]
 80053ca:	4b52      	ldr	r3, [pc, #328]	@ (8005514 <HAL_I2C_Master_Receive+0x1e4>)
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fb02 	bl	80059dc <I2C_TransferConfig>
 80053d8:	e06d      	b.n	80054b6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053de:	b29a      	uxth	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	8979      	ldrh	r1, [r7, #10]
 80053ec:	4b49      	ldr	r3, [pc, #292]	@ (8005514 <HAL_I2C_Master_Receive+0x1e4>)
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 faf1 	bl	80059dc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80053fa:	e05c      	b.n	80054b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	6a39      	ldr	r1, [r7, #32]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 f989 	bl	8005718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e07c      	b.n	800550a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800542c:	3b01      	subs	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005438:	b29b      	uxth	r3, r3
 800543a:	3b01      	subs	r3, #1
 800543c:	b29a      	uxth	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d034      	beq.n	80054b6 <HAL_I2C_Master_Receive+0x186>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005450:	2b00      	cmp	r3, #0
 8005452:	d130      	bne.n	80054b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2200      	movs	r2, #0
 800545c:	2180      	movs	r1, #128	@ 0x80
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f880 	bl	8005564 <I2C_WaitOnFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e04d      	b.n	800550a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	2bff      	cmp	r3, #255	@ 0xff
 8005476:	d90e      	bls.n	8005496 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	22ff      	movs	r2, #255	@ 0xff
 800547c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005482:	b2da      	uxtb	r2, r3
 8005484:	8979      	ldrh	r1, [r7, #10]
 8005486:	2300      	movs	r3, #0
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 faa4 	bl	80059dc <I2C_TransferConfig>
 8005494:	e00f      	b.n	80054b6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	8979      	ldrh	r1, [r7, #10]
 80054a8:	2300      	movs	r3, #0
 80054aa:	9300      	str	r3, [sp, #0]
 80054ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 fa93 	bl	80059dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d19d      	bne.n	80053fc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	6a39      	ldr	r1, [r7, #32]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f8e3 	bl	8005690 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e01a      	b.n	800550a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2220      	movs	r2, #32
 80054da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6859      	ldr	r1, [r3, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b0c      	ldr	r3, [pc, #48]	@ (8005518 <HAL_I2C_Master_Receive+0x1e8>)
 80054e8:	400b      	ands	r3, r1
 80054ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2220      	movs	r2, #32
 80054f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	e000      	b.n	800550a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005508:	2302      	movs	r3, #2
  }
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	80002400 	.word	0x80002400
 8005518:	fe00e800 	.word	0xfe00e800

0800551c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	f003 0302 	and.w	r3, r3, #2
 800552e:	2b02      	cmp	r3, #2
 8005530:	d103      	bne.n	800553a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2200      	movs	r2, #0
 8005538:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b01      	cmp	r3, #1
 8005546:	d007      	beq.n	8005558 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	619a      	str	r2, [r3, #24]
  }
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	4613      	mov	r3, r2
 8005572:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005574:	e031      	b.n	80055da <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d02d      	beq.n	80055da <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557e:	f7fe f93b 	bl	80037f8 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d302      	bcc.n	8005594 <I2C_WaitOnFlagUntilTimeout+0x30>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d122      	bne.n	80055da <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4013      	ands	r3, r2
 800559e:	68ba      	ldr	r2, [r7, #8]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	bf0c      	ite	eq
 80055a4:	2301      	moveq	r3, #1
 80055a6:	2300      	movne	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	79fb      	ldrb	r3, [r7, #7]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d113      	bne.n	80055da <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b6:	f043 0220 	orr.w	r2, r3, #32
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2220      	movs	r2, #32
 80055c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e00f      	b.n	80055fa <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699a      	ldr	r2, [r3, #24]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	79fb      	ldrb	r3, [r7, #7]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d0be      	beq.n	8005576 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800560e:	e033      	b.n	8005678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f901 	bl	800581c <I2C_IsErrorOccurred>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e031      	b.n	8005688 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d025      	beq.n	8005678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562c:	f7fe f8e4 	bl	80037f8 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	d302      	bcc.n	8005642 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d11a      	bne.n	8005678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b02      	cmp	r3, #2
 800564e:	d013      	beq.n	8005678 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005654:	f043 0220 	orr.w	r2, r3, #32
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e007      	b.n	8005688 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b02      	cmp	r3, #2
 8005684:	d1c4      	bne.n	8005610 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800569c:	e02f      	b.n	80056fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f000 f8ba 	bl	800581c <I2C_IsErrorOccurred>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e02d      	b.n	800570e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b2:	f7fe f8a1 	bl	80037f8 <HAL_GetTick>
 80056b6:	4602      	mov	r2, r0
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d302      	bcc.n	80056c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d11a      	bne.n	80056fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b20      	cmp	r3, #32
 80056d4:	d013      	beq.n	80056fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056da:	f043 0220 	orr.w	r2, r3, #32
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e007      	b.n	800570e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b20      	cmp	r3, #32
 800570a:	d1c8      	bne.n	800569e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005724:	e06b      	b.n	80057fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f876 	bl	800581c <I2C_IsErrorOccurred>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e069      	b.n	800580e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b20      	cmp	r3, #32
 8005746:	d138      	bne.n	80057ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	f003 0304 	and.w	r3, r3, #4
 8005752:	2b04      	cmp	r3, #4
 8005754:	d105      	bne.n	8005762 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	e055      	b.n	800580e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b10      	cmp	r3, #16
 800576e:	d107      	bne.n	8005780 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2210      	movs	r2, #16
 8005776:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2204      	movs	r2, #4
 800577c:	645a      	str	r2, [r3, #68]	@ 0x44
 800577e:	e002      	b.n	8005786 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2220      	movs	r2, #32
 800578c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6859      	ldr	r1, [r3, #4]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	4b1f      	ldr	r3, [pc, #124]	@ (8005818 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 800579a:	400b      	ands	r3, r1
 800579c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2220      	movs	r2, #32
 80057a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e029      	b.n	800580e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ba:	f7fe f81d 	bl	80037f8 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d116      	bne.n	80057fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	f003 0304 	and.w	r3, r3, #4
 80057da:	2b04      	cmp	r3, #4
 80057dc:	d00f      	beq.n	80057fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057e2:	f043 0220 	orr.w	r2, r3, #32
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e007      	b.n	800580e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b04      	cmp	r3, #4
 800580a:	d18c      	bne.n	8005726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	fe00e800 	.word	0xfe00e800

0800581c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	@ 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	699b      	ldr	r3, [r3, #24]
 8005834:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b00      	cmp	r3, #0
 8005846:	d068      	beq.n	800591a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2210      	movs	r2, #16
 800584e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005850:	e049      	b.n	80058e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d045      	beq.n	80058e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fd ffcd 	bl	80037f8 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <I2C_IsErrorOccurred+0x54>
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d13a      	bne.n	80058e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800587a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005882:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800588e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005892:	d121      	bne.n	80058d8 <I2C_IsErrorOccurred+0xbc>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800589a:	d01d      	beq.n	80058d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800589c:	7cfb      	ldrb	r3, [r7, #19]
 800589e:	2b20      	cmp	r3, #32
 80058a0:	d01a      	beq.n	80058d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80058b2:	f7fd ffa1 	bl	80037f8 <HAL_GetTick>
 80058b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058b8:	e00e      	b.n	80058d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80058ba:	f7fd ff9d 	bl	80037f8 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b19      	cmp	r3, #25
 80058c6:	d907      	bls.n	80058d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	f043 0320 	orr.w	r3, r3, #32
 80058ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80058d6:	e006      	b.n	80058e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d1e9      	bne.n	80058ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d003      	beq.n	80058fc <I2C_IsErrorOccurred+0xe0>
 80058f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0aa      	beq.n	8005852 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2220      	movs	r2, #32
 800590a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f043 0304 	orr.w	r3, r3, #4
 8005912:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00b      	beq.n	8005944 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800593c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00b      	beq.n	8005966 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	f043 0308 	orr.w	r3, r3, #8
 8005954:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800595e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f043 0302 	orr.w	r3, r3, #2
 8005976:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005980:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005988:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800598c:	2b00      	cmp	r3, #0
 800598e:	d01c      	beq.n	80059ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff fdc3 	bl	800551c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6859      	ldr	r1, [r3, #4]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <I2C_IsErrorOccurred+0x1bc>)
 80059a2:	400b      	ands	r3, r1
 80059a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	431a      	orrs	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80059ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3728      	adds	r7, #40	@ 0x28
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	fe00e800 	.word	0xfe00e800

080059dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	607b      	str	r3, [r7, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	817b      	strh	r3, [r7, #10]
 80059ea:	4613      	mov	r3, r2
 80059ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059ee:	897b      	ldrh	r3, [r7, #10]
 80059f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059f4:	7a7b      	ldrb	r3, [r7, #9]
 80059f6:	041b      	lsls	r3, r3, #16
 80059f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	0d5b      	lsrs	r3, r3, #21
 8005a16:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005a1a:	4b08      	ldr	r3, [pc, #32]	@ (8005a3c <I2C_TransferConfig+0x60>)
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	ea02 0103 	and.w	r1, r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a2e:	bf00      	nop
 8005a30:	371c      	adds	r7, #28
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	03ff63ff 	.word	0x03ff63ff

08005a40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d138      	bne.n	8005ac8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d101      	bne.n	8005a64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a60:	2302      	movs	r3, #2
 8005a62:	e032      	b.n	8005aca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2224      	movs	r2, #36	@ 0x24
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 0201 	bic.w	r2, r2, #1
 8005a82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6819      	ldr	r1, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f042 0201 	orr.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e000      	b.n	8005aca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ac8:	2302      	movs	r3, #2
  }
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d139      	bne.n	8005b60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e033      	b.n	8005b62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2224      	movs	r2, #36	@ 0x24
 8005b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f022 0201 	bic.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	e000      	b.n	8005b62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b60:	2302      	movs	r3, #2
  }
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
	...

08005b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b74:	4b04      	ldr	r3, [pc, #16]	@ (8005b88 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40007000 	.word	0x40007000

08005b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b9a:	d130      	bne.n	8005bfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b9c:	4b23      	ldr	r3, [pc, #140]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ba4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ba8:	d038      	beq.n	8005c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005baa:	4b20      	ldr	r3, [pc, #128]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bb4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bba:	4b1d      	ldr	r3, [pc, #116]	@ (8005c30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2232      	movs	r2, #50	@ 0x32
 8005bc0:	fb02 f303 	mul.w	r3, r2, r3
 8005bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8005c34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bca:	0c9b      	lsrs	r3, r3, #18
 8005bcc:	3301      	adds	r3, #1
 8005bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bd0:	e002      	b.n	8005bd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bd8:	4b14      	ldr	r3, [pc, #80]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005be4:	d102      	bne.n	8005bec <HAL_PWREx_ControlVoltageScaling+0x60>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f2      	bne.n	8005bd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bec:	4b0f      	ldr	r3, [pc, #60]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bf8:	d110      	bne.n	8005c1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e00f      	b.n	8005c1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c0a:	d007      	beq.n	8005c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005c0c:	4b07      	ldr	r3, [pc, #28]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c14:	4a05      	ldr	r2, [pc, #20]	@ (8005c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005c1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	40007000 	.word	0x40007000
 8005c30:	2000002c 	.word	0x2000002c
 8005c34:	431bde83 	.word	0x431bde83

08005c38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b088      	sub	sp, #32
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f000 bc02 	b.w	8006450 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c4c:	4b96      	ldr	r3, [pc, #600]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 030c 	and.w	r3, r3, #12
 8005c54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c56:	4b94      	ldr	r3, [pc, #592]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 80e4 	beq.w	8005e36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d007      	beq.n	8005c84 <HAL_RCC_OscConfig+0x4c>
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	2b0c      	cmp	r3, #12
 8005c78:	f040 808b 	bne.w	8005d92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	f040 8087 	bne.w	8005d92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c84:	4b88      	ldr	r3, [pc, #544]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_OscConfig+0x64>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e3d9      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1a      	ldr	r2, [r3, #32]
 8005ca0:	4b81      	ldr	r3, [pc, #516]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d004      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x7e>
 8005cac:	4b7e      	ldr	r3, [pc, #504]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cb4:	e005      	b.n	8005cc2 <HAL_RCC_OscConfig+0x8a>
 8005cb6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d223      	bcs.n	8005d0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fd8c 	bl	80067e8 <RCC_SetFlashLatencyFromMSIRange>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e3ba      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cda:	4b73      	ldr	r3, [pc, #460]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a72      	ldr	r2, [pc, #456]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005ce0:	f043 0308 	orr.w	r3, r3, #8
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	4b70      	ldr	r3, [pc, #448]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	496d      	ldr	r1, [pc, #436]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cf8:	4b6b      	ldr	r3, [pc, #428]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	4968      	ldr	r1, [pc, #416]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	604b      	str	r3, [r1, #4]
 8005d0c:	e025      	b.n	8005d5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d0e:	4b66      	ldr	r3, [pc, #408]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a65      	ldr	r2, [pc, #404]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005d14:	f043 0308 	orr.w	r3, r3, #8
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	4b63      	ldr	r3, [pc, #396]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	4960      	ldr	r1, [pc, #384]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	495b      	ldr	r1, [pc, #364]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d109      	bne.n	8005d5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fd4c 	bl	80067e8 <RCC_SetFlashLatencyFromMSIRange>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e37a      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d5a:	f000 fc81 	bl	8006660 <HAL_RCC_GetSysClockFreq>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	4b51      	ldr	r3, [pc, #324]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	4950      	ldr	r1, [pc, #320]	@ (8005eac <HAL_RCC_OscConfig+0x274>)
 8005d6c:	5ccb      	ldrb	r3, [r1, r3]
 8005d6e:	f003 031f 	and.w	r3, r3, #31
 8005d72:	fa22 f303 	lsr.w	r3, r2, r3
 8005d76:	4a4e      	ldr	r2, [pc, #312]	@ (8005eb0 <HAL_RCC_OscConfig+0x278>)
 8005d78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d7a:	4b4e      	ldr	r3, [pc, #312]	@ (8005eb4 <HAL_RCC_OscConfig+0x27c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fd fcea 	bl	8003758 <HAL_InitTick>
 8005d84:	4603      	mov	r3, r0
 8005d86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d052      	beq.n	8005e34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	e35e      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d032      	beq.n	8005e00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d9a:	4b43      	ldr	r3, [pc, #268]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a42      	ldr	r2, [pc, #264]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005da6:	f7fd fd27 	bl	80037f8 <HAL_GetTick>
 8005daa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dac:	e008      	b.n	8005dc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005dae:	f7fd fd23 	bl	80037f8 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e347      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005dc0:	4b39      	ldr	r3, [pc, #228]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005dcc:	4b36      	ldr	r3, [pc, #216]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a35      	ldr	r2, [pc, #212]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005dd2:	f043 0308 	orr.w	r3, r3, #8
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	4b33      	ldr	r3, [pc, #204]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	4930      	ldr	r1, [pc, #192]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dea:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	492b      	ldr	r1, [pc, #172]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	604b      	str	r3, [r1, #4]
 8005dfe:	e01a      	b.n	8005e36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005e00:	4b29      	ldr	r3, [pc, #164]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a28      	ldr	r2, [pc, #160]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e06:	f023 0301 	bic.w	r3, r3, #1
 8005e0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005e0c:	f7fd fcf4 	bl	80037f8 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e14:	f7fd fcf0 	bl	80037f8 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e314      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e26:	4b20      	ldr	r3, [pc, #128]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x1dc>
 8005e32:	e000      	b.n	8005e36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d073      	beq.n	8005f2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_OscConfig+0x21c>
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b0c      	cmp	r3, #12
 8005e4c:	d10e      	bne.n	8005e6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d10b      	bne.n	8005e6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e54:	4b14      	ldr	r3, [pc, #80]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d063      	beq.n	8005f28 <HAL_RCC_OscConfig+0x2f0>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d15f      	bne.n	8005f28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e2f1      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e74:	d106      	bne.n	8005e84 <HAL_RCC_OscConfig+0x24c>
 8005e76:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	e025      	b.n	8005ed0 <HAL_RCC_OscConfig+0x298>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e8c:	d114      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x280>
 8005e8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a05      	ldr	r2, [pc, #20]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	4b03      	ldr	r3, [pc, #12]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a02      	ldr	r2, [pc, #8]	@ (8005ea8 <HAL_RCC_OscConfig+0x270>)
 8005ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	e013      	b.n	8005ed0 <HAL_RCC_OscConfig+0x298>
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	0800fee4 	.word	0x0800fee4
 8005eb0:	2000002c 	.word	0x2000002c
 8005eb4:	20000030 	.word	0x20000030
 8005eb8:	4ba0      	ldr	r3, [pc, #640]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a9f      	ldr	r2, [pc, #636]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ec2:	6013      	str	r3, [r2, #0]
 8005ec4:	4b9d      	ldr	r3, [pc, #628]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a9c      	ldr	r2, [pc, #624]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d013      	beq.n	8005f00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fd fc8e 	bl	80037f8 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee0:	f7fd fc8a 	bl	80037f8 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b64      	cmp	r3, #100	@ 0x64
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e2ae      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ef2:	4b92      	ldr	r3, [pc, #584]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x2a8>
 8005efe:	e014      	b.n	8005f2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f00:	f7fd fc7a 	bl	80037f8 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f08:	f7fd fc76 	bl	80037f8 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b64      	cmp	r3, #100	@ 0x64
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e29a      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f1a:	4b88      	ldr	r3, [pc, #544]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f0      	bne.n	8005f08 <HAL_RCC_OscConfig+0x2d0>
 8005f26:	e000      	b.n	8005f2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d060      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d005      	beq.n	8005f48 <HAL_RCC_OscConfig+0x310>
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	2b0c      	cmp	r3, #12
 8005f40:	d119      	bne.n	8005f76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d116      	bne.n	8005f76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f48:	4b7c      	ldr	r3, [pc, #496]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_RCC_OscConfig+0x328>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e277      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f60:	4b76      	ldr	r3, [pc, #472]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	061b      	lsls	r3, r3, #24
 8005f6e:	4973      	ldr	r1, [pc, #460]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f74:	e040      	b.n	8005ff8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d023      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f7e:	4b6f      	ldr	r3, [pc, #444]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a6e      	ldr	r2, [pc, #440]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f8a:	f7fd fc35 	bl	80037f8 <HAL_GetTick>
 8005f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f90:	e008      	b.n	8005fa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f92:	f7fd fc31 	bl	80037f8 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d901      	bls.n	8005fa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e255      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fa4:	4b65      	ldr	r3, [pc, #404]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d0f0      	beq.n	8005f92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb0:	4b62      	ldr	r3, [pc, #392]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	061b      	lsls	r3, r3, #24
 8005fbe:	495f      	ldr	r1, [pc, #380]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	604b      	str	r3, [r1, #4]
 8005fc4:	e018      	b.n	8005ff8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fc6:	4b5d      	ldr	r3, [pc, #372]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a5c      	ldr	r2, [pc, #368]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005fcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd2:	f7fd fc11 	bl	80037f8 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fda:	f7fd fc0d 	bl	80037f8 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e231      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fec:	4b53      	ldr	r3, [pc, #332]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1f0      	bne.n	8005fda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d03c      	beq.n	800607e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01c      	beq.n	8006046 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800600c:	4b4b      	ldr	r3, [pc, #300]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 800600e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006012:	4a4a      	ldr	r2, [pc, #296]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8006014:	f043 0301 	orr.w	r3, r3, #1
 8006018:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7fd fbec 	bl	80037f8 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006024:	f7fd fbe8 	bl	80037f8 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e20c      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006036:	4b41      	ldr	r3, [pc, #260]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8006038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d0ef      	beq.n	8006024 <HAL_RCC_OscConfig+0x3ec>
 8006044:	e01b      	b.n	800607e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006046:	4b3d      	ldr	r3, [pc, #244]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8006048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800604c:	4a3b      	ldr	r2, [pc, #236]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 800604e:	f023 0301 	bic.w	r3, r3, #1
 8006052:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006056:	f7fd fbcf 	bl	80037f8 <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800605c:	e008      	b.n	8006070 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605e:	f7fd fbcb 	bl	80037f8 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d901      	bls.n	8006070 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e1ef      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006070:	4b32      	ldr	r3, [pc, #200]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8006072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006076:	f003 0302 	and.w	r3, r3, #2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1ef      	bne.n	800605e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 80a6 	beq.w	80061d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800608c:	2300      	movs	r3, #0
 800608e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006090:	4b2a      	ldr	r3, [pc, #168]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8006092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10d      	bne.n	80060b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800609c:	4b27      	ldr	r3, [pc, #156]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 800609e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a0:	4a26      	ldr	r2, [pc, #152]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 80060a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80060a8:	4b24      	ldr	r3, [pc, #144]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 80060aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060b0:	60bb      	str	r3, [r7, #8]
 80060b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060b4:	2301      	movs	r3, #1
 80060b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060b8:	4b21      	ldr	r3, [pc, #132]	@ (8006140 <HAL_RCC_OscConfig+0x508>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d118      	bne.n	80060f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006140 <HAL_RCC_OscConfig+0x508>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006140 <HAL_RCC_OscConfig+0x508>)
 80060ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060d0:	f7fd fb92 	bl	80037f8 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060d8:	f7fd fb8e 	bl	80037f8 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e1b2      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060ea:	4b15      	ldr	r3, [pc, #84]	@ (8006140 <HAL_RCC_OscConfig+0x508>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0f0      	beq.n	80060d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d108      	bne.n	8006110 <HAL_RCC_OscConfig+0x4d8>
 80060fe:	4b0f      	ldr	r3, [pc, #60]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006104:	4a0d      	ldr	r2, [pc, #52]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800610e:	e029      	b.n	8006164 <HAL_RCC_OscConfig+0x52c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2b05      	cmp	r3, #5
 8006116:	d115      	bne.n	8006144 <HAL_RCC_OscConfig+0x50c>
 8006118:	4b08      	ldr	r3, [pc, #32]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 800611a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611e:	4a07      	ldr	r2, [pc, #28]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8006120:	f043 0304 	orr.w	r3, r3, #4
 8006124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006128:	4b04      	ldr	r3, [pc, #16]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 800612a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612e:	4a03      	ldr	r2, [pc, #12]	@ (800613c <HAL_RCC_OscConfig+0x504>)
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006138:	e014      	b.n	8006164 <HAL_RCC_OscConfig+0x52c>
 800613a:	bf00      	nop
 800613c:	40021000 	.word	0x40021000
 8006140:	40007000 	.word	0x40007000
 8006144:	4b9a      	ldr	r3, [pc, #616]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614a:	4a99      	ldr	r2, [pc, #612]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006154:	4b96      	ldr	r3, [pc, #600]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615a:	4a95      	ldr	r2, [pc, #596]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 800615c:	f023 0304 	bic.w	r3, r3, #4
 8006160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d016      	beq.n	800619a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800616c:	f7fd fb44 	bl	80037f8 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006172:	e00a      	b.n	800618a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006174:	f7fd fb40 	bl	80037f8 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006182:	4293      	cmp	r3, r2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e162      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800618a:	4b89      	ldr	r3, [pc, #548]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 800618c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0ed      	beq.n	8006174 <HAL_RCC_OscConfig+0x53c>
 8006198:	e015      	b.n	80061c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800619a:	f7fd fb2d 	bl	80037f8 <HAL_GetTick>
 800619e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061a0:	e00a      	b.n	80061b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061a2:	f7fd fb29 	bl	80037f8 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d901      	bls.n	80061b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e14b      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061b8:	4b7d      	ldr	r3, [pc, #500]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1ed      	bne.n	80061a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061c6:	7ffb      	ldrb	r3, [r7, #31]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d105      	bne.n	80061d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061cc:	4b78      	ldr	r3, [pc, #480]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 80061ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061d0:	4a77      	ldr	r2, [pc, #476]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 80061d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061d6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0320 	and.w	r3, r3, #32
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d03c      	beq.n	800625e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01c      	beq.n	8006226 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061ec:	4b70      	ldr	r3, [pc, #448]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 80061ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061f2:	4a6f      	ldr	r2, [pc, #444]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fc:	f7fd fafc 	bl	80037f8 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006204:	f7fd faf8 	bl	80037f8 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e11c      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006216:	4b66      	ldr	r3, [pc, #408]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 8006218:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0ef      	beq.n	8006204 <HAL_RCC_OscConfig+0x5cc>
 8006224:	e01b      	b.n	800625e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006226:	4b62      	ldr	r3, [pc, #392]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 8006228:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800622c:	4a60      	ldr	r2, [pc, #384]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 800622e:	f023 0301 	bic.w	r3, r3, #1
 8006232:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006236:	f7fd fadf 	bl	80037f8 <HAL_GetTick>
 800623a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800623c:	e008      	b.n	8006250 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800623e:	f7fd fadb 	bl	80037f8 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e0ff      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006250:	4b57      	ldr	r3, [pc, #348]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 8006252:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1ef      	bne.n	800623e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 80f3 	beq.w	800644e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626c:	2b02      	cmp	r3, #2
 800626e:	f040 80c9 	bne.w	8006404 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006272:	4b4f      	ldr	r3, [pc, #316]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f003 0203 	and.w	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006282:	429a      	cmp	r2, r3
 8006284:	d12c      	bne.n	80062e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006290:	3b01      	subs	r3, #1
 8006292:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006294:	429a      	cmp	r2, r3
 8006296:	d123      	bne.n	80062e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d11b      	bne.n	80062e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d113      	bne.n	80062e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c2:	085b      	lsrs	r3, r3, #1
 80062c4:	3b01      	subs	r3, #1
 80062c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d109      	bne.n	80062e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	3b01      	subs	r3, #1
 80062da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062dc:	429a      	cmp	r2, r3
 80062de:	d06b      	beq.n	80063b8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b0c      	cmp	r3, #12
 80062e4:	d062      	beq.n	80063ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80062e6:	4b32      	ldr	r3, [pc, #200]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e0ac      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80062f6:	4b2e      	ldr	r3, [pc, #184]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a2d      	ldr	r2, [pc, #180]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 80062fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006300:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006302:	f7fd fa79 	bl	80037f8 <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006308:	e008      	b.n	800631c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800630a:	f7fd fa75 	bl	80037f8 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d901      	bls.n	800631c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e099      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800631c:	4b24      	ldr	r3, [pc, #144]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1f0      	bne.n	800630a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006328:	4b21      	ldr	r3, [pc, #132]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	4b21      	ldr	r3, [pc, #132]	@ (80063b4 <HAL_RCC_OscConfig+0x77c>)
 800632e:	4013      	ands	r3, r2
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006338:	3a01      	subs	r2, #1
 800633a:	0112      	lsls	r2, r2, #4
 800633c:	4311      	orrs	r1, r2
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006342:	0212      	lsls	r2, r2, #8
 8006344:	4311      	orrs	r1, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800634a:	0852      	lsrs	r2, r2, #1
 800634c:	3a01      	subs	r2, #1
 800634e:	0552      	lsls	r2, r2, #21
 8006350:	4311      	orrs	r1, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006356:	0852      	lsrs	r2, r2, #1
 8006358:	3a01      	subs	r2, #1
 800635a:	0652      	lsls	r2, r2, #25
 800635c:	4311      	orrs	r1, r2
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006362:	06d2      	lsls	r2, r2, #27
 8006364:	430a      	orrs	r2, r1
 8006366:	4912      	ldr	r1, [pc, #72]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 8006368:	4313      	orrs	r3, r2
 800636a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800636c:	4b10      	ldr	r3, [pc, #64]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0f      	ldr	r2, [pc, #60]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 8006372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006376:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006378:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	4a0c      	ldr	r2, [pc, #48]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 800637e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006382:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006384:	f7fd fa38 	bl	80037f8 <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638c:	f7fd fa34 	bl	80037f8 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e058      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800639e:	4b04      	ldr	r3, [pc, #16]	@ (80063b0 <HAL_RCC_OscConfig+0x778>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d0f0      	beq.n	800638c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80063aa:	e050      	b.n	800644e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e04f      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
 80063b0:	40021000 	.word	0x40021000
 80063b4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063b8:	4b27      	ldr	r3, [pc, #156]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d144      	bne.n	800644e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063c4:	4b24      	ldr	r3, [pc, #144]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a23      	ldr	r2, [pc, #140]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 80063ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063d0:	4b21      	ldr	r3, [pc, #132]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4a20      	ldr	r2, [pc, #128]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 80063d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063dc:	f7fd fa0c 	bl	80037f8 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063e2:	e008      	b.n	80063f6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e4:	f7fd fa08 	bl	80037f8 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d901      	bls.n	80063f6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e02c      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063f6:	4b18      	ldr	r3, [pc, #96]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0f0      	beq.n	80063e4 <HAL_RCC_OscConfig+0x7ac>
 8006402:	e024      	b.n	800644e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	2b0c      	cmp	r3, #12
 8006408:	d01f      	beq.n	800644a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800640a:	4b13      	ldr	r3, [pc, #76]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a12      	ldr	r2, [pc, #72]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 8006410:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006416:	f7fd f9ef 	bl	80037f8 <HAL_GetTick>
 800641a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800641c:	e008      	b.n	8006430 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800641e:	f7fd f9eb 	bl	80037f8 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e00f      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006430:	4b09      	ldr	r3, [pc, #36]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f0      	bne.n	800641e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800643c:	4b06      	ldr	r3, [pc, #24]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	4905      	ldr	r1, [pc, #20]	@ (8006458 <HAL_RCC_OscConfig+0x820>)
 8006442:	4b06      	ldr	r3, [pc, #24]	@ (800645c <HAL_RCC_OscConfig+0x824>)
 8006444:	4013      	ands	r3, r2
 8006446:	60cb      	str	r3, [r1, #12]
 8006448:	e001      	b.n	800644e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3720      	adds	r7, #32
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40021000 	.word	0x40021000
 800645c:	feeefffc 	.word	0xfeeefffc

08006460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e0e7      	b.n	8006644 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006474:	4b75      	ldr	r3, [pc, #468]	@ (800664c <HAL_RCC_ClockConfig+0x1ec>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d910      	bls.n	80064a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006482:	4b72      	ldr	r3, [pc, #456]	@ (800664c <HAL_RCC_ClockConfig+0x1ec>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f023 0207 	bic.w	r2, r3, #7
 800648a:	4970      	ldr	r1, [pc, #448]	@ (800664c <HAL_RCC_ClockConfig+0x1ec>)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	4313      	orrs	r3, r2
 8006490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006492:	4b6e      	ldr	r3, [pc, #440]	@ (800664c <HAL_RCC_ClockConfig+0x1ec>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d001      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0cf      	b.n	8006644 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d010      	beq.n	80064d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	4b66      	ldr	r3, [pc, #408]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064bc:	429a      	cmp	r2, r3
 80064be:	d908      	bls.n	80064d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c0:	4b63      	ldr	r3, [pc, #396]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	4960      	ldr	r1, [pc, #384]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d04c      	beq.n	8006578 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d107      	bne.n	80064f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064e6:	4b5a      	ldr	r3, [pc, #360]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d121      	bne.n	8006536 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e0a6      	b.n	8006644 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b02      	cmp	r3, #2
 80064fc:	d107      	bne.n	800650e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064fe:	4b54      	ldr	r3, [pc, #336]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d115      	bne.n	8006536 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e09a      	b.n	8006644 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d107      	bne.n	8006526 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006516:	4b4e      	ldr	r3, [pc, #312]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e08e      	b.n	8006644 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006526:	4b4a      	ldr	r3, [pc, #296]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e086      	b.n	8006644 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006536:	4b46      	ldr	r3, [pc, #280]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 0203 	bic.w	r2, r3, #3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	4943      	ldr	r1, [pc, #268]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 8006544:	4313      	orrs	r3, r2
 8006546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006548:	f7fd f956 	bl	80037f8 <HAL_GetTick>
 800654c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800654e:	e00a      	b.n	8006566 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006550:	f7fd f952 	bl	80037f8 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800655e:	4293      	cmp	r3, r2
 8006560:	d901      	bls.n	8006566 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e06e      	b.n	8006644 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006566:	4b3a      	ldr	r3, [pc, #232]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 020c 	and.w	r2, r3, #12
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	429a      	cmp	r2, r3
 8006576:	d1eb      	bne.n	8006550 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d010      	beq.n	80065a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	4b31      	ldr	r3, [pc, #196]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006590:	429a      	cmp	r2, r3
 8006592:	d208      	bcs.n	80065a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006594:	4b2e      	ldr	r3, [pc, #184]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	492b      	ldr	r1, [pc, #172]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065a6:	4b29      	ldr	r3, [pc, #164]	@ (800664c <HAL_RCC_ClockConfig+0x1ec>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0307 	and.w	r3, r3, #7
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d210      	bcs.n	80065d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065b4:	4b25      	ldr	r3, [pc, #148]	@ (800664c <HAL_RCC_ClockConfig+0x1ec>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f023 0207 	bic.w	r2, r3, #7
 80065bc:	4923      	ldr	r1, [pc, #140]	@ (800664c <HAL_RCC_ClockConfig+0x1ec>)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065c4:	4b21      	ldr	r3, [pc, #132]	@ (800664c <HAL_RCC_ClockConfig+0x1ec>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d001      	beq.n	80065d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e036      	b.n	8006644 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0304 	and.w	r3, r3, #4
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d008      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	4918      	ldr	r1, [pc, #96]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d009      	beq.n	8006614 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006600:	4b13      	ldr	r3, [pc, #76]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	4910      	ldr	r1, [pc, #64]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 8006610:	4313      	orrs	r3, r2
 8006612:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006614:	f000 f824 	bl	8006660 <HAL_RCC_GetSysClockFreq>
 8006618:	4602      	mov	r2, r0
 800661a:	4b0d      	ldr	r3, [pc, #52]	@ (8006650 <HAL_RCC_ClockConfig+0x1f0>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	091b      	lsrs	r3, r3, #4
 8006620:	f003 030f 	and.w	r3, r3, #15
 8006624:	490b      	ldr	r1, [pc, #44]	@ (8006654 <HAL_RCC_ClockConfig+0x1f4>)
 8006626:	5ccb      	ldrb	r3, [r1, r3]
 8006628:	f003 031f 	and.w	r3, r3, #31
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	4a09      	ldr	r2, [pc, #36]	@ (8006658 <HAL_RCC_ClockConfig+0x1f8>)
 8006632:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006634:	4b09      	ldr	r3, [pc, #36]	@ (800665c <HAL_RCC_ClockConfig+0x1fc>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f7fd f88d 	bl	8003758 <HAL_InitTick>
 800663e:	4603      	mov	r3, r0
 8006640:	72fb      	strb	r3, [r7, #11]

  return status;
 8006642:	7afb      	ldrb	r3, [r7, #11]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40022000 	.word	0x40022000
 8006650:	40021000 	.word	0x40021000
 8006654:	0800fee4 	.word	0x0800fee4
 8006658:	2000002c 	.word	0x2000002c
 800665c:	20000030 	.word	0x20000030

08006660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006660:	b480      	push	{r7}
 8006662:	b089      	sub	sp, #36	@ 0x24
 8006664:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	2300      	movs	r3, #0
 800666c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800666e:	4b3e      	ldr	r3, [pc, #248]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x108>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 030c 	and.w	r3, r3, #12
 8006676:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006678:	4b3b      	ldr	r3, [pc, #236]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x108>)
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d005      	beq.n	8006694 <HAL_RCC_GetSysClockFreq+0x34>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	2b0c      	cmp	r3, #12
 800668c:	d121      	bne.n	80066d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d11e      	bne.n	80066d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006694:	4b34      	ldr	r3, [pc, #208]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x108>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d107      	bne.n	80066b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066a0:	4b31      	ldr	r3, [pc, #196]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x108>)
 80066a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066a6:	0a1b      	lsrs	r3, r3, #8
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	61fb      	str	r3, [r7, #28]
 80066ae:	e005      	b.n	80066bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x108>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	091b      	lsrs	r3, r3, #4
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80066bc:	4a2b      	ldr	r2, [pc, #172]	@ (800676c <HAL_RCC_GetSysClockFreq+0x10c>)
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10d      	bne.n	80066e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066d0:	e00a      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d102      	bne.n	80066de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066d8:	4b25      	ldr	r3, [pc, #148]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x110>)
 80066da:	61bb      	str	r3, [r7, #24]
 80066dc:	e004      	b.n	80066e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d101      	bne.n	80066e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066e4:	4b23      	ldr	r3, [pc, #140]	@ (8006774 <HAL_RCC_GetSysClockFreq+0x114>)
 80066e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b0c      	cmp	r3, #12
 80066ec:	d134      	bne.n	8006758 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x108>)
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f003 0303 	and.w	r3, r3, #3
 80066f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d003      	beq.n	8006706 <HAL_RCC_GetSysClockFreq+0xa6>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b03      	cmp	r3, #3
 8006702:	d003      	beq.n	800670c <HAL_RCC_GetSysClockFreq+0xac>
 8006704:	e005      	b.n	8006712 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006706:	4b1a      	ldr	r3, [pc, #104]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x110>)
 8006708:	617b      	str	r3, [r7, #20]
      break;
 800670a:	e005      	b.n	8006718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800670c:	4b19      	ldr	r3, [pc, #100]	@ (8006774 <HAL_RCC_GetSysClockFreq+0x114>)
 800670e:	617b      	str	r3, [r7, #20]
      break;
 8006710:	e002      	b.n	8006718 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	617b      	str	r3, [r7, #20]
      break;
 8006716:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006718:	4b13      	ldr	r3, [pc, #76]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x108>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	091b      	lsrs	r3, r3, #4
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	3301      	adds	r3, #1
 8006724:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006726:	4b10      	ldr	r3, [pc, #64]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x108>)
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	0a1b      	lsrs	r3, r3, #8
 800672c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	fb03 f202 	mul.w	r2, r3, r2
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	fbb2 f3f3 	udiv	r3, r2, r3
 800673c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800673e:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <HAL_RCC_GetSysClockFreq+0x108>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	0e5b      	lsrs	r3, r3, #25
 8006744:	f003 0303 	and.w	r3, r3, #3
 8006748:	3301      	adds	r3, #1
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	fbb2 f3f3 	udiv	r3, r2, r3
 8006756:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006758:	69bb      	ldr	r3, [r7, #24]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3724      	adds	r7, #36	@ 0x24
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40021000 	.word	0x40021000
 800676c:	0800fefc 	.word	0x0800fefc
 8006770:	00f42400 	.word	0x00f42400
 8006774:	007a1200 	.word	0x007a1200

08006778 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800677c:	4b03      	ldr	r3, [pc, #12]	@ (800678c <HAL_RCC_GetHCLKFreq+0x14>)
 800677e:	681b      	ldr	r3, [r3, #0]
}
 8006780:	4618      	mov	r0, r3
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	2000002c 	.word	0x2000002c

08006790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006794:	f7ff fff0 	bl	8006778 <HAL_RCC_GetHCLKFreq>
 8006798:	4602      	mov	r2, r0
 800679a:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	4904      	ldr	r1, [pc, #16]	@ (80067b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067a6:	5ccb      	ldrb	r3, [r1, r3]
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40021000 	.word	0x40021000
 80067b8:	0800fef4 	.word	0x0800fef4

080067bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067c0:	f7ff ffda 	bl	8006778 <HAL_RCC_GetHCLKFreq>
 80067c4:	4602      	mov	r2, r0
 80067c6:	4b06      	ldr	r3, [pc, #24]	@ (80067e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	0adb      	lsrs	r3, r3, #11
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	4904      	ldr	r1, [pc, #16]	@ (80067e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067d2:	5ccb      	ldrb	r3, [r1, r3]
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067dc:	4618      	mov	r0, r3
 80067de:	bd80      	pop	{r7, pc}
 80067e0:	40021000 	.word	0x40021000
 80067e4:	0800fef4 	.word	0x0800fef4

080067e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b086      	sub	sp, #24
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80067f4:	4b2a      	ldr	r3, [pc, #168]	@ (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006800:	f7ff f9b6 	bl	8005b70 <HAL_PWREx_GetVoltageRange>
 8006804:	6178      	str	r0, [r7, #20]
 8006806:	e014      	b.n	8006832 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006808:	4b25      	ldr	r3, [pc, #148]	@ (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800680a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800680c:	4a24      	ldr	r2, [pc, #144]	@ (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800680e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006812:	6593      	str	r3, [r2, #88]	@ 0x58
 8006814:	4b22      	ldr	r3, [pc, #136]	@ (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006820:	f7ff f9a6 	bl	8005b70 <HAL_PWREx_GetVoltageRange>
 8006824:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006826:	4b1e      	ldr	r3, [pc, #120]	@ (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800682a:	4a1d      	ldr	r2, [pc, #116]	@ (80068a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800682c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006830:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006838:	d10b      	bne.n	8006852 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b80      	cmp	r3, #128	@ 0x80
 800683e:	d919      	bls.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2ba0      	cmp	r3, #160	@ 0xa0
 8006844:	d902      	bls.n	800684c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006846:	2302      	movs	r3, #2
 8006848:	613b      	str	r3, [r7, #16]
 800684a:	e013      	b.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800684c:	2301      	movs	r3, #1
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	e010      	b.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b80      	cmp	r3, #128	@ 0x80
 8006856:	d902      	bls.n	800685e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006858:	2303      	movs	r3, #3
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e00a      	b.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b80      	cmp	r3, #128	@ 0x80
 8006862:	d102      	bne.n	800686a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006864:	2302      	movs	r3, #2
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	e004      	b.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2b70      	cmp	r3, #112	@ 0x70
 800686e:	d101      	bne.n	8006874 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006870:	2301      	movs	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006874:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f023 0207 	bic.w	r2, r3, #7
 800687c:	4909      	ldr	r1, [pc, #36]	@ (80068a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	4313      	orrs	r3, r2
 8006882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006884:	4b07      	ldr	r3, [pc, #28]	@ (80068a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0307 	and.w	r3, r3, #7
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	429a      	cmp	r2, r3
 8006890:	d001      	beq.n	8006896 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e000      	b.n	8006898 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	40021000 	.word	0x40021000
 80068a4:	40022000 	.word	0x40022000

080068a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068b0:	2300      	movs	r3, #0
 80068b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068b4:	2300      	movs	r3, #0
 80068b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d031      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80068cc:	d01a      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80068ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80068d2:	d814      	bhi.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d009      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80068d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80068dc:	d10f      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80068de:	4b5d      	ldr	r3, [pc, #372]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	4a5c      	ldr	r2, [pc, #368]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068e8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068ea:	e00c      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3304      	adds	r3, #4
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 f9ce 	bl	8006c94 <RCCEx_PLLSAI1_Config>
 80068f8:	4603      	mov	r3, r0
 80068fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80068fc:	e003      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	74fb      	strb	r3, [r7, #19]
      break;
 8006902:	e000      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800690c:	4b51      	ldr	r3, [pc, #324]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800690e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006912:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800691a:	494e      	ldr	r1, [pc, #312]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800691c:	4313      	orrs	r3, r2
 800691e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006922:	e001      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006924:	7cfb      	ldrb	r3, [r7, #19]
 8006926:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 809e 	beq.w	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006936:	2300      	movs	r3, #0
 8006938:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800693a:	4b46      	ldr	r3, [pc, #280]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800693c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006946:	2301      	movs	r3, #1
 8006948:	e000      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800694a:	2300      	movs	r3, #0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00d      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006950:	4b40      	ldr	r3, [pc, #256]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006954:	4a3f      	ldr	r2, [pc, #252]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006956:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800695a:	6593      	str	r3, [r2, #88]	@ 0x58
 800695c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800695e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006960:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006964:	60bb      	str	r3, [r7, #8]
 8006966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006968:	2301      	movs	r3, #1
 800696a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800696c:	4b3a      	ldr	r3, [pc, #232]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a39      	ldr	r2, [pc, #228]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006978:	f7fc ff3e 	bl	80037f8 <HAL_GetTick>
 800697c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800697e:	e009      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006980:	f7fc ff3a 	bl	80037f8 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d902      	bls.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	74fb      	strb	r3, [r7, #19]
        break;
 8006992:	e005      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006994:	4b30      	ldr	r3, [pc, #192]	@ (8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0ef      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80069a0:	7cfb      	ldrb	r3, [r7, #19]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d15a      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01e      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069bc:	697a      	ldr	r2, [r7, #20]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d019      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069c2:	4b24      	ldr	r3, [pc, #144]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069ce:	4b21      	ldr	r3, [pc, #132]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069d4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069de:	4b1d      	ldr	r3, [pc, #116]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069ee:	4a19      	ldr	r2, [pc, #100]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d016      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a00:	f7fc fefa 	bl	80037f8 <HAL_GetTick>
 8006a04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a06:	e00b      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a08:	f7fc fef6 	bl	80037f8 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d902      	bls.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	74fb      	strb	r3, [r7, #19]
            break;
 8006a1e:	e006      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a20:	4b0c      	ldr	r3, [pc, #48]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0ec      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006a2e:	7cfb      	ldrb	r3, [r7, #19]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a34:	4b07      	ldr	r3, [pc, #28]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a42:	4904      	ldr	r1, [pc, #16]	@ (8006a54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006a4a:	e009      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a4c:	7cfb      	ldrb	r3, [r7, #19]
 8006a4e:	74bb      	strb	r3, [r7, #18]
 8006a50:	e006      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006a52:	bf00      	nop
 8006a54:	40021000 	.word	0x40021000
 8006a58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a5c:	7cfb      	ldrb	r3, [r7, #19]
 8006a5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a60:	7c7b      	ldrb	r3, [r7, #17]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d105      	bne.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a66:	4b8a      	ldr	r3, [pc, #552]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a6a:	4a89      	ldr	r2, [pc, #548]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a70:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a7e:	4b84      	ldr	r3, [pc, #528]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a84:	f023 0203 	bic.w	r2, r3, #3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	4980      	ldr	r1, [pc, #512]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0302 	and.w	r3, r3, #2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00a      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006aa0:	4b7b      	ldr	r3, [pc, #492]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa6:	f023 020c 	bic.w	r2, r3, #12
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aae:	4978      	ldr	r1, [pc, #480]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ac2:	4b73      	ldr	r3, [pc, #460]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad0:	496f      	ldr	r1, [pc, #444]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00a      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aea:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af2:	4967      	ldr	r1, [pc, #412]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00a      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b06:	4b62      	ldr	r3, [pc, #392]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	495e      	ldr	r1, [pc, #376]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b28:	4b59      	ldr	r3, [pc, #356]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b36:	4956      	ldr	r1, [pc, #344]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b4a:	4b51      	ldr	r3, [pc, #324]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b58:	494d      	ldr	r1, [pc, #308]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d028      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b6c:	4b48      	ldr	r3, [pc, #288]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b72:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7a:	4945      	ldr	r1, [pc, #276]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b86:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b8a:	d106      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b8c:	4b40      	ldr	r3, [pc, #256]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	4a3f      	ldr	r2, [pc, #252]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b96:	60d3      	str	r3, [r2, #12]
 8006b98:	e011      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ba2:	d10c      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	2101      	movs	r1, #1
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 f872 	bl	8006c94 <RCCEx_PLLSAI1_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006bba:	7cfb      	ldrb	r3, [r7, #19]
 8006bbc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d028      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bca:	4b31      	ldr	r3, [pc, #196]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bd8:	492d      	ldr	r1, [pc, #180]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006be8:	d106      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bea:	4b29      	ldr	r3, [pc, #164]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	4a28      	ldr	r2, [pc, #160]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bf4:	60d3      	str	r3, [r2, #12]
 8006bf6:	e011      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c00:	d10c      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3304      	adds	r3, #4
 8006c06:	2101      	movs	r1, #1
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 f843 	bl	8006c94 <RCCEx_PLLSAI1_Config>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c12:	7cfb      	ldrb	r3, [r7, #19]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006c18:	7cfb      	ldrb	r3, [r7, #19]
 8006c1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01c      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c28:	4b19      	ldr	r3, [pc, #100]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c36:	4916      	ldr	r1, [pc, #88]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c46:	d10c      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	2102      	movs	r1, #2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f820 	bl	8006c94 <RCCEx_PLLSAI1_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c58:	7cfb      	ldrb	r3, [r7, #19]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006c5e:	7cfb      	ldrb	r3, [r7, #19]
 8006c60:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c6e:	4b08      	ldr	r3, [pc, #32]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c74:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c7c:	4904      	ldr	r1, [pc, #16]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c84:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3718      	adds	r7, #24
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	40021000 	.word	0x40021000

08006c94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ca2:	4b74      	ldr	r3, [pc, #464]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d018      	beq.n	8006ce0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006cae:	4b71      	ldr	r3, [pc, #452]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f003 0203 	and.w	r2, r3, #3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d10d      	bne.n	8006cda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
       ||
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d009      	beq.n	8006cda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006cc6:	4b6b      	ldr	r3, [pc, #428]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	091b      	lsrs	r3, r3, #4
 8006ccc:	f003 0307 	and.w	r3, r3, #7
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
       ||
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d047      	beq.n	8006d6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	73fb      	strb	r3, [r7, #15]
 8006cde:	e044      	b.n	8006d6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d018      	beq.n	8006d1a <RCCEx_PLLSAI1_Config+0x86>
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d825      	bhi.n	8006d38 <RCCEx_PLLSAI1_Config+0xa4>
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d002      	beq.n	8006cf6 <RCCEx_PLLSAI1_Config+0x62>
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d009      	beq.n	8006d08 <RCCEx_PLLSAI1_Config+0x74>
 8006cf4:	e020      	b.n	8006d38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cf6:	4b5f      	ldr	r3, [pc, #380]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d11d      	bne.n	8006d3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d06:	e01a      	b.n	8006d3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006d08:	4b5a      	ldr	r3, [pc, #360]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d116      	bne.n	8006d42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d18:	e013      	b.n	8006d42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006d1a:	4b56      	ldr	r3, [pc, #344]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10f      	bne.n	8006d46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d26:	4b53      	ldr	r3, [pc, #332]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d36:	e006      	b.n	8006d46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3c:	e004      	b.n	8006d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d3e:	bf00      	nop
 8006d40:	e002      	b.n	8006d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d46:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10d      	bne.n	8006d6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d4e:	4b49      	ldr	r3, [pc, #292]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6819      	ldr	r1, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	430b      	orrs	r3, r1
 8006d64:	4943      	ldr	r1, [pc, #268]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d17c      	bne.n	8006e6a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d70:	4b40      	ldr	r3, [pc, #256]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a3f      	ldr	r2, [pc, #252]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d7c:	f7fc fd3c 	bl	80037f8 <HAL_GetTick>
 8006d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d82:	e009      	b.n	8006d98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d84:	f7fc fd38 	bl	80037f8 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d902      	bls.n	8006d98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	73fb      	strb	r3, [r7, #15]
        break;
 8006d96:	e005      	b.n	8006da4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d98:	4b36      	ldr	r3, [pc, #216]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1ef      	bne.n	8006d84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d15f      	bne.n	8006e6a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d110      	bne.n	8006dd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006db0:	4b30      	ldr	r3, [pc, #192]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006db8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6892      	ldr	r2, [r2, #8]
 8006dc0:	0211      	lsls	r1, r2, #8
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	68d2      	ldr	r2, [r2, #12]
 8006dc6:	06d2      	lsls	r2, r2, #27
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	492a      	ldr	r1, [pc, #168]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	610b      	str	r3, [r1, #16]
 8006dd0:	e027      	b.n	8006e22 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d112      	bne.n	8006dfe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dd8:	4b26      	ldr	r3, [pc, #152]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006de0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6892      	ldr	r2, [r2, #8]
 8006de8:	0211      	lsls	r1, r2, #8
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	6912      	ldr	r2, [r2, #16]
 8006dee:	0852      	lsrs	r2, r2, #1
 8006df0:	3a01      	subs	r2, #1
 8006df2:	0552      	lsls	r2, r2, #21
 8006df4:	430a      	orrs	r2, r1
 8006df6:	491f      	ldr	r1, [pc, #124]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	610b      	str	r3, [r1, #16]
 8006dfc:	e011      	b.n	8006e22 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006e06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6892      	ldr	r2, [r2, #8]
 8006e0e:	0211      	lsls	r1, r2, #8
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6952      	ldr	r2, [r2, #20]
 8006e14:	0852      	lsrs	r2, r2, #1
 8006e16:	3a01      	subs	r2, #1
 8006e18:	0652      	lsls	r2, r2, #25
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	4915      	ldr	r1, [pc, #84]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e22:	4b14      	ldr	r3, [pc, #80]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a13      	ldr	r2, [pc, #76]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006e2c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2e:	f7fc fce3 	bl	80037f8 <HAL_GetTick>
 8006e32:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e34:	e009      	b.n	8006e4a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e36:	f7fc fcdf 	bl	80037f8 <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d902      	bls.n	8006e4a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	73fb      	strb	r3, [r7, #15]
          break;
 8006e48:	e005      	b.n	8006e56 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0ef      	beq.n	8006e36 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e5c:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	4903      	ldr	r1, [pc, #12]	@ (8006e74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40021000 	.word	0x40021000

08006e78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e095      	b.n	8006fb6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d108      	bne.n	8006ea4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e9a:	d009      	beq.n	8006eb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	61da      	str	r2, [r3, #28]
 8006ea2:	e005      	b.n	8006eb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fc f9fc 	bl	80032c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2202      	movs	r2, #2
 8006ed4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ee6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ef0:	d902      	bls.n	8006ef8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	e002      	b.n	8006efe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006efc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006f06:	d007      	beq.n	8006f18 <HAL_SPI_Init+0xa0>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f10:	d002      	beq.n	8006f18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f46:	431a      	orrs	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	69db      	ldr	r3, [r3, #28]
 8006f4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f50:	431a      	orrs	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1b      	ldr	r3, [r3, #32]
 8006f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f5a:	ea42 0103 	orr.w	r1, r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	0c1b      	lsrs	r3, r3, #16
 8006f74:	f003 0204 	and.w	r2, r3, #4
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f7c:	f003 0310 	and.w	r3, r3, #16
 8006f80:	431a      	orrs	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f86:	f003 0308 	and.w	r3, r3, #8
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006f94:	ea42 0103 	orr.w	r1, r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b088      	sub	sp, #32
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	60f8      	str	r0, [r7, #12]
 8006fc6:	60b9      	str	r1, [r7, #8]
 8006fc8:	603b      	str	r3, [r7, #0]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d101      	bne.n	8006fe0 <HAL_SPI_Transmit+0x22>
 8006fdc:	2302      	movs	r3, #2
 8006fde:	e15f      	b.n	80072a0 <HAL_SPI_Transmit+0x2e2>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fe8:	f7fc fc06 	bl	80037f8 <HAL_GetTick>
 8006fec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d002      	beq.n	8007004 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ffe:	2302      	movs	r3, #2
 8007000:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007002:	e148      	b.n	8007296 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_SPI_Transmit+0x52>
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d102      	bne.n	8007016 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007014:	e13f      	b.n	8007296 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2203      	movs	r2, #3
 800701a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	88fa      	ldrh	r2, [r7, #6]
 800702e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	88fa      	ldrh	r2, [r7, #6]
 8007034:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2200      	movs	r2, #0
 8007050:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007060:	d10f      	bne.n	8007082 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007070:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007080:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800708c:	2b40      	cmp	r3, #64	@ 0x40
 800708e:	d007      	beq.n	80070a0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800709e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80070a8:	d94f      	bls.n	800714a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <HAL_SPI_Transmit+0xfa>
 80070b2:	8afb      	ldrh	r3, [r7, #22]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d142      	bne.n	800713e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070bc:	881a      	ldrh	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c8:	1c9a      	adds	r2, r3, #2
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070dc:	e02f      	b.n	800713e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d112      	bne.n	8007112 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f0:	881a      	ldrh	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007110:	e015      	b.n	800713e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007112:	f7fc fb71 	bl	80037f8 <HAL_GetTick>
 8007116:	4602      	mov	r2, r0
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	1ad3      	subs	r3, r2, r3
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d803      	bhi.n	800712a <HAL_SPI_Transmit+0x16c>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007128:	d102      	bne.n	8007130 <HAL_SPI_Transmit+0x172>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d106      	bne.n	800713e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800713c:	e0ab      	b.n	8007296 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007142:	b29b      	uxth	r3, r3
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1ca      	bne.n	80070de <HAL_SPI_Transmit+0x120>
 8007148:	e080      	b.n	800724c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_SPI_Transmit+0x19a>
 8007152:	8afb      	ldrh	r3, [r7, #22]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d174      	bne.n	8007242 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b01      	cmp	r3, #1
 8007160:	d912      	bls.n	8007188 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007166:	881a      	ldrh	r2, [r3, #0]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007172:	1c9a      	adds	r2, r3, #2
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b02      	subs	r3, #2
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007186:	e05c      	b.n	8007242 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	330c      	adds	r3, #12
 8007192:	7812      	ldrb	r2, [r2, #0]
 8007194:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80071ae:	e048      	b.n	8007242 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d12b      	bne.n	8007216 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d912      	bls.n	80071ee <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	881a      	ldrh	r2, [r3, #0]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d8:	1c9a      	adds	r2, r3, #2
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	3b02      	subs	r3, #2
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80071ec:	e029      	b.n	8007242 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	330c      	adds	r3, #12
 80071f8:	7812      	ldrb	r2, [r2, #0]
 80071fa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800720a:	b29b      	uxth	r3, r3
 800720c:	3b01      	subs	r3, #1
 800720e:	b29a      	uxth	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007214:	e015      	b.n	8007242 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007216:	f7fc faef 	bl	80037f8 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d803      	bhi.n	800722e <HAL_SPI_Transmit+0x270>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800722c:	d102      	bne.n	8007234 <HAL_SPI_Transmit+0x276>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007240:	e029      	b.n	8007296 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007246:	b29b      	uxth	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1b1      	bne.n	80071b0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f001 fa0d 	bl	8008670 <SPI_EndRxTxTransaction>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2220      	movs	r2, #32
 8007260:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800726a:	2300      	movs	r3, #0
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	613b      	str	r3, [r7, #16]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	77fb      	strb	r3, [r7, #31]
 800728c:	e003      	b.n	8007296 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800729e:	7ffb      	ldrb	r3, [r7, #31]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3720      	adds	r7, #32
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d002      	beq.n	80072ce <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80072c8:	2302      	movs	r3, #2
 80072ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80072cc:	e11a      	b.n	8007504 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072d6:	d112      	bne.n	80072fe <HAL_SPI_Receive+0x56>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10e      	bne.n	80072fe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2204      	movs	r2, #4
 80072e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072e8:	88fa      	ldrh	r2, [r7, #6]
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	9300      	str	r3, [sp, #0]
 80072ee:	4613      	mov	r3, r2
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f90e 	bl	8007516 <HAL_SPI_TransmitReceive>
 80072fa:	4603      	mov	r3, r0
 80072fc:	e107      	b.n	800750e <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_SPI_Receive+0x64>
 8007308:	2302      	movs	r3, #2
 800730a:	e100      	b.n	800750e <HAL_SPI_Receive+0x266>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007314:	f7fc fa70 	bl	80037f8 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <HAL_SPI_Receive+0x7e>
 8007320:	88fb      	ldrh	r3, [r7, #6]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	75fb      	strb	r3, [r7, #23]
    goto error;
 800732a:	e0eb      	b.n	8007504 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2204      	movs	r2, #4
 8007330:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	68ba      	ldr	r2, [r7, #8]
 800733e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	88fa      	ldrh	r2, [r7, #6]
 8007344:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	88fa      	ldrh	r2, [r7, #6]
 800734c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007376:	d908      	bls.n	800738a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007386:	605a      	str	r2, [r3, #4]
 8007388:	e007      	b.n	800739a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007398:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073a2:	d10f      	bne.n	80073c4 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80073c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ce:	2b40      	cmp	r3, #64	@ 0x40
 80073d0:	d007      	beq.n	80073e2 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073ea:	d86f      	bhi.n	80074cc <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80073ec:	e034      	b.n	8007458 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d117      	bne.n	800742c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f103 020c 	add.w	r2, r3, #12
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007408:	7812      	ldrb	r2, [r2, #0]
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800741e:	b29b      	uxth	r3, r3
 8007420:	3b01      	subs	r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800742a:	e015      	b.n	8007458 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800742c:	f7fc f9e4 	bl	80037f8 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d803      	bhi.n	8007444 <HAL_SPI_Receive+0x19c>
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007442:	d102      	bne.n	800744a <HAL_SPI_Receive+0x1a2>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007456:	e055      	b.n	8007504 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800745e:	b29b      	uxth	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d1c4      	bne.n	80073ee <HAL_SPI_Receive+0x146>
 8007464:	e038      	b.n	80074d8 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b01      	cmp	r3, #1
 8007472:	d115      	bne.n	80074a0 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747e:	b292      	uxth	r2, r2
 8007480:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007486:	1c9a      	adds	r2, r3, #2
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007492:	b29b      	uxth	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800749e:	e015      	b.n	80074cc <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074a0:	f7fc f9aa 	bl	80037f8 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d803      	bhi.n	80074b8 <HAL_SPI_Receive+0x210>
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b6:	d102      	bne.n	80074be <HAL_SPI_Receive+0x216>
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d106      	bne.n	80074cc <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80074ca:	e01b      	b.n	8007504 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1c6      	bne.n	8007466 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f001 f86f 	bl	80085c0 <SPI_EndRxTransaction>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d002      	beq.n	80074fc <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	75fb      	strb	r3, [r7, #23]
 80074fa:	e003      	b.n	8007504 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b08a      	sub	sp, #40	@ 0x28
 800751a:	af00      	add	r7, sp, #0
 800751c:	60f8      	str	r0, [r7, #12]
 800751e:	60b9      	str	r1, [r7, #8]
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007524:	2301      	movs	r3, #1
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007534:	2b01      	cmp	r3, #1
 8007536:	d101      	bne.n	800753c <HAL_SPI_TransmitReceive+0x26>
 8007538:	2302      	movs	r3, #2
 800753a:	e20a      	b.n	8007952 <HAL_SPI_TransmitReceive+0x43c>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007544:	f7fc f958 	bl	80037f8 <HAL_GetTick>
 8007548:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007550:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007558:	887b      	ldrh	r3, [r7, #2]
 800755a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800755c:	887b      	ldrh	r3, [r7, #2]
 800755e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007560:	7efb      	ldrb	r3, [r7, #27]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d00e      	beq.n	8007584 <HAL_SPI_TransmitReceive+0x6e>
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800756c:	d106      	bne.n	800757c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <HAL_SPI_TransmitReceive+0x66>
 8007576:	7efb      	ldrb	r3, [r7, #27]
 8007578:	2b04      	cmp	r3, #4
 800757a:	d003      	beq.n	8007584 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800757c:	2302      	movs	r3, #2
 800757e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007582:	e1e0      	b.n	8007946 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d005      	beq.n	8007596 <HAL_SPI_TransmitReceive+0x80>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <HAL_SPI_TransmitReceive+0x80>
 8007590:	887b      	ldrh	r3, [r7, #2]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800759c:	e1d3      	b.n	8007946 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d003      	beq.n	80075b2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2205      	movs	r2, #5
 80075ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	887a      	ldrh	r2, [r7, #2]
 80075c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	887a      	ldrh	r2, [r7, #2]
 80075ca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	887a      	ldrh	r2, [r7, #2]
 80075d8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	887a      	ldrh	r2, [r7, #2]
 80075de:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075f4:	d802      	bhi.n	80075fc <HAL_SPI_TransmitReceive+0xe6>
 80075f6:	8a3b      	ldrh	r3, [r7, #16]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d908      	bls.n	800760e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	685a      	ldr	r2, [r3, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800760a:	605a      	str	r2, [r3, #4]
 800760c:	e007      	b.n	800761e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800761c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007628:	2b40      	cmp	r3, #64	@ 0x40
 800762a:	d007      	beq.n	800763c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800763a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007644:	f240 8081 	bls.w	800774a <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <HAL_SPI_TransmitReceive+0x140>
 8007650:	8a7b      	ldrh	r3, [r7, #18]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d16d      	bne.n	8007732 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007666:	1c9a      	adds	r2, r3, #2
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800767a:	e05a      	b.n	8007732 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b02      	cmp	r3, #2
 8007688:	d11b      	bne.n	80076c2 <HAL_SPI_TransmitReceive+0x1ac>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d016      	beq.n	80076c2 <HAL_SPI_TransmitReceive+0x1ac>
 8007694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007696:	2b01      	cmp	r3, #1
 8007698:	d113      	bne.n	80076c2 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800769e:	881a      	ldrh	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076aa:	1c9a      	adds	r2, r3, #2
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d11c      	bne.n	800770a <HAL_SPI_TransmitReceive+0x1f4>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d016      	beq.n	800770a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68da      	ldr	r2, [r3, #12]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e6:	b292      	uxth	r2, r2
 80076e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	1c9a      	adds	r2, r3, #2
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	3b01      	subs	r3, #1
 80076fe:	b29a      	uxth	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007706:	2301      	movs	r3, #1
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800770a:	f7fc f875 	bl	80037f8 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007716:	429a      	cmp	r2, r3
 8007718:	d80b      	bhi.n	8007732 <HAL_SPI_TransmitReceive+0x21c>
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007720:	d007      	beq.n	8007732 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007730:	e109      	b.n	8007946 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d19f      	bne.n	800767c <HAL_SPI_TransmitReceive+0x166>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	d199      	bne.n	800767c <HAL_SPI_TransmitReceive+0x166>
 8007748:	e0e3      	b.n	8007912 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d003      	beq.n	800775a <HAL_SPI_TransmitReceive+0x244>
 8007752:	8a7b      	ldrh	r3, [r7, #18]
 8007754:	2b01      	cmp	r3, #1
 8007756:	f040 80cf 	bne.w	80078f8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775e:	b29b      	uxth	r3, r3
 8007760:	2b01      	cmp	r3, #1
 8007762:	d912      	bls.n	800778a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007768:	881a      	ldrh	r2, [r3, #0]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007774:	1c9a      	adds	r2, r3, #2
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b02      	subs	r3, #2
 8007782:	b29a      	uxth	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007788:	e0b6      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	330c      	adds	r3, #12
 8007794:	7812      	ldrb	r2, [r2, #0]
 8007796:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077b0:	e0a2      	b.n	80078f8 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 0302 	and.w	r3, r3, #2
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d134      	bne.n	800782a <HAL_SPI_TransmitReceive+0x314>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d02f      	beq.n	800782a <HAL_SPI_TransmitReceive+0x314>
 80077ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d12c      	bne.n	800782a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d912      	bls.n	8007800 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077de:	881a      	ldrh	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ea:	1c9a      	adds	r2, r3, #2
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	3b02      	subs	r3, #2
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077fe:	e012      	b.n	8007826 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	7812      	ldrb	r2, [r2, #0]
 800780c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007812:	1c5a      	adds	r2, r3, #1
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800781c:	b29b      	uxth	r3, r3
 800781e:	3b01      	subs	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b01      	cmp	r3, #1
 8007836:	d148      	bne.n	80078ca <HAL_SPI_TransmitReceive+0x3b4>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d042      	beq.n	80078ca <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	d923      	bls.n	8007898 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68da      	ldr	r2, [r3, #12]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	b292      	uxth	r2, r2
 800785c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007862:	1c9a      	adds	r2, r3, #2
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b02      	subs	r3, #2
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007880:	b29b      	uxth	r3, r3
 8007882:	2b01      	cmp	r3, #1
 8007884:	d81f      	bhi.n	80078c6 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007894:	605a      	str	r2, [r3, #4]
 8007896:	e016      	b.n	80078c6 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f103 020c 	add.w	r2, r3, #12
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a4:	7812      	ldrb	r2, [r2, #0]
 80078a6:	b2d2      	uxtb	r2, r2
 80078a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078ae:	1c5a      	adds	r2, r3, #1
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	3b01      	subs	r3, #1
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078c6:	2301      	movs	r3, #1
 80078c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078ca:	f7fb ff95 	bl	80037f8 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d803      	bhi.n	80078e2 <HAL_SPI_TransmitReceive+0x3cc>
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e0:	d102      	bne.n	80078e8 <HAL_SPI_TransmitReceive+0x3d2>
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d107      	bne.n	80078f8 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80078f6:	e026      	b.n	8007946 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f47f af57 	bne.w	80077b2 <HAL_SPI_TransmitReceive+0x29c>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800790a:	b29b      	uxth	r3, r3
 800790c:	2b00      	cmp	r3, #0
 800790e:	f47f af50 	bne.w	80077b2 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 feaa 	bl	8008670 <SPI_EndRxTxTransaction>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d005      	beq.n	800792e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	2220      	movs	r2, #32
 800792c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793c:	e003      	b.n	8007946 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800794e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007952:	4618      	mov	r0, r3
 8007954:	3728      	adds	r7, #40	@ 0x28
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_SPI_Transmit_DMA+0x20>
 8007978:	2302      	movs	r3, #2
 800797a:	e0d4      	b.n	8007b26 <HAL_SPI_Transmit_DMA+0x1ca>
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	d002      	beq.n	8007996 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007990:	2302      	movs	r3, #2
 8007992:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007994:	e0c2      	b.n	8007b1c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_SPI_Transmit_DMA+0x46>
 800799c:	88fb      	ldrh	r3, [r7, #6]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80079a6:	e0b9      	b.n	8007b1c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2203      	movs	r2, #3
 80079ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	68ba      	ldr	r2, [r7, #8]
 80079ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	88fa      	ldrh	r2, [r7, #6]
 80079c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	88fa      	ldrh	r2, [r7, #6]
 80079c6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079f2:	d10f      	bne.n	8007a14 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a18:	4a45      	ldr	r2, [pc, #276]	@ (8007b30 <HAL_SPI_Transmit_DMA+0x1d4>)
 8007a1a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a20:	4a44      	ldr	r2, [pc, #272]	@ (8007b34 <HAL_SPI_Transmit_DMA+0x1d8>)
 8007a22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a28:	4a43      	ldr	r2, [pc, #268]	@ (8007b38 <HAL_SPI_Transmit_DMA+0x1dc>)
 8007a2a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a30:	2200      	movs	r2, #0
 8007a32:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a42:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a4c:	d82d      	bhi.n	8007aaa <HAL_SPI_Transmit_DMA+0x14e>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a52:	699b      	ldr	r3, [r3, #24]
 8007a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a58:	d127      	bne.n	8007aaa <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10f      	bne.n	8007a88 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007a76:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	085b      	lsrs	r3, r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007a86:	e010      	b.n	8007aaa <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a96:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	330c      	adds	r3, #12
 8007aba:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ac0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007ac2:	f7fd f84c 	bl	8004b5e <HAL_DMA_Start_IT>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d008      	beq.n	8007ade <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ad0:	f043 0210 	orr.w	r2, r3, #16
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007adc:	e01e      	b.n	8007b1c <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae8:	2b40      	cmp	r3, #64	@ 0x40
 8007aea:	d007      	beq.n	8007afc <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007afa:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0220 	orr.w	r2, r2, #32
 8007b0a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0202 	orr.w	r2, r2, #2
 8007b1a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	080082ef 	.word	0x080082ef
 8007b34:	08008111 	.word	0x08008111
 8007b38:	08008343 	.word	0x08008343

08007b3c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d002      	beq.n	8007b60 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007b5e:	e0fe      	b.n	8007d5e <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d110      	bne.n	8007b8a <HAL_SPI_Receive_DMA+0x4e>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b70:	d10b      	bne.n	8007b8a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2204      	movs	r2, #4
 8007b76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	68b9      	ldr	r1, [r7, #8]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 f8fb 	bl	8007d7c <HAL_SPI_TransmitReceive_DMA>
 8007b86:	4603      	mov	r3, r0
 8007b88:	e0ee      	b.n	8007d68 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d101      	bne.n	8007b98 <HAL_SPI_Receive_DMA+0x5c>
 8007b94:	2302      	movs	r3, #2
 8007b96:	e0e7      	b.n	8007d68 <HAL_SPI_Receive_DMA+0x22c>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if ((pData == NULL) || (Size == 0U))
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <HAL_SPI_Receive_DMA+0x70>
 8007ba6:	88fb      	ldrh	r3, [r7, #6]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d102      	bne.n	8007bb2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007bb0:	e0d5      	b.n	8007d5e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	68ba      	ldr	r2, [r7, #8]
 8007bc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	88fa      	ldrh	r2, [r7, #6]
 8007bca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	88fa      	ldrh	r2, [r7, #6]
 8007bd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bf6:	d10f      	bne.n	8007c18 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007c16:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c26:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007c30:	d908      	bls.n	8007c44 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	e042      	b.n	8007cca <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c52:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c5e:	d134      	bne.n	8007cca <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007c6e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d111      	bne.n	8007ca4 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c8e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	085b      	lsrs	r3, r3, #1
 8007c9a:	b29a      	uxth	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007ca2:	e012      	b.n	8007cca <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007cb2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cce:	4a28      	ldr	r2, [pc, #160]	@ (8007d70 <HAL_SPI_Receive_DMA+0x234>)
 8007cd0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cd6:	4a27      	ldr	r2, [pc, #156]	@ (8007d74 <HAL_SPI_Receive_DMA+0x238>)
 8007cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cde:	4a26      	ldr	r2, [pc, #152]	@ (8007d78 <HAL_SPI_Receive_DMA+0x23c>)
 8007ce0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	330c      	adds	r3, #12
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfa:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007d02:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007d04:	f7fc ff2b 	bl	8004b5e <HAL_DMA_Start_IT>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d008      	beq.n	8007d20 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d12:	f043 0210 	orr.w	r2, r3, #16
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007d1e:	e01e      	b.n	8007d5e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2a:	2b40      	cmp	r3, #64	@ 0x40
 8007d2c:	d007      	beq.n	8007d3e <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d3c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f042 0220 	orr.w	r2, r2, #32
 8007d4c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685a      	ldr	r2, [r3, #4]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f042 0201 	orr.w	r2, r2, #1
 8007d5c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	0800830b 	.word	0x0800830b
 8007d74:	080081b7 	.word	0x080081b7
 8007d78:	08008343 	.word	0x08008343

08007d7c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_SPI_TransmitReceive_DMA+0x20>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e164      	b.n	8008066 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007daa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007db2:	7dbb      	ldrb	r3, [r7, #22]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d00d      	beq.n	8007dd4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dbe:	d106      	bne.n	8007dce <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <HAL_SPI_TransmitReceive_DMA+0x52>
 8007dc8:	7dbb      	ldrb	r3, [r7, #22]
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	d002      	beq.n	8007dd4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007dce:	2302      	movs	r3, #2
 8007dd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007dd2:	e143      	b.n	800805c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d005      	beq.n	8007de6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007de0:	887b      	ldrh	r3, [r7, #2]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d102      	bne.n	8007dec <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007dea:	e137      	b.n	800805c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d003      	beq.n	8007e00 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2205      	movs	r2, #5
 8007dfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	68ba      	ldr	r2, [r7, #8]
 8007e0a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	887a      	ldrh	r2, [r7, #2]
 8007e10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	887a      	ldrh	r2, [r7, #2]
 8007e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	887a      	ldrh	r2, [r7, #2]
 8007e22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	887a      	ldrh	r2, [r7, #2]
 8007e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2200      	movs	r2, #0
 8007e38:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8007e48:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e52:	d908      	bls.n	8007e66 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e62:	605a      	str	r2, [r3, #4]
 8007e64:	e06f      	b.n	8007f46 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e74:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e80:	d126      	bne.n	8007ed0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10f      	bne.n	8007eae <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e9c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	085b      	lsrs	r3, r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007eac:	e010      	b.n	8007ed0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685a      	ldr	r2, [r3, #4]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ebc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	085b      	lsrs	r3, r3, #1
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3301      	adds	r3, #1
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eda:	d134      	bne.n	8007f46 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007eea:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d111      	bne.n	8007f20 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f0a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	085b      	lsrs	r3, r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007f1e:	e012      	b.n	8007f46 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f2e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d108      	bne.n	8007f64 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f56:	4a46      	ldr	r2, [pc, #280]	@ (8008070 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 8007f58:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f5e:	4a45      	ldr	r2, [pc, #276]	@ (8008074 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8007f60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007f62:	e007      	b.n	8007f74 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f68:	4a43      	ldr	r2, [pc, #268]	@ (8008078 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8007f6a:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f70:	4a42      	ldr	r2, [pc, #264]	@ (800807c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8007f72:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f78:	4a41      	ldr	r2, [pc, #260]	@ (8008080 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007f7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f80:	2200      	movs	r2, #0
 8007f82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	330c      	adds	r3, #12
 8007f8e:	4619      	mov	r1, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f94:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007f9c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007f9e:	f7fc fdde 	bl	8004b5e <HAL_DMA_Start_IT>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d008      	beq.n	8007fba <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fac:	f043 0210 	orr.w	r2, r3, #16
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007fb8:	e050      	b.n	800805c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f042 0201 	orr.w	r2, r2, #1
 8007fc8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fce:	2200      	movs	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fde:	2200      	movs	r2, #0
 8007fe0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	330c      	adds	r3, #12
 8007ffa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008000:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008002:	f7fc fdac 	bl	8004b5e <HAL_DMA_Start_IT>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d008      	beq.n	800801e <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008010:	f043 0210 	orr.w	r2, r3, #16
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	75fb      	strb	r3, [r7, #23]

    goto error;
 800801c:	e01e      	b.n	800805c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008028:	2b40      	cmp	r3, #64	@ 0x40
 800802a:	d007      	beq.n	800803c <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800803a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685a      	ldr	r2, [r3, #4]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0220 	orr.w	r2, r2, #32
 800804a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0202 	orr.w	r2, r2, #2
 800805a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2200      	movs	r2, #0
 8008060:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008064:	7dfb      	ldrb	r3, [r7, #23]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	0800830b 	.word	0x0800830b
 8008074:	080081b7 	.word	0x080081b7
 8008078:	08008327 	.word	0x08008327
 800807c:	0800825f 	.word	0x0800825f
 8008080:	08008343 	.word	0x08008343

08008084 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008084:	b480      	push	{r7}
 8008086:	b083      	sub	sp, #12
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800811e:	f7fb fb6b 	bl	80037f8 <HAL_GetTick>
 8008122:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b20      	cmp	r3, #32
 8008130:	d03b      	beq.n	80081aa <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0220 	bic.w	r2, r2, #32
 8008140:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 0202 	bic.w	r2, r2, #2
 8008150:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	2164      	movs	r1, #100	@ 0x64
 8008156:	6978      	ldr	r0, [r7, #20]
 8008158:	f000 fa8a 	bl	8008670 <SPI_EndRxTxTransaction>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008166:	f043 0220 	orr.w	r2, r3, #32
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	60fb      	str	r3, [r7, #12]
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	60fb      	str	r3, [r7, #12]
 800818a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2200      	movs	r2, #0
 8008190:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80081a2:	6978      	ldr	r0, [r7, #20]
 80081a4:	f7ff ffaa 	bl	80080fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80081a8:	e002      	b.n	80081b0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80081aa:	6978      	ldr	r0, [r7, #20]
 80081ac:	f7ff ff6a 	bl	8008084 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081c2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081c4:	f7fb fb18 	bl	80037f8 <HAL_GetTick>
 80081c8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0320 	and.w	r3, r3, #32
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	d03c      	beq.n	8008252 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 0220 	bic.w	r2, r2, #32
 80081e6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10d      	bne.n	800820c <SPI_DMAReceiveCplt+0x56>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081f8:	d108      	bne.n	800820c <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	685a      	ldr	r2, [r3, #4]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0203 	bic.w	r2, r2, #3
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	e007      	b.n	800821c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0201 	bic.w	r2, r2, #1
 800821a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800821c:	68ba      	ldr	r2, [r7, #8]
 800821e:	2164      	movs	r1, #100	@ 0x64
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 f9cd 	bl	80085c0 <SPI_EndRxTransaction>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d002      	beq.n	8008232 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff ff56 	bl	80080fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008250:	e002      	b.n	8008258 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f7ff ff20 	bl	8008098 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800826a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800826c:	f7fb fac4 	bl	80037f8 <HAL_GetTick>
 8008270:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0320 	and.w	r3, r3, #32
 800827c:	2b20      	cmp	r3, #32
 800827e:	d030      	beq.n	80082e2 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0220 	bic.w	r2, r2, #32
 800828e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	2164      	movs	r1, #100	@ 0x64
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f9eb 	bl	8008670 <SPI_EndRxTxTransaction>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d005      	beq.n	80082ac <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082a4:	f043 0220 	orr.w	r2, r3, #32
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f022 0203 	bic.w	r2, r2, #3
 80082ba:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff ff0e 	bl	80080fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80082e0:	e002      	b.n	80082e8 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f7ff fee2 	bl	80080ac <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7ff fedf 	bl	80080c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008316:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff fedb 	bl	80080d4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008332:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff fed7 	bl	80080e8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800833a:	bf00      	nop
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800834e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0203 	bic.w	r2, r2, #3
 800835e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008364:	f043 0210 	orr.w	r2, r3, #16
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff fec1 	bl	80080fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b088      	sub	sp, #32
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	4613      	mov	r3, r2
 8008392:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008394:	f7fb fa30 	bl	80037f8 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4413      	add	r3, r2
 80083a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80083a4:	f7fb fa28 	bl	80037f8 <HAL_GetTick>
 80083a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80083aa:	4b39      	ldr	r3, [pc, #228]	@ (8008490 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	015b      	lsls	r3, r3, #5
 80083b0:	0d1b      	lsrs	r3, r3, #20
 80083b2:	69fa      	ldr	r2, [r7, #28]
 80083b4:	fb02 f303 	mul.w	r3, r2, r3
 80083b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ba:	e054      	b.n	8008466 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d050      	beq.n	8008466 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80083c4:	f7fb fa18 	bl	80037f8 <HAL_GetTick>
 80083c8:	4602      	mov	r2, r0
 80083ca:	69bb      	ldr	r3, [r7, #24]
 80083cc:	1ad3      	subs	r3, r2, r3
 80083ce:	69fa      	ldr	r2, [r7, #28]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d902      	bls.n	80083da <SPI_WaitFlagStateUntilTimeout+0x56>
 80083d4:	69fb      	ldr	r3, [r7, #28]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d13d      	bne.n	8008456 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083f2:	d111      	bne.n	8008418 <SPI_WaitFlagStateUntilTimeout+0x94>
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083fc:	d004      	beq.n	8008408 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008406:	d107      	bne.n	8008418 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008416:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800841c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008420:	d10f      	bne.n	8008442 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008440:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2201      	movs	r2, #1
 8008446:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e017      	b.n	8008486 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800845c:	2300      	movs	r3, #0
 800845e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	3b01      	subs	r3, #1
 8008464:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	4013      	ands	r3, r2
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	429a      	cmp	r2, r3
 8008474:	bf0c      	ite	eq
 8008476:	2301      	moveq	r3, #1
 8008478:	2300      	movne	r3, #0
 800847a:	b2db      	uxtb	r3, r3
 800847c:	461a      	mov	r2, r3
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	429a      	cmp	r2, r3
 8008482:	d19b      	bne.n	80083bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3720      	adds	r7, #32
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	2000002c 	.word	0x2000002c

08008494 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08a      	sub	sp, #40	@ 0x28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
 80084a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80084a2:	2300      	movs	r3, #0
 80084a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80084a6:	f7fb f9a7 	bl	80037f8 <HAL_GetTick>
 80084aa:	4602      	mov	r2, r0
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	1a9b      	subs	r3, r3, r2
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	4413      	add	r3, r2
 80084b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80084b6:	f7fb f99f 	bl	80037f8 <HAL_GetTick>
 80084ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	330c      	adds	r3, #12
 80084c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80084c4:	4b3d      	ldr	r3, [pc, #244]	@ (80085bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	00da      	lsls	r2, r3, #3
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	0d1b      	lsrs	r3, r3, #20
 80084d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084d6:	fb02 f303 	mul.w	r3, r2, r3
 80084da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80084dc:	e060      	b.n	80085a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80084e4:	d107      	bne.n	80084f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fc:	d050      	beq.n	80085a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084fe:	f7fb f97b 	bl	80037f8 <HAL_GetTick>
 8008502:	4602      	mov	r2, r0
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	1ad3      	subs	r3, r2, r3
 8008508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800850a:	429a      	cmp	r2, r3
 800850c:	d902      	bls.n	8008514 <SPI_WaitFifoStateUntilTimeout+0x80>
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	2b00      	cmp	r3, #0
 8008512:	d13d      	bne.n	8008590 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008522:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800852c:	d111      	bne.n	8008552 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008536:	d004      	beq.n	8008542 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008540:	d107      	bne.n	8008552 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008550:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008556:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800855a:	d10f      	bne.n	800857c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800857a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e010      	b.n	80085b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008590:	69bb      	ldr	r3, [r7, #24]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008596:	2300      	movs	r3, #0
 8008598:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	3b01      	subs	r3, #1
 800859e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	4013      	ands	r3, r2
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d196      	bne.n	80084de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3728      	adds	r7, #40	@ 0x28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	2000002c 	.word	0x2000002c

080085c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085d4:	d111      	bne.n	80085fa <SPI_EndRxTransaction+0x3a>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085de:	d004      	beq.n	80085ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085e8:	d107      	bne.n	80085fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80085f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	9300      	str	r3, [sp, #0]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	2200      	movs	r2, #0
 8008602:	2180      	movs	r1, #128	@ 0x80
 8008604:	68f8      	ldr	r0, [r7, #12]
 8008606:	f7ff febd 	bl	8008384 <SPI_WaitFlagStateUntilTimeout>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d007      	beq.n	8008620 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008614:	f043 0220 	orr.w	r2, r3, #32
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800861c:	2303      	movs	r3, #3
 800861e:	e023      	b.n	8008668 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008628:	d11d      	bne.n	8008666 <SPI_EndRxTransaction+0xa6>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008632:	d004      	beq.n	800863e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800863c:	d113      	bne.n	8008666 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2200      	movs	r2, #0
 8008646:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff ff22 	bl	8008494 <SPI_WaitFifoStateUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d007      	beq.n	8008666 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800865a:	f043 0220 	orr.w	r2, r3, #32
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e000      	b.n	8008668 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af02      	add	r7, sp, #8
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	60b9      	str	r1, [r7, #8]
 800867a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2200      	movs	r2, #0
 8008684:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f7ff ff03 	bl	8008494 <SPI_WaitFifoStateUntilTimeout>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d007      	beq.n	80086a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008698:	f043 0220 	orr.w	r2, r3, #32
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e027      	b.n	80086f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2200      	movs	r2, #0
 80086ac:	2180      	movs	r1, #128	@ 0x80
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7ff fe68 	bl	8008384 <SPI_WaitFlagStateUntilTimeout>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d007      	beq.n	80086ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086be:	f043 0220 	orr.w	r2, r3, #32
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e014      	b.n	80086f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f7ff fedc 	bl	8008494 <SPI_WaitFifoStateUntilTimeout>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d007      	beq.n	80086f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086e6:	f043 0220 	orr.w	r2, r3, #32
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e000      	b.n	80086f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e049      	b.n	80087a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d106      	bne.n	8008728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f7fa fe34 	bl	8003390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3304      	adds	r3, #4
 8008738:	4619      	mov	r1, r3
 800873a:	4610      	mov	r0, r2
 800873c:	f000 fbfe 	bl	8008f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d001      	beq.n	80087c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e03b      	b.n	800883c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2202      	movs	r2, #2
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f042 0201 	orr.w	r2, r2, #1
 80087da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a19      	ldr	r2, [pc, #100]	@ (8008848 <HAL_TIM_Base_Start_IT+0x9c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d009      	beq.n	80087fa <HAL_TIM_Base_Start_IT+0x4e>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087ee:	d004      	beq.n	80087fa <HAL_TIM_Base_Start_IT+0x4e>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a15      	ldr	r2, [pc, #84]	@ (800884c <HAL_TIM_Base_Start_IT+0xa0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d115      	bne.n	8008826 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	4b13      	ldr	r3, [pc, #76]	@ (8008850 <HAL_TIM_Base_Start_IT+0xa4>)
 8008802:	4013      	ands	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b06      	cmp	r3, #6
 800880a:	d015      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x8c>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008812:	d011      	beq.n	8008838 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0201 	orr.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008824:	e008      	b.n	8008838 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f042 0201 	orr.w	r2, r2, #1
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	e000      	b.n	800883a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008838:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3714      	adds	r7, #20
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr
 8008848:	40012c00 	.word	0x40012c00
 800884c:	40014000 	.word	0x40014000
 8008850:	00010007 	.word	0x00010007

08008854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e049      	b.n	80088fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7fa fd68 	bl	8003350 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3304      	adds	r3, #4
 8008890:	4619      	mov	r1, r3
 8008892:	4610      	mov	r0, r2
 8008894:	f000 fb52 	bl	8008f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
	...

08008904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d109      	bne.n	8008928 <HAL_TIM_PWM_Start+0x24>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b01      	cmp	r3, #1
 800891e:	bf14      	ite	ne
 8008920:	2301      	movne	r3, #1
 8008922:	2300      	moveq	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	e03c      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b04      	cmp	r3, #4
 800892c:	d109      	bne.n	8008942 <HAL_TIM_PWM_Start+0x3e>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b01      	cmp	r3, #1
 8008938:	bf14      	ite	ne
 800893a:	2301      	movne	r3, #1
 800893c:	2300      	moveq	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	e02f      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b08      	cmp	r3, #8
 8008946:	d109      	bne.n	800895c <HAL_TIM_PWM_Start+0x58>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	e022      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b0c      	cmp	r3, #12
 8008960:	d109      	bne.n	8008976 <HAL_TIM_PWM_Start+0x72>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008968:	b2db      	uxtb	r3, r3
 800896a:	2b01      	cmp	r3, #1
 800896c:	bf14      	ite	ne
 800896e:	2301      	movne	r3, #1
 8008970:	2300      	moveq	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	e015      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b10      	cmp	r3, #16
 800897a:	d109      	bne.n	8008990 <HAL_TIM_PWM_Start+0x8c>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	e008      	b.n	80089a2 <HAL_TIM_PWM_Start+0x9e>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	bf14      	ite	ne
 800899c:	2301      	movne	r3, #1
 800899e:	2300      	moveq	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e07e      	b.n	8008aa8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d104      	bne.n	80089ba <HAL_TIM_PWM_Start+0xb6>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2202      	movs	r2, #2
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089b8:	e023      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d104      	bne.n	80089ca <HAL_TIM_PWM_Start+0xc6>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089c8:	e01b      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d104      	bne.n	80089da <HAL_TIM_PWM_Start+0xd6>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089d8:	e013      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	2b0c      	cmp	r3, #12
 80089de:	d104      	bne.n	80089ea <HAL_TIM_PWM_Start+0xe6>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2202      	movs	r2, #2
 80089e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089e8:	e00b      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	2b10      	cmp	r3, #16
 80089ee:	d104      	bne.n	80089fa <HAL_TIM_PWM_Start+0xf6>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2202      	movs	r2, #2
 80089f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089f8:	e003      	b.n	8008a02 <HAL_TIM_PWM_Start+0xfe>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2202      	movs	r2, #2
 80089fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2201      	movs	r2, #1
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fd78 	bl	8009500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a26      	ldr	r2, [pc, #152]	@ (8008ab0 <HAL_TIM_PWM_Start+0x1ac>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d009      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x12a>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a25      	ldr	r2, [pc, #148]	@ (8008ab4 <HAL_TIM_PWM_Start+0x1b0>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d004      	beq.n	8008a2e <HAL_TIM_PWM_Start+0x12a>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a23      	ldr	r2, [pc, #140]	@ (8008ab8 <HAL_TIM_PWM_Start+0x1b4>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d101      	bne.n	8008a32 <HAL_TIM_PWM_Start+0x12e>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <HAL_TIM_PWM_Start+0x130>
 8008a32:	2300      	movs	r3, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a46:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a18      	ldr	r2, [pc, #96]	@ (8008ab0 <HAL_TIM_PWM_Start+0x1ac>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d009      	beq.n	8008a66 <HAL_TIM_PWM_Start+0x162>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a5a:	d004      	beq.n	8008a66 <HAL_TIM_PWM_Start+0x162>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a14      	ldr	r2, [pc, #80]	@ (8008ab4 <HAL_TIM_PWM_Start+0x1b0>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d115      	bne.n	8008a92 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	4b13      	ldr	r3, [pc, #76]	@ (8008abc <HAL_TIM_PWM_Start+0x1b8>)
 8008a6e:	4013      	ands	r3, r2
 8008a70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b06      	cmp	r3, #6
 8008a76:	d015      	beq.n	8008aa4 <HAL_TIM_PWM_Start+0x1a0>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a7e:	d011      	beq.n	8008aa4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f042 0201 	orr.w	r2, r2, #1
 8008a8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a90:	e008      	b.n	8008aa4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f042 0201 	orr.w	r2, r2, #1
 8008aa0:	601a      	str	r2, [r3, #0]
 8008aa2:	e000      	b.n	8008aa6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	40012c00 	.word	0x40012c00
 8008ab4:	40014000 	.word	0x40014000
 8008ab8:	40014400 	.word	0x40014400
 8008abc:	00010007 	.word	0x00010007

08008ac0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d020      	beq.n	8008b24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d01b      	beq.n	8008b24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f06f 0202 	mvn.w	r2, #2
 8008af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	f003 0303 	and.w	r3, r3, #3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f9f8 	bl	8008f00 <HAL_TIM_IC_CaptureCallback>
 8008b10:	e005      	b.n	8008b1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9ea 	bl	8008eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f9fb 	bl	8008f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	f003 0304 	and.w	r3, r3, #4
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d020      	beq.n	8008b70 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f003 0304 	and.w	r3, r3, #4
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01b      	beq.n	8008b70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f06f 0204 	mvn.w	r2, #4
 8008b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2202      	movs	r2, #2
 8008b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f9d2 	bl	8008f00 <HAL_TIM_IC_CaptureCallback>
 8008b5c:	e005      	b.n	8008b6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f9c4 	bl	8008eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f9d5 	bl	8008f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d020      	beq.n	8008bbc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f003 0308 	and.w	r3, r3, #8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01b      	beq.n	8008bbc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0208 	mvn.w	r2, #8
 8008b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2204      	movs	r2, #4
 8008b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f9ac 	bl	8008f00 <HAL_TIM_IC_CaptureCallback>
 8008ba8:	e005      	b.n	8008bb6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 f99e 	bl	8008eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f9af 	bl	8008f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f003 0310 	and.w	r3, r3, #16
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d020      	beq.n	8008c08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f003 0310 	and.w	r3, r3, #16
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01b      	beq.n	8008c08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0210 	mvn.w	r2, #16
 8008bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2208      	movs	r2, #8
 8008bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f986 	bl	8008f00 <HAL_TIM_IC_CaptureCallback>
 8008bf4:	e005      	b.n	8008c02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f978 	bl	8008eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f989 	bl	8008f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00c      	beq.n	8008c2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d007      	beq.n	8008c2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f06f 0201 	mvn.w	r2, #1
 8008c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f7f9 fc72 	bl	8002510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00c      	beq.n	8008c50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d007      	beq.n	8008c50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fd66 	bl	800971c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00c      	beq.n	8008c74 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d007      	beq.n	8008c74 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fd5e 	bl	8009730 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00c      	beq.n	8008c98 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d007      	beq.n	8008c98 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f948 	bl	8008f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00c      	beq.n	8008cbc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d007      	beq.n	8008cbc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f06f 0220 	mvn.w	r2, #32
 8008cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fd26 	bl	8009708 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d101      	bne.n	8008ce2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008cde:	2302      	movs	r3, #2
 8008ce0:	e0ff      	b.n	8008ee2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b14      	cmp	r3, #20
 8008cee:	f200 80f0 	bhi.w	8008ed2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d4d 	.word	0x08008d4d
 8008cfc:	08008ed3 	.word	0x08008ed3
 8008d00:	08008ed3 	.word	0x08008ed3
 8008d04:	08008ed3 	.word	0x08008ed3
 8008d08:	08008d8d 	.word	0x08008d8d
 8008d0c:	08008ed3 	.word	0x08008ed3
 8008d10:	08008ed3 	.word	0x08008ed3
 8008d14:	08008ed3 	.word	0x08008ed3
 8008d18:	08008dcf 	.word	0x08008dcf
 8008d1c:	08008ed3 	.word	0x08008ed3
 8008d20:	08008ed3 	.word	0x08008ed3
 8008d24:	08008ed3 	.word	0x08008ed3
 8008d28:	08008e0f 	.word	0x08008e0f
 8008d2c:	08008ed3 	.word	0x08008ed3
 8008d30:	08008ed3 	.word	0x08008ed3
 8008d34:	08008ed3 	.word	0x08008ed3
 8008d38:	08008e51 	.word	0x08008e51
 8008d3c:	08008ed3 	.word	0x08008ed3
 8008d40:	08008ed3 	.word	0x08008ed3
 8008d44:	08008ed3 	.word	0x08008ed3
 8008d48:	08008e91 	.word	0x08008e91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68b9      	ldr	r1, [r7, #8]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 f956 	bl	8009004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	699a      	ldr	r2, [r3, #24]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f042 0208 	orr.w	r2, r2, #8
 8008d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	699a      	ldr	r2, [r3, #24]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 0204 	bic.w	r2, r2, #4
 8008d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6999      	ldr	r1, [r3, #24]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	691a      	ldr	r2, [r3, #16]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	619a      	str	r2, [r3, #24]
      break;
 8008d8a:	e0a5      	b.n	8008ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 f9b2 	bl	80090fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	699a      	ldr	r2, [r3, #24]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	699a      	ldr	r2, [r3, #24]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6999      	ldr	r1, [r3, #24]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	021a      	lsls	r2, r3, #8
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	619a      	str	r2, [r3, #24]
      break;
 8008dcc:	e084      	b.n	8008ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f000 fa0b 	bl	80091f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69da      	ldr	r2, [r3, #28]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f042 0208 	orr.w	r2, r2, #8
 8008de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	69da      	ldr	r2, [r3, #28]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f022 0204 	bic.w	r2, r2, #4
 8008df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	69d9      	ldr	r1, [r3, #28]
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	430a      	orrs	r2, r1
 8008e0a:	61da      	str	r2, [r3, #28]
      break;
 8008e0c:	e064      	b.n	8008ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68b9      	ldr	r1, [r7, #8]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 fa63 	bl	80092e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	69da      	ldr	r2, [r3, #28]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	69da      	ldr	r2, [r3, #28]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	69d9      	ldr	r1, [r3, #28]
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	021a      	lsls	r2, r3, #8
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	61da      	str	r2, [r3, #28]
      break;
 8008e4e:	e043      	b.n	8008ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 faa0 	bl	800939c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f042 0208 	orr.w	r2, r2, #8
 8008e6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0204 	bic.w	r2, r2, #4
 8008e7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	691a      	ldr	r2, [r3, #16]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008e8e:	e023      	b.n	8008ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	68b9      	ldr	r1, [r7, #8]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fad8 	bl	800944c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008eaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	021a      	lsls	r2, r3, #8
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008ed0:	e002      	b.n	8008ed8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3718      	adds	r7, #24
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop

08008eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b085      	sub	sp, #20
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ff8 <TIM_Base_SetConfig+0xbc>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d003      	beq.n	8008f5c <TIM_Base_SetConfig+0x20>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f5a:	d108      	bne.n	8008f6e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a21      	ldr	r2, [pc, #132]	@ (8008ff8 <TIM_Base_SetConfig+0xbc>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d00b      	beq.n	8008f8e <TIM_Base_SetConfig+0x52>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f7c:	d007      	beq.n	8008f8e <TIM_Base_SetConfig+0x52>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a1e      	ldr	r2, [pc, #120]	@ (8008ffc <TIM_Base_SetConfig+0xc0>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d003      	beq.n	8008f8e <TIM_Base_SetConfig+0x52>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a1d      	ldr	r2, [pc, #116]	@ (8009000 <TIM_Base_SetConfig+0xc4>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d108      	bne.n	8008fa0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689a      	ldr	r2, [r3, #8]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8008ff8 <TIM_Base_SetConfig+0xbc>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d007      	beq.n	8008fdc <TIM_Base_SetConfig+0xa0>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a0b      	ldr	r2, [pc, #44]	@ (8008ffc <TIM_Base_SetConfig+0xc0>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d003      	beq.n	8008fdc <TIM_Base_SetConfig+0xa0>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8009000 <TIM_Base_SetConfig+0xc4>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d103      	bne.n	8008fe4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	691a      	ldr	r2, [r3, #16]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	615a      	str	r2, [r3, #20]
}
 8008fea:	bf00      	nop
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	40012c00 	.word	0x40012c00
 8008ffc:	40014000 	.word	0x40014000
 8009000:	40014400 	.word	0x40014400

08009004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	f023 0201 	bic.w	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0303 	bic.w	r3, r3, #3
 800903e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f023 0302 	bic.w	r3, r3, #2
 8009050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	4313      	orrs	r3, r2
 800905a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a24      	ldr	r2, [pc, #144]	@ (80090f0 <TIM_OC1_SetConfig+0xec>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d007      	beq.n	8009074 <TIM_OC1_SetConfig+0x70>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a23      	ldr	r2, [pc, #140]	@ (80090f4 <TIM_OC1_SetConfig+0xf0>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d003      	beq.n	8009074 <TIM_OC1_SetConfig+0x70>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a22      	ldr	r2, [pc, #136]	@ (80090f8 <TIM_OC1_SetConfig+0xf4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d10c      	bne.n	800908e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	f023 0308 	bic.w	r3, r3, #8
 800907a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f023 0304 	bic.w	r3, r3, #4
 800908c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a17      	ldr	r2, [pc, #92]	@ (80090f0 <TIM_OC1_SetConfig+0xec>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d007      	beq.n	80090a6 <TIM_OC1_SetConfig+0xa2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a16      	ldr	r2, [pc, #88]	@ (80090f4 <TIM_OC1_SetConfig+0xf0>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d003      	beq.n	80090a6 <TIM_OC1_SetConfig+0xa2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a15      	ldr	r2, [pc, #84]	@ (80090f8 <TIM_OC1_SetConfig+0xf4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d111      	bne.n	80090ca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	695b      	ldr	r3, [r3, #20]
 80090ba:	693a      	ldr	r2, [r7, #16]
 80090bc:	4313      	orrs	r3, r2
 80090be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	697a      	ldr	r2, [r7, #20]
 80090e2:	621a      	str	r2, [r3, #32]
}
 80090e4:	bf00      	nop
 80090e6:	371c      	adds	r7, #28
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	40012c00 	.word	0x40012c00
 80090f4:	40014000 	.word	0x40014000
 80090f8:	40014400 	.word	0x40014400

080090fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b087      	sub	sp, #28
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	f023 0210 	bic.w	r2, r3, #16
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800912a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800912e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	021b      	lsls	r3, r3, #8
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	4313      	orrs	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f023 0320 	bic.w	r3, r3, #32
 800914a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	4313      	orrs	r3, r2
 8009156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a22      	ldr	r2, [pc, #136]	@ (80091e4 <TIM_OC2_SetConfig+0xe8>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d10d      	bne.n	800917c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	011b      	lsls	r3, r3, #4
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	4313      	orrs	r3, r2
 8009172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800917a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a19      	ldr	r2, [pc, #100]	@ (80091e4 <TIM_OC2_SetConfig+0xe8>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d007      	beq.n	8009194 <TIM_OC2_SetConfig+0x98>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	4a18      	ldr	r2, [pc, #96]	@ (80091e8 <TIM_OC2_SetConfig+0xec>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d003      	beq.n	8009194 <TIM_OC2_SetConfig+0x98>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	4a17      	ldr	r2, [pc, #92]	@ (80091ec <TIM_OC2_SetConfig+0xf0>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d113      	bne.n	80091bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800919a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	695b      	ldr	r3, [r3, #20]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	697a      	ldr	r2, [r7, #20]
 80091d4:	621a      	str	r2, [r3, #32]
}
 80091d6:	bf00      	nop
 80091d8:	371c      	adds	r7, #28
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	40012c00 	.word	0x40012c00
 80091e8:	40014000 	.word	0x40014000
 80091ec:	40014400 	.word	0x40014400

080091f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6a1b      	ldr	r3, [r3, #32]
 8009204:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800921e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800923c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a21      	ldr	r2, [pc, #132]	@ (80092d4 <TIM_OC3_SetConfig+0xe4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d10d      	bne.n	800926e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800926c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a18      	ldr	r2, [pc, #96]	@ (80092d4 <TIM_OC3_SetConfig+0xe4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d007      	beq.n	8009286 <TIM_OC3_SetConfig+0x96>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	4a17      	ldr	r2, [pc, #92]	@ (80092d8 <TIM_OC3_SetConfig+0xe8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d003      	beq.n	8009286 <TIM_OC3_SetConfig+0x96>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a16      	ldr	r2, [pc, #88]	@ (80092dc <TIM_OC3_SetConfig+0xec>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d113      	bne.n	80092ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800928c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	011b      	lsls	r3, r3, #4
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	621a      	str	r2, [r3, #32]
}
 80092c8:	bf00      	nop
 80092ca:	371c      	adds	r7, #28
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr
 80092d4:	40012c00 	.word	0x40012c00
 80092d8:	40014000 	.word	0x40014000
 80092dc:	40014400 	.word	0x40014400

080092e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800930e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800931a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	021b      	lsls	r3, r3, #8
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	4313      	orrs	r3, r2
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800932e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	031b      	lsls	r3, r3, #12
 8009336:	693a      	ldr	r2, [r7, #16]
 8009338:	4313      	orrs	r3, r2
 800933a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a14      	ldr	r2, [pc, #80]	@ (8009390 <TIM_OC4_SetConfig+0xb0>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d007      	beq.n	8009354 <TIM_OC4_SetConfig+0x74>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a13      	ldr	r2, [pc, #76]	@ (8009394 <TIM_OC4_SetConfig+0xb4>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d003      	beq.n	8009354 <TIM_OC4_SetConfig+0x74>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a12      	ldr	r2, [pc, #72]	@ (8009398 <TIM_OC4_SetConfig+0xb8>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d109      	bne.n	8009368 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800935a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	019b      	lsls	r3, r3, #6
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	4313      	orrs	r3, r2
 8009366:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	697a      	ldr	r2, [r7, #20]
 800936c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	621a      	str	r2, [r3, #32]
}
 8009382:	bf00      	nop
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	40012c00 	.word	0x40012c00
 8009394:	40014000 	.word	0x40014000
 8009398:	40014400 	.word	0x40014400

0800939c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80093e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	041b      	lsls	r3, r3, #16
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a13      	ldr	r2, [pc, #76]	@ (8009440 <TIM_OC5_SetConfig+0xa4>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d007      	beq.n	8009406 <TIM_OC5_SetConfig+0x6a>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a12      	ldr	r2, [pc, #72]	@ (8009444 <TIM_OC5_SetConfig+0xa8>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d003      	beq.n	8009406 <TIM_OC5_SetConfig+0x6a>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a11      	ldr	r2, [pc, #68]	@ (8009448 <TIM_OC5_SetConfig+0xac>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d109      	bne.n	800941a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800940c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	695b      	ldr	r3, [r3, #20]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	4313      	orrs	r3, r2
 8009418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	693a      	ldr	r2, [r7, #16]
 8009432:	621a      	str	r2, [r3, #32]
}
 8009434:	bf00      	nop
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40012c00 	.word	0x40012c00
 8009444:	40014000 	.word	0x40014000
 8009448:	40014400 	.word	0x40014400

0800944c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800947a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800947e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	021b      	lsls	r3, r3, #8
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	4313      	orrs	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009492:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	051b      	lsls	r3, r3, #20
 800949a:	693a      	ldr	r2, [r7, #16]
 800949c:	4313      	orrs	r3, r2
 800949e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a14      	ldr	r2, [pc, #80]	@ (80094f4 <TIM_OC6_SetConfig+0xa8>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d007      	beq.n	80094b8 <TIM_OC6_SetConfig+0x6c>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a13      	ldr	r2, [pc, #76]	@ (80094f8 <TIM_OC6_SetConfig+0xac>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d003      	beq.n	80094b8 <TIM_OC6_SetConfig+0x6c>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a12      	ldr	r2, [pc, #72]	@ (80094fc <TIM_OC6_SetConfig+0xb0>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d109      	bne.n	80094cc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	029b      	lsls	r3, r3, #10
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	621a      	str	r2, [r3, #32]
}
 80094e6:	bf00      	nop
 80094e8:	371c      	adds	r7, #28
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	40012c00 	.word	0x40012c00
 80094f8:	40014000 	.word	0x40014000
 80094fc:	40014400 	.word	0x40014400

08009500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f003 031f 	and.w	r3, r3, #31
 8009512:	2201      	movs	r2, #1
 8009514:	fa02 f303 	lsl.w	r3, r2, r3
 8009518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a1a      	ldr	r2, [r3, #32]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	43db      	mvns	r3, r3
 8009522:	401a      	ands	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6a1a      	ldr	r2, [r3, #32]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	f003 031f 	and.w	r3, r3, #31
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	fa01 f303 	lsl.w	r3, r1, r3
 8009538:	431a      	orrs	r2, r3
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	621a      	str	r2, [r3, #32]
}
 800953e:	bf00      	nop
 8009540:	371c      	adds	r7, #28
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
	...

0800954c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800955c:	2b01      	cmp	r3, #1
 800955e:	d101      	bne.n	8009564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009560:	2302      	movs	r3, #2
 8009562:	e04f      	b.n	8009604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2202      	movs	r2, #2
 8009570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a21      	ldr	r2, [pc, #132]	@ (8009610 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d108      	bne.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009594:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	4313      	orrs	r3, r2
 800959e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a14      	ldr	r2, [pc, #80]	@ (8009610 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d009      	beq.n	80095d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095cc:	d004      	beq.n	80095d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a10      	ldr	r2, [pc, #64]	@ (8009614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d10c      	bne.n	80095f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3714      	adds	r7, #20
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	40012c00 	.word	0x40012c00
 8009614:	40014000 	.word	0x40014000

08009618 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009622:	2300      	movs	r3, #0
 8009624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800962c:	2b01      	cmp	r3, #1
 800962e:	d101      	bne.n	8009634 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009630:	2302      	movs	r3, #2
 8009632:	e060      	b.n	80096f6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	4313      	orrs	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	4313      	orrs	r3, r2
 8009656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4313      	orrs	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	691b      	ldr	r3, [r3, #16]
 800967e:	4313      	orrs	r3, r2
 8009680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	4313      	orrs	r3, r2
 800968e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969a:	4313      	orrs	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	041b      	lsls	r3, r3, #16
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a14      	ldr	r2, [pc, #80]	@ (8009704 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d115      	bne.n	80096e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c2:	051b      	lsls	r3, r3, #20
 80096c4:	4313      	orrs	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	69db      	ldr	r3, [r3, #28]
 80096d2:	4313      	orrs	r3, r2
 80096d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3714      	adds	r7, #20
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	40012c00 	.word	0x40012c00

08009708 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e040      	b.n	80097d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d106      	bne.n	800976c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7f9 fcf2 	bl	8003150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2224      	movs	r2, #36	@ 0x24
 8009770:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 0201 	bic.w	r2, r2, #1
 8009780:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009786:	2b00      	cmp	r3, #0
 8009788:	d002      	beq.n	8009790 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 fba6 	bl	8009edc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f977 	bl	8009a84 <UART_SetConfig>
 8009796:	4603      	mov	r3, r0
 8009798:	2b01      	cmp	r3, #1
 800979a:	d101      	bne.n	80097a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e01b      	b.n	80097d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	685a      	ldr	r2, [r3, #4]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689a      	ldr	r2, [r3, #8]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f042 0201 	orr.w	r2, r2, #1
 80097ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fc25 	bl	800a020 <UART_CheckIdleState>
 80097d6:	4603      	mov	r3, r0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3708      	adds	r7, #8
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08a      	sub	sp, #40	@ 0x28
 80097e4:	af02      	add	r7, sp, #8
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	4613      	mov	r3, r2
 80097ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d177      	bne.n	80098e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d002      	beq.n	8009804 <HAL_UART_Transmit+0x24>
 80097fe:	88fb      	ldrh	r3, [r7, #6]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e070      	b.n	80098ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2221      	movs	r2, #33	@ 0x21
 8009814:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009816:	f7f9 ffef 	bl	80037f8 <HAL_GetTick>
 800981a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	88fa      	ldrh	r2, [r7, #6]
 8009820:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	88fa      	ldrh	r2, [r7, #6]
 8009828:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009834:	d108      	bne.n	8009848 <HAL_UART_Transmit+0x68>
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d104      	bne.n	8009848 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800983e:	2300      	movs	r3, #0
 8009840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	61bb      	str	r3, [r7, #24]
 8009846:	e003      	b.n	8009850 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800984c:	2300      	movs	r3, #0
 800984e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009850:	e02f      	b.n	80098b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	9300      	str	r3, [sp, #0]
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2200      	movs	r2, #0
 800985a:	2180      	movs	r1, #128	@ 0x80
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f000 fc87 	bl	800a170 <UART_WaitOnFlagUntilTimeout>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d004      	beq.n	8009872 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2220      	movs	r2, #32
 800986c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e03b      	b.n	80098ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10b      	bne.n	8009890 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009878:	69bb      	ldr	r3, [r7, #24]
 800987a:	881a      	ldrh	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009884:	b292      	uxth	r2, r2
 8009886:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	3302      	adds	r3, #2
 800988c:	61bb      	str	r3, [r7, #24]
 800988e:	e007      	b.n	80098a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	781a      	ldrb	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	3301      	adds	r3, #1
 800989e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29a      	uxth	r2, r3
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1c9      	bne.n	8009852 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2200      	movs	r2, #0
 80098c6:	2140      	movs	r1, #64	@ 0x40
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f000 fc51 	bl	800a170 <UART_WaitOnFlagUntilTimeout>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d004      	beq.n	80098de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2220      	movs	r2, #32
 80098d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80098da:	2303      	movs	r3, #3
 80098dc:	e005      	b.n	80098ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2220      	movs	r2, #32
 80098e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	e000      	b.n	80098ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80098e8:	2302      	movs	r3, #2
  }
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3720      	adds	r7, #32
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b08a      	sub	sp, #40	@ 0x28
 80098f6:	af02      	add	r7, sp, #8
 80098f8:	60f8      	str	r0, [r7, #12]
 80098fa:	60b9      	str	r1, [r7, #8]
 80098fc:	603b      	str	r3, [r7, #0]
 80098fe:	4613      	mov	r3, r2
 8009900:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009908:	2b20      	cmp	r3, #32
 800990a:	f040 80b6 	bne.w	8009a7a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <HAL_UART_Receive+0x28>
 8009914:	88fb      	ldrh	r3, [r7, #6]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e0ae      	b.n	8009a7c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2222      	movs	r2, #34	@ 0x22
 800992a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009934:	f7f9 ff60 	bl	80037f8 <HAL_GetTick>
 8009938:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	88fa      	ldrh	r2, [r7, #6]
 800993e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	88fa      	ldrh	r2, [r7, #6]
 8009946:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009952:	d10e      	bne.n	8009972 <HAL_UART_Receive+0x80>
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d105      	bne.n	8009968 <HAL_UART_Receive+0x76>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009962:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009966:	e02d      	b.n	80099c4 <HAL_UART_Receive+0xd2>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	22ff      	movs	r2, #255	@ 0xff
 800996c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009970:	e028      	b.n	80099c4 <HAL_UART_Receive+0xd2>
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10d      	bne.n	8009996 <HAL_UART_Receive+0xa4>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	691b      	ldr	r3, [r3, #16]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d104      	bne.n	800998c <HAL_UART_Receive+0x9a>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	22ff      	movs	r2, #255	@ 0xff
 8009986:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800998a:	e01b      	b.n	80099c4 <HAL_UART_Receive+0xd2>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	227f      	movs	r2, #127	@ 0x7f
 8009990:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009994:	e016      	b.n	80099c4 <HAL_UART_Receive+0xd2>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	689b      	ldr	r3, [r3, #8]
 800999a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800999e:	d10d      	bne.n	80099bc <HAL_UART_Receive+0xca>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d104      	bne.n	80099b2 <HAL_UART_Receive+0xc0>
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	227f      	movs	r2, #127	@ 0x7f
 80099ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80099b0:	e008      	b.n	80099c4 <HAL_UART_Receive+0xd2>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	223f      	movs	r2, #63	@ 0x3f
 80099b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80099ba:	e003      	b.n	80099c4 <HAL_UART_Receive+0xd2>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099d4:	d108      	bne.n	80099e8 <HAL_UART_Receive+0xf6>
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d104      	bne.n	80099e8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80099de:	2300      	movs	r3, #0
 80099e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	e003      	b.n	80099f0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099ec:	2300      	movs	r3, #0
 80099ee:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80099f0:	e037      	b.n	8009a62 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2200      	movs	r2, #0
 80099fa:	2120      	movs	r1, #32
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 fbb7 	bl	800a170 <UART_WaitOnFlagUntilTimeout>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d005      	beq.n	8009a14 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2220      	movs	r2, #32
 8009a0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8009a10:	2303      	movs	r3, #3
 8009a12:	e033      	b.n	8009a7c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10c      	bne.n	8009a34 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	8a7b      	ldrh	r3, [r7, #18]
 8009a24:	4013      	ands	r3, r2
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	3302      	adds	r3, #2
 8009a30:	61bb      	str	r3, [r7, #24]
 8009a32:	e00d      	b.n	8009a50 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	8a7b      	ldrh	r3, [r7, #18]
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	4013      	ands	r3, r2
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1c1      	bne.n	80099f2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	e000      	b.n	8009a7c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8009a7a:	2302      	movs	r3, #2
  }
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3720      	adds	r7, #32
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a88:	b08a      	sub	sp, #40	@ 0x28
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	689a      	ldr	r2, [r3, #8]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	4bb4      	ldr	r3, [pc, #720]	@ (8009d84 <UART_SetConfig+0x300>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	6812      	ldr	r2, [r2, #0]
 8009aba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009abc:	430b      	orrs	r3, r1
 8009abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	68da      	ldr	r2, [r3, #12]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4aa9      	ldr	r2, [pc, #676]	@ (8009d88 <UART_SetConfig+0x304>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d004      	beq.n	8009af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009aec:	4313      	orrs	r3, r2
 8009aee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b00:	430a      	orrs	r2, r1
 8009b02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4aa0      	ldr	r2, [pc, #640]	@ (8009d8c <UART_SetConfig+0x308>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d126      	bne.n	8009b5c <UART_SetConfig+0xd8>
 8009b0e:	4ba0      	ldr	r3, [pc, #640]	@ (8009d90 <UART_SetConfig+0x30c>)
 8009b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	2b03      	cmp	r3, #3
 8009b1a:	d81b      	bhi.n	8009b54 <UART_SetConfig+0xd0>
 8009b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <UART_SetConfig+0xa0>)
 8009b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b22:	bf00      	nop
 8009b24:	08009b35 	.word	0x08009b35
 8009b28:	08009b45 	.word	0x08009b45
 8009b2c:	08009b3d 	.word	0x08009b3d
 8009b30:	08009b4d 	.word	0x08009b4d
 8009b34:	2301      	movs	r3, #1
 8009b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b3a:	e080      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b42:	e07c      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009b44:	2304      	movs	r3, #4
 8009b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b4a:	e078      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009b4c:	2308      	movs	r3, #8
 8009b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b52:	e074      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009b54:	2310      	movs	r3, #16
 8009b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009b5a:	e070      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a8c      	ldr	r2, [pc, #560]	@ (8009d94 <UART_SetConfig+0x310>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d138      	bne.n	8009bd8 <UART_SetConfig+0x154>
 8009b66:	4b8a      	ldr	r3, [pc, #552]	@ (8009d90 <UART_SetConfig+0x30c>)
 8009b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b6c:	f003 030c 	and.w	r3, r3, #12
 8009b70:	2b0c      	cmp	r3, #12
 8009b72:	d82d      	bhi.n	8009bd0 <UART_SetConfig+0x14c>
 8009b74:	a201      	add	r2, pc, #4	@ (adr r2, 8009b7c <UART_SetConfig+0xf8>)
 8009b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7a:	bf00      	nop
 8009b7c:	08009bb1 	.word	0x08009bb1
 8009b80:	08009bd1 	.word	0x08009bd1
 8009b84:	08009bd1 	.word	0x08009bd1
 8009b88:	08009bd1 	.word	0x08009bd1
 8009b8c:	08009bc1 	.word	0x08009bc1
 8009b90:	08009bd1 	.word	0x08009bd1
 8009b94:	08009bd1 	.word	0x08009bd1
 8009b98:	08009bd1 	.word	0x08009bd1
 8009b9c:	08009bb9 	.word	0x08009bb9
 8009ba0:	08009bd1 	.word	0x08009bd1
 8009ba4:	08009bd1 	.word	0x08009bd1
 8009ba8:	08009bd1 	.word	0x08009bd1
 8009bac:	08009bc9 	.word	0x08009bc9
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bb6:	e042      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009bb8:	2302      	movs	r3, #2
 8009bba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bbe:	e03e      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009bc0:	2304      	movs	r3, #4
 8009bc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bc6:	e03a      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009bc8:	2308      	movs	r3, #8
 8009bca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bce:	e036      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009bd0:	2310      	movs	r3, #16
 8009bd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009bd6:	e032      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8009d88 <UART_SetConfig+0x304>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d12a      	bne.n	8009c38 <UART_SetConfig+0x1b4>
 8009be2:	4b6b      	ldr	r3, [pc, #428]	@ (8009d90 <UART_SetConfig+0x30c>)
 8009be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009bec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bf0:	d01a      	beq.n	8009c28 <UART_SetConfig+0x1a4>
 8009bf2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bf6:	d81b      	bhi.n	8009c30 <UART_SetConfig+0x1ac>
 8009bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bfc:	d00c      	beq.n	8009c18 <UART_SetConfig+0x194>
 8009bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c02:	d815      	bhi.n	8009c30 <UART_SetConfig+0x1ac>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <UART_SetConfig+0x18c>
 8009c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c0c:	d008      	beq.n	8009c20 <UART_SetConfig+0x19c>
 8009c0e:	e00f      	b.n	8009c30 <UART_SetConfig+0x1ac>
 8009c10:	2300      	movs	r3, #0
 8009c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009c16:	e012      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009c18:	2302      	movs	r3, #2
 8009c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009c1e:	e00e      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009c20:	2304      	movs	r3, #4
 8009c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009c26:	e00a      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009c28:	2308      	movs	r3, #8
 8009c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009c2e:	e006      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009c30:	2310      	movs	r3, #16
 8009c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009c36:	e002      	b.n	8009c3e <UART_SetConfig+0x1ba>
 8009c38:	2310      	movs	r3, #16
 8009c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a51      	ldr	r2, [pc, #324]	@ (8009d88 <UART_SetConfig+0x304>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d17a      	bne.n	8009d3e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009c4c:	2b08      	cmp	r3, #8
 8009c4e:	d824      	bhi.n	8009c9a <UART_SetConfig+0x216>
 8009c50:	a201      	add	r2, pc, #4	@ (adr r2, 8009c58 <UART_SetConfig+0x1d4>)
 8009c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009c7d 	.word	0x08009c7d
 8009c5c:	08009c9b 	.word	0x08009c9b
 8009c60:	08009c85 	.word	0x08009c85
 8009c64:	08009c9b 	.word	0x08009c9b
 8009c68:	08009c8b 	.word	0x08009c8b
 8009c6c:	08009c9b 	.word	0x08009c9b
 8009c70:	08009c9b 	.word	0x08009c9b
 8009c74:	08009c9b 	.word	0x08009c9b
 8009c78:	08009c93 	.word	0x08009c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c7c:	f7fc fd88 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 8009c80:	61f8      	str	r0, [r7, #28]
        break;
 8009c82:	e010      	b.n	8009ca6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c84:	4b44      	ldr	r3, [pc, #272]	@ (8009d98 <UART_SetConfig+0x314>)
 8009c86:	61fb      	str	r3, [r7, #28]
        break;
 8009c88:	e00d      	b.n	8009ca6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c8a:	f7fc fce9 	bl	8006660 <HAL_RCC_GetSysClockFreq>
 8009c8e:	61f8      	str	r0, [r7, #28]
        break;
 8009c90:	e009      	b.n	8009ca6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c96:	61fb      	str	r3, [r7, #28]
        break;
 8009c98:	e005      	b.n	8009ca6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009ca4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	f000 8107 	beq.w	8009ebc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	4413      	add	r3, r2
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d305      	bcc.n	8009cca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009cc4:	69fa      	ldr	r2, [r7, #28]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d903      	bls.n	8009cd2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009cd0:	e0f4      	b.n	8009ebc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	461c      	mov	r4, r3
 8009cd8:	4615      	mov	r5, r2
 8009cda:	f04f 0200 	mov.w	r2, #0
 8009cde:	f04f 0300 	mov.w	r3, #0
 8009ce2:	022b      	lsls	r3, r5, #8
 8009ce4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009ce8:	0222      	lsls	r2, r4, #8
 8009cea:	68f9      	ldr	r1, [r7, #12]
 8009cec:	6849      	ldr	r1, [r1, #4]
 8009cee:	0849      	lsrs	r1, r1, #1
 8009cf0:	2000      	movs	r0, #0
 8009cf2:	4688      	mov	r8, r1
 8009cf4:	4681      	mov	r9, r0
 8009cf6:	eb12 0a08 	adds.w	sl, r2, r8
 8009cfa:	eb43 0b09 	adc.w	fp, r3, r9
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	603b      	str	r3, [r7, #0]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d0c:	4650      	mov	r0, sl
 8009d0e:	4659      	mov	r1, fp
 8009d10:	f7f6 ffba 	bl	8000c88 <__aeabi_uldivmod>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4613      	mov	r3, r2
 8009d1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d22:	d308      	bcc.n	8009d36 <UART_SetConfig+0x2b2>
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d2a:	d204      	bcs.n	8009d36 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	60da      	str	r2, [r3, #12]
 8009d34:	e0c2      	b.n	8009ebc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009d3c:	e0be      	b.n	8009ebc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	69db      	ldr	r3, [r3, #28]
 8009d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d46:	d16a      	bne.n	8009e1e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009d48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009d4c:	2b08      	cmp	r3, #8
 8009d4e:	d834      	bhi.n	8009dba <UART_SetConfig+0x336>
 8009d50:	a201      	add	r2, pc, #4	@ (adr r2, 8009d58 <UART_SetConfig+0x2d4>)
 8009d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d56:	bf00      	nop
 8009d58:	08009d7d 	.word	0x08009d7d
 8009d5c:	08009d9d 	.word	0x08009d9d
 8009d60:	08009da5 	.word	0x08009da5
 8009d64:	08009dbb 	.word	0x08009dbb
 8009d68:	08009dab 	.word	0x08009dab
 8009d6c:	08009dbb 	.word	0x08009dbb
 8009d70:	08009dbb 	.word	0x08009dbb
 8009d74:	08009dbb 	.word	0x08009dbb
 8009d78:	08009db3 	.word	0x08009db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d7c:	f7fc fd08 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 8009d80:	61f8      	str	r0, [r7, #28]
        break;
 8009d82:	e020      	b.n	8009dc6 <UART_SetConfig+0x342>
 8009d84:	efff69f3 	.word	0xefff69f3
 8009d88:	40008000 	.word	0x40008000
 8009d8c:	40013800 	.word	0x40013800
 8009d90:	40021000 	.word	0x40021000
 8009d94:	40004400 	.word	0x40004400
 8009d98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d9c:	f7fc fd0e 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 8009da0:	61f8      	str	r0, [r7, #28]
        break;
 8009da2:	e010      	b.n	8009dc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009da4:	4b4c      	ldr	r3, [pc, #304]	@ (8009ed8 <UART_SetConfig+0x454>)
 8009da6:	61fb      	str	r3, [r7, #28]
        break;
 8009da8:	e00d      	b.n	8009dc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009daa:	f7fc fc59 	bl	8006660 <HAL_RCC_GetSysClockFreq>
 8009dae:	61f8      	str	r0, [r7, #28]
        break;
 8009db0:	e009      	b.n	8009dc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009db2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009db6:	61fb      	str	r3, [r7, #28]
        break;
 8009db8:	e005      	b.n	8009dc6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009dc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dc6:	69fb      	ldr	r3, [r7, #28]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d077      	beq.n	8009ebc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	005a      	lsls	r2, r3, #1
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	085b      	lsrs	r3, r3, #1
 8009dd6:	441a      	add	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	2b0f      	cmp	r3, #15
 8009de6:	d916      	bls.n	8009e16 <UART_SetConfig+0x392>
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dee:	d212      	bcs.n	8009e16 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	f023 030f 	bic.w	r3, r3, #15
 8009df8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	085b      	lsrs	r3, r3, #1
 8009dfe:	b29b      	uxth	r3, r3
 8009e00:	f003 0307 	and.w	r3, r3, #7
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	8afb      	ldrh	r3, [r7, #22]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	8afa      	ldrh	r2, [r7, #22]
 8009e12:	60da      	str	r2, [r3, #12]
 8009e14:	e052      	b.n	8009ebc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009e1c:	e04e      	b.n	8009ebc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009e22:	2b08      	cmp	r3, #8
 8009e24:	d827      	bhi.n	8009e76 <UART_SetConfig+0x3f2>
 8009e26:	a201      	add	r2, pc, #4	@ (adr r2, 8009e2c <UART_SetConfig+0x3a8>)
 8009e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2c:	08009e51 	.word	0x08009e51
 8009e30:	08009e59 	.word	0x08009e59
 8009e34:	08009e61 	.word	0x08009e61
 8009e38:	08009e77 	.word	0x08009e77
 8009e3c:	08009e67 	.word	0x08009e67
 8009e40:	08009e77 	.word	0x08009e77
 8009e44:	08009e77 	.word	0x08009e77
 8009e48:	08009e77 	.word	0x08009e77
 8009e4c:	08009e6f 	.word	0x08009e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e50:	f7fc fc9e 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 8009e54:	61f8      	str	r0, [r7, #28]
        break;
 8009e56:	e014      	b.n	8009e82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e58:	f7fc fcb0 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 8009e5c:	61f8      	str	r0, [r7, #28]
        break;
 8009e5e:	e010      	b.n	8009e82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e60:	4b1d      	ldr	r3, [pc, #116]	@ (8009ed8 <UART_SetConfig+0x454>)
 8009e62:	61fb      	str	r3, [r7, #28]
        break;
 8009e64:	e00d      	b.n	8009e82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e66:	f7fc fbfb 	bl	8006660 <HAL_RCC_GetSysClockFreq>
 8009e6a:	61f8      	str	r0, [r7, #28]
        break;
 8009e6c:	e009      	b.n	8009e82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e72:	61fb      	str	r3, [r7, #28]
        break;
 8009e74:	e005      	b.n	8009e82 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009e76:	2300      	movs	r3, #0
 8009e78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009e80:	bf00      	nop
    }

    if (pclk != 0U)
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d019      	beq.n	8009ebc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	085a      	lsrs	r2, r3, #1
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	441a      	add	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	2b0f      	cmp	r3, #15
 8009ea0:	d909      	bls.n	8009eb6 <UART_SetConfig+0x432>
 8009ea2:	69bb      	ldr	r3, [r7, #24]
 8009ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ea8:	d205      	bcs.n	8009eb6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009eaa:	69bb      	ldr	r3, [r7, #24]
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	60da      	str	r2, [r3, #12]
 8009eb4:	e002      	b.n	8009ebc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009ec8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3728      	adds	r7, #40	@ 0x28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ed6:	bf00      	nop
 8009ed8:	00f42400 	.word	0x00f42400

08009edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ee8:	f003 0308 	and.w	r3, r3, #8
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d00a      	beq.n	8009f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	430a      	orrs	r2, r1
 8009f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f0a:	f003 0301 	and.w	r3, r3, #1
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d00a      	beq.n	8009f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f2c:	f003 0302 	and.w	r3, r3, #2
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00a      	beq.n	8009f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4e:	f003 0304 	and.w	r3, r3, #4
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f70:	f003 0310 	and.w	r3, r3, #16
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00a      	beq.n	8009f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	430a      	orrs	r2, r1
 8009f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f92:	f003 0320 	and.w	r3, r3, #32
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d00a      	beq.n	8009fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	430a      	orrs	r2, r1
 8009fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d01a      	beq.n	8009ff2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	430a      	orrs	r2, r1
 8009fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fda:	d10a      	bne.n	8009ff2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	430a      	orrs	r2, r1
 8009ff0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d00a      	beq.n	800a014 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	430a      	orrs	r2, r1
 800a012:	605a      	str	r2, [r3, #4]
  }
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b098      	sub	sp, #96	@ 0x60
 800a024:	af02      	add	r7, sp, #8
 800a026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a030:	f7f9 fbe2 	bl	80037f8 <HAL_GetTick>
 800a034:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0308 	and.w	r3, r3, #8
 800a040:	2b08      	cmp	r3, #8
 800a042:	d12e      	bne.n	800a0a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a044:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a04c:	2200      	movs	r2, #0
 800a04e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f88c 	bl	800a170 <UART_WaitOnFlagUntilTimeout>
 800a058:	4603      	mov	r3, r0
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d021      	beq.n	800a0a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a06c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a072:	653b      	str	r3, [r7, #80]	@ 0x50
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a07c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a07e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e6      	bne.n	800a05e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e062      	b.n	800a168 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d149      	bne.n	800a144 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f856 	bl	800a170 <UART_WaitOnFlagUntilTimeout>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d03c      	beq.n	800a144 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	e853 3f00 	ldrex	r3, [r3]
 800a0d6:	623b      	str	r3, [r7, #32]
   return(result);
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a0de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0f0:	e841 2300 	strex	r3, r2, [r1]
 800a0f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d1e6      	bne.n	800a0ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3308      	adds	r3, #8
 800a102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	e853 3f00 	ldrex	r3, [r3]
 800a10a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f023 0301 	bic.w	r3, r3, #1
 800a112:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3308      	adds	r3, #8
 800a11a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a11c:	61fa      	str	r2, [r7, #28]
 800a11e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a120:	69b9      	ldr	r1, [r7, #24]
 800a122:	69fa      	ldr	r2, [r7, #28]
 800a124:	e841 2300 	strex	r3, r2, [r1]
 800a128:	617b      	str	r3, [r7, #20]
   return(result);
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1e5      	bne.n	800a0fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e011      	b.n	800a168 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2220      	movs	r2, #32
 800a148:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2220      	movs	r2, #32
 800a14e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3758      	adds	r7, #88	@ 0x58
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	4613      	mov	r3, r2
 800a17e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a180:	e049      	b.n	800a216 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a188:	d045      	beq.n	800a216 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a18a:	f7f9 fb35 	bl	80037f8 <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	429a      	cmp	r2, r3
 800a198:	d302      	bcc.n	800a1a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a19a:	69bb      	ldr	r3, [r7, #24]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d101      	bne.n	800a1a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e048      	b.n	800a236 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0304 	and.w	r3, r3, #4
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d031      	beq.n	800a216 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	f003 0308 	and.w	r3, r3, #8
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d110      	bne.n	800a1e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2208      	movs	r2, #8
 800a1c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 f838 	bl	800a23e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2208      	movs	r2, #8
 800a1d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	e029      	b.n	800a236 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	69db      	ldr	r3, [r3, #28]
 800a1e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a1ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1f0:	d111      	bne.n	800a216 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f81e 	bl	800a23e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2220      	movs	r2, #32
 800a206:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a212:	2303      	movs	r3, #3
 800a214:	e00f      	b.n	800a236 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	69da      	ldr	r2, [r3, #28]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	4013      	ands	r3, r2
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	429a      	cmp	r2, r3
 800a224:	bf0c      	ite	eq
 800a226:	2301      	moveq	r3, #1
 800a228:	2300      	movne	r3, #0
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	461a      	mov	r2, r3
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	429a      	cmp	r2, r3
 800a232:	d0a6      	beq.n	800a182 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a23e:	b480      	push	{r7}
 800a240:	b095      	sub	sp, #84	@ 0x54
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a24e:	e853 3f00 	ldrex	r3, [r3]
 800a252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a25a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	461a      	mov	r2, r3
 800a262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a264:	643b      	str	r3, [r7, #64]	@ 0x40
 800a266:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a26a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a26c:	e841 2300 	strex	r3, r2, [r1]
 800a270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a274:	2b00      	cmp	r3, #0
 800a276:	d1e6      	bne.n	800a246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3308      	adds	r3, #8
 800a27e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a280:	6a3b      	ldr	r3, [r7, #32]
 800a282:	e853 3f00 	ldrex	r3, [r3]
 800a286:	61fb      	str	r3, [r7, #28]
   return(result);
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	f023 0301 	bic.w	r3, r3, #1
 800a28e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3308      	adds	r3, #8
 800a296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a29a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a29c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a29e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2a0:	e841 2300 	strex	r3, r2, [r1]
 800a2a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1e5      	bne.n	800a278 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d118      	bne.n	800a2e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	e853 3f00 	ldrex	r3, [r3]
 800a2c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	f023 0310 	bic.w	r3, r3, #16
 800a2c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a2d2:	61bb      	str	r3, [r7, #24]
 800a2d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d6:	6979      	ldr	r1, [r7, #20]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	e841 2300 	strex	r3, r2, [r1]
 800a2de:	613b      	str	r3, [r7, #16]
   return(result);
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d1e6      	bne.n	800a2b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2220      	movs	r2, #32
 800a2ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a2fa:	bf00      	nop
 800a2fc:	3754      	adds	r7, #84	@ 0x54
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr

0800a306 <sulp>:
 800a306:	b570      	push	{r4, r5, r6, lr}
 800a308:	4604      	mov	r4, r0
 800a30a:	460d      	mov	r5, r1
 800a30c:	ec45 4b10 	vmov	d0, r4, r5
 800a310:	4616      	mov	r6, r2
 800a312:	f003 fcd1 	bl	800dcb8 <__ulp>
 800a316:	ec51 0b10 	vmov	r0, r1, d0
 800a31a:	b17e      	cbz	r6, 800a33c <sulp+0x36>
 800a31c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a320:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a324:	2b00      	cmp	r3, #0
 800a326:	dd09      	ble.n	800a33c <sulp+0x36>
 800a328:	051b      	lsls	r3, r3, #20
 800a32a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a32e:	2400      	movs	r4, #0
 800a330:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a334:	4622      	mov	r2, r4
 800a336:	462b      	mov	r3, r5
 800a338:	f7f6 f95e 	bl	80005f8 <__aeabi_dmul>
 800a33c:	ec41 0b10 	vmov	d0, r0, r1
 800a340:	bd70      	pop	{r4, r5, r6, pc}
 800a342:	0000      	movs	r0, r0
 800a344:	0000      	movs	r0, r0
	...

0800a348 <_strtod_l>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	b09f      	sub	sp, #124	@ 0x7c
 800a34e:	460c      	mov	r4, r1
 800a350:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a352:	2200      	movs	r2, #0
 800a354:	921a      	str	r2, [sp, #104]	@ 0x68
 800a356:	9005      	str	r0, [sp, #20]
 800a358:	f04f 0a00 	mov.w	sl, #0
 800a35c:	f04f 0b00 	mov.w	fp, #0
 800a360:	460a      	mov	r2, r1
 800a362:	9219      	str	r2, [sp, #100]	@ 0x64
 800a364:	7811      	ldrb	r1, [r2, #0]
 800a366:	292b      	cmp	r1, #43	@ 0x2b
 800a368:	d04a      	beq.n	800a400 <_strtod_l+0xb8>
 800a36a:	d838      	bhi.n	800a3de <_strtod_l+0x96>
 800a36c:	290d      	cmp	r1, #13
 800a36e:	d832      	bhi.n	800a3d6 <_strtod_l+0x8e>
 800a370:	2908      	cmp	r1, #8
 800a372:	d832      	bhi.n	800a3da <_strtod_l+0x92>
 800a374:	2900      	cmp	r1, #0
 800a376:	d03b      	beq.n	800a3f0 <_strtod_l+0xa8>
 800a378:	2200      	movs	r2, #0
 800a37a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a37c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a37e:	782a      	ldrb	r2, [r5, #0]
 800a380:	2a30      	cmp	r2, #48	@ 0x30
 800a382:	f040 80b3 	bne.w	800a4ec <_strtod_l+0x1a4>
 800a386:	786a      	ldrb	r2, [r5, #1]
 800a388:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a38c:	2a58      	cmp	r2, #88	@ 0x58
 800a38e:	d16e      	bne.n	800a46e <_strtod_l+0x126>
 800a390:	9302      	str	r3, [sp, #8]
 800a392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	ab1a      	add	r3, sp, #104	@ 0x68
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	4a8e      	ldr	r2, [pc, #568]	@ (800a5d4 <_strtod_l+0x28c>)
 800a39c:	9805      	ldr	r0, [sp, #20]
 800a39e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a3a0:	a919      	add	r1, sp, #100	@ 0x64
 800a3a2:	f002 fd7b 	bl	800ce9c <__gethex>
 800a3a6:	f010 060f 	ands.w	r6, r0, #15
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	d005      	beq.n	800a3ba <_strtod_l+0x72>
 800a3ae:	2e06      	cmp	r6, #6
 800a3b0:	d128      	bne.n	800a404 <_strtod_l+0xbc>
 800a3b2:	3501      	adds	r5, #1
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a3b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f040 858e 	bne.w	800aede <_strtod_l+0xb96>
 800a3c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3c4:	b1cb      	cbz	r3, 800a3fa <_strtod_l+0xb2>
 800a3c6:	4652      	mov	r2, sl
 800a3c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a3cc:	ec43 2b10 	vmov	d0, r2, r3
 800a3d0:	b01f      	add	sp, #124	@ 0x7c
 800a3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3d6:	2920      	cmp	r1, #32
 800a3d8:	d1ce      	bne.n	800a378 <_strtod_l+0x30>
 800a3da:	3201      	adds	r2, #1
 800a3dc:	e7c1      	b.n	800a362 <_strtod_l+0x1a>
 800a3de:	292d      	cmp	r1, #45	@ 0x2d
 800a3e0:	d1ca      	bne.n	800a378 <_strtod_l+0x30>
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a3e6:	1c51      	adds	r1, r2, #1
 800a3e8:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3ea:	7852      	ldrb	r2, [r2, #1]
 800a3ec:	2a00      	cmp	r2, #0
 800a3ee:	d1c5      	bne.n	800a37c <_strtod_l+0x34>
 800a3f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a3f2:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	f040 8570 	bne.w	800aeda <_strtod_l+0xb92>
 800a3fa:	4652      	mov	r2, sl
 800a3fc:	465b      	mov	r3, fp
 800a3fe:	e7e5      	b.n	800a3cc <_strtod_l+0x84>
 800a400:	2100      	movs	r1, #0
 800a402:	e7ef      	b.n	800a3e4 <_strtod_l+0x9c>
 800a404:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a406:	b13a      	cbz	r2, 800a418 <_strtod_l+0xd0>
 800a408:	2135      	movs	r1, #53	@ 0x35
 800a40a:	a81c      	add	r0, sp, #112	@ 0x70
 800a40c:	f003 fd4e 	bl	800deac <__copybits>
 800a410:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a412:	9805      	ldr	r0, [sp, #20]
 800a414:	f003 f91c 	bl	800d650 <_Bfree>
 800a418:	3e01      	subs	r6, #1
 800a41a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a41c:	2e04      	cmp	r6, #4
 800a41e:	d806      	bhi.n	800a42e <_strtod_l+0xe6>
 800a420:	e8df f006 	tbb	[pc, r6]
 800a424:	201d0314 	.word	0x201d0314
 800a428:	14          	.byte	0x14
 800a429:	00          	.byte	0x00
 800a42a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a42e:	05e1      	lsls	r1, r4, #23
 800a430:	bf48      	it	mi
 800a432:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a436:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a43a:	0d1b      	lsrs	r3, r3, #20
 800a43c:	051b      	lsls	r3, r3, #20
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1bb      	bne.n	800a3ba <_strtod_l+0x72>
 800a442:	f001 fddf 	bl	800c004 <__errno>
 800a446:	2322      	movs	r3, #34	@ 0x22
 800a448:	6003      	str	r3, [r0, #0]
 800a44a:	e7b6      	b.n	800a3ba <_strtod_l+0x72>
 800a44c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a450:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a454:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a458:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a45c:	e7e7      	b.n	800a42e <_strtod_l+0xe6>
 800a45e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a5dc <_strtod_l+0x294>
 800a462:	e7e4      	b.n	800a42e <_strtod_l+0xe6>
 800a464:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a468:	f04f 3aff 	mov.w	sl, #4294967295
 800a46c:	e7df      	b.n	800a42e <_strtod_l+0xe6>
 800a46e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a470:	1c5a      	adds	r2, r3, #1
 800a472:	9219      	str	r2, [sp, #100]	@ 0x64
 800a474:	785b      	ldrb	r3, [r3, #1]
 800a476:	2b30      	cmp	r3, #48	@ 0x30
 800a478:	d0f9      	beq.n	800a46e <_strtod_l+0x126>
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d09d      	beq.n	800a3ba <_strtod_l+0x72>
 800a47e:	2301      	movs	r3, #1
 800a480:	9309      	str	r3, [sp, #36]	@ 0x24
 800a482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a484:	930c      	str	r3, [sp, #48]	@ 0x30
 800a486:	2300      	movs	r3, #0
 800a488:	9308      	str	r3, [sp, #32]
 800a48a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a48c:	461f      	mov	r7, r3
 800a48e:	220a      	movs	r2, #10
 800a490:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a492:	7805      	ldrb	r5, [r0, #0]
 800a494:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a498:	b2d9      	uxtb	r1, r3
 800a49a:	2909      	cmp	r1, #9
 800a49c:	d928      	bls.n	800a4f0 <_strtod_l+0x1a8>
 800a49e:	494e      	ldr	r1, [pc, #312]	@ (800a5d8 <_strtod_l+0x290>)
 800a4a0:	2201      	movs	r2, #1
 800a4a2:	f001 fd52 	bl	800bf4a <strncmp>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d032      	beq.n	800a510 <_strtod_l+0x1c8>
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	462a      	mov	r2, r5
 800a4ae:	4681      	mov	r9, r0
 800a4b0:	463d      	mov	r5, r7
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2a65      	cmp	r2, #101	@ 0x65
 800a4b6:	d001      	beq.n	800a4bc <_strtod_l+0x174>
 800a4b8:	2a45      	cmp	r2, #69	@ 0x45
 800a4ba:	d114      	bne.n	800a4e6 <_strtod_l+0x19e>
 800a4bc:	b91d      	cbnz	r5, 800a4c6 <_strtod_l+0x17e>
 800a4be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4c0:	4302      	orrs	r2, r0
 800a4c2:	d095      	beq.n	800a3f0 <_strtod_l+0xa8>
 800a4c4:	2500      	movs	r5, #0
 800a4c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a4c8:	1c62      	adds	r2, r4, #1
 800a4ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4cc:	7862      	ldrb	r2, [r4, #1]
 800a4ce:	2a2b      	cmp	r2, #43	@ 0x2b
 800a4d0:	d077      	beq.n	800a5c2 <_strtod_l+0x27a>
 800a4d2:	2a2d      	cmp	r2, #45	@ 0x2d
 800a4d4:	d07b      	beq.n	800a5ce <_strtod_l+0x286>
 800a4d6:	f04f 0c00 	mov.w	ip, #0
 800a4da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a4de:	2909      	cmp	r1, #9
 800a4e0:	f240 8082 	bls.w	800a5e8 <_strtod_l+0x2a0>
 800a4e4:	9419      	str	r4, [sp, #100]	@ 0x64
 800a4e6:	f04f 0800 	mov.w	r8, #0
 800a4ea:	e0a2      	b.n	800a632 <_strtod_l+0x2ea>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e7c7      	b.n	800a480 <_strtod_l+0x138>
 800a4f0:	2f08      	cmp	r7, #8
 800a4f2:	bfd5      	itete	le
 800a4f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a4f6:	9908      	ldrgt	r1, [sp, #32]
 800a4f8:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a500:	f100 0001 	add.w	r0, r0, #1
 800a504:	bfd4      	ite	le
 800a506:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a508:	9308      	strgt	r3, [sp, #32]
 800a50a:	3701      	adds	r7, #1
 800a50c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a50e:	e7bf      	b.n	800a490 <_strtod_l+0x148>
 800a510:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a512:	1c5a      	adds	r2, r3, #1
 800a514:	9219      	str	r2, [sp, #100]	@ 0x64
 800a516:	785a      	ldrb	r2, [r3, #1]
 800a518:	b37f      	cbz	r7, 800a57a <_strtod_l+0x232>
 800a51a:	4681      	mov	r9, r0
 800a51c:	463d      	mov	r5, r7
 800a51e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a522:	2b09      	cmp	r3, #9
 800a524:	d912      	bls.n	800a54c <_strtod_l+0x204>
 800a526:	2301      	movs	r3, #1
 800a528:	e7c4      	b.n	800a4b4 <_strtod_l+0x16c>
 800a52a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a530:	785a      	ldrb	r2, [r3, #1]
 800a532:	3001      	adds	r0, #1
 800a534:	2a30      	cmp	r2, #48	@ 0x30
 800a536:	d0f8      	beq.n	800a52a <_strtod_l+0x1e2>
 800a538:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a53c:	2b08      	cmp	r3, #8
 800a53e:	f200 84d3 	bhi.w	800aee8 <_strtod_l+0xba0>
 800a542:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a544:	930c      	str	r3, [sp, #48]	@ 0x30
 800a546:	4681      	mov	r9, r0
 800a548:	2000      	movs	r0, #0
 800a54a:	4605      	mov	r5, r0
 800a54c:	3a30      	subs	r2, #48	@ 0x30
 800a54e:	f100 0301 	add.w	r3, r0, #1
 800a552:	d02a      	beq.n	800a5aa <_strtod_l+0x262>
 800a554:	4499      	add	r9, r3
 800a556:	eb00 0c05 	add.w	ip, r0, r5
 800a55a:	462b      	mov	r3, r5
 800a55c:	210a      	movs	r1, #10
 800a55e:	4563      	cmp	r3, ip
 800a560:	d10d      	bne.n	800a57e <_strtod_l+0x236>
 800a562:	1c69      	adds	r1, r5, #1
 800a564:	4401      	add	r1, r0
 800a566:	4428      	add	r0, r5
 800a568:	2808      	cmp	r0, #8
 800a56a:	dc16      	bgt.n	800a59a <_strtod_l+0x252>
 800a56c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a56e:	230a      	movs	r3, #10
 800a570:	fb03 2300 	mla	r3, r3, r0, r2
 800a574:	930a      	str	r3, [sp, #40]	@ 0x28
 800a576:	2300      	movs	r3, #0
 800a578:	e018      	b.n	800a5ac <_strtod_l+0x264>
 800a57a:	4638      	mov	r0, r7
 800a57c:	e7da      	b.n	800a534 <_strtod_l+0x1ec>
 800a57e:	2b08      	cmp	r3, #8
 800a580:	f103 0301 	add.w	r3, r3, #1
 800a584:	dc03      	bgt.n	800a58e <_strtod_l+0x246>
 800a586:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a588:	434e      	muls	r6, r1
 800a58a:	960a      	str	r6, [sp, #40]	@ 0x28
 800a58c:	e7e7      	b.n	800a55e <_strtod_l+0x216>
 800a58e:	2b10      	cmp	r3, #16
 800a590:	bfde      	ittt	le
 800a592:	9e08      	ldrle	r6, [sp, #32]
 800a594:	434e      	mulle	r6, r1
 800a596:	9608      	strle	r6, [sp, #32]
 800a598:	e7e1      	b.n	800a55e <_strtod_l+0x216>
 800a59a:	280f      	cmp	r0, #15
 800a59c:	dceb      	bgt.n	800a576 <_strtod_l+0x22e>
 800a59e:	9808      	ldr	r0, [sp, #32]
 800a5a0:	230a      	movs	r3, #10
 800a5a2:	fb03 2300 	mla	r3, r3, r0, r2
 800a5a6:	9308      	str	r3, [sp, #32]
 800a5a8:	e7e5      	b.n	800a576 <_strtod_l+0x22e>
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5ae:	1c50      	adds	r0, r2, #1
 800a5b0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a5b2:	7852      	ldrb	r2, [r2, #1]
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	460d      	mov	r5, r1
 800a5b8:	e7b1      	b.n	800a51e <_strtod_l+0x1d6>
 800a5ba:	f04f 0900 	mov.w	r9, #0
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e77d      	b.n	800a4be <_strtod_l+0x176>
 800a5c2:	f04f 0c00 	mov.w	ip, #0
 800a5c6:	1ca2      	adds	r2, r4, #2
 800a5c8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5ca:	78a2      	ldrb	r2, [r4, #2]
 800a5cc:	e785      	b.n	800a4da <_strtod_l+0x192>
 800a5ce:	f04f 0c01 	mov.w	ip, #1
 800a5d2:	e7f8      	b.n	800a5c6 <_strtod_l+0x27e>
 800a5d4:	0800ff44 	.word	0x0800ff44
 800a5d8:	0800ff2c 	.word	0x0800ff2c
 800a5dc:	7ff00000 	.word	0x7ff00000
 800a5e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5e2:	1c51      	adds	r1, r2, #1
 800a5e4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a5e6:	7852      	ldrb	r2, [r2, #1]
 800a5e8:	2a30      	cmp	r2, #48	@ 0x30
 800a5ea:	d0f9      	beq.n	800a5e0 <_strtod_l+0x298>
 800a5ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a5f0:	2908      	cmp	r1, #8
 800a5f2:	f63f af78 	bhi.w	800a4e6 <_strtod_l+0x19e>
 800a5f6:	3a30      	subs	r2, #48	@ 0x30
 800a5f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a5fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a5fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a5fe:	f04f 080a 	mov.w	r8, #10
 800a602:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a604:	1c56      	adds	r6, r2, #1
 800a606:	9619      	str	r6, [sp, #100]	@ 0x64
 800a608:	7852      	ldrb	r2, [r2, #1]
 800a60a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a60e:	f1be 0f09 	cmp.w	lr, #9
 800a612:	d939      	bls.n	800a688 <_strtod_l+0x340>
 800a614:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a616:	1a76      	subs	r6, r6, r1
 800a618:	2e08      	cmp	r6, #8
 800a61a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a61e:	dc03      	bgt.n	800a628 <_strtod_l+0x2e0>
 800a620:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a622:	4588      	cmp	r8, r1
 800a624:	bfa8      	it	ge
 800a626:	4688      	movge	r8, r1
 800a628:	f1bc 0f00 	cmp.w	ip, #0
 800a62c:	d001      	beq.n	800a632 <_strtod_l+0x2ea>
 800a62e:	f1c8 0800 	rsb	r8, r8, #0
 800a632:	2d00      	cmp	r5, #0
 800a634:	d14e      	bne.n	800a6d4 <_strtod_l+0x38c>
 800a636:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a638:	4308      	orrs	r0, r1
 800a63a:	f47f aebe 	bne.w	800a3ba <_strtod_l+0x72>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f47f aed6 	bne.w	800a3f0 <_strtod_l+0xa8>
 800a644:	2a69      	cmp	r2, #105	@ 0x69
 800a646:	d028      	beq.n	800a69a <_strtod_l+0x352>
 800a648:	dc25      	bgt.n	800a696 <_strtod_l+0x34e>
 800a64a:	2a49      	cmp	r2, #73	@ 0x49
 800a64c:	d025      	beq.n	800a69a <_strtod_l+0x352>
 800a64e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a650:	f47f aece 	bne.w	800a3f0 <_strtod_l+0xa8>
 800a654:	499b      	ldr	r1, [pc, #620]	@ (800a8c4 <_strtod_l+0x57c>)
 800a656:	a819      	add	r0, sp, #100	@ 0x64
 800a658:	f002 fe42 	bl	800d2e0 <__match>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f43f aec7 	beq.w	800a3f0 <_strtod_l+0xa8>
 800a662:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	2b28      	cmp	r3, #40	@ 0x28
 800a668:	d12e      	bne.n	800a6c8 <_strtod_l+0x380>
 800a66a:	4997      	ldr	r1, [pc, #604]	@ (800a8c8 <_strtod_l+0x580>)
 800a66c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a66e:	a819      	add	r0, sp, #100	@ 0x64
 800a670:	f002 fe4a 	bl	800d308 <__hexnan>
 800a674:	2805      	cmp	r0, #5
 800a676:	d127      	bne.n	800a6c8 <_strtod_l+0x380>
 800a678:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a67a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a67e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a682:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a686:	e698      	b.n	800a3ba <_strtod_l+0x72>
 800a688:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a68a:	fb08 2101 	mla	r1, r8, r1, r2
 800a68e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a692:	920e      	str	r2, [sp, #56]	@ 0x38
 800a694:	e7b5      	b.n	800a602 <_strtod_l+0x2ba>
 800a696:	2a6e      	cmp	r2, #110	@ 0x6e
 800a698:	e7da      	b.n	800a650 <_strtod_l+0x308>
 800a69a:	498c      	ldr	r1, [pc, #560]	@ (800a8cc <_strtod_l+0x584>)
 800a69c:	a819      	add	r0, sp, #100	@ 0x64
 800a69e:	f002 fe1f 	bl	800d2e0 <__match>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f43f aea4 	beq.w	800a3f0 <_strtod_l+0xa8>
 800a6a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6aa:	4989      	ldr	r1, [pc, #548]	@ (800a8d0 <_strtod_l+0x588>)
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	a819      	add	r0, sp, #100	@ 0x64
 800a6b0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a6b2:	f002 fe15 	bl	800d2e0 <__match>
 800a6b6:	b910      	cbnz	r0, 800a6be <_strtod_l+0x376>
 800a6b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6ba:	3301      	adds	r3, #1
 800a6bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a6be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a8e0 <_strtod_l+0x598>
 800a6c2:	f04f 0a00 	mov.w	sl, #0
 800a6c6:	e678      	b.n	800a3ba <_strtod_l+0x72>
 800a6c8:	4882      	ldr	r0, [pc, #520]	@ (800a8d4 <_strtod_l+0x58c>)
 800a6ca:	f001 fcd9 	bl	800c080 <nan>
 800a6ce:	ec5b ab10 	vmov	sl, fp, d0
 800a6d2:	e672      	b.n	800a3ba <_strtod_l+0x72>
 800a6d4:	eba8 0309 	sub.w	r3, r8, r9
 800a6d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a6da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6dc:	2f00      	cmp	r7, #0
 800a6de:	bf08      	it	eq
 800a6e0:	462f      	moveq	r7, r5
 800a6e2:	2d10      	cmp	r5, #16
 800a6e4:	462c      	mov	r4, r5
 800a6e6:	bfa8      	it	ge
 800a6e8:	2410      	movge	r4, #16
 800a6ea:	f7f5 ff0b 	bl	8000504 <__aeabi_ui2d>
 800a6ee:	2d09      	cmp	r5, #9
 800a6f0:	4682      	mov	sl, r0
 800a6f2:	468b      	mov	fp, r1
 800a6f4:	dc13      	bgt.n	800a71e <_strtod_l+0x3d6>
 800a6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f43f ae5e 	beq.w	800a3ba <_strtod_l+0x72>
 800a6fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a700:	dd78      	ble.n	800a7f4 <_strtod_l+0x4ac>
 800a702:	2b16      	cmp	r3, #22
 800a704:	dc5f      	bgt.n	800a7c6 <_strtod_l+0x47e>
 800a706:	4974      	ldr	r1, [pc, #464]	@ (800a8d8 <_strtod_l+0x590>)
 800a708:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a70c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a710:	4652      	mov	r2, sl
 800a712:	465b      	mov	r3, fp
 800a714:	f7f5 ff70 	bl	80005f8 <__aeabi_dmul>
 800a718:	4682      	mov	sl, r0
 800a71a:	468b      	mov	fp, r1
 800a71c:	e64d      	b.n	800a3ba <_strtod_l+0x72>
 800a71e:	4b6e      	ldr	r3, [pc, #440]	@ (800a8d8 <_strtod_l+0x590>)
 800a720:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a724:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a728:	f7f5 ff66 	bl	80005f8 <__aeabi_dmul>
 800a72c:	4682      	mov	sl, r0
 800a72e:	9808      	ldr	r0, [sp, #32]
 800a730:	468b      	mov	fp, r1
 800a732:	f7f5 fee7 	bl	8000504 <__aeabi_ui2d>
 800a736:	4602      	mov	r2, r0
 800a738:	460b      	mov	r3, r1
 800a73a:	4650      	mov	r0, sl
 800a73c:	4659      	mov	r1, fp
 800a73e:	f7f5 fda5 	bl	800028c <__adddf3>
 800a742:	2d0f      	cmp	r5, #15
 800a744:	4682      	mov	sl, r0
 800a746:	468b      	mov	fp, r1
 800a748:	ddd5      	ble.n	800a6f6 <_strtod_l+0x3ae>
 800a74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a74c:	1b2c      	subs	r4, r5, r4
 800a74e:	441c      	add	r4, r3
 800a750:	2c00      	cmp	r4, #0
 800a752:	f340 8096 	ble.w	800a882 <_strtod_l+0x53a>
 800a756:	f014 030f 	ands.w	r3, r4, #15
 800a75a:	d00a      	beq.n	800a772 <_strtod_l+0x42a>
 800a75c:	495e      	ldr	r1, [pc, #376]	@ (800a8d8 <_strtod_l+0x590>)
 800a75e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a762:	4652      	mov	r2, sl
 800a764:	465b      	mov	r3, fp
 800a766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a76a:	f7f5 ff45 	bl	80005f8 <__aeabi_dmul>
 800a76e:	4682      	mov	sl, r0
 800a770:	468b      	mov	fp, r1
 800a772:	f034 040f 	bics.w	r4, r4, #15
 800a776:	d073      	beq.n	800a860 <_strtod_l+0x518>
 800a778:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a77c:	dd48      	ble.n	800a810 <_strtod_l+0x4c8>
 800a77e:	2400      	movs	r4, #0
 800a780:	46a0      	mov	r8, r4
 800a782:	940a      	str	r4, [sp, #40]	@ 0x28
 800a784:	46a1      	mov	r9, r4
 800a786:	9a05      	ldr	r2, [sp, #20]
 800a788:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a8e0 <_strtod_l+0x598>
 800a78c:	2322      	movs	r3, #34	@ 0x22
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	f04f 0a00 	mov.w	sl, #0
 800a794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a796:	2b00      	cmp	r3, #0
 800a798:	f43f ae0f 	beq.w	800a3ba <_strtod_l+0x72>
 800a79c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a79e:	9805      	ldr	r0, [sp, #20]
 800a7a0:	f002 ff56 	bl	800d650 <_Bfree>
 800a7a4:	9805      	ldr	r0, [sp, #20]
 800a7a6:	4649      	mov	r1, r9
 800a7a8:	f002 ff52 	bl	800d650 <_Bfree>
 800a7ac:	9805      	ldr	r0, [sp, #20]
 800a7ae:	4641      	mov	r1, r8
 800a7b0:	f002 ff4e 	bl	800d650 <_Bfree>
 800a7b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a7b6:	9805      	ldr	r0, [sp, #20]
 800a7b8:	f002 ff4a 	bl	800d650 <_Bfree>
 800a7bc:	9805      	ldr	r0, [sp, #20]
 800a7be:	4621      	mov	r1, r4
 800a7c0:	f002 ff46 	bl	800d650 <_Bfree>
 800a7c4:	e5f9      	b.n	800a3ba <_strtod_l+0x72>
 800a7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	dbbc      	blt.n	800a74a <_strtod_l+0x402>
 800a7d0:	4c41      	ldr	r4, [pc, #260]	@ (800a8d8 <_strtod_l+0x590>)
 800a7d2:	f1c5 050f 	rsb	r5, r5, #15
 800a7d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a7da:	4652      	mov	r2, sl
 800a7dc:	465b      	mov	r3, fp
 800a7de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e2:	f7f5 ff09 	bl	80005f8 <__aeabi_dmul>
 800a7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e8:	1b5d      	subs	r5, r3, r5
 800a7ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a7ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a7f2:	e78f      	b.n	800a714 <_strtod_l+0x3cc>
 800a7f4:	3316      	adds	r3, #22
 800a7f6:	dba8      	blt.n	800a74a <_strtod_l+0x402>
 800a7f8:	4b37      	ldr	r3, [pc, #220]	@ (800a8d8 <_strtod_l+0x590>)
 800a7fa:	eba9 0808 	sub.w	r8, r9, r8
 800a7fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a802:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a806:	4650      	mov	r0, sl
 800a808:	4659      	mov	r1, fp
 800a80a:	f7f6 f81f 	bl	800084c <__aeabi_ddiv>
 800a80e:	e783      	b.n	800a718 <_strtod_l+0x3d0>
 800a810:	4b32      	ldr	r3, [pc, #200]	@ (800a8dc <_strtod_l+0x594>)
 800a812:	9308      	str	r3, [sp, #32]
 800a814:	2300      	movs	r3, #0
 800a816:	1124      	asrs	r4, r4, #4
 800a818:	4650      	mov	r0, sl
 800a81a:	4659      	mov	r1, fp
 800a81c:	461e      	mov	r6, r3
 800a81e:	2c01      	cmp	r4, #1
 800a820:	dc21      	bgt.n	800a866 <_strtod_l+0x51e>
 800a822:	b10b      	cbz	r3, 800a828 <_strtod_l+0x4e0>
 800a824:	4682      	mov	sl, r0
 800a826:	468b      	mov	fp, r1
 800a828:	492c      	ldr	r1, [pc, #176]	@ (800a8dc <_strtod_l+0x594>)
 800a82a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a82e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a832:	4652      	mov	r2, sl
 800a834:	465b      	mov	r3, fp
 800a836:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a83a:	f7f5 fedd 	bl	80005f8 <__aeabi_dmul>
 800a83e:	4b28      	ldr	r3, [pc, #160]	@ (800a8e0 <_strtod_l+0x598>)
 800a840:	460a      	mov	r2, r1
 800a842:	400b      	ands	r3, r1
 800a844:	4927      	ldr	r1, [pc, #156]	@ (800a8e4 <_strtod_l+0x59c>)
 800a846:	428b      	cmp	r3, r1
 800a848:	4682      	mov	sl, r0
 800a84a:	d898      	bhi.n	800a77e <_strtod_l+0x436>
 800a84c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a850:	428b      	cmp	r3, r1
 800a852:	bf86      	itte	hi
 800a854:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a8e8 <_strtod_l+0x5a0>
 800a858:	f04f 3aff 	movhi.w	sl, #4294967295
 800a85c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a860:	2300      	movs	r3, #0
 800a862:	9308      	str	r3, [sp, #32]
 800a864:	e07a      	b.n	800a95c <_strtod_l+0x614>
 800a866:	07e2      	lsls	r2, r4, #31
 800a868:	d505      	bpl.n	800a876 <_strtod_l+0x52e>
 800a86a:	9b08      	ldr	r3, [sp, #32]
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f7f5 fec2 	bl	80005f8 <__aeabi_dmul>
 800a874:	2301      	movs	r3, #1
 800a876:	9a08      	ldr	r2, [sp, #32]
 800a878:	3208      	adds	r2, #8
 800a87a:	3601      	adds	r6, #1
 800a87c:	1064      	asrs	r4, r4, #1
 800a87e:	9208      	str	r2, [sp, #32]
 800a880:	e7cd      	b.n	800a81e <_strtod_l+0x4d6>
 800a882:	d0ed      	beq.n	800a860 <_strtod_l+0x518>
 800a884:	4264      	negs	r4, r4
 800a886:	f014 020f 	ands.w	r2, r4, #15
 800a88a:	d00a      	beq.n	800a8a2 <_strtod_l+0x55a>
 800a88c:	4b12      	ldr	r3, [pc, #72]	@ (800a8d8 <_strtod_l+0x590>)
 800a88e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a892:	4650      	mov	r0, sl
 800a894:	4659      	mov	r1, fp
 800a896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89a:	f7f5 ffd7 	bl	800084c <__aeabi_ddiv>
 800a89e:	4682      	mov	sl, r0
 800a8a0:	468b      	mov	fp, r1
 800a8a2:	1124      	asrs	r4, r4, #4
 800a8a4:	d0dc      	beq.n	800a860 <_strtod_l+0x518>
 800a8a6:	2c1f      	cmp	r4, #31
 800a8a8:	dd20      	ble.n	800a8ec <_strtod_l+0x5a4>
 800a8aa:	2400      	movs	r4, #0
 800a8ac:	46a0      	mov	r8, r4
 800a8ae:	940a      	str	r4, [sp, #40]	@ 0x28
 800a8b0:	46a1      	mov	r9, r4
 800a8b2:	9a05      	ldr	r2, [sp, #20]
 800a8b4:	2322      	movs	r3, #34	@ 0x22
 800a8b6:	f04f 0a00 	mov.w	sl, #0
 800a8ba:	f04f 0b00 	mov.w	fp, #0
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	e768      	b.n	800a794 <_strtod_l+0x44c>
 800a8c2:	bf00      	nop
 800a8c4:	0800ff8d 	.word	0x0800ff8d
 800a8c8:	0800ff30 	.word	0x0800ff30
 800a8cc:	0800ff85 	.word	0x0800ff85
 800a8d0:	0800ffc4 	.word	0x0800ffc4
 800a8d4:	08010355 	.word	0x08010355
 800a8d8:	08010140 	.word	0x08010140
 800a8dc:	08010118 	.word	0x08010118
 800a8e0:	7ff00000 	.word	0x7ff00000
 800a8e4:	7ca00000 	.word	0x7ca00000
 800a8e8:	7fefffff 	.word	0x7fefffff
 800a8ec:	f014 0310 	ands.w	r3, r4, #16
 800a8f0:	bf18      	it	ne
 800a8f2:	236a      	movne	r3, #106	@ 0x6a
 800a8f4:	4ea9      	ldr	r6, [pc, #676]	@ (800ab9c <_strtod_l+0x854>)
 800a8f6:	9308      	str	r3, [sp, #32]
 800a8f8:	4650      	mov	r0, sl
 800a8fa:	4659      	mov	r1, fp
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	07e2      	lsls	r2, r4, #31
 800a900:	d504      	bpl.n	800a90c <_strtod_l+0x5c4>
 800a902:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a906:	f7f5 fe77 	bl	80005f8 <__aeabi_dmul>
 800a90a:	2301      	movs	r3, #1
 800a90c:	1064      	asrs	r4, r4, #1
 800a90e:	f106 0608 	add.w	r6, r6, #8
 800a912:	d1f4      	bne.n	800a8fe <_strtod_l+0x5b6>
 800a914:	b10b      	cbz	r3, 800a91a <_strtod_l+0x5d2>
 800a916:	4682      	mov	sl, r0
 800a918:	468b      	mov	fp, r1
 800a91a:	9b08      	ldr	r3, [sp, #32]
 800a91c:	b1b3      	cbz	r3, 800a94c <_strtod_l+0x604>
 800a91e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a922:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a926:	2b00      	cmp	r3, #0
 800a928:	4659      	mov	r1, fp
 800a92a:	dd0f      	ble.n	800a94c <_strtod_l+0x604>
 800a92c:	2b1f      	cmp	r3, #31
 800a92e:	dd55      	ble.n	800a9dc <_strtod_l+0x694>
 800a930:	2b34      	cmp	r3, #52	@ 0x34
 800a932:	bfde      	ittt	le
 800a934:	f04f 33ff 	movle.w	r3, #4294967295
 800a938:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a93c:	4093      	lslle	r3, r2
 800a93e:	f04f 0a00 	mov.w	sl, #0
 800a942:	bfcc      	ite	gt
 800a944:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a948:	ea03 0b01 	andle.w	fp, r3, r1
 800a94c:	2200      	movs	r2, #0
 800a94e:	2300      	movs	r3, #0
 800a950:	4650      	mov	r0, sl
 800a952:	4659      	mov	r1, fp
 800a954:	f7f6 f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d1a6      	bne.n	800a8aa <_strtod_l+0x562>
 800a95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a962:	9805      	ldr	r0, [sp, #20]
 800a964:	462b      	mov	r3, r5
 800a966:	463a      	mov	r2, r7
 800a968:	f002 feda 	bl	800d720 <__s2b>
 800a96c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a96e:	2800      	cmp	r0, #0
 800a970:	f43f af05 	beq.w	800a77e <_strtod_l+0x436>
 800a974:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a976:	2a00      	cmp	r2, #0
 800a978:	eba9 0308 	sub.w	r3, r9, r8
 800a97c:	bfa8      	it	ge
 800a97e:	2300      	movge	r3, #0
 800a980:	9312      	str	r3, [sp, #72]	@ 0x48
 800a982:	2400      	movs	r4, #0
 800a984:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a988:	9316      	str	r3, [sp, #88]	@ 0x58
 800a98a:	46a0      	mov	r8, r4
 800a98c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a98e:	9805      	ldr	r0, [sp, #20]
 800a990:	6859      	ldr	r1, [r3, #4]
 800a992:	f002 fe1d 	bl	800d5d0 <_Balloc>
 800a996:	4681      	mov	r9, r0
 800a998:	2800      	cmp	r0, #0
 800a99a:	f43f aef4 	beq.w	800a786 <_strtod_l+0x43e>
 800a99e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a9a0:	691a      	ldr	r2, [r3, #16]
 800a9a2:	3202      	adds	r2, #2
 800a9a4:	f103 010c 	add.w	r1, r3, #12
 800a9a8:	0092      	lsls	r2, r2, #2
 800a9aa:	300c      	adds	r0, #12
 800a9ac:	f001 fb57 	bl	800c05e <memcpy>
 800a9b0:	ec4b ab10 	vmov	d0, sl, fp
 800a9b4:	9805      	ldr	r0, [sp, #20]
 800a9b6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a9b8:	a91b      	add	r1, sp, #108	@ 0x6c
 800a9ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a9be:	f003 f9eb 	bl	800dd98 <__d2b>
 800a9c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	f43f aede 	beq.w	800a786 <_strtod_l+0x43e>
 800a9ca:	9805      	ldr	r0, [sp, #20]
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	f002 ff3d 	bl	800d84c <__i2b>
 800a9d2:	4680      	mov	r8, r0
 800a9d4:	b948      	cbnz	r0, 800a9ea <_strtod_l+0x6a2>
 800a9d6:	f04f 0800 	mov.w	r8, #0
 800a9da:	e6d4      	b.n	800a786 <_strtod_l+0x43e>
 800a9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e4:	ea03 0a0a 	and.w	sl, r3, sl
 800a9e8:	e7b0      	b.n	800a94c <_strtod_l+0x604>
 800a9ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a9ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	bfab      	itete	ge
 800a9f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a9f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a9f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a9f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a9fa:	bfac      	ite	ge
 800a9fc:	18ef      	addge	r7, r5, r3
 800a9fe:	1b5e      	sublt	r6, r3, r5
 800aa00:	9b08      	ldr	r3, [sp, #32]
 800aa02:	1aed      	subs	r5, r5, r3
 800aa04:	4415      	add	r5, r2
 800aa06:	4b66      	ldr	r3, [pc, #408]	@ (800aba0 <_strtod_l+0x858>)
 800aa08:	3d01      	subs	r5, #1
 800aa0a:	429d      	cmp	r5, r3
 800aa0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aa10:	da50      	bge.n	800aab4 <_strtod_l+0x76c>
 800aa12:	1b5b      	subs	r3, r3, r5
 800aa14:	2b1f      	cmp	r3, #31
 800aa16:	eba2 0203 	sub.w	r2, r2, r3
 800aa1a:	f04f 0101 	mov.w	r1, #1
 800aa1e:	dc3d      	bgt.n	800aa9c <_strtod_l+0x754>
 800aa20:	fa01 f303 	lsl.w	r3, r1, r3
 800aa24:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aa26:	2300      	movs	r3, #0
 800aa28:	9310      	str	r3, [sp, #64]	@ 0x40
 800aa2a:	18bd      	adds	r5, r7, r2
 800aa2c:	9b08      	ldr	r3, [sp, #32]
 800aa2e:	42af      	cmp	r7, r5
 800aa30:	4416      	add	r6, r2
 800aa32:	441e      	add	r6, r3
 800aa34:	463b      	mov	r3, r7
 800aa36:	bfa8      	it	ge
 800aa38:	462b      	movge	r3, r5
 800aa3a:	42b3      	cmp	r3, r6
 800aa3c:	bfa8      	it	ge
 800aa3e:	4633      	movge	r3, r6
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bfc2      	ittt	gt
 800aa44:	1aed      	subgt	r5, r5, r3
 800aa46:	1af6      	subgt	r6, r6, r3
 800aa48:	1aff      	subgt	r7, r7, r3
 800aa4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	dd16      	ble.n	800aa7e <_strtod_l+0x736>
 800aa50:	4641      	mov	r1, r8
 800aa52:	9805      	ldr	r0, [sp, #20]
 800aa54:	461a      	mov	r2, r3
 800aa56:	f002 ffb9 	bl	800d9cc <__pow5mult>
 800aa5a:	4680      	mov	r8, r0
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	d0ba      	beq.n	800a9d6 <_strtod_l+0x68e>
 800aa60:	4601      	mov	r1, r0
 800aa62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800aa64:	9805      	ldr	r0, [sp, #20]
 800aa66:	f002 ff07 	bl	800d878 <__multiply>
 800aa6a:	900e      	str	r0, [sp, #56]	@ 0x38
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	f43f ae8a 	beq.w	800a786 <_strtod_l+0x43e>
 800aa72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa74:	9805      	ldr	r0, [sp, #20]
 800aa76:	f002 fdeb 	bl	800d650 <_Bfree>
 800aa7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa7c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa7e:	2d00      	cmp	r5, #0
 800aa80:	dc1d      	bgt.n	800aabe <_strtod_l+0x776>
 800aa82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	dd23      	ble.n	800aad0 <_strtod_l+0x788>
 800aa88:	4649      	mov	r1, r9
 800aa8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800aa8c:	9805      	ldr	r0, [sp, #20]
 800aa8e:	f002 ff9d 	bl	800d9cc <__pow5mult>
 800aa92:	4681      	mov	r9, r0
 800aa94:	b9e0      	cbnz	r0, 800aad0 <_strtod_l+0x788>
 800aa96:	f04f 0900 	mov.w	r9, #0
 800aa9a:	e674      	b.n	800a786 <_strtod_l+0x43e>
 800aa9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800aaa0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800aaa4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800aaa8:	35e2      	adds	r5, #226	@ 0xe2
 800aaaa:	fa01 f305 	lsl.w	r3, r1, r5
 800aaae:	9310      	str	r3, [sp, #64]	@ 0x40
 800aab0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800aab2:	e7ba      	b.n	800aa2a <_strtod_l+0x6e2>
 800aab4:	2300      	movs	r3, #0
 800aab6:	9310      	str	r3, [sp, #64]	@ 0x40
 800aab8:	2301      	movs	r3, #1
 800aaba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aabc:	e7b5      	b.n	800aa2a <_strtod_l+0x6e2>
 800aabe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aac0:	9805      	ldr	r0, [sp, #20]
 800aac2:	462a      	mov	r2, r5
 800aac4:	f002 ffdc 	bl	800da80 <__lshift>
 800aac8:	901a      	str	r0, [sp, #104]	@ 0x68
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d1d9      	bne.n	800aa82 <_strtod_l+0x73a>
 800aace:	e65a      	b.n	800a786 <_strtod_l+0x43e>
 800aad0:	2e00      	cmp	r6, #0
 800aad2:	dd07      	ble.n	800aae4 <_strtod_l+0x79c>
 800aad4:	4649      	mov	r1, r9
 800aad6:	9805      	ldr	r0, [sp, #20]
 800aad8:	4632      	mov	r2, r6
 800aada:	f002 ffd1 	bl	800da80 <__lshift>
 800aade:	4681      	mov	r9, r0
 800aae0:	2800      	cmp	r0, #0
 800aae2:	d0d8      	beq.n	800aa96 <_strtod_l+0x74e>
 800aae4:	2f00      	cmp	r7, #0
 800aae6:	dd08      	ble.n	800aafa <_strtod_l+0x7b2>
 800aae8:	4641      	mov	r1, r8
 800aaea:	9805      	ldr	r0, [sp, #20]
 800aaec:	463a      	mov	r2, r7
 800aaee:	f002 ffc7 	bl	800da80 <__lshift>
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	f43f ae46 	beq.w	800a786 <_strtod_l+0x43e>
 800aafa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aafc:	9805      	ldr	r0, [sp, #20]
 800aafe:	464a      	mov	r2, r9
 800ab00:	f003 f846 	bl	800db90 <__mdiff>
 800ab04:	4604      	mov	r4, r0
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f43f ae3d 	beq.w	800a786 <_strtod_l+0x43e>
 800ab0c:	68c3      	ldr	r3, [r0, #12]
 800ab0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ab10:	2300      	movs	r3, #0
 800ab12:	60c3      	str	r3, [r0, #12]
 800ab14:	4641      	mov	r1, r8
 800ab16:	f003 f81f 	bl	800db58 <__mcmp>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	da46      	bge.n	800abac <_strtod_l+0x864>
 800ab1e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab20:	ea53 030a 	orrs.w	r3, r3, sl
 800ab24:	d16c      	bne.n	800ac00 <_strtod_l+0x8b8>
 800ab26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d168      	bne.n	800ac00 <_strtod_l+0x8b8>
 800ab2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab32:	0d1b      	lsrs	r3, r3, #20
 800ab34:	051b      	lsls	r3, r3, #20
 800ab36:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab3a:	d961      	bls.n	800ac00 <_strtod_l+0x8b8>
 800ab3c:	6963      	ldr	r3, [r4, #20]
 800ab3e:	b913      	cbnz	r3, 800ab46 <_strtod_l+0x7fe>
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	dd5c      	ble.n	800ac00 <_strtod_l+0x8b8>
 800ab46:	4621      	mov	r1, r4
 800ab48:	2201      	movs	r2, #1
 800ab4a:	9805      	ldr	r0, [sp, #20]
 800ab4c:	f002 ff98 	bl	800da80 <__lshift>
 800ab50:	4641      	mov	r1, r8
 800ab52:	4604      	mov	r4, r0
 800ab54:	f003 f800 	bl	800db58 <__mcmp>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	dd51      	ble.n	800ac00 <_strtod_l+0x8b8>
 800ab5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ab60:	9a08      	ldr	r2, [sp, #32]
 800ab62:	0d1b      	lsrs	r3, r3, #20
 800ab64:	051b      	lsls	r3, r3, #20
 800ab66:	2a00      	cmp	r2, #0
 800ab68:	d06b      	beq.n	800ac42 <_strtod_l+0x8fa>
 800ab6a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ab6e:	d868      	bhi.n	800ac42 <_strtod_l+0x8fa>
 800ab70:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ab74:	f67f ae9d 	bls.w	800a8b2 <_strtod_l+0x56a>
 800ab78:	4b0a      	ldr	r3, [pc, #40]	@ (800aba4 <_strtod_l+0x85c>)
 800ab7a:	4650      	mov	r0, sl
 800ab7c:	4659      	mov	r1, fp
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f7f5 fd3a 	bl	80005f8 <__aeabi_dmul>
 800ab84:	4b08      	ldr	r3, [pc, #32]	@ (800aba8 <_strtod_l+0x860>)
 800ab86:	400b      	ands	r3, r1
 800ab88:	4682      	mov	sl, r0
 800ab8a:	468b      	mov	fp, r1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	f47f ae05 	bne.w	800a79c <_strtod_l+0x454>
 800ab92:	9a05      	ldr	r2, [sp, #20]
 800ab94:	2322      	movs	r3, #34	@ 0x22
 800ab96:	6013      	str	r3, [r2, #0]
 800ab98:	e600      	b.n	800a79c <_strtod_l+0x454>
 800ab9a:	bf00      	nop
 800ab9c:	0800ff58 	.word	0x0800ff58
 800aba0:	fffffc02 	.word	0xfffffc02
 800aba4:	39500000 	.word	0x39500000
 800aba8:	7ff00000 	.word	0x7ff00000
 800abac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800abb0:	d165      	bne.n	800ac7e <_strtod_l+0x936>
 800abb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800abb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abb8:	b35a      	cbz	r2, 800ac12 <_strtod_l+0x8ca>
 800abba:	4a9f      	ldr	r2, [pc, #636]	@ (800ae38 <_strtod_l+0xaf0>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d12b      	bne.n	800ac18 <_strtod_l+0x8d0>
 800abc0:	9b08      	ldr	r3, [sp, #32]
 800abc2:	4651      	mov	r1, sl
 800abc4:	b303      	cbz	r3, 800ac08 <_strtod_l+0x8c0>
 800abc6:	4b9d      	ldr	r3, [pc, #628]	@ (800ae3c <_strtod_l+0xaf4>)
 800abc8:	465a      	mov	r2, fp
 800abca:	4013      	ands	r3, r2
 800abcc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800abd0:	f04f 32ff 	mov.w	r2, #4294967295
 800abd4:	d81b      	bhi.n	800ac0e <_strtod_l+0x8c6>
 800abd6:	0d1b      	lsrs	r3, r3, #20
 800abd8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800abdc:	fa02 f303 	lsl.w	r3, r2, r3
 800abe0:	4299      	cmp	r1, r3
 800abe2:	d119      	bne.n	800ac18 <_strtod_l+0x8d0>
 800abe4:	4b96      	ldr	r3, [pc, #600]	@ (800ae40 <_strtod_l+0xaf8>)
 800abe6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abe8:	429a      	cmp	r2, r3
 800abea:	d102      	bne.n	800abf2 <_strtod_l+0x8aa>
 800abec:	3101      	adds	r1, #1
 800abee:	f43f adca 	beq.w	800a786 <_strtod_l+0x43e>
 800abf2:	4b92      	ldr	r3, [pc, #584]	@ (800ae3c <_strtod_l+0xaf4>)
 800abf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abf6:	401a      	ands	r2, r3
 800abf8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800abfc:	f04f 0a00 	mov.w	sl, #0
 800ac00:	9b08      	ldr	r3, [sp, #32]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1b8      	bne.n	800ab78 <_strtod_l+0x830>
 800ac06:	e5c9      	b.n	800a79c <_strtod_l+0x454>
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	e7e8      	b.n	800abe0 <_strtod_l+0x898>
 800ac0e:	4613      	mov	r3, r2
 800ac10:	e7e6      	b.n	800abe0 <_strtod_l+0x898>
 800ac12:	ea53 030a 	orrs.w	r3, r3, sl
 800ac16:	d0a1      	beq.n	800ab5c <_strtod_l+0x814>
 800ac18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ac1a:	b1db      	cbz	r3, 800ac54 <_strtod_l+0x90c>
 800ac1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac1e:	4213      	tst	r3, r2
 800ac20:	d0ee      	beq.n	800ac00 <_strtod_l+0x8b8>
 800ac22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac24:	9a08      	ldr	r2, [sp, #32]
 800ac26:	4650      	mov	r0, sl
 800ac28:	4659      	mov	r1, fp
 800ac2a:	b1bb      	cbz	r3, 800ac5c <_strtod_l+0x914>
 800ac2c:	f7ff fb6b 	bl	800a306 <sulp>
 800ac30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac34:	ec53 2b10 	vmov	r2, r3, d0
 800ac38:	f7f5 fb28 	bl	800028c <__adddf3>
 800ac3c:	4682      	mov	sl, r0
 800ac3e:	468b      	mov	fp, r1
 800ac40:	e7de      	b.n	800ac00 <_strtod_l+0x8b8>
 800ac42:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ac46:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ac4a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ac4e:	f04f 3aff 	mov.w	sl, #4294967295
 800ac52:	e7d5      	b.n	800ac00 <_strtod_l+0x8b8>
 800ac54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ac56:	ea13 0f0a 	tst.w	r3, sl
 800ac5a:	e7e1      	b.n	800ac20 <_strtod_l+0x8d8>
 800ac5c:	f7ff fb53 	bl	800a306 <sulp>
 800ac60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac64:	ec53 2b10 	vmov	r2, r3, d0
 800ac68:	f7f5 fb0e 	bl	8000288 <__aeabi_dsub>
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	2300      	movs	r3, #0
 800ac70:	4682      	mov	sl, r0
 800ac72:	468b      	mov	fp, r1
 800ac74:	f7f5 ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d0c1      	beq.n	800ac00 <_strtod_l+0x8b8>
 800ac7c:	e619      	b.n	800a8b2 <_strtod_l+0x56a>
 800ac7e:	4641      	mov	r1, r8
 800ac80:	4620      	mov	r0, r4
 800ac82:	f003 f8e1 	bl	800de48 <__ratio>
 800ac86:	ec57 6b10 	vmov	r6, r7, d0
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ac90:	4630      	mov	r0, r6
 800ac92:	4639      	mov	r1, r7
 800ac94:	f7f5 ff2c 	bl	8000af0 <__aeabi_dcmple>
 800ac98:	2800      	cmp	r0, #0
 800ac9a:	d06f      	beq.n	800ad7c <_strtod_l+0xa34>
 800ac9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d17a      	bne.n	800ad98 <_strtod_l+0xa50>
 800aca2:	f1ba 0f00 	cmp.w	sl, #0
 800aca6:	d158      	bne.n	800ad5a <_strtod_l+0xa12>
 800aca8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d15a      	bne.n	800ad68 <_strtod_l+0xa20>
 800acb2:	4b64      	ldr	r3, [pc, #400]	@ (800ae44 <_strtod_l+0xafc>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	4630      	mov	r0, r6
 800acb8:	4639      	mov	r1, r7
 800acba:	f7f5 ff0f 	bl	8000adc <__aeabi_dcmplt>
 800acbe:	2800      	cmp	r0, #0
 800acc0:	d159      	bne.n	800ad76 <_strtod_l+0xa2e>
 800acc2:	4630      	mov	r0, r6
 800acc4:	4639      	mov	r1, r7
 800acc6:	4b60      	ldr	r3, [pc, #384]	@ (800ae48 <_strtod_l+0xb00>)
 800acc8:	2200      	movs	r2, #0
 800acca:	f7f5 fc95 	bl	80005f8 <__aeabi_dmul>
 800acce:	4606      	mov	r6, r0
 800acd0:	460f      	mov	r7, r1
 800acd2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800acd6:	9606      	str	r6, [sp, #24]
 800acd8:	9307      	str	r3, [sp, #28]
 800acda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800acde:	4d57      	ldr	r5, [pc, #348]	@ (800ae3c <_strtod_l+0xaf4>)
 800ace0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ace4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ace6:	401d      	ands	r5, r3
 800ace8:	4b58      	ldr	r3, [pc, #352]	@ (800ae4c <_strtod_l+0xb04>)
 800acea:	429d      	cmp	r5, r3
 800acec:	f040 80b2 	bne.w	800ae54 <_strtod_l+0xb0c>
 800acf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800acf2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800acf6:	ec4b ab10 	vmov	d0, sl, fp
 800acfa:	f002 ffdd 	bl	800dcb8 <__ulp>
 800acfe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ad02:	ec51 0b10 	vmov	r0, r1, d0
 800ad06:	f7f5 fc77 	bl	80005f8 <__aeabi_dmul>
 800ad0a:	4652      	mov	r2, sl
 800ad0c:	465b      	mov	r3, fp
 800ad0e:	f7f5 fabd 	bl	800028c <__adddf3>
 800ad12:	460b      	mov	r3, r1
 800ad14:	4949      	ldr	r1, [pc, #292]	@ (800ae3c <_strtod_l+0xaf4>)
 800ad16:	4a4e      	ldr	r2, [pc, #312]	@ (800ae50 <_strtod_l+0xb08>)
 800ad18:	4019      	ands	r1, r3
 800ad1a:	4291      	cmp	r1, r2
 800ad1c:	4682      	mov	sl, r0
 800ad1e:	d942      	bls.n	800ada6 <_strtod_l+0xa5e>
 800ad20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad22:	4b47      	ldr	r3, [pc, #284]	@ (800ae40 <_strtod_l+0xaf8>)
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d103      	bne.n	800ad30 <_strtod_l+0x9e8>
 800ad28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	f43f ad2b 	beq.w	800a786 <_strtod_l+0x43e>
 800ad30:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ae40 <_strtod_l+0xaf8>
 800ad34:	f04f 3aff 	mov.w	sl, #4294967295
 800ad38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ad3a:	9805      	ldr	r0, [sp, #20]
 800ad3c:	f002 fc88 	bl	800d650 <_Bfree>
 800ad40:	9805      	ldr	r0, [sp, #20]
 800ad42:	4649      	mov	r1, r9
 800ad44:	f002 fc84 	bl	800d650 <_Bfree>
 800ad48:	9805      	ldr	r0, [sp, #20]
 800ad4a:	4641      	mov	r1, r8
 800ad4c:	f002 fc80 	bl	800d650 <_Bfree>
 800ad50:	9805      	ldr	r0, [sp, #20]
 800ad52:	4621      	mov	r1, r4
 800ad54:	f002 fc7c 	bl	800d650 <_Bfree>
 800ad58:	e618      	b.n	800a98c <_strtod_l+0x644>
 800ad5a:	f1ba 0f01 	cmp.w	sl, #1
 800ad5e:	d103      	bne.n	800ad68 <_strtod_l+0xa20>
 800ad60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f43f ada5 	beq.w	800a8b2 <_strtod_l+0x56a>
 800ad68:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ae18 <_strtod_l+0xad0>
 800ad6c:	4f35      	ldr	r7, [pc, #212]	@ (800ae44 <_strtod_l+0xafc>)
 800ad6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ad72:	2600      	movs	r6, #0
 800ad74:	e7b1      	b.n	800acda <_strtod_l+0x992>
 800ad76:	4f34      	ldr	r7, [pc, #208]	@ (800ae48 <_strtod_l+0xb00>)
 800ad78:	2600      	movs	r6, #0
 800ad7a:	e7aa      	b.n	800acd2 <_strtod_l+0x98a>
 800ad7c:	4b32      	ldr	r3, [pc, #200]	@ (800ae48 <_strtod_l+0xb00>)
 800ad7e:	4630      	mov	r0, r6
 800ad80:	4639      	mov	r1, r7
 800ad82:	2200      	movs	r2, #0
 800ad84:	f7f5 fc38 	bl	80005f8 <__aeabi_dmul>
 800ad88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d09f      	beq.n	800acd2 <_strtod_l+0x98a>
 800ad92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ad96:	e7a0      	b.n	800acda <_strtod_l+0x992>
 800ad98:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ae20 <_strtod_l+0xad8>
 800ad9c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ada0:	ec57 6b17 	vmov	r6, r7, d7
 800ada4:	e799      	b.n	800acda <_strtod_l+0x992>
 800ada6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800adaa:	9b08      	ldr	r3, [sp, #32]
 800adac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1c1      	bne.n	800ad38 <_strtod_l+0x9f0>
 800adb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800adb8:	0d1b      	lsrs	r3, r3, #20
 800adba:	051b      	lsls	r3, r3, #20
 800adbc:	429d      	cmp	r5, r3
 800adbe:	d1bb      	bne.n	800ad38 <_strtod_l+0x9f0>
 800adc0:	4630      	mov	r0, r6
 800adc2:	4639      	mov	r1, r7
 800adc4:	f7f5 ff78 	bl	8000cb8 <__aeabi_d2lz>
 800adc8:	f7f5 fbe8 	bl	800059c <__aeabi_l2d>
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	4630      	mov	r0, r6
 800add2:	4639      	mov	r1, r7
 800add4:	f7f5 fa58 	bl	8000288 <__aeabi_dsub>
 800add8:	460b      	mov	r3, r1
 800adda:	4602      	mov	r2, r0
 800addc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ade0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ade4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ade6:	ea46 060a 	orr.w	r6, r6, sl
 800adea:	431e      	orrs	r6, r3
 800adec:	d06f      	beq.n	800aece <_strtod_l+0xb86>
 800adee:	a30e      	add	r3, pc, #56	@ (adr r3, 800ae28 <_strtod_l+0xae0>)
 800adf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf4:	f7f5 fe72 	bl	8000adc <__aeabi_dcmplt>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	f47f accf 	bne.w	800a79c <_strtod_l+0x454>
 800adfe:	a30c      	add	r3, pc, #48	@ (adr r3, 800ae30 <_strtod_l+0xae8>)
 800ae00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae08:	f7f5 fe86 	bl	8000b18 <__aeabi_dcmpgt>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d093      	beq.n	800ad38 <_strtod_l+0x9f0>
 800ae10:	e4c4      	b.n	800a79c <_strtod_l+0x454>
 800ae12:	bf00      	nop
 800ae14:	f3af 8000 	nop.w
 800ae18:	00000000 	.word	0x00000000
 800ae1c:	bff00000 	.word	0xbff00000
 800ae20:	00000000 	.word	0x00000000
 800ae24:	3ff00000 	.word	0x3ff00000
 800ae28:	94a03595 	.word	0x94a03595
 800ae2c:	3fdfffff 	.word	0x3fdfffff
 800ae30:	35afe535 	.word	0x35afe535
 800ae34:	3fe00000 	.word	0x3fe00000
 800ae38:	000fffff 	.word	0x000fffff
 800ae3c:	7ff00000 	.word	0x7ff00000
 800ae40:	7fefffff 	.word	0x7fefffff
 800ae44:	3ff00000 	.word	0x3ff00000
 800ae48:	3fe00000 	.word	0x3fe00000
 800ae4c:	7fe00000 	.word	0x7fe00000
 800ae50:	7c9fffff 	.word	0x7c9fffff
 800ae54:	9b08      	ldr	r3, [sp, #32]
 800ae56:	b323      	cbz	r3, 800aea2 <_strtod_l+0xb5a>
 800ae58:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ae5c:	d821      	bhi.n	800aea2 <_strtod_l+0xb5a>
 800ae5e:	a328      	add	r3, pc, #160	@ (adr r3, 800af00 <_strtod_l+0xbb8>)
 800ae60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae64:	4630      	mov	r0, r6
 800ae66:	4639      	mov	r1, r7
 800ae68:	f7f5 fe42 	bl	8000af0 <__aeabi_dcmple>
 800ae6c:	b1a0      	cbz	r0, 800ae98 <_strtod_l+0xb50>
 800ae6e:	4639      	mov	r1, r7
 800ae70:	4630      	mov	r0, r6
 800ae72:	f7f5 fe99 	bl	8000ba8 <__aeabi_d2uiz>
 800ae76:	2801      	cmp	r0, #1
 800ae78:	bf38      	it	cc
 800ae7a:	2001      	movcc	r0, #1
 800ae7c:	f7f5 fb42 	bl	8000504 <__aeabi_ui2d>
 800ae80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae82:	4606      	mov	r6, r0
 800ae84:	460f      	mov	r7, r1
 800ae86:	b9fb      	cbnz	r3, 800aec8 <_strtod_l+0xb80>
 800ae88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ae8c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ae8e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ae90:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ae94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ae9a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ae9e:	1b5b      	subs	r3, r3, r5
 800aea0:	9311      	str	r3, [sp, #68]	@ 0x44
 800aea2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aea6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aeaa:	f002 ff05 	bl	800dcb8 <__ulp>
 800aeae:	4650      	mov	r0, sl
 800aeb0:	ec53 2b10 	vmov	r2, r3, d0
 800aeb4:	4659      	mov	r1, fp
 800aeb6:	f7f5 fb9f 	bl	80005f8 <__aeabi_dmul>
 800aeba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aebe:	f7f5 f9e5 	bl	800028c <__adddf3>
 800aec2:	4682      	mov	sl, r0
 800aec4:	468b      	mov	fp, r1
 800aec6:	e770      	b.n	800adaa <_strtod_l+0xa62>
 800aec8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aecc:	e7e0      	b.n	800ae90 <_strtod_l+0xb48>
 800aece:	a30e      	add	r3, pc, #56	@ (adr r3, 800af08 <_strtod_l+0xbc0>)
 800aed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed4:	f7f5 fe02 	bl	8000adc <__aeabi_dcmplt>
 800aed8:	e798      	b.n	800ae0c <_strtod_l+0xac4>
 800aeda:	2300      	movs	r3, #0
 800aedc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aede:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800aee0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aee2:	6013      	str	r3, [r2, #0]
 800aee4:	f7ff ba6d 	b.w	800a3c2 <_strtod_l+0x7a>
 800aee8:	2a65      	cmp	r2, #101	@ 0x65
 800aeea:	f43f ab66 	beq.w	800a5ba <_strtod_l+0x272>
 800aeee:	2a45      	cmp	r2, #69	@ 0x45
 800aef0:	f43f ab63 	beq.w	800a5ba <_strtod_l+0x272>
 800aef4:	2301      	movs	r3, #1
 800aef6:	f7ff bb9e 	b.w	800a636 <_strtod_l+0x2ee>
 800aefa:	bf00      	nop
 800aefc:	f3af 8000 	nop.w
 800af00:	ffc00000 	.word	0xffc00000
 800af04:	41dfffff 	.word	0x41dfffff
 800af08:	94a03595 	.word	0x94a03595
 800af0c:	3fcfffff 	.word	0x3fcfffff

0800af10 <_strtod_r>:
 800af10:	4b01      	ldr	r3, [pc, #4]	@ (800af18 <_strtod_r+0x8>)
 800af12:	f7ff ba19 	b.w	800a348 <_strtod_l>
 800af16:	bf00      	nop
 800af18:	20000044 	.word	0x20000044

0800af1c <strtof>:
 800af1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af20:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800afe0 <strtof+0xc4>
 800af24:	4b29      	ldr	r3, [pc, #164]	@ (800afcc <strtof+0xb0>)
 800af26:	460a      	mov	r2, r1
 800af28:	ed2d 8b02 	vpush	{d8}
 800af2c:	4601      	mov	r1, r0
 800af2e:	f8d8 0000 	ldr.w	r0, [r8]
 800af32:	f7ff fa09 	bl	800a348 <_strtod_l>
 800af36:	ec55 4b10 	vmov	r4, r5, d0
 800af3a:	4622      	mov	r2, r4
 800af3c:	462b      	mov	r3, r5
 800af3e:	4620      	mov	r0, r4
 800af40:	4629      	mov	r1, r5
 800af42:	f7f5 fdf3 	bl	8000b2c <__aeabi_dcmpun>
 800af46:	b190      	cbz	r0, 800af6e <strtof+0x52>
 800af48:	2d00      	cmp	r5, #0
 800af4a:	4821      	ldr	r0, [pc, #132]	@ (800afd0 <strtof+0xb4>)
 800af4c:	da09      	bge.n	800af62 <strtof+0x46>
 800af4e:	f001 f89f 	bl	800c090 <nanf>
 800af52:	eeb1 8a40 	vneg.f32	s16, s0
 800af56:	eeb0 0a48 	vmov.f32	s0, s16
 800af5a:	ecbd 8b02 	vpop	{d8}
 800af5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af62:	ecbd 8b02 	vpop	{d8}
 800af66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af6a:	f001 b891 	b.w	800c090 <nanf>
 800af6e:	4620      	mov	r0, r4
 800af70:	4629      	mov	r1, r5
 800af72:	f7f5 fe39 	bl	8000be8 <__aeabi_d2f>
 800af76:	ee08 0a10 	vmov	s16, r0
 800af7a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800afd4 <strtof+0xb8>
 800af7e:	eeb0 7ac8 	vabs.f32	s14, s16
 800af82:	eeb4 7a67 	vcmp.f32	s14, s15
 800af86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af8a:	dd11      	ble.n	800afb0 <strtof+0x94>
 800af8c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800af90:	4b11      	ldr	r3, [pc, #68]	@ (800afd8 <strtof+0xbc>)
 800af92:	f04f 32ff 	mov.w	r2, #4294967295
 800af96:	4620      	mov	r0, r4
 800af98:	4639      	mov	r1, r7
 800af9a:	f7f5 fdc7 	bl	8000b2c <__aeabi_dcmpun>
 800af9e:	b980      	cbnz	r0, 800afc2 <strtof+0xa6>
 800afa0:	4b0d      	ldr	r3, [pc, #52]	@ (800afd8 <strtof+0xbc>)
 800afa2:	f04f 32ff 	mov.w	r2, #4294967295
 800afa6:	4620      	mov	r0, r4
 800afa8:	4639      	mov	r1, r7
 800afaa:	f7f5 fda1 	bl	8000af0 <__aeabi_dcmple>
 800afae:	b940      	cbnz	r0, 800afc2 <strtof+0xa6>
 800afb0:	ee18 3a10 	vmov	r3, s16
 800afb4:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800afb8:	d1cd      	bne.n	800af56 <strtof+0x3a>
 800afba:	4b08      	ldr	r3, [pc, #32]	@ (800afdc <strtof+0xc0>)
 800afbc:	402b      	ands	r3, r5
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0c9      	beq.n	800af56 <strtof+0x3a>
 800afc2:	f8d8 3000 	ldr.w	r3, [r8]
 800afc6:	2222      	movs	r2, #34	@ 0x22
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	e7c4      	b.n	800af56 <strtof+0x3a>
 800afcc:	20000044 	.word	0x20000044
 800afd0:	08010355 	.word	0x08010355
 800afd4:	7f7fffff 	.word	0x7f7fffff
 800afd8:	7fefffff 	.word	0x7fefffff
 800afdc:	7ff00000 	.word	0x7ff00000
 800afe0:	200001b0 	.word	0x200001b0

0800afe4 <__cvt>:
 800afe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afe8:	ec57 6b10 	vmov	r6, r7, d0
 800afec:	2f00      	cmp	r7, #0
 800afee:	460c      	mov	r4, r1
 800aff0:	4619      	mov	r1, r3
 800aff2:	463b      	mov	r3, r7
 800aff4:	bfbb      	ittet	lt
 800aff6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800affa:	461f      	movlt	r7, r3
 800affc:	2300      	movge	r3, #0
 800affe:	232d      	movlt	r3, #45	@ 0x2d
 800b000:	700b      	strb	r3, [r1, #0]
 800b002:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b004:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b008:	4691      	mov	r9, r2
 800b00a:	f023 0820 	bic.w	r8, r3, #32
 800b00e:	bfbc      	itt	lt
 800b010:	4632      	movlt	r2, r6
 800b012:	4616      	movlt	r6, r2
 800b014:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b018:	d005      	beq.n	800b026 <__cvt+0x42>
 800b01a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b01e:	d100      	bne.n	800b022 <__cvt+0x3e>
 800b020:	3401      	adds	r4, #1
 800b022:	2102      	movs	r1, #2
 800b024:	e000      	b.n	800b028 <__cvt+0x44>
 800b026:	2103      	movs	r1, #3
 800b028:	ab03      	add	r3, sp, #12
 800b02a:	9301      	str	r3, [sp, #4]
 800b02c:	ab02      	add	r3, sp, #8
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	ec47 6b10 	vmov	d0, r6, r7
 800b034:	4653      	mov	r3, sl
 800b036:	4622      	mov	r2, r4
 800b038:	f001 f8ba 	bl	800c1b0 <_dtoa_r>
 800b03c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b040:	4605      	mov	r5, r0
 800b042:	d119      	bne.n	800b078 <__cvt+0x94>
 800b044:	f019 0f01 	tst.w	r9, #1
 800b048:	d00e      	beq.n	800b068 <__cvt+0x84>
 800b04a:	eb00 0904 	add.w	r9, r0, r4
 800b04e:	2200      	movs	r2, #0
 800b050:	2300      	movs	r3, #0
 800b052:	4630      	mov	r0, r6
 800b054:	4639      	mov	r1, r7
 800b056:	f7f5 fd37 	bl	8000ac8 <__aeabi_dcmpeq>
 800b05a:	b108      	cbz	r0, 800b060 <__cvt+0x7c>
 800b05c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b060:	2230      	movs	r2, #48	@ 0x30
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	454b      	cmp	r3, r9
 800b066:	d31e      	bcc.n	800b0a6 <__cvt+0xc2>
 800b068:	9b03      	ldr	r3, [sp, #12]
 800b06a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b06c:	1b5b      	subs	r3, r3, r5
 800b06e:	4628      	mov	r0, r5
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	b004      	add	sp, #16
 800b074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b078:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b07c:	eb00 0904 	add.w	r9, r0, r4
 800b080:	d1e5      	bne.n	800b04e <__cvt+0x6a>
 800b082:	7803      	ldrb	r3, [r0, #0]
 800b084:	2b30      	cmp	r3, #48	@ 0x30
 800b086:	d10a      	bne.n	800b09e <__cvt+0xba>
 800b088:	2200      	movs	r2, #0
 800b08a:	2300      	movs	r3, #0
 800b08c:	4630      	mov	r0, r6
 800b08e:	4639      	mov	r1, r7
 800b090:	f7f5 fd1a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b094:	b918      	cbnz	r0, 800b09e <__cvt+0xba>
 800b096:	f1c4 0401 	rsb	r4, r4, #1
 800b09a:	f8ca 4000 	str.w	r4, [sl]
 800b09e:	f8da 3000 	ldr.w	r3, [sl]
 800b0a2:	4499      	add	r9, r3
 800b0a4:	e7d3      	b.n	800b04e <__cvt+0x6a>
 800b0a6:	1c59      	adds	r1, r3, #1
 800b0a8:	9103      	str	r1, [sp, #12]
 800b0aa:	701a      	strb	r2, [r3, #0]
 800b0ac:	e7d9      	b.n	800b062 <__cvt+0x7e>

0800b0ae <__exponent>:
 800b0ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0b0:	2900      	cmp	r1, #0
 800b0b2:	bfba      	itte	lt
 800b0b4:	4249      	neglt	r1, r1
 800b0b6:	232d      	movlt	r3, #45	@ 0x2d
 800b0b8:	232b      	movge	r3, #43	@ 0x2b
 800b0ba:	2909      	cmp	r1, #9
 800b0bc:	7002      	strb	r2, [r0, #0]
 800b0be:	7043      	strb	r3, [r0, #1]
 800b0c0:	dd29      	ble.n	800b116 <__exponent+0x68>
 800b0c2:	f10d 0307 	add.w	r3, sp, #7
 800b0c6:	461d      	mov	r5, r3
 800b0c8:	270a      	movs	r7, #10
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	fbb1 f6f7 	udiv	r6, r1, r7
 800b0d0:	fb07 1416 	mls	r4, r7, r6, r1
 800b0d4:	3430      	adds	r4, #48	@ 0x30
 800b0d6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b0da:	460c      	mov	r4, r1
 800b0dc:	2c63      	cmp	r4, #99	@ 0x63
 800b0de:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	dcf1      	bgt.n	800b0ca <__exponent+0x1c>
 800b0e6:	3130      	adds	r1, #48	@ 0x30
 800b0e8:	1e94      	subs	r4, r2, #2
 800b0ea:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b0ee:	1c41      	adds	r1, r0, #1
 800b0f0:	4623      	mov	r3, r4
 800b0f2:	42ab      	cmp	r3, r5
 800b0f4:	d30a      	bcc.n	800b10c <__exponent+0x5e>
 800b0f6:	f10d 0309 	add.w	r3, sp, #9
 800b0fa:	1a9b      	subs	r3, r3, r2
 800b0fc:	42ac      	cmp	r4, r5
 800b0fe:	bf88      	it	hi
 800b100:	2300      	movhi	r3, #0
 800b102:	3302      	adds	r3, #2
 800b104:	4403      	add	r3, r0
 800b106:	1a18      	subs	r0, r3, r0
 800b108:	b003      	add	sp, #12
 800b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b10c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b110:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b114:	e7ed      	b.n	800b0f2 <__exponent+0x44>
 800b116:	2330      	movs	r3, #48	@ 0x30
 800b118:	3130      	adds	r1, #48	@ 0x30
 800b11a:	7083      	strb	r3, [r0, #2]
 800b11c:	70c1      	strb	r1, [r0, #3]
 800b11e:	1d03      	adds	r3, r0, #4
 800b120:	e7f1      	b.n	800b106 <__exponent+0x58>
	...

0800b124 <_printf_float>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	b08d      	sub	sp, #52	@ 0x34
 800b12a:	460c      	mov	r4, r1
 800b12c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b130:	4616      	mov	r6, r2
 800b132:	461f      	mov	r7, r3
 800b134:	4605      	mov	r5, r0
 800b136:	f000 ff1b 	bl	800bf70 <_localeconv_r>
 800b13a:	6803      	ldr	r3, [r0, #0]
 800b13c:	9304      	str	r3, [sp, #16]
 800b13e:	4618      	mov	r0, r3
 800b140:	f7f5 f896 	bl	8000270 <strlen>
 800b144:	2300      	movs	r3, #0
 800b146:	930a      	str	r3, [sp, #40]	@ 0x28
 800b148:	f8d8 3000 	ldr.w	r3, [r8]
 800b14c:	9005      	str	r0, [sp, #20]
 800b14e:	3307      	adds	r3, #7
 800b150:	f023 0307 	bic.w	r3, r3, #7
 800b154:	f103 0208 	add.w	r2, r3, #8
 800b158:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b15c:	f8d4 b000 	ldr.w	fp, [r4]
 800b160:	f8c8 2000 	str.w	r2, [r8]
 800b164:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b168:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b16c:	9307      	str	r3, [sp, #28]
 800b16e:	f8cd 8018 	str.w	r8, [sp, #24]
 800b172:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b17a:	4b9c      	ldr	r3, [pc, #624]	@ (800b3ec <_printf_float+0x2c8>)
 800b17c:	f04f 32ff 	mov.w	r2, #4294967295
 800b180:	f7f5 fcd4 	bl	8000b2c <__aeabi_dcmpun>
 800b184:	bb70      	cbnz	r0, 800b1e4 <_printf_float+0xc0>
 800b186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b18a:	4b98      	ldr	r3, [pc, #608]	@ (800b3ec <_printf_float+0x2c8>)
 800b18c:	f04f 32ff 	mov.w	r2, #4294967295
 800b190:	f7f5 fcae 	bl	8000af0 <__aeabi_dcmple>
 800b194:	bb30      	cbnz	r0, 800b1e4 <_printf_float+0xc0>
 800b196:	2200      	movs	r2, #0
 800b198:	2300      	movs	r3, #0
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	f7f5 fc9d 	bl	8000adc <__aeabi_dcmplt>
 800b1a2:	b110      	cbz	r0, 800b1aa <_printf_float+0x86>
 800b1a4:	232d      	movs	r3, #45	@ 0x2d
 800b1a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1aa:	4a91      	ldr	r2, [pc, #580]	@ (800b3f0 <_printf_float+0x2cc>)
 800b1ac:	4b91      	ldr	r3, [pc, #580]	@ (800b3f4 <_printf_float+0x2d0>)
 800b1ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b1b2:	bf94      	ite	ls
 800b1b4:	4690      	movls	r8, r2
 800b1b6:	4698      	movhi	r8, r3
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	6123      	str	r3, [r4, #16]
 800b1bc:	f02b 0304 	bic.w	r3, fp, #4
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	f04f 0900 	mov.w	r9, #0
 800b1c6:	9700      	str	r7, [sp, #0]
 800b1c8:	4633      	mov	r3, r6
 800b1ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b1cc:	4621      	mov	r1, r4
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f000 f9d2 	bl	800b578 <_printf_common>
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	f040 808d 	bne.w	800b2f4 <_printf_float+0x1d0>
 800b1da:	f04f 30ff 	mov.w	r0, #4294967295
 800b1de:	b00d      	add	sp, #52	@ 0x34
 800b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	464b      	mov	r3, r9
 800b1e8:	4640      	mov	r0, r8
 800b1ea:	4649      	mov	r1, r9
 800b1ec:	f7f5 fc9e 	bl	8000b2c <__aeabi_dcmpun>
 800b1f0:	b140      	cbz	r0, 800b204 <_printf_float+0xe0>
 800b1f2:	464b      	mov	r3, r9
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	bfbc      	itt	lt
 800b1f8:	232d      	movlt	r3, #45	@ 0x2d
 800b1fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b1fe:	4a7e      	ldr	r2, [pc, #504]	@ (800b3f8 <_printf_float+0x2d4>)
 800b200:	4b7e      	ldr	r3, [pc, #504]	@ (800b3fc <_printf_float+0x2d8>)
 800b202:	e7d4      	b.n	800b1ae <_printf_float+0x8a>
 800b204:	6863      	ldr	r3, [r4, #4]
 800b206:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b20a:	9206      	str	r2, [sp, #24]
 800b20c:	1c5a      	adds	r2, r3, #1
 800b20e:	d13b      	bne.n	800b288 <_printf_float+0x164>
 800b210:	2306      	movs	r3, #6
 800b212:	6063      	str	r3, [r4, #4]
 800b214:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b218:	2300      	movs	r3, #0
 800b21a:	6022      	str	r2, [r4, #0]
 800b21c:	9303      	str	r3, [sp, #12]
 800b21e:	ab0a      	add	r3, sp, #40	@ 0x28
 800b220:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b224:	ab09      	add	r3, sp, #36	@ 0x24
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	6861      	ldr	r1, [r4, #4]
 800b22a:	ec49 8b10 	vmov	d0, r8, r9
 800b22e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b232:	4628      	mov	r0, r5
 800b234:	f7ff fed6 	bl	800afe4 <__cvt>
 800b238:	9b06      	ldr	r3, [sp, #24]
 800b23a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b23c:	2b47      	cmp	r3, #71	@ 0x47
 800b23e:	4680      	mov	r8, r0
 800b240:	d129      	bne.n	800b296 <_printf_float+0x172>
 800b242:	1cc8      	adds	r0, r1, #3
 800b244:	db02      	blt.n	800b24c <_printf_float+0x128>
 800b246:	6863      	ldr	r3, [r4, #4]
 800b248:	4299      	cmp	r1, r3
 800b24a:	dd41      	ble.n	800b2d0 <_printf_float+0x1ac>
 800b24c:	f1aa 0a02 	sub.w	sl, sl, #2
 800b250:	fa5f fa8a 	uxtb.w	sl, sl
 800b254:	3901      	subs	r1, #1
 800b256:	4652      	mov	r2, sl
 800b258:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b25c:	9109      	str	r1, [sp, #36]	@ 0x24
 800b25e:	f7ff ff26 	bl	800b0ae <__exponent>
 800b262:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b264:	1813      	adds	r3, r2, r0
 800b266:	2a01      	cmp	r2, #1
 800b268:	4681      	mov	r9, r0
 800b26a:	6123      	str	r3, [r4, #16]
 800b26c:	dc02      	bgt.n	800b274 <_printf_float+0x150>
 800b26e:	6822      	ldr	r2, [r4, #0]
 800b270:	07d2      	lsls	r2, r2, #31
 800b272:	d501      	bpl.n	800b278 <_printf_float+0x154>
 800b274:	3301      	adds	r3, #1
 800b276:	6123      	str	r3, [r4, #16]
 800b278:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d0a2      	beq.n	800b1c6 <_printf_float+0xa2>
 800b280:	232d      	movs	r3, #45	@ 0x2d
 800b282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b286:	e79e      	b.n	800b1c6 <_printf_float+0xa2>
 800b288:	9a06      	ldr	r2, [sp, #24]
 800b28a:	2a47      	cmp	r2, #71	@ 0x47
 800b28c:	d1c2      	bne.n	800b214 <_printf_float+0xf0>
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1c0      	bne.n	800b214 <_printf_float+0xf0>
 800b292:	2301      	movs	r3, #1
 800b294:	e7bd      	b.n	800b212 <_printf_float+0xee>
 800b296:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b29a:	d9db      	bls.n	800b254 <_printf_float+0x130>
 800b29c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b2a0:	d118      	bne.n	800b2d4 <_printf_float+0x1b0>
 800b2a2:	2900      	cmp	r1, #0
 800b2a4:	6863      	ldr	r3, [r4, #4]
 800b2a6:	dd0b      	ble.n	800b2c0 <_printf_float+0x19c>
 800b2a8:	6121      	str	r1, [r4, #16]
 800b2aa:	b913      	cbnz	r3, 800b2b2 <_printf_float+0x18e>
 800b2ac:	6822      	ldr	r2, [r4, #0]
 800b2ae:	07d0      	lsls	r0, r2, #31
 800b2b0:	d502      	bpl.n	800b2b8 <_printf_float+0x194>
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	440b      	add	r3, r1
 800b2b6:	6123      	str	r3, [r4, #16]
 800b2b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b2ba:	f04f 0900 	mov.w	r9, #0
 800b2be:	e7db      	b.n	800b278 <_printf_float+0x154>
 800b2c0:	b913      	cbnz	r3, 800b2c8 <_printf_float+0x1a4>
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	07d2      	lsls	r2, r2, #31
 800b2c6:	d501      	bpl.n	800b2cc <_printf_float+0x1a8>
 800b2c8:	3302      	adds	r3, #2
 800b2ca:	e7f4      	b.n	800b2b6 <_printf_float+0x192>
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e7f2      	b.n	800b2b6 <_printf_float+0x192>
 800b2d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2d6:	4299      	cmp	r1, r3
 800b2d8:	db05      	blt.n	800b2e6 <_printf_float+0x1c2>
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	6121      	str	r1, [r4, #16]
 800b2de:	07d8      	lsls	r0, r3, #31
 800b2e0:	d5ea      	bpl.n	800b2b8 <_printf_float+0x194>
 800b2e2:	1c4b      	adds	r3, r1, #1
 800b2e4:	e7e7      	b.n	800b2b6 <_printf_float+0x192>
 800b2e6:	2900      	cmp	r1, #0
 800b2e8:	bfd4      	ite	le
 800b2ea:	f1c1 0202 	rsble	r2, r1, #2
 800b2ee:	2201      	movgt	r2, #1
 800b2f0:	4413      	add	r3, r2
 800b2f2:	e7e0      	b.n	800b2b6 <_printf_float+0x192>
 800b2f4:	6823      	ldr	r3, [r4, #0]
 800b2f6:	055a      	lsls	r2, r3, #21
 800b2f8:	d407      	bmi.n	800b30a <_printf_float+0x1e6>
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	4642      	mov	r2, r8
 800b2fe:	4631      	mov	r1, r6
 800b300:	4628      	mov	r0, r5
 800b302:	47b8      	blx	r7
 800b304:	3001      	adds	r0, #1
 800b306:	d12b      	bne.n	800b360 <_printf_float+0x23c>
 800b308:	e767      	b.n	800b1da <_printf_float+0xb6>
 800b30a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b30e:	f240 80dd 	bls.w	800b4cc <_printf_float+0x3a8>
 800b312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b316:	2200      	movs	r2, #0
 800b318:	2300      	movs	r3, #0
 800b31a:	f7f5 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d033      	beq.n	800b38a <_printf_float+0x266>
 800b322:	4a37      	ldr	r2, [pc, #220]	@ (800b400 <_printf_float+0x2dc>)
 800b324:	2301      	movs	r3, #1
 800b326:	4631      	mov	r1, r6
 800b328:	4628      	mov	r0, r5
 800b32a:	47b8      	blx	r7
 800b32c:	3001      	adds	r0, #1
 800b32e:	f43f af54 	beq.w	800b1da <_printf_float+0xb6>
 800b332:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b336:	4543      	cmp	r3, r8
 800b338:	db02      	blt.n	800b340 <_printf_float+0x21c>
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	07d8      	lsls	r0, r3, #31
 800b33e:	d50f      	bpl.n	800b360 <_printf_float+0x23c>
 800b340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b344:	4631      	mov	r1, r6
 800b346:	4628      	mov	r0, r5
 800b348:	47b8      	blx	r7
 800b34a:	3001      	adds	r0, #1
 800b34c:	f43f af45 	beq.w	800b1da <_printf_float+0xb6>
 800b350:	f04f 0900 	mov.w	r9, #0
 800b354:	f108 38ff 	add.w	r8, r8, #4294967295
 800b358:	f104 0a1a 	add.w	sl, r4, #26
 800b35c:	45c8      	cmp	r8, r9
 800b35e:	dc09      	bgt.n	800b374 <_printf_float+0x250>
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	079b      	lsls	r3, r3, #30
 800b364:	f100 8103 	bmi.w	800b56e <_printf_float+0x44a>
 800b368:	68e0      	ldr	r0, [r4, #12]
 800b36a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b36c:	4298      	cmp	r0, r3
 800b36e:	bfb8      	it	lt
 800b370:	4618      	movlt	r0, r3
 800b372:	e734      	b.n	800b1de <_printf_float+0xba>
 800b374:	2301      	movs	r3, #1
 800b376:	4652      	mov	r2, sl
 800b378:	4631      	mov	r1, r6
 800b37a:	4628      	mov	r0, r5
 800b37c:	47b8      	blx	r7
 800b37e:	3001      	adds	r0, #1
 800b380:	f43f af2b 	beq.w	800b1da <_printf_float+0xb6>
 800b384:	f109 0901 	add.w	r9, r9, #1
 800b388:	e7e8      	b.n	800b35c <_printf_float+0x238>
 800b38a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	dc39      	bgt.n	800b404 <_printf_float+0x2e0>
 800b390:	4a1b      	ldr	r2, [pc, #108]	@ (800b400 <_printf_float+0x2dc>)
 800b392:	2301      	movs	r3, #1
 800b394:	4631      	mov	r1, r6
 800b396:	4628      	mov	r0, r5
 800b398:	47b8      	blx	r7
 800b39a:	3001      	adds	r0, #1
 800b39c:	f43f af1d 	beq.w	800b1da <_printf_float+0xb6>
 800b3a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b3a4:	ea59 0303 	orrs.w	r3, r9, r3
 800b3a8:	d102      	bne.n	800b3b0 <_printf_float+0x28c>
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	07d9      	lsls	r1, r3, #31
 800b3ae:	d5d7      	bpl.n	800b360 <_printf_float+0x23c>
 800b3b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	f43f af0d 	beq.w	800b1da <_printf_float+0xb6>
 800b3c0:	f04f 0a00 	mov.w	sl, #0
 800b3c4:	f104 0b1a 	add.w	fp, r4, #26
 800b3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3ca:	425b      	negs	r3, r3
 800b3cc:	4553      	cmp	r3, sl
 800b3ce:	dc01      	bgt.n	800b3d4 <_printf_float+0x2b0>
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	e793      	b.n	800b2fc <_printf_float+0x1d8>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	465a      	mov	r2, fp
 800b3d8:	4631      	mov	r1, r6
 800b3da:	4628      	mov	r0, r5
 800b3dc:	47b8      	blx	r7
 800b3de:	3001      	adds	r0, #1
 800b3e0:	f43f aefb 	beq.w	800b1da <_printf_float+0xb6>
 800b3e4:	f10a 0a01 	add.w	sl, sl, #1
 800b3e8:	e7ee      	b.n	800b3c8 <_printf_float+0x2a4>
 800b3ea:	bf00      	nop
 800b3ec:	7fefffff 	.word	0x7fefffff
 800b3f0:	0800ff80 	.word	0x0800ff80
 800b3f4:	0800ff84 	.word	0x0800ff84
 800b3f8:	0800ff88 	.word	0x0800ff88
 800b3fc:	0800ff8c 	.word	0x0800ff8c
 800b400:	0800ff90 	.word	0x0800ff90
 800b404:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b406:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b40a:	4553      	cmp	r3, sl
 800b40c:	bfa8      	it	ge
 800b40e:	4653      	movge	r3, sl
 800b410:	2b00      	cmp	r3, #0
 800b412:	4699      	mov	r9, r3
 800b414:	dc36      	bgt.n	800b484 <_printf_float+0x360>
 800b416:	f04f 0b00 	mov.w	fp, #0
 800b41a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b41e:	f104 021a 	add.w	r2, r4, #26
 800b422:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b424:	9306      	str	r3, [sp, #24]
 800b426:	eba3 0309 	sub.w	r3, r3, r9
 800b42a:	455b      	cmp	r3, fp
 800b42c:	dc31      	bgt.n	800b492 <_printf_float+0x36e>
 800b42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b430:	459a      	cmp	sl, r3
 800b432:	dc3a      	bgt.n	800b4aa <_printf_float+0x386>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	07da      	lsls	r2, r3, #31
 800b438:	d437      	bmi.n	800b4aa <_printf_float+0x386>
 800b43a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b43c:	ebaa 0903 	sub.w	r9, sl, r3
 800b440:	9b06      	ldr	r3, [sp, #24]
 800b442:	ebaa 0303 	sub.w	r3, sl, r3
 800b446:	4599      	cmp	r9, r3
 800b448:	bfa8      	it	ge
 800b44a:	4699      	movge	r9, r3
 800b44c:	f1b9 0f00 	cmp.w	r9, #0
 800b450:	dc33      	bgt.n	800b4ba <_printf_float+0x396>
 800b452:	f04f 0800 	mov.w	r8, #0
 800b456:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b45a:	f104 0b1a 	add.w	fp, r4, #26
 800b45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b460:	ebaa 0303 	sub.w	r3, sl, r3
 800b464:	eba3 0309 	sub.w	r3, r3, r9
 800b468:	4543      	cmp	r3, r8
 800b46a:	f77f af79 	ble.w	800b360 <_printf_float+0x23c>
 800b46e:	2301      	movs	r3, #1
 800b470:	465a      	mov	r2, fp
 800b472:	4631      	mov	r1, r6
 800b474:	4628      	mov	r0, r5
 800b476:	47b8      	blx	r7
 800b478:	3001      	adds	r0, #1
 800b47a:	f43f aeae 	beq.w	800b1da <_printf_float+0xb6>
 800b47e:	f108 0801 	add.w	r8, r8, #1
 800b482:	e7ec      	b.n	800b45e <_printf_float+0x33a>
 800b484:	4642      	mov	r2, r8
 800b486:	4631      	mov	r1, r6
 800b488:	4628      	mov	r0, r5
 800b48a:	47b8      	blx	r7
 800b48c:	3001      	adds	r0, #1
 800b48e:	d1c2      	bne.n	800b416 <_printf_float+0x2f2>
 800b490:	e6a3      	b.n	800b1da <_printf_float+0xb6>
 800b492:	2301      	movs	r3, #1
 800b494:	4631      	mov	r1, r6
 800b496:	4628      	mov	r0, r5
 800b498:	9206      	str	r2, [sp, #24]
 800b49a:	47b8      	blx	r7
 800b49c:	3001      	adds	r0, #1
 800b49e:	f43f ae9c 	beq.w	800b1da <_printf_float+0xb6>
 800b4a2:	9a06      	ldr	r2, [sp, #24]
 800b4a4:	f10b 0b01 	add.w	fp, fp, #1
 800b4a8:	e7bb      	b.n	800b422 <_printf_float+0x2fe>
 800b4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4ae:	4631      	mov	r1, r6
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	47b8      	blx	r7
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	d1c0      	bne.n	800b43a <_printf_float+0x316>
 800b4b8:	e68f      	b.n	800b1da <_printf_float+0xb6>
 800b4ba:	9a06      	ldr	r2, [sp, #24]
 800b4bc:	464b      	mov	r3, r9
 800b4be:	4442      	add	r2, r8
 800b4c0:	4631      	mov	r1, r6
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	47b8      	blx	r7
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d1c3      	bne.n	800b452 <_printf_float+0x32e>
 800b4ca:	e686      	b.n	800b1da <_printf_float+0xb6>
 800b4cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b4d0:	f1ba 0f01 	cmp.w	sl, #1
 800b4d4:	dc01      	bgt.n	800b4da <_printf_float+0x3b6>
 800b4d6:	07db      	lsls	r3, r3, #31
 800b4d8:	d536      	bpl.n	800b548 <_printf_float+0x424>
 800b4da:	2301      	movs	r3, #1
 800b4dc:	4642      	mov	r2, r8
 800b4de:	4631      	mov	r1, r6
 800b4e0:	4628      	mov	r0, r5
 800b4e2:	47b8      	blx	r7
 800b4e4:	3001      	adds	r0, #1
 800b4e6:	f43f ae78 	beq.w	800b1da <_printf_float+0xb6>
 800b4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b8      	blx	r7
 800b4f4:	3001      	adds	r0, #1
 800b4f6:	f43f ae70 	beq.w	800b1da <_printf_float+0xb6>
 800b4fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b4fe:	2200      	movs	r2, #0
 800b500:	2300      	movs	r3, #0
 800b502:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b506:	f7f5 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b50a:	b9c0      	cbnz	r0, 800b53e <_printf_float+0x41a>
 800b50c:	4653      	mov	r3, sl
 800b50e:	f108 0201 	add.w	r2, r8, #1
 800b512:	4631      	mov	r1, r6
 800b514:	4628      	mov	r0, r5
 800b516:	47b8      	blx	r7
 800b518:	3001      	adds	r0, #1
 800b51a:	d10c      	bne.n	800b536 <_printf_float+0x412>
 800b51c:	e65d      	b.n	800b1da <_printf_float+0xb6>
 800b51e:	2301      	movs	r3, #1
 800b520:	465a      	mov	r2, fp
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	47b8      	blx	r7
 800b528:	3001      	adds	r0, #1
 800b52a:	f43f ae56 	beq.w	800b1da <_printf_float+0xb6>
 800b52e:	f108 0801 	add.w	r8, r8, #1
 800b532:	45d0      	cmp	r8, sl
 800b534:	dbf3      	blt.n	800b51e <_printf_float+0x3fa>
 800b536:	464b      	mov	r3, r9
 800b538:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b53c:	e6df      	b.n	800b2fe <_printf_float+0x1da>
 800b53e:	f04f 0800 	mov.w	r8, #0
 800b542:	f104 0b1a 	add.w	fp, r4, #26
 800b546:	e7f4      	b.n	800b532 <_printf_float+0x40e>
 800b548:	2301      	movs	r3, #1
 800b54a:	4642      	mov	r2, r8
 800b54c:	e7e1      	b.n	800b512 <_printf_float+0x3ee>
 800b54e:	2301      	movs	r3, #1
 800b550:	464a      	mov	r2, r9
 800b552:	4631      	mov	r1, r6
 800b554:	4628      	mov	r0, r5
 800b556:	47b8      	blx	r7
 800b558:	3001      	adds	r0, #1
 800b55a:	f43f ae3e 	beq.w	800b1da <_printf_float+0xb6>
 800b55e:	f108 0801 	add.w	r8, r8, #1
 800b562:	68e3      	ldr	r3, [r4, #12]
 800b564:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b566:	1a5b      	subs	r3, r3, r1
 800b568:	4543      	cmp	r3, r8
 800b56a:	dcf0      	bgt.n	800b54e <_printf_float+0x42a>
 800b56c:	e6fc      	b.n	800b368 <_printf_float+0x244>
 800b56e:	f04f 0800 	mov.w	r8, #0
 800b572:	f104 0919 	add.w	r9, r4, #25
 800b576:	e7f4      	b.n	800b562 <_printf_float+0x43e>

0800b578 <_printf_common>:
 800b578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b57c:	4616      	mov	r6, r2
 800b57e:	4698      	mov	r8, r3
 800b580:	688a      	ldr	r2, [r1, #8]
 800b582:	690b      	ldr	r3, [r1, #16]
 800b584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b588:	4293      	cmp	r3, r2
 800b58a:	bfb8      	it	lt
 800b58c:	4613      	movlt	r3, r2
 800b58e:	6033      	str	r3, [r6, #0]
 800b590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b594:	4607      	mov	r7, r0
 800b596:	460c      	mov	r4, r1
 800b598:	b10a      	cbz	r2, 800b59e <_printf_common+0x26>
 800b59a:	3301      	adds	r3, #1
 800b59c:	6033      	str	r3, [r6, #0]
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	0699      	lsls	r1, r3, #26
 800b5a2:	bf42      	ittt	mi
 800b5a4:	6833      	ldrmi	r3, [r6, #0]
 800b5a6:	3302      	addmi	r3, #2
 800b5a8:	6033      	strmi	r3, [r6, #0]
 800b5aa:	6825      	ldr	r5, [r4, #0]
 800b5ac:	f015 0506 	ands.w	r5, r5, #6
 800b5b0:	d106      	bne.n	800b5c0 <_printf_common+0x48>
 800b5b2:	f104 0a19 	add.w	sl, r4, #25
 800b5b6:	68e3      	ldr	r3, [r4, #12]
 800b5b8:	6832      	ldr	r2, [r6, #0]
 800b5ba:	1a9b      	subs	r3, r3, r2
 800b5bc:	42ab      	cmp	r3, r5
 800b5be:	dc26      	bgt.n	800b60e <_printf_common+0x96>
 800b5c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5c4:	6822      	ldr	r2, [r4, #0]
 800b5c6:	3b00      	subs	r3, #0
 800b5c8:	bf18      	it	ne
 800b5ca:	2301      	movne	r3, #1
 800b5cc:	0692      	lsls	r2, r2, #26
 800b5ce:	d42b      	bmi.n	800b628 <_printf_common+0xb0>
 800b5d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5d4:	4641      	mov	r1, r8
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	47c8      	blx	r9
 800b5da:	3001      	adds	r0, #1
 800b5dc:	d01e      	beq.n	800b61c <_printf_common+0xa4>
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	6922      	ldr	r2, [r4, #16]
 800b5e2:	f003 0306 	and.w	r3, r3, #6
 800b5e6:	2b04      	cmp	r3, #4
 800b5e8:	bf02      	ittt	eq
 800b5ea:	68e5      	ldreq	r5, [r4, #12]
 800b5ec:	6833      	ldreq	r3, [r6, #0]
 800b5ee:	1aed      	subeq	r5, r5, r3
 800b5f0:	68a3      	ldr	r3, [r4, #8]
 800b5f2:	bf0c      	ite	eq
 800b5f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5f8:	2500      	movne	r5, #0
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	bfc4      	itt	gt
 800b5fe:	1a9b      	subgt	r3, r3, r2
 800b600:	18ed      	addgt	r5, r5, r3
 800b602:	2600      	movs	r6, #0
 800b604:	341a      	adds	r4, #26
 800b606:	42b5      	cmp	r5, r6
 800b608:	d11a      	bne.n	800b640 <_printf_common+0xc8>
 800b60a:	2000      	movs	r0, #0
 800b60c:	e008      	b.n	800b620 <_printf_common+0xa8>
 800b60e:	2301      	movs	r3, #1
 800b610:	4652      	mov	r2, sl
 800b612:	4641      	mov	r1, r8
 800b614:	4638      	mov	r0, r7
 800b616:	47c8      	blx	r9
 800b618:	3001      	adds	r0, #1
 800b61a:	d103      	bne.n	800b624 <_printf_common+0xac>
 800b61c:	f04f 30ff 	mov.w	r0, #4294967295
 800b620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b624:	3501      	adds	r5, #1
 800b626:	e7c6      	b.n	800b5b6 <_printf_common+0x3e>
 800b628:	18e1      	adds	r1, r4, r3
 800b62a:	1c5a      	adds	r2, r3, #1
 800b62c:	2030      	movs	r0, #48	@ 0x30
 800b62e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b632:	4422      	add	r2, r4
 800b634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b63c:	3302      	adds	r3, #2
 800b63e:	e7c7      	b.n	800b5d0 <_printf_common+0x58>
 800b640:	2301      	movs	r3, #1
 800b642:	4622      	mov	r2, r4
 800b644:	4641      	mov	r1, r8
 800b646:	4638      	mov	r0, r7
 800b648:	47c8      	blx	r9
 800b64a:	3001      	adds	r0, #1
 800b64c:	d0e6      	beq.n	800b61c <_printf_common+0xa4>
 800b64e:	3601      	adds	r6, #1
 800b650:	e7d9      	b.n	800b606 <_printf_common+0x8e>
	...

0800b654 <_printf_i>:
 800b654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b658:	7e0f      	ldrb	r7, [r1, #24]
 800b65a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b65c:	2f78      	cmp	r7, #120	@ 0x78
 800b65e:	4691      	mov	r9, r2
 800b660:	4680      	mov	r8, r0
 800b662:	460c      	mov	r4, r1
 800b664:	469a      	mov	sl, r3
 800b666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b66a:	d807      	bhi.n	800b67c <_printf_i+0x28>
 800b66c:	2f62      	cmp	r7, #98	@ 0x62
 800b66e:	d80a      	bhi.n	800b686 <_printf_i+0x32>
 800b670:	2f00      	cmp	r7, #0
 800b672:	f000 80d2 	beq.w	800b81a <_printf_i+0x1c6>
 800b676:	2f58      	cmp	r7, #88	@ 0x58
 800b678:	f000 80b9 	beq.w	800b7ee <_printf_i+0x19a>
 800b67c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b684:	e03a      	b.n	800b6fc <_printf_i+0xa8>
 800b686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b68a:	2b15      	cmp	r3, #21
 800b68c:	d8f6      	bhi.n	800b67c <_printf_i+0x28>
 800b68e:	a101      	add	r1, pc, #4	@ (adr r1, 800b694 <_printf_i+0x40>)
 800b690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b694:	0800b6ed 	.word	0x0800b6ed
 800b698:	0800b701 	.word	0x0800b701
 800b69c:	0800b67d 	.word	0x0800b67d
 800b6a0:	0800b67d 	.word	0x0800b67d
 800b6a4:	0800b67d 	.word	0x0800b67d
 800b6a8:	0800b67d 	.word	0x0800b67d
 800b6ac:	0800b701 	.word	0x0800b701
 800b6b0:	0800b67d 	.word	0x0800b67d
 800b6b4:	0800b67d 	.word	0x0800b67d
 800b6b8:	0800b67d 	.word	0x0800b67d
 800b6bc:	0800b67d 	.word	0x0800b67d
 800b6c0:	0800b801 	.word	0x0800b801
 800b6c4:	0800b72b 	.word	0x0800b72b
 800b6c8:	0800b7bb 	.word	0x0800b7bb
 800b6cc:	0800b67d 	.word	0x0800b67d
 800b6d0:	0800b67d 	.word	0x0800b67d
 800b6d4:	0800b823 	.word	0x0800b823
 800b6d8:	0800b67d 	.word	0x0800b67d
 800b6dc:	0800b72b 	.word	0x0800b72b
 800b6e0:	0800b67d 	.word	0x0800b67d
 800b6e4:	0800b67d 	.word	0x0800b67d
 800b6e8:	0800b7c3 	.word	0x0800b7c3
 800b6ec:	6833      	ldr	r3, [r6, #0]
 800b6ee:	1d1a      	adds	r2, r3, #4
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6032      	str	r2, [r6, #0]
 800b6f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b6f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e09d      	b.n	800b83c <_printf_i+0x1e8>
 800b700:	6833      	ldr	r3, [r6, #0]
 800b702:	6820      	ldr	r0, [r4, #0]
 800b704:	1d19      	adds	r1, r3, #4
 800b706:	6031      	str	r1, [r6, #0]
 800b708:	0606      	lsls	r6, r0, #24
 800b70a:	d501      	bpl.n	800b710 <_printf_i+0xbc>
 800b70c:	681d      	ldr	r5, [r3, #0]
 800b70e:	e003      	b.n	800b718 <_printf_i+0xc4>
 800b710:	0645      	lsls	r5, r0, #25
 800b712:	d5fb      	bpl.n	800b70c <_printf_i+0xb8>
 800b714:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b718:	2d00      	cmp	r5, #0
 800b71a:	da03      	bge.n	800b724 <_printf_i+0xd0>
 800b71c:	232d      	movs	r3, #45	@ 0x2d
 800b71e:	426d      	negs	r5, r5
 800b720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b724:	4859      	ldr	r0, [pc, #356]	@ (800b88c <_printf_i+0x238>)
 800b726:	230a      	movs	r3, #10
 800b728:	e011      	b.n	800b74e <_printf_i+0xfa>
 800b72a:	6821      	ldr	r1, [r4, #0]
 800b72c:	6833      	ldr	r3, [r6, #0]
 800b72e:	0608      	lsls	r0, r1, #24
 800b730:	f853 5b04 	ldr.w	r5, [r3], #4
 800b734:	d402      	bmi.n	800b73c <_printf_i+0xe8>
 800b736:	0649      	lsls	r1, r1, #25
 800b738:	bf48      	it	mi
 800b73a:	b2ad      	uxthmi	r5, r5
 800b73c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b73e:	4853      	ldr	r0, [pc, #332]	@ (800b88c <_printf_i+0x238>)
 800b740:	6033      	str	r3, [r6, #0]
 800b742:	bf14      	ite	ne
 800b744:	230a      	movne	r3, #10
 800b746:	2308      	moveq	r3, #8
 800b748:	2100      	movs	r1, #0
 800b74a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b74e:	6866      	ldr	r6, [r4, #4]
 800b750:	60a6      	str	r6, [r4, #8]
 800b752:	2e00      	cmp	r6, #0
 800b754:	bfa2      	ittt	ge
 800b756:	6821      	ldrge	r1, [r4, #0]
 800b758:	f021 0104 	bicge.w	r1, r1, #4
 800b75c:	6021      	strge	r1, [r4, #0]
 800b75e:	b90d      	cbnz	r5, 800b764 <_printf_i+0x110>
 800b760:	2e00      	cmp	r6, #0
 800b762:	d04b      	beq.n	800b7fc <_printf_i+0x1a8>
 800b764:	4616      	mov	r6, r2
 800b766:	fbb5 f1f3 	udiv	r1, r5, r3
 800b76a:	fb03 5711 	mls	r7, r3, r1, r5
 800b76e:	5dc7      	ldrb	r7, [r0, r7]
 800b770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b774:	462f      	mov	r7, r5
 800b776:	42bb      	cmp	r3, r7
 800b778:	460d      	mov	r5, r1
 800b77a:	d9f4      	bls.n	800b766 <_printf_i+0x112>
 800b77c:	2b08      	cmp	r3, #8
 800b77e:	d10b      	bne.n	800b798 <_printf_i+0x144>
 800b780:	6823      	ldr	r3, [r4, #0]
 800b782:	07df      	lsls	r7, r3, #31
 800b784:	d508      	bpl.n	800b798 <_printf_i+0x144>
 800b786:	6923      	ldr	r3, [r4, #16]
 800b788:	6861      	ldr	r1, [r4, #4]
 800b78a:	4299      	cmp	r1, r3
 800b78c:	bfde      	ittt	le
 800b78e:	2330      	movle	r3, #48	@ 0x30
 800b790:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b794:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b798:	1b92      	subs	r2, r2, r6
 800b79a:	6122      	str	r2, [r4, #16]
 800b79c:	f8cd a000 	str.w	sl, [sp]
 800b7a0:	464b      	mov	r3, r9
 800b7a2:	aa03      	add	r2, sp, #12
 800b7a4:	4621      	mov	r1, r4
 800b7a6:	4640      	mov	r0, r8
 800b7a8:	f7ff fee6 	bl	800b578 <_printf_common>
 800b7ac:	3001      	adds	r0, #1
 800b7ae:	d14a      	bne.n	800b846 <_printf_i+0x1f2>
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7b4:	b004      	add	sp, #16
 800b7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ba:	6823      	ldr	r3, [r4, #0]
 800b7bc:	f043 0320 	orr.w	r3, r3, #32
 800b7c0:	6023      	str	r3, [r4, #0]
 800b7c2:	4833      	ldr	r0, [pc, #204]	@ (800b890 <_printf_i+0x23c>)
 800b7c4:	2778      	movs	r7, #120	@ 0x78
 800b7c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	6831      	ldr	r1, [r6, #0]
 800b7ce:	061f      	lsls	r7, r3, #24
 800b7d0:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7d4:	d402      	bmi.n	800b7dc <_printf_i+0x188>
 800b7d6:	065f      	lsls	r7, r3, #25
 800b7d8:	bf48      	it	mi
 800b7da:	b2ad      	uxthmi	r5, r5
 800b7dc:	6031      	str	r1, [r6, #0]
 800b7de:	07d9      	lsls	r1, r3, #31
 800b7e0:	bf44      	itt	mi
 800b7e2:	f043 0320 	orrmi.w	r3, r3, #32
 800b7e6:	6023      	strmi	r3, [r4, #0]
 800b7e8:	b11d      	cbz	r5, 800b7f2 <_printf_i+0x19e>
 800b7ea:	2310      	movs	r3, #16
 800b7ec:	e7ac      	b.n	800b748 <_printf_i+0xf4>
 800b7ee:	4827      	ldr	r0, [pc, #156]	@ (800b88c <_printf_i+0x238>)
 800b7f0:	e7e9      	b.n	800b7c6 <_printf_i+0x172>
 800b7f2:	6823      	ldr	r3, [r4, #0]
 800b7f4:	f023 0320 	bic.w	r3, r3, #32
 800b7f8:	6023      	str	r3, [r4, #0]
 800b7fa:	e7f6      	b.n	800b7ea <_printf_i+0x196>
 800b7fc:	4616      	mov	r6, r2
 800b7fe:	e7bd      	b.n	800b77c <_printf_i+0x128>
 800b800:	6833      	ldr	r3, [r6, #0]
 800b802:	6825      	ldr	r5, [r4, #0]
 800b804:	6961      	ldr	r1, [r4, #20]
 800b806:	1d18      	adds	r0, r3, #4
 800b808:	6030      	str	r0, [r6, #0]
 800b80a:	062e      	lsls	r6, r5, #24
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	d501      	bpl.n	800b814 <_printf_i+0x1c0>
 800b810:	6019      	str	r1, [r3, #0]
 800b812:	e002      	b.n	800b81a <_printf_i+0x1c6>
 800b814:	0668      	lsls	r0, r5, #25
 800b816:	d5fb      	bpl.n	800b810 <_printf_i+0x1bc>
 800b818:	8019      	strh	r1, [r3, #0]
 800b81a:	2300      	movs	r3, #0
 800b81c:	6123      	str	r3, [r4, #16]
 800b81e:	4616      	mov	r6, r2
 800b820:	e7bc      	b.n	800b79c <_printf_i+0x148>
 800b822:	6833      	ldr	r3, [r6, #0]
 800b824:	1d1a      	adds	r2, r3, #4
 800b826:	6032      	str	r2, [r6, #0]
 800b828:	681e      	ldr	r6, [r3, #0]
 800b82a:	6862      	ldr	r2, [r4, #4]
 800b82c:	2100      	movs	r1, #0
 800b82e:	4630      	mov	r0, r6
 800b830:	f7f4 fcce 	bl	80001d0 <memchr>
 800b834:	b108      	cbz	r0, 800b83a <_printf_i+0x1e6>
 800b836:	1b80      	subs	r0, r0, r6
 800b838:	6060      	str	r0, [r4, #4]
 800b83a:	6863      	ldr	r3, [r4, #4]
 800b83c:	6123      	str	r3, [r4, #16]
 800b83e:	2300      	movs	r3, #0
 800b840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b844:	e7aa      	b.n	800b79c <_printf_i+0x148>
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	4632      	mov	r2, r6
 800b84a:	4649      	mov	r1, r9
 800b84c:	4640      	mov	r0, r8
 800b84e:	47d0      	blx	sl
 800b850:	3001      	adds	r0, #1
 800b852:	d0ad      	beq.n	800b7b0 <_printf_i+0x15c>
 800b854:	6823      	ldr	r3, [r4, #0]
 800b856:	079b      	lsls	r3, r3, #30
 800b858:	d413      	bmi.n	800b882 <_printf_i+0x22e>
 800b85a:	68e0      	ldr	r0, [r4, #12]
 800b85c:	9b03      	ldr	r3, [sp, #12]
 800b85e:	4298      	cmp	r0, r3
 800b860:	bfb8      	it	lt
 800b862:	4618      	movlt	r0, r3
 800b864:	e7a6      	b.n	800b7b4 <_printf_i+0x160>
 800b866:	2301      	movs	r3, #1
 800b868:	4632      	mov	r2, r6
 800b86a:	4649      	mov	r1, r9
 800b86c:	4640      	mov	r0, r8
 800b86e:	47d0      	blx	sl
 800b870:	3001      	adds	r0, #1
 800b872:	d09d      	beq.n	800b7b0 <_printf_i+0x15c>
 800b874:	3501      	adds	r5, #1
 800b876:	68e3      	ldr	r3, [r4, #12]
 800b878:	9903      	ldr	r1, [sp, #12]
 800b87a:	1a5b      	subs	r3, r3, r1
 800b87c:	42ab      	cmp	r3, r5
 800b87e:	dcf2      	bgt.n	800b866 <_printf_i+0x212>
 800b880:	e7eb      	b.n	800b85a <_printf_i+0x206>
 800b882:	2500      	movs	r5, #0
 800b884:	f104 0619 	add.w	r6, r4, #25
 800b888:	e7f5      	b.n	800b876 <_printf_i+0x222>
 800b88a:	bf00      	nop
 800b88c:	0800ff92 	.word	0x0800ff92
 800b890:	0800ffa3 	.word	0x0800ffa3

0800b894 <_scanf_float>:
 800b894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b898:	b087      	sub	sp, #28
 800b89a:	4617      	mov	r7, r2
 800b89c:	9303      	str	r3, [sp, #12]
 800b89e:	688b      	ldr	r3, [r1, #8]
 800b8a0:	1e5a      	subs	r2, r3, #1
 800b8a2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b8a6:	bf81      	itttt	hi
 800b8a8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b8ac:	eb03 0b05 	addhi.w	fp, r3, r5
 800b8b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b8b4:	608b      	strhi	r3, [r1, #8]
 800b8b6:	680b      	ldr	r3, [r1, #0]
 800b8b8:	460a      	mov	r2, r1
 800b8ba:	f04f 0500 	mov.w	r5, #0
 800b8be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b8c2:	f842 3b1c 	str.w	r3, [r2], #28
 800b8c6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b8ca:	4680      	mov	r8, r0
 800b8cc:	460c      	mov	r4, r1
 800b8ce:	bf98      	it	ls
 800b8d0:	f04f 0b00 	movls.w	fp, #0
 800b8d4:	9201      	str	r2, [sp, #4]
 800b8d6:	4616      	mov	r6, r2
 800b8d8:	46aa      	mov	sl, r5
 800b8da:	46a9      	mov	r9, r5
 800b8dc:	9502      	str	r5, [sp, #8]
 800b8de:	68a2      	ldr	r2, [r4, #8]
 800b8e0:	b152      	cbz	r2, 800b8f8 <_scanf_float+0x64>
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b4e      	cmp	r3, #78	@ 0x4e
 800b8e8:	d864      	bhi.n	800b9b4 <_scanf_float+0x120>
 800b8ea:	2b40      	cmp	r3, #64	@ 0x40
 800b8ec:	d83c      	bhi.n	800b968 <_scanf_float+0xd4>
 800b8ee:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b8f2:	b2c8      	uxtb	r0, r1
 800b8f4:	280e      	cmp	r0, #14
 800b8f6:	d93a      	bls.n	800b96e <_scanf_float+0xda>
 800b8f8:	f1b9 0f00 	cmp.w	r9, #0
 800b8fc:	d003      	beq.n	800b906 <_scanf_float+0x72>
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b90a:	f1ba 0f01 	cmp.w	sl, #1
 800b90e:	f200 8117 	bhi.w	800bb40 <_scanf_float+0x2ac>
 800b912:	9b01      	ldr	r3, [sp, #4]
 800b914:	429e      	cmp	r6, r3
 800b916:	f200 8108 	bhi.w	800bb2a <_scanf_float+0x296>
 800b91a:	2001      	movs	r0, #1
 800b91c:	b007      	add	sp, #28
 800b91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b922:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b926:	2a0d      	cmp	r2, #13
 800b928:	d8e6      	bhi.n	800b8f8 <_scanf_float+0x64>
 800b92a:	a101      	add	r1, pc, #4	@ (adr r1, 800b930 <_scanf_float+0x9c>)
 800b92c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b930:	0800ba77 	.word	0x0800ba77
 800b934:	0800b8f9 	.word	0x0800b8f9
 800b938:	0800b8f9 	.word	0x0800b8f9
 800b93c:	0800b8f9 	.word	0x0800b8f9
 800b940:	0800bad7 	.word	0x0800bad7
 800b944:	0800baaf 	.word	0x0800baaf
 800b948:	0800b8f9 	.word	0x0800b8f9
 800b94c:	0800b8f9 	.word	0x0800b8f9
 800b950:	0800ba85 	.word	0x0800ba85
 800b954:	0800b8f9 	.word	0x0800b8f9
 800b958:	0800b8f9 	.word	0x0800b8f9
 800b95c:	0800b8f9 	.word	0x0800b8f9
 800b960:	0800b8f9 	.word	0x0800b8f9
 800b964:	0800ba3d 	.word	0x0800ba3d
 800b968:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b96c:	e7db      	b.n	800b926 <_scanf_float+0x92>
 800b96e:	290e      	cmp	r1, #14
 800b970:	d8c2      	bhi.n	800b8f8 <_scanf_float+0x64>
 800b972:	a001      	add	r0, pc, #4	@ (adr r0, 800b978 <_scanf_float+0xe4>)
 800b974:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b978:	0800ba2d 	.word	0x0800ba2d
 800b97c:	0800b8f9 	.word	0x0800b8f9
 800b980:	0800ba2d 	.word	0x0800ba2d
 800b984:	0800bac3 	.word	0x0800bac3
 800b988:	0800b8f9 	.word	0x0800b8f9
 800b98c:	0800b9d5 	.word	0x0800b9d5
 800b990:	0800ba13 	.word	0x0800ba13
 800b994:	0800ba13 	.word	0x0800ba13
 800b998:	0800ba13 	.word	0x0800ba13
 800b99c:	0800ba13 	.word	0x0800ba13
 800b9a0:	0800ba13 	.word	0x0800ba13
 800b9a4:	0800ba13 	.word	0x0800ba13
 800b9a8:	0800ba13 	.word	0x0800ba13
 800b9ac:	0800ba13 	.word	0x0800ba13
 800b9b0:	0800ba13 	.word	0x0800ba13
 800b9b4:	2b6e      	cmp	r3, #110	@ 0x6e
 800b9b6:	d809      	bhi.n	800b9cc <_scanf_float+0x138>
 800b9b8:	2b60      	cmp	r3, #96	@ 0x60
 800b9ba:	d8b2      	bhi.n	800b922 <_scanf_float+0x8e>
 800b9bc:	2b54      	cmp	r3, #84	@ 0x54
 800b9be:	d07b      	beq.n	800bab8 <_scanf_float+0x224>
 800b9c0:	2b59      	cmp	r3, #89	@ 0x59
 800b9c2:	d199      	bne.n	800b8f8 <_scanf_float+0x64>
 800b9c4:	2d07      	cmp	r5, #7
 800b9c6:	d197      	bne.n	800b8f8 <_scanf_float+0x64>
 800b9c8:	2508      	movs	r5, #8
 800b9ca:	e02c      	b.n	800ba26 <_scanf_float+0x192>
 800b9cc:	2b74      	cmp	r3, #116	@ 0x74
 800b9ce:	d073      	beq.n	800bab8 <_scanf_float+0x224>
 800b9d0:	2b79      	cmp	r3, #121	@ 0x79
 800b9d2:	e7f6      	b.n	800b9c2 <_scanf_float+0x12e>
 800b9d4:	6821      	ldr	r1, [r4, #0]
 800b9d6:	05c8      	lsls	r0, r1, #23
 800b9d8:	d51b      	bpl.n	800ba12 <_scanf_float+0x17e>
 800b9da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b9de:	6021      	str	r1, [r4, #0]
 800b9e0:	f109 0901 	add.w	r9, r9, #1
 800b9e4:	f1bb 0f00 	cmp.w	fp, #0
 800b9e8:	d003      	beq.n	800b9f2 <_scanf_float+0x15e>
 800b9ea:	3201      	adds	r2, #1
 800b9ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b9f0:	60a2      	str	r2, [r4, #8]
 800b9f2:	68a3      	ldr	r3, [r4, #8]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	60a3      	str	r3, [r4, #8]
 800b9f8:	6923      	ldr	r3, [r4, #16]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	6123      	str	r3, [r4, #16]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	607b      	str	r3, [r7, #4]
 800ba06:	f340 8087 	ble.w	800bb18 <_scanf_float+0x284>
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	603b      	str	r3, [r7, #0]
 800ba10:	e765      	b.n	800b8de <_scanf_float+0x4a>
 800ba12:	eb1a 0105 	adds.w	r1, sl, r5
 800ba16:	f47f af6f 	bne.w	800b8f8 <_scanf_float+0x64>
 800ba1a:	6822      	ldr	r2, [r4, #0]
 800ba1c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ba20:	6022      	str	r2, [r4, #0]
 800ba22:	460d      	mov	r5, r1
 800ba24:	468a      	mov	sl, r1
 800ba26:	f806 3b01 	strb.w	r3, [r6], #1
 800ba2a:	e7e2      	b.n	800b9f2 <_scanf_float+0x15e>
 800ba2c:	6822      	ldr	r2, [r4, #0]
 800ba2e:	0610      	lsls	r0, r2, #24
 800ba30:	f57f af62 	bpl.w	800b8f8 <_scanf_float+0x64>
 800ba34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ba38:	6022      	str	r2, [r4, #0]
 800ba3a:	e7f4      	b.n	800ba26 <_scanf_float+0x192>
 800ba3c:	f1ba 0f00 	cmp.w	sl, #0
 800ba40:	d10e      	bne.n	800ba60 <_scanf_float+0x1cc>
 800ba42:	f1b9 0f00 	cmp.w	r9, #0
 800ba46:	d10e      	bne.n	800ba66 <_scanf_float+0x1d2>
 800ba48:	6822      	ldr	r2, [r4, #0]
 800ba4a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba4e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba52:	d108      	bne.n	800ba66 <_scanf_float+0x1d2>
 800ba54:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ba58:	6022      	str	r2, [r4, #0]
 800ba5a:	f04f 0a01 	mov.w	sl, #1
 800ba5e:	e7e2      	b.n	800ba26 <_scanf_float+0x192>
 800ba60:	f1ba 0f02 	cmp.w	sl, #2
 800ba64:	d055      	beq.n	800bb12 <_scanf_float+0x27e>
 800ba66:	2d01      	cmp	r5, #1
 800ba68:	d002      	beq.n	800ba70 <_scanf_float+0x1dc>
 800ba6a:	2d04      	cmp	r5, #4
 800ba6c:	f47f af44 	bne.w	800b8f8 <_scanf_float+0x64>
 800ba70:	3501      	adds	r5, #1
 800ba72:	b2ed      	uxtb	r5, r5
 800ba74:	e7d7      	b.n	800ba26 <_scanf_float+0x192>
 800ba76:	f1ba 0f01 	cmp.w	sl, #1
 800ba7a:	f47f af3d 	bne.w	800b8f8 <_scanf_float+0x64>
 800ba7e:	f04f 0a02 	mov.w	sl, #2
 800ba82:	e7d0      	b.n	800ba26 <_scanf_float+0x192>
 800ba84:	b97d      	cbnz	r5, 800baa6 <_scanf_float+0x212>
 800ba86:	f1b9 0f00 	cmp.w	r9, #0
 800ba8a:	f47f af38 	bne.w	800b8fe <_scanf_float+0x6a>
 800ba8e:	6822      	ldr	r2, [r4, #0]
 800ba90:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ba94:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ba98:	f040 8108 	bne.w	800bcac <_scanf_float+0x418>
 800ba9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800baa0:	6022      	str	r2, [r4, #0]
 800baa2:	2501      	movs	r5, #1
 800baa4:	e7bf      	b.n	800ba26 <_scanf_float+0x192>
 800baa6:	2d03      	cmp	r5, #3
 800baa8:	d0e2      	beq.n	800ba70 <_scanf_float+0x1dc>
 800baaa:	2d05      	cmp	r5, #5
 800baac:	e7de      	b.n	800ba6c <_scanf_float+0x1d8>
 800baae:	2d02      	cmp	r5, #2
 800bab0:	f47f af22 	bne.w	800b8f8 <_scanf_float+0x64>
 800bab4:	2503      	movs	r5, #3
 800bab6:	e7b6      	b.n	800ba26 <_scanf_float+0x192>
 800bab8:	2d06      	cmp	r5, #6
 800baba:	f47f af1d 	bne.w	800b8f8 <_scanf_float+0x64>
 800babe:	2507      	movs	r5, #7
 800bac0:	e7b1      	b.n	800ba26 <_scanf_float+0x192>
 800bac2:	6822      	ldr	r2, [r4, #0]
 800bac4:	0591      	lsls	r1, r2, #22
 800bac6:	f57f af17 	bpl.w	800b8f8 <_scanf_float+0x64>
 800baca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800bace:	6022      	str	r2, [r4, #0]
 800bad0:	f8cd 9008 	str.w	r9, [sp, #8]
 800bad4:	e7a7      	b.n	800ba26 <_scanf_float+0x192>
 800bad6:	6822      	ldr	r2, [r4, #0]
 800bad8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800badc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bae0:	d006      	beq.n	800baf0 <_scanf_float+0x25c>
 800bae2:	0550      	lsls	r0, r2, #21
 800bae4:	f57f af08 	bpl.w	800b8f8 <_scanf_float+0x64>
 800bae8:	f1b9 0f00 	cmp.w	r9, #0
 800baec:	f000 80de 	beq.w	800bcac <_scanf_float+0x418>
 800baf0:	0591      	lsls	r1, r2, #22
 800baf2:	bf58      	it	pl
 800baf4:	9902      	ldrpl	r1, [sp, #8]
 800baf6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800bafa:	bf58      	it	pl
 800bafc:	eba9 0101 	subpl.w	r1, r9, r1
 800bb00:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800bb04:	bf58      	it	pl
 800bb06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bb0a:	6022      	str	r2, [r4, #0]
 800bb0c:	f04f 0900 	mov.w	r9, #0
 800bb10:	e789      	b.n	800ba26 <_scanf_float+0x192>
 800bb12:	f04f 0a03 	mov.w	sl, #3
 800bb16:	e786      	b.n	800ba26 <_scanf_float+0x192>
 800bb18:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800bb1c:	4639      	mov	r1, r7
 800bb1e:	4640      	mov	r0, r8
 800bb20:	4798      	blx	r3
 800bb22:	2800      	cmp	r0, #0
 800bb24:	f43f aedb 	beq.w	800b8de <_scanf_float+0x4a>
 800bb28:	e6e6      	b.n	800b8f8 <_scanf_float+0x64>
 800bb2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb32:	463a      	mov	r2, r7
 800bb34:	4640      	mov	r0, r8
 800bb36:	4798      	blx	r3
 800bb38:	6923      	ldr	r3, [r4, #16]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	6123      	str	r3, [r4, #16]
 800bb3e:	e6e8      	b.n	800b912 <_scanf_float+0x7e>
 800bb40:	1e6b      	subs	r3, r5, #1
 800bb42:	2b06      	cmp	r3, #6
 800bb44:	d824      	bhi.n	800bb90 <_scanf_float+0x2fc>
 800bb46:	2d02      	cmp	r5, #2
 800bb48:	d836      	bhi.n	800bbb8 <_scanf_float+0x324>
 800bb4a:	9b01      	ldr	r3, [sp, #4]
 800bb4c:	429e      	cmp	r6, r3
 800bb4e:	f67f aee4 	bls.w	800b91a <_scanf_float+0x86>
 800bb52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bb5a:	463a      	mov	r2, r7
 800bb5c:	4640      	mov	r0, r8
 800bb5e:	4798      	blx	r3
 800bb60:	6923      	ldr	r3, [r4, #16]
 800bb62:	3b01      	subs	r3, #1
 800bb64:	6123      	str	r3, [r4, #16]
 800bb66:	e7f0      	b.n	800bb4a <_scanf_float+0x2b6>
 800bb68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bb6c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800bb70:	463a      	mov	r2, r7
 800bb72:	4640      	mov	r0, r8
 800bb74:	4798      	blx	r3
 800bb76:	6923      	ldr	r3, [r4, #16]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	6123      	str	r3, [r4, #16]
 800bb7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb80:	fa5f fa8a 	uxtb.w	sl, sl
 800bb84:	f1ba 0f02 	cmp.w	sl, #2
 800bb88:	d1ee      	bne.n	800bb68 <_scanf_float+0x2d4>
 800bb8a:	3d03      	subs	r5, #3
 800bb8c:	b2ed      	uxtb	r5, r5
 800bb8e:	1b76      	subs	r6, r6, r5
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	05da      	lsls	r2, r3, #23
 800bb94:	d530      	bpl.n	800bbf8 <_scanf_float+0x364>
 800bb96:	055b      	lsls	r3, r3, #21
 800bb98:	d511      	bpl.n	800bbbe <_scanf_float+0x32a>
 800bb9a:	9b01      	ldr	r3, [sp, #4]
 800bb9c:	429e      	cmp	r6, r3
 800bb9e:	f67f aebc 	bls.w	800b91a <_scanf_float+0x86>
 800bba2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bba6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bbaa:	463a      	mov	r2, r7
 800bbac:	4640      	mov	r0, r8
 800bbae:	4798      	blx	r3
 800bbb0:	6923      	ldr	r3, [r4, #16]
 800bbb2:	3b01      	subs	r3, #1
 800bbb4:	6123      	str	r3, [r4, #16]
 800bbb6:	e7f0      	b.n	800bb9a <_scanf_float+0x306>
 800bbb8:	46aa      	mov	sl, r5
 800bbba:	46b3      	mov	fp, r6
 800bbbc:	e7de      	b.n	800bb7c <_scanf_float+0x2e8>
 800bbbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800bbc2:	6923      	ldr	r3, [r4, #16]
 800bbc4:	2965      	cmp	r1, #101	@ 0x65
 800bbc6:	f103 33ff 	add.w	r3, r3, #4294967295
 800bbca:	f106 35ff 	add.w	r5, r6, #4294967295
 800bbce:	6123      	str	r3, [r4, #16]
 800bbd0:	d00c      	beq.n	800bbec <_scanf_float+0x358>
 800bbd2:	2945      	cmp	r1, #69	@ 0x45
 800bbd4:	d00a      	beq.n	800bbec <_scanf_float+0x358>
 800bbd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbda:	463a      	mov	r2, r7
 800bbdc:	4640      	mov	r0, r8
 800bbde:	4798      	blx	r3
 800bbe0:	6923      	ldr	r3, [r4, #16]
 800bbe2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	1eb5      	subs	r5, r6, #2
 800bbea:	6123      	str	r3, [r4, #16]
 800bbec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800bbf0:	463a      	mov	r2, r7
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	4798      	blx	r3
 800bbf6:	462e      	mov	r6, r5
 800bbf8:	6822      	ldr	r2, [r4, #0]
 800bbfa:	f012 0210 	ands.w	r2, r2, #16
 800bbfe:	d001      	beq.n	800bc04 <_scanf_float+0x370>
 800bc00:	2000      	movs	r0, #0
 800bc02:	e68b      	b.n	800b91c <_scanf_float+0x88>
 800bc04:	7032      	strb	r2, [r6, #0]
 800bc06:	6823      	ldr	r3, [r4, #0]
 800bc08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800bc0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc10:	d11c      	bne.n	800bc4c <_scanf_float+0x3b8>
 800bc12:	9b02      	ldr	r3, [sp, #8]
 800bc14:	454b      	cmp	r3, r9
 800bc16:	eba3 0209 	sub.w	r2, r3, r9
 800bc1a:	d123      	bne.n	800bc64 <_scanf_float+0x3d0>
 800bc1c:	9901      	ldr	r1, [sp, #4]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	4640      	mov	r0, r8
 800bc22:	f7ff f975 	bl	800af10 <_strtod_r>
 800bc26:	9b03      	ldr	r3, [sp, #12]
 800bc28:	6821      	ldr	r1, [r4, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f011 0f02 	tst.w	r1, #2
 800bc30:	ec57 6b10 	vmov	r6, r7, d0
 800bc34:	f103 0204 	add.w	r2, r3, #4
 800bc38:	d01f      	beq.n	800bc7a <_scanf_float+0x3e6>
 800bc3a:	9903      	ldr	r1, [sp, #12]
 800bc3c:	600a      	str	r2, [r1, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	e9c3 6700 	strd	r6, r7, [r3]
 800bc44:	68e3      	ldr	r3, [r4, #12]
 800bc46:	3301      	adds	r3, #1
 800bc48:	60e3      	str	r3, [r4, #12]
 800bc4a:	e7d9      	b.n	800bc00 <_scanf_float+0x36c>
 800bc4c:	9b04      	ldr	r3, [sp, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d0e4      	beq.n	800bc1c <_scanf_float+0x388>
 800bc52:	9905      	ldr	r1, [sp, #20]
 800bc54:	230a      	movs	r3, #10
 800bc56:	3101      	adds	r1, #1
 800bc58:	4640      	mov	r0, r8
 800bc5a:	f002 f9e5 	bl	800e028 <_strtol_r>
 800bc5e:	9b04      	ldr	r3, [sp, #16]
 800bc60:	9e05      	ldr	r6, [sp, #20]
 800bc62:	1ac2      	subs	r2, r0, r3
 800bc64:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800bc68:	429e      	cmp	r6, r3
 800bc6a:	bf28      	it	cs
 800bc6c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800bc70:	4910      	ldr	r1, [pc, #64]	@ (800bcb4 <_scanf_float+0x420>)
 800bc72:	4630      	mov	r0, r6
 800bc74:	f000 f8fe 	bl	800be74 <siprintf>
 800bc78:	e7d0      	b.n	800bc1c <_scanf_float+0x388>
 800bc7a:	f011 0f04 	tst.w	r1, #4
 800bc7e:	9903      	ldr	r1, [sp, #12]
 800bc80:	600a      	str	r2, [r1, #0]
 800bc82:	d1dc      	bne.n	800bc3e <_scanf_float+0x3aa>
 800bc84:	681d      	ldr	r5, [r3, #0]
 800bc86:	4632      	mov	r2, r6
 800bc88:	463b      	mov	r3, r7
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	f7f4 ff4d 	bl	8000b2c <__aeabi_dcmpun>
 800bc92:	b128      	cbz	r0, 800bca0 <_scanf_float+0x40c>
 800bc94:	4808      	ldr	r0, [pc, #32]	@ (800bcb8 <_scanf_float+0x424>)
 800bc96:	f000 f9fb 	bl	800c090 <nanf>
 800bc9a:	ed85 0a00 	vstr	s0, [r5]
 800bc9e:	e7d1      	b.n	800bc44 <_scanf_float+0x3b0>
 800bca0:	4630      	mov	r0, r6
 800bca2:	4639      	mov	r1, r7
 800bca4:	f7f4 ffa0 	bl	8000be8 <__aeabi_d2f>
 800bca8:	6028      	str	r0, [r5, #0]
 800bcaa:	e7cb      	b.n	800bc44 <_scanf_float+0x3b0>
 800bcac:	f04f 0900 	mov.w	r9, #0
 800bcb0:	e629      	b.n	800b906 <_scanf_float+0x72>
 800bcb2:	bf00      	nop
 800bcb4:	0800ffb4 	.word	0x0800ffb4
 800bcb8:	08010355 	.word	0x08010355

0800bcbc <std>:
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	b510      	push	{r4, lr}
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	e9c0 3300 	strd	r3, r3, [r0]
 800bcc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcca:	6083      	str	r3, [r0, #8]
 800bccc:	8181      	strh	r1, [r0, #12]
 800bcce:	6643      	str	r3, [r0, #100]	@ 0x64
 800bcd0:	81c2      	strh	r2, [r0, #14]
 800bcd2:	6183      	str	r3, [r0, #24]
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	2208      	movs	r2, #8
 800bcd8:	305c      	adds	r0, #92	@ 0x5c
 800bcda:	f000 f92e 	bl	800bf3a <memset>
 800bcde:	4b0d      	ldr	r3, [pc, #52]	@ (800bd14 <std+0x58>)
 800bce0:	6263      	str	r3, [r4, #36]	@ 0x24
 800bce2:	4b0d      	ldr	r3, [pc, #52]	@ (800bd18 <std+0x5c>)
 800bce4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bce6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd1c <std+0x60>)
 800bce8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bcea:	4b0d      	ldr	r3, [pc, #52]	@ (800bd20 <std+0x64>)
 800bcec:	6323      	str	r3, [r4, #48]	@ 0x30
 800bcee:	4b0d      	ldr	r3, [pc, #52]	@ (800bd24 <std+0x68>)
 800bcf0:	6224      	str	r4, [r4, #32]
 800bcf2:	429c      	cmp	r4, r3
 800bcf4:	d006      	beq.n	800bd04 <std+0x48>
 800bcf6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bcfa:	4294      	cmp	r4, r2
 800bcfc:	d002      	beq.n	800bd04 <std+0x48>
 800bcfe:	33d0      	adds	r3, #208	@ 0xd0
 800bd00:	429c      	cmp	r4, r3
 800bd02:	d105      	bne.n	800bd10 <std+0x54>
 800bd04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd0c:	f000 b9a4 	b.w	800c058 <__retarget_lock_init_recursive>
 800bd10:	bd10      	pop	{r4, pc}
 800bd12:	bf00      	nop
 800bd14:	0800beb5 	.word	0x0800beb5
 800bd18:	0800bed7 	.word	0x0800bed7
 800bd1c:	0800bf0f 	.word	0x0800bf0f
 800bd20:	0800bf33 	.word	0x0800bf33
 800bd24:	200006d8 	.word	0x200006d8

0800bd28 <stdio_exit_handler>:
 800bd28:	4a02      	ldr	r2, [pc, #8]	@ (800bd34 <stdio_exit_handler+0xc>)
 800bd2a:	4903      	ldr	r1, [pc, #12]	@ (800bd38 <stdio_exit_handler+0x10>)
 800bd2c:	4803      	ldr	r0, [pc, #12]	@ (800bd3c <stdio_exit_handler+0x14>)
 800bd2e:	f000 b869 	b.w	800be04 <_fwalk_sglue>
 800bd32:	bf00      	nop
 800bd34:	20000038 	.word	0x20000038
 800bd38:	0800e681 	.word	0x0800e681
 800bd3c:	200001b4 	.word	0x200001b4

0800bd40 <cleanup_stdio>:
 800bd40:	6841      	ldr	r1, [r0, #4]
 800bd42:	4b0c      	ldr	r3, [pc, #48]	@ (800bd74 <cleanup_stdio+0x34>)
 800bd44:	4299      	cmp	r1, r3
 800bd46:	b510      	push	{r4, lr}
 800bd48:	4604      	mov	r4, r0
 800bd4a:	d001      	beq.n	800bd50 <cleanup_stdio+0x10>
 800bd4c:	f002 fc98 	bl	800e680 <_fflush_r>
 800bd50:	68a1      	ldr	r1, [r4, #8]
 800bd52:	4b09      	ldr	r3, [pc, #36]	@ (800bd78 <cleanup_stdio+0x38>)
 800bd54:	4299      	cmp	r1, r3
 800bd56:	d002      	beq.n	800bd5e <cleanup_stdio+0x1e>
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f002 fc91 	bl	800e680 <_fflush_r>
 800bd5e:	68e1      	ldr	r1, [r4, #12]
 800bd60:	4b06      	ldr	r3, [pc, #24]	@ (800bd7c <cleanup_stdio+0x3c>)
 800bd62:	4299      	cmp	r1, r3
 800bd64:	d004      	beq.n	800bd70 <cleanup_stdio+0x30>
 800bd66:	4620      	mov	r0, r4
 800bd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd6c:	f002 bc88 	b.w	800e680 <_fflush_r>
 800bd70:	bd10      	pop	{r4, pc}
 800bd72:	bf00      	nop
 800bd74:	200006d8 	.word	0x200006d8
 800bd78:	20000740 	.word	0x20000740
 800bd7c:	200007a8 	.word	0x200007a8

0800bd80 <global_stdio_init.part.0>:
 800bd80:	b510      	push	{r4, lr}
 800bd82:	4b0b      	ldr	r3, [pc, #44]	@ (800bdb0 <global_stdio_init.part.0+0x30>)
 800bd84:	4c0b      	ldr	r4, [pc, #44]	@ (800bdb4 <global_stdio_init.part.0+0x34>)
 800bd86:	4a0c      	ldr	r2, [pc, #48]	@ (800bdb8 <global_stdio_init.part.0+0x38>)
 800bd88:	601a      	str	r2, [r3, #0]
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	2104      	movs	r1, #4
 800bd90:	f7ff ff94 	bl	800bcbc <std>
 800bd94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd98:	2201      	movs	r2, #1
 800bd9a:	2109      	movs	r1, #9
 800bd9c:	f7ff ff8e 	bl	800bcbc <std>
 800bda0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bda4:	2202      	movs	r2, #2
 800bda6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bdaa:	2112      	movs	r1, #18
 800bdac:	f7ff bf86 	b.w	800bcbc <std>
 800bdb0:	20000810 	.word	0x20000810
 800bdb4:	200006d8 	.word	0x200006d8
 800bdb8:	0800bd29 	.word	0x0800bd29

0800bdbc <__sfp_lock_acquire>:
 800bdbc:	4801      	ldr	r0, [pc, #4]	@ (800bdc4 <__sfp_lock_acquire+0x8>)
 800bdbe:	f000 b94c 	b.w	800c05a <__retarget_lock_acquire_recursive>
 800bdc2:	bf00      	nop
 800bdc4:	20000819 	.word	0x20000819

0800bdc8 <__sfp_lock_release>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	@ (800bdd0 <__sfp_lock_release+0x8>)
 800bdca:	f000 b947 	b.w	800c05c <__retarget_lock_release_recursive>
 800bdce:	bf00      	nop
 800bdd0:	20000819 	.word	0x20000819

0800bdd4 <__sinit>:
 800bdd4:	b510      	push	{r4, lr}
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	f7ff fff0 	bl	800bdbc <__sfp_lock_acquire>
 800bddc:	6a23      	ldr	r3, [r4, #32]
 800bdde:	b11b      	cbz	r3, 800bde8 <__sinit+0x14>
 800bde0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde4:	f7ff bff0 	b.w	800bdc8 <__sfp_lock_release>
 800bde8:	4b04      	ldr	r3, [pc, #16]	@ (800bdfc <__sinit+0x28>)
 800bdea:	6223      	str	r3, [r4, #32]
 800bdec:	4b04      	ldr	r3, [pc, #16]	@ (800be00 <__sinit+0x2c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d1f5      	bne.n	800bde0 <__sinit+0xc>
 800bdf4:	f7ff ffc4 	bl	800bd80 <global_stdio_init.part.0>
 800bdf8:	e7f2      	b.n	800bde0 <__sinit+0xc>
 800bdfa:	bf00      	nop
 800bdfc:	0800bd41 	.word	0x0800bd41
 800be00:	20000810 	.word	0x20000810

0800be04 <_fwalk_sglue>:
 800be04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be08:	4607      	mov	r7, r0
 800be0a:	4688      	mov	r8, r1
 800be0c:	4614      	mov	r4, r2
 800be0e:	2600      	movs	r6, #0
 800be10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be14:	f1b9 0901 	subs.w	r9, r9, #1
 800be18:	d505      	bpl.n	800be26 <_fwalk_sglue+0x22>
 800be1a:	6824      	ldr	r4, [r4, #0]
 800be1c:	2c00      	cmp	r4, #0
 800be1e:	d1f7      	bne.n	800be10 <_fwalk_sglue+0xc>
 800be20:	4630      	mov	r0, r6
 800be22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be26:	89ab      	ldrh	r3, [r5, #12]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d907      	bls.n	800be3c <_fwalk_sglue+0x38>
 800be2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be30:	3301      	adds	r3, #1
 800be32:	d003      	beq.n	800be3c <_fwalk_sglue+0x38>
 800be34:	4629      	mov	r1, r5
 800be36:	4638      	mov	r0, r7
 800be38:	47c0      	blx	r8
 800be3a:	4306      	orrs	r6, r0
 800be3c:	3568      	adds	r5, #104	@ 0x68
 800be3e:	e7e9      	b.n	800be14 <_fwalk_sglue+0x10>

0800be40 <iprintf>:
 800be40:	b40f      	push	{r0, r1, r2, r3}
 800be42:	b507      	push	{r0, r1, r2, lr}
 800be44:	4906      	ldr	r1, [pc, #24]	@ (800be60 <iprintf+0x20>)
 800be46:	ab04      	add	r3, sp, #16
 800be48:	6808      	ldr	r0, [r1, #0]
 800be4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be4e:	6881      	ldr	r1, [r0, #8]
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	f002 fa79 	bl	800e348 <_vfiprintf_r>
 800be56:	b003      	add	sp, #12
 800be58:	f85d eb04 	ldr.w	lr, [sp], #4
 800be5c:	b004      	add	sp, #16
 800be5e:	4770      	bx	lr
 800be60:	200001b0 	.word	0x200001b0

0800be64 <putchar>:
 800be64:	4b02      	ldr	r3, [pc, #8]	@ (800be70 <putchar+0xc>)
 800be66:	4601      	mov	r1, r0
 800be68:	6818      	ldr	r0, [r3, #0]
 800be6a:	6882      	ldr	r2, [r0, #8]
 800be6c:	f002 bc30 	b.w	800e6d0 <_putc_r>
 800be70:	200001b0 	.word	0x200001b0

0800be74 <siprintf>:
 800be74:	b40e      	push	{r1, r2, r3}
 800be76:	b500      	push	{lr}
 800be78:	b09c      	sub	sp, #112	@ 0x70
 800be7a:	ab1d      	add	r3, sp, #116	@ 0x74
 800be7c:	9002      	str	r0, [sp, #8]
 800be7e:	9006      	str	r0, [sp, #24]
 800be80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800be84:	4809      	ldr	r0, [pc, #36]	@ (800beac <siprintf+0x38>)
 800be86:	9107      	str	r1, [sp, #28]
 800be88:	9104      	str	r1, [sp, #16]
 800be8a:	4909      	ldr	r1, [pc, #36]	@ (800beb0 <siprintf+0x3c>)
 800be8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be90:	9105      	str	r1, [sp, #20]
 800be92:	6800      	ldr	r0, [r0, #0]
 800be94:	9301      	str	r3, [sp, #4]
 800be96:	a902      	add	r1, sp, #8
 800be98:	f002 f930 	bl	800e0fc <_svfiprintf_r>
 800be9c:	9b02      	ldr	r3, [sp, #8]
 800be9e:	2200      	movs	r2, #0
 800bea0:	701a      	strb	r2, [r3, #0]
 800bea2:	b01c      	add	sp, #112	@ 0x70
 800bea4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bea8:	b003      	add	sp, #12
 800beaa:	4770      	bx	lr
 800beac:	200001b0 	.word	0x200001b0
 800beb0:	ffff0208 	.word	0xffff0208

0800beb4 <__sread>:
 800beb4:	b510      	push	{r4, lr}
 800beb6:	460c      	mov	r4, r1
 800beb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bebc:	f000 f87e 	bl	800bfbc <_read_r>
 800bec0:	2800      	cmp	r0, #0
 800bec2:	bfab      	itete	ge
 800bec4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bec6:	89a3      	ldrhlt	r3, [r4, #12]
 800bec8:	181b      	addge	r3, r3, r0
 800beca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bece:	bfac      	ite	ge
 800bed0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bed2:	81a3      	strhlt	r3, [r4, #12]
 800bed4:	bd10      	pop	{r4, pc}

0800bed6 <__swrite>:
 800bed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beda:	461f      	mov	r7, r3
 800bedc:	898b      	ldrh	r3, [r1, #12]
 800bede:	05db      	lsls	r3, r3, #23
 800bee0:	4605      	mov	r5, r0
 800bee2:	460c      	mov	r4, r1
 800bee4:	4616      	mov	r6, r2
 800bee6:	d505      	bpl.n	800bef4 <__swrite+0x1e>
 800bee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beec:	2302      	movs	r3, #2
 800beee:	2200      	movs	r2, #0
 800bef0:	f000 f852 	bl	800bf98 <_lseek_r>
 800bef4:	89a3      	ldrh	r3, [r4, #12]
 800bef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800befa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800befe:	81a3      	strh	r3, [r4, #12]
 800bf00:	4632      	mov	r2, r6
 800bf02:	463b      	mov	r3, r7
 800bf04:	4628      	mov	r0, r5
 800bf06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf0a:	f000 b869 	b.w	800bfe0 <_write_r>

0800bf0e <__sseek>:
 800bf0e:	b510      	push	{r4, lr}
 800bf10:	460c      	mov	r4, r1
 800bf12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf16:	f000 f83f 	bl	800bf98 <_lseek_r>
 800bf1a:	1c43      	adds	r3, r0, #1
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	bf15      	itete	ne
 800bf20:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bf22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bf26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bf2a:	81a3      	strheq	r3, [r4, #12]
 800bf2c:	bf18      	it	ne
 800bf2e:	81a3      	strhne	r3, [r4, #12]
 800bf30:	bd10      	pop	{r4, pc}

0800bf32 <__sclose>:
 800bf32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf36:	f000 b81f 	b.w	800bf78 <_close_r>

0800bf3a <memset>:
 800bf3a:	4402      	add	r2, r0
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d100      	bne.n	800bf44 <memset+0xa>
 800bf42:	4770      	bx	lr
 800bf44:	f803 1b01 	strb.w	r1, [r3], #1
 800bf48:	e7f9      	b.n	800bf3e <memset+0x4>

0800bf4a <strncmp>:
 800bf4a:	b510      	push	{r4, lr}
 800bf4c:	b16a      	cbz	r2, 800bf6a <strncmp+0x20>
 800bf4e:	3901      	subs	r1, #1
 800bf50:	1884      	adds	r4, r0, r2
 800bf52:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d103      	bne.n	800bf66 <strncmp+0x1c>
 800bf5e:	42a0      	cmp	r0, r4
 800bf60:	d001      	beq.n	800bf66 <strncmp+0x1c>
 800bf62:	2a00      	cmp	r2, #0
 800bf64:	d1f5      	bne.n	800bf52 <strncmp+0x8>
 800bf66:	1ad0      	subs	r0, r2, r3
 800bf68:	bd10      	pop	{r4, pc}
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	e7fc      	b.n	800bf68 <strncmp+0x1e>
	...

0800bf70 <_localeconv_r>:
 800bf70:	4800      	ldr	r0, [pc, #0]	@ (800bf74 <_localeconv_r+0x4>)
 800bf72:	4770      	bx	lr
 800bf74:	20000134 	.word	0x20000134

0800bf78 <_close_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d06      	ldr	r5, [pc, #24]	@ (800bf94 <_close_r+0x1c>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	602b      	str	r3, [r5, #0]
 800bf84:	f7f7 fb2a 	bl	80035dc <_close>
 800bf88:	1c43      	adds	r3, r0, #1
 800bf8a:	d102      	bne.n	800bf92 <_close_r+0x1a>
 800bf8c:	682b      	ldr	r3, [r5, #0]
 800bf8e:	b103      	cbz	r3, 800bf92 <_close_r+0x1a>
 800bf90:	6023      	str	r3, [r4, #0]
 800bf92:	bd38      	pop	{r3, r4, r5, pc}
 800bf94:	20000814 	.word	0x20000814

0800bf98 <_lseek_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4d07      	ldr	r5, [pc, #28]	@ (800bfb8 <_lseek_r+0x20>)
 800bf9c:	4604      	mov	r4, r0
 800bf9e:	4608      	mov	r0, r1
 800bfa0:	4611      	mov	r1, r2
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	602a      	str	r2, [r5, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	f7f7 fb3f 	bl	800362a <_lseek>
 800bfac:	1c43      	adds	r3, r0, #1
 800bfae:	d102      	bne.n	800bfb6 <_lseek_r+0x1e>
 800bfb0:	682b      	ldr	r3, [r5, #0]
 800bfb2:	b103      	cbz	r3, 800bfb6 <_lseek_r+0x1e>
 800bfb4:	6023      	str	r3, [r4, #0]
 800bfb6:	bd38      	pop	{r3, r4, r5, pc}
 800bfb8:	20000814 	.word	0x20000814

0800bfbc <_read_r>:
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	4d07      	ldr	r5, [pc, #28]	@ (800bfdc <_read_r+0x20>)
 800bfc0:	4604      	mov	r4, r0
 800bfc2:	4608      	mov	r0, r1
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	602a      	str	r2, [r5, #0]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	f7f7 facd 	bl	800356a <_read>
 800bfd0:	1c43      	adds	r3, r0, #1
 800bfd2:	d102      	bne.n	800bfda <_read_r+0x1e>
 800bfd4:	682b      	ldr	r3, [r5, #0]
 800bfd6:	b103      	cbz	r3, 800bfda <_read_r+0x1e>
 800bfd8:	6023      	str	r3, [r4, #0]
 800bfda:	bd38      	pop	{r3, r4, r5, pc}
 800bfdc:	20000814 	.word	0x20000814

0800bfe0 <_write_r>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	4d07      	ldr	r5, [pc, #28]	@ (800c000 <_write_r+0x20>)
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	4608      	mov	r0, r1
 800bfe8:	4611      	mov	r1, r2
 800bfea:	2200      	movs	r2, #0
 800bfec:	602a      	str	r2, [r5, #0]
 800bfee:	461a      	mov	r2, r3
 800bff0:	f7f7 fad8 	bl	80035a4 <_write>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d102      	bne.n	800bffe <_write_r+0x1e>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	b103      	cbz	r3, 800bffe <_write_r+0x1e>
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	bd38      	pop	{r3, r4, r5, pc}
 800c000:	20000814 	.word	0x20000814

0800c004 <__errno>:
 800c004:	4b01      	ldr	r3, [pc, #4]	@ (800c00c <__errno+0x8>)
 800c006:	6818      	ldr	r0, [r3, #0]
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	200001b0 	.word	0x200001b0

0800c010 <__libc_init_array>:
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	4d0d      	ldr	r5, [pc, #52]	@ (800c048 <__libc_init_array+0x38>)
 800c014:	4c0d      	ldr	r4, [pc, #52]	@ (800c04c <__libc_init_array+0x3c>)
 800c016:	1b64      	subs	r4, r4, r5
 800c018:	10a4      	asrs	r4, r4, #2
 800c01a:	2600      	movs	r6, #0
 800c01c:	42a6      	cmp	r6, r4
 800c01e:	d109      	bne.n	800c034 <__libc_init_array+0x24>
 800c020:	4d0b      	ldr	r5, [pc, #44]	@ (800c050 <__libc_init_array+0x40>)
 800c022:	4c0c      	ldr	r4, [pc, #48]	@ (800c054 <__libc_init_array+0x44>)
 800c024:	f003 fec8 	bl	800fdb8 <_init>
 800c028:	1b64      	subs	r4, r4, r5
 800c02a:	10a4      	asrs	r4, r4, #2
 800c02c:	2600      	movs	r6, #0
 800c02e:	42a6      	cmp	r6, r4
 800c030:	d105      	bne.n	800c03e <__libc_init_array+0x2e>
 800c032:	bd70      	pop	{r4, r5, r6, pc}
 800c034:	f855 3b04 	ldr.w	r3, [r5], #4
 800c038:	4798      	blx	r3
 800c03a:	3601      	adds	r6, #1
 800c03c:	e7ee      	b.n	800c01c <__libc_init_array+0xc>
 800c03e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c042:	4798      	blx	r3
 800c044:	3601      	adds	r6, #1
 800c046:	e7f2      	b.n	800c02e <__libc_init_array+0x1e>
 800c048:	08010538 	.word	0x08010538
 800c04c:	08010538 	.word	0x08010538
 800c050:	08010538 	.word	0x08010538
 800c054:	0801053c 	.word	0x0801053c

0800c058 <__retarget_lock_init_recursive>:
 800c058:	4770      	bx	lr

0800c05a <__retarget_lock_acquire_recursive>:
 800c05a:	4770      	bx	lr

0800c05c <__retarget_lock_release_recursive>:
 800c05c:	4770      	bx	lr

0800c05e <memcpy>:
 800c05e:	440a      	add	r2, r1
 800c060:	4291      	cmp	r1, r2
 800c062:	f100 33ff 	add.w	r3, r0, #4294967295
 800c066:	d100      	bne.n	800c06a <memcpy+0xc>
 800c068:	4770      	bx	lr
 800c06a:	b510      	push	{r4, lr}
 800c06c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c070:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c074:	4291      	cmp	r1, r2
 800c076:	d1f9      	bne.n	800c06c <memcpy+0xe>
 800c078:	bd10      	pop	{r4, pc}
 800c07a:	0000      	movs	r0, r0
 800c07c:	0000      	movs	r0, r0
	...

0800c080 <nan>:
 800c080:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c088 <nan+0x8>
 800c084:	4770      	bx	lr
 800c086:	bf00      	nop
 800c088:	00000000 	.word	0x00000000
 800c08c:	7ff80000 	.word	0x7ff80000

0800c090 <nanf>:
 800c090:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c098 <nanf+0x8>
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	7fc00000 	.word	0x7fc00000

0800c09c <quorem>:
 800c09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a0:	6903      	ldr	r3, [r0, #16]
 800c0a2:	690c      	ldr	r4, [r1, #16]
 800c0a4:	42a3      	cmp	r3, r4
 800c0a6:	4607      	mov	r7, r0
 800c0a8:	db7e      	blt.n	800c1a8 <quorem+0x10c>
 800c0aa:	3c01      	subs	r4, #1
 800c0ac:	f101 0814 	add.w	r8, r1, #20
 800c0b0:	00a3      	lsls	r3, r4, #2
 800c0b2:	f100 0514 	add.w	r5, r0, #20
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c0c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c0ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800c0d2:	d32e      	bcc.n	800c132 <quorem+0x96>
 800c0d4:	f04f 0a00 	mov.w	sl, #0
 800c0d8:	46c4      	mov	ip, r8
 800c0da:	46ae      	mov	lr, r5
 800c0dc:	46d3      	mov	fp, sl
 800c0de:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c0e2:	b298      	uxth	r0, r3
 800c0e4:	fb06 a000 	mla	r0, r6, r0, sl
 800c0e8:	0c02      	lsrs	r2, r0, #16
 800c0ea:	0c1b      	lsrs	r3, r3, #16
 800c0ec:	fb06 2303 	mla	r3, r6, r3, r2
 800c0f0:	f8de 2000 	ldr.w	r2, [lr]
 800c0f4:	b280      	uxth	r0, r0
 800c0f6:	b292      	uxth	r2, r2
 800c0f8:	1a12      	subs	r2, r2, r0
 800c0fa:	445a      	add	r2, fp
 800c0fc:	f8de 0000 	ldr.w	r0, [lr]
 800c100:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c104:	b29b      	uxth	r3, r3
 800c106:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c10a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c10e:	b292      	uxth	r2, r2
 800c110:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c114:	45e1      	cmp	r9, ip
 800c116:	f84e 2b04 	str.w	r2, [lr], #4
 800c11a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c11e:	d2de      	bcs.n	800c0de <quorem+0x42>
 800c120:	9b00      	ldr	r3, [sp, #0]
 800c122:	58eb      	ldr	r3, [r5, r3]
 800c124:	b92b      	cbnz	r3, 800c132 <quorem+0x96>
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	3b04      	subs	r3, #4
 800c12a:	429d      	cmp	r5, r3
 800c12c:	461a      	mov	r2, r3
 800c12e:	d32f      	bcc.n	800c190 <quorem+0xf4>
 800c130:	613c      	str	r4, [r7, #16]
 800c132:	4638      	mov	r0, r7
 800c134:	f001 fd10 	bl	800db58 <__mcmp>
 800c138:	2800      	cmp	r0, #0
 800c13a:	db25      	blt.n	800c188 <quorem+0xec>
 800c13c:	4629      	mov	r1, r5
 800c13e:	2000      	movs	r0, #0
 800c140:	f858 2b04 	ldr.w	r2, [r8], #4
 800c144:	f8d1 c000 	ldr.w	ip, [r1]
 800c148:	fa1f fe82 	uxth.w	lr, r2
 800c14c:	fa1f f38c 	uxth.w	r3, ip
 800c150:	eba3 030e 	sub.w	r3, r3, lr
 800c154:	4403      	add	r3, r0
 800c156:	0c12      	lsrs	r2, r2, #16
 800c158:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c15c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c160:	b29b      	uxth	r3, r3
 800c162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c166:	45c1      	cmp	r9, r8
 800c168:	f841 3b04 	str.w	r3, [r1], #4
 800c16c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c170:	d2e6      	bcs.n	800c140 <quorem+0xa4>
 800c172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c17a:	b922      	cbnz	r2, 800c186 <quorem+0xea>
 800c17c:	3b04      	subs	r3, #4
 800c17e:	429d      	cmp	r5, r3
 800c180:	461a      	mov	r2, r3
 800c182:	d30b      	bcc.n	800c19c <quorem+0x100>
 800c184:	613c      	str	r4, [r7, #16]
 800c186:	3601      	adds	r6, #1
 800c188:	4630      	mov	r0, r6
 800c18a:	b003      	add	sp, #12
 800c18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c190:	6812      	ldr	r2, [r2, #0]
 800c192:	3b04      	subs	r3, #4
 800c194:	2a00      	cmp	r2, #0
 800c196:	d1cb      	bne.n	800c130 <quorem+0x94>
 800c198:	3c01      	subs	r4, #1
 800c19a:	e7c6      	b.n	800c12a <quorem+0x8e>
 800c19c:	6812      	ldr	r2, [r2, #0]
 800c19e:	3b04      	subs	r3, #4
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	d1ef      	bne.n	800c184 <quorem+0xe8>
 800c1a4:	3c01      	subs	r4, #1
 800c1a6:	e7ea      	b.n	800c17e <quorem+0xe2>
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	e7ee      	b.n	800c18a <quorem+0xee>
 800c1ac:	0000      	movs	r0, r0
	...

0800c1b0 <_dtoa_r>:
 800c1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b4:	69c7      	ldr	r7, [r0, #28]
 800c1b6:	b099      	sub	sp, #100	@ 0x64
 800c1b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c1bc:	ec55 4b10 	vmov	r4, r5, d0
 800c1c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c1c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800c1c4:	4683      	mov	fp, r0
 800c1c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800c1c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c1ca:	b97f      	cbnz	r7, 800c1ec <_dtoa_r+0x3c>
 800c1cc:	2010      	movs	r0, #16
 800c1ce:	f001 f937 	bl	800d440 <malloc>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800c1d8:	b920      	cbnz	r0, 800c1e4 <_dtoa_r+0x34>
 800c1da:	4ba7      	ldr	r3, [pc, #668]	@ (800c478 <_dtoa_r+0x2c8>)
 800c1dc:	21ef      	movs	r1, #239	@ 0xef
 800c1de:	48a7      	ldr	r0, [pc, #668]	@ (800c47c <_dtoa_r+0x2cc>)
 800c1e0:	f002 fb68 	bl	800e8b4 <__assert_func>
 800c1e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c1e8:	6007      	str	r7, [r0, #0]
 800c1ea:	60c7      	str	r7, [r0, #12]
 800c1ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c1f0:	6819      	ldr	r1, [r3, #0]
 800c1f2:	b159      	cbz	r1, 800c20c <_dtoa_r+0x5c>
 800c1f4:	685a      	ldr	r2, [r3, #4]
 800c1f6:	604a      	str	r2, [r1, #4]
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	4093      	lsls	r3, r2
 800c1fc:	608b      	str	r3, [r1, #8]
 800c1fe:	4658      	mov	r0, fp
 800c200:	f001 fa26 	bl	800d650 <_Bfree>
 800c204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]
 800c20c:	1e2b      	subs	r3, r5, #0
 800c20e:	bfb9      	ittee	lt
 800c210:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c214:	9303      	strlt	r3, [sp, #12]
 800c216:	2300      	movge	r3, #0
 800c218:	6033      	strge	r3, [r6, #0]
 800c21a:	9f03      	ldr	r7, [sp, #12]
 800c21c:	4b98      	ldr	r3, [pc, #608]	@ (800c480 <_dtoa_r+0x2d0>)
 800c21e:	bfbc      	itt	lt
 800c220:	2201      	movlt	r2, #1
 800c222:	6032      	strlt	r2, [r6, #0]
 800c224:	43bb      	bics	r3, r7
 800c226:	d112      	bne.n	800c24e <_dtoa_r+0x9e>
 800c228:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c22a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c22e:	6013      	str	r3, [r2, #0]
 800c230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c234:	4323      	orrs	r3, r4
 800c236:	f000 854d 	beq.w	800ccd4 <_dtoa_r+0xb24>
 800c23a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c23c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c494 <_dtoa_r+0x2e4>
 800c240:	2b00      	cmp	r3, #0
 800c242:	f000 854f 	beq.w	800cce4 <_dtoa_r+0xb34>
 800c246:	f10a 0303 	add.w	r3, sl, #3
 800c24a:	f000 bd49 	b.w	800cce0 <_dtoa_r+0xb30>
 800c24e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c252:	2200      	movs	r2, #0
 800c254:	ec51 0b17 	vmov	r0, r1, d7
 800c258:	2300      	movs	r3, #0
 800c25a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800c25e:	f7f4 fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 800c262:	4680      	mov	r8, r0
 800c264:	b158      	cbz	r0, 800c27e <_dtoa_r+0xce>
 800c266:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c268:	2301      	movs	r3, #1
 800c26a:	6013      	str	r3, [r2, #0]
 800c26c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c26e:	b113      	cbz	r3, 800c276 <_dtoa_r+0xc6>
 800c270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c272:	4b84      	ldr	r3, [pc, #528]	@ (800c484 <_dtoa_r+0x2d4>)
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c498 <_dtoa_r+0x2e8>
 800c27a:	f000 bd33 	b.w	800cce4 <_dtoa_r+0xb34>
 800c27e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c282:	aa16      	add	r2, sp, #88	@ 0x58
 800c284:	a917      	add	r1, sp, #92	@ 0x5c
 800c286:	4658      	mov	r0, fp
 800c288:	f001 fd86 	bl	800dd98 <__d2b>
 800c28c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800c290:	4681      	mov	r9, r0
 800c292:	2e00      	cmp	r6, #0
 800c294:	d077      	beq.n	800c386 <_dtoa_r+0x1d6>
 800c296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c298:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800c29c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c2a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c2ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4b74      	ldr	r3, [pc, #464]	@ (800c488 <_dtoa_r+0x2d8>)
 800c2b6:	f7f3 ffe7 	bl	8000288 <__aeabi_dsub>
 800c2ba:	a369      	add	r3, pc, #420	@ (adr r3, 800c460 <_dtoa_r+0x2b0>)
 800c2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c0:	f7f4 f99a 	bl	80005f8 <__aeabi_dmul>
 800c2c4:	a368      	add	r3, pc, #416	@ (adr r3, 800c468 <_dtoa_r+0x2b8>)
 800c2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ca:	f7f3 ffdf 	bl	800028c <__adddf3>
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	460d      	mov	r5, r1
 800c2d4:	f7f4 f926 	bl	8000524 <__aeabi_i2d>
 800c2d8:	a365      	add	r3, pc, #404	@ (adr r3, 800c470 <_dtoa_r+0x2c0>)
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	f7f4 f98b 	bl	80005f8 <__aeabi_dmul>
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	4620      	mov	r0, r4
 800c2e8:	4629      	mov	r1, r5
 800c2ea:	f7f3 ffcf 	bl	800028c <__adddf3>
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	460d      	mov	r5, r1
 800c2f2:	f7f4 fc31 	bl	8000b58 <__aeabi_d2iz>
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4607      	mov	r7, r0
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	4629      	mov	r1, r5
 800c300:	f7f4 fbec 	bl	8000adc <__aeabi_dcmplt>
 800c304:	b140      	cbz	r0, 800c318 <_dtoa_r+0x168>
 800c306:	4638      	mov	r0, r7
 800c308:	f7f4 f90c 	bl	8000524 <__aeabi_i2d>
 800c30c:	4622      	mov	r2, r4
 800c30e:	462b      	mov	r3, r5
 800c310:	f7f4 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 800c314:	b900      	cbnz	r0, 800c318 <_dtoa_r+0x168>
 800c316:	3f01      	subs	r7, #1
 800c318:	2f16      	cmp	r7, #22
 800c31a:	d851      	bhi.n	800c3c0 <_dtoa_r+0x210>
 800c31c:	4b5b      	ldr	r3, [pc, #364]	@ (800c48c <_dtoa_r+0x2dc>)
 800c31e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c32a:	f7f4 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800c32e:	2800      	cmp	r0, #0
 800c330:	d048      	beq.n	800c3c4 <_dtoa_r+0x214>
 800c332:	3f01      	subs	r7, #1
 800c334:	2300      	movs	r3, #0
 800c336:	9312      	str	r3, [sp, #72]	@ 0x48
 800c338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c33a:	1b9b      	subs	r3, r3, r6
 800c33c:	1e5a      	subs	r2, r3, #1
 800c33e:	bf44      	itt	mi
 800c340:	f1c3 0801 	rsbmi	r8, r3, #1
 800c344:	2300      	movmi	r3, #0
 800c346:	9208      	str	r2, [sp, #32]
 800c348:	bf54      	ite	pl
 800c34a:	f04f 0800 	movpl.w	r8, #0
 800c34e:	9308      	strmi	r3, [sp, #32]
 800c350:	2f00      	cmp	r7, #0
 800c352:	db39      	blt.n	800c3c8 <_dtoa_r+0x218>
 800c354:	9b08      	ldr	r3, [sp, #32]
 800c356:	970f      	str	r7, [sp, #60]	@ 0x3c
 800c358:	443b      	add	r3, r7
 800c35a:	9308      	str	r3, [sp, #32]
 800c35c:	2300      	movs	r3, #0
 800c35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c362:	2b09      	cmp	r3, #9
 800c364:	d864      	bhi.n	800c430 <_dtoa_r+0x280>
 800c366:	2b05      	cmp	r3, #5
 800c368:	bfc4      	itt	gt
 800c36a:	3b04      	subgt	r3, #4
 800c36c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800c36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c370:	f1a3 0302 	sub.w	r3, r3, #2
 800c374:	bfcc      	ite	gt
 800c376:	2400      	movgt	r4, #0
 800c378:	2401      	movle	r4, #1
 800c37a:	2b03      	cmp	r3, #3
 800c37c:	d863      	bhi.n	800c446 <_dtoa_r+0x296>
 800c37e:	e8df f003 	tbb	[pc, r3]
 800c382:	372a      	.short	0x372a
 800c384:	5535      	.short	0x5535
 800c386:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800c38a:	441e      	add	r6, r3
 800c38c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c390:	2b20      	cmp	r3, #32
 800c392:	bfc1      	itttt	gt
 800c394:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c398:	409f      	lslgt	r7, r3
 800c39a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c39e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c3a2:	bfd6      	itet	le
 800c3a4:	f1c3 0320 	rsble	r3, r3, #32
 800c3a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800c3ac:	fa04 f003 	lslle.w	r0, r4, r3
 800c3b0:	f7f4 f8a8 	bl	8000504 <__aeabi_ui2d>
 800c3b4:	2201      	movs	r2, #1
 800c3b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c3ba:	3e01      	subs	r6, #1
 800c3bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800c3be:	e777      	b.n	800c2b0 <_dtoa_r+0x100>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e7b8      	b.n	800c336 <_dtoa_r+0x186>
 800c3c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800c3c6:	e7b7      	b.n	800c338 <_dtoa_r+0x188>
 800c3c8:	427b      	negs	r3, r7
 800c3ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	eba8 0807 	sub.w	r8, r8, r7
 800c3d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c3d4:	e7c4      	b.n	800c360 <_dtoa_r+0x1b0>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dc35      	bgt.n	800c44c <_dtoa_r+0x29c>
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	9307      	str	r3, [sp, #28]
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c3ea:	e00b      	b.n	800c404 <_dtoa_r+0x254>
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e7f3      	b.n	800c3d8 <_dtoa_r+0x228>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c3f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3f6:	18fb      	adds	r3, r7, r3
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	bfb8      	it	lt
 800c402:	2301      	movlt	r3, #1
 800c404:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c408:	2100      	movs	r1, #0
 800c40a:	2204      	movs	r2, #4
 800c40c:	f102 0514 	add.w	r5, r2, #20
 800c410:	429d      	cmp	r5, r3
 800c412:	d91f      	bls.n	800c454 <_dtoa_r+0x2a4>
 800c414:	6041      	str	r1, [r0, #4]
 800c416:	4658      	mov	r0, fp
 800c418:	f001 f8da 	bl	800d5d0 <_Balloc>
 800c41c:	4682      	mov	sl, r0
 800c41e:	2800      	cmp	r0, #0
 800c420:	d13c      	bne.n	800c49c <_dtoa_r+0x2ec>
 800c422:	4b1b      	ldr	r3, [pc, #108]	@ (800c490 <_dtoa_r+0x2e0>)
 800c424:	4602      	mov	r2, r0
 800c426:	f240 11af 	movw	r1, #431	@ 0x1af
 800c42a:	e6d8      	b.n	800c1de <_dtoa_r+0x2e>
 800c42c:	2301      	movs	r3, #1
 800c42e:	e7e0      	b.n	800c3f2 <_dtoa_r+0x242>
 800c430:	2401      	movs	r4, #1
 800c432:	2300      	movs	r3, #0
 800c434:	9309      	str	r3, [sp, #36]	@ 0x24
 800c436:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c438:	f04f 33ff 	mov.w	r3, #4294967295
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	9307      	str	r3, [sp, #28]
 800c440:	2200      	movs	r2, #0
 800c442:	2312      	movs	r3, #18
 800c444:	e7d0      	b.n	800c3e8 <_dtoa_r+0x238>
 800c446:	2301      	movs	r3, #1
 800c448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c44a:	e7f5      	b.n	800c438 <_dtoa_r+0x288>
 800c44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	9307      	str	r3, [sp, #28]
 800c452:	e7d7      	b.n	800c404 <_dtoa_r+0x254>
 800c454:	3101      	adds	r1, #1
 800c456:	0052      	lsls	r2, r2, #1
 800c458:	e7d8      	b.n	800c40c <_dtoa_r+0x25c>
 800c45a:	bf00      	nop
 800c45c:	f3af 8000 	nop.w
 800c460:	636f4361 	.word	0x636f4361
 800c464:	3fd287a7 	.word	0x3fd287a7
 800c468:	8b60c8b3 	.word	0x8b60c8b3
 800c46c:	3fc68a28 	.word	0x3fc68a28
 800c470:	509f79fb 	.word	0x509f79fb
 800c474:	3fd34413 	.word	0x3fd34413
 800c478:	0800ffce 	.word	0x0800ffce
 800c47c:	0800ffe5 	.word	0x0800ffe5
 800c480:	7ff00000 	.word	0x7ff00000
 800c484:	0800ff91 	.word	0x0800ff91
 800c488:	3ff80000 	.word	0x3ff80000
 800c48c:	08010140 	.word	0x08010140
 800c490:	0801003d 	.word	0x0801003d
 800c494:	0800ffca 	.word	0x0800ffca
 800c498:	0800ff90 	.word	0x0800ff90
 800c49c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c4a0:	6018      	str	r0, [r3, #0]
 800c4a2:	9b07      	ldr	r3, [sp, #28]
 800c4a4:	2b0e      	cmp	r3, #14
 800c4a6:	f200 80a4 	bhi.w	800c5f2 <_dtoa_r+0x442>
 800c4aa:	2c00      	cmp	r4, #0
 800c4ac:	f000 80a1 	beq.w	800c5f2 <_dtoa_r+0x442>
 800c4b0:	2f00      	cmp	r7, #0
 800c4b2:	dd33      	ble.n	800c51c <_dtoa_r+0x36c>
 800c4b4:	4bad      	ldr	r3, [pc, #692]	@ (800c76c <_dtoa_r+0x5bc>)
 800c4b6:	f007 020f 	and.w	r2, r7, #15
 800c4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c4be:	ed93 7b00 	vldr	d7, [r3]
 800c4c2:	05f8      	lsls	r0, r7, #23
 800c4c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c4c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c4cc:	d516      	bpl.n	800c4fc <_dtoa_r+0x34c>
 800c4ce:	4ba8      	ldr	r3, [pc, #672]	@ (800c770 <_dtoa_r+0x5c0>)
 800c4d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c4d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4d8:	f7f4 f9b8 	bl	800084c <__aeabi_ddiv>
 800c4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4e0:	f004 040f 	and.w	r4, r4, #15
 800c4e4:	2603      	movs	r6, #3
 800c4e6:	4da2      	ldr	r5, [pc, #648]	@ (800c770 <_dtoa_r+0x5c0>)
 800c4e8:	b954      	cbnz	r4, 800c500 <_dtoa_r+0x350>
 800c4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4f2:	f7f4 f9ab 	bl	800084c <__aeabi_ddiv>
 800c4f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4fa:	e028      	b.n	800c54e <_dtoa_r+0x39e>
 800c4fc:	2602      	movs	r6, #2
 800c4fe:	e7f2      	b.n	800c4e6 <_dtoa_r+0x336>
 800c500:	07e1      	lsls	r1, r4, #31
 800c502:	d508      	bpl.n	800c516 <_dtoa_r+0x366>
 800c504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c508:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c50c:	f7f4 f874 	bl	80005f8 <__aeabi_dmul>
 800c510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c514:	3601      	adds	r6, #1
 800c516:	1064      	asrs	r4, r4, #1
 800c518:	3508      	adds	r5, #8
 800c51a:	e7e5      	b.n	800c4e8 <_dtoa_r+0x338>
 800c51c:	f000 80d2 	beq.w	800c6c4 <_dtoa_r+0x514>
 800c520:	427c      	negs	r4, r7
 800c522:	4b92      	ldr	r3, [pc, #584]	@ (800c76c <_dtoa_r+0x5bc>)
 800c524:	4d92      	ldr	r5, [pc, #584]	@ (800c770 <_dtoa_r+0x5c0>)
 800c526:	f004 020f 	and.w	r2, r4, #15
 800c52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c536:	f7f4 f85f 	bl	80005f8 <__aeabi_dmul>
 800c53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c53e:	1124      	asrs	r4, r4, #4
 800c540:	2300      	movs	r3, #0
 800c542:	2602      	movs	r6, #2
 800c544:	2c00      	cmp	r4, #0
 800c546:	f040 80b2 	bne.w	800c6ae <_dtoa_r+0x4fe>
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d1d3      	bne.n	800c4f6 <_dtoa_r+0x346>
 800c54e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c550:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 80b7 	beq.w	800c6c8 <_dtoa_r+0x518>
 800c55a:	4b86      	ldr	r3, [pc, #536]	@ (800c774 <_dtoa_r+0x5c4>)
 800c55c:	2200      	movs	r2, #0
 800c55e:	4620      	mov	r0, r4
 800c560:	4629      	mov	r1, r5
 800c562:	f7f4 fabb 	bl	8000adc <__aeabi_dcmplt>
 800c566:	2800      	cmp	r0, #0
 800c568:	f000 80ae 	beq.w	800c6c8 <_dtoa_r+0x518>
 800c56c:	9b07      	ldr	r3, [sp, #28]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	f000 80aa 	beq.w	800c6c8 <_dtoa_r+0x518>
 800c574:	9b00      	ldr	r3, [sp, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	dd37      	ble.n	800c5ea <_dtoa_r+0x43a>
 800c57a:	1e7b      	subs	r3, r7, #1
 800c57c:	9304      	str	r3, [sp, #16]
 800c57e:	4620      	mov	r0, r4
 800c580:	4b7d      	ldr	r3, [pc, #500]	@ (800c778 <_dtoa_r+0x5c8>)
 800c582:	2200      	movs	r2, #0
 800c584:	4629      	mov	r1, r5
 800c586:	f7f4 f837 	bl	80005f8 <__aeabi_dmul>
 800c58a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c58e:	9c00      	ldr	r4, [sp, #0]
 800c590:	3601      	adds	r6, #1
 800c592:	4630      	mov	r0, r6
 800c594:	f7f3 ffc6 	bl	8000524 <__aeabi_i2d>
 800c598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c59c:	f7f4 f82c 	bl	80005f8 <__aeabi_dmul>
 800c5a0:	4b76      	ldr	r3, [pc, #472]	@ (800c77c <_dtoa_r+0x5cc>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f7f3 fe72 	bl	800028c <__adddf3>
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c5ae:	2c00      	cmp	r4, #0
 800c5b0:	f040 808d 	bne.w	800c6ce <_dtoa_r+0x51e>
 800c5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5b8:	4b71      	ldr	r3, [pc, #452]	@ (800c780 <_dtoa_r+0x5d0>)
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f7f3 fe64 	bl	8000288 <__aeabi_dsub>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c5c8:	462a      	mov	r2, r5
 800c5ca:	4633      	mov	r3, r6
 800c5cc:	f7f4 faa4 	bl	8000b18 <__aeabi_dcmpgt>
 800c5d0:	2800      	cmp	r0, #0
 800c5d2:	f040 828b 	bne.w	800caec <_dtoa_r+0x93c>
 800c5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5da:	462a      	mov	r2, r5
 800c5dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c5e0:	f7f4 fa7c 	bl	8000adc <__aeabi_dcmplt>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	f040 8128 	bne.w	800c83a <_dtoa_r+0x68a>
 800c5ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c5ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c5f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	f2c0 815a 	blt.w	800c8ae <_dtoa_r+0x6fe>
 800c5fa:	2f0e      	cmp	r7, #14
 800c5fc:	f300 8157 	bgt.w	800c8ae <_dtoa_r+0x6fe>
 800c600:	4b5a      	ldr	r3, [pc, #360]	@ (800c76c <_dtoa_r+0x5bc>)
 800c602:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c606:	ed93 7b00 	vldr	d7, [r3]
 800c60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	ed8d 7b00 	vstr	d7, [sp]
 800c612:	da03      	bge.n	800c61c <_dtoa_r+0x46c>
 800c614:	9b07      	ldr	r3, [sp, #28]
 800c616:	2b00      	cmp	r3, #0
 800c618:	f340 8101 	ble.w	800c81e <_dtoa_r+0x66e>
 800c61c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c620:	4656      	mov	r6, sl
 800c622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c626:	4620      	mov	r0, r4
 800c628:	4629      	mov	r1, r5
 800c62a:	f7f4 f90f 	bl	800084c <__aeabi_ddiv>
 800c62e:	f7f4 fa93 	bl	8000b58 <__aeabi_d2iz>
 800c632:	4680      	mov	r8, r0
 800c634:	f7f3 ff76 	bl	8000524 <__aeabi_i2d>
 800c638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c63c:	f7f3 ffdc 	bl	80005f8 <__aeabi_dmul>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4620      	mov	r0, r4
 800c646:	4629      	mov	r1, r5
 800c648:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c64c:	f7f3 fe1c 	bl	8000288 <__aeabi_dsub>
 800c650:	f806 4b01 	strb.w	r4, [r6], #1
 800c654:	9d07      	ldr	r5, [sp, #28]
 800c656:	eba6 040a 	sub.w	r4, r6, sl
 800c65a:	42a5      	cmp	r5, r4
 800c65c:	4602      	mov	r2, r0
 800c65e:	460b      	mov	r3, r1
 800c660:	f040 8117 	bne.w	800c892 <_dtoa_r+0x6e2>
 800c664:	f7f3 fe12 	bl	800028c <__adddf3>
 800c668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c66c:	4604      	mov	r4, r0
 800c66e:	460d      	mov	r5, r1
 800c670:	f7f4 fa52 	bl	8000b18 <__aeabi_dcmpgt>
 800c674:	2800      	cmp	r0, #0
 800c676:	f040 80f9 	bne.w	800c86c <_dtoa_r+0x6bc>
 800c67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c67e:	4620      	mov	r0, r4
 800c680:	4629      	mov	r1, r5
 800c682:	f7f4 fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 800c686:	b118      	cbz	r0, 800c690 <_dtoa_r+0x4e0>
 800c688:	f018 0f01 	tst.w	r8, #1
 800c68c:	f040 80ee 	bne.w	800c86c <_dtoa_r+0x6bc>
 800c690:	4649      	mov	r1, r9
 800c692:	4658      	mov	r0, fp
 800c694:	f000 ffdc 	bl	800d650 <_Bfree>
 800c698:	2300      	movs	r3, #0
 800c69a:	7033      	strb	r3, [r6, #0]
 800c69c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c69e:	3701      	adds	r7, #1
 800c6a0:	601f      	str	r7, [r3, #0]
 800c6a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 831d 	beq.w	800cce4 <_dtoa_r+0xb34>
 800c6aa:	601e      	str	r6, [r3, #0]
 800c6ac:	e31a      	b.n	800cce4 <_dtoa_r+0xb34>
 800c6ae:	07e2      	lsls	r2, r4, #31
 800c6b0:	d505      	bpl.n	800c6be <_dtoa_r+0x50e>
 800c6b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6b6:	f7f3 ff9f 	bl	80005f8 <__aeabi_dmul>
 800c6ba:	3601      	adds	r6, #1
 800c6bc:	2301      	movs	r3, #1
 800c6be:	1064      	asrs	r4, r4, #1
 800c6c0:	3508      	adds	r5, #8
 800c6c2:	e73f      	b.n	800c544 <_dtoa_r+0x394>
 800c6c4:	2602      	movs	r6, #2
 800c6c6:	e742      	b.n	800c54e <_dtoa_r+0x39e>
 800c6c8:	9c07      	ldr	r4, [sp, #28]
 800c6ca:	9704      	str	r7, [sp, #16]
 800c6cc:	e761      	b.n	800c592 <_dtoa_r+0x3e2>
 800c6ce:	4b27      	ldr	r3, [pc, #156]	@ (800c76c <_dtoa_r+0x5bc>)
 800c6d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c6d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c6da:	4454      	add	r4, sl
 800c6dc:	2900      	cmp	r1, #0
 800c6de:	d053      	beq.n	800c788 <_dtoa_r+0x5d8>
 800c6e0:	4928      	ldr	r1, [pc, #160]	@ (800c784 <_dtoa_r+0x5d4>)
 800c6e2:	2000      	movs	r0, #0
 800c6e4:	f7f4 f8b2 	bl	800084c <__aeabi_ddiv>
 800c6e8:	4633      	mov	r3, r6
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	f7f3 fdcc 	bl	8000288 <__aeabi_dsub>
 800c6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c6f4:	4656      	mov	r6, sl
 800c6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6fa:	f7f4 fa2d 	bl	8000b58 <__aeabi_d2iz>
 800c6fe:	4605      	mov	r5, r0
 800c700:	f7f3 ff10 	bl	8000524 <__aeabi_i2d>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c70c:	f7f3 fdbc 	bl	8000288 <__aeabi_dsub>
 800c710:	3530      	adds	r5, #48	@ 0x30
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c71a:	f806 5b01 	strb.w	r5, [r6], #1
 800c71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c722:	f7f4 f9db 	bl	8000adc <__aeabi_dcmplt>
 800c726:	2800      	cmp	r0, #0
 800c728:	d171      	bne.n	800c80e <_dtoa_r+0x65e>
 800c72a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c72e:	4911      	ldr	r1, [pc, #68]	@ (800c774 <_dtoa_r+0x5c4>)
 800c730:	2000      	movs	r0, #0
 800c732:	f7f3 fda9 	bl	8000288 <__aeabi_dsub>
 800c736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c73a:	f7f4 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800c73e:	2800      	cmp	r0, #0
 800c740:	f040 8095 	bne.w	800c86e <_dtoa_r+0x6be>
 800c744:	42a6      	cmp	r6, r4
 800c746:	f43f af50 	beq.w	800c5ea <_dtoa_r+0x43a>
 800c74a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c74e:	4b0a      	ldr	r3, [pc, #40]	@ (800c778 <_dtoa_r+0x5c8>)
 800c750:	2200      	movs	r2, #0
 800c752:	f7f3 ff51 	bl	80005f8 <__aeabi_dmul>
 800c756:	4b08      	ldr	r3, [pc, #32]	@ (800c778 <_dtoa_r+0x5c8>)
 800c758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c75c:	2200      	movs	r2, #0
 800c75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c762:	f7f3 ff49 	bl	80005f8 <__aeabi_dmul>
 800c766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c76a:	e7c4      	b.n	800c6f6 <_dtoa_r+0x546>
 800c76c:	08010140 	.word	0x08010140
 800c770:	08010118 	.word	0x08010118
 800c774:	3ff00000 	.word	0x3ff00000
 800c778:	40240000 	.word	0x40240000
 800c77c:	401c0000 	.word	0x401c0000
 800c780:	40140000 	.word	0x40140000
 800c784:	3fe00000 	.word	0x3fe00000
 800c788:	4631      	mov	r1, r6
 800c78a:	4628      	mov	r0, r5
 800c78c:	f7f3 ff34 	bl	80005f8 <__aeabi_dmul>
 800c790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c794:	9415      	str	r4, [sp, #84]	@ 0x54
 800c796:	4656      	mov	r6, sl
 800c798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c79c:	f7f4 f9dc 	bl	8000b58 <__aeabi_d2iz>
 800c7a0:	4605      	mov	r5, r0
 800c7a2:	f7f3 febf 	bl	8000524 <__aeabi_i2d>
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7ae:	f7f3 fd6b 	bl	8000288 <__aeabi_dsub>
 800c7b2:	3530      	adds	r5, #48	@ 0x30
 800c7b4:	f806 5b01 	strb.w	r5, [r6], #1
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	42a6      	cmp	r6, r4
 800c7be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c7c2:	f04f 0200 	mov.w	r2, #0
 800c7c6:	d124      	bne.n	800c812 <_dtoa_r+0x662>
 800c7c8:	4bac      	ldr	r3, [pc, #688]	@ (800ca7c <_dtoa_r+0x8cc>)
 800c7ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c7ce:	f7f3 fd5d 	bl	800028c <__adddf3>
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7da:	f7f4 f99d 	bl	8000b18 <__aeabi_dcmpgt>
 800c7de:	2800      	cmp	r0, #0
 800c7e0:	d145      	bne.n	800c86e <_dtoa_r+0x6be>
 800c7e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c7e6:	49a5      	ldr	r1, [pc, #660]	@ (800ca7c <_dtoa_r+0x8cc>)
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	f7f3 fd4d 	bl	8000288 <__aeabi_dsub>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7f6:	f7f4 f971 	bl	8000adc <__aeabi_dcmplt>
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	f43f aef5 	beq.w	800c5ea <_dtoa_r+0x43a>
 800c800:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c802:	1e73      	subs	r3, r6, #1
 800c804:	9315      	str	r3, [sp, #84]	@ 0x54
 800c806:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c80a:	2b30      	cmp	r3, #48	@ 0x30
 800c80c:	d0f8      	beq.n	800c800 <_dtoa_r+0x650>
 800c80e:	9f04      	ldr	r7, [sp, #16]
 800c810:	e73e      	b.n	800c690 <_dtoa_r+0x4e0>
 800c812:	4b9b      	ldr	r3, [pc, #620]	@ (800ca80 <_dtoa_r+0x8d0>)
 800c814:	f7f3 fef0 	bl	80005f8 <__aeabi_dmul>
 800c818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c81c:	e7bc      	b.n	800c798 <_dtoa_r+0x5e8>
 800c81e:	d10c      	bne.n	800c83a <_dtoa_r+0x68a>
 800c820:	4b98      	ldr	r3, [pc, #608]	@ (800ca84 <_dtoa_r+0x8d4>)
 800c822:	2200      	movs	r2, #0
 800c824:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c828:	f7f3 fee6 	bl	80005f8 <__aeabi_dmul>
 800c82c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c830:	f7f4 f968 	bl	8000b04 <__aeabi_dcmpge>
 800c834:	2800      	cmp	r0, #0
 800c836:	f000 8157 	beq.w	800cae8 <_dtoa_r+0x938>
 800c83a:	2400      	movs	r4, #0
 800c83c:	4625      	mov	r5, r4
 800c83e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c840:	43db      	mvns	r3, r3
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	4656      	mov	r6, sl
 800c846:	2700      	movs	r7, #0
 800c848:	4621      	mov	r1, r4
 800c84a:	4658      	mov	r0, fp
 800c84c:	f000 ff00 	bl	800d650 <_Bfree>
 800c850:	2d00      	cmp	r5, #0
 800c852:	d0dc      	beq.n	800c80e <_dtoa_r+0x65e>
 800c854:	b12f      	cbz	r7, 800c862 <_dtoa_r+0x6b2>
 800c856:	42af      	cmp	r7, r5
 800c858:	d003      	beq.n	800c862 <_dtoa_r+0x6b2>
 800c85a:	4639      	mov	r1, r7
 800c85c:	4658      	mov	r0, fp
 800c85e:	f000 fef7 	bl	800d650 <_Bfree>
 800c862:	4629      	mov	r1, r5
 800c864:	4658      	mov	r0, fp
 800c866:	f000 fef3 	bl	800d650 <_Bfree>
 800c86a:	e7d0      	b.n	800c80e <_dtoa_r+0x65e>
 800c86c:	9704      	str	r7, [sp, #16]
 800c86e:	4633      	mov	r3, r6
 800c870:	461e      	mov	r6, r3
 800c872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c876:	2a39      	cmp	r2, #57	@ 0x39
 800c878:	d107      	bne.n	800c88a <_dtoa_r+0x6da>
 800c87a:	459a      	cmp	sl, r3
 800c87c:	d1f8      	bne.n	800c870 <_dtoa_r+0x6c0>
 800c87e:	9a04      	ldr	r2, [sp, #16]
 800c880:	3201      	adds	r2, #1
 800c882:	9204      	str	r2, [sp, #16]
 800c884:	2230      	movs	r2, #48	@ 0x30
 800c886:	f88a 2000 	strb.w	r2, [sl]
 800c88a:	781a      	ldrb	r2, [r3, #0]
 800c88c:	3201      	adds	r2, #1
 800c88e:	701a      	strb	r2, [r3, #0]
 800c890:	e7bd      	b.n	800c80e <_dtoa_r+0x65e>
 800c892:	4b7b      	ldr	r3, [pc, #492]	@ (800ca80 <_dtoa_r+0x8d0>)
 800c894:	2200      	movs	r2, #0
 800c896:	f7f3 feaf 	bl	80005f8 <__aeabi_dmul>
 800c89a:	2200      	movs	r2, #0
 800c89c:	2300      	movs	r3, #0
 800c89e:	4604      	mov	r4, r0
 800c8a0:	460d      	mov	r5, r1
 800c8a2:	f7f4 f911 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8a6:	2800      	cmp	r0, #0
 800c8a8:	f43f aebb 	beq.w	800c622 <_dtoa_r+0x472>
 800c8ac:	e6f0      	b.n	800c690 <_dtoa_r+0x4e0>
 800c8ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c8b0:	2a00      	cmp	r2, #0
 800c8b2:	f000 80db 	beq.w	800ca6c <_dtoa_r+0x8bc>
 800c8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8b8:	2a01      	cmp	r2, #1
 800c8ba:	f300 80bf 	bgt.w	800ca3c <_dtoa_r+0x88c>
 800c8be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c8c0:	2a00      	cmp	r2, #0
 800c8c2:	f000 80b7 	beq.w	800ca34 <_dtoa_r+0x884>
 800c8c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c8ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c8cc:	4646      	mov	r6, r8
 800c8ce:	9a08      	ldr	r2, [sp, #32]
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	441a      	add	r2, r3
 800c8d4:	4658      	mov	r0, fp
 800c8d6:	4498      	add	r8, r3
 800c8d8:	9208      	str	r2, [sp, #32]
 800c8da:	f000 ffb7 	bl	800d84c <__i2b>
 800c8de:	4605      	mov	r5, r0
 800c8e0:	b15e      	cbz	r6, 800c8fa <_dtoa_r+0x74a>
 800c8e2:	9b08      	ldr	r3, [sp, #32]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	dd08      	ble.n	800c8fa <_dtoa_r+0x74a>
 800c8e8:	42b3      	cmp	r3, r6
 800c8ea:	9a08      	ldr	r2, [sp, #32]
 800c8ec:	bfa8      	it	ge
 800c8ee:	4633      	movge	r3, r6
 800c8f0:	eba8 0803 	sub.w	r8, r8, r3
 800c8f4:	1af6      	subs	r6, r6, r3
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	9308      	str	r3, [sp, #32]
 800c8fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c8fc:	b1f3      	cbz	r3, 800c93c <_dtoa_r+0x78c>
 800c8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c900:	2b00      	cmp	r3, #0
 800c902:	f000 80b7 	beq.w	800ca74 <_dtoa_r+0x8c4>
 800c906:	b18c      	cbz	r4, 800c92c <_dtoa_r+0x77c>
 800c908:	4629      	mov	r1, r5
 800c90a:	4622      	mov	r2, r4
 800c90c:	4658      	mov	r0, fp
 800c90e:	f001 f85d 	bl	800d9cc <__pow5mult>
 800c912:	464a      	mov	r2, r9
 800c914:	4601      	mov	r1, r0
 800c916:	4605      	mov	r5, r0
 800c918:	4658      	mov	r0, fp
 800c91a:	f000 ffad 	bl	800d878 <__multiply>
 800c91e:	4649      	mov	r1, r9
 800c920:	9004      	str	r0, [sp, #16]
 800c922:	4658      	mov	r0, fp
 800c924:	f000 fe94 	bl	800d650 <_Bfree>
 800c928:	9b04      	ldr	r3, [sp, #16]
 800c92a:	4699      	mov	r9, r3
 800c92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c92e:	1b1a      	subs	r2, r3, r4
 800c930:	d004      	beq.n	800c93c <_dtoa_r+0x78c>
 800c932:	4649      	mov	r1, r9
 800c934:	4658      	mov	r0, fp
 800c936:	f001 f849 	bl	800d9cc <__pow5mult>
 800c93a:	4681      	mov	r9, r0
 800c93c:	2101      	movs	r1, #1
 800c93e:	4658      	mov	r0, fp
 800c940:	f000 ff84 	bl	800d84c <__i2b>
 800c944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c946:	4604      	mov	r4, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f000 81cf 	beq.w	800ccec <_dtoa_r+0xb3c>
 800c94e:	461a      	mov	r2, r3
 800c950:	4601      	mov	r1, r0
 800c952:	4658      	mov	r0, fp
 800c954:	f001 f83a 	bl	800d9cc <__pow5mult>
 800c958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	4604      	mov	r4, r0
 800c95e:	f300 8095 	bgt.w	800ca8c <_dtoa_r+0x8dc>
 800c962:	9b02      	ldr	r3, [sp, #8]
 800c964:	2b00      	cmp	r3, #0
 800c966:	f040 8087 	bne.w	800ca78 <_dtoa_r+0x8c8>
 800c96a:	9b03      	ldr	r3, [sp, #12]
 800c96c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c970:	2b00      	cmp	r3, #0
 800c972:	f040 8089 	bne.w	800ca88 <_dtoa_r+0x8d8>
 800c976:	9b03      	ldr	r3, [sp, #12]
 800c978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c97c:	0d1b      	lsrs	r3, r3, #20
 800c97e:	051b      	lsls	r3, r3, #20
 800c980:	b12b      	cbz	r3, 800c98e <_dtoa_r+0x7de>
 800c982:	9b08      	ldr	r3, [sp, #32]
 800c984:	3301      	adds	r3, #1
 800c986:	9308      	str	r3, [sp, #32]
 800c988:	f108 0801 	add.w	r8, r8, #1
 800c98c:	2301      	movs	r3, #1
 800c98e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c992:	2b00      	cmp	r3, #0
 800c994:	f000 81b0 	beq.w	800ccf8 <_dtoa_r+0xb48>
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c99e:	6918      	ldr	r0, [r3, #16]
 800c9a0:	f000 ff08 	bl	800d7b4 <__hi0bits>
 800c9a4:	f1c0 0020 	rsb	r0, r0, #32
 800c9a8:	9b08      	ldr	r3, [sp, #32]
 800c9aa:	4418      	add	r0, r3
 800c9ac:	f010 001f 	ands.w	r0, r0, #31
 800c9b0:	d077      	beq.n	800caa2 <_dtoa_r+0x8f2>
 800c9b2:	f1c0 0320 	rsb	r3, r0, #32
 800c9b6:	2b04      	cmp	r3, #4
 800c9b8:	dd6b      	ble.n	800ca92 <_dtoa_r+0x8e2>
 800c9ba:	9b08      	ldr	r3, [sp, #32]
 800c9bc:	f1c0 001c 	rsb	r0, r0, #28
 800c9c0:	4403      	add	r3, r0
 800c9c2:	4480      	add	r8, r0
 800c9c4:	4406      	add	r6, r0
 800c9c6:	9308      	str	r3, [sp, #32]
 800c9c8:	f1b8 0f00 	cmp.w	r8, #0
 800c9cc:	dd05      	ble.n	800c9da <_dtoa_r+0x82a>
 800c9ce:	4649      	mov	r1, r9
 800c9d0:	4642      	mov	r2, r8
 800c9d2:	4658      	mov	r0, fp
 800c9d4:	f001 f854 	bl	800da80 <__lshift>
 800c9d8:	4681      	mov	r9, r0
 800c9da:	9b08      	ldr	r3, [sp, #32]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	dd05      	ble.n	800c9ec <_dtoa_r+0x83c>
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	4658      	mov	r0, fp
 800c9e6:	f001 f84b 	bl	800da80 <__lshift>
 800c9ea:	4604      	mov	r4, r0
 800c9ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d059      	beq.n	800caa6 <_dtoa_r+0x8f6>
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	4648      	mov	r0, r9
 800c9f6:	f001 f8af 	bl	800db58 <__mcmp>
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	da53      	bge.n	800caa6 <_dtoa_r+0x8f6>
 800c9fe:	1e7b      	subs	r3, r7, #1
 800ca00:	9304      	str	r3, [sp, #16]
 800ca02:	4649      	mov	r1, r9
 800ca04:	2300      	movs	r3, #0
 800ca06:	220a      	movs	r2, #10
 800ca08:	4658      	mov	r0, fp
 800ca0a:	f000 fe43 	bl	800d694 <__multadd>
 800ca0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca10:	4681      	mov	r9, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	f000 8172 	beq.w	800ccfc <_dtoa_r+0xb4c>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	220a      	movs	r2, #10
 800ca1e:	4658      	mov	r0, fp
 800ca20:	f000 fe38 	bl	800d694 <__multadd>
 800ca24:	9b00      	ldr	r3, [sp, #0]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	4605      	mov	r5, r0
 800ca2a:	dc67      	bgt.n	800cafc <_dtoa_r+0x94c>
 800ca2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca2e:	2b02      	cmp	r3, #2
 800ca30:	dc41      	bgt.n	800cab6 <_dtoa_r+0x906>
 800ca32:	e063      	b.n	800cafc <_dtoa_r+0x94c>
 800ca34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ca36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ca3a:	e746      	b.n	800c8ca <_dtoa_r+0x71a>
 800ca3c:	9b07      	ldr	r3, [sp, #28]
 800ca3e:	1e5c      	subs	r4, r3, #1
 800ca40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca42:	42a3      	cmp	r3, r4
 800ca44:	bfbf      	itttt	lt
 800ca46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ca48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ca4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ca4c:	1ae3      	sublt	r3, r4, r3
 800ca4e:	bfb4      	ite	lt
 800ca50:	18d2      	addlt	r2, r2, r3
 800ca52:	1b1c      	subge	r4, r3, r4
 800ca54:	9b07      	ldr	r3, [sp, #28]
 800ca56:	bfbc      	itt	lt
 800ca58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ca5a:	2400      	movlt	r4, #0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	bfb5      	itete	lt
 800ca60:	eba8 0603 	sublt.w	r6, r8, r3
 800ca64:	9b07      	ldrge	r3, [sp, #28]
 800ca66:	2300      	movlt	r3, #0
 800ca68:	4646      	movge	r6, r8
 800ca6a:	e730      	b.n	800c8ce <_dtoa_r+0x71e>
 800ca6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ca6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ca70:	4646      	mov	r6, r8
 800ca72:	e735      	b.n	800c8e0 <_dtoa_r+0x730>
 800ca74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca76:	e75c      	b.n	800c932 <_dtoa_r+0x782>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	e788      	b.n	800c98e <_dtoa_r+0x7de>
 800ca7c:	3fe00000 	.word	0x3fe00000
 800ca80:	40240000 	.word	0x40240000
 800ca84:	40140000 	.word	0x40140000
 800ca88:	9b02      	ldr	r3, [sp, #8]
 800ca8a:	e780      	b.n	800c98e <_dtoa_r+0x7de>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca90:	e782      	b.n	800c998 <_dtoa_r+0x7e8>
 800ca92:	d099      	beq.n	800c9c8 <_dtoa_r+0x818>
 800ca94:	9a08      	ldr	r2, [sp, #32]
 800ca96:	331c      	adds	r3, #28
 800ca98:	441a      	add	r2, r3
 800ca9a:	4498      	add	r8, r3
 800ca9c:	441e      	add	r6, r3
 800ca9e:	9208      	str	r2, [sp, #32]
 800caa0:	e792      	b.n	800c9c8 <_dtoa_r+0x818>
 800caa2:	4603      	mov	r3, r0
 800caa4:	e7f6      	b.n	800ca94 <_dtoa_r+0x8e4>
 800caa6:	9b07      	ldr	r3, [sp, #28]
 800caa8:	9704      	str	r7, [sp, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	dc20      	bgt.n	800caf0 <_dtoa_r+0x940>
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab2:	2b02      	cmp	r3, #2
 800cab4:	dd1e      	ble.n	800caf4 <_dtoa_r+0x944>
 800cab6:	9b00      	ldr	r3, [sp, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f47f aec0 	bne.w	800c83e <_dtoa_r+0x68e>
 800cabe:	4621      	mov	r1, r4
 800cac0:	2205      	movs	r2, #5
 800cac2:	4658      	mov	r0, fp
 800cac4:	f000 fde6 	bl	800d694 <__multadd>
 800cac8:	4601      	mov	r1, r0
 800caca:	4604      	mov	r4, r0
 800cacc:	4648      	mov	r0, r9
 800cace:	f001 f843 	bl	800db58 <__mcmp>
 800cad2:	2800      	cmp	r0, #0
 800cad4:	f77f aeb3 	ble.w	800c83e <_dtoa_r+0x68e>
 800cad8:	4656      	mov	r6, sl
 800cada:	2331      	movs	r3, #49	@ 0x31
 800cadc:	f806 3b01 	strb.w	r3, [r6], #1
 800cae0:	9b04      	ldr	r3, [sp, #16]
 800cae2:	3301      	adds	r3, #1
 800cae4:	9304      	str	r3, [sp, #16]
 800cae6:	e6ae      	b.n	800c846 <_dtoa_r+0x696>
 800cae8:	9c07      	ldr	r4, [sp, #28]
 800caea:	9704      	str	r7, [sp, #16]
 800caec:	4625      	mov	r5, r4
 800caee:	e7f3      	b.n	800cad8 <_dtoa_r+0x928>
 800caf0:	9b07      	ldr	r3, [sp, #28]
 800caf2:	9300      	str	r3, [sp, #0]
 800caf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f000 8104 	beq.w	800cd04 <_dtoa_r+0xb54>
 800cafc:	2e00      	cmp	r6, #0
 800cafe:	dd05      	ble.n	800cb0c <_dtoa_r+0x95c>
 800cb00:	4629      	mov	r1, r5
 800cb02:	4632      	mov	r2, r6
 800cb04:	4658      	mov	r0, fp
 800cb06:	f000 ffbb 	bl	800da80 <__lshift>
 800cb0a:	4605      	mov	r5, r0
 800cb0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d05a      	beq.n	800cbc8 <_dtoa_r+0xa18>
 800cb12:	6869      	ldr	r1, [r5, #4]
 800cb14:	4658      	mov	r0, fp
 800cb16:	f000 fd5b 	bl	800d5d0 <_Balloc>
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	b928      	cbnz	r0, 800cb2a <_dtoa_r+0x97a>
 800cb1e:	4b84      	ldr	r3, [pc, #528]	@ (800cd30 <_dtoa_r+0xb80>)
 800cb20:	4602      	mov	r2, r0
 800cb22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cb26:	f7ff bb5a 	b.w	800c1de <_dtoa_r+0x2e>
 800cb2a:	692a      	ldr	r2, [r5, #16]
 800cb2c:	3202      	adds	r2, #2
 800cb2e:	0092      	lsls	r2, r2, #2
 800cb30:	f105 010c 	add.w	r1, r5, #12
 800cb34:	300c      	adds	r0, #12
 800cb36:	f7ff fa92 	bl	800c05e <memcpy>
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	4631      	mov	r1, r6
 800cb3e:	4658      	mov	r0, fp
 800cb40:	f000 ff9e 	bl	800da80 <__lshift>
 800cb44:	f10a 0301 	add.w	r3, sl, #1
 800cb48:	9307      	str	r3, [sp, #28]
 800cb4a:	9b00      	ldr	r3, [sp, #0]
 800cb4c:	4453      	add	r3, sl
 800cb4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cb50:	9b02      	ldr	r3, [sp, #8]
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	462f      	mov	r7, r5
 800cb58:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb5a:	4605      	mov	r5, r0
 800cb5c:	9b07      	ldr	r3, [sp, #28]
 800cb5e:	4621      	mov	r1, r4
 800cb60:	3b01      	subs	r3, #1
 800cb62:	4648      	mov	r0, r9
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	f7ff fa99 	bl	800c09c <quorem>
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	9002      	str	r0, [sp, #8]
 800cb6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cb72:	4648      	mov	r0, r9
 800cb74:	f000 fff0 	bl	800db58 <__mcmp>
 800cb78:	462a      	mov	r2, r5
 800cb7a:	9008      	str	r0, [sp, #32]
 800cb7c:	4621      	mov	r1, r4
 800cb7e:	4658      	mov	r0, fp
 800cb80:	f001 f806 	bl	800db90 <__mdiff>
 800cb84:	68c2      	ldr	r2, [r0, #12]
 800cb86:	4606      	mov	r6, r0
 800cb88:	bb02      	cbnz	r2, 800cbcc <_dtoa_r+0xa1c>
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	4648      	mov	r0, r9
 800cb8e:	f000 ffe3 	bl	800db58 <__mcmp>
 800cb92:	4602      	mov	r2, r0
 800cb94:	4631      	mov	r1, r6
 800cb96:	4658      	mov	r0, fp
 800cb98:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb9a:	f000 fd59 	bl	800d650 <_Bfree>
 800cb9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cba0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cba2:	9e07      	ldr	r6, [sp, #28]
 800cba4:	ea43 0102 	orr.w	r1, r3, r2
 800cba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cbaa:	4319      	orrs	r1, r3
 800cbac:	d110      	bne.n	800cbd0 <_dtoa_r+0xa20>
 800cbae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cbb2:	d029      	beq.n	800cc08 <_dtoa_r+0xa58>
 800cbb4:	9b08      	ldr	r3, [sp, #32]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	dd02      	ble.n	800cbc0 <_dtoa_r+0xa10>
 800cbba:	9b02      	ldr	r3, [sp, #8]
 800cbbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800cbc0:	9b00      	ldr	r3, [sp, #0]
 800cbc2:	f883 8000 	strb.w	r8, [r3]
 800cbc6:	e63f      	b.n	800c848 <_dtoa_r+0x698>
 800cbc8:	4628      	mov	r0, r5
 800cbca:	e7bb      	b.n	800cb44 <_dtoa_r+0x994>
 800cbcc:	2201      	movs	r2, #1
 800cbce:	e7e1      	b.n	800cb94 <_dtoa_r+0x9e4>
 800cbd0:	9b08      	ldr	r3, [sp, #32]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	db04      	blt.n	800cbe0 <_dtoa_r+0xa30>
 800cbd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cbd8:	430b      	orrs	r3, r1
 800cbda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cbdc:	430b      	orrs	r3, r1
 800cbde:	d120      	bne.n	800cc22 <_dtoa_r+0xa72>
 800cbe0:	2a00      	cmp	r2, #0
 800cbe2:	dded      	ble.n	800cbc0 <_dtoa_r+0xa10>
 800cbe4:	4649      	mov	r1, r9
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	4658      	mov	r0, fp
 800cbea:	f000 ff49 	bl	800da80 <__lshift>
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4681      	mov	r9, r0
 800cbf2:	f000 ffb1 	bl	800db58 <__mcmp>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	dc03      	bgt.n	800cc02 <_dtoa_r+0xa52>
 800cbfa:	d1e1      	bne.n	800cbc0 <_dtoa_r+0xa10>
 800cbfc:	f018 0f01 	tst.w	r8, #1
 800cc00:	d0de      	beq.n	800cbc0 <_dtoa_r+0xa10>
 800cc02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc06:	d1d8      	bne.n	800cbba <_dtoa_r+0xa0a>
 800cc08:	9a00      	ldr	r2, [sp, #0]
 800cc0a:	2339      	movs	r3, #57	@ 0x39
 800cc0c:	7013      	strb	r3, [r2, #0]
 800cc0e:	4633      	mov	r3, r6
 800cc10:	461e      	mov	r6, r3
 800cc12:	3b01      	subs	r3, #1
 800cc14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cc18:	2a39      	cmp	r2, #57	@ 0x39
 800cc1a:	d052      	beq.n	800ccc2 <_dtoa_r+0xb12>
 800cc1c:	3201      	adds	r2, #1
 800cc1e:	701a      	strb	r2, [r3, #0]
 800cc20:	e612      	b.n	800c848 <_dtoa_r+0x698>
 800cc22:	2a00      	cmp	r2, #0
 800cc24:	dd07      	ble.n	800cc36 <_dtoa_r+0xa86>
 800cc26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cc2a:	d0ed      	beq.n	800cc08 <_dtoa_r+0xa58>
 800cc2c:	9a00      	ldr	r2, [sp, #0]
 800cc2e:	f108 0301 	add.w	r3, r8, #1
 800cc32:	7013      	strb	r3, [r2, #0]
 800cc34:	e608      	b.n	800c848 <_dtoa_r+0x698>
 800cc36:	9b07      	ldr	r3, [sp, #28]
 800cc38:	9a07      	ldr	r2, [sp, #28]
 800cc3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cc3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d028      	beq.n	800cc96 <_dtoa_r+0xae6>
 800cc44:	4649      	mov	r1, r9
 800cc46:	2300      	movs	r3, #0
 800cc48:	220a      	movs	r2, #10
 800cc4a:	4658      	mov	r0, fp
 800cc4c:	f000 fd22 	bl	800d694 <__multadd>
 800cc50:	42af      	cmp	r7, r5
 800cc52:	4681      	mov	r9, r0
 800cc54:	f04f 0300 	mov.w	r3, #0
 800cc58:	f04f 020a 	mov.w	r2, #10
 800cc5c:	4639      	mov	r1, r7
 800cc5e:	4658      	mov	r0, fp
 800cc60:	d107      	bne.n	800cc72 <_dtoa_r+0xac2>
 800cc62:	f000 fd17 	bl	800d694 <__multadd>
 800cc66:	4607      	mov	r7, r0
 800cc68:	4605      	mov	r5, r0
 800cc6a:	9b07      	ldr	r3, [sp, #28]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	9307      	str	r3, [sp, #28]
 800cc70:	e774      	b.n	800cb5c <_dtoa_r+0x9ac>
 800cc72:	f000 fd0f 	bl	800d694 <__multadd>
 800cc76:	4629      	mov	r1, r5
 800cc78:	4607      	mov	r7, r0
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	220a      	movs	r2, #10
 800cc7e:	4658      	mov	r0, fp
 800cc80:	f000 fd08 	bl	800d694 <__multadd>
 800cc84:	4605      	mov	r5, r0
 800cc86:	e7f0      	b.n	800cc6a <_dtoa_r+0xaba>
 800cc88:	9b00      	ldr	r3, [sp, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	bfcc      	ite	gt
 800cc8e:	461e      	movgt	r6, r3
 800cc90:	2601      	movle	r6, #1
 800cc92:	4456      	add	r6, sl
 800cc94:	2700      	movs	r7, #0
 800cc96:	4649      	mov	r1, r9
 800cc98:	2201      	movs	r2, #1
 800cc9a:	4658      	mov	r0, fp
 800cc9c:	f000 fef0 	bl	800da80 <__lshift>
 800cca0:	4621      	mov	r1, r4
 800cca2:	4681      	mov	r9, r0
 800cca4:	f000 ff58 	bl	800db58 <__mcmp>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	dcb0      	bgt.n	800cc0e <_dtoa_r+0xa5e>
 800ccac:	d102      	bne.n	800ccb4 <_dtoa_r+0xb04>
 800ccae:	f018 0f01 	tst.w	r8, #1
 800ccb2:	d1ac      	bne.n	800cc0e <_dtoa_r+0xa5e>
 800ccb4:	4633      	mov	r3, r6
 800ccb6:	461e      	mov	r6, r3
 800ccb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccbc:	2a30      	cmp	r2, #48	@ 0x30
 800ccbe:	d0fa      	beq.n	800ccb6 <_dtoa_r+0xb06>
 800ccc0:	e5c2      	b.n	800c848 <_dtoa_r+0x698>
 800ccc2:	459a      	cmp	sl, r3
 800ccc4:	d1a4      	bne.n	800cc10 <_dtoa_r+0xa60>
 800ccc6:	9b04      	ldr	r3, [sp, #16]
 800ccc8:	3301      	adds	r3, #1
 800ccca:	9304      	str	r3, [sp, #16]
 800cccc:	2331      	movs	r3, #49	@ 0x31
 800ccce:	f88a 3000 	strb.w	r3, [sl]
 800ccd2:	e5b9      	b.n	800c848 <_dtoa_r+0x698>
 800ccd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ccd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cd34 <_dtoa_r+0xb84>
 800ccda:	b11b      	cbz	r3, 800cce4 <_dtoa_r+0xb34>
 800ccdc:	f10a 0308 	add.w	r3, sl, #8
 800cce0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cce2:	6013      	str	r3, [r2, #0]
 800cce4:	4650      	mov	r0, sl
 800cce6:	b019      	add	sp, #100	@ 0x64
 800cce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	f77f ae37 	ble.w	800c962 <_dtoa_r+0x7b2>
 800ccf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ccf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ccf8:	2001      	movs	r0, #1
 800ccfa:	e655      	b.n	800c9a8 <_dtoa_r+0x7f8>
 800ccfc:	9b00      	ldr	r3, [sp, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f77f aed6 	ble.w	800cab0 <_dtoa_r+0x900>
 800cd04:	4656      	mov	r6, sl
 800cd06:	4621      	mov	r1, r4
 800cd08:	4648      	mov	r0, r9
 800cd0a:	f7ff f9c7 	bl	800c09c <quorem>
 800cd0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cd12:	f806 8b01 	strb.w	r8, [r6], #1
 800cd16:	9b00      	ldr	r3, [sp, #0]
 800cd18:	eba6 020a 	sub.w	r2, r6, sl
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	ddb3      	ble.n	800cc88 <_dtoa_r+0xad8>
 800cd20:	4649      	mov	r1, r9
 800cd22:	2300      	movs	r3, #0
 800cd24:	220a      	movs	r2, #10
 800cd26:	4658      	mov	r0, fp
 800cd28:	f000 fcb4 	bl	800d694 <__multadd>
 800cd2c:	4681      	mov	r9, r0
 800cd2e:	e7ea      	b.n	800cd06 <_dtoa_r+0xb56>
 800cd30:	0801003d 	.word	0x0801003d
 800cd34:	0800ffc1 	.word	0x0800ffc1

0800cd38 <_free_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4605      	mov	r5, r0
 800cd3c:	2900      	cmp	r1, #0
 800cd3e:	d041      	beq.n	800cdc4 <_free_r+0x8c>
 800cd40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd44:	1f0c      	subs	r4, r1, #4
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	bfb8      	it	lt
 800cd4a:	18e4      	addlt	r4, r4, r3
 800cd4c:	f000 fc34 	bl	800d5b8 <__malloc_lock>
 800cd50:	4a1d      	ldr	r2, [pc, #116]	@ (800cdc8 <_free_r+0x90>)
 800cd52:	6813      	ldr	r3, [r2, #0]
 800cd54:	b933      	cbnz	r3, 800cd64 <_free_r+0x2c>
 800cd56:	6063      	str	r3, [r4, #4]
 800cd58:	6014      	str	r4, [r2, #0]
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd60:	f000 bc30 	b.w	800d5c4 <__malloc_unlock>
 800cd64:	42a3      	cmp	r3, r4
 800cd66:	d908      	bls.n	800cd7a <_free_r+0x42>
 800cd68:	6820      	ldr	r0, [r4, #0]
 800cd6a:	1821      	adds	r1, r4, r0
 800cd6c:	428b      	cmp	r3, r1
 800cd6e:	bf01      	itttt	eq
 800cd70:	6819      	ldreq	r1, [r3, #0]
 800cd72:	685b      	ldreq	r3, [r3, #4]
 800cd74:	1809      	addeq	r1, r1, r0
 800cd76:	6021      	streq	r1, [r4, #0]
 800cd78:	e7ed      	b.n	800cd56 <_free_r+0x1e>
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	b10b      	cbz	r3, 800cd84 <_free_r+0x4c>
 800cd80:	42a3      	cmp	r3, r4
 800cd82:	d9fa      	bls.n	800cd7a <_free_r+0x42>
 800cd84:	6811      	ldr	r1, [r2, #0]
 800cd86:	1850      	adds	r0, r2, r1
 800cd88:	42a0      	cmp	r0, r4
 800cd8a:	d10b      	bne.n	800cda4 <_free_r+0x6c>
 800cd8c:	6820      	ldr	r0, [r4, #0]
 800cd8e:	4401      	add	r1, r0
 800cd90:	1850      	adds	r0, r2, r1
 800cd92:	4283      	cmp	r3, r0
 800cd94:	6011      	str	r1, [r2, #0]
 800cd96:	d1e0      	bne.n	800cd5a <_free_r+0x22>
 800cd98:	6818      	ldr	r0, [r3, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	6053      	str	r3, [r2, #4]
 800cd9e:	4408      	add	r0, r1
 800cda0:	6010      	str	r0, [r2, #0]
 800cda2:	e7da      	b.n	800cd5a <_free_r+0x22>
 800cda4:	d902      	bls.n	800cdac <_free_r+0x74>
 800cda6:	230c      	movs	r3, #12
 800cda8:	602b      	str	r3, [r5, #0]
 800cdaa:	e7d6      	b.n	800cd5a <_free_r+0x22>
 800cdac:	6820      	ldr	r0, [r4, #0]
 800cdae:	1821      	adds	r1, r4, r0
 800cdb0:	428b      	cmp	r3, r1
 800cdb2:	bf04      	itt	eq
 800cdb4:	6819      	ldreq	r1, [r3, #0]
 800cdb6:	685b      	ldreq	r3, [r3, #4]
 800cdb8:	6063      	str	r3, [r4, #4]
 800cdba:	bf04      	itt	eq
 800cdbc:	1809      	addeq	r1, r1, r0
 800cdbe:	6021      	streq	r1, [r4, #0]
 800cdc0:	6054      	str	r4, [r2, #4]
 800cdc2:	e7ca      	b.n	800cd5a <_free_r+0x22>
 800cdc4:	bd38      	pop	{r3, r4, r5, pc}
 800cdc6:	bf00      	nop
 800cdc8:	20000820 	.word	0x20000820

0800cdcc <rshift>:
 800cdcc:	6903      	ldr	r3, [r0, #16]
 800cdce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cdd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cdda:	f100 0414 	add.w	r4, r0, #20
 800cdde:	dd45      	ble.n	800ce6c <rshift+0xa0>
 800cde0:	f011 011f 	ands.w	r1, r1, #31
 800cde4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cde8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cdec:	d10c      	bne.n	800ce08 <rshift+0x3c>
 800cdee:	f100 0710 	add.w	r7, r0, #16
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	42b1      	cmp	r1, r6
 800cdf6:	d334      	bcc.n	800ce62 <rshift+0x96>
 800cdf8:	1a9b      	subs	r3, r3, r2
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	1eea      	subs	r2, r5, #3
 800cdfe:	4296      	cmp	r6, r2
 800ce00:	bf38      	it	cc
 800ce02:	2300      	movcc	r3, #0
 800ce04:	4423      	add	r3, r4
 800ce06:	e015      	b.n	800ce34 <rshift+0x68>
 800ce08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ce0c:	f1c1 0820 	rsb	r8, r1, #32
 800ce10:	40cf      	lsrs	r7, r1
 800ce12:	f105 0e04 	add.w	lr, r5, #4
 800ce16:	46a1      	mov	r9, r4
 800ce18:	4576      	cmp	r6, lr
 800ce1a:	46f4      	mov	ip, lr
 800ce1c:	d815      	bhi.n	800ce4a <rshift+0x7e>
 800ce1e:	1a9a      	subs	r2, r3, r2
 800ce20:	0092      	lsls	r2, r2, #2
 800ce22:	3a04      	subs	r2, #4
 800ce24:	3501      	adds	r5, #1
 800ce26:	42ae      	cmp	r6, r5
 800ce28:	bf38      	it	cc
 800ce2a:	2200      	movcc	r2, #0
 800ce2c:	18a3      	adds	r3, r4, r2
 800ce2e:	50a7      	str	r7, [r4, r2]
 800ce30:	b107      	cbz	r7, 800ce34 <rshift+0x68>
 800ce32:	3304      	adds	r3, #4
 800ce34:	1b1a      	subs	r2, r3, r4
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce3c:	bf08      	it	eq
 800ce3e:	2300      	moveq	r3, #0
 800ce40:	6102      	str	r2, [r0, #16]
 800ce42:	bf08      	it	eq
 800ce44:	6143      	streq	r3, [r0, #20]
 800ce46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce4a:	f8dc c000 	ldr.w	ip, [ip]
 800ce4e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce52:	ea4c 0707 	orr.w	r7, ip, r7
 800ce56:	f849 7b04 	str.w	r7, [r9], #4
 800ce5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce5e:	40cf      	lsrs	r7, r1
 800ce60:	e7da      	b.n	800ce18 <rshift+0x4c>
 800ce62:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce66:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce6a:	e7c3      	b.n	800cdf4 <rshift+0x28>
 800ce6c:	4623      	mov	r3, r4
 800ce6e:	e7e1      	b.n	800ce34 <rshift+0x68>

0800ce70 <__hexdig_fun>:
 800ce70:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ce74:	2b09      	cmp	r3, #9
 800ce76:	d802      	bhi.n	800ce7e <__hexdig_fun+0xe>
 800ce78:	3820      	subs	r0, #32
 800ce7a:	b2c0      	uxtb	r0, r0
 800ce7c:	4770      	bx	lr
 800ce7e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ce82:	2b05      	cmp	r3, #5
 800ce84:	d801      	bhi.n	800ce8a <__hexdig_fun+0x1a>
 800ce86:	3847      	subs	r0, #71	@ 0x47
 800ce88:	e7f7      	b.n	800ce7a <__hexdig_fun+0xa>
 800ce8a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ce8e:	2b05      	cmp	r3, #5
 800ce90:	d801      	bhi.n	800ce96 <__hexdig_fun+0x26>
 800ce92:	3827      	subs	r0, #39	@ 0x27
 800ce94:	e7f1      	b.n	800ce7a <__hexdig_fun+0xa>
 800ce96:	2000      	movs	r0, #0
 800ce98:	4770      	bx	lr
	...

0800ce9c <__gethex>:
 800ce9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea0:	b085      	sub	sp, #20
 800cea2:	468a      	mov	sl, r1
 800cea4:	9302      	str	r3, [sp, #8]
 800cea6:	680b      	ldr	r3, [r1, #0]
 800cea8:	9001      	str	r0, [sp, #4]
 800ceaa:	4690      	mov	r8, r2
 800ceac:	1c9c      	adds	r4, r3, #2
 800ceae:	46a1      	mov	r9, r4
 800ceb0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ceb4:	2830      	cmp	r0, #48	@ 0x30
 800ceb6:	d0fa      	beq.n	800ceae <__gethex+0x12>
 800ceb8:	eba9 0303 	sub.w	r3, r9, r3
 800cebc:	f1a3 0b02 	sub.w	fp, r3, #2
 800cec0:	f7ff ffd6 	bl	800ce70 <__hexdig_fun>
 800cec4:	4605      	mov	r5, r0
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d168      	bne.n	800cf9c <__gethex+0x100>
 800ceca:	49a0      	ldr	r1, [pc, #640]	@ (800d14c <__gethex+0x2b0>)
 800cecc:	2201      	movs	r2, #1
 800cece:	4648      	mov	r0, r9
 800ced0:	f7ff f83b 	bl	800bf4a <strncmp>
 800ced4:	4607      	mov	r7, r0
 800ced6:	2800      	cmp	r0, #0
 800ced8:	d167      	bne.n	800cfaa <__gethex+0x10e>
 800ceda:	f899 0001 	ldrb.w	r0, [r9, #1]
 800cede:	4626      	mov	r6, r4
 800cee0:	f7ff ffc6 	bl	800ce70 <__hexdig_fun>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d062      	beq.n	800cfae <__gethex+0x112>
 800cee8:	4623      	mov	r3, r4
 800ceea:	7818      	ldrb	r0, [r3, #0]
 800ceec:	2830      	cmp	r0, #48	@ 0x30
 800ceee:	4699      	mov	r9, r3
 800cef0:	f103 0301 	add.w	r3, r3, #1
 800cef4:	d0f9      	beq.n	800ceea <__gethex+0x4e>
 800cef6:	f7ff ffbb 	bl	800ce70 <__hexdig_fun>
 800cefa:	fab0 f580 	clz	r5, r0
 800cefe:	096d      	lsrs	r5, r5, #5
 800cf00:	f04f 0b01 	mov.w	fp, #1
 800cf04:	464a      	mov	r2, r9
 800cf06:	4616      	mov	r6, r2
 800cf08:	3201      	adds	r2, #1
 800cf0a:	7830      	ldrb	r0, [r6, #0]
 800cf0c:	f7ff ffb0 	bl	800ce70 <__hexdig_fun>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d1f8      	bne.n	800cf06 <__gethex+0x6a>
 800cf14:	498d      	ldr	r1, [pc, #564]	@ (800d14c <__gethex+0x2b0>)
 800cf16:	2201      	movs	r2, #1
 800cf18:	4630      	mov	r0, r6
 800cf1a:	f7ff f816 	bl	800bf4a <strncmp>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	d13f      	bne.n	800cfa2 <__gethex+0x106>
 800cf22:	b944      	cbnz	r4, 800cf36 <__gethex+0x9a>
 800cf24:	1c74      	adds	r4, r6, #1
 800cf26:	4622      	mov	r2, r4
 800cf28:	4616      	mov	r6, r2
 800cf2a:	3201      	adds	r2, #1
 800cf2c:	7830      	ldrb	r0, [r6, #0]
 800cf2e:	f7ff ff9f 	bl	800ce70 <__hexdig_fun>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	d1f8      	bne.n	800cf28 <__gethex+0x8c>
 800cf36:	1ba4      	subs	r4, r4, r6
 800cf38:	00a7      	lsls	r7, r4, #2
 800cf3a:	7833      	ldrb	r3, [r6, #0]
 800cf3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cf40:	2b50      	cmp	r3, #80	@ 0x50
 800cf42:	d13e      	bne.n	800cfc2 <__gethex+0x126>
 800cf44:	7873      	ldrb	r3, [r6, #1]
 800cf46:	2b2b      	cmp	r3, #43	@ 0x2b
 800cf48:	d033      	beq.n	800cfb2 <__gethex+0x116>
 800cf4a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cf4c:	d034      	beq.n	800cfb8 <__gethex+0x11c>
 800cf4e:	1c71      	adds	r1, r6, #1
 800cf50:	2400      	movs	r4, #0
 800cf52:	7808      	ldrb	r0, [r1, #0]
 800cf54:	f7ff ff8c 	bl	800ce70 <__hexdig_fun>
 800cf58:	1e43      	subs	r3, r0, #1
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b18      	cmp	r3, #24
 800cf5e:	d830      	bhi.n	800cfc2 <__gethex+0x126>
 800cf60:	f1a0 0210 	sub.w	r2, r0, #16
 800cf64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf68:	f7ff ff82 	bl	800ce70 <__hexdig_fun>
 800cf6c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cf70:	fa5f fc8c 	uxtb.w	ip, ip
 800cf74:	f1bc 0f18 	cmp.w	ip, #24
 800cf78:	f04f 030a 	mov.w	r3, #10
 800cf7c:	d91e      	bls.n	800cfbc <__gethex+0x120>
 800cf7e:	b104      	cbz	r4, 800cf82 <__gethex+0xe6>
 800cf80:	4252      	negs	r2, r2
 800cf82:	4417      	add	r7, r2
 800cf84:	f8ca 1000 	str.w	r1, [sl]
 800cf88:	b1ed      	cbz	r5, 800cfc6 <__gethex+0x12a>
 800cf8a:	f1bb 0f00 	cmp.w	fp, #0
 800cf8e:	bf0c      	ite	eq
 800cf90:	2506      	moveq	r5, #6
 800cf92:	2500      	movne	r5, #0
 800cf94:	4628      	mov	r0, r5
 800cf96:	b005      	add	sp, #20
 800cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf9c:	2500      	movs	r5, #0
 800cf9e:	462c      	mov	r4, r5
 800cfa0:	e7b0      	b.n	800cf04 <__gethex+0x68>
 800cfa2:	2c00      	cmp	r4, #0
 800cfa4:	d1c7      	bne.n	800cf36 <__gethex+0x9a>
 800cfa6:	4627      	mov	r7, r4
 800cfa8:	e7c7      	b.n	800cf3a <__gethex+0x9e>
 800cfaa:	464e      	mov	r6, r9
 800cfac:	462f      	mov	r7, r5
 800cfae:	2501      	movs	r5, #1
 800cfb0:	e7c3      	b.n	800cf3a <__gethex+0x9e>
 800cfb2:	2400      	movs	r4, #0
 800cfb4:	1cb1      	adds	r1, r6, #2
 800cfb6:	e7cc      	b.n	800cf52 <__gethex+0xb6>
 800cfb8:	2401      	movs	r4, #1
 800cfba:	e7fb      	b.n	800cfb4 <__gethex+0x118>
 800cfbc:	fb03 0002 	mla	r0, r3, r2, r0
 800cfc0:	e7ce      	b.n	800cf60 <__gethex+0xc4>
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	e7de      	b.n	800cf84 <__gethex+0xe8>
 800cfc6:	eba6 0309 	sub.w	r3, r6, r9
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	4629      	mov	r1, r5
 800cfce:	2b07      	cmp	r3, #7
 800cfd0:	dc0a      	bgt.n	800cfe8 <__gethex+0x14c>
 800cfd2:	9801      	ldr	r0, [sp, #4]
 800cfd4:	f000 fafc 	bl	800d5d0 <_Balloc>
 800cfd8:	4604      	mov	r4, r0
 800cfda:	b940      	cbnz	r0, 800cfee <__gethex+0x152>
 800cfdc:	4b5c      	ldr	r3, [pc, #368]	@ (800d150 <__gethex+0x2b4>)
 800cfde:	4602      	mov	r2, r0
 800cfe0:	21e4      	movs	r1, #228	@ 0xe4
 800cfe2:	485c      	ldr	r0, [pc, #368]	@ (800d154 <__gethex+0x2b8>)
 800cfe4:	f001 fc66 	bl	800e8b4 <__assert_func>
 800cfe8:	3101      	adds	r1, #1
 800cfea:	105b      	asrs	r3, r3, #1
 800cfec:	e7ef      	b.n	800cfce <__gethex+0x132>
 800cfee:	f100 0a14 	add.w	sl, r0, #20
 800cff2:	2300      	movs	r3, #0
 800cff4:	4655      	mov	r5, sl
 800cff6:	469b      	mov	fp, r3
 800cff8:	45b1      	cmp	r9, r6
 800cffa:	d337      	bcc.n	800d06c <__gethex+0x1d0>
 800cffc:	f845 bb04 	str.w	fp, [r5], #4
 800d000:	eba5 050a 	sub.w	r5, r5, sl
 800d004:	10ad      	asrs	r5, r5, #2
 800d006:	6125      	str	r5, [r4, #16]
 800d008:	4658      	mov	r0, fp
 800d00a:	f000 fbd3 	bl	800d7b4 <__hi0bits>
 800d00e:	016d      	lsls	r5, r5, #5
 800d010:	f8d8 6000 	ldr.w	r6, [r8]
 800d014:	1a2d      	subs	r5, r5, r0
 800d016:	42b5      	cmp	r5, r6
 800d018:	dd54      	ble.n	800d0c4 <__gethex+0x228>
 800d01a:	1bad      	subs	r5, r5, r6
 800d01c:	4629      	mov	r1, r5
 800d01e:	4620      	mov	r0, r4
 800d020:	f000 ff67 	bl	800def2 <__any_on>
 800d024:	4681      	mov	r9, r0
 800d026:	b178      	cbz	r0, 800d048 <__gethex+0x1ac>
 800d028:	1e6b      	subs	r3, r5, #1
 800d02a:	1159      	asrs	r1, r3, #5
 800d02c:	f003 021f 	and.w	r2, r3, #31
 800d030:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d034:	f04f 0901 	mov.w	r9, #1
 800d038:	fa09 f202 	lsl.w	r2, r9, r2
 800d03c:	420a      	tst	r2, r1
 800d03e:	d003      	beq.n	800d048 <__gethex+0x1ac>
 800d040:	454b      	cmp	r3, r9
 800d042:	dc36      	bgt.n	800d0b2 <__gethex+0x216>
 800d044:	f04f 0902 	mov.w	r9, #2
 800d048:	4629      	mov	r1, r5
 800d04a:	4620      	mov	r0, r4
 800d04c:	f7ff febe 	bl	800cdcc <rshift>
 800d050:	442f      	add	r7, r5
 800d052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d056:	42bb      	cmp	r3, r7
 800d058:	da42      	bge.n	800d0e0 <__gethex+0x244>
 800d05a:	9801      	ldr	r0, [sp, #4]
 800d05c:	4621      	mov	r1, r4
 800d05e:	f000 faf7 	bl	800d650 <_Bfree>
 800d062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d064:	2300      	movs	r3, #0
 800d066:	6013      	str	r3, [r2, #0]
 800d068:	25a3      	movs	r5, #163	@ 0xa3
 800d06a:	e793      	b.n	800cf94 <__gethex+0xf8>
 800d06c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d070:	2a2e      	cmp	r2, #46	@ 0x2e
 800d072:	d012      	beq.n	800d09a <__gethex+0x1fe>
 800d074:	2b20      	cmp	r3, #32
 800d076:	d104      	bne.n	800d082 <__gethex+0x1e6>
 800d078:	f845 bb04 	str.w	fp, [r5], #4
 800d07c:	f04f 0b00 	mov.w	fp, #0
 800d080:	465b      	mov	r3, fp
 800d082:	7830      	ldrb	r0, [r6, #0]
 800d084:	9303      	str	r3, [sp, #12]
 800d086:	f7ff fef3 	bl	800ce70 <__hexdig_fun>
 800d08a:	9b03      	ldr	r3, [sp, #12]
 800d08c:	f000 000f 	and.w	r0, r0, #15
 800d090:	4098      	lsls	r0, r3
 800d092:	ea4b 0b00 	orr.w	fp, fp, r0
 800d096:	3304      	adds	r3, #4
 800d098:	e7ae      	b.n	800cff8 <__gethex+0x15c>
 800d09a:	45b1      	cmp	r9, r6
 800d09c:	d8ea      	bhi.n	800d074 <__gethex+0x1d8>
 800d09e:	492b      	ldr	r1, [pc, #172]	@ (800d14c <__gethex+0x2b0>)
 800d0a0:	9303      	str	r3, [sp, #12]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	4630      	mov	r0, r6
 800d0a6:	f7fe ff50 	bl	800bf4a <strncmp>
 800d0aa:	9b03      	ldr	r3, [sp, #12]
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	d1e1      	bne.n	800d074 <__gethex+0x1d8>
 800d0b0:	e7a2      	b.n	800cff8 <__gethex+0x15c>
 800d0b2:	1ea9      	subs	r1, r5, #2
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	f000 ff1c 	bl	800def2 <__any_on>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d0c2      	beq.n	800d044 <__gethex+0x1a8>
 800d0be:	f04f 0903 	mov.w	r9, #3
 800d0c2:	e7c1      	b.n	800d048 <__gethex+0x1ac>
 800d0c4:	da09      	bge.n	800d0da <__gethex+0x23e>
 800d0c6:	1b75      	subs	r5, r6, r5
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	9801      	ldr	r0, [sp, #4]
 800d0cc:	462a      	mov	r2, r5
 800d0ce:	f000 fcd7 	bl	800da80 <__lshift>
 800d0d2:	1b7f      	subs	r7, r7, r5
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	f100 0a14 	add.w	sl, r0, #20
 800d0da:	f04f 0900 	mov.w	r9, #0
 800d0de:	e7b8      	b.n	800d052 <__gethex+0x1b6>
 800d0e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d0e4:	42bd      	cmp	r5, r7
 800d0e6:	dd6f      	ble.n	800d1c8 <__gethex+0x32c>
 800d0e8:	1bed      	subs	r5, r5, r7
 800d0ea:	42ae      	cmp	r6, r5
 800d0ec:	dc34      	bgt.n	800d158 <__gethex+0x2bc>
 800d0ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d022      	beq.n	800d13c <__gethex+0x2a0>
 800d0f6:	2b03      	cmp	r3, #3
 800d0f8:	d024      	beq.n	800d144 <__gethex+0x2a8>
 800d0fa:	2b01      	cmp	r3, #1
 800d0fc:	d115      	bne.n	800d12a <__gethex+0x28e>
 800d0fe:	42ae      	cmp	r6, r5
 800d100:	d113      	bne.n	800d12a <__gethex+0x28e>
 800d102:	2e01      	cmp	r6, #1
 800d104:	d10b      	bne.n	800d11e <__gethex+0x282>
 800d106:	9a02      	ldr	r2, [sp, #8]
 800d108:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d10c:	6013      	str	r3, [r2, #0]
 800d10e:	2301      	movs	r3, #1
 800d110:	6123      	str	r3, [r4, #16]
 800d112:	f8ca 3000 	str.w	r3, [sl]
 800d116:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d118:	2562      	movs	r5, #98	@ 0x62
 800d11a:	601c      	str	r4, [r3, #0]
 800d11c:	e73a      	b.n	800cf94 <__gethex+0xf8>
 800d11e:	1e71      	subs	r1, r6, #1
 800d120:	4620      	mov	r0, r4
 800d122:	f000 fee6 	bl	800def2 <__any_on>
 800d126:	2800      	cmp	r0, #0
 800d128:	d1ed      	bne.n	800d106 <__gethex+0x26a>
 800d12a:	9801      	ldr	r0, [sp, #4]
 800d12c:	4621      	mov	r1, r4
 800d12e:	f000 fa8f 	bl	800d650 <_Bfree>
 800d132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d134:	2300      	movs	r3, #0
 800d136:	6013      	str	r3, [r2, #0]
 800d138:	2550      	movs	r5, #80	@ 0x50
 800d13a:	e72b      	b.n	800cf94 <__gethex+0xf8>
 800d13c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1f3      	bne.n	800d12a <__gethex+0x28e>
 800d142:	e7e0      	b.n	800d106 <__gethex+0x26a>
 800d144:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d146:	2b00      	cmp	r3, #0
 800d148:	d1dd      	bne.n	800d106 <__gethex+0x26a>
 800d14a:	e7ee      	b.n	800d12a <__gethex+0x28e>
 800d14c:	0800ff2c 	.word	0x0800ff2c
 800d150:	0801003d 	.word	0x0801003d
 800d154:	0801004e 	.word	0x0801004e
 800d158:	1e6f      	subs	r7, r5, #1
 800d15a:	f1b9 0f00 	cmp.w	r9, #0
 800d15e:	d130      	bne.n	800d1c2 <__gethex+0x326>
 800d160:	b127      	cbz	r7, 800d16c <__gethex+0x2d0>
 800d162:	4639      	mov	r1, r7
 800d164:	4620      	mov	r0, r4
 800d166:	f000 fec4 	bl	800def2 <__any_on>
 800d16a:	4681      	mov	r9, r0
 800d16c:	117a      	asrs	r2, r7, #5
 800d16e:	2301      	movs	r3, #1
 800d170:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d174:	f007 071f 	and.w	r7, r7, #31
 800d178:	40bb      	lsls	r3, r7
 800d17a:	4213      	tst	r3, r2
 800d17c:	4629      	mov	r1, r5
 800d17e:	4620      	mov	r0, r4
 800d180:	bf18      	it	ne
 800d182:	f049 0902 	orrne.w	r9, r9, #2
 800d186:	f7ff fe21 	bl	800cdcc <rshift>
 800d18a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d18e:	1b76      	subs	r6, r6, r5
 800d190:	2502      	movs	r5, #2
 800d192:	f1b9 0f00 	cmp.w	r9, #0
 800d196:	d047      	beq.n	800d228 <__gethex+0x38c>
 800d198:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d015      	beq.n	800d1cc <__gethex+0x330>
 800d1a0:	2b03      	cmp	r3, #3
 800d1a2:	d017      	beq.n	800d1d4 <__gethex+0x338>
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d109      	bne.n	800d1bc <__gethex+0x320>
 800d1a8:	f019 0f02 	tst.w	r9, #2
 800d1ac:	d006      	beq.n	800d1bc <__gethex+0x320>
 800d1ae:	f8da 3000 	ldr.w	r3, [sl]
 800d1b2:	ea49 0903 	orr.w	r9, r9, r3
 800d1b6:	f019 0f01 	tst.w	r9, #1
 800d1ba:	d10e      	bne.n	800d1da <__gethex+0x33e>
 800d1bc:	f045 0510 	orr.w	r5, r5, #16
 800d1c0:	e032      	b.n	800d228 <__gethex+0x38c>
 800d1c2:	f04f 0901 	mov.w	r9, #1
 800d1c6:	e7d1      	b.n	800d16c <__gethex+0x2d0>
 800d1c8:	2501      	movs	r5, #1
 800d1ca:	e7e2      	b.n	800d192 <__gethex+0x2f6>
 800d1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1ce:	f1c3 0301 	rsb	r3, r3, #1
 800d1d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d1d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d0f0      	beq.n	800d1bc <__gethex+0x320>
 800d1da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d1de:	f104 0314 	add.w	r3, r4, #20
 800d1e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d1e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d1ea:	f04f 0c00 	mov.w	ip, #0
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d1f8:	d01b      	beq.n	800d232 <__gethex+0x396>
 800d1fa:	3201      	adds	r2, #1
 800d1fc:	6002      	str	r2, [r0, #0]
 800d1fe:	2d02      	cmp	r5, #2
 800d200:	f104 0314 	add.w	r3, r4, #20
 800d204:	d13c      	bne.n	800d280 <__gethex+0x3e4>
 800d206:	f8d8 2000 	ldr.w	r2, [r8]
 800d20a:	3a01      	subs	r2, #1
 800d20c:	42b2      	cmp	r2, r6
 800d20e:	d109      	bne.n	800d224 <__gethex+0x388>
 800d210:	1171      	asrs	r1, r6, #5
 800d212:	2201      	movs	r2, #1
 800d214:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d218:	f006 061f 	and.w	r6, r6, #31
 800d21c:	fa02 f606 	lsl.w	r6, r2, r6
 800d220:	421e      	tst	r6, r3
 800d222:	d13a      	bne.n	800d29a <__gethex+0x3fe>
 800d224:	f045 0520 	orr.w	r5, r5, #32
 800d228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d22a:	601c      	str	r4, [r3, #0]
 800d22c:	9b02      	ldr	r3, [sp, #8]
 800d22e:	601f      	str	r7, [r3, #0]
 800d230:	e6b0      	b.n	800cf94 <__gethex+0xf8>
 800d232:	4299      	cmp	r1, r3
 800d234:	f843 cc04 	str.w	ip, [r3, #-4]
 800d238:	d8d9      	bhi.n	800d1ee <__gethex+0x352>
 800d23a:	68a3      	ldr	r3, [r4, #8]
 800d23c:	459b      	cmp	fp, r3
 800d23e:	db17      	blt.n	800d270 <__gethex+0x3d4>
 800d240:	6861      	ldr	r1, [r4, #4]
 800d242:	9801      	ldr	r0, [sp, #4]
 800d244:	3101      	adds	r1, #1
 800d246:	f000 f9c3 	bl	800d5d0 <_Balloc>
 800d24a:	4681      	mov	r9, r0
 800d24c:	b918      	cbnz	r0, 800d256 <__gethex+0x3ba>
 800d24e:	4b1a      	ldr	r3, [pc, #104]	@ (800d2b8 <__gethex+0x41c>)
 800d250:	4602      	mov	r2, r0
 800d252:	2184      	movs	r1, #132	@ 0x84
 800d254:	e6c5      	b.n	800cfe2 <__gethex+0x146>
 800d256:	6922      	ldr	r2, [r4, #16]
 800d258:	3202      	adds	r2, #2
 800d25a:	f104 010c 	add.w	r1, r4, #12
 800d25e:	0092      	lsls	r2, r2, #2
 800d260:	300c      	adds	r0, #12
 800d262:	f7fe fefc 	bl	800c05e <memcpy>
 800d266:	4621      	mov	r1, r4
 800d268:	9801      	ldr	r0, [sp, #4]
 800d26a:	f000 f9f1 	bl	800d650 <_Bfree>
 800d26e:	464c      	mov	r4, r9
 800d270:	6923      	ldr	r3, [r4, #16]
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d278:	6122      	str	r2, [r4, #16]
 800d27a:	2201      	movs	r2, #1
 800d27c:	615a      	str	r2, [r3, #20]
 800d27e:	e7be      	b.n	800d1fe <__gethex+0x362>
 800d280:	6922      	ldr	r2, [r4, #16]
 800d282:	455a      	cmp	r2, fp
 800d284:	dd0b      	ble.n	800d29e <__gethex+0x402>
 800d286:	2101      	movs	r1, #1
 800d288:	4620      	mov	r0, r4
 800d28a:	f7ff fd9f 	bl	800cdcc <rshift>
 800d28e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d292:	3701      	adds	r7, #1
 800d294:	42bb      	cmp	r3, r7
 800d296:	f6ff aee0 	blt.w	800d05a <__gethex+0x1be>
 800d29a:	2501      	movs	r5, #1
 800d29c:	e7c2      	b.n	800d224 <__gethex+0x388>
 800d29e:	f016 061f 	ands.w	r6, r6, #31
 800d2a2:	d0fa      	beq.n	800d29a <__gethex+0x3fe>
 800d2a4:	4453      	add	r3, sl
 800d2a6:	f1c6 0620 	rsb	r6, r6, #32
 800d2aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d2ae:	f000 fa81 	bl	800d7b4 <__hi0bits>
 800d2b2:	42b0      	cmp	r0, r6
 800d2b4:	dbe7      	blt.n	800d286 <__gethex+0x3ea>
 800d2b6:	e7f0      	b.n	800d29a <__gethex+0x3fe>
 800d2b8:	0801003d 	.word	0x0801003d

0800d2bc <L_shift>:
 800d2bc:	f1c2 0208 	rsb	r2, r2, #8
 800d2c0:	0092      	lsls	r2, r2, #2
 800d2c2:	b570      	push	{r4, r5, r6, lr}
 800d2c4:	f1c2 0620 	rsb	r6, r2, #32
 800d2c8:	6843      	ldr	r3, [r0, #4]
 800d2ca:	6804      	ldr	r4, [r0, #0]
 800d2cc:	fa03 f506 	lsl.w	r5, r3, r6
 800d2d0:	432c      	orrs	r4, r5
 800d2d2:	40d3      	lsrs	r3, r2
 800d2d4:	6004      	str	r4, [r0, #0]
 800d2d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2da:	4288      	cmp	r0, r1
 800d2dc:	d3f4      	bcc.n	800d2c8 <L_shift+0xc>
 800d2de:	bd70      	pop	{r4, r5, r6, pc}

0800d2e0 <__match>:
 800d2e0:	b530      	push	{r4, r5, lr}
 800d2e2:	6803      	ldr	r3, [r0, #0]
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ea:	b914      	cbnz	r4, 800d2f2 <__match+0x12>
 800d2ec:	6003      	str	r3, [r0, #0]
 800d2ee:	2001      	movs	r0, #1
 800d2f0:	bd30      	pop	{r4, r5, pc}
 800d2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d2fa:	2d19      	cmp	r5, #25
 800d2fc:	bf98      	it	ls
 800d2fe:	3220      	addls	r2, #32
 800d300:	42a2      	cmp	r2, r4
 800d302:	d0f0      	beq.n	800d2e6 <__match+0x6>
 800d304:	2000      	movs	r0, #0
 800d306:	e7f3      	b.n	800d2f0 <__match+0x10>

0800d308 <__hexnan>:
 800d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	680b      	ldr	r3, [r1, #0]
 800d30e:	6801      	ldr	r1, [r0, #0]
 800d310:	115e      	asrs	r6, r3, #5
 800d312:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d316:	f013 031f 	ands.w	r3, r3, #31
 800d31a:	b087      	sub	sp, #28
 800d31c:	bf18      	it	ne
 800d31e:	3604      	addne	r6, #4
 800d320:	2500      	movs	r5, #0
 800d322:	1f37      	subs	r7, r6, #4
 800d324:	4682      	mov	sl, r0
 800d326:	4690      	mov	r8, r2
 800d328:	9301      	str	r3, [sp, #4]
 800d32a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d32e:	46b9      	mov	r9, r7
 800d330:	463c      	mov	r4, r7
 800d332:	9502      	str	r5, [sp, #8]
 800d334:	46ab      	mov	fp, r5
 800d336:	784a      	ldrb	r2, [r1, #1]
 800d338:	1c4b      	adds	r3, r1, #1
 800d33a:	9303      	str	r3, [sp, #12]
 800d33c:	b342      	cbz	r2, 800d390 <__hexnan+0x88>
 800d33e:	4610      	mov	r0, r2
 800d340:	9105      	str	r1, [sp, #20]
 800d342:	9204      	str	r2, [sp, #16]
 800d344:	f7ff fd94 	bl	800ce70 <__hexdig_fun>
 800d348:	2800      	cmp	r0, #0
 800d34a:	d151      	bne.n	800d3f0 <__hexnan+0xe8>
 800d34c:	9a04      	ldr	r2, [sp, #16]
 800d34e:	9905      	ldr	r1, [sp, #20]
 800d350:	2a20      	cmp	r2, #32
 800d352:	d818      	bhi.n	800d386 <__hexnan+0x7e>
 800d354:	9b02      	ldr	r3, [sp, #8]
 800d356:	459b      	cmp	fp, r3
 800d358:	dd13      	ble.n	800d382 <__hexnan+0x7a>
 800d35a:	454c      	cmp	r4, r9
 800d35c:	d206      	bcs.n	800d36c <__hexnan+0x64>
 800d35e:	2d07      	cmp	r5, #7
 800d360:	dc04      	bgt.n	800d36c <__hexnan+0x64>
 800d362:	462a      	mov	r2, r5
 800d364:	4649      	mov	r1, r9
 800d366:	4620      	mov	r0, r4
 800d368:	f7ff ffa8 	bl	800d2bc <L_shift>
 800d36c:	4544      	cmp	r4, r8
 800d36e:	d952      	bls.n	800d416 <__hexnan+0x10e>
 800d370:	2300      	movs	r3, #0
 800d372:	f1a4 0904 	sub.w	r9, r4, #4
 800d376:	f844 3c04 	str.w	r3, [r4, #-4]
 800d37a:	f8cd b008 	str.w	fp, [sp, #8]
 800d37e:	464c      	mov	r4, r9
 800d380:	461d      	mov	r5, r3
 800d382:	9903      	ldr	r1, [sp, #12]
 800d384:	e7d7      	b.n	800d336 <__hexnan+0x2e>
 800d386:	2a29      	cmp	r2, #41	@ 0x29
 800d388:	d157      	bne.n	800d43a <__hexnan+0x132>
 800d38a:	3102      	adds	r1, #2
 800d38c:	f8ca 1000 	str.w	r1, [sl]
 800d390:	f1bb 0f00 	cmp.w	fp, #0
 800d394:	d051      	beq.n	800d43a <__hexnan+0x132>
 800d396:	454c      	cmp	r4, r9
 800d398:	d206      	bcs.n	800d3a8 <__hexnan+0xa0>
 800d39a:	2d07      	cmp	r5, #7
 800d39c:	dc04      	bgt.n	800d3a8 <__hexnan+0xa0>
 800d39e:	462a      	mov	r2, r5
 800d3a0:	4649      	mov	r1, r9
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f7ff ff8a 	bl	800d2bc <L_shift>
 800d3a8:	4544      	cmp	r4, r8
 800d3aa:	d936      	bls.n	800d41a <__hexnan+0x112>
 800d3ac:	f1a8 0204 	sub.w	r2, r8, #4
 800d3b0:	4623      	mov	r3, r4
 800d3b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800d3b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800d3ba:	429f      	cmp	r7, r3
 800d3bc:	d2f9      	bcs.n	800d3b2 <__hexnan+0xaa>
 800d3be:	1b3b      	subs	r3, r7, r4
 800d3c0:	f023 0303 	bic.w	r3, r3, #3
 800d3c4:	3304      	adds	r3, #4
 800d3c6:	3401      	adds	r4, #1
 800d3c8:	3e03      	subs	r6, #3
 800d3ca:	42b4      	cmp	r4, r6
 800d3cc:	bf88      	it	hi
 800d3ce:	2304      	movhi	r3, #4
 800d3d0:	4443      	add	r3, r8
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f843 2b04 	str.w	r2, [r3], #4
 800d3d8:	429f      	cmp	r7, r3
 800d3da:	d2fb      	bcs.n	800d3d4 <__hexnan+0xcc>
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	b91b      	cbnz	r3, 800d3e8 <__hexnan+0xe0>
 800d3e0:	4547      	cmp	r7, r8
 800d3e2:	d128      	bne.n	800d436 <__hexnan+0x12e>
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	603b      	str	r3, [r7, #0]
 800d3e8:	2005      	movs	r0, #5
 800d3ea:	b007      	add	sp, #28
 800d3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f0:	3501      	adds	r5, #1
 800d3f2:	2d08      	cmp	r5, #8
 800d3f4:	f10b 0b01 	add.w	fp, fp, #1
 800d3f8:	dd06      	ble.n	800d408 <__hexnan+0x100>
 800d3fa:	4544      	cmp	r4, r8
 800d3fc:	d9c1      	bls.n	800d382 <__hexnan+0x7a>
 800d3fe:	2300      	movs	r3, #0
 800d400:	f844 3c04 	str.w	r3, [r4, #-4]
 800d404:	2501      	movs	r5, #1
 800d406:	3c04      	subs	r4, #4
 800d408:	6822      	ldr	r2, [r4, #0]
 800d40a:	f000 000f 	and.w	r0, r0, #15
 800d40e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d412:	6020      	str	r0, [r4, #0]
 800d414:	e7b5      	b.n	800d382 <__hexnan+0x7a>
 800d416:	2508      	movs	r5, #8
 800d418:	e7b3      	b.n	800d382 <__hexnan+0x7a>
 800d41a:	9b01      	ldr	r3, [sp, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d0dd      	beq.n	800d3dc <__hexnan+0xd4>
 800d420:	f1c3 0320 	rsb	r3, r3, #32
 800d424:	f04f 32ff 	mov.w	r2, #4294967295
 800d428:	40da      	lsrs	r2, r3
 800d42a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d42e:	4013      	ands	r3, r2
 800d430:	f846 3c04 	str.w	r3, [r6, #-4]
 800d434:	e7d2      	b.n	800d3dc <__hexnan+0xd4>
 800d436:	3f04      	subs	r7, #4
 800d438:	e7d0      	b.n	800d3dc <__hexnan+0xd4>
 800d43a:	2004      	movs	r0, #4
 800d43c:	e7d5      	b.n	800d3ea <__hexnan+0xe2>
	...

0800d440 <malloc>:
 800d440:	4b02      	ldr	r3, [pc, #8]	@ (800d44c <malloc+0xc>)
 800d442:	4601      	mov	r1, r0
 800d444:	6818      	ldr	r0, [r3, #0]
 800d446:	f000 b825 	b.w	800d494 <_malloc_r>
 800d44a:	bf00      	nop
 800d44c:	200001b0 	.word	0x200001b0

0800d450 <sbrk_aligned>:
 800d450:	b570      	push	{r4, r5, r6, lr}
 800d452:	4e0f      	ldr	r6, [pc, #60]	@ (800d490 <sbrk_aligned+0x40>)
 800d454:	460c      	mov	r4, r1
 800d456:	6831      	ldr	r1, [r6, #0]
 800d458:	4605      	mov	r5, r0
 800d45a:	b911      	cbnz	r1, 800d462 <sbrk_aligned+0x12>
 800d45c:	f001 fa1a 	bl	800e894 <_sbrk_r>
 800d460:	6030      	str	r0, [r6, #0]
 800d462:	4621      	mov	r1, r4
 800d464:	4628      	mov	r0, r5
 800d466:	f001 fa15 	bl	800e894 <_sbrk_r>
 800d46a:	1c43      	adds	r3, r0, #1
 800d46c:	d103      	bne.n	800d476 <sbrk_aligned+0x26>
 800d46e:	f04f 34ff 	mov.w	r4, #4294967295
 800d472:	4620      	mov	r0, r4
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	1cc4      	adds	r4, r0, #3
 800d478:	f024 0403 	bic.w	r4, r4, #3
 800d47c:	42a0      	cmp	r0, r4
 800d47e:	d0f8      	beq.n	800d472 <sbrk_aligned+0x22>
 800d480:	1a21      	subs	r1, r4, r0
 800d482:	4628      	mov	r0, r5
 800d484:	f001 fa06 	bl	800e894 <_sbrk_r>
 800d488:	3001      	adds	r0, #1
 800d48a:	d1f2      	bne.n	800d472 <sbrk_aligned+0x22>
 800d48c:	e7ef      	b.n	800d46e <sbrk_aligned+0x1e>
 800d48e:	bf00      	nop
 800d490:	2000081c 	.word	0x2000081c

0800d494 <_malloc_r>:
 800d494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d498:	1ccd      	adds	r5, r1, #3
 800d49a:	f025 0503 	bic.w	r5, r5, #3
 800d49e:	3508      	adds	r5, #8
 800d4a0:	2d0c      	cmp	r5, #12
 800d4a2:	bf38      	it	cc
 800d4a4:	250c      	movcc	r5, #12
 800d4a6:	2d00      	cmp	r5, #0
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	db01      	blt.n	800d4b0 <_malloc_r+0x1c>
 800d4ac:	42a9      	cmp	r1, r5
 800d4ae:	d904      	bls.n	800d4ba <_malloc_r+0x26>
 800d4b0:	230c      	movs	r3, #12
 800d4b2:	6033      	str	r3, [r6, #0]
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d590 <_malloc_r+0xfc>
 800d4be:	f000 f87b 	bl	800d5b8 <__malloc_lock>
 800d4c2:	f8d8 3000 	ldr.w	r3, [r8]
 800d4c6:	461c      	mov	r4, r3
 800d4c8:	bb44      	cbnz	r4, 800d51c <_malloc_r+0x88>
 800d4ca:	4629      	mov	r1, r5
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f7ff ffbf 	bl	800d450 <sbrk_aligned>
 800d4d2:	1c43      	adds	r3, r0, #1
 800d4d4:	4604      	mov	r4, r0
 800d4d6:	d158      	bne.n	800d58a <_malloc_r+0xf6>
 800d4d8:	f8d8 4000 	ldr.w	r4, [r8]
 800d4dc:	4627      	mov	r7, r4
 800d4de:	2f00      	cmp	r7, #0
 800d4e0:	d143      	bne.n	800d56a <_malloc_r+0xd6>
 800d4e2:	2c00      	cmp	r4, #0
 800d4e4:	d04b      	beq.n	800d57e <_malloc_r+0xea>
 800d4e6:	6823      	ldr	r3, [r4, #0]
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	eb04 0903 	add.w	r9, r4, r3
 800d4f0:	f001 f9d0 	bl	800e894 <_sbrk_r>
 800d4f4:	4581      	cmp	r9, r0
 800d4f6:	d142      	bne.n	800d57e <_malloc_r+0xea>
 800d4f8:	6821      	ldr	r1, [r4, #0]
 800d4fa:	1a6d      	subs	r5, r5, r1
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	4630      	mov	r0, r6
 800d500:	f7ff ffa6 	bl	800d450 <sbrk_aligned>
 800d504:	3001      	adds	r0, #1
 800d506:	d03a      	beq.n	800d57e <_malloc_r+0xea>
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	442b      	add	r3, r5
 800d50c:	6023      	str	r3, [r4, #0]
 800d50e:	f8d8 3000 	ldr.w	r3, [r8]
 800d512:	685a      	ldr	r2, [r3, #4]
 800d514:	bb62      	cbnz	r2, 800d570 <_malloc_r+0xdc>
 800d516:	f8c8 7000 	str.w	r7, [r8]
 800d51a:	e00f      	b.n	800d53c <_malloc_r+0xa8>
 800d51c:	6822      	ldr	r2, [r4, #0]
 800d51e:	1b52      	subs	r2, r2, r5
 800d520:	d420      	bmi.n	800d564 <_malloc_r+0xd0>
 800d522:	2a0b      	cmp	r2, #11
 800d524:	d917      	bls.n	800d556 <_malloc_r+0xc2>
 800d526:	1961      	adds	r1, r4, r5
 800d528:	42a3      	cmp	r3, r4
 800d52a:	6025      	str	r5, [r4, #0]
 800d52c:	bf18      	it	ne
 800d52e:	6059      	strne	r1, [r3, #4]
 800d530:	6863      	ldr	r3, [r4, #4]
 800d532:	bf08      	it	eq
 800d534:	f8c8 1000 	streq.w	r1, [r8]
 800d538:	5162      	str	r2, [r4, r5]
 800d53a:	604b      	str	r3, [r1, #4]
 800d53c:	4630      	mov	r0, r6
 800d53e:	f000 f841 	bl	800d5c4 <__malloc_unlock>
 800d542:	f104 000b 	add.w	r0, r4, #11
 800d546:	1d23      	adds	r3, r4, #4
 800d548:	f020 0007 	bic.w	r0, r0, #7
 800d54c:	1ac2      	subs	r2, r0, r3
 800d54e:	bf1c      	itt	ne
 800d550:	1a1b      	subne	r3, r3, r0
 800d552:	50a3      	strne	r3, [r4, r2]
 800d554:	e7af      	b.n	800d4b6 <_malloc_r+0x22>
 800d556:	6862      	ldr	r2, [r4, #4]
 800d558:	42a3      	cmp	r3, r4
 800d55a:	bf0c      	ite	eq
 800d55c:	f8c8 2000 	streq.w	r2, [r8]
 800d560:	605a      	strne	r2, [r3, #4]
 800d562:	e7eb      	b.n	800d53c <_malloc_r+0xa8>
 800d564:	4623      	mov	r3, r4
 800d566:	6864      	ldr	r4, [r4, #4]
 800d568:	e7ae      	b.n	800d4c8 <_malloc_r+0x34>
 800d56a:	463c      	mov	r4, r7
 800d56c:	687f      	ldr	r7, [r7, #4]
 800d56e:	e7b6      	b.n	800d4de <_malloc_r+0x4a>
 800d570:	461a      	mov	r2, r3
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	42a3      	cmp	r3, r4
 800d576:	d1fb      	bne.n	800d570 <_malloc_r+0xdc>
 800d578:	2300      	movs	r3, #0
 800d57a:	6053      	str	r3, [r2, #4]
 800d57c:	e7de      	b.n	800d53c <_malloc_r+0xa8>
 800d57e:	230c      	movs	r3, #12
 800d580:	6033      	str	r3, [r6, #0]
 800d582:	4630      	mov	r0, r6
 800d584:	f000 f81e 	bl	800d5c4 <__malloc_unlock>
 800d588:	e794      	b.n	800d4b4 <_malloc_r+0x20>
 800d58a:	6005      	str	r5, [r0, #0]
 800d58c:	e7d6      	b.n	800d53c <_malloc_r+0xa8>
 800d58e:	bf00      	nop
 800d590:	20000820 	.word	0x20000820

0800d594 <__ascii_mbtowc>:
 800d594:	b082      	sub	sp, #8
 800d596:	b901      	cbnz	r1, 800d59a <__ascii_mbtowc+0x6>
 800d598:	a901      	add	r1, sp, #4
 800d59a:	b142      	cbz	r2, 800d5ae <__ascii_mbtowc+0x1a>
 800d59c:	b14b      	cbz	r3, 800d5b2 <__ascii_mbtowc+0x1e>
 800d59e:	7813      	ldrb	r3, [r2, #0]
 800d5a0:	600b      	str	r3, [r1, #0]
 800d5a2:	7812      	ldrb	r2, [r2, #0]
 800d5a4:	1e10      	subs	r0, r2, #0
 800d5a6:	bf18      	it	ne
 800d5a8:	2001      	movne	r0, #1
 800d5aa:	b002      	add	sp, #8
 800d5ac:	4770      	bx	lr
 800d5ae:	4610      	mov	r0, r2
 800d5b0:	e7fb      	b.n	800d5aa <__ascii_mbtowc+0x16>
 800d5b2:	f06f 0001 	mvn.w	r0, #1
 800d5b6:	e7f8      	b.n	800d5aa <__ascii_mbtowc+0x16>

0800d5b8 <__malloc_lock>:
 800d5b8:	4801      	ldr	r0, [pc, #4]	@ (800d5c0 <__malloc_lock+0x8>)
 800d5ba:	f7fe bd4e 	b.w	800c05a <__retarget_lock_acquire_recursive>
 800d5be:	bf00      	nop
 800d5c0:	20000818 	.word	0x20000818

0800d5c4 <__malloc_unlock>:
 800d5c4:	4801      	ldr	r0, [pc, #4]	@ (800d5cc <__malloc_unlock+0x8>)
 800d5c6:	f7fe bd49 	b.w	800c05c <__retarget_lock_release_recursive>
 800d5ca:	bf00      	nop
 800d5cc:	20000818 	.word	0x20000818

0800d5d0 <_Balloc>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	69c6      	ldr	r6, [r0, #28]
 800d5d4:	4604      	mov	r4, r0
 800d5d6:	460d      	mov	r5, r1
 800d5d8:	b976      	cbnz	r6, 800d5f8 <_Balloc+0x28>
 800d5da:	2010      	movs	r0, #16
 800d5dc:	f7ff ff30 	bl	800d440 <malloc>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	61e0      	str	r0, [r4, #28]
 800d5e4:	b920      	cbnz	r0, 800d5f0 <_Balloc+0x20>
 800d5e6:	4b18      	ldr	r3, [pc, #96]	@ (800d648 <_Balloc+0x78>)
 800d5e8:	4818      	ldr	r0, [pc, #96]	@ (800d64c <_Balloc+0x7c>)
 800d5ea:	216b      	movs	r1, #107	@ 0x6b
 800d5ec:	f001 f962 	bl	800e8b4 <__assert_func>
 800d5f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5f4:	6006      	str	r6, [r0, #0]
 800d5f6:	60c6      	str	r6, [r0, #12]
 800d5f8:	69e6      	ldr	r6, [r4, #28]
 800d5fa:	68f3      	ldr	r3, [r6, #12]
 800d5fc:	b183      	cbz	r3, 800d620 <_Balloc+0x50>
 800d5fe:	69e3      	ldr	r3, [r4, #28]
 800d600:	68db      	ldr	r3, [r3, #12]
 800d602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d606:	b9b8      	cbnz	r0, 800d638 <_Balloc+0x68>
 800d608:	2101      	movs	r1, #1
 800d60a:	fa01 f605 	lsl.w	r6, r1, r5
 800d60e:	1d72      	adds	r2, r6, #5
 800d610:	0092      	lsls	r2, r2, #2
 800d612:	4620      	mov	r0, r4
 800d614:	f001 f96c 	bl	800e8f0 <_calloc_r>
 800d618:	b160      	cbz	r0, 800d634 <_Balloc+0x64>
 800d61a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d61e:	e00e      	b.n	800d63e <_Balloc+0x6e>
 800d620:	2221      	movs	r2, #33	@ 0x21
 800d622:	2104      	movs	r1, #4
 800d624:	4620      	mov	r0, r4
 800d626:	f001 f963 	bl	800e8f0 <_calloc_r>
 800d62a:	69e3      	ldr	r3, [r4, #28]
 800d62c:	60f0      	str	r0, [r6, #12]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d1e4      	bne.n	800d5fe <_Balloc+0x2e>
 800d634:	2000      	movs	r0, #0
 800d636:	bd70      	pop	{r4, r5, r6, pc}
 800d638:	6802      	ldr	r2, [r0, #0]
 800d63a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d63e:	2300      	movs	r3, #0
 800d640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d644:	e7f7      	b.n	800d636 <_Balloc+0x66>
 800d646:	bf00      	nop
 800d648:	0800ffce 	.word	0x0800ffce
 800d64c:	080100ae 	.word	0x080100ae

0800d650 <_Bfree>:
 800d650:	b570      	push	{r4, r5, r6, lr}
 800d652:	69c6      	ldr	r6, [r0, #28]
 800d654:	4605      	mov	r5, r0
 800d656:	460c      	mov	r4, r1
 800d658:	b976      	cbnz	r6, 800d678 <_Bfree+0x28>
 800d65a:	2010      	movs	r0, #16
 800d65c:	f7ff fef0 	bl	800d440 <malloc>
 800d660:	4602      	mov	r2, r0
 800d662:	61e8      	str	r0, [r5, #28]
 800d664:	b920      	cbnz	r0, 800d670 <_Bfree+0x20>
 800d666:	4b09      	ldr	r3, [pc, #36]	@ (800d68c <_Bfree+0x3c>)
 800d668:	4809      	ldr	r0, [pc, #36]	@ (800d690 <_Bfree+0x40>)
 800d66a:	218f      	movs	r1, #143	@ 0x8f
 800d66c:	f001 f922 	bl	800e8b4 <__assert_func>
 800d670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d674:	6006      	str	r6, [r0, #0]
 800d676:	60c6      	str	r6, [r0, #12]
 800d678:	b13c      	cbz	r4, 800d68a <_Bfree+0x3a>
 800d67a:	69eb      	ldr	r3, [r5, #28]
 800d67c:	6862      	ldr	r2, [r4, #4]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d684:	6021      	str	r1, [r4, #0]
 800d686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d68a:	bd70      	pop	{r4, r5, r6, pc}
 800d68c:	0800ffce 	.word	0x0800ffce
 800d690:	080100ae 	.word	0x080100ae

0800d694 <__multadd>:
 800d694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d698:	690d      	ldr	r5, [r1, #16]
 800d69a:	4607      	mov	r7, r0
 800d69c:	460c      	mov	r4, r1
 800d69e:	461e      	mov	r6, r3
 800d6a0:	f101 0c14 	add.w	ip, r1, #20
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	f8dc 3000 	ldr.w	r3, [ip]
 800d6aa:	b299      	uxth	r1, r3
 800d6ac:	fb02 6101 	mla	r1, r2, r1, r6
 800d6b0:	0c1e      	lsrs	r6, r3, #16
 800d6b2:	0c0b      	lsrs	r3, r1, #16
 800d6b4:	fb02 3306 	mla	r3, r2, r6, r3
 800d6b8:	b289      	uxth	r1, r1
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d6c0:	4285      	cmp	r5, r0
 800d6c2:	f84c 1b04 	str.w	r1, [ip], #4
 800d6c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d6ca:	dcec      	bgt.n	800d6a6 <__multadd+0x12>
 800d6cc:	b30e      	cbz	r6, 800d712 <__multadd+0x7e>
 800d6ce:	68a3      	ldr	r3, [r4, #8]
 800d6d0:	42ab      	cmp	r3, r5
 800d6d2:	dc19      	bgt.n	800d708 <__multadd+0x74>
 800d6d4:	6861      	ldr	r1, [r4, #4]
 800d6d6:	4638      	mov	r0, r7
 800d6d8:	3101      	adds	r1, #1
 800d6da:	f7ff ff79 	bl	800d5d0 <_Balloc>
 800d6de:	4680      	mov	r8, r0
 800d6e0:	b928      	cbnz	r0, 800d6ee <__multadd+0x5a>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	4b0c      	ldr	r3, [pc, #48]	@ (800d718 <__multadd+0x84>)
 800d6e6:	480d      	ldr	r0, [pc, #52]	@ (800d71c <__multadd+0x88>)
 800d6e8:	21ba      	movs	r1, #186	@ 0xba
 800d6ea:	f001 f8e3 	bl	800e8b4 <__assert_func>
 800d6ee:	6922      	ldr	r2, [r4, #16]
 800d6f0:	3202      	adds	r2, #2
 800d6f2:	f104 010c 	add.w	r1, r4, #12
 800d6f6:	0092      	lsls	r2, r2, #2
 800d6f8:	300c      	adds	r0, #12
 800d6fa:	f7fe fcb0 	bl	800c05e <memcpy>
 800d6fe:	4621      	mov	r1, r4
 800d700:	4638      	mov	r0, r7
 800d702:	f7ff ffa5 	bl	800d650 <_Bfree>
 800d706:	4644      	mov	r4, r8
 800d708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d70c:	3501      	adds	r5, #1
 800d70e:	615e      	str	r6, [r3, #20]
 800d710:	6125      	str	r5, [r4, #16]
 800d712:	4620      	mov	r0, r4
 800d714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d718:	0801003d 	.word	0x0801003d
 800d71c:	080100ae 	.word	0x080100ae

0800d720 <__s2b>:
 800d720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d724:	460c      	mov	r4, r1
 800d726:	4615      	mov	r5, r2
 800d728:	461f      	mov	r7, r3
 800d72a:	2209      	movs	r2, #9
 800d72c:	3308      	adds	r3, #8
 800d72e:	4606      	mov	r6, r0
 800d730:	fb93 f3f2 	sdiv	r3, r3, r2
 800d734:	2100      	movs	r1, #0
 800d736:	2201      	movs	r2, #1
 800d738:	429a      	cmp	r2, r3
 800d73a:	db09      	blt.n	800d750 <__s2b+0x30>
 800d73c:	4630      	mov	r0, r6
 800d73e:	f7ff ff47 	bl	800d5d0 <_Balloc>
 800d742:	b940      	cbnz	r0, 800d756 <__s2b+0x36>
 800d744:	4602      	mov	r2, r0
 800d746:	4b19      	ldr	r3, [pc, #100]	@ (800d7ac <__s2b+0x8c>)
 800d748:	4819      	ldr	r0, [pc, #100]	@ (800d7b0 <__s2b+0x90>)
 800d74a:	21d3      	movs	r1, #211	@ 0xd3
 800d74c:	f001 f8b2 	bl	800e8b4 <__assert_func>
 800d750:	0052      	lsls	r2, r2, #1
 800d752:	3101      	adds	r1, #1
 800d754:	e7f0      	b.n	800d738 <__s2b+0x18>
 800d756:	9b08      	ldr	r3, [sp, #32]
 800d758:	6143      	str	r3, [r0, #20]
 800d75a:	2d09      	cmp	r5, #9
 800d75c:	f04f 0301 	mov.w	r3, #1
 800d760:	6103      	str	r3, [r0, #16]
 800d762:	dd16      	ble.n	800d792 <__s2b+0x72>
 800d764:	f104 0909 	add.w	r9, r4, #9
 800d768:	46c8      	mov	r8, r9
 800d76a:	442c      	add	r4, r5
 800d76c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d770:	4601      	mov	r1, r0
 800d772:	3b30      	subs	r3, #48	@ 0x30
 800d774:	220a      	movs	r2, #10
 800d776:	4630      	mov	r0, r6
 800d778:	f7ff ff8c 	bl	800d694 <__multadd>
 800d77c:	45a0      	cmp	r8, r4
 800d77e:	d1f5      	bne.n	800d76c <__s2b+0x4c>
 800d780:	f1a5 0408 	sub.w	r4, r5, #8
 800d784:	444c      	add	r4, r9
 800d786:	1b2d      	subs	r5, r5, r4
 800d788:	1963      	adds	r3, r4, r5
 800d78a:	42bb      	cmp	r3, r7
 800d78c:	db04      	blt.n	800d798 <__s2b+0x78>
 800d78e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d792:	340a      	adds	r4, #10
 800d794:	2509      	movs	r5, #9
 800d796:	e7f6      	b.n	800d786 <__s2b+0x66>
 800d798:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d79c:	4601      	mov	r1, r0
 800d79e:	3b30      	subs	r3, #48	@ 0x30
 800d7a0:	220a      	movs	r2, #10
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7ff ff76 	bl	800d694 <__multadd>
 800d7a8:	e7ee      	b.n	800d788 <__s2b+0x68>
 800d7aa:	bf00      	nop
 800d7ac:	0801003d 	.word	0x0801003d
 800d7b0:	080100ae 	.word	0x080100ae

0800d7b4 <__hi0bits>:
 800d7b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	bf36      	itet	cc
 800d7bc:	0403      	lslcc	r3, r0, #16
 800d7be:	2000      	movcs	r0, #0
 800d7c0:	2010      	movcc	r0, #16
 800d7c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d7c6:	bf3c      	itt	cc
 800d7c8:	021b      	lslcc	r3, r3, #8
 800d7ca:	3008      	addcc	r0, #8
 800d7cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7d0:	bf3c      	itt	cc
 800d7d2:	011b      	lslcc	r3, r3, #4
 800d7d4:	3004      	addcc	r0, #4
 800d7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7da:	bf3c      	itt	cc
 800d7dc:	009b      	lslcc	r3, r3, #2
 800d7de:	3002      	addcc	r0, #2
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	db05      	blt.n	800d7f0 <__hi0bits+0x3c>
 800d7e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d7e8:	f100 0001 	add.w	r0, r0, #1
 800d7ec:	bf08      	it	eq
 800d7ee:	2020      	moveq	r0, #32
 800d7f0:	4770      	bx	lr

0800d7f2 <__lo0bits>:
 800d7f2:	6803      	ldr	r3, [r0, #0]
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	f013 0007 	ands.w	r0, r3, #7
 800d7fa:	d00b      	beq.n	800d814 <__lo0bits+0x22>
 800d7fc:	07d9      	lsls	r1, r3, #31
 800d7fe:	d421      	bmi.n	800d844 <__lo0bits+0x52>
 800d800:	0798      	lsls	r0, r3, #30
 800d802:	bf49      	itett	mi
 800d804:	085b      	lsrmi	r3, r3, #1
 800d806:	089b      	lsrpl	r3, r3, #2
 800d808:	2001      	movmi	r0, #1
 800d80a:	6013      	strmi	r3, [r2, #0]
 800d80c:	bf5c      	itt	pl
 800d80e:	6013      	strpl	r3, [r2, #0]
 800d810:	2002      	movpl	r0, #2
 800d812:	4770      	bx	lr
 800d814:	b299      	uxth	r1, r3
 800d816:	b909      	cbnz	r1, 800d81c <__lo0bits+0x2a>
 800d818:	0c1b      	lsrs	r3, r3, #16
 800d81a:	2010      	movs	r0, #16
 800d81c:	b2d9      	uxtb	r1, r3
 800d81e:	b909      	cbnz	r1, 800d824 <__lo0bits+0x32>
 800d820:	3008      	adds	r0, #8
 800d822:	0a1b      	lsrs	r3, r3, #8
 800d824:	0719      	lsls	r1, r3, #28
 800d826:	bf04      	itt	eq
 800d828:	091b      	lsreq	r3, r3, #4
 800d82a:	3004      	addeq	r0, #4
 800d82c:	0799      	lsls	r1, r3, #30
 800d82e:	bf04      	itt	eq
 800d830:	089b      	lsreq	r3, r3, #2
 800d832:	3002      	addeq	r0, #2
 800d834:	07d9      	lsls	r1, r3, #31
 800d836:	d403      	bmi.n	800d840 <__lo0bits+0x4e>
 800d838:	085b      	lsrs	r3, r3, #1
 800d83a:	f100 0001 	add.w	r0, r0, #1
 800d83e:	d003      	beq.n	800d848 <__lo0bits+0x56>
 800d840:	6013      	str	r3, [r2, #0]
 800d842:	4770      	bx	lr
 800d844:	2000      	movs	r0, #0
 800d846:	4770      	bx	lr
 800d848:	2020      	movs	r0, #32
 800d84a:	4770      	bx	lr

0800d84c <__i2b>:
 800d84c:	b510      	push	{r4, lr}
 800d84e:	460c      	mov	r4, r1
 800d850:	2101      	movs	r1, #1
 800d852:	f7ff febd 	bl	800d5d0 <_Balloc>
 800d856:	4602      	mov	r2, r0
 800d858:	b928      	cbnz	r0, 800d866 <__i2b+0x1a>
 800d85a:	4b05      	ldr	r3, [pc, #20]	@ (800d870 <__i2b+0x24>)
 800d85c:	4805      	ldr	r0, [pc, #20]	@ (800d874 <__i2b+0x28>)
 800d85e:	f240 1145 	movw	r1, #325	@ 0x145
 800d862:	f001 f827 	bl	800e8b4 <__assert_func>
 800d866:	2301      	movs	r3, #1
 800d868:	6144      	str	r4, [r0, #20]
 800d86a:	6103      	str	r3, [r0, #16]
 800d86c:	bd10      	pop	{r4, pc}
 800d86e:	bf00      	nop
 800d870:	0801003d 	.word	0x0801003d
 800d874:	080100ae 	.word	0x080100ae

0800d878 <__multiply>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	4614      	mov	r4, r2
 800d87e:	690a      	ldr	r2, [r1, #16]
 800d880:	6923      	ldr	r3, [r4, #16]
 800d882:	429a      	cmp	r2, r3
 800d884:	bfa8      	it	ge
 800d886:	4623      	movge	r3, r4
 800d888:	460f      	mov	r7, r1
 800d88a:	bfa4      	itt	ge
 800d88c:	460c      	movge	r4, r1
 800d88e:	461f      	movge	r7, r3
 800d890:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d894:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d898:	68a3      	ldr	r3, [r4, #8]
 800d89a:	6861      	ldr	r1, [r4, #4]
 800d89c:	eb0a 0609 	add.w	r6, sl, r9
 800d8a0:	42b3      	cmp	r3, r6
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	bfb8      	it	lt
 800d8a6:	3101      	addlt	r1, #1
 800d8a8:	f7ff fe92 	bl	800d5d0 <_Balloc>
 800d8ac:	b930      	cbnz	r0, 800d8bc <__multiply+0x44>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	4b44      	ldr	r3, [pc, #272]	@ (800d9c4 <__multiply+0x14c>)
 800d8b2:	4845      	ldr	r0, [pc, #276]	@ (800d9c8 <__multiply+0x150>)
 800d8b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d8b8:	f000 fffc 	bl	800e8b4 <__assert_func>
 800d8bc:	f100 0514 	add.w	r5, r0, #20
 800d8c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d8c4:	462b      	mov	r3, r5
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	4543      	cmp	r3, r8
 800d8ca:	d321      	bcc.n	800d910 <__multiply+0x98>
 800d8cc:	f107 0114 	add.w	r1, r7, #20
 800d8d0:	f104 0214 	add.w	r2, r4, #20
 800d8d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d8d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d8dc:	9302      	str	r3, [sp, #8]
 800d8de:	1b13      	subs	r3, r2, r4
 800d8e0:	3b15      	subs	r3, #21
 800d8e2:	f023 0303 	bic.w	r3, r3, #3
 800d8e6:	3304      	adds	r3, #4
 800d8e8:	f104 0715 	add.w	r7, r4, #21
 800d8ec:	42ba      	cmp	r2, r7
 800d8ee:	bf38      	it	cc
 800d8f0:	2304      	movcc	r3, #4
 800d8f2:	9301      	str	r3, [sp, #4]
 800d8f4:	9b02      	ldr	r3, [sp, #8]
 800d8f6:	9103      	str	r1, [sp, #12]
 800d8f8:	428b      	cmp	r3, r1
 800d8fa:	d80c      	bhi.n	800d916 <__multiply+0x9e>
 800d8fc:	2e00      	cmp	r6, #0
 800d8fe:	dd03      	ble.n	800d908 <__multiply+0x90>
 800d900:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d904:	2b00      	cmp	r3, #0
 800d906:	d05b      	beq.n	800d9c0 <__multiply+0x148>
 800d908:	6106      	str	r6, [r0, #16]
 800d90a:	b005      	add	sp, #20
 800d90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d910:	f843 2b04 	str.w	r2, [r3], #4
 800d914:	e7d8      	b.n	800d8c8 <__multiply+0x50>
 800d916:	f8b1 a000 	ldrh.w	sl, [r1]
 800d91a:	f1ba 0f00 	cmp.w	sl, #0
 800d91e:	d024      	beq.n	800d96a <__multiply+0xf2>
 800d920:	f104 0e14 	add.w	lr, r4, #20
 800d924:	46a9      	mov	r9, r5
 800d926:	f04f 0c00 	mov.w	ip, #0
 800d92a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d92e:	f8d9 3000 	ldr.w	r3, [r9]
 800d932:	fa1f fb87 	uxth.w	fp, r7
 800d936:	b29b      	uxth	r3, r3
 800d938:	fb0a 330b 	mla	r3, sl, fp, r3
 800d93c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d940:	f8d9 7000 	ldr.w	r7, [r9]
 800d944:	4463      	add	r3, ip
 800d946:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d94a:	fb0a c70b 	mla	r7, sl, fp, ip
 800d94e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d952:	b29b      	uxth	r3, r3
 800d954:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d958:	4572      	cmp	r2, lr
 800d95a:	f849 3b04 	str.w	r3, [r9], #4
 800d95e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d962:	d8e2      	bhi.n	800d92a <__multiply+0xb2>
 800d964:	9b01      	ldr	r3, [sp, #4]
 800d966:	f845 c003 	str.w	ip, [r5, r3]
 800d96a:	9b03      	ldr	r3, [sp, #12]
 800d96c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d970:	3104      	adds	r1, #4
 800d972:	f1b9 0f00 	cmp.w	r9, #0
 800d976:	d021      	beq.n	800d9bc <__multiply+0x144>
 800d978:	682b      	ldr	r3, [r5, #0]
 800d97a:	f104 0c14 	add.w	ip, r4, #20
 800d97e:	46ae      	mov	lr, r5
 800d980:	f04f 0a00 	mov.w	sl, #0
 800d984:	f8bc b000 	ldrh.w	fp, [ip]
 800d988:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d98c:	fb09 770b 	mla	r7, r9, fp, r7
 800d990:	4457      	add	r7, sl
 800d992:	b29b      	uxth	r3, r3
 800d994:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d998:	f84e 3b04 	str.w	r3, [lr], #4
 800d99c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d9a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9a4:	f8be 3000 	ldrh.w	r3, [lr]
 800d9a8:	fb09 330a 	mla	r3, r9, sl, r3
 800d9ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d9b0:	4562      	cmp	r2, ip
 800d9b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d9b6:	d8e5      	bhi.n	800d984 <__multiply+0x10c>
 800d9b8:	9f01      	ldr	r7, [sp, #4]
 800d9ba:	51eb      	str	r3, [r5, r7]
 800d9bc:	3504      	adds	r5, #4
 800d9be:	e799      	b.n	800d8f4 <__multiply+0x7c>
 800d9c0:	3e01      	subs	r6, #1
 800d9c2:	e79b      	b.n	800d8fc <__multiply+0x84>
 800d9c4:	0801003d 	.word	0x0801003d
 800d9c8:	080100ae 	.word	0x080100ae

0800d9cc <__pow5mult>:
 800d9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9d0:	4615      	mov	r5, r2
 800d9d2:	f012 0203 	ands.w	r2, r2, #3
 800d9d6:	4607      	mov	r7, r0
 800d9d8:	460e      	mov	r6, r1
 800d9da:	d007      	beq.n	800d9ec <__pow5mult+0x20>
 800d9dc:	4c25      	ldr	r4, [pc, #148]	@ (800da74 <__pow5mult+0xa8>)
 800d9de:	3a01      	subs	r2, #1
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9e6:	f7ff fe55 	bl	800d694 <__multadd>
 800d9ea:	4606      	mov	r6, r0
 800d9ec:	10ad      	asrs	r5, r5, #2
 800d9ee:	d03d      	beq.n	800da6c <__pow5mult+0xa0>
 800d9f0:	69fc      	ldr	r4, [r7, #28]
 800d9f2:	b97c      	cbnz	r4, 800da14 <__pow5mult+0x48>
 800d9f4:	2010      	movs	r0, #16
 800d9f6:	f7ff fd23 	bl	800d440 <malloc>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	61f8      	str	r0, [r7, #28]
 800d9fe:	b928      	cbnz	r0, 800da0c <__pow5mult+0x40>
 800da00:	4b1d      	ldr	r3, [pc, #116]	@ (800da78 <__pow5mult+0xac>)
 800da02:	481e      	ldr	r0, [pc, #120]	@ (800da7c <__pow5mult+0xb0>)
 800da04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da08:	f000 ff54 	bl	800e8b4 <__assert_func>
 800da0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da10:	6004      	str	r4, [r0, #0]
 800da12:	60c4      	str	r4, [r0, #12]
 800da14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800da18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da1c:	b94c      	cbnz	r4, 800da32 <__pow5mult+0x66>
 800da1e:	f240 2171 	movw	r1, #625	@ 0x271
 800da22:	4638      	mov	r0, r7
 800da24:	f7ff ff12 	bl	800d84c <__i2b>
 800da28:	2300      	movs	r3, #0
 800da2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800da2e:	4604      	mov	r4, r0
 800da30:	6003      	str	r3, [r0, #0]
 800da32:	f04f 0900 	mov.w	r9, #0
 800da36:	07eb      	lsls	r3, r5, #31
 800da38:	d50a      	bpl.n	800da50 <__pow5mult+0x84>
 800da3a:	4631      	mov	r1, r6
 800da3c:	4622      	mov	r2, r4
 800da3e:	4638      	mov	r0, r7
 800da40:	f7ff ff1a 	bl	800d878 <__multiply>
 800da44:	4631      	mov	r1, r6
 800da46:	4680      	mov	r8, r0
 800da48:	4638      	mov	r0, r7
 800da4a:	f7ff fe01 	bl	800d650 <_Bfree>
 800da4e:	4646      	mov	r6, r8
 800da50:	106d      	asrs	r5, r5, #1
 800da52:	d00b      	beq.n	800da6c <__pow5mult+0xa0>
 800da54:	6820      	ldr	r0, [r4, #0]
 800da56:	b938      	cbnz	r0, 800da68 <__pow5mult+0x9c>
 800da58:	4622      	mov	r2, r4
 800da5a:	4621      	mov	r1, r4
 800da5c:	4638      	mov	r0, r7
 800da5e:	f7ff ff0b 	bl	800d878 <__multiply>
 800da62:	6020      	str	r0, [r4, #0]
 800da64:	f8c0 9000 	str.w	r9, [r0]
 800da68:	4604      	mov	r4, r0
 800da6a:	e7e4      	b.n	800da36 <__pow5mult+0x6a>
 800da6c:	4630      	mov	r0, r6
 800da6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da72:	bf00      	nop
 800da74:	08010108 	.word	0x08010108
 800da78:	0800ffce 	.word	0x0800ffce
 800da7c:	080100ae 	.word	0x080100ae

0800da80 <__lshift>:
 800da80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da84:	460c      	mov	r4, r1
 800da86:	6849      	ldr	r1, [r1, #4]
 800da88:	6923      	ldr	r3, [r4, #16]
 800da8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da8e:	68a3      	ldr	r3, [r4, #8]
 800da90:	4607      	mov	r7, r0
 800da92:	4691      	mov	r9, r2
 800da94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da98:	f108 0601 	add.w	r6, r8, #1
 800da9c:	42b3      	cmp	r3, r6
 800da9e:	db0b      	blt.n	800dab8 <__lshift+0x38>
 800daa0:	4638      	mov	r0, r7
 800daa2:	f7ff fd95 	bl	800d5d0 <_Balloc>
 800daa6:	4605      	mov	r5, r0
 800daa8:	b948      	cbnz	r0, 800dabe <__lshift+0x3e>
 800daaa:	4602      	mov	r2, r0
 800daac:	4b28      	ldr	r3, [pc, #160]	@ (800db50 <__lshift+0xd0>)
 800daae:	4829      	ldr	r0, [pc, #164]	@ (800db54 <__lshift+0xd4>)
 800dab0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dab4:	f000 fefe 	bl	800e8b4 <__assert_func>
 800dab8:	3101      	adds	r1, #1
 800daba:	005b      	lsls	r3, r3, #1
 800dabc:	e7ee      	b.n	800da9c <__lshift+0x1c>
 800dabe:	2300      	movs	r3, #0
 800dac0:	f100 0114 	add.w	r1, r0, #20
 800dac4:	f100 0210 	add.w	r2, r0, #16
 800dac8:	4618      	mov	r0, r3
 800daca:	4553      	cmp	r3, sl
 800dacc:	db33      	blt.n	800db36 <__lshift+0xb6>
 800dace:	6920      	ldr	r0, [r4, #16]
 800dad0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dad4:	f104 0314 	add.w	r3, r4, #20
 800dad8:	f019 091f 	ands.w	r9, r9, #31
 800dadc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dae0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dae4:	d02b      	beq.n	800db3e <__lshift+0xbe>
 800dae6:	f1c9 0e20 	rsb	lr, r9, #32
 800daea:	468a      	mov	sl, r1
 800daec:	2200      	movs	r2, #0
 800daee:	6818      	ldr	r0, [r3, #0]
 800daf0:	fa00 f009 	lsl.w	r0, r0, r9
 800daf4:	4310      	orrs	r0, r2
 800daf6:	f84a 0b04 	str.w	r0, [sl], #4
 800dafa:	f853 2b04 	ldr.w	r2, [r3], #4
 800dafe:	459c      	cmp	ip, r3
 800db00:	fa22 f20e 	lsr.w	r2, r2, lr
 800db04:	d8f3      	bhi.n	800daee <__lshift+0x6e>
 800db06:	ebac 0304 	sub.w	r3, ip, r4
 800db0a:	3b15      	subs	r3, #21
 800db0c:	f023 0303 	bic.w	r3, r3, #3
 800db10:	3304      	adds	r3, #4
 800db12:	f104 0015 	add.w	r0, r4, #21
 800db16:	4584      	cmp	ip, r0
 800db18:	bf38      	it	cc
 800db1a:	2304      	movcc	r3, #4
 800db1c:	50ca      	str	r2, [r1, r3]
 800db1e:	b10a      	cbz	r2, 800db24 <__lshift+0xa4>
 800db20:	f108 0602 	add.w	r6, r8, #2
 800db24:	3e01      	subs	r6, #1
 800db26:	4638      	mov	r0, r7
 800db28:	612e      	str	r6, [r5, #16]
 800db2a:	4621      	mov	r1, r4
 800db2c:	f7ff fd90 	bl	800d650 <_Bfree>
 800db30:	4628      	mov	r0, r5
 800db32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db36:	f842 0f04 	str.w	r0, [r2, #4]!
 800db3a:	3301      	adds	r3, #1
 800db3c:	e7c5      	b.n	800daca <__lshift+0x4a>
 800db3e:	3904      	subs	r1, #4
 800db40:	f853 2b04 	ldr.w	r2, [r3], #4
 800db44:	f841 2f04 	str.w	r2, [r1, #4]!
 800db48:	459c      	cmp	ip, r3
 800db4a:	d8f9      	bhi.n	800db40 <__lshift+0xc0>
 800db4c:	e7ea      	b.n	800db24 <__lshift+0xa4>
 800db4e:	bf00      	nop
 800db50:	0801003d 	.word	0x0801003d
 800db54:	080100ae 	.word	0x080100ae

0800db58 <__mcmp>:
 800db58:	690a      	ldr	r2, [r1, #16]
 800db5a:	4603      	mov	r3, r0
 800db5c:	6900      	ldr	r0, [r0, #16]
 800db5e:	1a80      	subs	r0, r0, r2
 800db60:	b530      	push	{r4, r5, lr}
 800db62:	d10e      	bne.n	800db82 <__mcmp+0x2a>
 800db64:	3314      	adds	r3, #20
 800db66:	3114      	adds	r1, #20
 800db68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db78:	4295      	cmp	r5, r2
 800db7a:	d003      	beq.n	800db84 <__mcmp+0x2c>
 800db7c:	d205      	bcs.n	800db8a <__mcmp+0x32>
 800db7e:	f04f 30ff 	mov.w	r0, #4294967295
 800db82:	bd30      	pop	{r4, r5, pc}
 800db84:	42a3      	cmp	r3, r4
 800db86:	d3f3      	bcc.n	800db70 <__mcmp+0x18>
 800db88:	e7fb      	b.n	800db82 <__mcmp+0x2a>
 800db8a:	2001      	movs	r0, #1
 800db8c:	e7f9      	b.n	800db82 <__mcmp+0x2a>
	...

0800db90 <__mdiff>:
 800db90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	4689      	mov	r9, r1
 800db96:	4606      	mov	r6, r0
 800db98:	4611      	mov	r1, r2
 800db9a:	4648      	mov	r0, r9
 800db9c:	4614      	mov	r4, r2
 800db9e:	f7ff ffdb 	bl	800db58 <__mcmp>
 800dba2:	1e05      	subs	r5, r0, #0
 800dba4:	d112      	bne.n	800dbcc <__mdiff+0x3c>
 800dba6:	4629      	mov	r1, r5
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f7ff fd11 	bl	800d5d0 <_Balloc>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	b928      	cbnz	r0, 800dbbe <__mdiff+0x2e>
 800dbb2:	4b3f      	ldr	r3, [pc, #252]	@ (800dcb0 <__mdiff+0x120>)
 800dbb4:	f240 2137 	movw	r1, #567	@ 0x237
 800dbb8:	483e      	ldr	r0, [pc, #248]	@ (800dcb4 <__mdiff+0x124>)
 800dbba:	f000 fe7b 	bl	800e8b4 <__assert_func>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	b003      	add	sp, #12
 800dbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbcc:	bfbc      	itt	lt
 800dbce:	464b      	movlt	r3, r9
 800dbd0:	46a1      	movlt	r9, r4
 800dbd2:	4630      	mov	r0, r6
 800dbd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dbd8:	bfba      	itte	lt
 800dbda:	461c      	movlt	r4, r3
 800dbdc:	2501      	movlt	r5, #1
 800dbde:	2500      	movge	r5, #0
 800dbe0:	f7ff fcf6 	bl	800d5d0 <_Balloc>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	b918      	cbnz	r0, 800dbf0 <__mdiff+0x60>
 800dbe8:	4b31      	ldr	r3, [pc, #196]	@ (800dcb0 <__mdiff+0x120>)
 800dbea:	f240 2145 	movw	r1, #581	@ 0x245
 800dbee:	e7e3      	b.n	800dbb8 <__mdiff+0x28>
 800dbf0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dbf4:	6926      	ldr	r6, [r4, #16]
 800dbf6:	60c5      	str	r5, [r0, #12]
 800dbf8:	f109 0310 	add.w	r3, r9, #16
 800dbfc:	f109 0514 	add.w	r5, r9, #20
 800dc00:	f104 0e14 	add.w	lr, r4, #20
 800dc04:	f100 0b14 	add.w	fp, r0, #20
 800dc08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dc0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	46d9      	mov	r9, fp
 800dc14:	f04f 0c00 	mov.w	ip, #0
 800dc18:	9b01      	ldr	r3, [sp, #4]
 800dc1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dc1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dc22:	9301      	str	r3, [sp, #4]
 800dc24:	fa1f f38a 	uxth.w	r3, sl
 800dc28:	4619      	mov	r1, r3
 800dc2a:	b283      	uxth	r3, r0
 800dc2c:	1acb      	subs	r3, r1, r3
 800dc2e:	0c00      	lsrs	r0, r0, #16
 800dc30:	4463      	add	r3, ip
 800dc32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dc36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dc40:	4576      	cmp	r6, lr
 800dc42:	f849 3b04 	str.w	r3, [r9], #4
 800dc46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc4a:	d8e5      	bhi.n	800dc18 <__mdiff+0x88>
 800dc4c:	1b33      	subs	r3, r6, r4
 800dc4e:	3b15      	subs	r3, #21
 800dc50:	f023 0303 	bic.w	r3, r3, #3
 800dc54:	3415      	adds	r4, #21
 800dc56:	3304      	adds	r3, #4
 800dc58:	42a6      	cmp	r6, r4
 800dc5a:	bf38      	it	cc
 800dc5c:	2304      	movcc	r3, #4
 800dc5e:	441d      	add	r5, r3
 800dc60:	445b      	add	r3, fp
 800dc62:	461e      	mov	r6, r3
 800dc64:	462c      	mov	r4, r5
 800dc66:	4544      	cmp	r4, r8
 800dc68:	d30e      	bcc.n	800dc88 <__mdiff+0xf8>
 800dc6a:	f108 0103 	add.w	r1, r8, #3
 800dc6e:	1b49      	subs	r1, r1, r5
 800dc70:	f021 0103 	bic.w	r1, r1, #3
 800dc74:	3d03      	subs	r5, #3
 800dc76:	45a8      	cmp	r8, r5
 800dc78:	bf38      	it	cc
 800dc7a:	2100      	movcc	r1, #0
 800dc7c:	440b      	add	r3, r1
 800dc7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc82:	b191      	cbz	r1, 800dcaa <__mdiff+0x11a>
 800dc84:	6117      	str	r7, [r2, #16]
 800dc86:	e79d      	b.n	800dbc4 <__mdiff+0x34>
 800dc88:	f854 1b04 	ldr.w	r1, [r4], #4
 800dc8c:	46e6      	mov	lr, ip
 800dc8e:	0c08      	lsrs	r0, r1, #16
 800dc90:	fa1c fc81 	uxtah	ip, ip, r1
 800dc94:	4471      	add	r1, lr
 800dc96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dc9a:	b289      	uxth	r1, r1
 800dc9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dca0:	f846 1b04 	str.w	r1, [r6], #4
 800dca4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dca8:	e7dd      	b.n	800dc66 <__mdiff+0xd6>
 800dcaa:	3f01      	subs	r7, #1
 800dcac:	e7e7      	b.n	800dc7e <__mdiff+0xee>
 800dcae:	bf00      	nop
 800dcb0:	0801003d 	.word	0x0801003d
 800dcb4:	080100ae 	.word	0x080100ae

0800dcb8 <__ulp>:
 800dcb8:	b082      	sub	sp, #8
 800dcba:	ed8d 0b00 	vstr	d0, [sp]
 800dcbe:	9a01      	ldr	r2, [sp, #4]
 800dcc0:	4b0f      	ldr	r3, [pc, #60]	@ (800dd00 <__ulp+0x48>)
 800dcc2:	4013      	ands	r3, r2
 800dcc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	dc08      	bgt.n	800dcde <__ulp+0x26>
 800dccc:	425b      	negs	r3, r3
 800dcce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dcd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dcd6:	da04      	bge.n	800dce2 <__ulp+0x2a>
 800dcd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dcdc:	4113      	asrs	r3, r2
 800dcde:	2200      	movs	r2, #0
 800dce0:	e008      	b.n	800dcf4 <__ulp+0x3c>
 800dce2:	f1a2 0314 	sub.w	r3, r2, #20
 800dce6:	2b1e      	cmp	r3, #30
 800dce8:	bfda      	itte	le
 800dcea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dcee:	40da      	lsrle	r2, r3
 800dcf0:	2201      	movgt	r2, #1
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4610      	mov	r0, r2
 800dcf8:	ec41 0b10 	vmov	d0, r0, r1
 800dcfc:	b002      	add	sp, #8
 800dcfe:	4770      	bx	lr
 800dd00:	7ff00000 	.word	0x7ff00000

0800dd04 <__b2d>:
 800dd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd08:	6906      	ldr	r6, [r0, #16]
 800dd0a:	f100 0814 	add.w	r8, r0, #20
 800dd0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dd12:	1f37      	subs	r7, r6, #4
 800dd14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dd18:	4610      	mov	r0, r2
 800dd1a:	f7ff fd4b 	bl	800d7b4 <__hi0bits>
 800dd1e:	f1c0 0320 	rsb	r3, r0, #32
 800dd22:	280a      	cmp	r0, #10
 800dd24:	600b      	str	r3, [r1, #0]
 800dd26:	491b      	ldr	r1, [pc, #108]	@ (800dd94 <__b2d+0x90>)
 800dd28:	dc15      	bgt.n	800dd56 <__b2d+0x52>
 800dd2a:	f1c0 0c0b 	rsb	ip, r0, #11
 800dd2e:	fa22 f30c 	lsr.w	r3, r2, ip
 800dd32:	45b8      	cmp	r8, r7
 800dd34:	ea43 0501 	orr.w	r5, r3, r1
 800dd38:	bf34      	ite	cc
 800dd3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dd3e:	2300      	movcs	r3, #0
 800dd40:	3015      	adds	r0, #21
 800dd42:	fa02 f000 	lsl.w	r0, r2, r0
 800dd46:	fa23 f30c 	lsr.w	r3, r3, ip
 800dd4a:	4303      	orrs	r3, r0
 800dd4c:	461c      	mov	r4, r3
 800dd4e:	ec45 4b10 	vmov	d0, r4, r5
 800dd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd56:	45b8      	cmp	r8, r7
 800dd58:	bf3a      	itte	cc
 800dd5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dd5e:	f1a6 0708 	subcc.w	r7, r6, #8
 800dd62:	2300      	movcs	r3, #0
 800dd64:	380b      	subs	r0, #11
 800dd66:	d012      	beq.n	800dd8e <__b2d+0x8a>
 800dd68:	f1c0 0120 	rsb	r1, r0, #32
 800dd6c:	fa23 f401 	lsr.w	r4, r3, r1
 800dd70:	4082      	lsls	r2, r0
 800dd72:	4322      	orrs	r2, r4
 800dd74:	4547      	cmp	r7, r8
 800dd76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dd7a:	bf8c      	ite	hi
 800dd7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800dd80:	2200      	movls	r2, #0
 800dd82:	4083      	lsls	r3, r0
 800dd84:	40ca      	lsrs	r2, r1
 800dd86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	e7de      	b.n	800dd4c <__b2d+0x48>
 800dd8e:	ea42 0501 	orr.w	r5, r2, r1
 800dd92:	e7db      	b.n	800dd4c <__b2d+0x48>
 800dd94:	3ff00000 	.word	0x3ff00000

0800dd98 <__d2b>:
 800dd98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd9c:	460f      	mov	r7, r1
 800dd9e:	2101      	movs	r1, #1
 800dda0:	ec59 8b10 	vmov	r8, r9, d0
 800dda4:	4616      	mov	r6, r2
 800dda6:	f7ff fc13 	bl	800d5d0 <_Balloc>
 800ddaa:	4604      	mov	r4, r0
 800ddac:	b930      	cbnz	r0, 800ddbc <__d2b+0x24>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	4b23      	ldr	r3, [pc, #140]	@ (800de40 <__d2b+0xa8>)
 800ddb2:	4824      	ldr	r0, [pc, #144]	@ (800de44 <__d2b+0xac>)
 800ddb4:	f240 310f 	movw	r1, #783	@ 0x30f
 800ddb8:	f000 fd7c 	bl	800e8b4 <__assert_func>
 800ddbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ddc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ddc4:	b10d      	cbz	r5, 800ddca <__d2b+0x32>
 800ddc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ddca:	9301      	str	r3, [sp, #4]
 800ddcc:	f1b8 0300 	subs.w	r3, r8, #0
 800ddd0:	d023      	beq.n	800de1a <__d2b+0x82>
 800ddd2:	4668      	mov	r0, sp
 800ddd4:	9300      	str	r3, [sp, #0]
 800ddd6:	f7ff fd0c 	bl	800d7f2 <__lo0bits>
 800ddda:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ddde:	b1d0      	cbz	r0, 800de16 <__d2b+0x7e>
 800dde0:	f1c0 0320 	rsb	r3, r0, #32
 800dde4:	fa02 f303 	lsl.w	r3, r2, r3
 800dde8:	430b      	orrs	r3, r1
 800ddea:	40c2      	lsrs	r2, r0
 800ddec:	6163      	str	r3, [r4, #20]
 800ddee:	9201      	str	r2, [sp, #4]
 800ddf0:	9b01      	ldr	r3, [sp, #4]
 800ddf2:	61a3      	str	r3, [r4, #24]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	bf0c      	ite	eq
 800ddf8:	2201      	moveq	r2, #1
 800ddfa:	2202      	movne	r2, #2
 800ddfc:	6122      	str	r2, [r4, #16]
 800ddfe:	b1a5      	cbz	r5, 800de2a <__d2b+0x92>
 800de00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800de04:	4405      	add	r5, r0
 800de06:	603d      	str	r5, [r7, #0]
 800de08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800de0c:	6030      	str	r0, [r6, #0]
 800de0e:	4620      	mov	r0, r4
 800de10:	b003      	add	sp, #12
 800de12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de16:	6161      	str	r1, [r4, #20]
 800de18:	e7ea      	b.n	800ddf0 <__d2b+0x58>
 800de1a:	a801      	add	r0, sp, #4
 800de1c:	f7ff fce9 	bl	800d7f2 <__lo0bits>
 800de20:	9b01      	ldr	r3, [sp, #4]
 800de22:	6163      	str	r3, [r4, #20]
 800de24:	3020      	adds	r0, #32
 800de26:	2201      	movs	r2, #1
 800de28:	e7e8      	b.n	800ddfc <__d2b+0x64>
 800de2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800de32:	6038      	str	r0, [r7, #0]
 800de34:	6918      	ldr	r0, [r3, #16]
 800de36:	f7ff fcbd 	bl	800d7b4 <__hi0bits>
 800de3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de3e:	e7e5      	b.n	800de0c <__d2b+0x74>
 800de40:	0801003d 	.word	0x0801003d
 800de44:	080100ae 	.word	0x080100ae

0800de48 <__ratio>:
 800de48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de4c:	b085      	sub	sp, #20
 800de4e:	e9cd 1000 	strd	r1, r0, [sp]
 800de52:	a902      	add	r1, sp, #8
 800de54:	f7ff ff56 	bl	800dd04 <__b2d>
 800de58:	9800      	ldr	r0, [sp, #0]
 800de5a:	a903      	add	r1, sp, #12
 800de5c:	ec55 4b10 	vmov	r4, r5, d0
 800de60:	f7ff ff50 	bl	800dd04 <__b2d>
 800de64:	9b01      	ldr	r3, [sp, #4]
 800de66:	6919      	ldr	r1, [r3, #16]
 800de68:	9b00      	ldr	r3, [sp, #0]
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	1ac9      	subs	r1, r1, r3
 800de6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800de72:	1a9b      	subs	r3, r3, r2
 800de74:	ec5b ab10 	vmov	sl, fp, d0
 800de78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	bfce      	itee	gt
 800de80:	462a      	movgt	r2, r5
 800de82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de86:	465a      	movle	r2, fp
 800de88:	462f      	mov	r7, r5
 800de8a:	46d9      	mov	r9, fp
 800de8c:	bfcc      	ite	gt
 800de8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800de96:	464b      	mov	r3, r9
 800de98:	4652      	mov	r2, sl
 800de9a:	4620      	mov	r0, r4
 800de9c:	4639      	mov	r1, r7
 800de9e:	f7f2 fcd5 	bl	800084c <__aeabi_ddiv>
 800dea2:	ec41 0b10 	vmov	d0, r0, r1
 800dea6:	b005      	add	sp, #20
 800dea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800deac <__copybits>:
 800deac:	3901      	subs	r1, #1
 800deae:	b570      	push	{r4, r5, r6, lr}
 800deb0:	1149      	asrs	r1, r1, #5
 800deb2:	6914      	ldr	r4, [r2, #16]
 800deb4:	3101      	adds	r1, #1
 800deb6:	f102 0314 	add.w	r3, r2, #20
 800deba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800debe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dec2:	1f05      	subs	r5, r0, #4
 800dec4:	42a3      	cmp	r3, r4
 800dec6:	d30c      	bcc.n	800dee2 <__copybits+0x36>
 800dec8:	1aa3      	subs	r3, r4, r2
 800deca:	3b11      	subs	r3, #17
 800decc:	f023 0303 	bic.w	r3, r3, #3
 800ded0:	3211      	adds	r2, #17
 800ded2:	42a2      	cmp	r2, r4
 800ded4:	bf88      	it	hi
 800ded6:	2300      	movhi	r3, #0
 800ded8:	4418      	add	r0, r3
 800deda:	2300      	movs	r3, #0
 800dedc:	4288      	cmp	r0, r1
 800dede:	d305      	bcc.n	800deec <__copybits+0x40>
 800dee0:	bd70      	pop	{r4, r5, r6, pc}
 800dee2:	f853 6b04 	ldr.w	r6, [r3], #4
 800dee6:	f845 6f04 	str.w	r6, [r5, #4]!
 800deea:	e7eb      	b.n	800dec4 <__copybits+0x18>
 800deec:	f840 3b04 	str.w	r3, [r0], #4
 800def0:	e7f4      	b.n	800dedc <__copybits+0x30>

0800def2 <__any_on>:
 800def2:	f100 0214 	add.w	r2, r0, #20
 800def6:	6900      	ldr	r0, [r0, #16]
 800def8:	114b      	asrs	r3, r1, #5
 800defa:	4298      	cmp	r0, r3
 800defc:	b510      	push	{r4, lr}
 800defe:	db11      	blt.n	800df24 <__any_on+0x32>
 800df00:	dd0a      	ble.n	800df18 <__any_on+0x26>
 800df02:	f011 011f 	ands.w	r1, r1, #31
 800df06:	d007      	beq.n	800df18 <__any_on+0x26>
 800df08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800df0c:	fa24 f001 	lsr.w	r0, r4, r1
 800df10:	fa00 f101 	lsl.w	r1, r0, r1
 800df14:	428c      	cmp	r4, r1
 800df16:	d10b      	bne.n	800df30 <__any_on+0x3e>
 800df18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800df1c:	4293      	cmp	r3, r2
 800df1e:	d803      	bhi.n	800df28 <__any_on+0x36>
 800df20:	2000      	movs	r0, #0
 800df22:	bd10      	pop	{r4, pc}
 800df24:	4603      	mov	r3, r0
 800df26:	e7f7      	b.n	800df18 <__any_on+0x26>
 800df28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df2c:	2900      	cmp	r1, #0
 800df2e:	d0f5      	beq.n	800df1c <__any_on+0x2a>
 800df30:	2001      	movs	r0, #1
 800df32:	e7f6      	b.n	800df22 <__any_on+0x30>

0800df34 <_strtol_l.constprop.0>:
 800df34:	2b24      	cmp	r3, #36	@ 0x24
 800df36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df3a:	4686      	mov	lr, r0
 800df3c:	4690      	mov	r8, r2
 800df3e:	d801      	bhi.n	800df44 <_strtol_l.constprop.0+0x10>
 800df40:	2b01      	cmp	r3, #1
 800df42:	d106      	bne.n	800df52 <_strtol_l.constprop.0+0x1e>
 800df44:	f7fe f85e 	bl	800c004 <__errno>
 800df48:	2316      	movs	r3, #22
 800df4a:	6003      	str	r3, [r0, #0]
 800df4c:	2000      	movs	r0, #0
 800df4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df52:	4834      	ldr	r0, [pc, #208]	@ (800e024 <_strtol_l.constprop.0+0xf0>)
 800df54:	460d      	mov	r5, r1
 800df56:	462a      	mov	r2, r5
 800df58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df5c:	5d06      	ldrb	r6, [r0, r4]
 800df5e:	f016 0608 	ands.w	r6, r6, #8
 800df62:	d1f8      	bne.n	800df56 <_strtol_l.constprop.0+0x22>
 800df64:	2c2d      	cmp	r4, #45	@ 0x2d
 800df66:	d12d      	bne.n	800dfc4 <_strtol_l.constprop.0+0x90>
 800df68:	782c      	ldrb	r4, [r5, #0]
 800df6a:	2601      	movs	r6, #1
 800df6c:	1c95      	adds	r5, r2, #2
 800df6e:	f033 0210 	bics.w	r2, r3, #16
 800df72:	d109      	bne.n	800df88 <_strtol_l.constprop.0+0x54>
 800df74:	2c30      	cmp	r4, #48	@ 0x30
 800df76:	d12a      	bne.n	800dfce <_strtol_l.constprop.0+0x9a>
 800df78:	782a      	ldrb	r2, [r5, #0]
 800df7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800df7e:	2a58      	cmp	r2, #88	@ 0x58
 800df80:	d125      	bne.n	800dfce <_strtol_l.constprop.0+0x9a>
 800df82:	786c      	ldrb	r4, [r5, #1]
 800df84:	2310      	movs	r3, #16
 800df86:	3502      	adds	r5, #2
 800df88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800df8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800df90:	2200      	movs	r2, #0
 800df92:	fbbc f9f3 	udiv	r9, ip, r3
 800df96:	4610      	mov	r0, r2
 800df98:	fb03 ca19 	mls	sl, r3, r9, ip
 800df9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dfa0:	2f09      	cmp	r7, #9
 800dfa2:	d81b      	bhi.n	800dfdc <_strtol_l.constprop.0+0xa8>
 800dfa4:	463c      	mov	r4, r7
 800dfa6:	42a3      	cmp	r3, r4
 800dfa8:	dd27      	ble.n	800dffa <_strtol_l.constprop.0+0xc6>
 800dfaa:	1c57      	adds	r7, r2, #1
 800dfac:	d007      	beq.n	800dfbe <_strtol_l.constprop.0+0x8a>
 800dfae:	4581      	cmp	r9, r0
 800dfb0:	d320      	bcc.n	800dff4 <_strtol_l.constprop.0+0xc0>
 800dfb2:	d101      	bne.n	800dfb8 <_strtol_l.constprop.0+0x84>
 800dfb4:	45a2      	cmp	sl, r4
 800dfb6:	db1d      	blt.n	800dff4 <_strtol_l.constprop.0+0xc0>
 800dfb8:	fb00 4003 	mla	r0, r0, r3, r4
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfc2:	e7eb      	b.n	800df9c <_strtol_l.constprop.0+0x68>
 800dfc4:	2c2b      	cmp	r4, #43	@ 0x2b
 800dfc6:	bf04      	itt	eq
 800dfc8:	782c      	ldrbeq	r4, [r5, #0]
 800dfca:	1c95      	addeq	r5, r2, #2
 800dfcc:	e7cf      	b.n	800df6e <_strtol_l.constprop.0+0x3a>
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d1da      	bne.n	800df88 <_strtol_l.constprop.0+0x54>
 800dfd2:	2c30      	cmp	r4, #48	@ 0x30
 800dfd4:	bf0c      	ite	eq
 800dfd6:	2308      	moveq	r3, #8
 800dfd8:	230a      	movne	r3, #10
 800dfda:	e7d5      	b.n	800df88 <_strtol_l.constprop.0+0x54>
 800dfdc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dfe0:	2f19      	cmp	r7, #25
 800dfe2:	d801      	bhi.n	800dfe8 <_strtol_l.constprop.0+0xb4>
 800dfe4:	3c37      	subs	r4, #55	@ 0x37
 800dfe6:	e7de      	b.n	800dfa6 <_strtol_l.constprop.0+0x72>
 800dfe8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dfec:	2f19      	cmp	r7, #25
 800dfee:	d804      	bhi.n	800dffa <_strtol_l.constprop.0+0xc6>
 800dff0:	3c57      	subs	r4, #87	@ 0x57
 800dff2:	e7d8      	b.n	800dfa6 <_strtol_l.constprop.0+0x72>
 800dff4:	f04f 32ff 	mov.w	r2, #4294967295
 800dff8:	e7e1      	b.n	800dfbe <_strtol_l.constprop.0+0x8a>
 800dffa:	1c53      	adds	r3, r2, #1
 800dffc:	d108      	bne.n	800e010 <_strtol_l.constprop.0+0xdc>
 800dffe:	2322      	movs	r3, #34	@ 0x22
 800e000:	f8ce 3000 	str.w	r3, [lr]
 800e004:	4660      	mov	r0, ip
 800e006:	f1b8 0f00 	cmp.w	r8, #0
 800e00a:	d0a0      	beq.n	800df4e <_strtol_l.constprop.0+0x1a>
 800e00c:	1e69      	subs	r1, r5, #1
 800e00e:	e006      	b.n	800e01e <_strtol_l.constprop.0+0xea>
 800e010:	b106      	cbz	r6, 800e014 <_strtol_l.constprop.0+0xe0>
 800e012:	4240      	negs	r0, r0
 800e014:	f1b8 0f00 	cmp.w	r8, #0
 800e018:	d099      	beq.n	800df4e <_strtol_l.constprop.0+0x1a>
 800e01a:	2a00      	cmp	r2, #0
 800e01c:	d1f6      	bne.n	800e00c <_strtol_l.constprop.0+0xd8>
 800e01e:	f8c8 1000 	str.w	r1, [r8]
 800e022:	e794      	b.n	800df4e <_strtol_l.constprop.0+0x1a>
 800e024:	08010209 	.word	0x08010209

0800e028 <_strtol_r>:
 800e028:	f7ff bf84 	b.w	800df34 <_strtol_l.constprop.0>

0800e02c <__ascii_wctomb>:
 800e02c:	4603      	mov	r3, r0
 800e02e:	4608      	mov	r0, r1
 800e030:	b141      	cbz	r1, 800e044 <__ascii_wctomb+0x18>
 800e032:	2aff      	cmp	r2, #255	@ 0xff
 800e034:	d904      	bls.n	800e040 <__ascii_wctomb+0x14>
 800e036:	228a      	movs	r2, #138	@ 0x8a
 800e038:	601a      	str	r2, [r3, #0]
 800e03a:	f04f 30ff 	mov.w	r0, #4294967295
 800e03e:	4770      	bx	lr
 800e040:	700a      	strb	r2, [r1, #0]
 800e042:	2001      	movs	r0, #1
 800e044:	4770      	bx	lr

0800e046 <__ssputs_r>:
 800e046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e04a:	688e      	ldr	r6, [r1, #8]
 800e04c:	461f      	mov	r7, r3
 800e04e:	42be      	cmp	r6, r7
 800e050:	680b      	ldr	r3, [r1, #0]
 800e052:	4682      	mov	sl, r0
 800e054:	460c      	mov	r4, r1
 800e056:	4690      	mov	r8, r2
 800e058:	d82d      	bhi.n	800e0b6 <__ssputs_r+0x70>
 800e05a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e05e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e062:	d026      	beq.n	800e0b2 <__ssputs_r+0x6c>
 800e064:	6965      	ldr	r5, [r4, #20]
 800e066:	6909      	ldr	r1, [r1, #16]
 800e068:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e06c:	eba3 0901 	sub.w	r9, r3, r1
 800e070:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e074:	1c7b      	adds	r3, r7, #1
 800e076:	444b      	add	r3, r9
 800e078:	106d      	asrs	r5, r5, #1
 800e07a:	429d      	cmp	r5, r3
 800e07c:	bf38      	it	cc
 800e07e:	461d      	movcc	r5, r3
 800e080:	0553      	lsls	r3, r2, #21
 800e082:	d527      	bpl.n	800e0d4 <__ssputs_r+0x8e>
 800e084:	4629      	mov	r1, r5
 800e086:	f7ff fa05 	bl	800d494 <_malloc_r>
 800e08a:	4606      	mov	r6, r0
 800e08c:	b360      	cbz	r0, 800e0e8 <__ssputs_r+0xa2>
 800e08e:	6921      	ldr	r1, [r4, #16]
 800e090:	464a      	mov	r2, r9
 800e092:	f7fd ffe4 	bl	800c05e <memcpy>
 800e096:	89a3      	ldrh	r3, [r4, #12]
 800e098:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0a0:	81a3      	strh	r3, [r4, #12]
 800e0a2:	6126      	str	r6, [r4, #16]
 800e0a4:	6165      	str	r5, [r4, #20]
 800e0a6:	444e      	add	r6, r9
 800e0a8:	eba5 0509 	sub.w	r5, r5, r9
 800e0ac:	6026      	str	r6, [r4, #0]
 800e0ae:	60a5      	str	r5, [r4, #8]
 800e0b0:	463e      	mov	r6, r7
 800e0b2:	42be      	cmp	r6, r7
 800e0b4:	d900      	bls.n	800e0b8 <__ssputs_r+0x72>
 800e0b6:	463e      	mov	r6, r7
 800e0b8:	6820      	ldr	r0, [r4, #0]
 800e0ba:	4632      	mov	r2, r6
 800e0bc:	4641      	mov	r1, r8
 800e0be:	f000 fbcf 	bl	800e860 <memmove>
 800e0c2:	68a3      	ldr	r3, [r4, #8]
 800e0c4:	1b9b      	subs	r3, r3, r6
 800e0c6:	60a3      	str	r3, [r4, #8]
 800e0c8:	6823      	ldr	r3, [r4, #0]
 800e0ca:	4433      	add	r3, r6
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0d4:	462a      	mov	r2, r5
 800e0d6:	f000 fc1f 	bl	800e918 <_realloc_r>
 800e0da:	4606      	mov	r6, r0
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d1e0      	bne.n	800e0a2 <__ssputs_r+0x5c>
 800e0e0:	6921      	ldr	r1, [r4, #16]
 800e0e2:	4650      	mov	r0, sl
 800e0e4:	f7fe fe28 	bl	800cd38 <_free_r>
 800e0e8:	230c      	movs	r3, #12
 800e0ea:	f8ca 3000 	str.w	r3, [sl]
 800e0ee:	89a3      	ldrh	r3, [r4, #12]
 800e0f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0f4:	81a3      	strh	r3, [r4, #12]
 800e0f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0fa:	e7e9      	b.n	800e0d0 <__ssputs_r+0x8a>

0800e0fc <_svfiprintf_r>:
 800e0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e100:	4698      	mov	r8, r3
 800e102:	898b      	ldrh	r3, [r1, #12]
 800e104:	061b      	lsls	r3, r3, #24
 800e106:	b09d      	sub	sp, #116	@ 0x74
 800e108:	4607      	mov	r7, r0
 800e10a:	460d      	mov	r5, r1
 800e10c:	4614      	mov	r4, r2
 800e10e:	d510      	bpl.n	800e132 <_svfiprintf_r+0x36>
 800e110:	690b      	ldr	r3, [r1, #16]
 800e112:	b973      	cbnz	r3, 800e132 <_svfiprintf_r+0x36>
 800e114:	2140      	movs	r1, #64	@ 0x40
 800e116:	f7ff f9bd 	bl	800d494 <_malloc_r>
 800e11a:	6028      	str	r0, [r5, #0]
 800e11c:	6128      	str	r0, [r5, #16]
 800e11e:	b930      	cbnz	r0, 800e12e <_svfiprintf_r+0x32>
 800e120:	230c      	movs	r3, #12
 800e122:	603b      	str	r3, [r7, #0]
 800e124:	f04f 30ff 	mov.w	r0, #4294967295
 800e128:	b01d      	add	sp, #116	@ 0x74
 800e12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e12e:	2340      	movs	r3, #64	@ 0x40
 800e130:	616b      	str	r3, [r5, #20]
 800e132:	2300      	movs	r3, #0
 800e134:	9309      	str	r3, [sp, #36]	@ 0x24
 800e136:	2320      	movs	r3, #32
 800e138:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e13c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e140:	2330      	movs	r3, #48	@ 0x30
 800e142:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e2e0 <_svfiprintf_r+0x1e4>
 800e146:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e14a:	f04f 0901 	mov.w	r9, #1
 800e14e:	4623      	mov	r3, r4
 800e150:	469a      	mov	sl, r3
 800e152:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e156:	b10a      	cbz	r2, 800e15c <_svfiprintf_r+0x60>
 800e158:	2a25      	cmp	r2, #37	@ 0x25
 800e15a:	d1f9      	bne.n	800e150 <_svfiprintf_r+0x54>
 800e15c:	ebba 0b04 	subs.w	fp, sl, r4
 800e160:	d00b      	beq.n	800e17a <_svfiprintf_r+0x7e>
 800e162:	465b      	mov	r3, fp
 800e164:	4622      	mov	r2, r4
 800e166:	4629      	mov	r1, r5
 800e168:	4638      	mov	r0, r7
 800e16a:	f7ff ff6c 	bl	800e046 <__ssputs_r>
 800e16e:	3001      	adds	r0, #1
 800e170:	f000 80a7 	beq.w	800e2c2 <_svfiprintf_r+0x1c6>
 800e174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e176:	445a      	add	r2, fp
 800e178:	9209      	str	r2, [sp, #36]	@ 0x24
 800e17a:	f89a 3000 	ldrb.w	r3, [sl]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	f000 809f 	beq.w	800e2c2 <_svfiprintf_r+0x1c6>
 800e184:	2300      	movs	r3, #0
 800e186:	f04f 32ff 	mov.w	r2, #4294967295
 800e18a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e18e:	f10a 0a01 	add.w	sl, sl, #1
 800e192:	9304      	str	r3, [sp, #16]
 800e194:	9307      	str	r3, [sp, #28]
 800e196:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e19a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e19c:	4654      	mov	r4, sl
 800e19e:	2205      	movs	r2, #5
 800e1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1a4:	484e      	ldr	r0, [pc, #312]	@ (800e2e0 <_svfiprintf_r+0x1e4>)
 800e1a6:	f7f2 f813 	bl	80001d0 <memchr>
 800e1aa:	9a04      	ldr	r2, [sp, #16]
 800e1ac:	b9d8      	cbnz	r0, 800e1e6 <_svfiprintf_r+0xea>
 800e1ae:	06d0      	lsls	r0, r2, #27
 800e1b0:	bf44      	itt	mi
 800e1b2:	2320      	movmi	r3, #32
 800e1b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1b8:	0711      	lsls	r1, r2, #28
 800e1ba:	bf44      	itt	mi
 800e1bc:	232b      	movmi	r3, #43	@ 0x2b
 800e1be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1c8:	d015      	beq.n	800e1f6 <_svfiprintf_r+0xfa>
 800e1ca:	9a07      	ldr	r2, [sp, #28]
 800e1cc:	4654      	mov	r4, sl
 800e1ce:	2000      	movs	r0, #0
 800e1d0:	f04f 0c0a 	mov.w	ip, #10
 800e1d4:	4621      	mov	r1, r4
 800e1d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1da:	3b30      	subs	r3, #48	@ 0x30
 800e1dc:	2b09      	cmp	r3, #9
 800e1de:	d94b      	bls.n	800e278 <_svfiprintf_r+0x17c>
 800e1e0:	b1b0      	cbz	r0, 800e210 <_svfiprintf_r+0x114>
 800e1e2:	9207      	str	r2, [sp, #28]
 800e1e4:	e014      	b.n	800e210 <_svfiprintf_r+0x114>
 800e1e6:	eba0 0308 	sub.w	r3, r0, r8
 800e1ea:	fa09 f303 	lsl.w	r3, r9, r3
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	46a2      	mov	sl, r4
 800e1f4:	e7d2      	b.n	800e19c <_svfiprintf_r+0xa0>
 800e1f6:	9b03      	ldr	r3, [sp, #12]
 800e1f8:	1d19      	adds	r1, r3, #4
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	9103      	str	r1, [sp, #12]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	bfbb      	ittet	lt
 800e202:	425b      	neglt	r3, r3
 800e204:	f042 0202 	orrlt.w	r2, r2, #2
 800e208:	9307      	strge	r3, [sp, #28]
 800e20a:	9307      	strlt	r3, [sp, #28]
 800e20c:	bfb8      	it	lt
 800e20e:	9204      	strlt	r2, [sp, #16]
 800e210:	7823      	ldrb	r3, [r4, #0]
 800e212:	2b2e      	cmp	r3, #46	@ 0x2e
 800e214:	d10a      	bne.n	800e22c <_svfiprintf_r+0x130>
 800e216:	7863      	ldrb	r3, [r4, #1]
 800e218:	2b2a      	cmp	r3, #42	@ 0x2a
 800e21a:	d132      	bne.n	800e282 <_svfiprintf_r+0x186>
 800e21c:	9b03      	ldr	r3, [sp, #12]
 800e21e:	1d1a      	adds	r2, r3, #4
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	9203      	str	r2, [sp, #12]
 800e224:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e228:	3402      	adds	r4, #2
 800e22a:	9305      	str	r3, [sp, #20]
 800e22c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e2f0 <_svfiprintf_r+0x1f4>
 800e230:	7821      	ldrb	r1, [r4, #0]
 800e232:	2203      	movs	r2, #3
 800e234:	4650      	mov	r0, sl
 800e236:	f7f1 ffcb 	bl	80001d0 <memchr>
 800e23a:	b138      	cbz	r0, 800e24c <_svfiprintf_r+0x150>
 800e23c:	9b04      	ldr	r3, [sp, #16]
 800e23e:	eba0 000a 	sub.w	r0, r0, sl
 800e242:	2240      	movs	r2, #64	@ 0x40
 800e244:	4082      	lsls	r2, r0
 800e246:	4313      	orrs	r3, r2
 800e248:	3401      	adds	r4, #1
 800e24a:	9304      	str	r3, [sp, #16]
 800e24c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e250:	4824      	ldr	r0, [pc, #144]	@ (800e2e4 <_svfiprintf_r+0x1e8>)
 800e252:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e256:	2206      	movs	r2, #6
 800e258:	f7f1 ffba 	bl	80001d0 <memchr>
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d036      	beq.n	800e2ce <_svfiprintf_r+0x1d2>
 800e260:	4b21      	ldr	r3, [pc, #132]	@ (800e2e8 <_svfiprintf_r+0x1ec>)
 800e262:	bb1b      	cbnz	r3, 800e2ac <_svfiprintf_r+0x1b0>
 800e264:	9b03      	ldr	r3, [sp, #12]
 800e266:	3307      	adds	r3, #7
 800e268:	f023 0307 	bic.w	r3, r3, #7
 800e26c:	3308      	adds	r3, #8
 800e26e:	9303      	str	r3, [sp, #12]
 800e270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e272:	4433      	add	r3, r6
 800e274:	9309      	str	r3, [sp, #36]	@ 0x24
 800e276:	e76a      	b.n	800e14e <_svfiprintf_r+0x52>
 800e278:	fb0c 3202 	mla	r2, ip, r2, r3
 800e27c:	460c      	mov	r4, r1
 800e27e:	2001      	movs	r0, #1
 800e280:	e7a8      	b.n	800e1d4 <_svfiprintf_r+0xd8>
 800e282:	2300      	movs	r3, #0
 800e284:	3401      	adds	r4, #1
 800e286:	9305      	str	r3, [sp, #20]
 800e288:	4619      	mov	r1, r3
 800e28a:	f04f 0c0a 	mov.w	ip, #10
 800e28e:	4620      	mov	r0, r4
 800e290:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e294:	3a30      	subs	r2, #48	@ 0x30
 800e296:	2a09      	cmp	r2, #9
 800e298:	d903      	bls.n	800e2a2 <_svfiprintf_r+0x1a6>
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d0c6      	beq.n	800e22c <_svfiprintf_r+0x130>
 800e29e:	9105      	str	r1, [sp, #20]
 800e2a0:	e7c4      	b.n	800e22c <_svfiprintf_r+0x130>
 800e2a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e7f0      	b.n	800e28e <_svfiprintf_r+0x192>
 800e2ac:	ab03      	add	r3, sp, #12
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	462a      	mov	r2, r5
 800e2b2:	4b0e      	ldr	r3, [pc, #56]	@ (800e2ec <_svfiprintf_r+0x1f0>)
 800e2b4:	a904      	add	r1, sp, #16
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	f7fc ff34 	bl	800b124 <_printf_float>
 800e2bc:	1c42      	adds	r2, r0, #1
 800e2be:	4606      	mov	r6, r0
 800e2c0:	d1d6      	bne.n	800e270 <_svfiprintf_r+0x174>
 800e2c2:	89ab      	ldrh	r3, [r5, #12]
 800e2c4:	065b      	lsls	r3, r3, #25
 800e2c6:	f53f af2d 	bmi.w	800e124 <_svfiprintf_r+0x28>
 800e2ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2cc:	e72c      	b.n	800e128 <_svfiprintf_r+0x2c>
 800e2ce:	ab03      	add	r3, sp, #12
 800e2d0:	9300      	str	r3, [sp, #0]
 800e2d2:	462a      	mov	r2, r5
 800e2d4:	4b05      	ldr	r3, [pc, #20]	@ (800e2ec <_svfiprintf_r+0x1f0>)
 800e2d6:	a904      	add	r1, sp, #16
 800e2d8:	4638      	mov	r0, r7
 800e2da:	f7fd f9bb 	bl	800b654 <_printf_i>
 800e2de:	e7ed      	b.n	800e2bc <_svfiprintf_r+0x1c0>
 800e2e0:	08010309 	.word	0x08010309
 800e2e4:	08010313 	.word	0x08010313
 800e2e8:	0800b125 	.word	0x0800b125
 800e2ec:	0800e047 	.word	0x0800e047
 800e2f0:	0801030f 	.word	0x0801030f

0800e2f4 <__sfputc_r>:
 800e2f4:	6893      	ldr	r3, [r2, #8]
 800e2f6:	3b01      	subs	r3, #1
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	b410      	push	{r4}
 800e2fc:	6093      	str	r3, [r2, #8]
 800e2fe:	da08      	bge.n	800e312 <__sfputc_r+0x1e>
 800e300:	6994      	ldr	r4, [r2, #24]
 800e302:	42a3      	cmp	r3, r4
 800e304:	db01      	blt.n	800e30a <__sfputc_r+0x16>
 800e306:	290a      	cmp	r1, #10
 800e308:	d103      	bne.n	800e312 <__sfputc_r+0x1e>
 800e30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e30e:	f000 ba13 	b.w	800e738 <__swbuf_r>
 800e312:	6813      	ldr	r3, [r2, #0]
 800e314:	1c58      	adds	r0, r3, #1
 800e316:	6010      	str	r0, [r2, #0]
 800e318:	7019      	strb	r1, [r3, #0]
 800e31a:	4608      	mov	r0, r1
 800e31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e320:	4770      	bx	lr

0800e322 <__sfputs_r>:
 800e322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e324:	4606      	mov	r6, r0
 800e326:	460f      	mov	r7, r1
 800e328:	4614      	mov	r4, r2
 800e32a:	18d5      	adds	r5, r2, r3
 800e32c:	42ac      	cmp	r4, r5
 800e32e:	d101      	bne.n	800e334 <__sfputs_r+0x12>
 800e330:	2000      	movs	r0, #0
 800e332:	e007      	b.n	800e344 <__sfputs_r+0x22>
 800e334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e338:	463a      	mov	r2, r7
 800e33a:	4630      	mov	r0, r6
 800e33c:	f7ff ffda 	bl	800e2f4 <__sfputc_r>
 800e340:	1c43      	adds	r3, r0, #1
 800e342:	d1f3      	bne.n	800e32c <__sfputs_r+0xa>
 800e344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e348 <_vfiprintf_r>:
 800e348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34c:	460d      	mov	r5, r1
 800e34e:	b09d      	sub	sp, #116	@ 0x74
 800e350:	4614      	mov	r4, r2
 800e352:	4698      	mov	r8, r3
 800e354:	4606      	mov	r6, r0
 800e356:	b118      	cbz	r0, 800e360 <_vfiprintf_r+0x18>
 800e358:	6a03      	ldr	r3, [r0, #32]
 800e35a:	b90b      	cbnz	r3, 800e360 <_vfiprintf_r+0x18>
 800e35c:	f7fd fd3a 	bl	800bdd4 <__sinit>
 800e360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e362:	07d9      	lsls	r1, r3, #31
 800e364:	d405      	bmi.n	800e372 <_vfiprintf_r+0x2a>
 800e366:	89ab      	ldrh	r3, [r5, #12]
 800e368:	059a      	lsls	r2, r3, #22
 800e36a:	d402      	bmi.n	800e372 <_vfiprintf_r+0x2a>
 800e36c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e36e:	f7fd fe74 	bl	800c05a <__retarget_lock_acquire_recursive>
 800e372:	89ab      	ldrh	r3, [r5, #12]
 800e374:	071b      	lsls	r3, r3, #28
 800e376:	d501      	bpl.n	800e37c <_vfiprintf_r+0x34>
 800e378:	692b      	ldr	r3, [r5, #16]
 800e37a:	b99b      	cbnz	r3, 800e3a4 <_vfiprintf_r+0x5c>
 800e37c:	4629      	mov	r1, r5
 800e37e:	4630      	mov	r0, r6
 800e380:	f000 fa18 	bl	800e7b4 <__swsetup_r>
 800e384:	b170      	cbz	r0, 800e3a4 <_vfiprintf_r+0x5c>
 800e386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e388:	07dc      	lsls	r4, r3, #31
 800e38a:	d504      	bpl.n	800e396 <_vfiprintf_r+0x4e>
 800e38c:	f04f 30ff 	mov.w	r0, #4294967295
 800e390:	b01d      	add	sp, #116	@ 0x74
 800e392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e396:	89ab      	ldrh	r3, [r5, #12]
 800e398:	0598      	lsls	r0, r3, #22
 800e39a:	d4f7      	bmi.n	800e38c <_vfiprintf_r+0x44>
 800e39c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e39e:	f7fd fe5d 	bl	800c05c <__retarget_lock_release_recursive>
 800e3a2:	e7f3      	b.n	800e38c <_vfiprintf_r+0x44>
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3a8:	2320      	movs	r3, #32
 800e3aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3b2:	2330      	movs	r3, #48	@ 0x30
 800e3b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e564 <_vfiprintf_r+0x21c>
 800e3b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3bc:	f04f 0901 	mov.w	r9, #1
 800e3c0:	4623      	mov	r3, r4
 800e3c2:	469a      	mov	sl, r3
 800e3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3c8:	b10a      	cbz	r2, 800e3ce <_vfiprintf_r+0x86>
 800e3ca:	2a25      	cmp	r2, #37	@ 0x25
 800e3cc:	d1f9      	bne.n	800e3c2 <_vfiprintf_r+0x7a>
 800e3ce:	ebba 0b04 	subs.w	fp, sl, r4
 800e3d2:	d00b      	beq.n	800e3ec <_vfiprintf_r+0xa4>
 800e3d4:	465b      	mov	r3, fp
 800e3d6:	4622      	mov	r2, r4
 800e3d8:	4629      	mov	r1, r5
 800e3da:	4630      	mov	r0, r6
 800e3dc:	f7ff ffa1 	bl	800e322 <__sfputs_r>
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	f000 80a7 	beq.w	800e534 <_vfiprintf_r+0x1ec>
 800e3e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3e8:	445a      	add	r2, fp
 800e3ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	f000 809f 	beq.w	800e534 <_vfiprintf_r+0x1ec>
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e400:	f10a 0a01 	add.w	sl, sl, #1
 800e404:	9304      	str	r3, [sp, #16]
 800e406:	9307      	str	r3, [sp, #28]
 800e408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e40c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e40e:	4654      	mov	r4, sl
 800e410:	2205      	movs	r2, #5
 800e412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e416:	4853      	ldr	r0, [pc, #332]	@ (800e564 <_vfiprintf_r+0x21c>)
 800e418:	f7f1 feda 	bl	80001d0 <memchr>
 800e41c:	9a04      	ldr	r2, [sp, #16]
 800e41e:	b9d8      	cbnz	r0, 800e458 <_vfiprintf_r+0x110>
 800e420:	06d1      	lsls	r1, r2, #27
 800e422:	bf44      	itt	mi
 800e424:	2320      	movmi	r3, #32
 800e426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e42a:	0713      	lsls	r3, r2, #28
 800e42c:	bf44      	itt	mi
 800e42e:	232b      	movmi	r3, #43	@ 0x2b
 800e430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e434:	f89a 3000 	ldrb.w	r3, [sl]
 800e438:	2b2a      	cmp	r3, #42	@ 0x2a
 800e43a:	d015      	beq.n	800e468 <_vfiprintf_r+0x120>
 800e43c:	9a07      	ldr	r2, [sp, #28]
 800e43e:	4654      	mov	r4, sl
 800e440:	2000      	movs	r0, #0
 800e442:	f04f 0c0a 	mov.w	ip, #10
 800e446:	4621      	mov	r1, r4
 800e448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e44c:	3b30      	subs	r3, #48	@ 0x30
 800e44e:	2b09      	cmp	r3, #9
 800e450:	d94b      	bls.n	800e4ea <_vfiprintf_r+0x1a2>
 800e452:	b1b0      	cbz	r0, 800e482 <_vfiprintf_r+0x13a>
 800e454:	9207      	str	r2, [sp, #28]
 800e456:	e014      	b.n	800e482 <_vfiprintf_r+0x13a>
 800e458:	eba0 0308 	sub.w	r3, r0, r8
 800e45c:	fa09 f303 	lsl.w	r3, r9, r3
 800e460:	4313      	orrs	r3, r2
 800e462:	9304      	str	r3, [sp, #16]
 800e464:	46a2      	mov	sl, r4
 800e466:	e7d2      	b.n	800e40e <_vfiprintf_r+0xc6>
 800e468:	9b03      	ldr	r3, [sp, #12]
 800e46a:	1d19      	adds	r1, r3, #4
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	9103      	str	r1, [sp, #12]
 800e470:	2b00      	cmp	r3, #0
 800e472:	bfbb      	ittet	lt
 800e474:	425b      	neglt	r3, r3
 800e476:	f042 0202 	orrlt.w	r2, r2, #2
 800e47a:	9307      	strge	r3, [sp, #28]
 800e47c:	9307      	strlt	r3, [sp, #28]
 800e47e:	bfb8      	it	lt
 800e480:	9204      	strlt	r2, [sp, #16]
 800e482:	7823      	ldrb	r3, [r4, #0]
 800e484:	2b2e      	cmp	r3, #46	@ 0x2e
 800e486:	d10a      	bne.n	800e49e <_vfiprintf_r+0x156>
 800e488:	7863      	ldrb	r3, [r4, #1]
 800e48a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e48c:	d132      	bne.n	800e4f4 <_vfiprintf_r+0x1ac>
 800e48e:	9b03      	ldr	r3, [sp, #12]
 800e490:	1d1a      	adds	r2, r3, #4
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	9203      	str	r2, [sp, #12]
 800e496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e49a:	3402      	adds	r4, #2
 800e49c:	9305      	str	r3, [sp, #20]
 800e49e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e574 <_vfiprintf_r+0x22c>
 800e4a2:	7821      	ldrb	r1, [r4, #0]
 800e4a4:	2203      	movs	r2, #3
 800e4a6:	4650      	mov	r0, sl
 800e4a8:	f7f1 fe92 	bl	80001d0 <memchr>
 800e4ac:	b138      	cbz	r0, 800e4be <_vfiprintf_r+0x176>
 800e4ae:	9b04      	ldr	r3, [sp, #16]
 800e4b0:	eba0 000a 	sub.w	r0, r0, sl
 800e4b4:	2240      	movs	r2, #64	@ 0x40
 800e4b6:	4082      	lsls	r2, r0
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	3401      	adds	r4, #1
 800e4bc:	9304      	str	r3, [sp, #16]
 800e4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c2:	4829      	ldr	r0, [pc, #164]	@ (800e568 <_vfiprintf_r+0x220>)
 800e4c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4c8:	2206      	movs	r2, #6
 800e4ca:	f7f1 fe81 	bl	80001d0 <memchr>
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d03f      	beq.n	800e552 <_vfiprintf_r+0x20a>
 800e4d2:	4b26      	ldr	r3, [pc, #152]	@ (800e56c <_vfiprintf_r+0x224>)
 800e4d4:	bb1b      	cbnz	r3, 800e51e <_vfiprintf_r+0x1d6>
 800e4d6:	9b03      	ldr	r3, [sp, #12]
 800e4d8:	3307      	adds	r3, #7
 800e4da:	f023 0307 	bic.w	r3, r3, #7
 800e4de:	3308      	adds	r3, #8
 800e4e0:	9303      	str	r3, [sp, #12]
 800e4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4e4:	443b      	add	r3, r7
 800e4e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4e8:	e76a      	b.n	800e3c0 <_vfiprintf_r+0x78>
 800e4ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	2001      	movs	r0, #1
 800e4f2:	e7a8      	b.n	800e446 <_vfiprintf_r+0xfe>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	3401      	adds	r4, #1
 800e4f8:	9305      	str	r3, [sp, #20]
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	f04f 0c0a 	mov.w	ip, #10
 800e500:	4620      	mov	r0, r4
 800e502:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e506:	3a30      	subs	r2, #48	@ 0x30
 800e508:	2a09      	cmp	r2, #9
 800e50a:	d903      	bls.n	800e514 <_vfiprintf_r+0x1cc>
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d0c6      	beq.n	800e49e <_vfiprintf_r+0x156>
 800e510:	9105      	str	r1, [sp, #20]
 800e512:	e7c4      	b.n	800e49e <_vfiprintf_r+0x156>
 800e514:	fb0c 2101 	mla	r1, ip, r1, r2
 800e518:	4604      	mov	r4, r0
 800e51a:	2301      	movs	r3, #1
 800e51c:	e7f0      	b.n	800e500 <_vfiprintf_r+0x1b8>
 800e51e:	ab03      	add	r3, sp, #12
 800e520:	9300      	str	r3, [sp, #0]
 800e522:	462a      	mov	r2, r5
 800e524:	4b12      	ldr	r3, [pc, #72]	@ (800e570 <_vfiprintf_r+0x228>)
 800e526:	a904      	add	r1, sp, #16
 800e528:	4630      	mov	r0, r6
 800e52a:	f7fc fdfb 	bl	800b124 <_printf_float>
 800e52e:	4607      	mov	r7, r0
 800e530:	1c78      	adds	r0, r7, #1
 800e532:	d1d6      	bne.n	800e4e2 <_vfiprintf_r+0x19a>
 800e534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e536:	07d9      	lsls	r1, r3, #31
 800e538:	d405      	bmi.n	800e546 <_vfiprintf_r+0x1fe>
 800e53a:	89ab      	ldrh	r3, [r5, #12]
 800e53c:	059a      	lsls	r2, r3, #22
 800e53e:	d402      	bmi.n	800e546 <_vfiprintf_r+0x1fe>
 800e540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e542:	f7fd fd8b 	bl	800c05c <__retarget_lock_release_recursive>
 800e546:	89ab      	ldrh	r3, [r5, #12]
 800e548:	065b      	lsls	r3, r3, #25
 800e54a:	f53f af1f 	bmi.w	800e38c <_vfiprintf_r+0x44>
 800e54e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e550:	e71e      	b.n	800e390 <_vfiprintf_r+0x48>
 800e552:	ab03      	add	r3, sp, #12
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	462a      	mov	r2, r5
 800e558:	4b05      	ldr	r3, [pc, #20]	@ (800e570 <_vfiprintf_r+0x228>)
 800e55a:	a904      	add	r1, sp, #16
 800e55c:	4630      	mov	r0, r6
 800e55e:	f7fd f879 	bl	800b654 <_printf_i>
 800e562:	e7e4      	b.n	800e52e <_vfiprintf_r+0x1e6>
 800e564:	08010309 	.word	0x08010309
 800e568:	08010313 	.word	0x08010313
 800e56c:	0800b125 	.word	0x0800b125
 800e570:	0800e323 	.word	0x0800e323
 800e574:	0801030f 	.word	0x0801030f

0800e578 <__sflush_r>:
 800e578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e580:	0716      	lsls	r6, r2, #28
 800e582:	4605      	mov	r5, r0
 800e584:	460c      	mov	r4, r1
 800e586:	d454      	bmi.n	800e632 <__sflush_r+0xba>
 800e588:	684b      	ldr	r3, [r1, #4]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	dc02      	bgt.n	800e594 <__sflush_r+0x1c>
 800e58e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e590:	2b00      	cmp	r3, #0
 800e592:	dd48      	ble.n	800e626 <__sflush_r+0xae>
 800e594:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e596:	2e00      	cmp	r6, #0
 800e598:	d045      	beq.n	800e626 <__sflush_r+0xae>
 800e59a:	2300      	movs	r3, #0
 800e59c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e5a0:	682f      	ldr	r7, [r5, #0]
 800e5a2:	6a21      	ldr	r1, [r4, #32]
 800e5a4:	602b      	str	r3, [r5, #0]
 800e5a6:	d030      	beq.n	800e60a <__sflush_r+0x92>
 800e5a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e5aa:	89a3      	ldrh	r3, [r4, #12]
 800e5ac:	0759      	lsls	r1, r3, #29
 800e5ae:	d505      	bpl.n	800e5bc <__sflush_r+0x44>
 800e5b0:	6863      	ldr	r3, [r4, #4]
 800e5b2:	1ad2      	subs	r2, r2, r3
 800e5b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e5b6:	b10b      	cbz	r3, 800e5bc <__sflush_r+0x44>
 800e5b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e5ba:	1ad2      	subs	r2, r2, r3
 800e5bc:	2300      	movs	r3, #0
 800e5be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e5c0:	6a21      	ldr	r1, [r4, #32]
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	47b0      	blx	r6
 800e5c6:	1c43      	adds	r3, r0, #1
 800e5c8:	89a3      	ldrh	r3, [r4, #12]
 800e5ca:	d106      	bne.n	800e5da <__sflush_r+0x62>
 800e5cc:	6829      	ldr	r1, [r5, #0]
 800e5ce:	291d      	cmp	r1, #29
 800e5d0:	d82b      	bhi.n	800e62a <__sflush_r+0xb2>
 800e5d2:	4a2a      	ldr	r2, [pc, #168]	@ (800e67c <__sflush_r+0x104>)
 800e5d4:	410a      	asrs	r2, r1
 800e5d6:	07d6      	lsls	r6, r2, #31
 800e5d8:	d427      	bmi.n	800e62a <__sflush_r+0xb2>
 800e5da:	2200      	movs	r2, #0
 800e5dc:	6062      	str	r2, [r4, #4]
 800e5de:	04d9      	lsls	r1, r3, #19
 800e5e0:	6922      	ldr	r2, [r4, #16]
 800e5e2:	6022      	str	r2, [r4, #0]
 800e5e4:	d504      	bpl.n	800e5f0 <__sflush_r+0x78>
 800e5e6:	1c42      	adds	r2, r0, #1
 800e5e8:	d101      	bne.n	800e5ee <__sflush_r+0x76>
 800e5ea:	682b      	ldr	r3, [r5, #0]
 800e5ec:	b903      	cbnz	r3, 800e5f0 <__sflush_r+0x78>
 800e5ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5f2:	602f      	str	r7, [r5, #0]
 800e5f4:	b1b9      	cbz	r1, 800e626 <__sflush_r+0xae>
 800e5f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5fa:	4299      	cmp	r1, r3
 800e5fc:	d002      	beq.n	800e604 <__sflush_r+0x8c>
 800e5fe:	4628      	mov	r0, r5
 800e600:	f7fe fb9a 	bl	800cd38 <_free_r>
 800e604:	2300      	movs	r3, #0
 800e606:	6363      	str	r3, [r4, #52]	@ 0x34
 800e608:	e00d      	b.n	800e626 <__sflush_r+0xae>
 800e60a:	2301      	movs	r3, #1
 800e60c:	4628      	mov	r0, r5
 800e60e:	47b0      	blx	r6
 800e610:	4602      	mov	r2, r0
 800e612:	1c50      	adds	r0, r2, #1
 800e614:	d1c9      	bne.n	800e5aa <__sflush_r+0x32>
 800e616:	682b      	ldr	r3, [r5, #0]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d0c6      	beq.n	800e5aa <__sflush_r+0x32>
 800e61c:	2b1d      	cmp	r3, #29
 800e61e:	d001      	beq.n	800e624 <__sflush_r+0xac>
 800e620:	2b16      	cmp	r3, #22
 800e622:	d11e      	bne.n	800e662 <__sflush_r+0xea>
 800e624:	602f      	str	r7, [r5, #0]
 800e626:	2000      	movs	r0, #0
 800e628:	e022      	b.n	800e670 <__sflush_r+0xf8>
 800e62a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e62e:	b21b      	sxth	r3, r3
 800e630:	e01b      	b.n	800e66a <__sflush_r+0xf2>
 800e632:	690f      	ldr	r7, [r1, #16]
 800e634:	2f00      	cmp	r7, #0
 800e636:	d0f6      	beq.n	800e626 <__sflush_r+0xae>
 800e638:	0793      	lsls	r3, r2, #30
 800e63a:	680e      	ldr	r6, [r1, #0]
 800e63c:	bf08      	it	eq
 800e63e:	694b      	ldreq	r3, [r1, #20]
 800e640:	600f      	str	r7, [r1, #0]
 800e642:	bf18      	it	ne
 800e644:	2300      	movne	r3, #0
 800e646:	eba6 0807 	sub.w	r8, r6, r7
 800e64a:	608b      	str	r3, [r1, #8]
 800e64c:	f1b8 0f00 	cmp.w	r8, #0
 800e650:	dde9      	ble.n	800e626 <__sflush_r+0xae>
 800e652:	6a21      	ldr	r1, [r4, #32]
 800e654:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e656:	4643      	mov	r3, r8
 800e658:	463a      	mov	r2, r7
 800e65a:	4628      	mov	r0, r5
 800e65c:	47b0      	blx	r6
 800e65e:	2800      	cmp	r0, #0
 800e660:	dc08      	bgt.n	800e674 <__sflush_r+0xfc>
 800e662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e66a:	81a3      	strh	r3, [r4, #12]
 800e66c:	f04f 30ff 	mov.w	r0, #4294967295
 800e670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e674:	4407      	add	r7, r0
 800e676:	eba8 0800 	sub.w	r8, r8, r0
 800e67a:	e7e7      	b.n	800e64c <__sflush_r+0xd4>
 800e67c:	dfbffffe 	.word	0xdfbffffe

0800e680 <_fflush_r>:
 800e680:	b538      	push	{r3, r4, r5, lr}
 800e682:	690b      	ldr	r3, [r1, #16]
 800e684:	4605      	mov	r5, r0
 800e686:	460c      	mov	r4, r1
 800e688:	b913      	cbnz	r3, 800e690 <_fflush_r+0x10>
 800e68a:	2500      	movs	r5, #0
 800e68c:	4628      	mov	r0, r5
 800e68e:	bd38      	pop	{r3, r4, r5, pc}
 800e690:	b118      	cbz	r0, 800e69a <_fflush_r+0x1a>
 800e692:	6a03      	ldr	r3, [r0, #32]
 800e694:	b90b      	cbnz	r3, 800e69a <_fflush_r+0x1a>
 800e696:	f7fd fb9d 	bl	800bdd4 <__sinit>
 800e69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d0f3      	beq.n	800e68a <_fflush_r+0xa>
 800e6a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e6a4:	07d0      	lsls	r0, r2, #31
 800e6a6:	d404      	bmi.n	800e6b2 <_fflush_r+0x32>
 800e6a8:	0599      	lsls	r1, r3, #22
 800e6aa:	d402      	bmi.n	800e6b2 <_fflush_r+0x32>
 800e6ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6ae:	f7fd fcd4 	bl	800c05a <__retarget_lock_acquire_recursive>
 800e6b2:	4628      	mov	r0, r5
 800e6b4:	4621      	mov	r1, r4
 800e6b6:	f7ff ff5f 	bl	800e578 <__sflush_r>
 800e6ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6bc:	07da      	lsls	r2, r3, #31
 800e6be:	4605      	mov	r5, r0
 800e6c0:	d4e4      	bmi.n	800e68c <_fflush_r+0xc>
 800e6c2:	89a3      	ldrh	r3, [r4, #12]
 800e6c4:	059b      	lsls	r3, r3, #22
 800e6c6:	d4e1      	bmi.n	800e68c <_fflush_r+0xc>
 800e6c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6ca:	f7fd fcc7 	bl	800c05c <__retarget_lock_release_recursive>
 800e6ce:	e7dd      	b.n	800e68c <_fflush_r+0xc>

0800e6d0 <_putc_r>:
 800e6d0:	b570      	push	{r4, r5, r6, lr}
 800e6d2:	460d      	mov	r5, r1
 800e6d4:	4614      	mov	r4, r2
 800e6d6:	4606      	mov	r6, r0
 800e6d8:	b118      	cbz	r0, 800e6e2 <_putc_r+0x12>
 800e6da:	6a03      	ldr	r3, [r0, #32]
 800e6dc:	b90b      	cbnz	r3, 800e6e2 <_putc_r+0x12>
 800e6de:	f7fd fb79 	bl	800bdd4 <__sinit>
 800e6e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6e4:	07d8      	lsls	r0, r3, #31
 800e6e6:	d405      	bmi.n	800e6f4 <_putc_r+0x24>
 800e6e8:	89a3      	ldrh	r3, [r4, #12]
 800e6ea:	0599      	lsls	r1, r3, #22
 800e6ec:	d402      	bmi.n	800e6f4 <_putc_r+0x24>
 800e6ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6f0:	f7fd fcb3 	bl	800c05a <__retarget_lock_acquire_recursive>
 800e6f4:	68a3      	ldr	r3, [r4, #8]
 800e6f6:	3b01      	subs	r3, #1
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	60a3      	str	r3, [r4, #8]
 800e6fc:	da05      	bge.n	800e70a <_putc_r+0x3a>
 800e6fe:	69a2      	ldr	r2, [r4, #24]
 800e700:	4293      	cmp	r3, r2
 800e702:	db12      	blt.n	800e72a <_putc_r+0x5a>
 800e704:	b2eb      	uxtb	r3, r5
 800e706:	2b0a      	cmp	r3, #10
 800e708:	d00f      	beq.n	800e72a <_putc_r+0x5a>
 800e70a:	6823      	ldr	r3, [r4, #0]
 800e70c:	1c5a      	adds	r2, r3, #1
 800e70e:	6022      	str	r2, [r4, #0]
 800e710:	701d      	strb	r5, [r3, #0]
 800e712:	b2ed      	uxtb	r5, r5
 800e714:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e716:	07da      	lsls	r2, r3, #31
 800e718:	d405      	bmi.n	800e726 <_putc_r+0x56>
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	059b      	lsls	r3, r3, #22
 800e71e:	d402      	bmi.n	800e726 <_putc_r+0x56>
 800e720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e722:	f7fd fc9b 	bl	800c05c <__retarget_lock_release_recursive>
 800e726:	4628      	mov	r0, r5
 800e728:	bd70      	pop	{r4, r5, r6, pc}
 800e72a:	4629      	mov	r1, r5
 800e72c:	4622      	mov	r2, r4
 800e72e:	4630      	mov	r0, r6
 800e730:	f000 f802 	bl	800e738 <__swbuf_r>
 800e734:	4605      	mov	r5, r0
 800e736:	e7ed      	b.n	800e714 <_putc_r+0x44>

0800e738 <__swbuf_r>:
 800e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73a:	460e      	mov	r6, r1
 800e73c:	4614      	mov	r4, r2
 800e73e:	4605      	mov	r5, r0
 800e740:	b118      	cbz	r0, 800e74a <__swbuf_r+0x12>
 800e742:	6a03      	ldr	r3, [r0, #32]
 800e744:	b90b      	cbnz	r3, 800e74a <__swbuf_r+0x12>
 800e746:	f7fd fb45 	bl	800bdd4 <__sinit>
 800e74a:	69a3      	ldr	r3, [r4, #24]
 800e74c:	60a3      	str	r3, [r4, #8]
 800e74e:	89a3      	ldrh	r3, [r4, #12]
 800e750:	071a      	lsls	r2, r3, #28
 800e752:	d501      	bpl.n	800e758 <__swbuf_r+0x20>
 800e754:	6923      	ldr	r3, [r4, #16]
 800e756:	b943      	cbnz	r3, 800e76a <__swbuf_r+0x32>
 800e758:	4621      	mov	r1, r4
 800e75a:	4628      	mov	r0, r5
 800e75c:	f000 f82a 	bl	800e7b4 <__swsetup_r>
 800e760:	b118      	cbz	r0, 800e76a <__swbuf_r+0x32>
 800e762:	f04f 37ff 	mov.w	r7, #4294967295
 800e766:	4638      	mov	r0, r7
 800e768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e76a:	6823      	ldr	r3, [r4, #0]
 800e76c:	6922      	ldr	r2, [r4, #16]
 800e76e:	1a98      	subs	r0, r3, r2
 800e770:	6963      	ldr	r3, [r4, #20]
 800e772:	b2f6      	uxtb	r6, r6
 800e774:	4283      	cmp	r3, r0
 800e776:	4637      	mov	r7, r6
 800e778:	dc05      	bgt.n	800e786 <__swbuf_r+0x4e>
 800e77a:	4621      	mov	r1, r4
 800e77c:	4628      	mov	r0, r5
 800e77e:	f7ff ff7f 	bl	800e680 <_fflush_r>
 800e782:	2800      	cmp	r0, #0
 800e784:	d1ed      	bne.n	800e762 <__swbuf_r+0x2a>
 800e786:	68a3      	ldr	r3, [r4, #8]
 800e788:	3b01      	subs	r3, #1
 800e78a:	60a3      	str	r3, [r4, #8]
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	1c5a      	adds	r2, r3, #1
 800e790:	6022      	str	r2, [r4, #0]
 800e792:	701e      	strb	r6, [r3, #0]
 800e794:	6962      	ldr	r2, [r4, #20]
 800e796:	1c43      	adds	r3, r0, #1
 800e798:	429a      	cmp	r2, r3
 800e79a:	d004      	beq.n	800e7a6 <__swbuf_r+0x6e>
 800e79c:	89a3      	ldrh	r3, [r4, #12]
 800e79e:	07db      	lsls	r3, r3, #31
 800e7a0:	d5e1      	bpl.n	800e766 <__swbuf_r+0x2e>
 800e7a2:	2e0a      	cmp	r6, #10
 800e7a4:	d1df      	bne.n	800e766 <__swbuf_r+0x2e>
 800e7a6:	4621      	mov	r1, r4
 800e7a8:	4628      	mov	r0, r5
 800e7aa:	f7ff ff69 	bl	800e680 <_fflush_r>
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d0d9      	beq.n	800e766 <__swbuf_r+0x2e>
 800e7b2:	e7d6      	b.n	800e762 <__swbuf_r+0x2a>

0800e7b4 <__swsetup_r>:
 800e7b4:	b538      	push	{r3, r4, r5, lr}
 800e7b6:	4b29      	ldr	r3, [pc, #164]	@ (800e85c <__swsetup_r+0xa8>)
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	6818      	ldr	r0, [r3, #0]
 800e7bc:	460c      	mov	r4, r1
 800e7be:	b118      	cbz	r0, 800e7c8 <__swsetup_r+0x14>
 800e7c0:	6a03      	ldr	r3, [r0, #32]
 800e7c2:	b90b      	cbnz	r3, 800e7c8 <__swsetup_r+0x14>
 800e7c4:	f7fd fb06 	bl	800bdd4 <__sinit>
 800e7c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7cc:	0719      	lsls	r1, r3, #28
 800e7ce:	d422      	bmi.n	800e816 <__swsetup_r+0x62>
 800e7d0:	06da      	lsls	r2, r3, #27
 800e7d2:	d407      	bmi.n	800e7e4 <__swsetup_r+0x30>
 800e7d4:	2209      	movs	r2, #9
 800e7d6:	602a      	str	r2, [r5, #0]
 800e7d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e7dc:	81a3      	strh	r3, [r4, #12]
 800e7de:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e2:	e033      	b.n	800e84c <__swsetup_r+0x98>
 800e7e4:	0758      	lsls	r0, r3, #29
 800e7e6:	d512      	bpl.n	800e80e <__swsetup_r+0x5a>
 800e7e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e7ea:	b141      	cbz	r1, 800e7fe <__swsetup_r+0x4a>
 800e7ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e7f0:	4299      	cmp	r1, r3
 800e7f2:	d002      	beq.n	800e7fa <__swsetup_r+0x46>
 800e7f4:	4628      	mov	r0, r5
 800e7f6:	f7fe fa9f 	bl	800cd38 <_free_r>
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800e7fe:	89a3      	ldrh	r3, [r4, #12]
 800e800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e804:	81a3      	strh	r3, [r4, #12]
 800e806:	2300      	movs	r3, #0
 800e808:	6063      	str	r3, [r4, #4]
 800e80a:	6923      	ldr	r3, [r4, #16]
 800e80c:	6023      	str	r3, [r4, #0]
 800e80e:	89a3      	ldrh	r3, [r4, #12]
 800e810:	f043 0308 	orr.w	r3, r3, #8
 800e814:	81a3      	strh	r3, [r4, #12]
 800e816:	6923      	ldr	r3, [r4, #16]
 800e818:	b94b      	cbnz	r3, 800e82e <__swsetup_r+0x7a>
 800e81a:	89a3      	ldrh	r3, [r4, #12]
 800e81c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e824:	d003      	beq.n	800e82e <__swsetup_r+0x7a>
 800e826:	4621      	mov	r1, r4
 800e828:	4628      	mov	r0, r5
 800e82a:	f000 f8db 	bl	800e9e4 <__smakebuf_r>
 800e82e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e832:	f013 0201 	ands.w	r2, r3, #1
 800e836:	d00a      	beq.n	800e84e <__swsetup_r+0x9a>
 800e838:	2200      	movs	r2, #0
 800e83a:	60a2      	str	r2, [r4, #8]
 800e83c:	6962      	ldr	r2, [r4, #20]
 800e83e:	4252      	negs	r2, r2
 800e840:	61a2      	str	r2, [r4, #24]
 800e842:	6922      	ldr	r2, [r4, #16]
 800e844:	b942      	cbnz	r2, 800e858 <__swsetup_r+0xa4>
 800e846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e84a:	d1c5      	bne.n	800e7d8 <__swsetup_r+0x24>
 800e84c:	bd38      	pop	{r3, r4, r5, pc}
 800e84e:	0799      	lsls	r1, r3, #30
 800e850:	bf58      	it	pl
 800e852:	6962      	ldrpl	r2, [r4, #20]
 800e854:	60a2      	str	r2, [r4, #8]
 800e856:	e7f4      	b.n	800e842 <__swsetup_r+0x8e>
 800e858:	2000      	movs	r0, #0
 800e85a:	e7f7      	b.n	800e84c <__swsetup_r+0x98>
 800e85c:	200001b0 	.word	0x200001b0

0800e860 <memmove>:
 800e860:	4288      	cmp	r0, r1
 800e862:	b510      	push	{r4, lr}
 800e864:	eb01 0402 	add.w	r4, r1, r2
 800e868:	d902      	bls.n	800e870 <memmove+0x10>
 800e86a:	4284      	cmp	r4, r0
 800e86c:	4623      	mov	r3, r4
 800e86e:	d807      	bhi.n	800e880 <memmove+0x20>
 800e870:	1e43      	subs	r3, r0, #1
 800e872:	42a1      	cmp	r1, r4
 800e874:	d008      	beq.n	800e888 <memmove+0x28>
 800e876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e87a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e87e:	e7f8      	b.n	800e872 <memmove+0x12>
 800e880:	4402      	add	r2, r0
 800e882:	4601      	mov	r1, r0
 800e884:	428a      	cmp	r2, r1
 800e886:	d100      	bne.n	800e88a <memmove+0x2a>
 800e888:	bd10      	pop	{r4, pc}
 800e88a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e88e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e892:	e7f7      	b.n	800e884 <memmove+0x24>

0800e894 <_sbrk_r>:
 800e894:	b538      	push	{r3, r4, r5, lr}
 800e896:	4d06      	ldr	r5, [pc, #24]	@ (800e8b0 <_sbrk_r+0x1c>)
 800e898:	2300      	movs	r3, #0
 800e89a:	4604      	mov	r4, r0
 800e89c:	4608      	mov	r0, r1
 800e89e:	602b      	str	r3, [r5, #0]
 800e8a0:	f7f4 fed0 	bl	8003644 <_sbrk>
 800e8a4:	1c43      	adds	r3, r0, #1
 800e8a6:	d102      	bne.n	800e8ae <_sbrk_r+0x1a>
 800e8a8:	682b      	ldr	r3, [r5, #0]
 800e8aa:	b103      	cbz	r3, 800e8ae <_sbrk_r+0x1a>
 800e8ac:	6023      	str	r3, [r4, #0]
 800e8ae:	bd38      	pop	{r3, r4, r5, pc}
 800e8b0:	20000814 	.word	0x20000814

0800e8b4 <__assert_func>:
 800e8b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8b6:	4614      	mov	r4, r2
 800e8b8:	461a      	mov	r2, r3
 800e8ba:	4b09      	ldr	r3, [pc, #36]	@ (800e8e0 <__assert_func+0x2c>)
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	4605      	mov	r5, r0
 800e8c0:	68d8      	ldr	r0, [r3, #12]
 800e8c2:	b954      	cbnz	r4, 800e8da <__assert_func+0x26>
 800e8c4:	4b07      	ldr	r3, [pc, #28]	@ (800e8e4 <__assert_func+0x30>)
 800e8c6:	461c      	mov	r4, r3
 800e8c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8cc:	9100      	str	r1, [sp, #0]
 800e8ce:	462b      	mov	r3, r5
 800e8d0:	4905      	ldr	r1, [pc, #20]	@ (800e8e8 <__assert_func+0x34>)
 800e8d2:	f000 f84f 	bl	800e974 <fiprintf>
 800e8d6:	f000 f8e3 	bl	800eaa0 <abort>
 800e8da:	4b04      	ldr	r3, [pc, #16]	@ (800e8ec <__assert_func+0x38>)
 800e8dc:	e7f4      	b.n	800e8c8 <__assert_func+0x14>
 800e8de:	bf00      	nop
 800e8e0:	200001b0 	.word	0x200001b0
 800e8e4:	08010355 	.word	0x08010355
 800e8e8:	08010327 	.word	0x08010327
 800e8ec:	0801031a 	.word	0x0801031a

0800e8f0 <_calloc_r>:
 800e8f0:	b570      	push	{r4, r5, r6, lr}
 800e8f2:	fba1 5402 	umull	r5, r4, r1, r2
 800e8f6:	b93c      	cbnz	r4, 800e908 <_calloc_r+0x18>
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	f7fe fdcb 	bl	800d494 <_malloc_r>
 800e8fe:	4606      	mov	r6, r0
 800e900:	b928      	cbnz	r0, 800e90e <_calloc_r+0x1e>
 800e902:	2600      	movs	r6, #0
 800e904:	4630      	mov	r0, r6
 800e906:	bd70      	pop	{r4, r5, r6, pc}
 800e908:	220c      	movs	r2, #12
 800e90a:	6002      	str	r2, [r0, #0]
 800e90c:	e7f9      	b.n	800e902 <_calloc_r+0x12>
 800e90e:	462a      	mov	r2, r5
 800e910:	4621      	mov	r1, r4
 800e912:	f7fd fb12 	bl	800bf3a <memset>
 800e916:	e7f5      	b.n	800e904 <_calloc_r+0x14>

0800e918 <_realloc_r>:
 800e918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e91c:	4680      	mov	r8, r0
 800e91e:	4615      	mov	r5, r2
 800e920:	460c      	mov	r4, r1
 800e922:	b921      	cbnz	r1, 800e92e <_realloc_r+0x16>
 800e924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e928:	4611      	mov	r1, r2
 800e92a:	f7fe bdb3 	b.w	800d494 <_malloc_r>
 800e92e:	b92a      	cbnz	r2, 800e93c <_realloc_r+0x24>
 800e930:	f7fe fa02 	bl	800cd38 <_free_r>
 800e934:	2400      	movs	r4, #0
 800e936:	4620      	mov	r0, r4
 800e938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e93c:	f000 f8b7 	bl	800eaae <_malloc_usable_size_r>
 800e940:	4285      	cmp	r5, r0
 800e942:	4606      	mov	r6, r0
 800e944:	d802      	bhi.n	800e94c <_realloc_r+0x34>
 800e946:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e94a:	d8f4      	bhi.n	800e936 <_realloc_r+0x1e>
 800e94c:	4629      	mov	r1, r5
 800e94e:	4640      	mov	r0, r8
 800e950:	f7fe fda0 	bl	800d494 <_malloc_r>
 800e954:	4607      	mov	r7, r0
 800e956:	2800      	cmp	r0, #0
 800e958:	d0ec      	beq.n	800e934 <_realloc_r+0x1c>
 800e95a:	42b5      	cmp	r5, r6
 800e95c:	462a      	mov	r2, r5
 800e95e:	4621      	mov	r1, r4
 800e960:	bf28      	it	cs
 800e962:	4632      	movcs	r2, r6
 800e964:	f7fd fb7b 	bl	800c05e <memcpy>
 800e968:	4621      	mov	r1, r4
 800e96a:	4640      	mov	r0, r8
 800e96c:	f7fe f9e4 	bl	800cd38 <_free_r>
 800e970:	463c      	mov	r4, r7
 800e972:	e7e0      	b.n	800e936 <_realloc_r+0x1e>

0800e974 <fiprintf>:
 800e974:	b40e      	push	{r1, r2, r3}
 800e976:	b503      	push	{r0, r1, lr}
 800e978:	4601      	mov	r1, r0
 800e97a:	ab03      	add	r3, sp, #12
 800e97c:	4805      	ldr	r0, [pc, #20]	@ (800e994 <fiprintf+0x20>)
 800e97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e982:	6800      	ldr	r0, [r0, #0]
 800e984:	9301      	str	r3, [sp, #4]
 800e986:	f7ff fcdf 	bl	800e348 <_vfiprintf_r>
 800e98a:	b002      	add	sp, #8
 800e98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e990:	b003      	add	sp, #12
 800e992:	4770      	bx	lr
 800e994:	200001b0 	.word	0x200001b0

0800e998 <__swhatbuf_r>:
 800e998:	b570      	push	{r4, r5, r6, lr}
 800e99a:	460c      	mov	r4, r1
 800e99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a0:	2900      	cmp	r1, #0
 800e9a2:	b096      	sub	sp, #88	@ 0x58
 800e9a4:	4615      	mov	r5, r2
 800e9a6:	461e      	mov	r6, r3
 800e9a8:	da0d      	bge.n	800e9c6 <__swhatbuf_r+0x2e>
 800e9aa:	89a3      	ldrh	r3, [r4, #12]
 800e9ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e9b0:	f04f 0100 	mov.w	r1, #0
 800e9b4:	bf14      	ite	ne
 800e9b6:	2340      	movne	r3, #64	@ 0x40
 800e9b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e9bc:	2000      	movs	r0, #0
 800e9be:	6031      	str	r1, [r6, #0]
 800e9c0:	602b      	str	r3, [r5, #0]
 800e9c2:	b016      	add	sp, #88	@ 0x58
 800e9c4:	bd70      	pop	{r4, r5, r6, pc}
 800e9c6:	466a      	mov	r2, sp
 800e9c8:	f000 f848 	bl	800ea5c <_fstat_r>
 800e9cc:	2800      	cmp	r0, #0
 800e9ce:	dbec      	blt.n	800e9aa <__swhatbuf_r+0x12>
 800e9d0:	9901      	ldr	r1, [sp, #4]
 800e9d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e9d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e9da:	4259      	negs	r1, r3
 800e9dc:	4159      	adcs	r1, r3
 800e9de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e9e2:	e7eb      	b.n	800e9bc <__swhatbuf_r+0x24>

0800e9e4 <__smakebuf_r>:
 800e9e4:	898b      	ldrh	r3, [r1, #12]
 800e9e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e9e8:	079d      	lsls	r5, r3, #30
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	460c      	mov	r4, r1
 800e9ee:	d507      	bpl.n	800ea00 <__smakebuf_r+0x1c>
 800e9f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e9f4:	6023      	str	r3, [r4, #0]
 800e9f6:	6123      	str	r3, [r4, #16]
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	6163      	str	r3, [r4, #20]
 800e9fc:	b003      	add	sp, #12
 800e9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea00:	ab01      	add	r3, sp, #4
 800ea02:	466a      	mov	r2, sp
 800ea04:	f7ff ffc8 	bl	800e998 <__swhatbuf_r>
 800ea08:	9f00      	ldr	r7, [sp, #0]
 800ea0a:	4605      	mov	r5, r0
 800ea0c:	4639      	mov	r1, r7
 800ea0e:	4630      	mov	r0, r6
 800ea10:	f7fe fd40 	bl	800d494 <_malloc_r>
 800ea14:	b948      	cbnz	r0, 800ea2a <__smakebuf_r+0x46>
 800ea16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea1a:	059a      	lsls	r2, r3, #22
 800ea1c:	d4ee      	bmi.n	800e9fc <__smakebuf_r+0x18>
 800ea1e:	f023 0303 	bic.w	r3, r3, #3
 800ea22:	f043 0302 	orr.w	r3, r3, #2
 800ea26:	81a3      	strh	r3, [r4, #12]
 800ea28:	e7e2      	b.n	800e9f0 <__smakebuf_r+0xc>
 800ea2a:	89a3      	ldrh	r3, [r4, #12]
 800ea2c:	6020      	str	r0, [r4, #0]
 800ea2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea32:	81a3      	strh	r3, [r4, #12]
 800ea34:	9b01      	ldr	r3, [sp, #4]
 800ea36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea3a:	b15b      	cbz	r3, 800ea54 <__smakebuf_r+0x70>
 800ea3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea40:	4630      	mov	r0, r6
 800ea42:	f000 f81d 	bl	800ea80 <_isatty_r>
 800ea46:	b128      	cbz	r0, 800ea54 <__smakebuf_r+0x70>
 800ea48:	89a3      	ldrh	r3, [r4, #12]
 800ea4a:	f023 0303 	bic.w	r3, r3, #3
 800ea4e:	f043 0301 	orr.w	r3, r3, #1
 800ea52:	81a3      	strh	r3, [r4, #12]
 800ea54:	89a3      	ldrh	r3, [r4, #12]
 800ea56:	431d      	orrs	r5, r3
 800ea58:	81a5      	strh	r5, [r4, #12]
 800ea5a:	e7cf      	b.n	800e9fc <__smakebuf_r+0x18>

0800ea5c <_fstat_r>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	4d07      	ldr	r5, [pc, #28]	@ (800ea7c <_fstat_r+0x20>)
 800ea60:	2300      	movs	r3, #0
 800ea62:	4604      	mov	r4, r0
 800ea64:	4608      	mov	r0, r1
 800ea66:	4611      	mov	r1, r2
 800ea68:	602b      	str	r3, [r5, #0]
 800ea6a:	f7f4 fdc3 	bl	80035f4 <_fstat>
 800ea6e:	1c43      	adds	r3, r0, #1
 800ea70:	d102      	bne.n	800ea78 <_fstat_r+0x1c>
 800ea72:	682b      	ldr	r3, [r5, #0]
 800ea74:	b103      	cbz	r3, 800ea78 <_fstat_r+0x1c>
 800ea76:	6023      	str	r3, [r4, #0]
 800ea78:	bd38      	pop	{r3, r4, r5, pc}
 800ea7a:	bf00      	nop
 800ea7c:	20000814 	.word	0x20000814

0800ea80 <_isatty_r>:
 800ea80:	b538      	push	{r3, r4, r5, lr}
 800ea82:	4d06      	ldr	r5, [pc, #24]	@ (800ea9c <_isatty_r+0x1c>)
 800ea84:	2300      	movs	r3, #0
 800ea86:	4604      	mov	r4, r0
 800ea88:	4608      	mov	r0, r1
 800ea8a:	602b      	str	r3, [r5, #0]
 800ea8c:	f7f4 fdc2 	bl	8003614 <_isatty>
 800ea90:	1c43      	adds	r3, r0, #1
 800ea92:	d102      	bne.n	800ea9a <_isatty_r+0x1a>
 800ea94:	682b      	ldr	r3, [r5, #0]
 800ea96:	b103      	cbz	r3, 800ea9a <_isatty_r+0x1a>
 800ea98:	6023      	str	r3, [r4, #0]
 800ea9a:	bd38      	pop	{r3, r4, r5, pc}
 800ea9c:	20000814 	.word	0x20000814

0800eaa0 <abort>:
 800eaa0:	b508      	push	{r3, lr}
 800eaa2:	2006      	movs	r0, #6
 800eaa4:	f000 f834 	bl	800eb10 <raise>
 800eaa8:	2001      	movs	r0, #1
 800eaaa:	f7f4 fd53 	bl	8003554 <_exit>

0800eaae <_malloc_usable_size_r>:
 800eaae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eab2:	1f18      	subs	r0, r3, #4
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	bfbc      	itt	lt
 800eab8:	580b      	ldrlt	r3, [r1, r0]
 800eaba:	18c0      	addlt	r0, r0, r3
 800eabc:	4770      	bx	lr

0800eabe <_raise_r>:
 800eabe:	291f      	cmp	r1, #31
 800eac0:	b538      	push	{r3, r4, r5, lr}
 800eac2:	4605      	mov	r5, r0
 800eac4:	460c      	mov	r4, r1
 800eac6:	d904      	bls.n	800ead2 <_raise_r+0x14>
 800eac8:	2316      	movs	r3, #22
 800eaca:	6003      	str	r3, [r0, #0]
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295
 800ead0:	bd38      	pop	{r3, r4, r5, pc}
 800ead2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ead4:	b112      	cbz	r2, 800eadc <_raise_r+0x1e>
 800ead6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eada:	b94b      	cbnz	r3, 800eaf0 <_raise_r+0x32>
 800eadc:	4628      	mov	r0, r5
 800eade:	f000 f831 	bl	800eb44 <_getpid_r>
 800eae2:	4622      	mov	r2, r4
 800eae4:	4601      	mov	r1, r0
 800eae6:	4628      	mov	r0, r5
 800eae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaec:	f000 b818 	b.w	800eb20 <_kill_r>
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	d00a      	beq.n	800eb0a <_raise_r+0x4c>
 800eaf4:	1c59      	adds	r1, r3, #1
 800eaf6:	d103      	bne.n	800eb00 <_raise_r+0x42>
 800eaf8:	2316      	movs	r3, #22
 800eafa:	6003      	str	r3, [r0, #0]
 800eafc:	2001      	movs	r0, #1
 800eafe:	e7e7      	b.n	800ead0 <_raise_r+0x12>
 800eb00:	2100      	movs	r1, #0
 800eb02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb06:	4620      	mov	r0, r4
 800eb08:	4798      	blx	r3
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	e7e0      	b.n	800ead0 <_raise_r+0x12>
	...

0800eb10 <raise>:
 800eb10:	4b02      	ldr	r3, [pc, #8]	@ (800eb1c <raise+0xc>)
 800eb12:	4601      	mov	r1, r0
 800eb14:	6818      	ldr	r0, [r3, #0]
 800eb16:	f7ff bfd2 	b.w	800eabe <_raise_r>
 800eb1a:	bf00      	nop
 800eb1c:	200001b0 	.word	0x200001b0

0800eb20 <_kill_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d07      	ldr	r5, [pc, #28]	@ (800eb40 <_kill_r+0x20>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	602b      	str	r3, [r5, #0]
 800eb2e:	f7f4 fd01 	bl	8003534 <_kill>
 800eb32:	1c43      	adds	r3, r0, #1
 800eb34:	d102      	bne.n	800eb3c <_kill_r+0x1c>
 800eb36:	682b      	ldr	r3, [r5, #0]
 800eb38:	b103      	cbz	r3, 800eb3c <_kill_r+0x1c>
 800eb3a:	6023      	str	r3, [r4, #0]
 800eb3c:	bd38      	pop	{r3, r4, r5, pc}
 800eb3e:	bf00      	nop
 800eb40:	20000814 	.word	0x20000814

0800eb44 <_getpid_r>:
 800eb44:	f7f4 bcee 	b.w	8003524 <_getpid>

0800eb48 <sqrt>:
 800eb48:	b538      	push	{r3, r4, r5, lr}
 800eb4a:	ed2d 8b02 	vpush	{d8}
 800eb4e:	ec55 4b10 	vmov	r4, r5, d0
 800eb52:	f000 f879 	bl	800ec48 <__ieee754_sqrt>
 800eb56:	4622      	mov	r2, r4
 800eb58:	462b      	mov	r3, r5
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	4629      	mov	r1, r5
 800eb5e:	eeb0 8a40 	vmov.f32	s16, s0
 800eb62:	eef0 8a60 	vmov.f32	s17, s1
 800eb66:	f7f1 ffe1 	bl	8000b2c <__aeabi_dcmpun>
 800eb6a:	b990      	cbnz	r0, 800eb92 <sqrt+0x4a>
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	2300      	movs	r3, #0
 800eb70:	4620      	mov	r0, r4
 800eb72:	4629      	mov	r1, r5
 800eb74:	f7f1 ffb2 	bl	8000adc <__aeabi_dcmplt>
 800eb78:	b158      	cbz	r0, 800eb92 <sqrt+0x4a>
 800eb7a:	f7fd fa43 	bl	800c004 <__errno>
 800eb7e:	2321      	movs	r3, #33	@ 0x21
 800eb80:	6003      	str	r3, [r0, #0]
 800eb82:	2200      	movs	r2, #0
 800eb84:	2300      	movs	r3, #0
 800eb86:	4610      	mov	r0, r2
 800eb88:	4619      	mov	r1, r3
 800eb8a:	f7f1 fe5f 	bl	800084c <__aeabi_ddiv>
 800eb8e:	ec41 0b18 	vmov	d8, r0, r1
 800eb92:	eeb0 0a48 	vmov.f32	s0, s16
 800eb96:	eef0 0a68 	vmov.f32	s1, s17
 800eb9a:	ecbd 8b02 	vpop	{d8}
 800eb9e:	bd38      	pop	{r3, r4, r5, pc}

0800eba0 <cos>:
 800eba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eba2:	ec53 2b10 	vmov	r2, r3, d0
 800eba6:	4826      	ldr	r0, [pc, #152]	@ (800ec40 <cos+0xa0>)
 800eba8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ebac:	4281      	cmp	r1, r0
 800ebae:	d806      	bhi.n	800ebbe <cos+0x1e>
 800ebb0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800ec38 <cos+0x98>
 800ebb4:	b005      	add	sp, #20
 800ebb6:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebba:	f000 b921 	b.w	800ee00 <__kernel_cos>
 800ebbe:	4821      	ldr	r0, [pc, #132]	@ (800ec44 <cos+0xa4>)
 800ebc0:	4281      	cmp	r1, r0
 800ebc2:	d908      	bls.n	800ebd6 <cos+0x36>
 800ebc4:	4610      	mov	r0, r2
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	f7f1 fb5e 	bl	8000288 <__aeabi_dsub>
 800ebcc:	ec41 0b10 	vmov	d0, r0, r1
 800ebd0:	b005      	add	sp, #20
 800ebd2:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebd6:	4668      	mov	r0, sp
 800ebd8:	f000 fa96 	bl	800f108 <__ieee754_rem_pio2>
 800ebdc:	f000 0003 	and.w	r0, r0, #3
 800ebe0:	2801      	cmp	r0, #1
 800ebe2:	d00b      	beq.n	800ebfc <cos+0x5c>
 800ebe4:	2802      	cmp	r0, #2
 800ebe6:	d015      	beq.n	800ec14 <cos+0x74>
 800ebe8:	b9d8      	cbnz	r0, 800ec22 <cos+0x82>
 800ebea:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebee:	ed9d 0b00 	vldr	d0, [sp]
 800ebf2:	f000 f905 	bl	800ee00 <__kernel_cos>
 800ebf6:	ec51 0b10 	vmov	r0, r1, d0
 800ebfa:	e7e7      	b.n	800ebcc <cos+0x2c>
 800ebfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec00:	ed9d 0b00 	vldr	d0, [sp]
 800ec04:	f000 f9c4 	bl	800ef90 <__kernel_sin>
 800ec08:	ec53 2b10 	vmov	r2, r3, d0
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ec12:	e7db      	b.n	800ebcc <cos+0x2c>
 800ec14:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec18:	ed9d 0b00 	vldr	d0, [sp]
 800ec1c:	f000 f8f0 	bl	800ee00 <__kernel_cos>
 800ec20:	e7f2      	b.n	800ec08 <cos+0x68>
 800ec22:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ec26:	ed9d 0b00 	vldr	d0, [sp]
 800ec2a:	2001      	movs	r0, #1
 800ec2c:	f000 f9b0 	bl	800ef90 <__kernel_sin>
 800ec30:	e7e1      	b.n	800ebf6 <cos+0x56>
 800ec32:	bf00      	nop
 800ec34:	f3af 8000 	nop.w
	...
 800ec40:	3fe921fb 	.word	0x3fe921fb
 800ec44:	7fefffff 	.word	0x7fefffff

0800ec48 <__ieee754_sqrt>:
 800ec48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec4c:	4a68      	ldr	r2, [pc, #416]	@ (800edf0 <__ieee754_sqrt+0x1a8>)
 800ec4e:	ec55 4b10 	vmov	r4, r5, d0
 800ec52:	43aa      	bics	r2, r5
 800ec54:	462b      	mov	r3, r5
 800ec56:	4621      	mov	r1, r4
 800ec58:	d110      	bne.n	800ec7c <__ieee754_sqrt+0x34>
 800ec5a:	4622      	mov	r2, r4
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	4629      	mov	r1, r5
 800ec60:	f7f1 fcca 	bl	80005f8 <__aeabi_dmul>
 800ec64:	4602      	mov	r2, r0
 800ec66:	460b      	mov	r3, r1
 800ec68:	4620      	mov	r0, r4
 800ec6a:	4629      	mov	r1, r5
 800ec6c:	f7f1 fb0e 	bl	800028c <__adddf3>
 800ec70:	4604      	mov	r4, r0
 800ec72:	460d      	mov	r5, r1
 800ec74:	ec45 4b10 	vmov	d0, r4, r5
 800ec78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec7c:	2d00      	cmp	r5, #0
 800ec7e:	dc0e      	bgt.n	800ec9e <__ieee754_sqrt+0x56>
 800ec80:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ec84:	4322      	orrs	r2, r4
 800ec86:	d0f5      	beq.n	800ec74 <__ieee754_sqrt+0x2c>
 800ec88:	b19d      	cbz	r5, 800ecb2 <__ieee754_sqrt+0x6a>
 800ec8a:	4622      	mov	r2, r4
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	4629      	mov	r1, r5
 800ec90:	f7f1 fafa 	bl	8000288 <__aeabi_dsub>
 800ec94:	4602      	mov	r2, r0
 800ec96:	460b      	mov	r3, r1
 800ec98:	f7f1 fdd8 	bl	800084c <__aeabi_ddiv>
 800ec9c:	e7e8      	b.n	800ec70 <__ieee754_sqrt+0x28>
 800ec9e:	152a      	asrs	r2, r5, #20
 800eca0:	d115      	bne.n	800ecce <__ieee754_sqrt+0x86>
 800eca2:	2000      	movs	r0, #0
 800eca4:	e009      	b.n	800ecba <__ieee754_sqrt+0x72>
 800eca6:	0acb      	lsrs	r3, r1, #11
 800eca8:	3a15      	subs	r2, #21
 800ecaa:	0549      	lsls	r1, r1, #21
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d0fa      	beq.n	800eca6 <__ieee754_sqrt+0x5e>
 800ecb0:	e7f7      	b.n	800eca2 <__ieee754_sqrt+0x5a>
 800ecb2:	462a      	mov	r2, r5
 800ecb4:	e7fa      	b.n	800ecac <__ieee754_sqrt+0x64>
 800ecb6:	005b      	lsls	r3, r3, #1
 800ecb8:	3001      	adds	r0, #1
 800ecba:	02dc      	lsls	r4, r3, #11
 800ecbc:	d5fb      	bpl.n	800ecb6 <__ieee754_sqrt+0x6e>
 800ecbe:	1e44      	subs	r4, r0, #1
 800ecc0:	1b12      	subs	r2, r2, r4
 800ecc2:	f1c0 0420 	rsb	r4, r0, #32
 800ecc6:	fa21 f404 	lsr.w	r4, r1, r4
 800ecca:	4323      	orrs	r3, r4
 800eccc:	4081      	lsls	r1, r0
 800ecce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ecd2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ecd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ecda:	07d2      	lsls	r2, r2, #31
 800ecdc:	bf5c      	itt	pl
 800ecde:	005b      	lslpl	r3, r3, #1
 800ece0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ece4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ece8:	bf58      	it	pl
 800ecea:	0049      	lslpl	r1, r1, #1
 800ecec:	2600      	movs	r6, #0
 800ecee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ecf2:	106d      	asrs	r5, r5, #1
 800ecf4:	0049      	lsls	r1, r1, #1
 800ecf6:	2016      	movs	r0, #22
 800ecf8:	4632      	mov	r2, r6
 800ecfa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ecfe:	1917      	adds	r7, r2, r4
 800ed00:	429f      	cmp	r7, r3
 800ed02:	bfde      	ittt	le
 800ed04:	193a      	addle	r2, r7, r4
 800ed06:	1bdb      	suble	r3, r3, r7
 800ed08:	1936      	addle	r6, r6, r4
 800ed0a:	0fcf      	lsrs	r7, r1, #31
 800ed0c:	3801      	subs	r0, #1
 800ed0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ed12:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ed16:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ed1a:	d1f0      	bne.n	800ecfe <__ieee754_sqrt+0xb6>
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	2720      	movs	r7, #32
 800ed20:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ed24:	429a      	cmp	r2, r3
 800ed26:	eb00 0e0c 	add.w	lr, r0, ip
 800ed2a:	db02      	blt.n	800ed32 <__ieee754_sqrt+0xea>
 800ed2c:	d113      	bne.n	800ed56 <__ieee754_sqrt+0x10e>
 800ed2e:	458e      	cmp	lr, r1
 800ed30:	d811      	bhi.n	800ed56 <__ieee754_sqrt+0x10e>
 800ed32:	f1be 0f00 	cmp.w	lr, #0
 800ed36:	eb0e 000c 	add.w	r0, lr, ip
 800ed3a:	da42      	bge.n	800edc2 <__ieee754_sqrt+0x17a>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	db40      	blt.n	800edc2 <__ieee754_sqrt+0x17a>
 800ed40:	f102 0801 	add.w	r8, r2, #1
 800ed44:	1a9b      	subs	r3, r3, r2
 800ed46:	458e      	cmp	lr, r1
 800ed48:	bf88      	it	hi
 800ed4a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ed4e:	eba1 010e 	sub.w	r1, r1, lr
 800ed52:	4464      	add	r4, ip
 800ed54:	4642      	mov	r2, r8
 800ed56:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ed5a:	3f01      	subs	r7, #1
 800ed5c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ed60:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ed64:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ed68:	d1dc      	bne.n	800ed24 <__ieee754_sqrt+0xdc>
 800ed6a:	4319      	orrs	r1, r3
 800ed6c:	d01b      	beq.n	800eda6 <__ieee754_sqrt+0x15e>
 800ed6e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800edf4 <__ieee754_sqrt+0x1ac>
 800ed72:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800edf8 <__ieee754_sqrt+0x1b0>
 800ed76:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed7a:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed7e:	f7f1 fa83 	bl	8000288 <__aeabi_dsub>
 800ed82:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	4640      	mov	r0, r8
 800ed8c:	4649      	mov	r1, r9
 800ed8e:	f7f1 feaf 	bl	8000af0 <__aeabi_dcmple>
 800ed92:	b140      	cbz	r0, 800eda6 <__ieee754_sqrt+0x15e>
 800ed94:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ed98:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed9c:	e9db 2300 	ldrd	r2, r3, [fp]
 800eda0:	d111      	bne.n	800edc6 <__ieee754_sqrt+0x17e>
 800eda2:	3601      	adds	r6, #1
 800eda4:	463c      	mov	r4, r7
 800eda6:	1072      	asrs	r2, r6, #1
 800eda8:	0863      	lsrs	r3, r4, #1
 800edaa:	07f1      	lsls	r1, r6, #31
 800edac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800edb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800edb4:	bf48      	it	mi
 800edb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800edba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800edbe:	4618      	mov	r0, r3
 800edc0:	e756      	b.n	800ec70 <__ieee754_sqrt+0x28>
 800edc2:	4690      	mov	r8, r2
 800edc4:	e7be      	b.n	800ed44 <__ieee754_sqrt+0xfc>
 800edc6:	f7f1 fa61 	bl	800028c <__adddf3>
 800edca:	e9da 8900 	ldrd	r8, r9, [sl]
 800edce:	4602      	mov	r2, r0
 800edd0:	460b      	mov	r3, r1
 800edd2:	4640      	mov	r0, r8
 800edd4:	4649      	mov	r1, r9
 800edd6:	f7f1 fe81 	bl	8000adc <__aeabi_dcmplt>
 800edda:	b120      	cbz	r0, 800ede6 <__ieee754_sqrt+0x19e>
 800eddc:	1ca0      	adds	r0, r4, #2
 800edde:	bf08      	it	eq
 800ede0:	3601      	addeq	r6, #1
 800ede2:	3402      	adds	r4, #2
 800ede4:	e7df      	b.n	800eda6 <__ieee754_sqrt+0x15e>
 800ede6:	1c63      	adds	r3, r4, #1
 800ede8:	f023 0401 	bic.w	r4, r3, #1
 800edec:	e7db      	b.n	800eda6 <__ieee754_sqrt+0x15e>
 800edee:	bf00      	nop
 800edf0:	7ff00000 	.word	0x7ff00000
 800edf4:	20000208 	.word	0x20000208
 800edf8:	20000200 	.word	0x20000200
 800edfc:	00000000 	.word	0x00000000

0800ee00 <__kernel_cos>:
 800ee00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee04:	ec57 6b10 	vmov	r6, r7, d0
 800ee08:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ee0c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800ee10:	ed8d 1b00 	vstr	d1, [sp]
 800ee14:	d206      	bcs.n	800ee24 <__kernel_cos+0x24>
 800ee16:	4630      	mov	r0, r6
 800ee18:	4639      	mov	r1, r7
 800ee1a:	f7f1 fe9d 	bl	8000b58 <__aeabi_d2iz>
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	f000 8088 	beq.w	800ef34 <__kernel_cos+0x134>
 800ee24:	4632      	mov	r2, r6
 800ee26:	463b      	mov	r3, r7
 800ee28:	4630      	mov	r0, r6
 800ee2a:	4639      	mov	r1, r7
 800ee2c:	f7f1 fbe4 	bl	80005f8 <__aeabi_dmul>
 800ee30:	4b51      	ldr	r3, [pc, #324]	@ (800ef78 <__kernel_cos+0x178>)
 800ee32:	2200      	movs	r2, #0
 800ee34:	4604      	mov	r4, r0
 800ee36:	460d      	mov	r5, r1
 800ee38:	f7f1 fbde 	bl	80005f8 <__aeabi_dmul>
 800ee3c:	a340      	add	r3, pc, #256	@ (adr r3, 800ef40 <__kernel_cos+0x140>)
 800ee3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee42:	4682      	mov	sl, r0
 800ee44:	468b      	mov	fp, r1
 800ee46:	4620      	mov	r0, r4
 800ee48:	4629      	mov	r1, r5
 800ee4a:	f7f1 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ee4e:	a33e      	add	r3, pc, #248	@ (adr r3, 800ef48 <__kernel_cos+0x148>)
 800ee50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee54:	f7f1 fa1a 	bl	800028c <__adddf3>
 800ee58:	4622      	mov	r2, r4
 800ee5a:	462b      	mov	r3, r5
 800ee5c:	f7f1 fbcc 	bl	80005f8 <__aeabi_dmul>
 800ee60:	a33b      	add	r3, pc, #236	@ (adr r3, 800ef50 <__kernel_cos+0x150>)
 800ee62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee66:	f7f1 fa0f 	bl	8000288 <__aeabi_dsub>
 800ee6a:	4622      	mov	r2, r4
 800ee6c:	462b      	mov	r3, r5
 800ee6e:	f7f1 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ee72:	a339      	add	r3, pc, #228	@ (adr r3, 800ef58 <__kernel_cos+0x158>)
 800ee74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee78:	f7f1 fa08 	bl	800028c <__adddf3>
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	462b      	mov	r3, r5
 800ee80:	f7f1 fbba 	bl	80005f8 <__aeabi_dmul>
 800ee84:	a336      	add	r3, pc, #216	@ (adr r3, 800ef60 <__kernel_cos+0x160>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	f7f1 f9fd 	bl	8000288 <__aeabi_dsub>
 800ee8e:	4622      	mov	r2, r4
 800ee90:	462b      	mov	r3, r5
 800ee92:	f7f1 fbb1 	bl	80005f8 <__aeabi_dmul>
 800ee96:	a334      	add	r3, pc, #208	@ (adr r3, 800ef68 <__kernel_cos+0x168>)
 800ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9c:	f7f1 f9f6 	bl	800028c <__adddf3>
 800eea0:	4622      	mov	r2, r4
 800eea2:	462b      	mov	r3, r5
 800eea4:	f7f1 fba8 	bl	80005f8 <__aeabi_dmul>
 800eea8:	4622      	mov	r2, r4
 800eeaa:	462b      	mov	r3, r5
 800eeac:	f7f1 fba4 	bl	80005f8 <__aeabi_dmul>
 800eeb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	460d      	mov	r5, r1
 800eeb8:	4630      	mov	r0, r6
 800eeba:	4639      	mov	r1, r7
 800eebc:	f7f1 fb9c 	bl	80005f8 <__aeabi_dmul>
 800eec0:	460b      	mov	r3, r1
 800eec2:	4602      	mov	r2, r0
 800eec4:	4629      	mov	r1, r5
 800eec6:	4620      	mov	r0, r4
 800eec8:	f7f1 f9de 	bl	8000288 <__aeabi_dsub>
 800eecc:	4b2b      	ldr	r3, [pc, #172]	@ (800ef7c <__kernel_cos+0x17c>)
 800eece:	4598      	cmp	r8, r3
 800eed0:	4606      	mov	r6, r0
 800eed2:	460f      	mov	r7, r1
 800eed4:	d810      	bhi.n	800eef8 <__kernel_cos+0xf8>
 800eed6:	4602      	mov	r2, r0
 800eed8:	460b      	mov	r3, r1
 800eeda:	4650      	mov	r0, sl
 800eedc:	4659      	mov	r1, fp
 800eede:	f7f1 f9d3 	bl	8000288 <__aeabi_dsub>
 800eee2:	460b      	mov	r3, r1
 800eee4:	4926      	ldr	r1, [pc, #152]	@ (800ef80 <__kernel_cos+0x180>)
 800eee6:	4602      	mov	r2, r0
 800eee8:	2000      	movs	r0, #0
 800eeea:	f7f1 f9cd 	bl	8000288 <__aeabi_dsub>
 800eeee:	ec41 0b10 	vmov	d0, r0, r1
 800eef2:	b003      	add	sp, #12
 800eef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eef8:	4b22      	ldr	r3, [pc, #136]	@ (800ef84 <__kernel_cos+0x184>)
 800eefa:	4921      	ldr	r1, [pc, #132]	@ (800ef80 <__kernel_cos+0x180>)
 800eefc:	4598      	cmp	r8, r3
 800eefe:	bf8c      	ite	hi
 800ef00:	4d21      	ldrhi	r5, [pc, #132]	@ (800ef88 <__kernel_cos+0x188>)
 800ef02:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800ef06:	2400      	movs	r4, #0
 800ef08:	4622      	mov	r2, r4
 800ef0a:	462b      	mov	r3, r5
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	f7f1 f9bb 	bl	8000288 <__aeabi_dsub>
 800ef12:	4622      	mov	r2, r4
 800ef14:	4680      	mov	r8, r0
 800ef16:	4689      	mov	r9, r1
 800ef18:	462b      	mov	r3, r5
 800ef1a:	4650      	mov	r0, sl
 800ef1c:	4659      	mov	r1, fp
 800ef1e:	f7f1 f9b3 	bl	8000288 <__aeabi_dsub>
 800ef22:	4632      	mov	r2, r6
 800ef24:	463b      	mov	r3, r7
 800ef26:	f7f1 f9af 	bl	8000288 <__aeabi_dsub>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	4640      	mov	r0, r8
 800ef30:	4649      	mov	r1, r9
 800ef32:	e7da      	b.n	800eeea <__kernel_cos+0xea>
 800ef34:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800ef70 <__kernel_cos+0x170>
 800ef38:	e7db      	b.n	800eef2 <__kernel_cos+0xf2>
 800ef3a:	bf00      	nop
 800ef3c:	f3af 8000 	nop.w
 800ef40:	be8838d4 	.word	0xbe8838d4
 800ef44:	bda8fae9 	.word	0xbda8fae9
 800ef48:	bdb4b1c4 	.word	0xbdb4b1c4
 800ef4c:	3e21ee9e 	.word	0x3e21ee9e
 800ef50:	809c52ad 	.word	0x809c52ad
 800ef54:	3e927e4f 	.word	0x3e927e4f
 800ef58:	19cb1590 	.word	0x19cb1590
 800ef5c:	3efa01a0 	.word	0x3efa01a0
 800ef60:	16c15177 	.word	0x16c15177
 800ef64:	3f56c16c 	.word	0x3f56c16c
 800ef68:	5555554c 	.word	0x5555554c
 800ef6c:	3fa55555 	.word	0x3fa55555
 800ef70:	00000000 	.word	0x00000000
 800ef74:	3ff00000 	.word	0x3ff00000
 800ef78:	3fe00000 	.word	0x3fe00000
 800ef7c:	3fd33332 	.word	0x3fd33332
 800ef80:	3ff00000 	.word	0x3ff00000
 800ef84:	3fe90000 	.word	0x3fe90000
 800ef88:	3fd20000 	.word	0x3fd20000
 800ef8c:	00000000 	.word	0x00000000

0800ef90 <__kernel_sin>:
 800ef90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef94:	ec55 4b10 	vmov	r4, r5, d0
 800ef98:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ef9c:	b085      	sub	sp, #20
 800ef9e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800efa2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800efa6:	4680      	mov	r8, r0
 800efa8:	d205      	bcs.n	800efb6 <__kernel_sin+0x26>
 800efaa:	4620      	mov	r0, r4
 800efac:	4629      	mov	r1, r5
 800efae:	f7f1 fdd3 	bl	8000b58 <__aeabi_d2iz>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d052      	beq.n	800f05c <__kernel_sin+0xcc>
 800efb6:	4622      	mov	r2, r4
 800efb8:	462b      	mov	r3, r5
 800efba:	4620      	mov	r0, r4
 800efbc:	4629      	mov	r1, r5
 800efbe:	f7f1 fb1b 	bl	80005f8 <__aeabi_dmul>
 800efc2:	4682      	mov	sl, r0
 800efc4:	468b      	mov	fp, r1
 800efc6:	4602      	mov	r2, r0
 800efc8:	460b      	mov	r3, r1
 800efca:	4620      	mov	r0, r4
 800efcc:	4629      	mov	r1, r5
 800efce:	f7f1 fb13 	bl	80005f8 <__aeabi_dmul>
 800efd2:	a342      	add	r3, pc, #264	@ (adr r3, 800f0dc <__kernel_sin+0x14c>)
 800efd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd8:	e9cd 0100 	strd	r0, r1, [sp]
 800efdc:	4650      	mov	r0, sl
 800efde:	4659      	mov	r1, fp
 800efe0:	f7f1 fb0a 	bl	80005f8 <__aeabi_dmul>
 800efe4:	a33f      	add	r3, pc, #252	@ (adr r3, 800f0e4 <__kernel_sin+0x154>)
 800efe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efea:	f7f1 f94d 	bl	8000288 <__aeabi_dsub>
 800efee:	4652      	mov	r2, sl
 800eff0:	465b      	mov	r3, fp
 800eff2:	f7f1 fb01 	bl	80005f8 <__aeabi_dmul>
 800eff6:	a33d      	add	r3, pc, #244	@ (adr r3, 800f0ec <__kernel_sin+0x15c>)
 800eff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effc:	f7f1 f946 	bl	800028c <__adddf3>
 800f000:	4652      	mov	r2, sl
 800f002:	465b      	mov	r3, fp
 800f004:	f7f1 faf8 	bl	80005f8 <__aeabi_dmul>
 800f008:	a33a      	add	r3, pc, #232	@ (adr r3, 800f0f4 <__kernel_sin+0x164>)
 800f00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f00e:	f7f1 f93b 	bl	8000288 <__aeabi_dsub>
 800f012:	4652      	mov	r2, sl
 800f014:	465b      	mov	r3, fp
 800f016:	f7f1 faef 	bl	80005f8 <__aeabi_dmul>
 800f01a:	a338      	add	r3, pc, #224	@ (adr r3, 800f0fc <__kernel_sin+0x16c>)
 800f01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f020:	f7f1 f934 	bl	800028c <__adddf3>
 800f024:	4606      	mov	r6, r0
 800f026:	460f      	mov	r7, r1
 800f028:	f1b8 0f00 	cmp.w	r8, #0
 800f02c:	d11b      	bne.n	800f066 <__kernel_sin+0xd6>
 800f02e:	4602      	mov	r2, r0
 800f030:	460b      	mov	r3, r1
 800f032:	4650      	mov	r0, sl
 800f034:	4659      	mov	r1, fp
 800f036:	f7f1 fadf 	bl	80005f8 <__aeabi_dmul>
 800f03a:	a325      	add	r3, pc, #148	@ (adr r3, 800f0d0 <__kernel_sin+0x140>)
 800f03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f040:	f7f1 f922 	bl	8000288 <__aeabi_dsub>
 800f044:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f048:	f7f1 fad6 	bl	80005f8 <__aeabi_dmul>
 800f04c:	4602      	mov	r2, r0
 800f04e:	460b      	mov	r3, r1
 800f050:	4620      	mov	r0, r4
 800f052:	4629      	mov	r1, r5
 800f054:	f7f1 f91a 	bl	800028c <__adddf3>
 800f058:	4604      	mov	r4, r0
 800f05a:	460d      	mov	r5, r1
 800f05c:	ec45 4b10 	vmov	d0, r4, r5
 800f060:	b005      	add	sp, #20
 800f062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f06a:	4b1b      	ldr	r3, [pc, #108]	@ (800f0d8 <__kernel_sin+0x148>)
 800f06c:	2200      	movs	r2, #0
 800f06e:	f7f1 fac3 	bl	80005f8 <__aeabi_dmul>
 800f072:	4632      	mov	r2, r6
 800f074:	4680      	mov	r8, r0
 800f076:	4689      	mov	r9, r1
 800f078:	463b      	mov	r3, r7
 800f07a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f07e:	f7f1 fabb 	bl	80005f8 <__aeabi_dmul>
 800f082:	4602      	mov	r2, r0
 800f084:	460b      	mov	r3, r1
 800f086:	4640      	mov	r0, r8
 800f088:	4649      	mov	r1, r9
 800f08a:	f7f1 f8fd 	bl	8000288 <__aeabi_dsub>
 800f08e:	4652      	mov	r2, sl
 800f090:	465b      	mov	r3, fp
 800f092:	f7f1 fab1 	bl	80005f8 <__aeabi_dmul>
 800f096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f09a:	f7f1 f8f5 	bl	8000288 <__aeabi_dsub>
 800f09e:	a30c      	add	r3, pc, #48	@ (adr r3, 800f0d0 <__kernel_sin+0x140>)
 800f0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a4:	4606      	mov	r6, r0
 800f0a6:	460f      	mov	r7, r1
 800f0a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f0ac:	f7f1 faa4 	bl	80005f8 <__aeabi_dmul>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	4639      	mov	r1, r7
 800f0b8:	f7f1 f8e8 	bl	800028c <__adddf3>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	f7f1 f8e0 	bl	8000288 <__aeabi_dsub>
 800f0c8:	e7c6      	b.n	800f058 <__kernel_sin+0xc8>
 800f0ca:	bf00      	nop
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	55555549 	.word	0x55555549
 800f0d4:	3fc55555 	.word	0x3fc55555
 800f0d8:	3fe00000 	.word	0x3fe00000
 800f0dc:	5acfd57c 	.word	0x5acfd57c
 800f0e0:	3de5d93a 	.word	0x3de5d93a
 800f0e4:	8a2b9ceb 	.word	0x8a2b9ceb
 800f0e8:	3e5ae5e6 	.word	0x3e5ae5e6
 800f0ec:	57b1fe7d 	.word	0x57b1fe7d
 800f0f0:	3ec71de3 	.word	0x3ec71de3
 800f0f4:	19c161d5 	.word	0x19c161d5
 800f0f8:	3f2a01a0 	.word	0x3f2a01a0
 800f0fc:	1110f8a6 	.word	0x1110f8a6
 800f100:	3f811111 	.word	0x3f811111
 800f104:	00000000 	.word	0x00000000

0800f108 <__ieee754_rem_pio2>:
 800f108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f10c:	ec57 6b10 	vmov	r6, r7, d0
 800f110:	4bc5      	ldr	r3, [pc, #788]	@ (800f428 <__ieee754_rem_pio2+0x320>)
 800f112:	b08d      	sub	sp, #52	@ 0x34
 800f114:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800f118:	4598      	cmp	r8, r3
 800f11a:	4604      	mov	r4, r0
 800f11c:	9704      	str	r7, [sp, #16]
 800f11e:	d807      	bhi.n	800f130 <__ieee754_rem_pio2+0x28>
 800f120:	2200      	movs	r2, #0
 800f122:	2300      	movs	r3, #0
 800f124:	ed80 0b00 	vstr	d0, [r0]
 800f128:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f12c:	2500      	movs	r5, #0
 800f12e:	e028      	b.n	800f182 <__ieee754_rem_pio2+0x7a>
 800f130:	4bbe      	ldr	r3, [pc, #760]	@ (800f42c <__ieee754_rem_pio2+0x324>)
 800f132:	4598      	cmp	r8, r3
 800f134:	d878      	bhi.n	800f228 <__ieee754_rem_pio2+0x120>
 800f136:	9b04      	ldr	r3, [sp, #16]
 800f138:	4dbd      	ldr	r5, [pc, #756]	@ (800f430 <__ieee754_rem_pio2+0x328>)
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	4630      	mov	r0, r6
 800f13e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f3f0 <__ieee754_rem_pio2+0x2e8>)
 800f140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f144:	4639      	mov	r1, r7
 800f146:	dd38      	ble.n	800f1ba <__ieee754_rem_pio2+0xb2>
 800f148:	f7f1 f89e 	bl	8000288 <__aeabi_dsub>
 800f14c:	45a8      	cmp	r8, r5
 800f14e:	4606      	mov	r6, r0
 800f150:	460f      	mov	r7, r1
 800f152:	d01a      	beq.n	800f18a <__ieee754_rem_pio2+0x82>
 800f154:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f3f8 <__ieee754_rem_pio2+0x2f0>)
 800f156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15a:	f7f1 f895 	bl	8000288 <__aeabi_dsub>
 800f15e:	4602      	mov	r2, r0
 800f160:	460b      	mov	r3, r1
 800f162:	4680      	mov	r8, r0
 800f164:	4689      	mov	r9, r1
 800f166:	4630      	mov	r0, r6
 800f168:	4639      	mov	r1, r7
 800f16a:	f7f1 f88d 	bl	8000288 <__aeabi_dsub>
 800f16e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f3f8 <__ieee754_rem_pio2+0x2f0>)
 800f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f174:	f7f1 f888 	bl	8000288 <__aeabi_dsub>
 800f178:	e9c4 8900 	strd	r8, r9, [r4]
 800f17c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f180:	2501      	movs	r5, #1
 800f182:	4628      	mov	r0, r5
 800f184:	b00d      	add	sp, #52	@ 0x34
 800f186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18a:	a39d      	add	r3, pc, #628	@ (adr r3, 800f400 <__ieee754_rem_pio2+0x2f8>)
 800f18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f190:	f7f1 f87a 	bl	8000288 <__aeabi_dsub>
 800f194:	a39c      	add	r3, pc, #624	@ (adr r3, 800f408 <__ieee754_rem_pio2+0x300>)
 800f196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19a:	4606      	mov	r6, r0
 800f19c:	460f      	mov	r7, r1
 800f19e:	f7f1 f873 	bl	8000288 <__aeabi_dsub>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	4680      	mov	r8, r0
 800f1a8:	4689      	mov	r9, r1
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	4639      	mov	r1, r7
 800f1ae:	f7f1 f86b 	bl	8000288 <__aeabi_dsub>
 800f1b2:	a395      	add	r3, pc, #596	@ (adr r3, 800f408 <__ieee754_rem_pio2+0x300>)
 800f1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b8:	e7dc      	b.n	800f174 <__ieee754_rem_pio2+0x6c>
 800f1ba:	f7f1 f867 	bl	800028c <__adddf3>
 800f1be:	45a8      	cmp	r8, r5
 800f1c0:	4606      	mov	r6, r0
 800f1c2:	460f      	mov	r7, r1
 800f1c4:	d018      	beq.n	800f1f8 <__ieee754_rem_pio2+0xf0>
 800f1c6:	a38c      	add	r3, pc, #560	@ (adr r3, 800f3f8 <__ieee754_rem_pio2+0x2f0>)
 800f1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1cc:	f7f1 f85e 	bl	800028c <__adddf3>
 800f1d0:	4602      	mov	r2, r0
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	4680      	mov	r8, r0
 800f1d6:	4689      	mov	r9, r1
 800f1d8:	4630      	mov	r0, r6
 800f1da:	4639      	mov	r1, r7
 800f1dc:	f7f1 f854 	bl	8000288 <__aeabi_dsub>
 800f1e0:	a385      	add	r3, pc, #532	@ (adr r3, 800f3f8 <__ieee754_rem_pio2+0x2f0>)
 800f1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e6:	f7f1 f851 	bl	800028c <__adddf3>
 800f1ea:	f04f 35ff 	mov.w	r5, #4294967295
 800f1ee:	e9c4 8900 	strd	r8, r9, [r4]
 800f1f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f1f6:	e7c4      	b.n	800f182 <__ieee754_rem_pio2+0x7a>
 800f1f8:	a381      	add	r3, pc, #516	@ (adr r3, 800f400 <__ieee754_rem_pio2+0x2f8>)
 800f1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fe:	f7f1 f845 	bl	800028c <__adddf3>
 800f202:	a381      	add	r3, pc, #516	@ (adr r3, 800f408 <__ieee754_rem_pio2+0x300>)
 800f204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f208:	4606      	mov	r6, r0
 800f20a:	460f      	mov	r7, r1
 800f20c:	f7f1 f83e 	bl	800028c <__adddf3>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	4680      	mov	r8, r0
 800f216:	4689      	mov	r9, r1
 800f218:	4630      	mov	r0, r6
 800f21a:	4639      	mov	r1, r7
 800f21c:	f7f1 f834 	bl	8000288 <__aeabi_dsub>
 800f220:	a379      	add	r3, pc, #484	@ (adr r3, 800f408 <__ieee754_rem_pio2+0x300>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	e7de      	b.n	800f1e6 <__ieee754_rem_pio2+0xde>
 800f228:	4b82      	ldr	r3, [pc, #520]	@ (800f434 <__ieee754_rem_pio2+0x32c>)
 800f22a:	4598      	cmp	r8, r3
 800f22c:	f200 80d1 	bhi.w	800f3d2 <__ieee754_rem_pio2+0x2ca>
 800f230:	f000 f966 	bl	800f500 <fabs>
 800f234:	ec57 6b10 	vmov	r6, r7, d0
 800f238:	a375      	add	r3, pc, #468	@ (adr r3, 800f410 <__ieee754_rem_pio2+0x308>)
 800f23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23e:	4630      	mov	r0, r6
 800f240:	4639      	mov	r1, r7
 800f242:	f7f1 f9d9 	bl	80005f8 <__aeabi_dmul>
 800f246:	4b7c      	ldr	r3, [pc, #496]	@ (800f438 <__ieee754_rem_pio2+0x330>)
 800f248:	2200      	movs	r2, #0
 800f24a:	f7f1 f81f 	bl	800028c <__adddf3>
 800f24e:	f7f1 fc83 	bl	8000b58 <__aeabi_d2iz>
 800f252:	4605      	mov	r5, r0
 800f254:	f7f1 f966 	bl	8000524 <__aeabi_i2d>
 800f258:	4602      	mov	r2, r0
 800f25a:	460b      	mov	r3, r1
 800f25c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f260:	a363      	add	r3, pc, #396	@ (adr r3, 800f3f0 <__ieee754_rem_pio2+0x2e8>)
 800f262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f266:	f7f1 f9c7 	bl	80005f8 <__aeabi_dmul>
 800f26a:	4602      	mov	r2, r0
 800f26c:	460b      	mov	r3, r1
 800f26e:	4630      	mov	r0, r6
 800f270:	4639      	mov	r1, r7
 800f272:	f7f1 f809 	bl	8000288 <__aeabi_dsub>
 800f276:	a360      	add	r3, pc, #384	@ (adr r3, 800f3f8 <__ieee754_rem_pio2+0x2f0>)
 800f278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27c:	4682      	mov	sl, r0
 800f27e:	468b      	mov	fp, r1
 800f280:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f284:	f7f1 f9b8 	bl	80005f8 <__aeabi_dmul>
 800f288:	2d1f      	cmp	r5, #31
 800f28a:	4606      	mov	r6, r0
 800f28c:	460f      	mov	r7, r1
 800f28e:	dc0c      	bgt.n	800f2aa <__ieee754_rem_pio2+0x1a2>
 800f290:	4b6a      	ldr	r3, [pc, #424]	@ (800f43c <__ieee754_rem_pio2+0x334>)
 800f292:	1e6a      	subs	r2, r5, #1
 800f294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f298:	4543      	cmp	r3, r8
 800f29a:	d006      	beq.n	800f2aa <__ieee754_rem_pio2+0x1a2>
 800f29c:	4632      	mov	r2, r6
 800f29e:	463b      	mov	r3, r7
 800f2a0:	4650      	mov	r0, sl
 800f2a2:	4659      	mov	r1, fp
 800f2a4:	f7f0 fff0 	bl	8000288 <__aeabi_dsub>
 800f2a8:	e00e      	b.n	800f2c8 <__ieee754_rem_pio2+0x1c0>
 800f2aa:	463b      	mov	r3, r7
 800f2ac:	4632      	mov	r2, r6
 800f2ae:	4650      	mov	r0, sl
 800f2b0:	4659      	mov	r1, fp
 800f2b2:	f7f0 ffe9 	bl	8000288 <__aeabi_dsub>
 800f2b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f2ba:	9305      	str	r3, [sp, #20]
 800f2bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f2c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f2c4:	2b10      	cmp	r3, #16
 800f2c6:	dc02      	bgt.n	800f2ce <__ieee754_rem_pio2+0x1c6>
 800f2c8:	e9c4 0100 	strd	r0, r1, [r4]
 800f2cc:	e039      	b.n	800f342 <__ieee754_rem_pio2+0x23a>
 800f2ce:	a34c      	add	r3, pc, #304	@ (adr r3, 800f400 <__ieee754_rem_pio2+0x2f8>)
 800f2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2d8:	f7f1 f98e 	bl	80005f8 <__aeabi_dmul>
 800f2dc:	4606      	mov	r6, r0
 800f2de:	460f      	mov	r7, r1
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	4650      	mov	r0, sl
 800f2e6:	4659      	mov	r1, fp
 800f2e8:	f7f0 ffce 	bl	8000288 <__aeabi_dsub>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	4680      	mov	r8, r0
 800f2f2:	4689      	mov	r9, r1
 800f2f4:	4650      	mov	r0, sl
 800f2f6:	4659      	mov	r1, fp
 800f2f8:	f7f0 ffc6 	bl	8000288 <__aeabi_dsub>
 800f2fc:	4632      	mov	r2, r6
 800f2fe:	463b      	mov	r3, r7
 800f300:	f7f0 ffc2 	bl	8000288 <__aeabi_dsub>
 800f304:	a340      	add	r3, pc, #256	@ (adr r3, 800f408 <__ieee754_rem_pio2+0x300>)
 800f306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30a:	4606      	mov	r6, r0
 800f30c:	460f      	mov	r7, r1
 800f30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f312:	f7f1 f971 	bl	80005f8 <__aeabi_dmul>
 800f316:	4632      	mov	r2, r6
 800f318:	463b      	mov	r3, r7
 800f31a:	f7f0 ffb5 	bl	8000288 <__aeabi_dsub>
 800f31e:	4602      	mov	r2, r0
 800f320:	460b      	mov	r3, r1
 800f322:	4606      	mov	r6, r0
 800f324:	460f      	mov	r7, r1
 800f326:	4640      	mov	r0, r8
 800f328:	4649      	mov	r1, r9
 800f32a:	f7f0 ffad 	bl	8000288 <__aeabi_dsub>
 800f32e:	9a05      	ldr	r2, [sp, #20]
 800f330:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f334:	1ad3      	subs	r3, r2, r3
 800f336:	2b31      	cmp	r3, #49	@ 0x31
 800f338:	dc20      	bgt.n	800f37c <__ieee754_rem_pio2+0x274>
 800f33a:	e9c4 0100 	strd	r0, r1, [r4]
 800f33e:	46c2      	mov	sl, r8
 800f340:	46cb      	mov	fp, r9
 800f342:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f346:	4650      	mov	r0, sl
 800f348:	4642      	mov	r2, r8
 800f34a:	464b      	mov	r3, r9
 800f34c:	4659      	mov	r1, fp
 800f34e:	f7f0 ff9b 	bl	8000288 <__aeabi_dsub>
 800f352:	463b      	mov	r3, r7
 800f354:	4632      	mov	r2, r6
 800f356:	f7f0 ff97 	bl	8000288 <__aeabi_dsub>
 800f35a:	9b04      	ldr	r3, [sp, #16]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f362:	f6bf af0e 	bge.w	800f182 <__ieee754_rem_pio2+0x7a>
 800f366:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f36a:	6063      	str	r3, [r4, #4]
 800f36c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f370:	f8c4 8000 	str.w	r8, [r4]
 800f374:	60a0      	str	r0, [r4, #8]
 800f376:	60e3      	str	r3, [r4, #12]
 800f378:	426d      	negs	r5, r5
 800f37a:	e702      	b.n	800f182 <__ieee754_rem_pio2+0x7a>
 800f37c:	a326      	add	r3, pc, #152	@ (adr r3, 800f418 <__ieee754_rem_pio2+0x310>)
 800f37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f386:	f7f1 f937 	bl	80005f8 <__aeabi_dmul>
 800f38a:	4606      	mov	r6, r0
 800f38c:	460f      	mov	r7, r1
 800f38e:	4602      	mov	r2, r0
 800f390:	460b      	mov	r3, r1
 800f392:	4640      	mov	r0, r8
 800f394:	4649      	mov	r1, r9
 800f396:	f7f0 ff77 	bl	8000288 <__aeabi_dsub>
 800f39a:	4602      	mov	r2, r0
 800f39c:	460b      	mov	r3, r1
 800f39e:	4682      	mov	sl, r0
 800f3a0:	468b      	mov	fp, r1
 800f3a2:	4640      	mov	r0, r8
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	f7f0 ff6f 	bl	8000288 <__aeabi_dsub>
 800f3aa:	4632      	mov	r2, r6
 800f3ac:	463b      	mov	r3, r7
 800f3ae:	f7f0 ff6b 	bl	8000288 <__aeabi_dsub>
 800f3b2:	a31b      	add	r3, pc, #108	@ (adr r3, 800f420 <__ieee754_rem_pio2+0x318>)
 800f3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b8:	4606      	mov	r6, r0
 800f3ba:	460f      	mov	r7, r1
 800f3bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3c0:	f7f1 f91a 	bl	80005f8 <__aeabi_dmul>
 800f3c4:	4632      	mov	r2, r6
 800f3c6:	463b      	mov	r3, r7
 800f3c8:	f7f0 ff5e 	bl	8000288 <__aeabi_dsub>
 800f3cc:	4606      	mov	r6, r0
 800f3ce:	460f      	mov	r7, r1
 800f3d0:	e764      	b.n	800f29c <__ieee754_rem_pio2+0x194>
 800f3d2:	4b1b      	ldr	r3, [pc, #108]	@ (800f440 <__ieee754_rem_pio2+0x338>)
 800f3d4:	4598      	cmp	r8, r3
 800f3d6:	d935      	bls.n	800f444 <__ieee754_rem_pio2+0x33c>
 800f3d8:	4632      	mov	r2, r6
 800f3da:	463b      	mov	r3, r7
 800f3dc:	4630      	mov	r0, r6
 800f3de:	4639      	mov	r1, r7
 800f3e0:	f7f0 ff52 	bl	8000288 <__aeabi_dsub>
 800f3e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f3e8:	e9c4 0100 	strd	r0, r1, [r4]
 800f3ec:	e69e      	b.n	800f12c <__ieee754_rem_pio2+0x24>
 800f3ee:	bf00      	nop
 800f3f0:	54400000 	.word	0x54400000
 800f3f4:	3ff921fb 	.word	0x3ff921fb
 800f3f8:	1a626331 	.word	0x1a626331
 800f3fc:	3dd0b461 	.word	0x3dd0b461
 800f400:	1a600000 	.word	0x1a600000
 800f404:	3dd0b461 	.word	0x3dd0b461
 800f408:	2e037073 	.word	0x2e037073
 800f40c:	3ba3198a 	.word	0x3ba3198a
 800f410:	6dc9c883 	.word	0x6dc9c883
 800f414:	3fe45f30 	.word	0x3fe45f30
 800f418:	2e000000 	.word	0x2e000000
 800f41c:	3ba3198a 	.word	0x3ba3198a
 800f420:	252049c1 	.word	0x252049c1
 800f424:	397b839a 	.word	0x397b839a
 800f428:	3fe921fb 	.word	0x3fe921fb
 800f42c:	4002d97b 	.word	0x4002d97b
 800f430:	3ff921fb 	.word	0x3ff921fb
 800f434:	413921fb 	.word	0x413921fb
 800f438:	3fe00000 	.word	0x3fe00000
 800f43c:	08010358 	.word	0x08010358
 800f440:	7fefffff 	.word	0x7fefffff
 800f444:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f448:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f44c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f450:	4630      	mov	r0, r6
 800f452:	460f      	mov	r7, r1
 800f454:	f7f1 fb80 	bl	8000b58 <__aeabi_d2iz>
 800f458:	f7f1 f864 	bl	8000524 <__aeabi_i2d>
 800f45c:	4602      	mov	r2, r0
 800f45e:	460b      	mov	r3, r1
 800f460:	4630      	mov	r0, r6
 800f462:	4639      	mov	r1, r7
 800f464:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f468:	f7f0 ff0e 	bl	8000288 <__aeabi_dsub>
 800f46c:	4b22      	ldr	r3, [pc, #136]	@ (800f4f8 <__ieee754_rem_pio2+0x3f0>)
 800f46e:	2200      	movs	r2, #0
 800f470:	f7f1 f8c2 	bl	80005f8 <__aeabi_dmul>
 800f474:	460f      	mov	r7, r1
 800f476:	4606      	mov	r6, r0
 800f478:	f7f1 fb6e 	bl	8000b58 <__aeabi_d2iz>
 800f47c:	f7f1 f852 	bl	8000524 <__aeabi_i2d>
 800f480:	4602      	mov	r2, r0
 800f482:	460b      	mov	r3, r1
 800f484:	4630      	mov	r0, r6
 800f486:	4639      	mov	r1, r7
 800f488:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f48c:	f7f0 fefc 	bl	8000288 <__aeabi_dsub>
 800f490:	4b19      	ldr	r3, [pc, #100]	@ (800f4f8 <__ieee754_rem_pio2+0x3f0>)
 800f492:	2200      	movs	r2, #0
 800f494:	f7f1 f8b0 	bl	80005f8 <__aeabi_dmul>
 800f498:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f49c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f4a0:	f04f 0803 	mov.w	r8, #3
 800f4a4:	2600      	movs	r6, #0
 800f4a6:	2700      	movs	r7, #0
 800f4a8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f4ac:	4632      	mov	r2, r6
 800f4ae:	463b      	mov	r3, r7
 800f4b0:	46c2      	mov	sl, r8
 800f4b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4b6:	f7f1 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	d1f4      	bne.n	800f4a8 <__ieee754_rem_pio2+0x3a0>
 800f4be:	4b0f      	ldr	r3, [pc, #60]	@ (800f4fc <__ieee754_rem_pio2+0x3f4>)
 800f4c0:	9301      	str	r3, [sp, #4]
 800f4c2:	2302      	movs	r3, #2
 800f4c4:	9300      	str	r3, [sp, #0]
 800f4c6:	462a      	mov	r2, r5
 800f4c8:	4653      	mov	r3, sl
 800f4ca:	4621      	mov	r1, r4
 800f4cc:	a806      	add	r0, sp, #24
 800f4ce:	f000 f81f 	bl	800f510 <__kernel_rem_pio2>
 800f4d2:	9b04      	ldr	r3, [sp, #16]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	4605      	mov	r5, r0
 800f4d8:	f6bf ae53 	bge.w	800f182 <__ieee754_rem_pio2+0x7a>
 800f4dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f4e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f4e4:	e9c4 2300 	strd	r2, r3, [r4]
 800f4e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f4ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f4f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f4f4:	e740      	b.n	800f378 <__ieee754_rem_pio2+0x270>
 800f4f6:	bf00      	nop
 800f4f8:	41700000 	.word	0x41700000
 800f4fc:	080103d8 	.word	0x080103d8

0800f500 <fabs>:
 800f500:	ec51 0b10 	vmov	r0, r1, d0
 800f504:	4602      	mov	r2, r0
 800f506:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f50a:	ec43 2b10 	vmov	d0, r2, r3
 800f50e:	4770      	bx	lr

0800f510 <__kernel_rem_pio2>:
 800f510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	ed2d 8b02 	vpush	{d8}
 800f518:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f51c:	f112 0f14 	cmn.w	r2, #20
 800f520:	9306      	str	r3, [sp, #24]
 800f522:	9104      	str	r1, [sp, #16]
 800f524:	4bbe      	ldr	r3, [pc, #760]	@ (800f820 <__kernel_rem_pio2+0x310>)
 800f526:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f528:	9008      	str	r0, [sp, #32]
 800f52a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f52e:	9300      	str	r3, [sp, #0]
 800f530:	9b06      	ldr	r3, [sp, #24]
 800f532:	f103 33ff 	add.w	r3, r3, #4294967295
 800f536:	bfa8      	it	ge
 800f538:	1ed4      	subge	r4, r2, #3
 800f53a:	9305      	str	r3, [sp, #20]
 800f53c:	bfb2      	itee	lt
 800f53e:	2400      	movlt	r4, #0
 800f540:	2318      	movge	r3, #24
 800f542:	fb94 f4f3 	sdivge	r4, r4, r3
 800f546:	f06f 0317 	mvn.w	r3, #23
 800f54a:	fb04 3303 	mla	r3, r4, r3, r3
 800f54e:	eb03 0b02 	add.w	fp, r3, r2
 800f552:	9b00      	ldr	r3, [sp, #0]
 800f554:	9a05      	ldr	r2, [sp, #20]
 800f556:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800f810 <__kernel_rem_pio2+0x300>
 800f55a:	eb03 0802 	add.w	r8, r3, r2
 800f55e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f560:	1aa7      	subs	r7, r4, r2
 800f562:	ae20      	add	r6, sp, #128	@ 0x80
 800f564:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f568:	2500      	movs	r5, #0
 800f56a:	4545      	cmp	r5, r8
 800f56c:	dd13      	ble.n	800f596 <__kernel_rem_pio2+0x86>
 800f56e:	9b06      	ldr	r3, [sp, #24]
 800f570:	aa20      	add	r2, sp, #128	@ 0x80
 800f572:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f576:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f57a:	f04f 0800 	mov.w	r8, #0
 800f57e:	9b00      	ldr	r3, [sp, #0]
 800f580:	4598      	cmp	r8, r3
 800f582:	dc31      	bgt.n	800f5e8 <__kernel_rem_pio2+0xd8>
 800f584:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800f810 <__kernel_rem_pio2+0x300>
 800f588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f58c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f590:	462f      	mov	r7, r5
 800f592:	2600      	movs	r6, #0
 800f594:	e01b      	b.n	800f5ce <__kernel_rem_pio2+0xbe>
 800f596:	42ef      	cmn	r7, r5
 800f598:	d407      	bmi.n	800f5aa <__kernel_rem_pio2+0x9a>
 800f59a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f59e:	f7f0 ffc1 	bl	8000524 <__aeabi_i2d>
 800f5a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f5a6:	3501      	adds	r5, #1
 800f5a8:	e7df      	b.n	800f56a <__kernel_rem_pio2+0x5a>
 800f5aa:	ec51 0b18 	vmov	r0, r1, d8
 800f5ae:	e7f8      	b.n	800f5a2 <__kernel_rem_pio2+0x92>
 800f5b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f5b8:	f7f1 f81e 	bl	80005f8 <__aeabi_dmul>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5c4:	f7f0 fe62 	bl	800028c <__adddf3>
 800f5c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5cc:	3601      	adds	r6, #1
 800f5ce:	9b05      	ldr	r3, [sp, #20]
 800f5d0:	429e      	cmp	r6, r3
 800f5d2:	f1a7 0708 	sub.w	r7, r7, #8
 800f5d6:	ddeb      	ble.n	800f5b0 <__kernel_rem_pio2+0xa0>
 800f5d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5dc:	f108 0801 	add.w	r8, r8, #1
 800f5e0:	ecaa 7b02 	vstmia	sl!, {d7}
 800f5e4:	3508      	adds	r5, #8
 800f5e6:	e7ca      	b.n	800f57e <__kernel_rem_pio2+0x6e>
 800f5e8:	9b00      	ldr	r3, [sp, #0]
 800f5ea:	f8dd 8000 	ldr.w	r8, [sp]
 800f5ee:	aa0c      	add	r2, sp, #48	@ 0x30
 800f5f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f5f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f5f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f5fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f602:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f604:	ab98      	add	r3, sp, #608	@ 0x260
 800f606:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f60a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f60e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f612:	ac0c      	add	r4, sp, #48	@ 0x30
 800f614:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f616:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f61a:	46a1      	mov	r9, r4
 800f61c:	46c2      	mov	sl, r8
 800f61e:	f1ba 0f00 	cmp.w	sl, #0
 800f622:	f1a5 0508 	sub.w	r5, r5, #8
 800f626:	dc77      	bgt.n	800f718 <__kernel_rem_pio2+0x208>
 800f628:	4658      	mov	r0, fp
 800f62a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f62e:	f000 fac7 	bl	800fbc0 <scalbn>
 800f632:	ec57 6b10 	vmov	r6, r7, d0
 800f636:	2200      	movs	r2, #0
 800f638:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f63c:	4630      	mov	r0, r6
 800f63e:	4639      	mov	r1, r7
 800f640:	f7f0 ffda 	bl	80005f8 <__aeabi_dmul>
 800f644:	ec41 0b10 	vmov	d0, r0, r1
 800f648:	f000 fb3a 	bl	800fcc0 <floor>
 800f64c:	4b75      	ldr	r3, [pc, #468]	@ (800f824 <__kernel_rem_pio2+0x314>)
 800f64e:	ec51 0b10 	vmov	r0, r1, d0
 800f652:	2200      	movs	r2, #0
 800f654:	f7f0 ffd0 	bl	80005f8 <__aeabi_dmul>
 800f658:	4602      	mov	r2, r0
 800f65a:	460b      	mov	r3, r1
 800f65c:	4630      	mov	r0, r6
 800f65e:	4639      	mov	r1, r7
 800f660:	f7f0 fe12 	bl	8000288 <__aeabi_dsub>
 800f664:	460f      	mov	r7, r1
 800f666:	4606      	mov	r6, r0
 800f668:	f7f1 fa76 	bl	8000b58 <__aeabi_d2iz>
 800f66c:	9002      	str	r0, [sp, #8]
 800f66e:	f7f0 ff59 	bl	8000524 <__aeabi_i2d>
 800f672:	4602      	mov	r2, r0
 800f674:	460b      	mov	r3, r1
 800f676:	4630      	mov	r0, r6
 800f678:	4639      	mov	r1, r7
 800f67a:	f7f0 fe05 	bl	8000288 <__aeabi_dsub>
 800f67e:	f1bb 0f00 	cmp.w	fp, #0
 800f682:	4606      	mov	r6, r0
 800f684:	460f      	mov	r7, r1
 800f686:	dd6c      	ble.n	800f762 <__kernel_rem_pio2+0x252>
 800f688:	f108 31ff 	add.w	r1, r8, #4294967295
 800f68c:	ab0c      	add	r3, sp, #48	@ 0x30
 800f68e:	9d02      	ldr	r5, [sp, #8]
 800f690:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f694:	f1cb 0018 	rsb	r0, fp, #24
 800f698:	fa43 f200 	asr.w	r2, r3, r0
 800f69c:	4415      	add	r5, r2
 800f69e:	4082      	lsls	r2, r0
 800f6a0:	1a9b      	subs	r3, r3, r2
 800f6a2:	aa0c      	add	r2, sp, #48	@ 0x30
 800f6a4:	9502      	str	r5, [sp, #8]
 800f6a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f6aa:	f1cb 0217 	rsb	r2, fp, #23
 800f6ae:	fa43 f902 	asr.w	r9, r3, r2
 800f6b2:	f1b9 0f00 	cmp.w	r9, #0
 800f6b6:	dd64      	ble.n	800f782 <__kernel_rem_pio2+0x272>
 800f6b8:	9b02      	ldr	r3, [sp, #8]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	3301      	adds	r3, #1
 800f6be:	9302      	str	r3, [sp, #8]
 800f6c0:	4615      	mov	r5, r2
 800f6c2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f6c6:	4590      	cmp	r8, r2
 800f6c8:	f300 80b8 	bgt.w	800f83c <__kernel_rem_pio2+0x32c>
 800f6cc:	f1bb 0f00 	cmp.w	fp, #0
 800f6d0:	dd07      	ble.n	800f6e2 <__kernel_rem_pio2+0x1d2>
 800f6d2:	f1bb 0f01 	cmp.w	fp, #1
 800f6d6:	f000 80bf 	beq.w	800f858 <__kernel_rem_pio2+0x348>
 800f6da:	f1bb 0f02 	cmp.w	fp, #2
 800f6de:	f000 80c6 	beq.w	800f86e <__kernel_rem_pio2+0x35e>
 800f6e2:	f1b9 0f02 	cmp.w	r9, #2
 800f6e6:	d14c      	bne.n	800f782 <__kernel_rem_pio2+0x272>
 800f6e8:	4632      	mov	r2, r6
 800f6ea:	463b      	mov	r3, r7
 800f6ec:	494e      	ldr	r1, [pc, #312]	@ (800f828 <__kernel_rem_pio2+0x318>)
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	f7f0 fdca 	bl	8000288 <__aeabi_dsub>
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	460f      	mov	r7, r1
 800f6f8:	2d00      	cmp	r5, #0
 800f6fa:	d042      	beq.n	800f782 <__kernel_rem_pio2+0x272>
 800f6fc:	4658      	mov	r0, fp
 800f6fe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800f818 <__kernel_rem_pio2+0x308>
 800f702:	f000 fa5d 	bl	800fbc0 <scalbn>
 800f706:	4630      	mov	r0, r6
 800f708:	4639      	mov	r1, r7
 800f70a:	ec53 2b10 	vmov	r2, r3, d0
 800f70e:	f7f0 fdbb 	bl	8000288 <__aeabi_dsub>
 800f712:	4606      	mov	r6, r0
 800f714:	460f      	mov	r7, r1
 800f716:	e034      	b.n	800f782 <__kernel_rem_pio2+0x272>
 800f718:	4b44      	ldr	r3, [pc, #272]	@ (800f82c <__kernel_rem_pio2+0x31c>)
 800f71a:	2200      	movs	r2, #0
 800f71c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f720:	f7f0 ff6a 	bl	80005f8 <__aeabi_dmul>
 800f724:	f7f1 fa18 	bl	8000b58 <__aeabi_d2iz>
 800f728:	f7f0 fefc 	bl	8000524 <__aeabi_i2d>
 800f72c:	4b40      	ldr	r3, [pc, #256]	@ (800f830 <__kernel_rem_pio2+0x320>)
 800f72e:	2200      	movs	r2, #0
 800f730:	4606      	mov	r6, r0
 800f732:	460f      	mov	r7, r1
 800f734:	f7f0 ff60 	bl	80005f8 <__aeabi_dmul>
 800f738:	4602      	mov	r2, r0
 800f73a:	460b      	mov	r3, r1
 800f73c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f740:	f7f0 fda2 	bl	8000288 <__aeabi_dsub>
 800f744:	f7f1 fa08 	bl	8000b58 <__aeabi_d2iz>
 800f748:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f74c:	f849 0b04 	str.w	r0, [r9], #4
 800f750:	4639      	mov	r1, r7
 800f752:	4630      	mov	r0, r6
 800f754:	f7f0 fd9a 	bl	800028c <__adddf3>
 800f758:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f760:	e75d      	b.n	800f61e <__kernel_rem_pio2+0x10e>
 800f762:	d107      	bne.n	800f774 <__kernel_rem_pio2+0x264>
 800f764:	f108 33ff 	add.w	r3, r8, #4294967295
 800f768:	aa0c      	add	r2, sp, #48	@ 0x30
 800f76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f76e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f772:	e79e      	b.n	800f6b2 <__kernel_rem_pio2+0x1a2>
 800f774:	4b2f      	ldr	r3, [pc, #188]	@ (800f834 <__kernel_rem_pio2+0x324>)
 800f776:	2200      	movs	r2, #0
 800f778:	f7f1 f9c4 	bl	8000b04 <__aeabi_dcmpge>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	d143      	bne.n	800f808 <__kernel_rem_pio2+0x2f8>
 800f780:	4681      	mov	r9, r0
 800f782:	2200      	movs	r2, #0
 800f784:	2300      	movs	r3, #0
 800f786:	4630      	mov	r0, r6
 800f788:	4639      	mov	r1, r7
 800f78a:	f7f1 f99d 	bl	8000ac8 <__aeabi_dcmpeq>
 800f78e:	2800      	cmp	r0, #0
 800f790:	f000 80bf 	beq.w	800f912 <__kernel_rem_pio2+0x402>
 800f794:	f108 33ff 	add.w	r3, r8, #4294967295
 800f798:	2200      	movs	r2, #0
 800f79a:	9900      	ldr	r1, [sp, #0]
 800f79c:	428b      	cmp	r3, r1
 800f79e:	da6e      	bge.n	800f87e <__kernel_rem_pio2+0x36e>
 800f7a0:	2a00      	cmp	r2, #0
 800f7a2:	f000 8089 	beq.w	800f8b8 <__kernel_rem_pio2+0x3a8>
 800f7a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800f7aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800f7ac:	f1ab 0b18 	sub.w	fp, fp, #24
 800f7b0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d0f6      	beq.n	800f7a6 <__kernel_rem_pio2+0x296>
 800f7b8:	4658      	mov	r0, fp
 800f7ba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800f818 <__kernel_rem_pio2+0x308>
 800f7be:	f000 f9ff 	bl	800fbc0 <scalbn>
 800f7c2:	f108 0301 	add.w	r3, r8, #1
 800f7c6:	00da      	lsls	r2, r3, #3
 800f7c8:	9205      	str	r2, [sp, #20]
 800f7ca:	ec55 4b10 	vmov	r4, r5, d0
 800f7ce:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f7d0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800f82c <__kernel_rem_pio2+0x31c>
 800f7d4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f7d8:	4646      	mov	r6, r8
 800f7da:	f04f 0a00 	mov.w	sl, #0
 800f7de:	2e00      	cmp	r6, #0
 800f7e0:	f280 80cf 	bge.w	800f982 <__kernel_rem_pio2+0x472>
 800f7e4:	4644      	mov	r4, r8
 800f7e6:	2c00      	cmp	r4, #0
 800f7e8:	f2c0 80fd 	blt.w	800f9e6 <__kernel_rem_pio2+0x4d6>
 800f7ec:	4b12      	ldr	r3, [pc, #72]	@ (800f838 <__kernel_rem_pio2+0x328>)
 800f7ee:	461f      	mov	r7, r3
 800f7f0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f7f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f7f6:	9306      	str	r3, [sp, #24]
 800f7f8:	f04f 0a00 	mov.w	sl, #0
 800f7fc:	f04f 0b00 	mov.w	fp, #0
 800f800:	2600      	movs	r6, #0
 800f802:	eba8 0504 	sub.w	r5, r8, r4
 800f806:	e0e2      	b.n	800f9ce <__kernel_rem_pio2+0x4be>
 800f808:	f04f 0902 	mov.w	r9, #2
 800f80c:	e754      	b.n	800f6b8 <__kernel_rem_pio2+0x1a8>
 800f80e:	bf00      	nop
	...
 800f81c:	3ff00000 	.word	0x3ff00000
 800f820:	08010520 	.word	0x08010520
 800f824:	40200000 	.word	0x40200000
 800f828:	3ff00000 	.word	0x3ff00000
 800f82c:	3e700000 	.word	0x3e700000
 800f830:	41700000 	.word	0x41700000
 800f834:	3fe00000 	.word	0x3fe00000
 800f838:	080104e0 	.word	0x080104e0
 800f83c:	f854 3b04 	ldr.w	r3, [r4], #4
 800f840:	b945      	cbnz	r5, 800f854 <__kernel_rem_pio2+0x344>
 800f842:	b123      	cbz	r3, 800f84e <__kernel_rem_pio2+0x33e>
 800f844:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f848:	f844 3c04 	str.w	r3, [r4, #-4]
 800f84c:	2301      	movs	r3, #1
 800f84e:	3201      	adds	r2, #1
 800f850:	461d      	mov	r5, r3
 800f852:	e738      	b.n	800f6c6 <__kernel_rem_pio2+0x1b6>
 800f854:	1acb      	subs	r3, r1, r3
 800f856:	e7f7      	b.n	800f848 <__kernel_rem_pio2+0x338>
 800f858:	f108 32ff 	add.w	r2, r8, #4294967295
 800f85c:	ab0c      	add	r3, sp, #48	@ 0x30
 800f85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f862:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f866:	a90c      	add	r1, sp, #48	@ 0x30
 800f868:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f86c:	e739      	b.n	800f6e2 <__kernel_rem_pio2+0x1d2>
 800f86e:	f108 32ff 	add.w	r2, r8, #4294967295
 800f872:	ab0c      	add	r3, sp, #48	@ 0x30
 800f874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f878:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f87c:	e7f3      	b.n	800f866 <__kernel_rem_pio2+0x356>
 800f87e:	a90c      	add	r1, sp, #48	@ 0x30
 800f880:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f884:	3b01      	subs	r3, #1
 800f886:	430a      	orrs	r2, r1
 800f888:	e787      	b.n	800f79a <__kernel_rem_pio2+0x28a>
 800f88a:	3401      	adds	r4, #1
 800f88c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f890:	2a00      	cmp	r2, #0
 800f892:	d0fa      	beq.n	800f88a <__kernel_rem_pio2+0x37a>
 800f894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f896:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f89a:	eb0d 0503 	add.w	r5, sp, r3
 800f89e:	9b06      	ldr	r3, [sp, #24]
 800f8a0:	aa20      	add	r2, sp, #128	@ 0x80
 800f8a2:	4443      	add	r3, r8
 800f8a4:	f108 0701 	add.w	r7, r8, #1
 800f8a8:	3d98      	subs	r5, #152	@ 0x98
 800f8aa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f8ae:	4444      	add	r4, r8
 800f8b0:	42bc      	cmp	r4, r7
 800f8b2:	da04      	bge.n	800f8be <__kernel_rem_pio2+0x3ae>
 800f8b4:	46a0      	mov	r8, r4
 800f8b6:	e6a2      	b.n	800f5fe <__kernel_rem_pio2+0xee>
 800f8b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8ba:	2401      	movs	r4, #1
 800f8bc:	e7e6      	b.n	800f88c <__kernel_rem_pio2+0x37c>
 800f8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8c0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f8c4:	f7f0 fe2e 	bl	8000524 <__aeabi_i2d>
 800f8c8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800fb90 <__kernel_rem_pio2+0x680>
 800f8cc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f8d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f8d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f8d8:	46b2      	mov	sl, r6
 800f8da:	f04f 0800 	mov.w	r8, #0
 800f8de:	9b05      	ldr	r3, [sp, #20]
 800f8e0:	4598      	cmp	r8, r3
 800f8e2:	dd05      	ble.n	800f8f0 <__kernel_rem_pio2+0x3e0>
 800f8e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8e8:	3701      	adds	r7, #1
 800f8ea:	eca5 7b02 	vstmia	r5!, {d7}
 800f8ee:	e7df      	b.n	800f8b0 <__kernel_rem_pio2+0x3a0>
 800f8f0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f8f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f8f8:	f7f0 fe7e 	bl	80005f8 <__aeabi_dmul>
 800f8fc:	4602      	mov	r2, r0
 800f8fe:	460b      	mov	r3, r1
 800f900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f904:	f7f0 fcc2 	bl	800028c <__adddf3>
 800f908:	f108 0801 	add.w	r8, r8, #1
 800f90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f910:	e7e5      	b.n	800f8de <__kernel_rem_pio2+0x3ce>
 800f912:	f1cb 0000 	rsb	r0, fp, #0
 800f916:	ec47 6b10 	vmov	d0, r6, r7
 800f91a:	f000 f951 	bl	800fbc0 <scalbn>
 800f91e:	ec55 4b10 	vmov	r4, r5, d0
 800f922:	4b9d      	ldr	r3, [pc, #628]	@ (800fb98 <__kernel_rem_pio2+0x688>)
 800f924:	2200      	movs	r2, #0
 800f926:	4620      	mov	r0, r4
 800f928:	4629      	mov	r1, r5
 800f92a:	f7f1 f8eb 	bl	8000b04 <__aeabi_dcmpge>
 800f92e:	b300      	cbz	r0, 800f972 <__kernel_rem_pio2+0x462>
 800f930:	4b9a      	ldr	r3, [pc, #616]	@ (800fb9c <__kernel_rem_pio2+0x68c>)
 800f932:	2200      	movs	r2, #0
 800f934:	4620      	mov	r0, r4
 800f936:	4629      	mov	r1, r5
 800f938:	f7f0 fe5e 	bl	80005f8 <__aeabi_dmul>
 800f93c:	f7f1 f90c 	bl	8000b58 <__aeabi_d2iz>
 800f940:	4606      	mov	r6, r0
 800f942:	f7f0 fdef 	bl	8000524 <__aeabi_i2d>
 800f946:	4b94      	ldr	r3, [pc, #592]	@ (800fb98 <__kernel_rem_pio2+0x688>)
 800f948:	2200      	movs	r2, #0
 800f94a:	f7f0 fe55 	bl	80005f8 <__aeabi_dmul>
 800f94e:	460b      	mov	r3, r1
 800f950:	4602      	mov	r2, r0
 800f952:	4629      	mov	r1, r5
 800f954:	4620      	mov	r0, r4
 800f956:	f7f0 fc97 	bl	8000288 <__aeabi_dsub>
 800f95a:	f7f1 f8fd 	bl	8000b58 <__aeabi_d2iz>
 800f95e:	ab0c      	add	r3, sp, #48	@ 0x30
 800f960:	f10b 0b18 	add.w	fp, fp, #24
 800f964:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f968:	f108 0801 	add.w	r8, r8, #1
 800f96c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f970:	e722      	b.n	800f7b8 <__kernel_rem_pio2+0x2a8>
 800f972:	4620      	mov	r0, r4
 800f974:	4629      	mov	r1, r5
 800f976:	f7f1 f8ef 	bl	8000b58 <__aeabi_d2iz>
 800f97a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f97c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f980:	e71a      	b.n	800f7b8 <__kernel_rem_pio2+0x2a8>
 800f982:	ab0c      	add	r3, sp, #48	@ 0x30
 800f984:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f988:	f7f0 fdcc 	bl	8000524 <__aeabi_i2d>
 800f98c:	4622      	mov	r2, r4
 800f98e:	462b      	mov	r3, r5
 800f990:	f7f0 fe32 	bl	80005f8 <__aeabi_dmul>
 800f994:	4652      	mov	r2, sl
 800f996:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f99a:	465b      	mov	r3, fp
 800f99c:	4620      	mov	r0, r4
 800f99e:	4629      	mov	r1, r5
 800f9a0:	f7f0 fe2a 	bl	80005f8 <__aeabi_dmul>
 800f9a4:	3e01      	subs	r6, #1
 800f9a6:	4604      	mov	r4, r0
 800f9a8:	460d      	mov	r5, r1
 800f9aa:	e718      	b.n	800f7de <__kernel_rem_pio2+0x2ce>
 800f9ac:	9906      	ldr	r1, [sp, #24]
 800f9ae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f9b2:	9106      	str	r1, [sp, #24]
 800f9b4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f9b8:	f7f0 fe1e 	bl	80005f8 <__aeabi_dmul>
 800f9bc:	4602      	mov	r2, r0
 800f9be:	460b      	mov	r3, r1
 800f9c0:	4650      	mov	r0, sl
 800f9c2:	4659      	mov	r1, fp
 800f9c4:	f7f0 fc62 	bl	800028c <__adddf3>
 800f9c8:	3601      	adds	r6, #1
 800f9ca:	4682      	mov	sl, r0
 800f9cc:	468b      	mov	fp, r1
 800f9ce:	9b00      	ldr	r3, [sp, #0]
 800f9d0:	429e      	cmp	r6, r3
 800f9d2:	dc01      	bgt.n	800f9d8 <__kernel_rem_pio2+0x4c8>
 800f9d4:	42b5      	cmp	r5, r6
 800f9d6:	dae9      	bge.n	800f9ac <__kernel_rem_pio2+0x49c>
 800f9d8:	ab48      	add	r3, sp, #288	@ 0x120
 800f9da:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f9de:	e9c5 ab00 	strd	sl, fp, [r5]
 800f9e2:	3c01      	subs	r4, #1
 800f9e4:	e6ff      	b.n	800f7e6 <__kernel_rem_pio2+0x2d6>
 800f9e6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f9e8:	2b02      	cmp	r3, #2
 800f9ea:	dc0b      	bgt.n	800fa04 <__kernel_rem_pio2+0x4f4>
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	dc39      	bgt.n	800fa64 <__kernel_rem_pio2+0x554>
 800f9f0:	d05d      	beq.n	800faae <__kernel_rem_pio2+0x59e>
 800f9f2:	9b02      	ldr	r3, [sp, #8]
 800f9f4:	f003 0007 	and.w	r0, r3, #7
 800f9f8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f9fc:	ecbd 8b02 	vpop	{d8}
 800fa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa04:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fa06:	2b03      	cmp	r3, #3
 800fa08:	d1f3      	bne.n	800f9f2 <__kernel_rem_pio2+0x4e2>
 800fa0a:	9b05      	ldr	r3, [sp, #20]
 800fa0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fa10:	eb0d 0403 	add.w	r4, sp, r3
 800fa14:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800fa18:	4625      	mov	r5, r4
 800fa1a:	46c2      	mov	sl, r8
 800fa1c:	f1ba 0f00 	cmp.w	sl, #0
 800fa20:	f1a5 0508 	sub.w	r5, r5, #8
 800fa24:	dc6b      	bgt.n	800fafe <__kernel_rem_pio2+0x5ee>
 800fa26:	4645      	mov	r5, r8
 800fa28:	2d01      	cmp	r5, #1
 800fa2a:	f1a4 0408 	sub.w	r4, r4, #8
 800fa2e:	f300 8087 	bgt.w	800fb40 <__kernel_rem_pio2+0x630>
 800fa32:	9c05      	ldr	r4, [sp, #20]
 800fa34:	ab48      	add	r3, sp, #288	@ 0x120
 800fa36:	441c      	add	r4, r3
 800fa38:	2000      	movs	r0, #0
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	f1b8 0f01 	cmp.w	r8, #1
 800fa40:	f300 809c 	bgt.w	800fb7c <__kernel_rem_pio2+0x66c>
 800fa44:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800fa48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800fa4c:	f1b9 0f00 	cmp.w	r9, #0
 800fa50:	f040 80a6 	bne.w	800fba0 <__kernel_rem_pio2+0x690>
 800fa54:	9b04      	ldr	r3, [sp, #16]
 800fa56:	e9c3 7800 	strd	r7, r8, [r3]
 800fa5a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800fa5e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800fa62:	e7c6      	b.n	800f9f2 <__kernel_rem_pio2+0x4e2>
 800fa64:	9d05      	ldr	r5, [sp, #20]
 800fa66:	ab48      	add	r3, sp, #288	@ 0x120
 800fa68:	441d      	add	r5, r3
 800fa6a:	4644      	mov	r4, r8
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	2100      	movs	r1, #0
 800fa70:	2c00      	cmp	r4, #0
 800fa72:	da35      	bge.n	800fae0 <__kernel_rem_pio2+0x5d0>
 800fa74:	f1b9 0f00 	cmp.w	r9, #0
 800fa78:	d038      	beq.n	800faec <__kernel_rem_pio2+0x5dc>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fa80:	9c04      	ldr	r4, [sp, #16]
 800fa82:	e9c4 2300 	strd	r2, r3, [r4]
 800fa86:	4602      	mov	r2, r0
 800fa88:	460b      	mov	r3, r1
 800fa8a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800fa8e:	f7f0 fbfb 	bl	8000288 <__aeabi_dsub>
 800fa92:	ad4a      	add	r5, sp, #296	@ 0x128
 800fa94:	2401      	movs	r4, #1
 800fa96:	45a0      	cmp	r8, r4
 800fa98:	da2b      	bge.n	800faf2 <__kernel_rem_pio2+0x5e2>
 800fa9a:	f1b9 0f00 	cmp.w	r9, #0
 800fa9e:	d002      	beq.n	800faa6 <__kernel_rem_pio2+0x596>
 800faa0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800faa4:	4619      	mov	r1, r3
 800faa6:	9b04      	ldr	r3, [sp, #16]
 800faa8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800faac:	e7a1      	b.n	800f9f2 <__kernel_rem_pio2+0x4e2>
 800faae:	9c05      	ldr	r4, [sp, #20]
 800fab0:	ab48      	add	r3, sp, #288	@ 0x120
 800fab2:	441c      	add	r4, r3
 800fab4:	2000      	movs	r0, #0
 800fab6:	2100      	movs	r1, #0
 800fab8:	f1b8 0f00 	cmp.w	r8, #0
 800fabc:	da09      	bge.n	800fad2 <__kernel_rem_pio2+0x5c2>
 800fabe:	f1b9 0f00 	cmp.w	r9, #0
 800fac2:	d002      	beq.n	800faca <__kernel_rem_pio2+0x5ba>
 800fac4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fac8:	4619      	mov	r1, r3
 800faca:	9b04      	ldr	r3, [sp, #16]
 800facc:	e9c3 0100 	strd	r0, r1, [r3]
 800fad0:	e78f      	b.n	800f9f2 <__kernel_rem_pio2+0x4e2>
 800fad2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fad6:	f7f0 fbd9 	bl	800028c <__adddf3>
 800fada:	f108 38ff 	add.w	r8, r8, #4294967295
 800fade:	e7eb      	b.n	800fab8 <__kernel_rem_pio2+0x5a8>
 800fae0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fae4:	f7f0 fbd2 	bl	800028c <__adddf3>
 800fae8:	3c01      	subs	r4, #1
 800faea:	e7c1      	b.n	800fa70 <__kernel_rem_pio2+0x560>
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	e7c6      	b.n	800fa80 <__kernel_rem_pio2+0x570>
 800faf2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800faf6:	f7f0 fbc9 	bl	800028c <__adddf3>
 800fafa:	3401      	adds	r4, #1
 800fafc:	e7cb      	b.n	800fa96 <__kernel_rem_pio2+0x586>
 800fafe:	ed95 7b00 	vldr	d7, [r5]
 800fb02:	ed8d 7b00 	vstr	d7, [sp]
 800fb06:	ed95 7b02 	vldr	d7, [r5, #8]
 800fb0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb0e:	ec53 2b17 	vmov	r2, r3, d7
 800fb12:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fb16:	f7f0 fbb9 	bl	800028c <__adddf3>
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	4606      	mov	r6, r0
 800fb20:	460f      	mov	r7, r1
 800fb22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb26:	f7f0 fbaf 	bl	8000288 <__aeabi_dsub>
 800fb2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fb2e:	f7f0 fbad 	bl	800028c <__adddf3>
 800fb32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb36:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800fb3a:	e9c5 6700 	strd	r6, r7, [r5]
 800fb3e:	e76d      	b.n	800fa1c <__kernel_rem_pio2+0x50c>
 800fb40:	ed94 7b00 	vldr	d7, [r4]
 800fb44:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800fb48:	ec51 0b17 	vmov	r0, r1, d7
 800fb4c:	4652      	mov	r2, sl
 800fb4e:	465b      	mov	r3, fp
 800fb50:	ed8d 7b00 	vstr	d7, [sp]
 800fb54:	f7f0 fb9a 	bl	800028c <__adddf3>
 800fb58:	4602      	mov	r2, r0
 800fb5a:	460b      	mov	r3, r1
 800fb5c:	4606      	mov	r6, r0
 800fb5e:	460f      	mov	r7, r1
 800fb60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb64:	f7f0 fb90 	bl	8000288 <__aeabi_dsub>
 800fb68:	4652      	mov	r2, sl
 800fb6a:	465b      	mov	r3, fp
 800fb6c:	f7f0 fb8e 	bl	800028c <__adddf3>
 800fb70:	3d01      	subs	r5, #1
 800fb72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fb76:	e9c4 6700 	strd	r6, r7, [r4]
 800fb7a:	e755      	b.n	800fa28 <__kernel_rem_pio2+0x518>
 800fb7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800fb80:	f7f0 fb84 	bl	800028c <__adddf3>
 800fb84:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb88:	e758      	b.n	800fa3c <__kernel_rem_pio2+0x52c>
 800fb8a:	bf00      	nop
 800fb8c:	f3af 8000 	nop.w
	...
 800fb98:	41700000 	.word	0x41700000
 800fb9c:	3e700000 	.word	0x3e700000
 800fba0:	9b04      	ldr	r3, [sp, #16]
 800fba2:	9a04      	ldr	r2, [sp, #16]
 800fba4:	601f      	str	r7, [r3, #0]
 800fba6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800fbaa:	605c      	str	r4, [r3, #4]
 800fbac:	609d      	str	r5, [r3, #8]
 800fbae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fbb2:	60d3      	str	r3, [r2, #12]
 800fbb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fbb8:	6110      	str	r0, [r2, #16]
 800fbba:	6153      	str	r3, [r2, #20]
 800fbbc:	e719      	b.n	800f9f2 <__kernel_rem_pio2+0x4e2>
 800fbbe:	bf00      	nop

0800fbc0 <scalbn>:
 800fbc0:	b570      	push	{r4, r5, r6, lr}
 800fbc2:	ec55 4b10 	vmov	r4, r5, d0
 800fbc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fbca:	4606      	mov	r6, r0
 800fbcc:	462b      	mov	r3, r5
 800fbce:	b991      	cbnz	r1, 800fbf6 <scalbn+0x36>
 800fbd0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800fbd4:	4323      	orrs	r3, r4
 800fbd6:	d03d      	beq.n	800fc54 <scalbn+0x94>
 800fbd8:	4b35      	ldr	r3, [pc, #212]	@ (800fcb0 <scalbn+0xf0>)
 800fbda:	4620      	mov	r0, r4
 800fbdc:	4629      	mov	r1, r5
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f7f0 fd0a 	bl	80005f8 <__aeabi_dmul>
 800fbe4:	4b33      	ldr	r3, [pc, #204]	@ (800fcb4 <scalbn+0xf4>)
 800fbe6:	429e      	cmp	r6, r3
 800fbe8:	4604      	mov	r4, r0
 800fbea:	460d      	mov	r5, r1
 800fbec:	da0f      	bge.n	800fc0e <scalbn+0x4e>
 800fbee:	a328      	add	r3, pc, #160	@ (adr r3, 800fc90 <scalbn+0xd0>)
 800fbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf4:	e01e      	b.n	800fc34 <scalbn+0x74>
 800fbf6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800fbfa:	4291      	cmp	r1, r2
 800fbfc:	d10b      	bne.n	800fc16 <scalbn+0x56>
 800fbfe:	4622      	mov	r2, r4
 800fc00:	4620      	mov	r0, r4
 800fc02:	4629      	mov	r1, r5
 800fc04:	f7f0 fb42 	bl	800028c <__adddf3>
 800fc08:	4604      	mov	r4, r0
 800fc0a:	460d      	mov	r5, r1
 800fc0c:	e022      	b.n	800fc54 <scalbn+0x94>
 800fc0e:	460b      	mov	r3, r1
 800fc10:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fc14:	3936      	subs	r1, #54	@ 0x36
 800fc16:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800fc1a:	4296      	cmp	r6, r2
 800fc1c:	dd0d      	ble.n	800fc3a <scalbn+0x7a>
 800fc1e:	2d00      	cmp	r5, #0
 800fc20:	a11d      	add	r1, pc, #116	@ (adr r1, 800fc98 <scalbn+0xd8>)
 800fc22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc26:	da02      	bge.n	800fc2e <scalbn+0x6e>
 800fc28:	a11d      	add	r1, pc, #116	@ (adr r1, 800fca0 <scalbn+0xe0>)
 800fc2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc2e:	a31a      	add	r3, pc, #104	@ (adr r3, 800fc98 <scalbn+0xd8>)
 800fc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc34:	f7f0 fce0 	bl	80005f8 <__aeabi_dmul>
 800fc38:	e7e6      	b.n	800fc08 <scalbn+0x48>
 800fc3a:	1872      	adds	r2, r6, r1
 800fc3c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800fc40:	428a      	cmp	r2, r1
 800fc42:	dcec      	bgt.n	800fc1e <scalbn+0x5e>
 800fc44:	2a00      	cmp	r2, #0
 800fc46:	dd08      	ble.n	800fc5a <scalbn+0x9a>
 800fc48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fc4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fc50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fc54:	ec45 4b10 	vmov	d0, r4, r5
 800fc58:	bd70      	pop	{r4, r5, r6, pc}
 800fc5a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800fc5e:	da08      	bge.n	800fc72 <scalbn+0xb2>
 800fc60:	2d00      	cmp	r5, #0
 800fc62:	a10b      	add	r1, pc, #44	@ (adr r1, 800fc90 <scalbn+0xd0>)
 800fc64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc68:	dac1      	bge.n	800fbee <scalbn+0x2e>
 800fc6a:	a10f      	add	r1, pc, #60	@ (adr r1, 800fca8 <scalbn+0xe8>)
 800fc6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc70:	e7bd      	b.n	800fbee <scalbn+0x2e>
 800fc72:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fc76:	3236      	adds	r2, #54	@ 0x36
 800fc78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fc7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fc80:	4620      	mov	r0, r4
 800fc82:	4b0d      	ldr	r3, [pc, #52]	@ (800fcb8 <scalbn+0xf8>)
 800fc84:	4629      	mov	r1, r5
 800fc86:	2200      	movs	r2, #0
 800fc88:	e7d4      	b.n	800fc34 <scalbn+0x74>
 800fc8a:	bf00      	nop
 800fc8c:	f3af 8000 	nop.w
 800fc90:	c2f8f359 	.word	0xc2f8f359
 800fc94:	01a56e1f 	.word	0x01a56e1f
 800fc98:	8800759c 	.word	0x8800759c
 800fc9c:	7e37e43c 	.word	0x7e37e43c
 800fca0:	8800759c 	.word	0x8800759c
 800fca4:	fe37e43c 	.word	0xfe37e43c
 800fca8:	c2f8f359 	.word	0xc2f8f359
 800fcac:	81a56e1f 	.word	0x81a56e1f
 800fcb0:	43500000 	.word	0x43500000
 800fcb4:	ffff3cb0 	.word	0xffff3cb0
 800fcb8:	3c900000 	.word	0x3c900000
 800fcbc:	00000000 	.word	0x00000000

0800fcc0 <floor>:
 800fcc0:	ec51 0b10 	vmov	r0, r1, d0
 800fcc4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fcc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fccc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800fcd0:	2e13      	cmp	r6, #19
 800fcd2:	460c      	mov	r4, r1
 800fcd4:	4605      	mov	r5, r0
 800fcd6:	4680      	mov	r8, r0
 800fcd8:	dc34      	bgt.n	800fd44 <floor+0x84>
 800fcda:	2e00      	cmp	r6, #0
 800fcdc:	da17      	bge.n	800fd0e <floor+0x4e>
 800fcde:	a332      	add	r3, pc, #200	@ (adr r3, 800fda8 <floor+0xe8>)
 800fce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce4:	f7f0 fad2 	bl	800028c <__adddf3>
 800fce8:	2200      	movs	r2, #0
 800fcea:	2300      	movs	r3, #0
 800fcec:	f7f0 ff14 	bl	8000b18 <__aeabi_dcmpgt>
 800fcf0:	b150      	cbz	r0, 800fd08 <floor+0x48>
 800fcf2:	2c00      	cmp	r4, #0
 800fcf4:	da55      	bge.n	800fda2 <floor+0xe2>
 800fcf6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800fcfa:	432c      	orrs	r4, r5
 800fcfc:	2500      	movs	r5, #0
 800fcfe:	42ac      	cmp	r4, r5
 800fd00:	4c2b      	ldr	r4, [pc, #172]	@ (800fdb0 <floor+0xf0>)
 800fd02:	bf08      	it	eq
 800fd04:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fd08:	4621      	mov	r1, r4
 800fd0a:	4628      	mov	r0, r5
 800fd0c:	e023      	b.n	800fd56 <floor+0x96>
 800fd0e:	4f29      	ldr	r7, [pc, #164]	@ (800fdb4 <floor+0xf4>)
 800fd10:	4137      	asrs	r7, r6
 800fd12:	ea01 0307 	and.w	r3, r1, r7
 800fd16:	4303      	orrs	r3, r0
 800fd18:	d01d      	beq.n	800fd56 <floor+0x96>
 800fd1a:	a323      	add	r3, pc, #140	@ (adr r3, 800fda8 <floor+0xe8>)
 800fd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd20:	f7f0 fab4 	bl	800028c <__adddf3>
 800fd24:	2200      	movs	r2, #0
 800fd26:	2300      	movs	r3, #0
 800fd28:	f7f0 fef6 	bl	8000b18 <__aeabi_dcmpgt>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d0eb      	beq.n	800fd08 <floor+0x48>
 800fd30:	2c00      	cmp	r4, #0
 800fd32:	bfbe      	ittt	lt
 800fd34:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800fd38:	4133      	asrlt	r3, r6
 800fd3a:	18e4      	addlt	r4, r4, r3
 800fd3c:	ea24 0407 	bic.w	r4, r4, r7
 800fd40:	2500      	movs	r5, #0
 800fd42:	e7e1      	b.n	800fd08 <floor+0x48>
 800fd44:	2e33      	cmp	r6, #51	@ 0x33
 800fd46:	dd0a      	ble.n	800fd5e <floor+0x9e>
 800fd48:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800fd4c:	d103      	bne.n	800fd56 <floor+0x96>
 800fd4e:	4602      	mov	r2, r0
 800fd50:	460b      	mov	r3, r1
 800fd52:	f7f0 fa9b 	bl	800028c <__adddf3>
 800fd56:	ec41 0b10 	vmov	d0, r0, r1
 800fd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd5e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800fd62:	f04f 37ff 	mov.w	r7, #4294967295
 800fd66:	40df      	lsrs	r7, r3
 800fd68:	4207      	tst	r7, r0
 800fd6a:	d0f4      	beq.n	800fd56 <floor+0x96>
 800fd6c:	a30e      	add	r3, pc, #56	@ (adr r3, 800fda8 <floor+0xe8>)
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	f7f0 fa8b 	bl	800028c <__adddf3>
 800fd76:	2200      	movs	r2, #0
 800fd78:	2300      	movs	r3, #0
 800fd7a:	f7f0 fecd 	bl	8000b18 <__aeabi_dcmpgt>
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d0c2      	beq.n	800fd08 <floor+0x48>
 800fd82:	2c00      	cmp	r4, #0
 800fd84:	da0a      	bge.n	800fd9c <floor+0xdc>
 800fd86:	2e14      	cmp	r6, #20
 800fd88:	d101      	bne.n	800fd8e <floor+0xce>
 800fd8a:	3401      	adds	r4, #1
 800fd8c:	e006      	b.n	800fd9c <floor+0xdc>
 800fd8e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800fd92:	2301      	movs	r3, #1
 800fd94:	40b3      	lsls	r3, r6
 800fd96:	441d      	add	r5, r3
 800fd98:	4545      	cmp	r5, r8
 800fd9a:	d3f6      	bcc.n	800fd8a <floor+0xca>
 800fd9c:	ea25 0507 	bic.w	r5, r5, r7
 800fda0:	e7b2      	b.n	800fd08 <floor+0x48>
 800fda2:	2500      	movs	r5, #0
 800fda4:	462c      	mov	r4, r5
 800fda6:	e7af      	b.n	800fd08 <floor+0x48>
 800fda8:	8800759c 	.word	0x8800759c
 800fdac:	7e37e43c 	.word	0x7e37e43c
 800fdb0:	bff00000 	.word	0xbff00000
 800fdb4:	000fffff 	.word	0x000fffff

0800fdb8 <_init>:
 800fdb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdba:	bf00      	nop
 800fdbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdbe:	bc08      	pop	{r3}
 800fdc0:	469e      	mov	lr, r3
 800fdc2:	4770      	bx	lr

0800fdc4 <_fini>:
 800fdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdc6:	bf00      	nop
 800fdc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdca:	bc08      	pop	{r3}
 800fdcc:	469e      	mov	lr, r3
 800fdce:	4770      	bx	lr

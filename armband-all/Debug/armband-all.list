
armband-all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb58  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800ece8  0800ece8  0001ece8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f468  0800f468  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800f468  0800f468  0001f468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f470  0800f470  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f470  0800f470  0001f470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f474  0800f474  0001f474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800f478  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000200  0800f678  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  0800f678  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a654  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003458  00000000  00000000  0003a8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  0003dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138f  00000000  00000000  0003f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002520a  00000000  00000000  000409a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf68  00000000  00000000  00065bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1b79  00000000  00000000  00082b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000083a4  00000000  00000000  00164694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0016ca38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ecd0 	.word	0x0800ecd0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0800ecd0 	.word	0x0800ecd0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <fix_msb_loss>:
 * exceed 286 m/s2
 * this is 100% fine for gravity vector
 * this is most likely fine for acc vector as no runner is
 * putting out 30g's while running
 */
uint16_t fix_msb_loss(uint16_t val){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	if ((val & 0xF000) == 0x7000) {
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001000:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001004:	d105      	bne.n	8001012 <fix_msb_loss+0x22>
		val |= 0x8000;
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800100c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001010:	80fb      	strh	r3, [r7, #6]
	}
	return val;
 8001012:	88fb      	ldrh	r3, [r7, #6]
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <startup_IMU>:

void startup_IMU(I2C_HandleTypeDef *hi2c){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	// verify i2c is working properly by reading chip id
	read_to_buf(hi2c, 0x00, buf, 1);
 8001028:	f107 020c 	add.w	r2, r7, #12
 800102c:	2301      	movs	r3, #1
 800102e:	2100      	movs	r1, #0
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f848 	bl	80010c6 <read_to_buf>
	if(buf[0] != 0xA0) {
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	2ba0      	cmp	r3, #160	; 0xa0
 800103a:	d003      	beq.n	8001044 <startup_IMU+0x24>
		printf("chip error, wrong/no chip ID returned\n\r");
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <startup_IMU+0x40>)
 800103e:	f009 fe23 	bl	800ac88 <iprintf>
 8001042:	e00a      	b.n	800105a <startup_IMU+0x3a>
		return;
	}

	// put chip in configuration mode
	buf[0] = 0x3D;
 8001044:	233d      	movs	r3, #61	; 0x3d
 8001046:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x00;
 8001048:	2300      	movs	r3, #0
 800104a:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2202      	movs	r2, #2
 8001052:	4619      	mov	r1, r3
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f81b 	bl	8001090 <transmit_buf>
}
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	0800ece8 	.word	0x0800ece8

08001064 <init_IMU>:

void init_IMU(I2C_HandleTypeDef *hi2c){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	startup_IMU(hi2c);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffd7 	bl	8001020 <startup_IMU>

	// put chip in IMU mode
	buf[0] = 0x3D;
 8001072:	233d      	movs	r3, #61	; 0x3d
 8001074:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x08;
 8001076:	2308      	movs	r3, #8
 8001078:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2202      	movs	r2, #2
 8001080:	4619      	mov	r1, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f804 	bl	8001090 <transmit_buf>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <transmit_buf>:
	buf[1] = buf[0];
	buf[0] = 0x3B;
	transmit_buf(hi2c, buf, 2);
}

uint8_t transmit_buf(I2C_HandleTypeDef *hi2c, uint8_t *buf, uint16_t bytes) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af02      	add	r7, sp, #8
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, bytes, 1000);
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	2150      	movs	r1, #80	; 0x50
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f003 fc4a 	bl	8004944 <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f838 	bl	800112c <check_ret>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <read_to_buf>:

uint8_t read_to_buf(I2C_HandleTypeDef *hi2c, uint8_t subAddr, uint8_t *buf, uint16_t bytes){
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b088      	sub	sp, #32
 80010ca:	af02      	add	r7, sp, #8
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	461a      	mov	r2, r3
 80010d2:	460b      	mov	r3, r1
 80010d4:	72fb      	strb	r3, [r7, #11]
 80010d6:	4613      	mov	r3, r2
 80010d8:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, &subAddr, 1, 1000);
 80010da:	f107 020b 	add.w	r2, r7, #11
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2150      	movs	r1, #80	; 0x50
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f003 fc2b 	bl	8004944 <HAL_I2C_Master_Transmit>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]
	if (!check_ret(ret)) return 0;
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f819 	bl	800112c <check_ret>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <read_to_buf+0x3e>
 8001100:	2300      	movs	r3, #0
 8001102:	e00f      	b.n	8001124 <read_to_buf+0x5e>
	ret = HAL_I2C_Master_Receive(hi2c, SAD_R, buf, bytes, 1000);
 8001104:	893b      	ldrh	r3, [r7, #8]
 8001106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110a:	9200      	str	r2, [sp, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	2151      	movs	r1, #81	; 0x51
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f003 fd2f 	bl	8004b74 <HAL_I2C_Master_Receive>
 8001116:	4603      	mov	r3, r0
 8001118:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f805 	bl	800112c <check_ret>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <check_ret>:

uint8_t check_ret(HAL_StatusTypeDef ret) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK) {
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <check_ret+0x14>
		return 1;
 800113c:	2301      	movs	r3, #1
 800113e:	e003      	b.n	8001148 <check_ret+0x1c>
	} else {
		// TODO:
		// add more descriptive error
		printf("i2c error!\n\r");
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <check_ret+0x24>)
 8001142:	f009 fda1 	bl	800ac88 <iprintf>
		return 0;
 8001146:	2300      	movs	r3, #0
	}
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	0800ed10 	.word	0x0800ed10

08001154 <x_lin_acc_raw>:
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
	return;
}

int16_t x_lin_acc_raw(I2C_HandleTypeDef *hi2c){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	uint8_t buf[2];
	read_to_buf(hi2c, 0x28, buf, 2);
 800115c:	f107 020c 	add.w	r2, r7, #12
 8001160:	2302      	movs	r3, #2
 8001162:	2128      	movs	r1, #40	; 0x28
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ffae 	bl	80010c6 <read_to_buf>
	return fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 800116a:	7b3b      	ldrb	r3, [r7, #12]
 800116c:	b21a      	sxth	r2, r3
 800116e:	7b7b      	ldrb	r3, [r7, #13]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29b      	uxth	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff38 	bl	8000ff0 <fix_msb_loss>
 8001180:	4603      	mov	r3, r0
 8001182:	b21b      	sxth	r3, r3
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <y_lin_acc_raw>:

int16_t y_lin_acc_raw(I2C_HandleTypeDef *hi2c){
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	uint8_t buf[2];
	read_to_buf(hi2c, 0x2A, buf, 2);
 8001194:	f107 020c 	add.w	r2, r7, #12
 8001198:	2302      	movs	r3, #2
 800119a:	212a      	movs	r1, #42	; 0x2a
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff ff92 	bl	80010c6 <read_to_buf>
	return fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 80011a2:	7b3b      	ldrb	r3, [r7, #12]
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7b7b      	ldrb	r3, [r7, #13]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	4313      	orrs	r3, r2
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ff1c 	bl	8000ff0 <fix_msb_loss>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b21b      	sxth	r3, r3
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <z_lin_acc_raw>:

int16_t z_lin_acc_raw(I2C_HandleTypeDef *hi2c){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	uint8_t buf[2];
	read_to_buf(hi2c, 0x2C, buf, 2);
 80011cc:	f107 020c 	add.w	r2, r7, #12
 80011d0:	2302      	movs	r3, #2
 80011d2:	212c      	movs	r1, #44	; 0x2c
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff76 	bl	80010c6 <read_to_buf>
	return fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 80011da:	7b3b      	ldrb	r3, [r7, #12]
 80011dc:	b21a      	sxth	r2, r3
 80011de:	7b7b      	ldrb	r3, [r7, #13]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff00 	bl	8000ff0 <fix_msb_loss>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b21b      	sxth	r3, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <x_lin_acc>:
	vec[1] = veci[1] / 100.0f;
	vec[2] = veci[2] / 100.0f;
	return;
}

float x_lin_acc(I2C_HandleTypeDef *hi2c){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	return x_lin_acc_raw(hi2c) / 100.0f;
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ffa5 	bl	8001154 <x_lin_acc_raw>
 800120a:	4603      	mov	r3, r0
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001214:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800122c <x_lin_acc+0x30>
 8001218:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800121c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001220:	eeb0 0a67 	vmov.f32	s0, s15
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	42c80000 	.word	0x42c80000

08001230 <y_lin_acc>:

float y_lin_acc(I2C_HandleTypeDef *hi2c){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	return y_lin_acc_raw(hi2c) / 100.0f;
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ffa7 	bl	800118c <y_lin_acc_raw>
 800123e:	4603      	mov	r3, r0
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001248:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001260 <y_lin_acc+0x30>
 800124c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001250:	eef0 7a66 	vmov.f32	s15, s13
}
 8001254:	eeb0 0a67 	vmov.f32	s0, s15
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	42c80000 	.word	0x42c80000

08001264 <z_lin_acc>:

float z_lin_acc(I2C_HandleTypeDef *hi2c){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	return z_lin_acc_raw(hi2c) / 100.0f;
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ffa9 	bl	80011c4 <z_lin_acc_raw>
 8001272:	4603      	mov	r3, r0
 8001274:	ee07 3a90 	vmov	s15, r3
 8001278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001294 <z_lin_acc+0x30>
 8001280:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001284:	eef0 7a66 	vmov.f32	s15, s13
}
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	42c80000 	.word	0x42c80000

08001298 <initPulseSensor>:
static bool first_beat = true;		// first beat bool
static bool second_beat = false; 	// second beat bool
static bool pulse = false; 		// pulse recognized bool
static int samples_since_last_beat = 0;

void initPulseSensor(ADC_HandleTypeDef *hadc_in) {
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	hadc = hadc_in;
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <initPulseSensor+0x1c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	2000021c 	.word	0x2000021c

080012b8 <updatePulseSensor>:

void updatePulseSensor(void){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	read_ADC();
 80012bc:	f000 f804 	bl	80012c8 <read_ADC>
	get_pulse();
 80012c0:	f000 f834 	bl	800132c <get_pulse>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <read_ADC>:

void read_ADC(void) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
	//uint32_t val;
	unsigned int val;

	HAL_ADC_Start(hadc);
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <read_ADC+0x54>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 fa9e 	bl	8003814 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 0xFFFFFFFF);
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <read_ADC+0x54>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 fafa 	bl	80038da <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(hadc);
 80012e6:	4b0d      	ldr	r3, [pc, #52]	; (800131c <read_ADC+0x54>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fb84 	bl	80039f8 <HAL_ADC_GetValue>
 80012f0:	6078      	str	r0, [r7, #4]
	signal = val * 3.3f / 4096.0f;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	ee07 3a90 	vmov	s15, r3
 80012f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012fc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001320 <read_ADC+0x58>
 8001300:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001304:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001324 <read_ADC+0x5c>
 8001308:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <read_ADC+0x60>)
 800130e:	edc3 7a00 	vstr	s15, [r3]
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000021c 	.word	0x2000021c
 8001320:	40533333 	.word	0x40533333
 8001324:	45800000 	.word	0x45800000
 8001328:	2000024c 	.word	0x2000024c

0800132c <get_pulse>:

void get_pulse() {
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
	++samples_since_last_beat;
 8001332:	4b95      	ldr	r3, [pc, #596]	; (8001588 <get_pulse+0x25c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a93      	ldr	r2, [pc, #588]	; (8001588 <get_pulse+0x25c>)
 800133a:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_beat * SAMPLE_PERIOD;
 800133c:	4b92      	ldr	r3, [pc, #584]	; (8001588 <get_pulse+0x25c>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	603b      	str	r3, [r7, #0]
	if (signal < thresh && N > (IBI / 5) * 3) { // avoid dicrotic noise by waiting 3/5 of last IBI
 8001348:	4b90      	ldr	r3, [pc, #576]	; (800158c <get_pulse+0x260>)
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	4b90      	ldr	r3, [pc, #576]	; (8001590 <get_pulse+0x264>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	d51c      	bpl.n	8001398 <get_pulse+0x6c>
 800135e:	4b8d      	ldr	r3, [pc, #564]	; (8001594 <get_pulse+0x268>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a8d      	ldr	r2, [pc, #564]	; (8001598 <get_pulse+0x26c>)
 8001364:	fb82 1203 	smull	r1, r2, r2, r3
 8001368:	1052      	asrs	r2, r2, #1
 800136a:	17db      	asrs	r3, r3, #31
 800136c:	1ad2      	subs	r2, r2, r3
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	dd0e      	ble.n	8001398 <get_pulse+0x6c>
	    if (signal < trough_amp) {                        // T is the trough
 800137a:	4b84      	ldr	r3, [pc, #528]	; (800158c <get_pulse+0x260>)
 800137c:	ed93 7a00 	vldr	s14, [r3]
 8001380:	4b86      	ldr	r3, [pc, #536]	; (800159c <get_pulse+0x270>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	d503      	bpl.n	8001398 <get_pulse+0x6c>
	      trough_amp = signal;                            // keep track of lowest point in pulse wave
 8001390:	4b7e      	ldr	r3, [pc, #504]	; (800158c <get_pulse+0x260>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a81      	ldr	r2, [pc, #516]	; (800159c <get_pulse+0x270>)
 8001396:	6013      	str	r3, [r2, #0]
	    }
	  }

	  if (signal > thresh && signal > peak_amp) {       // thresh condition helps avoid noise
 8001398:	4b7c      	ldr	r3, [pc, #496]	; (800158c <get_pulse+0x260>)
 800139a:	ed93 7a00 	vldr	s14, [r3]
 800139e:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <get_pulse+0x264>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dd0e      	ble.n	80013cc <get_pulse+0xa0>
 80013ae:	4b77      	ldr	r3, [pc, #476]	; (800158c <get_pulse+0x260>)
 80013b0:	ed93 7a00 	vldr	s14, [r3]
 80013b4:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <get_pulse+0x274>)
 80013b6:	edd3 7a00 	vldr	s15, [r3]
 80013ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	dd03      	ble.n	80013cc <get_pulse+0xa0>
		  peak_amp = signal;                              // P is the peak
 80013c4:	4b71      	ldr	r3, [pc, #452]	; (800158c <get_pulse+0x260>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a75      	ldr	r2, [pc, #468]	; (80015a0 <get_pulse+0x274>)
 80013ca:	6013      	str	r3, [r2, #0]
	  }                                          // keep track of highest point in pulse wave

	  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	  // signal surges up in value every time there is a pulse
	  if (N > 250) {                             // avoid high frequency noise
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2bfa      	cmp	r3, #250	; 0xfa
 80013d0:	dd7c      	ble.n	80014cc <get_pulse+0x1a0>
	    if ( (signal > thresh) && (pulse == false) && (N > ((IBI / 5) * 3)) ) {
 80013d2:	4b6e      	ldr	r3, [pc, #440]	; (800158c <get_pulse+0x260>)
 80013d4:	ed93 7a00 	vldr	s14, [r3]
 80013d8:	4b6d      	ldr	r3, [pc, #436]	; (8001590 <get_pulse+0x264>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	dd71      	ble.n	80014cc <get_pulse+0x1a0>
 80013e8:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <get_pulse+0x278>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	f083 0301 	eor.w	r3, r3, #1
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d06a      	beq.n	80014cc <get_pulse+0x1a0>
 80013f6:	4b67      	ldr	r3, [pc, #412]	; (8001594 <get_pulse+0x268>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a67      	ldr	r2, [pc, #412]	; (8001598 <get_pulse+0x26c>)
 80013fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001400:	1052      	asrs	r2, r2, #1
 8001402:	17db      	asrs	r3, r3, #31
 8001404:	1ad2      	subs	r2, r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	dd5c      	ble.n	80014cc <get_pulse+0x1a0>
	      pulse = true;                             // set the Pulse flag when we think there is a pulse
 8001412:	4b64      	ldr	r3, [pc, #400]	; (80015a4 <get_pulse+0x278>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
	      IBI = N;    // measure time between beats in mS
 8001418:	4a5e      	ldr	r2, [pc, #376]	; (8001594 <get_pulse+0x268>)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	6013      	str	r3, [r2, #0]
	      samples_since_last_beat = 0;
 800141e:	4b5a      	ldr	r3, [pc, #360]	; (8001588 <get_pulse+0x25c>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

	      if (second_beat) {                      // if this is the second beat, if secondBeat == TRUE
 8001424:	4b60      	ldr	r3, [pc, #384]	; (80015a8 <get_pulse+0x27c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d011      	beq.n	8001450 <get_pulse+0x124>
	        second_beat = false;                    // clear secondBeat flag
 800142c:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <get_pulse+0x27c>)
 800142e:	2200      	movs	r2, #0
 8001430:	701a      	strb	r2, [r3, #0]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e008      	b.n	800144a <get_pulse+0x11e>
	          rate[i] = IBI;
 8001438:	4b56      	ldr	r3, [pc, #344]	; (8001594 <get_pulse+0x268>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	495b      	ldr	r1, [pc, #364]	; (80015ac <get_pulse+0x280>)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3301      	adds	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2b09      	cmp	r3, #9
 800144e:	ddf3      	ble.n	8001438 <get_pulse+0x10c>
	        }
	      }

	      if (first_beat) {                       // if it's the first time we found a beat, if firstBeat == TRUE
 8001450:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <get_pulse+0x284>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <get_pulse+0x13a>
	    	first_beat = 0;                       // clear firstBeat flag
 8001458:	4b55      	ldr	r3, [pc, #340]	; (80015b0 <get_pulse+0x284>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
	    	second_beat = 1;                      // set the second beat flag
 800145e:	4b52      	ldr	r3, [pc, #328]	; (80015a8 <get_pulse+0x27c>)
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
	        // IBI value is unreliable so discard it
	        return;
 8001464:	e08a      	b.n	800157c <get_pulse+0x250>
	      }


	      // keep a running total of the last 10 IBI values
	      int runningTotal = 0;                  // clear the runningTotal variable
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]

	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	e012      	b.n	8001496 <get_pulse+0x16a>
	        rate[i] = rate[i + 1];                // and drop the oldest IBI value
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	4a4d      	ldr	r2, [pc, #308]	; (80015ac <get_pulse+0x280>)
 8001476:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800147a:	494c      	ldr	r1, [pc, #304]	; (80015ac <get_pulse+0x280>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        runningTotal += rate[i];              // add up the 9 oldest IBI values
 8001482:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <get_pulse+0x280>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	4413      	add	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3301      	adds	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b08      	cmp	r3, #8
 800149a:	dde9      	ble.n	8001470 <get_pulse+0x144>
	      }

	      rate[BUF_LENGTH - 1] = IBI;                          // add the latest IBI to the rate array
 800149c:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <get_pulse+0x268>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a42      	ldr	r2, [pc, #264]	; (80015ac <get_pulse+0x280>)
 80014a2:	6253      	str	r3, [r2, #36]	; 0x24
	      runningTotal += rate[BUF_LENGTH - 1];                // add the latest IBI to runningTotal
 80014a4:	4b41      	ldr	r3, [pc, #260]	; (80015ac <get_pulse+0x280>)
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	4413      	add	r3, r2
 80014ac:	60bb      	str	r3, [r7, #8]
	      runningTotal /= BUF_LENGTH;                     // average the last 10 IBI values
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	4a39      	ldr	r2, [pc, #228]	; (8001598 <get_pulse+0x26c>)
 80014b2:	fb82 1203 	smull	r1, r2, r2, r3
 80014b6:	1092      	asrs	r2, r2, #2
 80014b8:	17db      	asrs	r3, r3, #31
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	60bb      	str	r3, [r7, #8]
	      BPM = 60000 / runningTotal;             // how many beats can fit into a minute? that's BPM!
 80014be:	f64e 2260 	movw	r2, #60000	; 0xea60
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	fb92 f3f3 	sdiv	r3, r2, r3
 80014c8:	4a3a      	ldr	r2, [pc, #232]	; (80015b4 <get_pulse+0x288>)
 80014ca:	6013      	str	r3, [r2, #0]
	      //fadeLevel = MAX_FADE_LEVEL;             // If we're fading, re-light that LED.
	    }
	  }

	  if (signal < thresh && pulse) {  // when the values are going down, the beat is over
 80014cc:	4b2f      	ldr	r3, [pc, #188]	; (800158c <get_pulse+0x260>)
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <get_pulse+0x264>)
 80014d4:	edd3 7a00 	vldr	s15, [r3]
 80014d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	d528      	bpl.n	8001534 <get_pulse+0x208>
 80014e2:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <get_pulse+0x278>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d024      	beq.n	8001534 <get_pulse+0x208>
	    pulse = false;                         // reset the Pulse flag so we can do it again
 80014ea:	4b2e      	ldr	r3, [pc, #184]	; (80015a4 <get_pulse+0x278>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
	    amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 80014f0:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <get_pulse+0x274>)
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	4b29      	ldr	r3, [pc, #164]	; (800159c <get_pulse+0x270>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <get_pulse+0x28c>)
 8001502:	edc3 7a00 	vstr	s15, [r3]
	    thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <get_pulse+0x28c>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001510:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <get_pulse+0x270>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <get_pulse+0x264>)
 8001520:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <get_pulse+0x264>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <get_pulse+0x274>)
 800152a:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <get_pulse+0x264>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a1a      	ldr	r2, [pc, #104]	; (800159c <get_pulse+0x270>)
 8001532:	6013      	str	r3, [r2, #0]
	  }

	  if (N > 2500) {                          // if 2.5 seconds go by without a beat
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800153a:	4293      	cmp	r3, r2
 800153c:	dd1e      	ble.n	800157c <get_pulse+0x250>
	    thresh = THRESH_DEFAULT;                // set thresh default
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <get_pulse+0x264>)
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <get_pulse+0x290>)
 8001542:	601a      	str	r2, [r3, #0]
	    peak_amp = THRESH_DEFAULT;                               // set P default
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <get_pulse+0x274>)
 8001546:	4a1d      	ldr	r2, [pc, #116]	; (80015bc <get_pulse+0x290>)
 8001548:	601a      	str	r2, [r3, #0]
	    trough_amp = THRESH_DEFAULT;                               // set T default
 800154a:	4b14      	ldr	r3, [pc, #80]	; (800159c <get_pulse+0x270>)
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <get_pulse+0x290>)
 800154e:	601a      	str	r2, [r3, #0]
	    samples_since_last_beat = 0;          // bring the lastBeatTime up to date
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <get_pulse+0x25c>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
	    first_beat = true;                      // set these to avoid noise
 8001556:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <get_pulse+0x284>)
 8001558:	2201      	movs	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
	    second_beat = false;                    // when we get the heartbeat back
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <get_pulse+0x27c>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
	    BPM = 0;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <get_pulse+0x288>)
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
	    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <get_pulse+0x268>)
 800156a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800156e:	601a      	str	r2, [r3, #0]
	    pulse = false;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <get_pulse+0x278>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
	    amp = 100;                  // beat amplitude 1/10 of input range.
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <get_pulse+0x28c>)
 8001578:	4a11      	ldr	r2, [pc, #68]	; (80015c0 <get_pulse+0x294>)
 800157a:	601a      	str	r2, [r3, #0]

	  }
}
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000254 	.word	0x20000254
 800158c:	2000024c 	.word	0x2000024c
 8001590:	20000008 	.word	0x20000008
 8001594:	20000000 	.word	0x20000000
 8001598:	66666667 	.word	0x66666667
 800159c:	20000010 	.word	0x20000010
 80015a0:	2000000c 	.word	0x2000000c
 80015a4:	20000251 	.word	0x20000251
 80015a8:	20000250 	.word	0x20000250
 80015ac:	20000224 	.word	0x20000224
 80015b0:	20000014 	.word	0x20000014
 80015b4:	20000220 	.word	0x20000220
 80015b8:	20000004 	.word	0x20000004
 80015bc:	3fcccccd 	.word	0x3fcccccd
 80015c0:	42c80000 	.word	0x42c80000

080015c4 <get_BPM>:

int get_BPM(void) {
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return BPM;
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <get_BPM+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000220 	.word	0x20000220

080015dc <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80015e6:	4603      	mov	r3, r0
 80015e8:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 80015ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80015ee:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001670 <GPS_nmea_to_dec+0x94>
 80015f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015fa:	ee17 3a90 	vmov	r3, s15
 80015fe:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	2264      	movs	r2, #100	; 0x64
 8001604:	fb02 f303 	mul.w	r3, r2, r3
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001610:	ed97 7a01 	vldr	s14, [r7, #4]
 8001614:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001618:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 800161c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001620:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001674 <GPS_nmea_to_dec+0x98>
 8001624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001628:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001636:	ed97 7a02 	vldr	s14, [r7, #8]
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800163e:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 8001642:	78fb      	ldrb	r3, [r7, #3]
 8001644:	2b53      	cmp	r3, #83	; 0x53
 8001646:	d002      	beq.n	800164e <GPS_nmea_to_dec+0x72>
 8001648:	78fb      	ldrb	r3, [r7, #3]
 800164a:	2b57      	cmp	r3, #87	; 0x57
 800164c:	d105      	bne.n	800165a <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800164e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001652:	eef1 7a67 	vneg.f32	s15, s15
 8001656:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	ee07 3a90 	vmov	s15, r3
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	371c      	adds	r7, #28
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	42c80000 	.word	0x42c80000
 8001674:	42700000 	.word	0x42700000

08001678 <updateGPS>:

updateGPS(){
 8001678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800167c:	b08e      	sub	sp, #56	; 0x38
 800167e:	af00      	add	r7, sp, #0
	// imu_ctr = 1;
	  int counter = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
	  int counter2 = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
	  while(1){
		  HAL_StatusTypeDef ret = HAL_UART_Receive(&huart1, a, 1, 5000);
 8001688:	f241 3388 	movw	r3, #5000	; 0x1388
 800168c:	2201      	movs	r2, #1
 800168e:	4980      	ldr	r1, [pc, #512]	; (8001890 <updateGPS+0x218>)
 8001690:	4880      	ldr	r0, [pc, #512]	; (8001894 <updateGPS+0x21c>)
 8001692:	f007 f83d 	bl	8008710 <HAL_UART_Receive>
 8001696:	4603      	mov	r3, r0
 8001698:	75fb      	strb	r3, [r7, #23]
		  if (ret == HAL_TIMEOUT) {
 800169a:	7dfb      	ldrb	r3, [r7, #23]
 800169c:	2b03      	cmp	r3, #3
 800169e:	f000 81b6 	beq.w	8001a0e <updateGPS+0x396>
			  break;
		  }
		  if(a[0] == '$'){
 80016a2:	4b7b      	ldr	r3, [pc, #492]	; (8001890 <updateGPS+0x218>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b24      	cmp	r3, #36	; 0x24
 80016a8:	f040 810d 	bne.w	80018c6 <updateGPS+0x24e>
			  gps_buf[gps_idx++] = a[0];
 80016ac:	4b7a      	ldr	r3, [pc, #488]	; (8001898 <updateGPS+0x220>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	b2d1      	uxtb	r1, r2
 80016b4:	4a78      	ldr	r2, [pc, #480]	; (8001898 <updateGPS+0x220>)
 80016b6:	7011      	strb	r1, [r2, #0]
 80016b8:	461a      	mov	r2, r3
 80016ba:	4b75      	ldr	r3, [pc, #468]	; (8001890 <updateGPS+0x218>)
 80016bc:	7819      	ldrb	r1, [r3, #0]
 80016be:	4b77      	ldr	r3, [pc, #476]	; (800189c <updateGPS+0x224>)
 80016c0:	5499      	strb	r1, [r3, r2]
			  //printf("%c", a[0]);
			  while (a[0] != 10){
 80016c2:	e011      	b.n	80016e8 <updateGPS+0x70>
				  HAL_UART_Receive(&huart1, a, 1, 5000);
 80016c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80016c8:	2201      	movs	r2, #1
 80016ca:	4971      	ldr	r1, [pc, #452]	; (8001890 <updateGPS+0x218>)
 80016cc:	4871      	ldr	r0, [pc, #452]	; (8001894 <updateGPS+0x21c>)
 80016ce:	f007 f81f 	bl	8008710 <HAL_UART_Receive>
				  gps_buf[gps_idx++] = a[0];
 80016d2:	4b71      	ldr	r3, [pc, #452]	; (8001898 <updateGPS+0x220>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	b2d1      	uxtb	r1, r2
 80016da:	4a6f      	ldr	r2, [pc, #444]	; (8001898 <updateGPS+0x220>)
 80016dc:	7011      	strb	r1, [r2, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4b6b      	ldr	r3, [pc, #428]	; (8001890 <updateGPS+0x218>)
 80016e2:	7819      	ldrb	r1, [r3, #0]
 80016e4:	4b6d      	ldr	r3, [pc, #436]	; (800189c <updateGPS+0x224>)
 80016e6:	5499      	strb	r1, [r3, r2]
			  while (a[0] != 10){
 80016e8:	4b69      	ldr	r3, [pc, #420]	; (8001890 <updateGPS+0x218>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b0a      	cmp	r3, #10
 80016ee:	d1e9      	bne.n	80016c4 <updateGPS+0x4c>
				  //printf("%c", a[0]);
			  }
			  for (int i = 0; i < 7; ++i){
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	e00b      	b.n	800170e <updateGPS+0x96>
				  temp[i] = gps_buf[i];
 80016f6:	4a69      	ldr	r2, [pc, #420]	; (800189c <updateGPS+0x224>)
 80016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fa:	4413      	add	r3, r2
 80016fc:	7819      	ldrb	r1, [r3, #0]
 80016fe:	4a68      	ldr	r2, [pc, #416]	; (80018a0 <updateGPS+0x228>)
 8001700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001702:	4413      	add	r3, r2
 8001704:	460a      	mov	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; ++i){
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	3301      	adds	r3, #1
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	2b06      	cmp	r3, #6
 8001712:	ddf0      	ble.n	80016f6 <updateGPS+0x7e>
			  }
			  temp[6] = '\0';
 8001714:	4b62      	ldr	r3, [pc, #392]	; (80018a0 <updateGPS+0x228>)
 8001716:	2200      	movs	r2, #0
 8001718:	719a      	strb	r2, [r3, #6]
			  for (int i = 0; i < 128; ++i){
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
 800171e:	e009      	b.n	8001734 <updateGPS+0xbc>
				  printf("%c", gps_buf[i]);////////
 8001720:	4a5e      	ldr	r2, [pc, #376]	; (800189c <updateGPS+0x224>)
 8001722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001724:	4413      	add	r3, r2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f009 fabf 	bl	800acac <putchar>
			  for (int i = 0; i < 128; ++i){
 800172e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001730:	3301      	adds	r3, #1
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	2b7f      	cmp	r3, #127	; 0x7f
 8001738:	ddf2      	ble.n	8001720 <updateGPS+0xa8>
			  }


			  //printf("done\n");
			  counter++;
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	3301      	adds	r3, #1
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
			  gps_idx = 0;
 8001740:	4b55      	ldr	r3, [pc, #340]	; (8001898 <updateGPS+0x220>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]


			  if (!strncmp((char*)temp, "$GPGGA", 6)){
 8001746:	2206      	movs	r2, #6
 8001748:	4956      	ldr	r1, [pc, #344]	; (80018a4 <updateGPS+0x22c>)
 800174a:	4855      	ldr	r0, [pc, #340]	; (80018a0 <updateGPS+0x228>)
 800174c:	f009 fb21 	bl	800ad92 <strncmp>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	f040 8081 	bne.w	800185a <updateGPS+0x1e2>
				  char lat[9];
				  char lat_ns;
				  char lon[9];
				  char lon_ew;

				  for (int i = 18; i < 27; i++){
 8001758:	2312      	movs	r3, #18
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
 800175c:	e00c      	b.n	8001778 <updateGPS+0x100>
					  lat[i-18] = gps_buf[i];
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	3b12      	subs	r3, #18
 8001762:	494e      	ldr	r1, [pc, #312]	; (800189c <updateGPS+0x224>)
 8001764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001766:	440a      	add	r2, r1
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	3338      	adds	r3, #56	; 0x38
 800176c:	443b      	add	r3, r7
 800176e:	f803 2c2c 	strb.w	r2, [r3, #-44]
				  for (int i = 18; i < 27; i++){
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	3301      	adds	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	2b1a      	cmp	r3, #26
 800177c:	ddef      	ble.n	800175e <updateGPS+0xe6>

				  }
				  lat_ns = gps_buf[28];
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <updateGPS+0x224>)
 8001780:	7f1b      	ldrb	r3, [r3, #28]
 8001782:	75bb      	strb	r3, [r7, #22]
				  for (int i = 30; i < 40; i++){
 8001784:	231e      	movs	r3, #30
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	e00c      	b.n	80017a4 <updateGPS+0x12c>
					  lon[i-30] = gps_buf[i];
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	3b1e      	subs	r3, #30
 800178e:	4943      	ldr	r1, [pc, #268]	; (800189c <updateGPS+0x224>)
 8001790:	6a3a      	ldr	r2, [r7, #32]
 8001792:	440a      	add	r2, r1
 8001794:	7812      	ldrb	r2, [r2, #0]
 8001796:	3338      	adds	r3, #56	; 0x38
 8001798:	443b      	add	r3, r7
 800179a:	f803 2c38 	strb.w	r2, [r3, #-56]
				  for (int i = 30; i < 40; i++){
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	3301      	adds	r3, #1
 80017a2:	623b      	str	r3, [r7, #32]
 80017a4:	6a3b      	ldr	r3, [r7, #32]
 80017a6:	2b27      	cmp	r3, #39	; 0x27
 80017a8:	ddef      	ble.n	800178a <updateGPS+0x112>
				  }
				  lon_ew = gps_buf[41];
 80017aa:	4b3c      	ldr	r3, [pc, #240]	; (800189c <updateGPS+0x224>)
 80017ac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80017b0:	757b      	strb	r3, [r7, #21]
				  for (int i = 0; i < 128; ++i){
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
 80017b6:	e007      	b.n	80017c8 <updateGPS+0x150>
					  gps_buf[i] = 0;
 80017b8:	4a38      	ldr	r2, [pc, #224]	; (800189c <updateGPS+0x224>)
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	4413      	add	r3, r2
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 128; ++i){
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b7f      	cmp	r3, #127	; 0x7f
 80017cc:	ddf4      	ble.n	80017b8 <updateGPS+0x140>
				  }
				  GPS2.dec_latitude = GPS_nmea_to_dec(strtof(lat, NULL), lat_ns)*(PI/180);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2100      	movs	r1, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f008 fab9 	bl	8009d4c <strtof>
 80017da:	ee07 0a90 	vmov	s15, r0
 80017de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e2:	7dbb      	ldrb	r3, [r7, #22]
 80017e4:	4618      	mov	r0, r3
 80017e6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ea:	f7ff fef7 	bl	80015dc <GPS_nmea_to_dec>
 80017ee:	ee10 3a10 	vmov	r3, s0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fea8 	bl	8000548 <__aeabi_f2d>
 80017f8:	a323      	add	r3, pc, #140	; (adr r3, 8001888 <updateGPS+0x210>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	f7fe fefb 	bl	80005f8 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f9ed 	bl	8000be8 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	4a25      	ldr	r2, [pc, #148]	; (80018a8 <updateGPS+0x230>)
 8001812:	6053      	str	r3, [r2, #4]
				  GPS2.dec_longitude = GPS_nmea_to_dec(strtof(lon, NULL), lon_ew)*(PI/180);
 8001814:	463b      	mov	r3, r7
 8001816:	2100      	movs	r1, #0
 8001818:	4618      	mov	r0, r3
 800181a:	f008 fa97 	bl	8009d4c <strtof>
 800181e:	ee07 0a90 	vmov	s15, r0
 8001822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001826:	7d7b      	ldrb	r3, [r7, #21]
 8001828:	4618      	mov	r0, r3
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	f7ff fed5 	bl	80015dc <GPS_nmea_to_dec>
 8001832:	ee10 3a10 	vmov	r3, s0
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fe86 	bl	8000548 <__aeabi_f2d>
 800183c:	a312      	add	r3, pc, #72	; (adr r3, 8001888 <updateGPS+0x210>)
 800183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001842:	f7fe fed9 	bl	80005f8 <__aeabi_dmul>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f7ff f9cb 	bl	8000be8 <__aeabi_d2f>
 8001852:	4603      	mov	r3, r0
 8001854:	4a14      	ldr	r2, [pc, #80]	; (80018a8 <updateGPS+0x230>)
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	e011      	b.n	800187e <updateGPS+0x206>

			  }
			  else if (!strncmp((char*)temp, "$GPRMC", 6)){
 800185a:	2206      	movs	r2, #6
 800185c:	4913      	ldr	r1, [pc, #76]	; (80018ac <updateGPS+0x234>)
 800185e:	4810      	ldr	r0, [pc, #64]	; (80018a0 <updateGPS+0x228>)
 8001860:	f009 fa97 	bl	800ad92 <strncmp>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <updateGPS+0x206>
				//sscanf((char*)gps_buf, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS2.utc_time, &GPS2.nmea_latitude, &GPS2.ns, &GPS2.nmea_longitude, &GPS2.ew, &GPS2.speed_k, &GPS2.course_d, &GPS2.date);
				  GPS2.speed_k++;
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <updateGPS+0x230>)
 800186c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001870:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <updateGPS+0x230>)
 800187a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			  }
			  for (int i = 0; i < 128; ++i){
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	e01d      	b.n	80018c0 <updateGPS+0x248>
 8001884:	f3af 8000 	nop.w
 8001888:	a2529d39 	.word	0xa2529d39
 800188c:	3f91df46 	.word	0x3f91df46
 8001890:	20000258 	.word	0x20000258
 8001894:	200004b0 	.word	0x200004b0
 8001898:	200002e4 	.word	0x200002e4
 800189c:	20000264 	.word	0x20000264
 80018a0:	20000360 	.word	0x20000360
 80018a4:	0800ed68 	.word	0x0800ed68
 80018a8:	200002e8 	.word	0x200002e8
 80018ac:	0800ed98 	.word	0x0800ed98
				  gps_buf[i] = 0;
 80018b0:	4a5d      	ldr	r2, [pc, #372]	; (8001a28 <updateGPS+0x3b0>)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	4413      	add	r3, r2
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 128; ++i){
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	3301      	adds	r3, #1
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b7f      	cmp	r3, #127	; 0x7f
 80018c4:	ddf4      	ble.n	80018b0 <updateGPS+0x238>
			  }
		  }

		  if(counter == 6){
 80018c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c8:	2b06      	cmp	r3, #6
 80018ca:	f47f aedd 	bne.w	8001688 <updateGPS+0x10>
//				  printf("long: %f, longdec: %f\n\r", GPS2.nmea_latitude, GPS2.dec_longitude);
//				  printf("lat: %f, latdec: %f\n\r", GPS2.nmea_longitude, GPS2.dec_latitude);
//				  printf("speed: %f\n\r", GPS2.speed_k);
//				  printf("date: %f\n\r", GPS2.utc_time);

			  if(counter2 == 1){
 80018ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	f040 8096 	bne.w	8001a02 <updateGPS+0x38a>
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 80018d6:	4b55      	ldr	r3, [pc, #340]	; (8001a2c <updateGPS+0x3b4>)
 80018d8:	ed93 7a00 	vldr	s14, [r3]
 80018dc:	4b53      	ldr	r3, [pc, #332]	; (8001a2c <updateGPS+0x3b4>)
 80018de:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e6:	ee17 0a90 	vmov	r0, s15
 80018ea:	f7fe fe2d 	bl	8000548 <__aeabi_f2d>
 80018ee:	4604      	mov	r4, r0
 80018f0:	460d      	mov	r5, r1
						  (cos(((double)GPS2.dec_longitude+(double)GPS2.dec_longitude_prev)/2));
 80018f2:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <updateGPS+0x3b4>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe26 	bl	8000548 <__aeabi_f2d>
 80018fc:	4680      	mov	r8, r0
 80018fe:	4689      	mov	r9, r1
 8001900:	4b4a      	ldr	r3, [pc, #296]	; (8001a2c <updateGPS+0x3b4>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe1f 	bl	8000548 <__aeabi_f2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4640      	mov	r0, r8
 8001910:	4649      	mov	r1, r9
 8001912:	f7fe fcbb 	bl	800028c <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001926:	f7fe ff91 	bl	800084c <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	ec43 2b17 	vmov	d7, r2, r3
 8001932:	eeb0 0a47 	vmov.f32	s0, s14
 8001936:	eef0 0a67 	vmov.f32	s1, s15
 800193a:	f00c f8b1 	bl	800daa0 <cos>
 800193e:	ec53 2b10 	vmov	r2, r3, d0
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe fe57 	bl	80005f8 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4938      	ldr	r1, [pc, #224]	; (8001a30 <updateGPS+0x3b8>)
 8001950:	e9c1 2300 	strd	r2, r3, [r1]
				  y_cord = (double)(GPS2.dec_latitude - GPS2.dec_latitude_prev);
 8001954:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <updateGPS+0x3b4>)
 8001956:	ed93 7a01 	vldr	s14, [r3, #4]
 800195a:	4b34      	ldr	r3, [pc, #208]	; (8001a2c <updateGPS+0x3b4>)
 800195c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001964:	ee17 0a90 	vmov	r0, s15
 8001968:	f7fe fdee 	bl	8000548 <__aeabi_f2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4930      	ldr	r1, [pc, #192]	; (8001a34 <updateGPS+0x3bc>)
 8001972:	e9c1 2300 	strd	r2, r3, [r1]
				  p2p_dist = sqrt(x_cord*x_cord + y_cord*y_cord)*6371000;
 8001976:	4b2e      	ldr	r3, [pc, #184]	; (8001a30 <updateGPS+0x3b8>)
 8001978:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <updateGPS+0x3b8>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fe39 	bl	80005f8 <__aeabi_dmul>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4614      	mov	r4, r2
 800198c:	461d      	mov	r5, r3
 800198e:	4b29      	ldr	r3, [pc, #164]	; (8001a34 <updateGPS+0x3bc>)
 8001990:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <updateGPS+0x3bc>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe fe2d 	bl	80005f8 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4620      	mov	r0, r4
 80019a4:	4629      	mov	r1, r5
 80019a6:	f7fe fc71 	bl	800028c <__adddf3>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	ec43 2b17 	vmov	d7, r2, r3
 80019b2:	eeb0 0a47 	vmov.f32	s0, s14
 80019b6:	eef0 0a67 	vmov.f32	s1, s15
 80019ba:	f00c f845 	bl	800da48 <sqrt>
 80019be:	ec51 0b10 	vmov	r0, r1, d0
 80019c2:	a317      	add	r3, pc, #92	; (adr r3, 8001a20 <updateGPS+0x3a8>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	f7fe fe16 	bl	80005f8 <__aeabi_dmul>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4919      	ldr	r1, [pc, #100]	; (8001a38 <updateGPS+0x3c0>)
 80019d2:	e9c1 2300 	strd	r2, r3, [r1]
				  velocity = p2p_dist/5;// m/s, timer is set for 5 sec
 80019d6:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <updateGPS+0x3c0>)
 80019d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <updateGPS+0x3c4>)
 80019e2:	f7fe ff33 	bl	800084c <__aeabi_ddiv>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4915      	ldr	r1, [pc, #84]	; (8001a40 <updateGPS+0x3c8>)
 80019ec:	e9c1 2300 	strd	r2, r3, [r1]
				  //printf("p2p: %f\nmeter/sec: %f\n\r", p2p_dist,velocity);
				  //printf("Minute Per Mile: %f\n\r", .08333/(p2p_dist/1609.3));
				  GPS2.dec_latitude_prev = GPS2.dec_latitude;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <updateGPS+0x3b4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	; (8001a2c <updateGPS+0x3b4>)
 80019f6:	60d3      	str	r3, [r2, #12]
				  GPS2.dec_longitude_prev = GPS2.dec_longitude;
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <updateGPS+0x3b4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <updateGPS+0x3b4>)
 80019fe:	6093      	str	r3, [r2, #8]


				  break;
 8001a00:	e006      	b.n	8001a10 <updateGPS+0x398>
			  }
			  counter2++;
 8001a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a04:	3301      	adds	r3, #1
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
			  counter = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
	  while(1){
 8001a0c:	e63c      	b.n	8001688 <updateGPS+0x10>
			  break;
 8001a0e:	bf00      	nop


		  }
	  }
}
 8001a10:	bf00      	nop
 8001a12:	3738      	adds	r7, #56	; 0x38
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a1a:	bf00      	nop
 8001a1c:	f3af 8000 	nop.w
 8001a20:	00000000 	.word	0x00000000
 8001a24:	41584dae 	.word	0x41584dae
 8001a28:	20000264 	.word	0x20000264
 8001a2c:	200002e8 	.word	0x200002e8
 8001a30:	20000350 	.word	0x20000350
 8001a34:	20000358 	.word	0x20000358
 8001a38:	20000348 	.word	0x20000348
 8001a3c:	40140000 	.word	0x40140000
 8001a40:	20000368 	.word	0x20000368

08001a44 <get_distance>:

double get_distance(){
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	return p2p_dist;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <get_distance+0x20>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a52:	eeb0 0a47 	vmov.f32	s0, s14
 8001a56:	eef0 0a67 	vmov.f32	s1, s15
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000348 	.word	0x20000348

08001a68 <get_velocity>:

double get_velocity(){
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	return velocity;
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <get_velocity+0x20>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a76:	eeb0 0a47 	vmov.f32	s0, s14
 8001a7a:	eef0 0a67 	vmov.f32	s1, s15
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000368 	.word	0x20000368

08001a8c <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001a9c:	78fb      	ldrb	r3, [r7, #3]
 8001a9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6858      	ldr	r0, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	8adb      	ldrh	r3, [r3, #22]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f002 fe93 	bl	80047dc <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	1cf9      	adds	r1, r7, #3
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f004 fe9e 	bl	8006802 <HAL_SPI_Transmit>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6818      	ldr	r0, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f107 010f 	add.w	r1, r7, #15
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f005 f808 	bl	8006aec <HAL_SPI_Receive>
 8001adc:	4603      	mov	r3, r0
 8001ade:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6858      	ldr	r0, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	8adb      	ldrh	r3, [r3, #22]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4619      	mov	r1, r3
 8001aec:	f002 fe76 	bl	80047dc <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	460b      	mov	r3, r1
 8001b04:	70fb      	strb	r3, [r7, #3]
 8001b06:	4613      	mov	r3, r2
 8001b08:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b10:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001b12:	78bb      	ldrb	r3, [r7, #2]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21a      	sxth	r2, r3
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	b21b      	sxth	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b21b      	sxth	r3, r3
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6858      	ldr	r0, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	8adb      	ldrh	r3, [r3, #22]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f002 fe54 	bl	80047dc <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6818      	ldr	r0, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f107 010a 	add.w	r1, r7, #10
 8001b40:	2202      	movs	r2, #2
 8001b42:	f004 fe5e 	bl	8006802 <HAL_SPI_Transmit>
 8001b46:	4603      	mov	r3, r0
 8001b48:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6858      	ldr	r0, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	8adb      	ldrh	r3, [r3, #22]
 8001b52:	2201      	movs	r2, #1
 8001b54:	4619      	mov	r1, r3
 8001b56:	f002 fe41 	bl	80047dc <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001b6e:	78fb      	ldrb	r3, [r7, #3]
 8001b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	461a      	mov	r2, r3
 8001b78:	2101      	movs	r1, #1
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffbd 	bl	8001afa <write_register>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	2b2c      	cmp	r3, #44	; 0x2c
 8001b98:	d801      	bhi.n	8001b9e <set_OCP+0x16>
    imax = 45;
 8001b9a:	232d      	movs	r3, #45	; 0x2d
 8001b9c:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	2bf0      	cmp	r3, #240	; 0xf0
 8001ba2:	d901      	bls.n	8001ba8 <set_OCP+0x20>
    imax = 240;
 8001ba4:	23f0      	movs	r3, #240	; 0xf0
 8001ba6:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	2b81      	cmp	r3, #129	; 0x81
 8001bac:	d809      	bhi.n	8001bc2 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	3b2d      	subs	r3, #45	; 0x2d
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	; (8001bf0 <set_OCP+0x68>)
 8001bb4:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb8:	1052      	asrs	r2, r2, #1
 8001bba:	17db      	asrs	r3, r3, #31
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	73fb      	strb	r3, [r7, #15]
 8001bc0:	e008      	b.n	8001bd4 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001bc2:	78fb      	ldrb	r3, [r7, #3]
 8001bc4:	331e      	adds	r3, #30
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <set_OCP+0x68>)
 8001bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001bcc:	1092      	asrs	r2, r2, #2
 8001bce:	17db      	asrs	r3, r3, #31
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	f043 0320 	orr.w	r3, r3, #32
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	210b      	movs	r1, #11
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff8a 	bl	8001afa <write_register>
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	66666667 	.word	0x66666667

08001bf4 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001bf4:	b5b0      	push	{r4, r5, r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001bfc:	211d      	movs	r1, #29
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff44 	bl	8001a8c <read_register>
 8001c04:	4603      	mov	r3, r0
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	461c      	mov	r4, r3
 8001c10:	4615      	mov	r5, r2
 8001c12:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001c16:	211e      	movs	r1, #30
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff37 	bl	8001a8c <read_register>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001c24:	2304      	movs	r3, #4
 8001c26:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b0a      	cmp	r3, #10
 8001c2c:	d908      	bls.n	8001c40 <set_low_data_rate_optimization+0x4c>
 8001c2e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001c32:	1fd1      	subs	r1, r2, #7
 8001c34:	430b      	orrs	r3, r1
 8001c36:	d103      	bne.n	8001c40 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001c38:	7ffb      	ldrb	r3, [r7, #31]
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001c40:	7ffb      	ldrb	r3, [r7, #31]
 8001c42:	461a      	mov	r2, r3
 8001c44:	2126      	movs	r1, #38	; 0x26
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ff57 	bl	8001afa <write_register>
}
 8001c4c:	bf00      	nop
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bdb0      	pop	{r4, r5, r7, pc}

08001c54 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ff7f 	bl	8001b62 <set_mode>
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001c74:	2101      	movs	r1, #1
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff ff73 	bl	8001b62 <set_mode>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001c8c:	211d      	movs	r1, #29
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fefc 	bl	8001a8c <read_register>
 8001c94:	4603      	mov	r3, r0
 8001c96:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	f023 0301 	bic.w	r3, r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	211d      	movs	r1, #29
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ff27 	bl	8001afa <write_register>
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10e      	bne.n	8001ce6 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	d901      	bls.n	8001cd2 <lora_set_tx_power+0x1e>
      level = 15;
 8001cce:	230f      	movs	r3, #15
 8001cd0:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2109      	movs	r1, #9
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ff0b 	bl	8001afa <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001ce4:	e02e      	b.n	8001d44 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	2b14      	cmp	r3, #20
 8001cea:	d901      	bls.n	8001cf0 <lora_set_tx_power+0x3c>
      level = 20;
 8001cec:	2314      	movs	r3, #20
 8001cee:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d801      	bhi.n	8001cfa <lora_set_tx_power+0x46>
      level = 2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001cfa:	78fb      	ldrb	r3, [r7, #3]
 8001cfc:	2b11      	cmp	r3, #17
 8001cfe:	d90c      	bls.n	8001d1a <lora_set_tx_power+0x66>
      level -= 3;
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	3b03      	subs	r3, #3
 8001d04:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001d06:	2287      	movs	r2, #135	; 0x87
 8001d08:	214d      	movs	r1, #77	; 0x4d
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fef5 	bl	8001afa <write_register>
      set_OCP(lora, 140);
 8001d10:	218c      	movs	r1, #140	; 0x8c
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff38 	bl	8001b88 <set_OCP>
 8001d18:	e008      	b.n	8001d2c <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8001d1a:	2284      	movs	r2, #132	; 0x84
 8001d1c:	214d      	movs	r1, #77	; 0x4d
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f7ff feeb 	bl	8001afa <write_register>
      set_OCP(lora, 97);
 8001d24:	2161      	movs	r1, #97	; 0x61
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff ff2e 	bl	8001b88 <set_OCP>
    level -= 2;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	3b02      	subs	r3, #2
 8001d30:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2109      	movs	r1, #9
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fedb 	bl	8001afa <write_register>
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8001d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d5c:	f04f 0000 	mov.w	r0, #0
 8001d60:	f04f 0100 	mov.w	r1, #0
 8001d64:	04d9      	lsls	r1, r3, #19
 8001d66:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001d6a:	04d0      	lsls	r0, r2, #19
 8001d6c:	4a19      	ldr	r2, [pc, #100]	; (8001dd4 <lora_set_frequency+0x88>)
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	f7fe ff89 	bl	8000c88 <__aeabi_uldivmod>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001d7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	0c02      	lsrs	r2, r0, #16
 8001d8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d90:	0c0b      	lsrs	r3, r1, #16
 8001d92:	b2d3      	uxtb	r3, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	2106      	movs	r1, #6
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f7ff feae 	bl	8001afa <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001d9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	0a02      	lsrs	r2, r0, #8
 8001dac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001db0:	0a0b      	lsrs	r3, r1, #8
 8001db2:	b2d3      	uxtb	r3, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	2107      	movs	r1, #7
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f7ff fe9e 	bl	8001afa <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001dbe:	7c3b      	ldrb	r3, [r7, #16]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2108      	movs	r1, #8
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f7ff fe98 	bl	8001afa <write_register>
}
 8001dca:	bf00      	nop
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	01e84800 	.word	0x01e84800

08001dd8 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	2b05      	cmp	r3, #5
 8001de8:	d802      	bhi.n	8001df0 <lora_set_spreading_factor+0x18>
    sf = 6;
 8001dea:	2306      	movs	r3, #6
 8001dec:	70fb      	strb	r3, [r7, #3]
 8001dee:	e004      	b.n	8001dfa <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d901      	bls.n	8001dfa <lora_set_spreading_factor+0x22>
    sf = 12;
 8001df6:	230c      	movs	r3, #12
 8001df8:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8001dfa:	78fb      	ldrb	r3, [r7, #3]
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d10a      	bne.n	8001e16 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001e00:	22c5      	movs	r2, #197	; 0xc5
 8001e02:	2131      	movs	r1, #49	; 0x31
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fe78 	bl	8001afa <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	2137      	movs	r1, #55	; 0x37
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fe73 	bl	8001afa <write_register>
 8001e14:	e009      	b.n	8001e2a <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001e16:	22c3      	movs	r2, #195	; 0xc3
 8001e18:	2131      	movs	r1, #49	; 0x31
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff fe6d 	bl	8001afa <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001e20:	220a      	movs	r2, #10
 8001e22:	2137      	movs	r1, #55	; 0x37
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff fe68 	bl	8001afa <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8001e2a:	211e      	movs	r1, #30
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fe2d 	bl	8001a8c <read_register>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8001e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	b25a      	sxtb	r2, r3
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	b25b      	sxtb	r3, r3
 8001e46:	4313      	orrs	r3, r2
 8001e48:	b25b      	sxtb	r3, r3
 8001e4a:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	211e      	movs	r1, #30
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fe51 	bl	8001afa <write_register>

  set_low_data_rate_optimization(lora);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fecb 	bl	8001bf4 <set_low_data_rate_optimization>
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2120      	movs	r1, #32
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fe3b 	bl	8001afa <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8001e84:	887b      	ldrh	r3, [r7, #2]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2121      	movs	r1, #33	; 0x21
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff fe31 	bl	8001afa <write_register>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8001ea8:	2142      	movs	r1, #66	; 0x42
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fdee 	bl	8001a8c <read_register>
 8001eb0:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	887a      	ldrh	r2, [r7, #2]
 8001ed8:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001eda:	6a3a      	ldr	r2, [r7, #32]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ef8:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f7ff ffd0 	bl	8001ea0 <lora_version>
 8001f00:	4603      	mov	r3, r0
 8001f02:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8001f04:	7dfb      	ldrb	r3, [r7, #23]
 8001f06:	2b12      	cmp	r3, #18
 8001f08:	d001      	beq.n	8001f0e <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8001f0a:	2304      	movs	r3, #4
 8001f0c:	e031      	b.n	8001f72 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f7ff fea0 	bl	8001c54 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff fe9d 	bl	8001c54 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8001f1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff ff14 	bl	8001d4c <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8001f24:	2107      	movs	r1, #7
 8001f26:	68f8      	ldr	r0, [r7, #12]
 8001f28:	f7ff ff56 	bl	8001dd8 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8001f2c:	210a      	movs	r1, #10
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff ff99 	bl	8001e66 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	f7ff fea5 	bl	8001c84 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8001f3a:	210c      	movs	r1, #12
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f7ff fda5 	bl	8001a8c <read_register>
 8001f42:	4603      	mov	r3, r0
 8001f44:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8001f46:	7dbb      	ldrb	r3, [r7, #22]
 8001f48:	f043 0303 	orr.w	r3, r3, #3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	210c      	movs	r1, #12
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f7ff fdd1 	bl	8001afa <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8001f58:	2204      	movs	r2, #4
 8001f5a:	2126      	movs	r1, #38	; 0x26
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fdcc 	bl	8001afa <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8001f62:	2111      	movs	r1, #17
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fea5 	bl	8001cb4 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f7ff fe7e 	bl	8001c6c <lora_mode_standby>

  return LORA_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	if(htim == &htim1) {
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a0d      	ldr	r2, [pc, #52]	; (8001fbc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d011      	beq.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0x34>
		// nothing to do
	} else if (htim == &htim6) {
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a0c      	ldr	r2, [pc, #48]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d106      	bne.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x26>
		imu_flag = 1;
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
		pulse_flag = 1;
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	601a      	str	r2, [r3, #0]
	} else if (htim == &htim7) {
		gps_flag = 1;
	}
}
 8001fa0:	e006      	b.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0x34>
	} else if (htim == &htim7) {
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d102      	bne.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0x34>
		gps_flag = 1;
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	601a      	str	r2, [r3, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	2000059c 	.word	0x2000059c
 8001fc0:	200005e8 	.word	0x200005e8
 8001fc4:	20000688 	.word	0x20000688
 8001fc8:	20000680 	.word	0x20000680
 8001fcc:	20000634 	.word	0x20000634
 8001fd0:	20000684 	.word	0x20000684
 8001fd4:	00000000 	.word	0x00000000

08001fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fde:	f001 f89a 	bl	8003116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe2:	f000 f9b3 	bl	800234c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fe6:	f000 fc31 	bl	800284c <MX_GPIO_Init>
  MX_TIM6_Init();
 8001fea:	f000 fbc1 	bl	8002770 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8001fee:	f000 fac1 	bl	8002574 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ff2:	f000 f9f1 	bl	80023d8 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8001ff6:	f000 fa91 	bl	800251c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001ffa:	f000 faeb 	bl	80025d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001ffe:	f000 fb27 	bl	8002650 <MX_TIM1_Init>
  MX_TIM7_Init();
 8002002:	f000 fbeb 	bl	80027dc <MX_TIM7_Init>
  MX_I2C3_Init();
 8002006:	f000 fa4b 	bl	80024a0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  // initializations
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800200a:	2100      	movs	r1, #0
 800200c:	48b6      	ldr	r0, [pc, #728]	; (80022e8 <main+0x310>)
 800200e:	f005 fb87 	bl	8007720 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8002012:	48b6      	ldr	r0, [pc, #728]	; (80022ec <main+0x314>)
 8002014:	f005 fad8 	bl	80075c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002018:	48b5      	ldr	r0, [pc, #724]	; (80022f0 <main+0x318>)
 800201a:	f005 fad5 	bl	80075c8 <HAL_TIM_Base_Start_IT>
  initPulseSensor(&hadc1);
 800201e:	48b5      	ldr	r0, [pc, #724]	; (80022f4 <main+0x31c>)
 8002020:	f7ff f93a 	bl	8001298 <initPulseSensor>
  init_IMU(&hi2c3);
 8002024:	48b4      	ldr	r0, [pc, #720]	; (80022f8 <main+0x320>)
 8002026:	f7ff f81d 	bl	8001064 <init_IMU>
  lora_sx1276 lora;
  uint8_t res = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 800202a:	1d38      	adds	r0, r7, #4
 800202c:	a3a4      	add	r3, pc, #656	; (adr r3, 80022c0 <main+0x2e8>)
 800202e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002032:	e9cd 2300 	strd	r2, r3, [sp]
 8002036:	2301      	movs	r3, #1
 8002038:	4ab0      	ldr	r2, [pc, #704]	; (80022fc <main+0x324>)
 800203a:	49b1      	ldr	r1, [pc, #708]	; (8002300 <main+0x328>)
 800203c:	f7ff ff3d 	bl	8001eba <lora_init>
 8002040:	4603      	mov	r3, r0
 8002042:	77fb      	strb	r3, [r7, #31]
  if (res != LORA_OK) {
 8002044:	7ffb      	ldrb	r3, [r7, #31]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <main+0x78>
    printf("epic fail!");
 800204a:	48ae      	ldr	r0, [pc, #696]	; (8002304 <main+0x32c>)
 800204c:	f008 fe1c 	bl	800ac88 <iprintf>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  /* Pulse Sensor Poll */
	  if (pulse_flag) {
 8002050:	4bad      	ldr	r3, [pc, #692]	; (8002308 <main+0x330>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <main+0xac>
		  HAL_GPIO_WritePin(GPIOA, 5, 1);
 8002058:	2201      	movs	r2, #1
 800205a:	2105      	movs	r1, #5
 800205c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002060:	f002 fbbc 	bl	80047dc <HAL_GPIO_WritePin>
		  updatePulseSensor();
 8002064:	f7ff f928 	bl	80012b8 <updatePulseSensor>
		  bpm = get_BPM();
 8002068:	f7ff faac 	bl	80015c4 <get_BPM>
 800206c:	4603      	mov	r3, r0
 800206e:	4aa7      	ldr	r2, [pc, #668]	; (800230c <main+0x334>)
 8002070:	6013      	str	r3, [r2, #0]
		  pulse_flag = 0;
 8002072:	4ba5      	ldr	r3, [pc, #660]	; (8002308 <main+0x330>)
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, 5, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2105      	movs	r1, #5
 800207c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002080:	f002 fbac 	bl	80047dc <HAL_GPIO_WritePin>
	  }

	  /* IMU Sensor Poll */
	  if (imu_flag) {
 8002084:	4ba2      	ldr	r3, [pc, #648]	; (8002310 <main+0x338>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80ff 	beq.w	800228c <main+0x2b4>
		  x = (double)x_lin_acc(&hi2c3);
 800208e:	489a      	ldr	r0, [pc, #616]	; (80022f8 <main+0x320>)
 8002090:	f7ff f8b4 	bl	80011fc <x_lin_acc>
 8002094:	ee10 3a10 	vmov	r3, s0
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe fa55 	bl	8000548 <__aeabi_f2d>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	499c      	ldr	r1, [pc, #624]	; (8002314 <main+0x33c>)
 80020a4:	e9c1 2300 	strd	r2, r3, [r1]
		  y = (double)y_lin_acc(&hi2c3);
 80020a8:	4893      	ldr	r0, [pc, #588]	; (80022f8 <main+0x320>)
 80020aa:	f7ff f8c1 	bl	8001230 <y_lin_acc>
 80020ae:	ee10 3a10 	vmov	r3, s0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fa48 	bl	8000548 <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4996      	ldr	r1, [pc, #600]	; (8002318 <main+0x340>)
 80020be:	e9c1 2300 	strd	r2, r3, [r1]
		  z = (double)z_lin_acc(&hi2c3);
 80020c2:	488d      	ldr	r0, [pc, #564]	; (80022f8 <main+0x320>)
 80020c4:	f7ff f8ce 	bl	8001264 <z_lin_acc>
 80020c8:	ee10 3a10 	vmov	r3, s0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7fe fa3b 	bl	8000548 <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4991      	ldr	r1, [pc, #580]	; (800231c <main+0x344>)
 80020d8:	e9c1 2300 	strd	r2, r3, [r1]
		  //20000 is 100 from imu, plus 200 for the time frame
		  //printf("x: %f y: %f, z: %f\n\r", x, y, z);
		  if((x>-.1)&&(x<.1)|(x>50) | (x<-50)){
 80020dc:	4b8d      	ldr	r3, [pc, #564]	; (8002314 <main+0x33c>)
 80020de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e2:	a379      	add	r3, pc, #484	; (adr r3, 80022c8 <main+0x2f0>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	f7fe fd16 	bl	8000b18 <__aeabi_dcmpgt>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d03c      	beq.n	800216c <main+0x194>
 80020f2:	4b88      	ldr	r3, [pc, #544]	; (8002314 <main+0x33c>)
 80020f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f8:	2301      	movs	r3, #1
 80020fa:	461c      	mov	r4, r3
 80020fc:	a374      	add	r3, pc, #464	; (adr r3, 80022d0 <main+0x2f8>)
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f7fe fceb 	bl	8000adc <__aeabi_dcmplt>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <main+0x138>
 800210c:	2300      	movs	r3, #0
 800210e:	461c      	mov	r4, r3
 8002110:	b2e4      	uxtb	r4, r4
 8002112:	4b80      	ldr	r3, [pc, #512]	; (8002314 <main+0x33c>)
 8002114:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002118:	2301      	movs	r3, #1
 800211a:	461d      	mov	r5, r3
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <main+0x348>)
 8002122:	f7fe fcf9 	bl	8000b18 <__aeabi_dcmpgt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <main+0x158>
 800212c:	2300      	movs	r3, #0
 800212e:	461d      	mov	r5, r3
 8002130:	b2eb      	uxtb	r3, r5
 8002132:	4323      	orrs	r3, r4
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461c      	mov	r4, r3
 8002138:	4b76      	ldr	r3, [pc, #472]	; (8002314 <main+0x33c>)
 800213a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800213e:	2301      	movs	r3, #1
 8002140:	461d      	mov	r5, r3
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	4b77      	ldr	r3, [pc, #476]	; (8002324 <main+0x34c>)
 8002148:	f7fe fcc8 	bl	8000adc <__aeabi_dcmplt>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <main+0x17e>
 8002152:	2300      	movs	r3, #0
 8002154:	461d      	mov	r5, r3
 8002156:	b2eb      	uxtb	r3, r5
 8002158:	4323      	orrs	r3, r4
 800215a:	2b00      	cmp	r3, #0
 800215c:	d006      	beq.n	800216c <main+0x194>
			  x = 0;
 800215e:	496d      	ldr	r1, [pc, #436]	; (8002314 <main+0x33c>)
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  if((y>-.1)&&(y<.1)|(y>50) | (y<-50)){
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <main+0x340>)
 800216e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002172:	a355      	add	r3, pc, #340	; (adr r3, 80022c8 <main+0x2f0>)
 8002174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002178:	f7fe fcce 	bl	8000b18 <__aeabi_dcmpgt>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03c      	beq.n	80021fc <main+0x224>
 8002182:	4b65      	ldr	r3, [pc, #404]	; (8002318 <main+0x340>)
 8002184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002188:	2301      	movs	r3, #1
 800218a:	461c      	mov	r4, r3
 800218c:	a350      	add	r3, pc, #320	; (adr r3, 80022d0 <main+0x2f8>)
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	f7fe fca3 	bl	8000adc <__aeabi_dcmplt>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <main+0x1c8>
 800219c:	2300      	movs	r3, #0
 800219e:	461c      	mov	r4, r3
 80021a0:	b2e4      	uxtb	r4, r4
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <main+0x340>)
 80021a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a8:	2301      	movs	r3, #1
 80021aa:	461d      	mov	r5, r3
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b5b      	ldr	r3, [pc, #364]	; (8002320 <main+0x348>)
 80021b2:	f7fe fcb1 	bl	8000b18 <__aeabi_dcmpgt>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <main+0x1e8>
 80021bc:	2300      	movs	r3, #0
 80021be:	461d      	mov	r5, r3
 80021c0:	b2eb      	uxtb	r3, r5
 80021c2:	4323      	orrs	r3, r4
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461c      	mov	r4, r3
 80021c8:	4b53      	ldr	r3, [pc, #332]	; (8002318 <main+0x340>)
 80021ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ce:	2301      	movs	r3, #1
 80021d0:	461d      	mov	r5, r3
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b53      	ldr	r3, [pc, #332]	; (8002324 <main+0x34c>)
 80021d8:	f7fe fc80 	bl	8000adc <__aeabi_dcmplt>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <main+0x20e>
 80021e2:	2300      	movs	r3, #0
 80021e4:	461d      	mov	r5, r3
 80021e6:	b2eb      	uxtb	r3, r5
 80021e8:	4323      	orrs	r3, r4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d006      	beq.n	80021fc <main+0x224>
			  y = 0;
 80021ee:	494a      	ldr	r1, [pc, #296]	; (8002318 <main+0x340>)
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
		  }
		  if((z>-.45)&&(z<.45)|(z>50) | (z<-50)){
 80021fc:	4b47      	ldr	r3, [pc, #284]	; (800231c <main+0x344>)
 80021fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002202:	a335      	add	r3, pc, #212	; (adr r3, 80022d8 <main+0x300>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe fc86 	bl	8000b18 <__aeabi_dcmpgt>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d03c      	beq.n	800228c <main+0x2b4>
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <main+0x344>)
 8002214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002218:	2301      	movs	r3, #1
 800221a:	461c      	mov	r4, r3
 800221c:	a330      	add	r3, pc, #192	; (adr r3, 80022e0 <main+0x308>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe fc5b 	bl	8000adc <__aeabi_dcmplt>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <main+0x258>
 800222c:	2300      	movs	r3, #0
 800222e:	461c      	mov	r4, r3
 8002230:	b2e4      	uxtb	r4, r4
 8002232:	4b3a      	ldr	r3, [pc, #232]	; (800231c <main+0x344>)
 8002234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002238:	2301      	movs	r3, #1
 800223a:	461d      	mov	r5, r3
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <main+0x348>)
 8002242:	f7fe fc69 	bl	8000b18 <__aeabi_dcmpgt>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <main+0x278>
 800224c:	2300      	movs	r3, #0
 800224e:	461d      	mov	r5, r3
 8002250:	b2eb      	uxtb	r3, r5
 8002252:	4323      	orrs	r3, r4
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461c      	mov	r4, r3
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <main+0x344>)
 800225a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800225e:	2301      	movs	r3, #1
 8002260:	461d      	mov	r5, r3
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <main+0x34c>)
 8002268:	f7fe fc38 	bl	8000adc <__aeabi_dcmplt>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <main+0x29e>
 8002272:	2300      	movs	r3, #0
 8002274:	461d      	mov	r5, r3
 8002276:	b2eb      	uxtb	r3, r5
 8002278:	4323      	orrs	r3, r4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <main+0x2b4>
			  z = 0;
 800227e:	4927      	ldr	r1, [pc, #156]	; (800231c <main+0x344>)
 8002280:	f04f 0200 	mov.w	r2, #0
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	e9c1 2300 	strd	r2, r3, [r1]
//			  inst_velz = 0;
//		  }
	  }

	  /* GPS Polling */
	  if (gps_flag) {
 800228c:	4b26      	ldr	r3, [pc, #152]	; (8002328 <main+0x350>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f43f aedd 	beq.w	8002050 <main+0x78>
		  updateGPS();
 8002296:	f7ff f9ef 	bl	8001678 <updateGPS>
		  vel = get_velocity();
 800229a:	f7ff fbe5 	bl	8001a68 <get_velocity>
 800229e:	ec53 2b10 	vmov	r2, r3, d0
 80022a2:	4610      	mov	r0, r2
 80022a4:	4619      	mov	r1, r3
 80022a6:	f7fe fc57 	bl	8000b58 <__aeabi_d2iz>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a1f      	ldr	r2, [pc, #124]	; (800232c <main+0x354>)
 80022ae:	6013      	str	r3, [r2, #0]
		  dist = get_distance();
 80022b0:	f7ff fbc8 	bl	8001a44 <get_distance>
 80022b4:	ec53 2b10 	vmov	r2, r3, d0
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	e038      	b.n	8002330 <main+0x358>
 80022be:	bf00      	nop
 80022c0:	36e55840 	.word	0x36e55840
 80022c4:	00000000 	.word	0x00000000
 80022c8:	9999999a 	.word	0x9999999a
 80022cc:	bfb99999 	.word	0xbfb99999
 80022d0:	9999999a 	.word	0x9999999a
 80022d4:	3fb99999 	.word	0x3fb99999
 80022d8:	cccccccd 	.word	0xcccccccd
 80022dc:	bfdccccc 	.word	0xbfdccccc
 80022e0:	cccccccd 	.word	0xcccccccd
 80022e4:	3fdccccc 	.word	0x3fdccccc
 80022e8:	2000059c 	.word	0x2000059c
 80022ec:	200005e8 	.word	0x200005e8
 80022f0:	20000634 	.word	0x20000634
 80022f4:	20000370 	.word	0x20000370
 80022f8:	200003d4 	.word	0x200003d4
 80022fc:	48000400 	.word	0x48000400
 8002300:	20000538 	.word	0x20000538
 8002304:	0800ee0c 	.word	0x0800ee0c
 8002308:	20000680 	.word	0x20000680
 800230c:	2000068c 	.word	0x2000068c
 8002310:	20000688 	.word	0x20000688
 8002314:	20000698 	.word	0x20000698
 8002318:	200006a0 	.word	0x200006a0
 800231c:	200006a8 	.word	0x200006a8
 8002320:	40490000 	.word	0x40490000
 8002324:	c0490000 	.word	0xc0490000
 8002328:	20000684 	.word	0x20000684
 800232c:	20000690 	.word	0x20000690
 8002330:	f7fe fc12 	bl	8000b58 <__aeabi_d2iz>
 8002334:	4603      	mov	r3, r0
 8002336:	4a03      	ldr	r2, [pc, #12]	; (8002344 <main+0x36c>)
 8002338:	6013      	str	r3, [r2, #0]
		  gps_flag = 0;
 800233a:	4b03      	ldr	r3, [pc, #12]	; (8002348 <main+0x370>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
	  if (pulse_flag) {
 8002340:	e686      	b.n	8002050 <main+0x78>
 8002342:	bf00      	nop
 8002344:	20000694 	.word	0x20000694
 8002348:	20000684 	.word	0x20000684

0800234c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b096      	sub	sp, #88	; 0x58
 8002350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	2244      	movs	r2, #68	; 0x44
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f008 fd11 	bl	800ad82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002360:	463b      	mov	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800236e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002372:	f003 f82d 	bl	80053d0 <HAL_PWREx_ControlVoltageScaling>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800237c:	f000 faee 	bl	800295c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002380:	2310      	movs	r3, #16
 8002382:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002384:	2301      	movs	r3, #1
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800238c:	2360      	movs	r3, #96	; 0x60
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002390:	2300      	movs	r3, #0
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4618      	mov	r0, r3
 800239a:	f003 f86f 	bl	800547c <HAL_RCC_OscConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80023a4:	f000 fada 	bl	800295c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a8:	230f      	movs	r3, #15
 80023aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80023ac:	2300      	movs	r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fc6f 	bl	8005ca4 <HAL_RCC_ClockConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80023cc:	f000 fac6 	bl	800295c <Error_Handler>
  }
}
 80023d0:	bf00      	nop
 80023d2:	3758      	adds	r7, #88	; 0x58
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023de:	463b      	mov	r3, r7
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <MX_ADC1_Init+0xbc>)
 80023f0:	4a29      	ldr	r2, [pc, #164]	; (8002498 <MX_ADC1_Init+0xc0>)
 80023f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <MX_ADC1_Init+0xbc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <MX_ADC1_Init+0xbc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <MX_ADC1_Init+0xbc>)
 800240e:	2204      	movs	r2, #4
 8002410:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002414:	2200      	movs	r2, #0
 8002416:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <MX_ADC1_Init+0xbc>)
 800241a:	2200      	movs	r2, #0
 800241c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002420:	2201      	movs	r2, #1
 8002422:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <MX_ADC1_Init+0xbc>)
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002434:	2200      	movs	r2, #0
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <MX_ADC1_Init+0xbc>)
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002442:	2200      	movs	r2, #0
 8002444:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800244e:	4811      	ldr	r0, [pc, #68]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002450:	f001 f89e 	bl	8003590 <HAL_ADC_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800245a:	f000 fa7f 	bl	800295c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_ADC1_Init+0xc4>)
 8002460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002462:	2306      	movs	r3, #6
 8002464:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800246a:	237f      	movs	r3, #127	; 0x7f
 800246c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800246e:	2304      	movs	r3, #4
 8002470:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002476:	463b      	mov	r3, r7
 8002478:	4619      	mov	r1, r3
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <MX_ADC1_Init+0xbc>)
 800247c:	f001 faca 	bl	8003a14 <HAL_ADC_ConfigChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002486:	f000 fa69 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20000370 	.word	0x20000370
 8002498:	50040000 	.word	0x50040000
 800249c:	14f00020 	.word	0x14f00020

080024a0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <MX_I2C3_Init+0x74>)
 80024a6:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <MX_I2C3_Init+0x78>)
 80024a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <MX_I2C3_Init+0x74>)
 80024ac:	f640 6214 	movw	r2, #3604	; 0xe14
 80024b0:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <MX_I2C3_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_I2C3_Init+0x74>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <MX_I2C3_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <MX_I2C3_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_I2C3_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <MX_I2C3_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_I2C3_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <MX_I2C3_Init+0x74>)
 80024de:	f002 f995 	bl	800480c <HAL_I2C_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80024e8:	f000 fa38 	bl	800295c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ec:	2100      	movs	r1, #0
 80024ee:	4809      	ldr	r0, [pc, #36]	; (8002514 <MX_I2C3_Init+0x74>)
 80024f0:	f002 fec8 	bl	8005284 <HAL_I2CEx_ConfigAnalogFilter>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80024fa:	f000 fa2f 	bl	800295c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024fe:	2100      	movs	r1, #0
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <MX_I2C3_Init+0x74>)
 8002502:	f002 ff0a 	bl	800531a <HAL_I2CEx_ConfigDigitalFilter>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800250c:	f000 fa26 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200003d4 	.word	0x200003d4
 8002518:	40005c00 	.word	0x40005c00

0800251c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <MX_LPUART1_UART_Init+0x54>)
 8002524:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800252c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002542:	220c      	movs	r2, #12
 8002544:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 800254e:	2200      	movs	r2, #0
 8002550:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002554:	2200      	movs	r2, #0
 8002556:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 800255a:	f006 f801 	bl	8008560 <HAL_UART_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002564:	f000 f9fa 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000428 	.word	0x20000428
 8002570:	40008000 	.word	0x40008000

08002574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <MX_USART1_UART_Init+0x58>)
 800257a:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <MX_USART1_UART_Init+0x5c>)
 800257c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <MX_USART1_UART_Init+0x58>)
 8002580:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <MX_USART1_UART_Init+0x58>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <MX_USART1_UART_Init+0x58>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <MX_USART1_UART_Init+0x58>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <MX_USART1_UART_Init+0x58>)
 800259a:	220c      	movs	r2, #12
 800259c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025b8:	f005 ffd2 	bl	8008560 <HAL_UART_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025c2:	f000 f9cb 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200004b0 	.word	0x200004b0
 80025d0:	40013800 	.word	0x40013800

080025d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <MX_SPI1_Init+0x74>)
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <MX_SPI1_Init+0x78>)
 80025dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <MX_SPI1_Init+0x74>)
 80025e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <MX_SPI1_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <MX_SPI1_Init+0x74>)
 80025ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <MX_SPI1_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <MX_SPI1_Init+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_SPI1_Init+0x74>)
 8002602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002606:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <MX_SPI1_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_SPI1_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_SPI1_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <MX_SPI1_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_SPI1_Init+0x74>)
 8002622:	2207      	movs	r2, #7
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_SPI1_Init+0x74>)
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <MX_SPI1_Init+0x74>)
 800262e:	2208      	movs	r2, #8
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_SPI1_Init+0x74>)
 8002634:	f004 f842 	bl	80066bc <HAL_SPI_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800263e:	f000 f98d 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000538 	.word	0x20000538
 800264c:	40013000 	.word	0x40013000

08002650 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b096      	sub	sp, #88	; 0x58
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]
 8002672:	615a      	str	r2, [r3, #20]
 8002674:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	222c      	movs	r2, #44	; 0x2c
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f008 fb80 	bl	800ad82 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002682:	4b39      	ldr	r3, [pc, #228]	; (8002768 <MX_TIM1_Init+0x118>)
 8002684:	4a39      	ldr	r2, [pc, #228]	; (800276c <MX_TIM1_Init+0x11c>)
 8002686:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002688:	4b37      	ldr	r3, [pc, #220]	; (8002768 <MX_TIM1_Init+0x118>)
 800268a:	2200      	movs	r2, #0
 800268c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b36      	ldr	r3, [pc, #216]	; (8002768 <MX_TIM1_Init+0x118>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002694:	4b34      	ldr	r3, [pc, #208]	; (8002768 <MX_TIM1_Init+0x118>)
 8002696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800269a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269c:	4b32      	ldr	r3, [pc, #200]	; (8002768 <MX_TIM1_Init+0x118>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <MX_TIM1_Init+0x118>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a8:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <MX_TIM1_Init+0x118>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026ae:	482e      	ldr	r0, [pc, #184]	; (8002768 <MX_TIM1_Init+0x118>)
 80026b0:	f004 ffde 	bl	8007670 <HAL_TIM_PWM_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80026ba:	f000 f94f 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ce:	4619      	mov	r1, r3
 80026d0:	4825      	ldr	r0, [pc, #148]	; (8002768 <MX_TIM1_Init+0x118>)
 80026d2:	f005 fe49 	bl	8008368 <HAL_TIMEx_MasterConfigSynchronization>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026dc:	f000 f93e 	bl	800295c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e0:	2360      	movs	r3, #96	; 0x60
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e8:	2300      	movs	r3, #0
 80026ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026f8:	2300      	movs	r3, #0
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002700:	2200      	movs	r2, #0
 8002702:	4619      	mov	r1, r3
 8002704:	4818      	ldr	r0, [pc, #96]	; (8002768 <MX_TIM1_Init+0x118>)
 8002706:	f005 f9eb 	bl	8007ae0 <HAL_TIM_PWM_ConfigChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002710:	f000 f924 	bl	800295c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800272c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	4619      	mov	r1, r3
 8002748:	4807      	ldr	r0, [pc, #28]	; (8002768 <MX_TIM1_Init+0x118>)
 800274a:	f005 fe73 	bl	8008434 <HAL_TIMEx_ConfigBreakDeadTime>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002754:	f000 f902 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002758:	4803      	ldr	r0, [pc, #12]	; (8002768 <MX_TIM1_Init+0x118>)
 800275a:	f000 fb65 	bl	8002e28 <HAL_TIM_MspPostInit>

}
 800275e:	bf00      	nop
 8002760:	3758      	adds	r7, #88	; 0x58
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000059c 	.word	0x2000059c
 800276c:	40012c00 	.word	0x40012c00

08002770 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <MX_TIM6_Init+0x64>)
 8002782:	4a15      	ldr	r2, [pc, #84]	; (80027d8 <MX_TIM6_Init+0x68>)
 8002784:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <MX_TIM6_Init+0x64>)
 8002788:	2227      	movs	r2, #39	; 0x27
 800278a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <MX_TIM6_Init+0x64>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <MX_TIM6_Init+0x64>)
 8002794:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002798:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279a:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <MX_TIM6_Init+0x64>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027a0:	480c      	ldr	r0, [pc, #48]	; (80027d4 <MX_TIM6_Init+0x64>)
 80027a2:	f004 feb9 	bl	8007518 <HAL_TIM_Base_Init>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80027ac:	f000 f8d6 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b0:	2300      	movs	r3, #0
 80027b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	4619      	mov	r1, r3
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <MX_TIM6_Init+0x64>)
 80027be:	f005 fdd3 	bl	8008368 <HAL_TIMEx_MasterConfigSynchronization>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80027c8:	f000 f8c8 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200005e8 	.word	0x200005e8
 80027d8:	40001000 	.word	0x40001000

080027dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <MX_TIM7_Init+0x68>)
 80027ee:	4a16      	ldr	r2, [pc, #88]	; (8002848 <MX_TIM7_Init+0x6c>)
 80027f0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 399;
 80027f2:	4b14      	ldr	r3, [pc, #80]	; (8002844 <MX_TIM7_Init+0x68>)
 80027f4:	f240 128f 	movw	r2, #399	; 0x18f
 80027f8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fa:	4b12      	ldr	r3, [pc, #72]	; (8002844 <MX_TIM7_Init+0x68>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8002800:	4b10      	ldr	r3, [pc, #64]	; (8002844 <MX_TIM7_Init+0x68>)
 8002802:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002806:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002808:	4b0e      	ldr	r3, [pc, #56]	; (8002844 <MX_TIM7_Init+0x68>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800280e:	480d      	ldr	r0, [pc, #52]	; (8002844 <MX_TIM7_Init+0x68>)
 8002810:	f004 fe82 	bl	8007518 <HAL_TIM_Base_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800281a:	f000 f89f 	bl	800295c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	4619      	mov	r1, r3
 800282a:	4806      	ldr	r0, [pc, #24]	; (8002844 <MX_TIM7_Init+0x68>)
 800282c:	f005 fd9c 	bl	8008368 <HAL_TIMEx_MasterConfigSynchronization>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002836:	f000 f891 	bl	800295c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000634 	.word	0x20000634
 8002848:	40001400 	.word	0x40001400

0800284c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002852:	f107 030c 	add.w	r3, r7, #12
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	605a      	str	r2, [r3, #4]
 800285c:	609a      	str	r2, [r3, #8]
 800285e:	60da      	str	r2, [r3, #12]
 8002860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	4b33      	ldr	r3, [pc, #204]	; (8002930 <MX_GPIO_Init+0xe4>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	4a32      	ldr	r2, [pc, #200]	; (8002930 <MX_GPIO_Init+0xe4>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <MX_GPIO_Init+0xe4>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60bb      	str	r3, [r7, #8]
 8002878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800287a:	4b2d      	ldr	r3, [pc, #180]	; (8002930 <MX_GPIO_Init+0xe4>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <MX_GPIO_Init+0xe4>)
 8002880:	f043 0302 	orr.w	r3, r3, #2
 8002884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002886:	4b2a      	ldr	r3, [pc, #168]	; (8002930 <MX_GPIO_Init+0xe4>)
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002892:	2200      	movs	r2, #0
 8002894:	2120      	movs	r1, #32
 8002896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289a:	f001 ff9f 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800289e:	2200      	movs	r2, #0
 80028a0:	2101      	movs	r1, #1
 80028a2:	4824      	ldr	r0, [pc, #144]	; (8002934 <MX_GPIO_Init+0xe8>)
 80028a4:	f001 ff9a 	bl	80047dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028a8:	2320      	movs	r3, #32
 80028aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ac:	2301      	movs	r3, #1
 80028ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	4619      	mov	r1, r3
 80028be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c2:	f001 fe21 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028c6:	2301      	movs	r3, #1
 80028c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ca:	2301      	movs	r3, #1
 80028cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	4619      	mov	r1, r3
 80028dc:	4815      	ldr	r0, [pc, #84]	; (8002934 <MX_GPIO_Init+0xe8>)
 80028de:	f001 fe13 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e8:	2312      	movs	r3, #18
 80028ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028f4:	2304      	movs	r3, #4
 80028f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	4619      	mov	r1, r3
 80028fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002902:	f001 fe01 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290a:	2312      	movs	r3, #18
 800290c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002912:	2303      	movs	r3, #3
 8002914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002916:	2304      	movs	r3, #4
 8002918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	4619      	mov	r1, r3
 8002920:	4804      	ldr	r0, [pc, #16]	; (8002934 <MX_GPIO_Init+0xe8>)
 8002922:	f001 fdf1 	bl	8004508 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002926:	bf00      	nop
 8002928:	3720      	adds	r7, #32
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	48000400 	.word	0x48000400

08002938 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002940:	1d39      	adds	r1, r7, #4
 8002942:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002946:	2201      	movs	r2, #1
 8002948:	4803      	ldr	r0, [pc, #12]	; (8002958 <__io_putchar+0x20>)
 800294a:	f005 fe57 	bl	80085fc <HAL_UART_Transmit>
  return ch;
 800294e:	687b      	ldr	r3, [r7, #4]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000428 	.word	0x20000428

0800295c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002960:	b672      	cpsid	i
}
 8002962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002964:	e7fe      	b.n	8002964 <Error_Handler+0x8>
	...

08002968 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <HAL_MspInit+0x44>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <HAL_MspInit+0x44>)
 8002974:	f043 0301 	orr.w	r3, r3, #1
 8002978:	6613      	str	r3, [r2, #96]	; 0x60
 800297a:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_MspInit+0x44>)
 800297c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	607b      	str	r3, [r7, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_MspInit+0x44>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_MspInit+0x44>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6593      	str	r3, [r2, #88]	; 0x58
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_MspInit+0x44>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b09e      	sub	sp, #120	; 0x78
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	2254      	movs	r2, #84	; 0x54
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f008 f9d6 	bl	800ad82 <memset>
  if(hadc->Instance==ADC1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <HAL_ADC_MspInit+0xc0>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d143      	bne.n	8002a68 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029e4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80029e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80029ea:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80029ec:	2301      	movs	r3, #1
 80029ee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80029f4:	2310      	movs	r3, #16
 80029f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80029f8:	2307      	movs	r3, #7
 80029fa:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80029fc:	2302      	movs	r3, #2
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a0a:	f107 0310 	add.w	r3, r7, #16
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fb6c 	bl	80060ec <HAL_RCCEx_PeriphCLKConfig>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002a1a:	f7ff ff9f 	bl	800295c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2a:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	4b0f      	ldr	r3, [pc, #60]	; (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a3a:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a42:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <HAL_ADC_MspInit+0xc4>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a52:	230b      	movs	r3, #11
 8002a54:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a56:	2300      	movs	r3, #0
 8002a58:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a64:	f001 fd50 	bl	8004508 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a68:	bf00      	nop
 8002a6a:	3778      	adds	r7, #120	; 0x78
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	50040000 	.word	0x50040000
 8002a74:	40021000 	.word	0x40021000

08002a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b0a0      	sub	sp, #128	; 0x80
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a80:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	605a      	str	r2, [r3, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a90:	f107 0318 	add.w	r3, r7, #24
 8002a94:	2254      	movs	r2, #84	; 0x54
 8002a96:	2100      	movs	r1, #0
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f008 f972 	bl	800ad82 <memset>
  if(hi2c->Instance==I2C3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_I2C_MspInit+0xe0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d153      	bne.n	8002b50 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab2:	f107 0318 	add.w	r3, r7, #24
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 fb18 	bl	80060ec <HAL_RCCEx_PeriphCLKConfig>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002ac2:	f7ff ff4b 	bl	800295c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	4b25      	ldr	r3, [pc, #148]	; (8002b5c <HAL_I2C_MspInit+0xe4>)
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	4a24      	ldr	r2, [pc, #144]	; (8002b5c <HAL_I2C_MspInit+0xe4>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad2:	4b22      	ldr	r3, [pc, #136]	; (8002b5c <HAL_I2C_MspInit+0xe4>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ade:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <HAL_I2C_MspInit+0xe4>)
 8002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae2:	4a1e      	ldr	r2, [pc, #120]	; (8002b5c <HAL_I2C_MspInit+0xe4>)
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_I2C_MspInit+0xe4>)
 8002aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002afa:	2312      	movs	r3, #18
 8002afc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b02:	2303      	movs	r3, #3
 8002b04:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b06:	2304      	movs	r3, #4
 8002b08:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b14:	f001 fcf8 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b18:	2310      	movs	r3, #16
 8002b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b1c:	2312      	movs	r3, #18
 8002b1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b24:	2303      	movs	r3, #3
 8002b26:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b28:	2304      	movs	r3, #4
 8002b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b30:	4619      	mov	r1, r3
 8002b32:	480b      	ldr	r0, [pc, #44]	; (8002b60 <HAL_I2C_MspInit+0xe8>)
 8002b34:	f001 fce8 	bl	8004508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_I2C_MspInit+0xe4>)
 8002b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3c:	4a07      	ldr	r2, [pc, #28]	; (8002b5c <HAL_I2C_MspInit+0xe4>)
 8002b3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b42:	6593      	str	r3, [r2, #88]	; 0x58
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_I2C_MspInit+0xe4>)
 8002b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b50:	bf00      	nop
 8002b52:	3780      	adds	r7, #128	; 0x80
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40005c00 	.word	0x40005c00
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	48000400 	.word	0x48000400

08002b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b0a2      	sub	sp, #136	; 0x88
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b7c:	f107 0320 	add.w	r3, r7, #32
 8002b80:	2254      	movs	r2, #84	; 0x54
 8002b82:	2100      	movs	r1, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	f008 f8fc 	bl	800ad82 <memset>
  if(huart->Instance==LPUART1)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4f      	ldr	r2, [pc, #316]	; (8002ccc <HAL_UART_MspInit+0x168>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d139      	bne.n	8002c08 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b94:	2320      	movs	r3, #32
 8002b96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b9c:	f107 0320 	add.w	r3, r7, #32
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 faa3 	bl	80060ec <HAL_RCCEx_PeriphCLKConfig>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bac:	f7ff fed6 	bl	800295c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bb0:	4b47      	ldr	r3, [pc, #284]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	4a46      	ldr	r2, [pc, #280]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002bbc:	4b44      	ldr	r3, [pc, #272]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc8:	4b41      	ldr	r3, [pc, #260]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bcc:	4a40      	ldr	r2, [pc, #256]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd4:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002be0:	230c      	movs	r3, #12
 8002be2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c02:	f001 fc81 	bl	8004508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c06:	e05c      	b.n	8002cc2 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a31      	ldr	r2, [pc, #196]	; (8002cd4 <HAL_UART_MspInit+0x170>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d157      	bne.n	8002cc2 <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c16:	2300      	movs	r3, #0
 8002c18:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c1a:	f107 0320 	add.w	r3, r7, #32
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f003 fa64 	bl	80060ec <HAL_RCCEx_PeriphCLKConfig>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_MspInit+0xca>
      Error_Handler();
 8002c2a:	f7ff fe97 	bl	800295c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c2e:	4b28      	ldr	r3, [pc, #160]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	4a27      	ldr	r2, [pc, #156]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c38:	6613      	str	r3, [r2, #96]	; 0x60
 8002c3a:	4b25      	ldr	r3, [pc, #148]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	4b22      	ldr	r3, [pc, #136]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	4a21      	ldr	r2, [pc, #132]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6a:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_UART_MspInit+0x16c>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c7a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c84:	2303      	movs	r3, #3
 8002c86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c94:	4619      	mov	r1, r3
 8002c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c9a:	f001 fc35 	bl	8004508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c9e:	2340      	movs	r3, #64	; 0x40
 8002ca0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cb0:	2307      	movs	r3, #7
 8002cb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cba:	4619      	mov	r1, r3
 8002cbc:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <HAL_UART_MspInit+0x174>)
 8002cbe:	f001 fc23 	bl	8004508 <HAL_GPIO_Init>
}
 8002cc2:	bf00      	nop
 8002cc4:	3788      	adds	r7, #136	; 0x88
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40008000 	.word	0x40008000
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40013800 	.word	0x40013800
 8002cd8:	48000400 	.word	0x48000400

08002cdc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b08a      	sub	sp, #40	; 0x28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
 8002cf2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <HAL_SPI_MspInit+0x80>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d129      	bne.n	8002d52 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cfe:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_SPI_MspInit+0x84>)
 8002d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d02:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <HAL_SPI_MspInit+0x84>)
 8002d04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d08:	6613      	str	r3, [r2, #96]	; 0x60
 8002d0a:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <HAL_SPI_MspInit+0x84>)
 8002d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d12:	613b      	str	r3, [r7, #16]
 8002d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	4b12      	ldr	r3, [pc, #72]	; (8002d60 <HAL_SPI_MspInit+0x84>)
 8002d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1a:	4a11      	ldr	r2, [pc, #68]	; (8002d60 <HAL_SPI_MspInit+0x84>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d22:	4b0f      	ldr	r3, [pc, #60]	; (8002d60 <HAL_SPI_MspInit+0x84>)
 8002d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002d2e:	f641 0302 	movw	r3, #6146	; 0x1802
 8002d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d40:	2305      	movs	r3, #5
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d44:	f107 0314 	add.w	r3, r7, #20
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4e:	f001 fbdb 	bl	8004508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d52:	bf00      	nop
 8002d54:	3728      	adds	r7, #40	; 0x28
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40013000 	.word	0x40013000
 8002d60:	40021000 	.word	0x40021000

08002d64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0a      	ldr	r2, [pc, #40]	; (8002d9c <HAL_TIM_PWM_MspInit+0x38>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10b      	bne.n	8002d8e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d7a:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d80:	6613      	str	r3, [r2, #96]	; 0x60
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a1a      	ldr	r2, [pc, #104]	; (8002e1c <HAL_TIM_Base_MspInit+0x78>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d114      	bne.n	8002de0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <HAL_TIM_Base_MspInit+0x7c>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <HAL_TIM_Base_MspInit+0x7c>)
 8002dbc:	f043 0310 	orr.w	r3, r3, #16
 8002dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <HAL_TIM_Base_MspInit+0x7c>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	2036      	movs	r0, #54	; 0x36
 8002dd4:	f001 fb61 	bl	800449a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dd8:	2036      	movs	r0, #54	; 0x36
 8002dda:	f001 fb7a 	bl	80044d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002dde:	e018      	b.n	8002e12 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a0f      	ldr	r2, [pc, #60]	; (8002e24 <HAL_TIM_Base_MspInit+0x80>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d113      	bne.n	8002e12 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <HAL_TIM_Base_MspInit+0x7c>)
 8002dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dee:	4a0c      	ldr	r2, [pc, #48]	; (8002e20 <HAL_TIM_Base_MspInit+0x7c>)
 8002df0:	f043 0320 	orr.w	r3, r3, #32
 8002df4:	6593      	str	r3, [r2, #88]	; 0x58
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_TIM_Base_MspInit+0x7c>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	2037      	movs	r0, #55	; 0x37
 8002e08:	f001 fb47 	bl	800449a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002e0c:	2037      	movs	r0, #55	; 0x37
 8002e0e:	f001 fb60 	bl	80044d2 <HAL_NVIC_EnableIRQ>
}
 8002e12:	bf00      	nop
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40001000 	.word	0x40001000
 8002e20:	40021000 	.word	0x40021000
 8002e24:	40001400 	.word	0x40001400

08002e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b088      	sub	sp, #32
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a12      	ldr	r2, [pc, #72]	; (8002e90 <HAL_TIM_MspPostInit+0x68>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d11d      	bne.n	8002e86 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_TIM_MspPostInit+0x6c>)
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4e:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <HAL_TIM_MspPostInit+0x6c>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <HAL_TIM_MspPostInit+0x6c>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e74:	2301      	movs	r3, #1
 8002e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 030c 	add.w	r3, r7, #12
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e82:	f001 fb41 	bl	8004508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e86:	bf00      	nop
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40021000 	.word	0x40021000

08002e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e9c:	e7fe      	b.n	8002e9c <NMI_Handler+0x4>

08002e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea2:	e7fe      	b.n	8002ea2 <HardFault_Handler+0x4>

08002ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <MemManage_Handler+0x4>

08002eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eae:	e7fe      	b.n	8002eae <BusFault_Handler+0x4>

08002eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <UsageFault_Handler+0x4>

08002eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee4:	f000 f96c 	bl	80031c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}

08002eec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <TIM6_DAC_IRQHandler+0x10>)
 8002ef2:	f004 fcf3 	bl	80078dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200005e8 	.word	0x200005e8

08002f00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <TIM7_IRQHandler+0x10>)
 8002f06:	f004 fce9 	bl	80078dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	20000634 	.word	0x20000634

08002f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return 1;
 8002f18:	2301      	movs	r3, #1
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <_kill>:

int _kill(int pid, int sig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f2e:	f007 ff8d 	bl	800ae4c <__errno>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2216      	movs	r2, #22
 8002f36:	601a      	str	r2, [r3, #0]
  return -1;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_exit>:

void _exit (int status)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ffe7 	bl	8002f24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f56:	e7fe      	b.n	8002f56 <_exit+0x12>

08002f58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e00a      	b.n	8002f80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f6a:	f3af 8000 	nop.w
 8002f6e:	4601      	mov	r1, r0
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	60ba      	str	r2, [r7, #8]
 8002f76:	b2ca      	uxtb	r2, r1
 8002f78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	dbf0      	blt.n	8002f6a <_read+0x12>
  }

  return len;
 8002f88:	687b      	ldr	r3, [r7, #4]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e009      	b.n	8002fb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	60ba      	str	r2, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fcc3 	bl	8002938 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbf1      	blt.n	8002fa4 <_write+0x12>
  }
  return len;
 8002fc0:	687b      	ldr	r3, [r7, #4]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_close>:

int _close(int file)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ff2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_isatty>:

int _isatty(int file)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800303c:	4a14      	ldr	r2, [pc, #80]	; (8003090 <_sbrk+0x5c>)
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <_sbrk+0x60>)
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <_sbrk+0x64>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <_sbrk+0x68>)
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <_sbrk+0x64>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d207      	bcs.n	8003074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003064:	f007 fef2 	bl	800ae4c <__errno>
 8003068:	4603      	mov	r3, r0
 800306a:	220c      	movs	r2, #12
 800306c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295
 8003072:	e009      	b.n	8003088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <_sbrk+0x64>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <_sbrk+0x64>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	4a05      	ldr	r2, [pc, #20]	; (8003098 <_sbrk+0x64>)
 8003084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20010000 	.word	0x20010000
 8003094:	00000400 	.word	0x00000400
 8003098:	200006b0 	.word	0x200006b0
 800309c:	20000808 	.word	0x20000808

080030a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <SystemInit+0x20>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <SystemInit+0x20>)
 80030ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030c8:	f7ff ffea 	bl	80030a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030cc:	480c      	ldr	r0, [pc, #48]	; (8003100 <LoopForever+0x6>)
  ldr r1, =_edata
 80030ce:	490d      	ldr	r1, [pc, #52]	; (8003104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030d0:	4a0d      	ldr	r2, [pc, #52]	; (8003108 <LoopForever+0xe>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d4:	e002      	b.n	80030dc <LoopCopyDataInit>

080030d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030da:	3304      	adds	r3, #4

080030dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e0:	d3f9      	bcc.n	80030d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e2:	4a0a      	ldr	r2, [pc, #40]	; (800310c <LoopForever+0x12>)
  ldr r4, =_ebss
 80030e4:	4c0a      	ldr	r4, [pc, #40]	; (8003110 <LoopForever+0x16>)
  movs r3, #0
 80030e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030e8:	e001      	b.n	80030ee <LoopFillZerobss>

080030ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030ec:	3204      	adds	r2, #4

080030ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f0:	d3fb      	bcc.n	80030ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030f2:	f007 feb1 	bl	800ae58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80030f6:	f7fe ff6f 	bl	8001fd8 <main>

080030fa <LoopForever>:

LoopForever:
    b LoopForever
 80030fa:	e7fe      	b.n	80030fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80030fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003104:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8003108:	0800f478 	.word	0x0800f478
  ldr r2, =_sbss
 800310c:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8003110:	20000804 	.word	0x20000804

08003114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003114:	e7fe      	b.n	8003114 <ADC1_IRQHandler>

08003116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003120:	2003      	movs	r0, #3
 8003122:	f001 f9af 	bl	8004484 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003126:	200f      	movs	r0, #15
 8003128:	f000 f80e 	bl	8003148 <HAL_InitTick>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	e001      	b.n	800313c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003138:	f7ff fc16 	bl	8002968 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800313c:	79fb      	ldrb	r3, [r7, #7]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_InitTick+0x6c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d023      	beq.n	80031a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800315c:	4b16      	ldr	r3, [pc, #88]	; (80031b8 <HAL_InitTick+0x70>)
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4b14      	ldr	r3, [pc, #80]	; (80031b4 <HAL_InitTick+0x6c>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4619      	mov	r1, r3
 8003166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316a:	fbb3 f3f1 	udiv	r3, r3, r1
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	4618      	mov	r0, r3
 8003174:	f001 f9bb 	bl	80044ee <HAL_SYSTICK_Config>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b0f      	cmp	r3, #15
 8003182:	d809      	bhi.n	8003198 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003184:	2200      	movs	r2, #0
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	f001 f985 	bl	800449a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003190:	4a0a      	ldr	r2, [pc, #40]	; (80031bc <HAL_InitTick+0x74>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e007      	b.n	80031a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	e004      	b.n	80031a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	e001      	b.n	80031a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000020 	.word	0x20000020
 80031b8:	20000018 	.word	0x20000018
 80031bc:	2000001c 	.word	0x2000001c

080031c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_IncTick+0x20>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <HAL_IncTick+0x24>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_IncTick+0x24>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	20000020 	.word	0x20000020
 80031e4:	200006b4 	.word	0x200006b4

080031e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return uwTick;
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_GetTick+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	200006b4 	.word	0x200006b4

08003200 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	609a      	str	r2, [r3, #8]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	609a      	str	r2, [r3, #8]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800325c:	4618      	mov	r0, r3
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3360      	adds	r3, #96	; 0x60
 800327a:	461a      	mov	r2, r3
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <LL_ADC_SetOffset+0x44>)
 800328a:	4013      	ands	r3, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80032a0:	bf00      	nop
 80032a2:	371c      	adds	r7, #28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	03fff000 	.word	0x03fff000

080032b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	3360      	adds	r3, #96	; 0x60
 80032be:	461a      	mov	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3360      	adds	r3, #96	; 0x60
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	431a      	orrs	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003312:	b480      	push	{r7}
 8003314:	b083      	sub	sp, #12
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	3330      	adds	r3, #48	; 0x30
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	4413      	add	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	211f      	movs	r1, #31
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	401a      	ands	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	0e9b      	lsrs	r3, r3, #26
 8003370:	f003 011f 	and.w	r1, r3, #31
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	431a      	orrs	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003384:	bf00      	nop
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3314      	adds	r3, #20
 80033a0:	461a      	mov	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	0e5b      	lsrs	r3, r3, #25
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	4413      	add	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0d1b      	lsrs	r3, r3, #20
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2107      	movs	r1, #7
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	43db      	mvns	r3, r3
 80033c4:	401a      	ands	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0d1b      	lsrs	r3, r3, #20
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	431a      	orrs	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	43db      	mvns	r3, r3
 8003402:	401a      	ands	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0318 	and.w	r3, r3, #24
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <LL_ADC_SetChannelSingleDiff+0x44>)
 800340c:	40d9      	lsrs	r1, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	400b      	ands	r3, r1
 8003412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003416:	431a      	orrs	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	0007ffff 	.word	0x0007ffff

08003430 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6093      	str	r3, [r2, #8]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003468:	d101      	bne.n	800346e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800348c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003490:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b8:	d101      	bne.n	80034be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034e0:	f043 0201 	orr.w	r2, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <LL_ADC_IsEnabled+0x18>
 8003508:	2301      	movs	r3, #1
 800350a:	e000      	b.n	800350e <LL_ADC_IsEnabled+0x1a>
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800352a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800352e:	f043 0204 	orr.w	r2, r3, #4
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d101      	bne.n	800355a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b08      	cmp	r3, #8
 800357a:	d101      	bne.n	8003580 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b088      	sub	sp, #32
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800359c:	2300      	movs	r3, #0
 800359e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e126      	b.n	80037f8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff f9f9 	bl	80029b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff3f 	bl	8003454 <LL_ADC_IsDeepPowerDownEnabled>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff25 	bl	8003430 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ff5a 	bl	80034a4 <LL_ADC_IsInternalRegulatorEnabled>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d115      	bne.n	8003622 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ff3e 	bl	800347c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003600:	4b7f      	ldr	r3, [pc, #508]	; (8003800 <HAL_ADC_Init+0x270>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	099b      	lsrs	r3, r3, #6
 8003606:	4a7f      	ldr	r2, [pc, #508]	; (8003804 <HAL_ADC_Init+0x274>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	099b      	lsrs	r3, r3, #6
 800360e:	3301      	adds	r3, #1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003614:	e002      	b.n	800361c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3b01      	subs	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f9      	bne.n	8003616 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff ff3c 	bl	80034a4 <LL_ADC_IsInternalRegulatorEnabled>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10d      	bne.n	800364e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003636:	f043 0210 	orr.w	r2, r3, #16
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	f043 0201 	orr.w	r2, r3, #1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff ff75 	bl	8003542 <LL_ADC_REG_IsConversionOngoing>
 8003658:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 80bf 	bne.w	80037e6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 80bb 	bne.w	80037e6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003678:	f043 0202 	orr.w	r2, r3, #2
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff35 	bl	80034f4 <LL_ADC_IsEnabled>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003690:	485d      	ldr	r0, [pc, #372]	; (8003808 <HAL_ADC_Init+0x278>)
 8003692:	f7ff ff2f 	bl	80034f4 <LL_ADC_IsEnabled>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	4619      	mov	r1, r3
 80036a2:	485a      	ldr	r0, [pc, #360]	; (800380c <HAL_ADC_Init+0x27c>)
 80036a4:	f7ff fdac 	bl	8003200 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7e5b      	ldrb	r3, [r3, #25]
 80036ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80036b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80036be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d106      	bne.n	80036e4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	3b01      	subs	r3, #1
 80036dc:	045b      	lsls	r3, r3, #17
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	4b42      	ldr	r3, [pc, #264]	; (8003810 <HAL_ADC_Init+0x280>)
 8003708:	4013      	ands	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	69b9      	ldr	r1, [r7, #24]
 8003710:	430b      	orrs	r3, r1
 8003712:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff25 	bl	8003568 <LL_ADC_INJ_IsConversionOngoing>
 800371e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d13d      	bne.n	80037a2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d13a      	bne.n	80037a2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003730:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003738:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003748:	f023 0302 	bic.w	r3, r3, #2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	430b      	orrs	r3, r1
 8003754:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800375c:	2b01      	cmp	r3, #1
 800375e:	d118      	bne.n	8003792 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800376a:	f023 0304 	bic.w	r3, r3, #4
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003776:	4311      	orrs	r1, r2
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800377c:	4311      	orrs	r1, r2
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003782:	430a      	orrs	r2, r1
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	611a      	str	r2, [r3, #16]
 8003790:	e007      	b.n	80037a2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0201 	bic.w	r2, r2, #1
 80037a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d10c      	bne.n	80037c4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	f023 010f 	bic.w	r1, r3, #15
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	1e5a      	subs	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	631a      	str	r2, [r3, #48]	; 0x30
 80037c2:	e007      	b.n	80037d4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 020f 	bic.w	r2, r2, #15
 80037d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d8:	f023 0303 	bic.w	r3, r3, #3
 80037dc:	f043 0201 	orr.w	r2, r3, #1
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	655a      	str	r2, [r3, #84]	; 0x54
 80037e4:	e007      	b.n	80037f6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f043 0210 	orr.w	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80037f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3720      	adds	r7, #32
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000018 	.word	0x20000018
 8003804:	053e2d63 	.word	0x053e2d63
 8003808:	50040000 	.word	0x50040000
 800380c:	50040300 	.word	0x50040300
 8003810:	fff0c007 	.word	0xfff0c007

08003814 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fe8e 	bl	8003542 <LL_ADC_REG_IsConversionOngoing>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d14f      	bne.n	80038cc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_ADC_Start+0x26>
 8003836:	2302      	movs	r3, #2
 8003838:	e04b      	b.n	80038d2 <HAL_ADC_Start+0xbe>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fcc8 	bl	80041d8 <ADC_Enable>
 8003848:	4603      	mov	r3, r0
 800384a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d137      	bne.n	80038c2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003856:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003872:	d106      	bne.n	8003882 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	f023 0206 	bic.w	r2, r3, #6
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	659a      	str	r2, [r3, #88]	; 0x58
 8003880:	e002      	b.n	8003888 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	221c      	movs	r2, #28
 800388e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff fe2d 	bl	800351a <LL_ADC_REG_StartConversion>
 80038c0:	e006      	b.n	80038d0 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038ca:	e001      	b.n	80038d0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038cc:	2302      	movs	r3, #2
 80038ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d102      	bne.n	80038f2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80038ec:	2308      	movs	r3, #8
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e010      	b.n	8003914 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e06f      	b.n	80039f0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003910:	2304      	movs	r3, #4
 8003912:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003914:	f7ff fc68 	bl	80031e8 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800391a:	e021      	b.n	8003960 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003922:	d01d      	beq.n	8003960 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003924:	f7ff fc60 	bl	80031e8 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d302      	bcc.n	800393a <HAL_ADC_PollForConversion+0x60>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d112      	bne.n	8003960 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f043 0204 	orr.w	r2, r3, #4
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e047      	b.n	80039f0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	4013      	ands	r3, r2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0d6      	beq.n	800391c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff fcc7 	bl	8003312 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d01c      	beq.n	80039c4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	7e5b      	ldrb	r3, [r3, #25]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d118      	bne.n	80039c4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b08      	cmp	r3, #8
 800399e:	d111      	bne.n	80039c4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	f043 0201 	orr.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d104      	bne.n	80039dc <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2208      	movs	r2, #8
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	e008      	b.n	80039ee <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	220c      	movs	r2, #12
 80039ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b0b6      	sub	sp, #216	; 0xd8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_ADC_ConfigChannel+0x22>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e3bb      	b.n	80041ae <HAL_ADC_ConfigChannel+0x79a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fd7d 	bl	8003542 <LL_ADC_REG_IsConversionOngoing>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f040 83a0 	bne.w	8004190 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d824      	bhi.n	8003aaa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	3b02      	subs	r3, #2
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d81b      	bhi.n	8003aa2 <HAL_ADC_ConfigChannel+0x8e>
 8003a6a:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <HAL_ADC_ConfigChannel+0x5c>)
 8003a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a70:	08003a81 	.word	0x08003a81
 8003a74:	08003a89 	.word	0x08003a89
 8003a78:	08003a91 	.word	0x08003a91
 8003a7c:	08003a99 	.word	0x08003a99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003a80:	230c      	movs	r3, #12
 8003a82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003a86:	e010      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003a88:	2312      	movs	r3, #18
 8003a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003a8e:	e00c      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003a90:	2318      	movs	r3, #24
 8003a92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003a96:	e008      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003aa0:	e003      	b.n	8003aaa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003aa2:	2306      	movs	r3, #6
 8003aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003aa8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003ab8:	f7ff fc3e 	bl	8003338 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fd3e 	bl	8003542 <LL_ADC_REG_IsConversionOngoing>
 8003ac6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fd4a 	bl	8003568 <LL_ADC_INJ_IsConversionOngoing>
 8003ad4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ad8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 81a4 	bne.w	8003e2a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 819f 	bne.w	8003e2a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6819      	ldr	r1, [r3, #0]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	461a      	mov	r2, r3
 8003afa:	f7ff fc49 	bl	8003390 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	08db      	lsrs	r3, r3, #3
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d00a      	beq.n	8003b36 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6919      	ldr	r1, [r3, #16]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b30:	f7ff fb9a 	bl	8003268 <LL_ADC_SetOffset>
 8003b34:	e179      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff fbb7 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10a      	bne.n	8003b62 <HAL_ADC_ConfigChannel+0x14e>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fbac 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	0e9b      	lsrs	r3, r3, #26
 8003b5c:	f003 021f 	and.w	r2, r3, #31
 8003b60:	e01e      	b.n	8003ba0 <HAL_ADC_ConfigChannel+0x18c>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fba1 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003b84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003b88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003b90:	2320      	movs	r3, #32
 8003b92:	e004      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003b94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d105      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x1a4>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	0e9b      	lsrs	r3, r3, #26
 8003bb2:	f003 031f 	and.w	r3, r3, #31
 8003bb6:	e018      	b.n	8003bea <HAL_ADC_ConfigChannel+0x1d6>
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bc4:	fa93 f3a3 	rbit	r3, r3
 8003bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003bd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	e004      	b.n	8003bea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003be0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003be4:	fab3 f383 	clz	r3, r3
 8003be8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d106      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fb70 	bl	80032dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fb54 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10a      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x214>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff fb49 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	0e9b      	lsrs	r3, r3, #26
 8003c22:	f003 021f 	and.w	r2, r3, #31
 8003c26:	e01e      	b.n	8003c66 <HAL_ADC_ConfigChannel+0x252>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fb3e 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c3e:	fa93 f3a3 	rbit	r3, r3
 8003c42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003c56:	2320      	movs	r3, #32
 8003c58:	e004      	b.n	8003c64 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c5e:	fab3 f383 	clz	r3, r3
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d105      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x26a>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	0e9b      	lsrs	r3, r3, #26
 8003c78:	f003 031f 	and.w	r3, r3, #31
 8003c7c:	e018      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x29c>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003c9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003ca2:	2320      	movs	r3, #32
 8003ca4:	e004      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003ca6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003caa:	fab3 f383 	clz	r3, r3
 8003cae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d106      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2101      	movs	r1, #1
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff fb0d 	bl	80032dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2102      	movs	r1, #2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff faf1 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <HAL_ADC_ConfigChannel+0x2da>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fae6 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	0e9b      	lsrs	r3, r3, #26
 8003ce8:	f003 021f 	and.w	r2, r3, #31
 8003cec:	e01e      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x318>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fadb 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003d1c:	2320      	movs	r3, #32
 8003d1e:	e004      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <HAL_ADC_ConfigChannel+0x330>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	e014      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x35a>
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d4c:	fa93 f3a3 	rbit	r3, r3
 8003d50:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e004      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d106      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2200      	movs	r2, #0
 8003d78:	2102      	movs	r1, #2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff faae 	bl	80032dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2103      	movs	r1, #3
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fa92 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x398>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fa87 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003da2:	4603      	mov	r3, r0
 8003da4:	0e9b      	lsrs	r3, r3, #26
 8003da6:	f003 021f 	and.w	r2, r3, #31
 8003daa:	e017      	b.n	8003ddc <HAL_ADC_ConfigChannel+0x3c8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2103      	movs	r1, #3
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fa7c 	bl	80032b0 <LL_ADC_GetOffsetChannel>
 8003db8:	4603      	mov	r3, r0
 8003dba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8003dce:	2320      	movs	r3, #32
 8003dd0:	e003      	b.n	8003dda <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8003dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd4:	fab3 f383 	clz	r3, r3
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x3e0>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	e011      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x404>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e04:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	e003      	b.n	8003e18 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e12:	fab3 f383 	clz	r3, r3
 8003e16:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d106      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2103      	movs	r1, #3
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff fa59 	bl	80032dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fb60 	bl	80034f4 <LL_ADC_IsEnabled>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 8140 	bne.w	80040bc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6819      	ldr	r1, [r3, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f7ff facd 	bl	80033e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	4a8f      	ldr	r2, [pc, #572]	; (8004090 <HAL_ADC_ConfigChannel+0x67c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	f040 8131 	bne.w	80040bc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x46e>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	0e9b      	lsrs	r3, r3, #26
 8003e70:	3301      	adds	r3, #1
 8003e72:	f003 031f 	and.w	r3, r3, #31
 8003e76:	2b09      	cmp	r3, #9
 8003e78:	bf94      	ite	ls
 8003e7a:	2301      	movls	r3, #1
 8003e7c:	2300      	movhi	r3, #0
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	e019      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x4a2>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e92:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003e9a:	2320      	movs	r3, #32
 8003e9c:	e003      	b.n	8003ea6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea0:	fab3 f383 	clz	r3, r3
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2b09      	cmp	r3, #9
 8003eae:	bf94      	ite	ls
 8003eb0:	2301      	movls	r3, #1
 8003eb2:	2300      	movhi	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d079      	beq.n	8003fae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d107      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x4c2>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	0e9b      	lsrs	r3, r3, #26
 8003ecc:	3301      	adds	r3, #1
 8003ece:	069b      	lsls	r3, r3, #26
 8003ed0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ed4:	e015      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x4ee>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ee6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003eee:	2320      	movs	r3, #32
 8003ef0:	e003      	b.n	8003efa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ef4:	fab3 f383 	clz	r3, r3
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	069b      	lsls	r3, r3, #26
 8003efe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d109      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x50e>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	0e9b      	lsrs	r3, r3, #26
 8003f14:	3301      	adds	r3, #1
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	e017      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x53e>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f32:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003f3a:	2320      	movs	r3, #32
 8003f3c:	e003      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f40:	fab3 f383 	clz	r3, r3
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	3301      	adds	r3, #1
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f52:	ea42 0103 	orr.w	r1, r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10a      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x564>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	0e9b      	lsrs	r3, r3, #26
 8003f68:	3301      	adds	r3, #1
 8003f6a:	f003 021f 	and.w	r2, r3, #31
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	051b      	lsls	r3, r3, #20
 8003f76:	e018      	b.n	8003faa <HAL_ADC_ConfigChannel+0x596>
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003f90:	2320      	movs	r3, #32
 8003f92:	e003      	b.n	8003f9c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f003 021f 	and.w	r2, r3, #31
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003faa:	430b      	orrs	r3, r1
 8003fac:	e081      	b.n	80040b2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x5b6>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	0e9b      	lsrs	r3, r3, #26
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	069b      	lsls	r3, r3, #26
 8003fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fc8:	e015      	b.n	8003ff6 <HAL_ADC_ConfigChannel+0x5e2>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003fe2:	2320      	movs	r3, #32
 8003fe4:	e003      	b.n	8003fee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	3301      	adds	r3, #1
 8003ff0:	069b      	lsls	r3, r3, #26
 8003ff2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <HAL_ADC_ConfigChannel+0x602>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	0e9b      	lsrs	r3, r3, #26
 8004008:	3301      	adds	r3, #1
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2101      	movs	r1, #1
 8004010:	fa01 f303 	lsl.w	r3, r1, r3
 8004014:	e017      	b.n	8004046 <HAL_ADC_ConfigChannel+0x632>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	fa93 f3a3 	rbit	r3, r3
 8004022:	61bb      	str	r3, [r7, #24]
  return result;
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800402e:	2320      	movs	r3, #32
 8004030:	e003      	b.n	800403a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	fab3 f383 	clz	r3, r3
 8004038:	b2db      	uxtb	r3, r3
 800403a:	3301      	adds	r3, #1
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	ea42 0103 	orr.w	r1, r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10d      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x65e>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	0e9b      	lsrs	r3, r3, #26
 800405c:	3301      	adds	r3, #1
 800405e:	f003 021f 	and.w	r2, r3, #31
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	3b1e      	subs	r3, #30
 800406a:	051b      	lsls	r3, r3, #20
 800406c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004070:	e01e      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x69c>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	fa93 f3a3 	rbit	r3, r3
 800407e:	60fb      	str	r3, [r7, #12]
  return result;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800408a:	2320      	movs	r3, #32
 800408c:	e006      	b.n	800409c <HAL_ADC_ConfigChannel+0x688>
 800408e:	bf00      	nop
 8004090:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f003 021f 	and.w	r2, r3, #31
 80040a2:	4613      	mov	r3, r2
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	4413      	add	r3, r2
 80040a8:	3b1e      	subs	r3, #30
 80040aa:	051b      	lsls	r3, r3, #20
 80040ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040b6:	4619      	mov	r1, r3
 80040b8:	f7ff f96a 	bl	8003390 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4b3d      	ldr	r3, [pc, #244]	; (80041b8 <HAL_ADC_ConfigChannel+0x7a4>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d06c      	beq.n	80041a2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040c8:	483c      	ldr	r0, [pc, #240]	; (80041bc <HAL_ADC_ConfigChannel+0x7a8>)
 80040ca:	f7ff f8bf 	bl	800324c <LL_ADC_GetCommonPathInternalCh>
 80040ce:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <HAL_ADC_ConfigChannel+0x7ac>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d127      	bne.n	800412c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80040dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d121      	bne.n	800412c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a35      	ldr	r2, [pc, #212]	; (80041c4 <HAL_ADC_ConfigChannel+0x7b0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d157      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80040f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040fa:	4619      	mov	r1, r3
 80040fc:	482f      	ldr	r0, [pc, #188]	; (80041bc <HAL_ADC_ConfigChannel+0x7a8>)
 80040fe:	f7ff f892 	bl	8003226 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004102:	4b31      	ldr	r3, [pc, #196]	; (80041c8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	099b      	lsrs	r3, r3, #6
 8004108:	4a30      	ldr	r2, [pc, #192]	; (80041cc <HAL_ADC_ConfigChannel+0x7b8>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	099b      	lsrs	r3, r3, #6
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	4613      	mov	r3, r2
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800411c:	e002      	b.n	8004124 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3b01      	subs	r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f9      	bne.n	800411e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800412a:	e03a      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a27      	ldr	r2, [pc, #156]	; (80041d0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d113      	bne.n	800415e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800413a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10d      	bne.n	800415e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <HAL_ADC_ConfigChannel+0x7b0>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d12a      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800414c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004150:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004154:	4619      	mov	r1, r3
 8004156:	4819      	ldr	r0, [pc, #100]	; (80041bc <HAL_ADC_ConfigChannel+0x7a8>)
 8004158:	f7ff f865 	bl	8003226 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800415c:	e021      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d11c      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800416c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d116      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <HAL_ADC_ConfigChannel+0x7b0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d111      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800417e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004182:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004186:	4619      	mov	r1, r3
 8004188:	480c      	ldr	r0, [pc, #48]	; (80041bc <HAL_ADC_ConfigChannel+0x7a8>)
 800418a:	f7ff f84c 	bl	8003226 <LL_ADC_SetCommonPathInternalCh>
 800418e:	e008      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80041aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	37d8      	adds	r7, #216	; 0xd8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	80080000 	.word	0x80080000
 80041bc:	50040300 	.word	0x50040300
 80041c0:	c7520000 	.word	0xc7520000
 80041c4:	50040000 	.word	0x50040000
 80041c8:	20000018 	.word	0x20000018
 80041cc:	053e2d63 	.word	0x053e2d63
 80041d0:	cb840000 	.word	0xcb840000
 80041d4:	80000001 	.word	0x80000001

080041d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f7ff f983 	bl	80034f4 <LL_ADC_IsEnabled>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d169      	bne.n	80042c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	4b36      	ldr	r3, [pc, #216]	; (80042d4 <ADC_Enable+0xfc>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00d      	beq.n	800421e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f043 0210 	orr.w	r2, r3, #16
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	f043 0201 	orr.w	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e055      	b.n	80042ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff f952 	bl	80034cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004228:	482b      	ldr	r0, [pc, #172]	; (80042d8 <ADC_Enable+0x100>)
 800422a:	f7ff f80f 	bl	800324c <LL_ADC_GetCommonPathInternalCh>
 800422e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004238:	4b28      	ldr	r3, [pc, #160]	; (80042dc <ADC_Enable+0x104>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	099b      	lsrs	r3, r3, #6
 800423e:	4a28      	ldr	r2, [pc, #160]	; (80042e0 <ADC_Enable+0x108>)
 8004240:	fba2 2303 	umull	r2, r3, r2, r3
 8004244:	099b      	lsrs	r3, r3, #6
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004252:	e002      	b.n	800425a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	3b01      	subs	r3, #1
 8004258:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f9      	bne.n	8004254 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004260:	f7fe ffc2 	bl	80031e8 <HAL_GetTick>
 8004264:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004266:	e028      	b.n	80042ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff f941 	bl	80034f4 <LL_ADC_IsEnabled>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d104      	bne.n	8004282 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff f925 	bl	80034cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004282:	f7fe ffb1 	bl	80031e8 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d914      	bls.n	80042ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b01      	cmp	r3, #1
 800429c:	d00d      	beq.n	80042ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	f043 0210 	orr.w	r2, r3, #16
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ae:	f043 0201 	orr.w	r2, r3, #1
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e007      	b.n	80042ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d1cf      	bne.n	8004268 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	8000003f 	.word	0x8000003f
 80042d8:	50040300 	.word	0x50040300
 80042dc:	20000018 	.word	0x20000018
 80042e0:	053e2d63 	.word	0x053e2d63

080042e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f4:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <__NVIC_SetPriorityGrouping+0x44>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004300:	4013      	ands	r3, r2
 8004302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800430c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004316:	4a04      	ldr	r2, [pc, #16]	; (8004328 <__NVIC_SetPriorityGrouping+0x44>)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	60d3      	str	r3, [r2, #12]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800432c:	b480      	push	{r7}
 800432e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004330:	4b04      	ldr	r3, [pc, #16]	; (8004344 <__NVIC_GetPriorityGrouping+0x18>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	0a1b      	lsrs	r3, r3, #8
 8004336:	f003 0307 	and.w	r3, r3, #7
}
 800433a:	4618      	mov	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	e000ed00 	.word	0xe000ed00

08004348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	2b00      	cmp	r3, #0
 8004358:	db0b      	blt.n	8004372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435a:	79fb      	ldrb	r3, [r7, #7]
 800435c:	f003 021f 	and.w	r2, r3, #31
 8004360:	4907      	ldr	r1, [pc, #28]	; (8004380 <__NVIC_EnableIRQ+0x38>)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	095b      	lsrs	r3, r3, #5
 8004368:	2001      	movs	r0, #1
 800436a:	fa00 f202 	lsl.w	r2, r0, r2
 800436e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004372:	bf00      	nop
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	e000e100 	.word	0xe000e100

08004384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	4603      	mov	r3, r0
 800438c:	6039      	str	r1, [r7, #0]
 800438e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004394:	2b00      	cmp	r3, #0
 8004396:	db0a      	blt.n	80043ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	490c      	ldr	r1, [pc, #48]	; (80043d0 <__NVIC_SetPriority+0x4c>)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	0112      	lsls	r2, r2, #4
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	440b      	add	r3, r1
 80043a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043ac:	e00a      	b.n	80043c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	4908      	ldr	r1, [pc, #32]	; (80043d4 <__NVIC_SetPriority+0x50>)
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	3b04      	subs	r3, #4
 80043bc:	0112      	lsls	r2, r2, #4
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	440b      	add	r3, r1
 80043c2:	761a      	strb	r2, [r3, #24]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	e000e100 	.word	0xe000e100
 80043d4:	e000ed00 	.word	0xe000ed00

080043d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f1c3 0307 	rsb	r3, r3, #7
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	bf28      	it	cs
 80043f6:	2304      	movcs	r3, #4
 80043f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	3304      	adds	r3, #4
 80043fe:	2b06      	cmp	r3, #6
 8004400:	d902      	bls.n	8004408 <NVIC_EncodePriority+0x30>
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	3b03      	subs	r3, #3
 8004406:	e000      	b.n	800440a <NVIC_EncodePriority+0x32>
 8004408:	2300      	movs	r3, #0
 800440a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800440c:	f04f 32ff 	mov.w	r2, #4294967295
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43da      	mvns	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	401a      	ands	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004420:	f04f 31ff 	mov.w	r1, #4294967295
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	fa01 f303 	lsl.w	r3, r1, r3
 800442a:	43d9      	mvns	r1, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004430:	4313      	orrs	r3, r2
         );
}
 8004432:	4618      	mov	r0, r3
 8004434:	3724      	adds	r7, #36	; 0x24
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3b01      	subs	r3, #1
 800444c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004450:	d301      	bcc.n	8004456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004452:	2301      	movs	r3, #1
 8004454:	e00f      	b.n	8004476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004456:	4a0a      	ldr	r2, [pc, #40]	; (8004480 <SysTick_Config+0x40>)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3b01      	subs	r3, #1
 800445c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800445e:	210f      	movs	r1, #15
 8004460:	f04f 30ff 	mov.w	r0, #4294967295
 8004464:	f7ff ff8e 	bl	8004384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <SysTick_Config+0x40>)
 800446a:	2200      	movs	r2, #0
 800446c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800446e:	4b04      	ldr	r3, [pc, #16]	; (8004480 <SysTick_Config+0x40>)
 8004470:	2207      	movs	r2, #7
 8004472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	e000e010 	.word	0xe000e010

08004484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff ff29 	bl	80042e4 <__NVIC_SetPriorityGrouping>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b086      	sub	sp, #24
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044ac:	f7ff ff3e 	bl	800432c <__NVIC_GetPriorityGrouping>
 80044b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	f7ff ff8e 	bl	80043d8 <NVIC_EncodePriority>
 80044bc:	4602      	mov	r2, r0
 80044be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c2:	4611      	mov	r1, r2
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff5d 	bl	8004384 <__NVIC_SetPriority>
}
 80044ca:	bf00      	nop
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	4603      	mov	r3, r0
 80044da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff31 	bl	8004348 <__NVIC_EnableIRQ>
}
 80044e6:	bf00      	nop
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff ffa2 	bl	8004440 <SysTick_Config>
 80044fc:	4603      	mov	r3, r0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004516:	e148      	b.n	80047aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	2101      	movs	r1, #1
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	4013      	ands	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 813a 	beq.w	80047a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d005      	beq.n	8004548 <HAL_GPIO_Init+0x40>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d130      	bne.n	80045aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4013      	ands	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4313      	orrs	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800457e:	2201      	movs	r2, #1
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4013      	ands	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	091b      	lsrs	r3, r3, #4
 8004594:	f003 0201 	and.w	r2, r3, #1
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	fa02 f303 	lsl.w	r3, r2, r3
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d017      	beq.n	80045e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	2203      	movs	r2, #3
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4013      	ands	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d123      	bne.n	800463a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	08da      	lsrs	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3208      	adds	r2, #8
 80045fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	220f      	movs	r2, #15
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	43db      	mvns	r3, r3
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	4013      	ands	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	08da      	lsrs	r2, r3, #3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3208      	adds	r2, #8
 8004634:	6939      	ldr	r1, [r7, #16]
 8004636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	2203      	movs	r2, #3
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4013      	ands	r3, r2
 8004650:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0203 	and.w	r2, r3, #3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	4313      	orrs	r3, r2
 8004666:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8094 	beq.w	80047a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800467c:	4b52      	ldr	r3, [pc, #328]	; (80047c8 <HAL_GPIO_Init+0x2c0>)
 800467e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004680:	4a51      	ldr	r2, [pc, #324]	; (80047c8 <HAL_GPIO_Init+0x2c0>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6613      	str	r3, [r2, #96]	; 0x60
 8004688:	4b4f      	ldr	r3, [pc, #316]	; (80047c8 <HAL_GPIO_Init+0x2c0>)
 800468a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004694:	4a4d      	ldr	r2, [pc, #308]	; (80047cc <HAL_GPIO_Init+0x2c4>)
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	089b      	lsrs	r3, r3, #2
 800469a:	3302      	adds	r3, #2
 800469c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	220f      	movs	r2, #15
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4013      	ands	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046be:	d00d      	beq.n	80046dc <HAL_GPIO_Init+0x1d4>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a43      	ldr	r2, [pc, #268]	; (80047d0 <HAL_GPIO_Init+0x2c8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <HAL_GPIO_Init+0x1d0>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a42      	ldr	r2, [pc, #264]	; (80047d4 <HAL_GPIO_Init+0x2cc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d101      	bne.n	80046d4 <HAL_GPIO_Init+0x1cc>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e004      	b.n	80046de <HAL_GPIO_Init+0x1d6>
 80046d4:	2307      	movs	r3, #7
 80046d6:	e002      	b.n	80046de <HAL_GPIO_Init+0x1d6>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <HAL_GPIO_Init+0x1d6>
 80046dc:	2300      	movs	r3, #0
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	f002 0203 	and.w	r2, r2, #3
 80046e4:	0092      	lsls	r2, r2, #2
 80046e6:	4093      	lsls	r3, r2
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046ee:	4937      	ldr	r1, [pc, #220]	; (80047cc <HAL_GPIO_Init+0x2c4>)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	089b      	lsrs	r3, r3, #2
 80046f4:	3302      	adds	r3, #2
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046fc:	4b36      	ldr	r3, [pc, #216]	; (80047d8 <HAL_GPIO_Init+0x2d0>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	43db      	mvns	r3, r3
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4013      	ands	r3, r2
 800470a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004720:	4a2d      	ldr	r2, [pc, #180]	; (80047d8 <HAL_GPIO_Init+0x2d0>)
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004726:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <HAL_GPIO_Init+0x2d0>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	43db      	mvns	r3, r3
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4013      	ands	r3, r2
 8004734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800474a:	4a23      	ldr	r2, [pc, #140]	; (80047d8 <HAL_GPIO_Init+0x2d0>)
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004750:	4b21      	ldr	r3, [pc, #132]	; (80047d8 <HAL_GPIO_Init+0x2d0>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	43db      	mvns	r3, r3
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004774:	4a18      	ldr	r2, [pc, #96]	; (80047d8 <HAL_GPIO_Init+0x2d0>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800477a:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <HAL_GPIO_Init+0x2d0>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	43db      	mvns	r3, r3
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4013      	ands	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800479e:	4a0e      	ldr	r2, [pc, #56]	; (80047d8 <HAL_GPIO_Init+0x2d0>)
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3301      	adds	r3, #1
 80047a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	fa22 f303 	lsr.w	r3, r2, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f47f aeaf 	bne.w	8004518 <HAL_GPIO_Init+0x10>
  }
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	371c      	adds	r7, #28
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40010000 	.word	0x40010000
 80047d0:	48000400 	.word	0x48000400
 80047d4:	48000800 	.word	0x48000800
 80047d8:	40010400 	.word	0x40010400

080047dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
 80047e8:	4613      	mov	r3, r2
 80047ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047ec:	787b      	ldrb	r3, [r7, #1]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047f2:	887a      	ldrh	r2, [r7, #2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047f8:	e002      	b.n	8004800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047fa:	887a      	ldrh	r2, [r7, #2]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e08d      	b.n	800493a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fe f920 	bl	8002a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	; 0x24
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800485c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800486c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d107      	bne.n	8004886 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	e006      	b.n	8004894 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004892:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b02      	cmp	r3, #2
 800489a:	d108      	bne.n	80048ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	e007      	b.n	80048be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68da      	ldr	r2, [r3, #12]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69d9      	ldr	r1, [r3, #28]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1a      	ldr	r2, [r3, #32]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	461a      	mov	r2, r3
 8004950:	460b      	mov	r3, r1
 8004952:	817b      	strh	r3, [r7, #10]
 8004954:	4613      	mov	r3, r2
 8004956:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b20      	cmp	r3, #32
 8004962:	f040 80fd 	bne.w	8004b60 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_I2C_Master_Transmit+0x30>
 8004970:	2302      	movs	r3, #2
 8004972:	e0f6      	b.n	8004b62 <HAL_I2C_Master_Transmit+0x21e>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800497c:	f7fe fc34 	bl	80031e8 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	9300      	str	r3, [sp, #0]
 8004986:	2319      	movs	r3, #25
 8004988:	2201      	movs	r2, #1
 800498a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fa0a 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e0e1      	b.n	8004b62 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2221      	movs	r2, #33	; 0x21
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2210      	movs	r2, #16
 80049aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	893a      	ldrh	r2, [r7, #8]
 80049be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	2bff      	cmp	r3, #255	; 0xff
 80049ce:	d906      	bls.n	80049de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	22ff      	movs	r2, #255	; 0xff
 80049d4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80049d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e007      	b.n	80049ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80049e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d024      	beq.n	8004a40 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	781a      	ldrb	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	8979      	ldrh	r1, [r7, #10]
 8004a32:	4b4e      	ldr	r3, [pc, #312]	; (8004b6c <HAL_I2C_Master_Transmit+0x228>)
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fbf1 	bl	8005220 <I2C_TransferConfig>
 8004a3e:	e066      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	8979      	ldrh	r1, [r7, #10]
 8004a48:	4b48      	ldr	r3, [pc, #288]	; (8004b6c <HAL_I2C_Master_Transmit+0x228>)
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 fbe6 	bl	8005220 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a54:	e05b      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	6a39      	ldr	r1, [r7, #32]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 f9f3 	bl	8004e46 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e07b      	b.n	8004b62 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	781a      	ldrb	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d034      	beq.n	8004b0e <HAL_I2C_Master_Transmit+0x1ca>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d130      	bne.n	8004b0e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2180      	movs	r1, #128	; 0x80
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f976 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e04d      	b.n	8004b62 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2bff      	cmp	r3, #255	; 0xff
 8004ace:	d90e      	bls.n	8004aee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	22ff      	movs	r2, #255	; 0xff
 8004ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	8979      	ldrh	r1, [r7, #10]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fb9a 	bl	8005220 <I2C_TransferConfig>
 8004aec:	e00f      	b.n	8004b0e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	8979      	ldrh	r1, [r7, #10]
 8004b00:	2300      	movs	r3, #0
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fb89 	bl	8005220 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d19e      	bne.n	8004a56 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	6a39      	ldr	r1, [r7, #32]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f9d9 	bl	8004ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e01a      	b.n	8004b62 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2220      	movs	r2, #32
 8004b32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6859      	ldr	r1, [r3, #4]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <HAL_I2C_Master_Transmit+0x22c>)
 8004b40:	400b      	ands	r3, r1
 8004b42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e000      	b.n	8004b62 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004b60:	2302      	movs	r3, #2
  }
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	80002000 	.word	0x80002000
 8004b70:	fe00e800 	.word	0xfe00e800

08004b74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	461a      	mov	r2, r3
 8004b80:	460b      	mov	r3, r1
 8004b82:	817b      	strh	r3, [r7, #10]
 8004b84:	4613      	mov	r3, r2
 8004b86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	f040 80db 	bne.w	8004d4c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_I2C_Master_Receive+0x30>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e0d4      	b.n	8004d4e <HAL_I2C_Master_Receive+0x1da>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bac:	f7fe fb1c 	bl	80031e8 <HAL_GetTick>
 8004bb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	2319      	movs	r3, #25
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f8f2 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e0bf      	b.n	8004d4e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2222      	movs	r2, #34	; 0x22
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2210      	movs	r2, #16
 8004bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	893a      	ldrh	r2, [r7, #8]
 8004bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2bff      	cmp	r3, #255	; 0xff
 8004bfe:	d90e      	bls.n	8004c1e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	22ff      	movs	r2, #255	; 0xff
 8004c04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	8979      	ldrh	r1, [r7, #10]
 8004c0e:	4b52      	ldr	r3, [pc, #328]	; (8004d58 <HAL_I2C_Master_Receive+0x1e4>)
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fb02 	bl	8005220 <I2C_TransferConfig>
 8004c1c:	e06d      	b.n	8004cfa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	8979      	ldrh	r1, [r7, #10]
 8004c30:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <HAL_I2C_Master_Receive+0x1e4>)
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 faf1 	bl	8005220 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004c3e:	e05c      	b.n	8004cfa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	6a39      	ldr	r1, [r7, #32]
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f989 	bl	8004f5c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e07c      	b.n	8004d4e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d034      	beq.n	8004cfa <HAL_I2C_Master_Receive+0x186>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d130      	bne.n	8004cfa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2180      	movs	r1, #128	; 0x80
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f880 	bl	8004da8 <I2C_WaitOnFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e04d      	b.n	8004d4e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	2bff      	cmp	r3, #255	; 0xff
 8004cba:	d90e      	bls.n	8004cda <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	22ff      	movs	r2, #255	; 0xff
 8004cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	8979      	ldrh	r1, [r7, #10]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 faa4 	bl	8005220 <I2C_TransferConfig>
 8004cd8:	e00f      	b.n	8004cfa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	8979      	ldrh	r1, [r7, #10]
 8004cec:	2300      	movs	r3, #0
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 fa93 	bl	8005220 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d19d      	bne.n	8004c40 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	6a39      	ldr	r1, [r7, #32]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f8e3 	bl	8004ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e01a      	b.n	8004d4e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <HAL_I2C_Master_Receive+0x1e8>)
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e000      	b.n	8004d4e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004d4c:	2302      	movs	r3, #2
  }
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	80002400 	.word	0x80002400
 8004d5c:	fe00e800 	.word	0xfe00e800

08004d60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d103      	bne.n	8004d7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d007      	beq.n	8004d9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0201 	orr.w	r2, r2, #1
 8004d9a:	619a      	str	r2, [r3, #24]
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db8:	e031      	b.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d02d      	beq.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fe fa11 	bl	80031e8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d122      	bne.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4013      	ands	r3, r2
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d113      	bne.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e00f      	b.n	8004e3e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2301      	moveq	r3, #1
 8004e30:	2300      	movne	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d0be      	beq.n	8004dba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e52:	e033      	b.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f000 f901 	bl	8005060 <I2C_IsErrorOccurred>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e031      	b.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e6e:	d025      	beq.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e70:	f7fe f9ba 	bl	80031e8 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d302      	bcc.n	8004e86 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11a      	bne.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d013      	beq.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	f043 0220 	orr.w	r2, r3, #32
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d1c4      	bne.n	8004e54 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ee0:	e02f      	b.n	8004f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f8ba 	bl	8005060 <I2C_IsErrorOccurred>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e02d      	b.n	8004f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fe f977 	bl	80031e8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d11a      	bne.n	8004f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d013      	beq.n	8004f42 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	f043 0220 	orr.w	r2, r3, #32
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e007      	b.n	8004f52 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d1c8      	bne.n	8004ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f68:	e06b      	b.n	8005042 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	68b9      	ldr	r1, [r7, #8]
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 f876 	bl	8005060 <I2C_IsErrorOccurred>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e069      	b.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f003 0320 	and.w	r3, r3, #32
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d138      	bne.n	8004ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d105      	bne.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e055      	b.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d107      	bne.n	8004fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2210      	movs	r2, #16
 8004fba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
 8004fc2:	e002      	b.n	8004fca <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b1f      	ldr	r3, [pc, #124]	; (800505c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004fde:	400b      	ands	r3, r1
 8004fe0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2220      	movs	r2, #32
 8004fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e029      	b.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fe f8f3 	bl	80031e8 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d116      	bne.n	8005042 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b04      	cmp	r3, #4
 8005020:	d00f      	beq.n	8005042 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	f043 0220 	orr.w	r2, r3, #32
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e007      	b.n	8005052 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b04      	cmp	r3, #4
 800504e:	d18c      	bne.n	8004f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	fe00e800 	.word	0xfe00e800

08005060 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800507a:	2300      	movs	r3, #0
 800507c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	d068      	beq.n	800515e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2210      	movs	r2, #16
 8005092:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005094:	e049      	b.n	800512a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d045      	beq.n	800512a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800509e:	f7fe f8a3 	bl	80031e8 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <I2C_IsErrorOccurred+0x54>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d13a      	bne.n	800512a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d6:	d121      	bne.n	800511c <I2C_IsErrorOccurred+0xbc>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050de:	d01d      	beq.n	800511c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	2b20      	cmp	r3, #32
 80050e4:	d01a      	beq.n	800511c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80050f6:	f7fe f877 	bl	80031e8 <HAL_GetTick>
 80050fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050fc:	e00e      	b.n	800511c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80050fe:	f7fe f873 	bl	80031e8 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b19      	cmp	r3, #25
 800510a:	d907      	bls.n	800511c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	f043 0320 	orr.w	r3, r3, #32
 8005112:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800511a:	e006      	b.n	800512a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f003 0320 	and.w	r3, r3, #32
 8005126:	2b20      	cmp	r3, #32
 8005128:	d1e9      	bne.n	80050fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b20      	cmp	r3, #32
 8005136:	d003      	beq.n	8005140 <I2C_IsErrorOccurred+0xe0>
 8005138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0aa      	beq.n	8005096 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2220      	movs	r2, #32
 800514e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	f043 0304 	orr.w	r3, r3, #4
 8005156:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00b      	beq.n	8005188 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005180:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00b      	beq.n	80051aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f043 0308 	orr.w	r3, r3, #8
 8005198:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00b      	beq.n	80051cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	f043 0302 	orr.w	r3, r3, #2
 80051ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80051cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d01c      	beq.n	800520e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051d4:	68f8      	ldr	r0, [r7, #12]
 80051d6:	f7ff fdc3 	bl	8004d60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b0d      	ldr	r3, [pc, #52]	; (800521c <I2C_IsErrorOccurred+0x1bc>)
 80051e6:	400b      	ands	r3, r1
 80051e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800520e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005212:	4618      	mov	r0, r3
 8005214:	3728      	adds	r7, #40	; 0x28
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	fe00e800 	.word	0xfe00e800

08005220 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	607b      	str	r3, [r7, #4]
 800522a:	460b      	mov	r3, r1
 800522c:	817b      	strh	r3, [r7, #10]
 800522e:	4613      	mov	r3, r2
 8005230:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005232:	897b      	ldrh	r3, [r7, #10]
 8005234:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005238:	7a7b      	ldrb	r3, [r7, #9]
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005240:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	4313      	orrs	r3, r2
 800524a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800524e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	0d5b      	lsrs	r3, r3, #21
 800525a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800525e:	4b08      	ldr	r3, [pc, #32]	; (8005280 <I2C_TransferConfig+0x60>)
 8005260:	430b      	orrs	r3, r1
 8005262:	43db      	mvns	r3, r3
 8005264:	ea02 0103 	and.w	r1, r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	03ff63ff 	.word	0x03ff63ff

08005284 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b20      	cmp	r3, #32
 8005298:	d138      	bne.n	800530c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e032      	b.n	800530e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	; 0x24
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b20      	cmp	r3, #32
 800532e:	d139      	bne.n	80053a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005336:	2b01      	cmp	r3, #1
 8005338:	d101      	bne.n	800533e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800533a:	2302      	movs	r3, #2
 800533c:	e033      	b.n	80053a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2224      	movs	r2, #36	; 0x24
 800534a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800536c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e000      	b.n	80053a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053a4:	2302      	movs	r3, #2
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
	...

080053b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053b8:	4b04      	ldr	r3, [pc, #16]	; (80053cc <HAL_PWREx_GetVoltageRange+0x18>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40007000 	.word	0x40007000

080053d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053de:	d130      	bne.n	8005442 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80053e0:	4b23      	ldr	r3, [pc, #140]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053ec:	d038      	beq.n	8005460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053ee:	4b20      	ldr	r3, [pc, #128]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053fe:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2232      	movs	r2, #50	; 0x32
 8005404:	fb02 f303 	mul.w	r3, r2, r3
 8005408:	4a1b      	ldr	r2, [pc, #108]	; (8005478 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	0c9b      	lsrs	r3, r3, #18
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005414:	e002      	b.n	800541c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	3b01      	subs	r3, #1
 800541a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800541c:	4b14      	ldr	r3, [pc, #80]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d102      	bne.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x60>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1f2      	bne.n	8005416 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005430:	4b0f      	ldr	r3, [pc, #60]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543c:	d110      	bne.n	8005460 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e00f      	b.n	8005462 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800544e:	d007      	beq.n	8005460 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005458:	4a05      	ldr	r2, [pc, #20]	; (8005470 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800545a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800545e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40007000 	.word	0x40007000
 8005474:	20000018 	.word	0x20000018
 8005478:	431bde83 	.word	0x431bde83

0800547c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d102      	bne.n	8005490 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f000 bc02 	b.w	8005c94 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005490:	4b96      	ldr	r3, [pc, #600]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800549a:	4b94      	ldr	r3, [pc, #592]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0303 	and.w	r3, r3, #3
 80054a2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80e4 	beq.w	800567a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <HAL_RCC_OscConfig+0x4c>
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b0c      	cmp	r3, #12
 80054bc:	f040 808b 	bne.w	80055d6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	f040 8087 	bne.w	80055d6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80054c8:	4b88      	ldr	r3, [pc, #544]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <HAL_RCC_OscConfig+0x64>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e3d9      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1a      	ldr	r2, [r3, #32]
 80054e4:	4b81      	ldr	r3, [pc, #516]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d004      	beq.n	80054fa <HAL_RCC_OscConfig+0x7e>
 80054f0:	4b7e      	ldr	r3, [pc, #504]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054f8:	e005      	b.n	8005506 <HAL_RCC_OscConfig+0x8a>
 80054fa:	4b7c      	ldr	r3, [pc, #496]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80054fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005500:	091b      	lsrs	r3, r3, #4
 8005502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005506:	4293      	cmp	r3, r2
 8005508:	d223      	bcs.n	8005552 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fd8c 	bl	800602c <RCC_SetFlashLatencyFromMSIRange>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e3ba      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800551e:	4b73      	ldr	r3, [pc, #460]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a72      	ldr	r2, [pc, #456]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005524:	f043 0308 	orr.w	r3, r3, #8
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	4b70      	ldr	r3, [pc, #448]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	496d      	ldr	r1, [pc, #436]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005538:	4313      	orrs	r3, r2
 800553a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800553c:	4b6b      	ldr	r3, [pc, #428]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	021b      	lsls	r3, r3, #8
 800554a:	4968      	ldr	r1, [pc, #416]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]
 8005550:	e025      	b.n	800559e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005552:	4b66      	ldr	r3, [pc, #408]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a65      	ldr	r2, [pc, #404]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005558:	f043 0308 	orr.w	r3, r3, #8
 800555c:	6013      	str	r3, [r2, #0]
 800555e:	4b63      	ldr	r3, [pc, #396]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	4960      	ldr	r1, [pc, #384]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800556c:	4313      	orrs	r3, r2
 800556e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005570:	4b5e      	ldr	r3, [pc, #376]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	021b      	lsls	r3, r3, #8
 800557e:	495b      	ldr	r1, [pc, #364]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005580:	4313      	orrs	r3, r2
 8005582:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d109      	bne.n	800559e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 fd4c 	bl	800602c <RCC_SetFlashLatencyFromMSIRange>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e37a      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800559e:	f000 fc81 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 80055a2:	4602      	mov	r2, r0
 80055a4:	4b51      	ldr	r3, [pc, #324]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	4950      	ldr	r1, [pc, #320]	; (80056f0 <HAL_RCC_OscConfig+0x274>)
 80055b0:	5ccb      	ldrb	r3, [r1, r3]
 80055b2:	f003 031f 	and.w	r3, r3, #31
 80055b6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ba:	4a4e      	ldr	r2, [pc, #312]	; (80056f4 <HAL_RCC_OscConfig+0x278>)
 80055bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055be:	4b4e      	ldr	r3, [pc, #312]	; (80056f8 <HAL_RCC_OscConfig+0x27c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fd fdc0 	bl	8003148 <HAL_InitTick>
 80055c8:	4603      	mov	r3, r0
 80055ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d052      	beq.n	8005678 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	e35e      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d032      	beq.n	8005644 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055de:	4b43      	ldr	r3, [pc, #268]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a42      	ldr	r2, [pc, #264]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055ea:	f7fd fdfd 	bl	80031e8 <HAL_GetTick>
 80055ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055f0:	e008      	b.n	8005604 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055f2:	f7fd fdf9 	bl	80031e8 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d901      	bls.n	8005604 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e347      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005604:	4b39      	ldr	r3, [pc, #228]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0f0      	beq.n	80055f2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005610:	4b36      	ldr	r3, [pc, #216]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a35      	ldr	r2, [pc, #212]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005616:	f043 0308 	orr.w	r3, r3, #8
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	4b33      	ldr	r3, [pc, #204]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a1b      	ldr	r3, [r3, #32]
 8005628:	4930      	ldr	r1, [pc, #192]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800562a:	4313      	orrs	r3, r2
 800562c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800562e:	4b2f      	ldr	r3, [pc, #188]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	492b      	ldr	r1, [pc, #172]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800563e:	4313      	orrs	r3, r2
 8005640:	604b      	str	r3, [r1, #4]
 8005642:	e01a      	b.n	800567a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005644:	4b29      	ldr	r3, [pc, #164]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a28      	ldr	r2, [pc, #160]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800564a:	f023 0301 	bic.w	r3, r3, #1
 800564e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005650:	f7fd fdca 	bl	80031e8 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005658:	f7fd fdc6 	bl	80031e8 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e314      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800566a:	4b20      	ldr	r3, [pc, #128]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1f0      	bne.n	8005658 <HAL_RCC_OscConfig+0x1dc>
 8005676:	e000      	b.n	800567a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005678:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0301 	and.w	r3, r3, #1
 8005682:	2b00      	cmp	r3, #0
 8005684:	d073      	beq.n	800576e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d005      	beq.n	8005698 <HAL_RCC_OscConfig+0x21c>
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b0c      	cmp	r3, #12
 8005690:	d10e      	bne.n	80056b0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d10b      	bne.n	80056b0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005698:	4b14      	ldr	r3, [pc, #80]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d063      	beq.n	800576c <HAL_RCC_OscConfig+0x2f0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d15f      	bne.n	800576c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e2f1      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056b8:	d106      	bne.n	80056c8 <HAL_RCC_OscConfig+0x24c>
 80056ba:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a0b      	ldr	r2, [pc, #44]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80056c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e025      	b.n	8005714 <HAL_RCC_OscConfig+0x298>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056d0:	d114      	bne.n	80056fc <HAL_RCC_OscConfig+0x280>
 80056d2:	4b06      	ldr	r3, [pc, #24]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a05      	ldr	r2, [pc, #20]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80056d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	4b03      	ldr	r3, [pc, #12]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a02      	ldr	r2, [pc, #8]	; (80056ec <HAL_RCC_OscConfig+0x270>)
 80056e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e013      	b.n	8005714 <HAL_RCC_OscConfig+0x298>
 80056ec:	40021000 	.word	0x40021000
 80056f0:	0800ee18 	.word	0x0800ee18
 80056f4:	20000018 	.word	0x20000018
 80056f8:	2000001c 	.word	0x2000001c
 80056fc:	4ba0      	ldr	r3, [pc, #640]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a9f      	ldr	r2, [pc, #636]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	4b9d      	ldr	r3, [pc, #628]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a9c      	ldr	r2, [pc, #624]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 800570e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d013      	beq.n	8005744 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fd fd64 	bl	80031e8 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005724:	f7fd fd60 	bl	80031e8 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b64      	cmp	r3, #100	; 0x64
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e2ae      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005736:	4b92      	ldr	r3, [pc, #584]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x2a8>
 8005742:	e014      	b.n	800576e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005744:	f7fd fd50 	bl	80031e8 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800574c:	f7fd fd4c 	bl	80031e8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e29a      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800575e:	4b88      	ldr	r3, [pc, #544]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1f0      	bne.n	800574c <HAL_RCC_OscConfig+0x2d0>
 800576a:	e000      	b.n	800576e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d060      	beq.n	800583c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b04      	cmp	r3, #4
 800577e:	d005      	beq.n	800578c <HAL_RCC_OscConfig+0x310>
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	2b0c      	cmp	r3, #12
 8005784:	d119      	bne.n	80057ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d116      	bne.n	80057ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800578c:	4b7c      	ldr	r3, [pc, #496]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005794:	2b00      	cmp	r3, #0
 8005796:	d005      	beq.n	80057a4 <HAL_RCC_OscConfig+0x328>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e277      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a4:	4b76      	ldr	r3, [pc, #472]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	061b      	lsls	r3, r3, #24
 80057b2:	4973      	ldr	r1, [pc, #460]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057b8:	e040      	b.n	800583c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d023      	beq.n	800580a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057c2:	4b6f      	ldr	r3, [pc, #444]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a6e      	ldr	r2, [pc, #440]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80057c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ce:	f7fd fd0b 	bl	80031e8 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057d6:	f7fd fd07 	bl	80031e8 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e255      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80057e8:	4b65      	ldr	r3, [pc, #404]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f4:	4b62      	ldr	r3, [pc, #392]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	061b      	lsls	r3, r3, #24
 8005802:	495f      	ldr	r1, [pc, #380]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005804:	4313      	orrs	r3, r2
 8005806:	604b      	str	r3, [r1, #4]
 8005808:	e018      	b.n	800583c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800580a:	4b5d      	ldr	r3, [pc, #372]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a5c      	ldr	r2, [pc, #368]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005816:	f7fd fce7 	bl	80031e8 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800581e:	f7fd fce3 	bl	80031e8 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e231      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005830:	4b53      	ldr	r3, [pc, #332]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1f0      	bne.n	800581e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d03c      	beq.n	80058c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01c      	beq.n	800588a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005850:	4b4b      	ldr	r3, [pc, #300]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005856:	4a4a      	ldr	r2, [pc, #296]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fd fcc2 	bl	80031e8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005868:	f7fd fcbe 	bl	80031e8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e20c      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800587a:	4b41      	ldr	r3, [pc, #260]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 800587c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0ef      	beq.n	8005868 <HAL_RCC_OscConfig+0x3ec>
 8005888:	e01b      	b.n	80058c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800588a:	4b3d      	ldr	r3, [pc, #244]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 800588c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005890:	4a3b      	ldr	r2, [pc, #236]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005892:	f023 0301 	bic.w	r3, r3, #1
 8005896:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589a:	f7fd fca5 	bl	80031e8 <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a2:	f7fd fca1 	bl	80031e8 <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e1ef      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058b4:	4b32      	ldr	r3, [pc, #200]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80058b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1ef      	bne.n	80058a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 80a6 	beq.w	8005a1c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80058d4:	4b2a      	ldr	r3, [pc, #168]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80058d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e0:	4b27      	ldr	r3, [pc, #156]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	4a26      	ldr	r2, [pc, #152]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80058e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ea:	6593      	str	r3, [r2, #88]	; 0x58
 80058ec:	4b24      	ldr	r3, [pc, #144]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 80058ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f8:	2301      	movs	r3, #1
 80058fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058fc:	4b21      	ldr	r3, [pc, #132]	; (8005984 <HAL_RCC_OscConfig+0x508>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005904:	2b00      	cmp	r3, #0
 8005906:	d118      	bne.n	800593a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005908:	4b1e      	ldr	r3, [pc, #120]	; (8005984 <HAL_RCC_OscConfig+0x508>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1d      	ldr	r2, [pc, #116]	; (8005984 <HAL_RCC_OscConfig+0x508>)
 800590e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005914:	f7fd fc68 	bl	80031e8 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800591a:	e008      	b.n	800592e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800591c:	f7fd fc64 	bl	80031e8 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e1b2      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800592e:	4b15      	ldr	r3, [pc, #84]	; (8005984 <HAL_RCC_OscConfig+0x508>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d108      	bne.n	8005954 <HAL_RCC_OscConfig+0x4d8>
 8005942:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	4a0d      	ldr	r2, [pc, #52]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005952:	e029      	b.n	80059a8 <HAL_RCC_OscConfig+0x52c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b05      	cmp	r3, #5
 800595a:	d115      	bne.n	8005988 <HAL_RCC_OscConfig+0x50c>
 800595c:	4b08      	ldr	r3, [pc, #32]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005962:	4a07      	ldr	r2, [pc, #28]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005964:	f043 0304 	orr.w	r3, r3, #4
 8005968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005972:	4a03      	ldr	r2, [pc, #12]	; (8005980 <HAL_RCC_OscConfig+0x504>)
 8005974:	f043 0301 	orr.w	r3, r3, #1
 8005978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800597c:	e014      	b.n	80059a8 <HAL_RCC_OscConfig+0x52c>
 800597e:	bf00      	nop
 8005980:	40021000 	.word	0x40021000
 8005984:	40007000 	.word	0x40007000
 8005988:	4b9a      	ldr	r3, [pc, #616]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	4a99      	ldr	r2, [pc, #612]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005998:	4b96      	ldr	r3, [pc, #600]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	4a95      	ldr	r2, [pc, #596]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 80059a0:	f023 0304 	bic.w	r3, r3, #4
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d016      	beq.n	80059de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059b0:	f7fd fc1a 	bl	80031e8 <HAL_GetTick>
 80059b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b6:	e00a      	b.n	80059ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b8:	f7fd fc16 	bl	80031e8 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e162      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059ce:	4b89      	ldr	r3, [pc, #548]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 80059d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ed      	beq.n	80059b8 <HAL_RCC_OscConfig+0x53c>
 80059dc:	e015      	b.n	8005a0a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059de:	f7fd fc03 	bl	80031e8 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059e4:	e00a      	b.n	80059fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e6:	f7fd fbff 	bl	80031e8 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e14b      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059fc:	4b7d      	ldr	r3, [pc, #500]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1ed      	bne.n	80059e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a0a:	7ffb      	ldrb	r3, [r7, #31]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d105      	bne.n	8005a1c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a10:	4b78      	ldr	r3, [pc, #480]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a14:	4a77      	ldr	r2, [pc, #476]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d03c      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d01c      	beq.n	8005a6a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a30:	4b70      	ldr	r3, [pc, #448]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005a32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a36:	4a6f      	ldr	r2, [pc, #444]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005a38:	f043 0301 	orr.w	r3, r3, #1
 8005a3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a40:	f7fd fbd2 	bl	80031e8 <HAL_GetTick>
 8005a44:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a48:	f7fd fbce 	bl	80031e8 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e11c      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a5a:	4b66      	ldr	r3, [pc, #408]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005a5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d0ef      	beq.n	8005a48 <HAL_RCC_OscConfig+0x5cc>
 8005a68:	e01b      	b.n	8005aa2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a6a:	4b62      	ldr	r3, [pc, #392]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005a6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a70:	4a60      	ldr	r2, [pc, #384]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7a:	f7fd fbb5 	bl	80031e8 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a82:	f7fd fbb1 	bl	80031e8 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e0ff      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005a94:	4b57      	ldr	r3, [pc, #348]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005a96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1ef      	bne.n	8005a82 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 80f3 	beq.w	8005c92 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	f040 80c9 	bne.w	8005c48 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005ab6:	4b4f      	ldr	r3, [pc, #316]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 0203 	and.w	r2, r3, #3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d12c      	bne.n	8005b24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d123      	bne.n	8005b24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d11b      	bne.n	8005b24 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d113      	bne.n	8005b24 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d109      	bne.n	8005b24 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	3b01      	subs	r3, #1
 8005b1e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d06b      	beq.n	8005bfc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b0c      	cmp	r3, #12
 8005b28:	d062      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b2a:	4b32      	ldr	r3, [pc, #200]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e0ac      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b3a:	4b2e      	ldr	r3, [pc, #184]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a2d      	ldr	r2, [pc, #180]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005b40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b46:	f7fd fb4f 	bl	80031e8 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b4c:	e008      	b.n	8005b60 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b4e:	f7fd fb4b 	bl	80031e8 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e099      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b60:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f0      	bne.n	8005b4e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b6c:	4b21      	ldr	r3, [pc, #132]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005b6e:	68da      	ldr	r2, [r3, #12]
 8005b70:	4b21      	ldr	r3, [pc, #132]	; (8005bf8 <HAL_RCC_OscConfig+0x77c>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b7c:	3a01      	subs	r2, #1
 8005b7e:	0112      	lsls	r2, r2, #4
 8005b80:	4311      	orrs	r1, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b86:	0212      	lsls	r2, r2, #8
 8005b88:	4311      	orrs	r1, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b8e:	0852      	lsrs	r2, r2, #1
 8005b90:	3a01      	subs	r2, #1
 8005b92:	0552      	lsls	r2, r2, #21
 8005b94:	4311      	orrs	r1, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b9a:	0852      	lsrs	r2, r2, #1
 8005b9c:	3a01      	subs	r2, #1
 8005b9e:	0652      	lsls	r2, r2, #25
 8005ba0:	4311      	orrs	r1, r2
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ba6:	06d2      	lsls	r2, r2, #27
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	4912      	ldr	r1, [pc, #72]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a0f      	ldr	r2, [pc, #60]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bbc:	4b0d      	ldr	r3, [pc, #52]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	4a0c      	ldr	r2, [pc, #48]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005bc8:	f7fd fb0e 	bl	80031e8 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd0:	f7fd fb0a 	bl	80031e8 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e058      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be2:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <HAL_RCC_OscConfig+0x778>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bee:	e050      	b.n	8005c92 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e04f      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bfc:	4b27      	ldr	r3, [pc, #156]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d144      	bne.n	8005c92 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c08:	4b24      	ldr	r3, [pc, #144]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a23      	ldr	r2, [pc, #140]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c14:	4b21      	ldr	r3, [pc, #132]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a20      	ldr	r2, [pc, #128]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c20:	f7fd fae2 	bl	80031e8 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c28:	f7fd fade 	bl	80031e8 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e02c      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c3a:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0f0      	beq.n	8005c28 <HAL_RCC_OscConfig+0x7ac>
 8005c46:	e024      	b.n	8005c92 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d01f      	beq.n	8005c8e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5a:	f7fd fac5 	bl	80031e8 <HAL_GetTick>
 8005c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c60:	e008      	b.n	8005c74 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c62:	f7fd fac1 	bl	80031e8 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e00f      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c74:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f0      	bne.n	8005c62 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	4905      	ldr	r1, [pc, #20]	; (8005c9c <HAL_RCC_OscConfig+0x820>)
 8005c86:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <HAL_RCC_OscConfig+0x824>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	60cb      	str	r3, [r1, #12]
 8005c8c:	e001      	b.n	8005c92 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	feeefffc 	.word	0xfeeefffc

08005ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e0e7      	b.n	8005e88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cb8:	4b75      	ldr	r3, [pc, #468]	; (8005e90 <HAL_RCC_ClockConfig+0x1ec>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	683a      	ldr	r2, [r7, #0]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d910      	bls.n	8005ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc6:	4b72      	ldr	r3, [pc, #456]	; (8005e90 <HAL_RCC_ClockConfig+0x1ec>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 0207 	bic.w	r2, r3, #7
 8005cce:	4970      	ldr	r1, [pc, #448]	; (8005e90 <HAL_RCC_ClockConfig+0x1ec>)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cd6:	4b6e      	ldr	r3, [pc, #440]	; (8005e90 <HAL_RCC_ClockConfig+0x1ec>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d001      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e0cf      	b.n	8005e88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d010      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689a      	ldr	r2, [r3, #8]
 8005cf8:	4b66      	ldr	r3, [pc, #408]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d908      	bls.n	8005d16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d04:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	4960      	ldr	r1, [pc, #384]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d04c      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d107      	bne.n	8005d3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2a:	4b5a      	ldr	r3, [pc, #360]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d121      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e0a6      	b.n	8005e88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d107      	bne.n	8005d52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d42:	4b54      	ldr	r3, [pc, #336]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d115      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e09a      	b.n	8005e88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d5a:	4b4e      	ldr	r3, [pc, #312]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d109      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e08e      	b.n	8005e88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e086      	b.n	8005e88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d7a:	4b46      	ldr	r3, [pc, #280]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f023 0203 	bic.w	r2, r3, #3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	4943      	ldr	r1, [pc, #268]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d8c:	f7fd fa2c 	bl	80031e8 <HAL_GetTick>
 8005d90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d92:	e00a      	b.n	8005daa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d94:	f7fd fa28 	bl	80031e8 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e06e      	b.n	8005e88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005daa:	4b3a      	ldr	r3, [pc, #232]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f003 020c 	and.w	r2, r3, #12
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d1eb      	bne.n	8005d94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d010      	beq.n	8005dea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d208      	bcs.n	8005dea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd8:	4b2e      	ldr	r3, [pc, #184]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	492b      	ldr	r1, [pc, #172]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dea:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <HAL_RCC_ClockConfig+0x1ec>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d210      	bcs.n	8005e1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df8:	4b25      	ldr	r3, [pc, #148]	; (8005e90 <HAL_RCC_ClockConfig+0x1ec>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f023 0207 	bic.w	r2, r3, #7
 8005e00:	4923      	ldr	r1, [pc, #140]	; (8005e90 <HAL_RCC_ClockConfig+0x1ec>)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e08:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <HAL_RCC_ClockConfig+0x1ec>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0307 	and.w	r3, r3, #7
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d001      	beq.n	8005e1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e036      	b.n	8005e88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d008      	beq.n	8005e38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e26:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	4918      	ldr	r1, [pc, #96]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d009      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	00db      	lsls	r3, r3, #3
 8005e52:	4910      	ldr	r1, [pc, #64]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e58:	f000 f824 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <HAL_RCC_ClockConfig+0x1f0>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	091b      	lsrs	r3, r3, #4
 8005e64:	f003 030f 	and.w	r3, r3, #15
 8005e68:	490b      	ldr	r1, [pc, #44]	; (8005e98 <HAL_RCC_ClockConfig+0x1f4>)
 8005e6a:	5ccb      	ldrb	r3, [r1, r3]
 8005e6c:	f003 031f 	and.w	r3, r3, #31
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
 8005e74:	4a09      	ldr	r2, [pc, #36]	; (8005e9c <HAL_RCC_ClockConfig+0x1f8>)
 8005e76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e78:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <HAL_RCC_ClockConfig+0x1fc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fd f963 	bl	8003148 <HAL_InitTick>
 8005e82:	4603      	mov	r3, r0
 8005e84:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e86:	7afb      	ldrb	r3, [r7, #11]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	40022000 	.word	0x40022000
 8005e94:	40021000 	.word	0x40021000
 8005e98:	0800ee18 	.word	0x0800ee18
 8005e9c:	20000018 	.word	0x20000018
 8005ea0:	2000001c 	.word	0x2000001c

08005ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b089      	sub	sp, #36	; 0x24
 8005ea8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb2:	4b3e      	ldr	r3, [pc, #248]	; (8005fac <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ebc:	4b3b      	ldr	r3, [pc, #236]	; (8005fac <HAL_RCC_GetSysClockFreq+0x108>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b0c      	cmp	r3, #12
 8005ed0:	d121      	bne.n	8005f16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d11e      	bne.n	8005f16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005ed8:	4b34      	ldr	r3, [pc, #208]	; (8005fac <HAL_RCC_GetSysClockFreq+0x108>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d107      	bne.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ee4:	4b31      	ldr	r3, [pc, #196]	; (8005fac <HAL_RCC_GetSysClockFreq+0x108>)
 8005ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eea:	0a1b      	lsrs	r3, r3, #8
 8005eec:	f003 030f 	and.w	r3, r3, #15
 8005ef0:	61fb      	str	r3, [r7, #28]
 8005ef2:	e005      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ef4:	4b2d      	ldr	r3, [pc, #180]	; (8005fac <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	091b      	lsrs	r3, r3, #4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f00:	4a2b      	ldr	r2, [pc, #172]	; (8005fb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10d      	bne.n	8005f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f14:	e00a      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b04      	cmp	r3, #4
 8005f1a:	d102      	bne.n	8005f22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f1c:	4b25      	ldr	r3, [pc, #148]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e004      	b.n	8005f2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d101      	bne.n	8005f2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f28:	4b23      	ldr	r3, [pc, #140]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b0c      	cmp	r3, #12
 8005f30:	d134      	bne.n	8005f9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f32:	4b1e      	ldr	r3, [pc, #120]	; (8005fac <HAL_RCC_GetSysClockFreq+0x108>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d003      	beq.n	8005f4a <HAL_RCC_GetSysClockFreq+0xa6>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d003      	beq.n	8005f50 <HAL_RCC_GetSysClockFreq+0xac>
 8005f48:	e005      	b.n	8005f56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f4a:	4b1a      	ldr	r3, [pc, #104]	; (8005fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f4c:	617b      	str	r3, [r7, #20]
      break;
 8005f4e:	e005      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f50:	4b19      	ldr	r3, [pc, #100]	; (8005fb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f52:	617b      	str	r3, [r7, #20]
      break;
 8005f54:	e002      	b.n	8005f5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	617b      	str	r3, [r7, #20]
      break;
 8005f5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f5c:	4b13      	ldr	r3, [pc, #76]	; (8005fac <HAL_RCC_GetSysClockFreq+0x108>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	091b      	lsrs	r3, r3, #4
 8005f62:	f003 0307 	and.w	r3, r3, #7
 8005f66:	3301      	adds	r3, #1
 8005f68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f6a:	4b10      	ldr	r3, [pc, #64]	; (8005fac <HAL_RCC_GetSysClockFreq+0x108>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	fb03 f202 	mul.w	r2, r3, r2
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f82:	4b0a      	ldr	r3, [pc, #40]	; (8005fac <HAL_RCC_GetSysClockFreq+0x108>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	0e5b      	lsrs	r3, r3, #25
 8005f88:	f003 0303 	and.w	r3, r3, #3
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f9c:	69bb      	ldr	r3, [r7, #24]
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3724      	adds	r7, #36	; 0x24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	0800ee30 	.word	0x0800ee30
 8005fb4:	00f42400 	.word	0x00f42400
 8005fb8:	007a1200 	.word	0x007a1200

08005fbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fc0:	4b03      	ldr	r3, [pc, #12]	; (8005fd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000018 	.word	0x20000018

08005fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fd8:	f7ff fff0 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	0a1b      	lsrs	r3, r3, #8
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	4904      	ldr	r1, [pc, #16]	; (8005ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fea:	5ccb      	ldrb	r3, [r1, r3]
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	0800ee28 	.word	0x0800ee28

08006000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006004:	f7ff ffda 	bl	8005fbc <HAL_RCC_GetHCLKFreq>
 8006008:	4602      	mov	r2, r0
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	0adb      	lsrs	r3, r3, #11
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	4904      	ldr	r1, [pc, #16]	; (8006028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006016:	5ccb      	ldrb	r3, [r1, r3]
 8006018:	f003 031f 	and.w	r3, r3, #31
 800601c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006020:	4618      	mov	r0, r3
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40021000 	.word	0x40021000
 8006028:	0800ee28 	.word	0x0800ee28

0800602c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006034:	2300      	movs	r3, #0
 8006036:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006038:	4b2a      	ldr	r3, [pc, #168]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800603a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006044:	f7ff f9b6 	bl	80053b4 <HAL_PWREx_GetVoltageRange>
 8006048:	6178      	str	r0, [r7, #20]
 800604a:	e014      	b.n	8006076 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800604c:	4b25      	ldr	r3, [pc, #148]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800604e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006050:	4a24      	ldr	r2, [pc, #144]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006056:	6593      	str	r3, [r2, #88]	; 0x58
 8006058:	4b22      	ldr	r3, [pc, #136]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800605a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006060:	60fb      	str	r3, [r7, #12]
 8006062:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006064:	f7ff f9a6 	bl	80053b4 <HAL_PWREx_GetVoltageRange>
 8006068:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800606a:	4b1e      	ldr	r3, [pc, #120]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800606c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006074:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800607c:	d10b      	bne.n	8006096 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b80      	cmp	r3, #128	; 0x80
 8006082:	d919      	bls.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2ba0      	cmp	r3, #160	; 0xa0
 8006088:	d902      	bls.n	8006090 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800608a:	2302      	movs	r3, #2
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	e013      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006090:	2301      	movs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	e010      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b80      	cmp	r3, #128	; 0x80
 800609a:	d902      	bls.n	80060a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800609c:	2303      	movs	r3, #3
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	e00a      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b80      	cmp	r3, #128	; 0x80
 80060a6:	d102      	bne.n	80060ae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060a8:	2302      	movs	r3, #2
 80060aa:	613b      	str	r3, [r7, #16]
 80060ac:	e004      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2b70      	cmp	r3, #112	; 0x70
 80060b2:	d101      	bne.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060b4:	2301      	movs	r3, #1
 80060b6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060b8:	4b0b      	ldr	r3, [pc, #44]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f023 0207 	bic.w	r2, r3, #7
 80060c0:	4909      	ldr	r1, [pc, #36]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060c8:	4b07      	ldr	r3, [pc, #28]	; (80060e8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d001      	beq.n	80060da <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3718      	adds	r7, #24
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40021000 	.word	0x40021000
 80060e8:	40022000 	.word	0x40022000

080060ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060f4:	2300      	movs	r3, #0
 80060f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060f8:	2300      	movs	r3, #0
 80060fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006104:	2b00      	cmp	r3, #0
 8006106:	d031      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006110:	d01a      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006112:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006116:	d814      	bhi.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006118:	2b00      	cmp	r3, #0
 800611a:	d009      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800611c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006120:	d10f      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006122:	4b5d      	ldr	r3, [pc, #372]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	4a5c      	ldr	r2, [pc, #368]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800612c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612e:	e00c      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3304      	adds	r3, #4
 8006134:	2100      	movs	r1, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f9ce 	bl	80064d8 <RCCEx_PLLSAI1_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006140:	e003      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	74fb      	strb	r3, [r7, #19]
      break;
 8006146:	e000      	b.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800614a:	7cfb      	ldrb	r3, [r7, #19]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006150:	4b51      	ldr	r3, [pc, #324]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006156:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615e:	494e      	ldr	r1, [pc, #312]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006166:	e001      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 809e 	beq.w	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800617a:	2300      	movs	r3, #0
 800617c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800617e:	4b46      	ldr	r3, [pc, #280]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800618e:	2300      	movs	r3, #0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006194:	4b40      	ldr	r3, [pc, #256]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006198:	4a3f      	ldr	r2, [pc, #252]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800619a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619e:	6593      	str	r3, [r2, #88]	; 0x58
 80061a0:	4b3d      	ldr	r3, [pc, #244]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061ac:	2301      	movs	r3, #1
 80061ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061b0:	4b3a      	ldr	r3, [pc, #232]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a39      	ldr	r2, [pc, #228]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061bc:	f7fd f814 	bl	80031e8 <HAL_GetTick>
 80061c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061c2:	e009      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c4:	f7fd f810 	bl	80031e8 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d902      	bls.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	74fb      	strb	r3, [r7, #19]
        break;
 80061d6:	e005      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061d8:	4b30      	ldr	r3, [pc, #192]	; (800629c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0ef      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80061e4:	7cfb      	ldrb	r3, [r7, #19]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d15a      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061ea:	4b2b      	ldr	r3, [pc, #172]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01e      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	429a      	cmp	r2, r3
 8006204:	d019      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006206:	4b24      	ldr	r3, [pc, #144]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006210:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006212:	4b21      	ldr	r3, [pc, #132]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006218:	4a1f      	ldr	r2, [pc, #124]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800621a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006222:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006228:	4a1b      	ldr	r2, [pc, #108]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800622a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800622e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006232:	4a19      	ldr	r2, [pc, #100]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d016      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006244:	f7fc ffd0 	bl	80031e8 <HAL_GetTick>
 8006248:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800624a:	e00b      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624c:	f7fc ffcc 	bl	80031e8 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	f241 3288 	movw	r2, #5000	; 0x1388
 800625a:	4293      	cmp	r3, r2
 800625c:	d902      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	74fb      	strb	r3, [r7, #19]
            break;
 8006262:	e006      	b.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006264:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0ec      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006272:	7cfb      	ldrb	r3, [r7, #19]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10b      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006286:	4904      	ldr	r1, [pc, #16]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006288:	4313      	orrs	r3, r2
 800628a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800628e:	e009      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	74bb      	strb	r3, [r7, #18]
 8006294:	e006      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000
 800629c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	7cfb      	ldrb	r3, [r7, #19]
 80062a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062a4:	7c7b      	ldrb	r3, [r7, #17]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d105      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062aa:	4b8a      	ldr	r3, [pc, #552]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ae:	4a89      	ldr	r2, [pc, #548]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062c2:	4b84      	ldr	r3, [pc, #528]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c8:	f023 0203 	bic.w	r2, r3, #3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	4980      	ldr	r1, [pc, #512]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062e4:	4b7b      	ldr	r3, [pc, #492]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	f023 020c 	bic.w	r2, r3, #12
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	4978      	ldr	r1, [pc, #480]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006306:	4b73      	ldr	r3, [pc, #460]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800630c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006314:	496f      	ldr	r1, [pc, #444]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006316:	4313      	orrs	r3, r2
 8006318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006328:	4b6a      	ldr	r3, [pc, #424]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006336:	4967      	ldr	r1, [pc, #412]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800634a:	4b62      	ldr	r3, [pc, #392]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800634c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	495e      	ldr	r1, [pc, #376]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800635a:	4313      	orrs	r3, r2
 800635c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800636c:	4b59      	ldr	r3, [pc, #356]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800636e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006372:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	4956      	ldr	r1, [pc, #344]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800637c:	4313      	orrs	r3, r2
 800637e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800638e:	4b51      	ldr	r3, [pc, #324]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006394:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639c:	494d      	ldr	r1, [pc, #308]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d028      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063b0:	4b48      	ldr	r3, [pc, #288]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	4945      	ldr	r1, [pc, #276]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063ce:	d106      	bne.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063d0:	4b40      	ldr	r3, [pc, #256]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	4a3f      	ldr	r2, [pc, #252]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063da:	60d3      	str	r3, [r2, #12]
 80063dc:	e011      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e6:	d10c      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3304      	adds	r3, #4
 80063ec:	2101      	movs	r1, #1
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f872 	bl	80064d8 <RCCEx_PLLSAI1_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80063f8:	7cfb      	ldrb	r3, [r7, #19]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80063fe:	7cfb      	ldrb	r3, [r7, #19]
 8006400:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d028      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800640e:	4b31      	ldr	r3, [pc, #196]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006414:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	492d      	ldr	r1, [pc, #180]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006428:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800642c:	d106      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800642e:	4b29      	ldr	r3, [pc, #164]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	4a28      	ldr	r2, [pc, #160]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006438:	60d3      	str	r3, [r2, #12]
 800643a:	e011      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006444:	d10c      	bne.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3304      	adds	r3, #4
 800644a:	2101      	movs	r1, #1
 800644c:	4618      	mov	r0, r3
 800644e:	f000 f843 	bl	80064d8 <RCCEx_PLLSAI1_Config>
 8006452:	4603      	mov	r3, r0
 8006454:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006456:	7cfb      	ldrb	r3, [r7, #19]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800645c:	7cfb      	ldrb	r3, [r7, #19]
 800645e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d01c      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800646c:	4b19      	ldr	r3, [pc, #100]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800646e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006472:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647a:	4916      	ldr	r1, [pc, #88]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800647c:	4313      	orrs	r3, r2
 800647e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800648a:	d10c      	bne.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3304      	adds	r3, #4
 8006490:	2102      	movs	r1, #2
 8006492:	4618      	mov	r0, r3
 8006494:	f000 f820 	bl	80064d8 <RCCEx_PLLSAI1_Config>
 8006498:	4603      	mov	r3, r0
 800649a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80064a2:	7cfb      	ldrb	r3, [r7, #19]
 80064a4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064b2:	4b08      	ldr	r3, [pc, #32]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c0:	4904      	ldr	r1, [pc, #16]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80064c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40021000 	.word	0x40021000

080064d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064e6:	4b74      	ldr	r3, [pc, #464]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d018      	beq.n	8006524 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80064f2:	4b71      	ldr	r3, [pc, #452]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0203 	and.w	r2, r3, #3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d10d      	bne.n	800651e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
       ||
 8006506:	2b00      	cmp	r3, #0
 8006508:	d009      	beq.n	800651e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800650a:	4b6b      	ldr	r3, [pc, #428]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	091b      	lsrs	r3, r3, #4
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
       ||
 800651a:	429a      	cmp	r2, r3
 800651c:	d047      	beq.n	80065ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
 8006522:	e044      	b.n	80065ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b03      	cmp	r3, #3
 800652a:	d018      	beq.n	800655e <RCCEx_PLLSAI1_Config+0x86>
 800652c:	2b03      	cmp	r3, #3
 800652e:	d825      	bhi.n	800657c <RCCEx_PLLSAI1_Config+0xa4>
 8006530:	2b01      	cmp	r3, #1
 8006532:	d002      	beq.n	800653a <RCCEx_PLLSAI1_Config+0x62>
 8006534:	2b02      	cmp	r3, #2
 8006536:	d009      	beq.n	800654c <RCCEx_PLLSAI1_Config+0x74>
 8006538:	e020      	b.n	800657c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800653a:	4b5f      	ldr	r3, [pc, #380]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0302 	and.w	r3, r3, #2
 8006542:	2b00      	cmp	r3, #0
 8006544:	d11d      	bne.n	8006582 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800654a:	e01a      	b.n	8006582 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800654c:	4b5a      	ldr	r3, [pc, #360]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006554:	2b00      	cmp	r3, #0
 8006556:	d116      	bne.n	8006586 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800655c:	e013      	b.n	8006586 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800655e:	4b56      	ldr	r3, [pc, #344]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10f      	bne.n	800658a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800656a:	4b53      	ldr	r3, [pc, #332]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800657a:	e006      	b.n	800658a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
      break;
 8006580:	e004      	b.n	800658c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800658a:	bf00      	nop
    }

    if(status == HAL_OK)
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10d      	bne.n	80065ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006592:	4b49      	ldr	r3, [pc, #292]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6819      	ldr	r1, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	430b      	orrs	r3, r1
 80065a8:	4943      	ldr	r1, [pc, #268]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d17c      	bne.n	80066ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80065b4:	4b40      	ldr	r3, [pc, #256]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a3f      	ldr	r2, [pc, #252]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c0:	f7fc fe12 	bl	80031e8 <HAL_GetTick>
 80065c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065c6:	e009      	b.n	80065dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065c8:	f7fc fe0e 	bl	80031e8 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d902      	bls.n	80065dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	73fb      	strb	r3, [r7, #15]
        break;
 80065da:	e005      	b.n	80065e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80065dc:	4b36      	ldr	r3, [pc, #216]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1ef      	bne.n	80065c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d15f      	bne.n	80066ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d110      	bne.n	8006616 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065f4:	4b30      	ldr	r3, [pc, #192]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80065fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6892      	ldr	r2, [r2, #8]
 8006604:	0211      	lsls	r1, r2, #8
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	68d2      	ldr	r2, [r2, #12]
 800660a:	06d2      	lsls	r2, r2, #27
 800660c:	430a      	orrs	r2, r1
 800660e:	492a      	ldr	r1, [pc, #168]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006610:	4313      	orrs	r3, r2
 8006612:	610b      	str	r3, [r1, #16]
 8006614:	e027      	b.n	8006666 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d112      	bne.n	8006642 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800661c:	4b26      	ldr	r3, [pc, #152]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006624:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6892      	ldr	r2, [r2, #8]
 800662c:	0211      	lsls	r1, r2, #8
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6912      	ldr	r2, [r2, #16]
 8006632:	0852      	lsrs	r2, r2, #1
 8006634:	3a01      	subs	r2, #1
 8006636:	0552      	lsls	r2, r2, #21
 8006638:	430a      	orrs	r2, r1
 800663a:	491f      	ldr	r1, [pc, #124]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800663c:	4313      	orrs	r3, r2
 800663e:	610b      	str	r3, [r1, #16]
 8006640:	e011      	b.n	8006666 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006642:	4b1d      	ldr	r3, [pc, #116]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800664a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6892      	ldr	r2, [r2, #8]
 8006652:	0211      	lsls	r1, r2, #8
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	6952      	ldr	r2, [r2, #20]
 8006658:	0852      	lsrs	r2, r2, #1
 800665a:	3a01      	subs	r2, #1
 800665c:	0652      	lsls	r2, r2, #25
 800665e:	430a      	orrs	r2, r1
 8006660:	4915      	ldr	r1, [pc, #84]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006662:	4313      	orrs	r3, r2
 8006664:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006666:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a13      	ldr	r2, [pc, #76]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800666c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006670:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006672:	f7fc fdb9 	bl	80031e8 <HAL_GetTick>
 8006676:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006678:	e009      	b.n	800668e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800667a:	f7fc fdb5 	bl	80031e8 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d902      	bls.n	800668e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	73fb      	strb	r3, [r7, #15]
          break;
 800668c:	e005      	b.n	800669a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0ef      	beq.n	800667a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066a2:	691a      	ldr	r2, [r3, #16]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	4903      	ldr	r1, [pc, #12]	; (80066b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40021000 	.word	0x40021000

080066bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e095      	b.n	80067fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d108      	bne.n	80066e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066de:	d009      	beq.n	80066f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	61da      	str	r2, [r3, #28]
 80066e6:	e005      	b.n	80066f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7fc fae4 	bl	8002cdc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006734:	d902      	bls.n	800673c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006736:	2300      	movs	r3, #0
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	e002      	b.n	8006742 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800673c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006740:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800674a:	d007      	beq.n	800675c <HAL_SPI_Init+0xa0>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006754:	d002      	beq.n	800675c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800676c:	431a      	orrs	r2, r3
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	f003 0302 	and.w	r3, r3, #2
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	431a      	orrs	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69db      	ldr	r3, [r3, #28]
 8006790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006794:	431a      	orrs	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679e:	ea42 0103 	orr.w	r1, r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	0c1b      	lsrs	r3, r3, #16
 80067b8:	f003 0204 	and.w	r2, r3, #4
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067d8:	ea42 0103 	orr.w	r1, r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b088      	sub	sp, #32
 8006806:	af00      	add	r7, sp, #0
 8006808:	60f8      	str	r0, [r7, #12]
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	603b      	str	r3, [r7, #0]
 800680e:	4613      	mov	r3, r2
 8006810:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_SPI_Transmit+0x22>
 8006820:	2302      	movs	r3, #2
 8006822:	e15f      	b.n	8006ae4 <HAL_SPI_Transmit+0x2e2>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800682c:	f7fc fcdc 	bl	80031e8 <HAL_GetTick>
 8006830:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b01      	cmp	r3, #1
 8006840:	d002      	beq.n	8006848 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006842:	2302      	movs	r3, #2
 8006844:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006846:	e148      	b.n	8006ada <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_SPI_Transmit+0x52>
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d102      	bne.n	800685a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006858:	e13f      	b.n	8006ada <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2203      	movs	r2, #3
 800685e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	88fa      	ldrh	r2, [r7, #6]
 8006872:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	88fa      	ldrh	r2, [r7, #6]
 8006878:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2200      	movs	r2, #0
 8006884:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068a4:	d10f      	bne.n	80068c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	d007      	beq.n	80068e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068ec:	d94f      	bls.n	800698e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_SPI_Transmit+0xfa>
 80068f6:	8afb      	ldrh	r3, [r7, #22]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d142      	bne.n	8006982 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006900:	881a      	ldrh	r2, [r3, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690c:	1c9a      	adds	r2, r3, #2
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006916:	b29b      	uxth	r3, r3
 8006918:	3b01      	subs	r3, #1
 800691a:	b29a      	uxth	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006920:	e02f      	b.n	8006982 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b02      	cmp	r3, #2
 800692e:	d112      	bne.n	8006956 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	881a      	ldrh	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b01      	subs	r3, #1
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006954:	e015      	b.n	8006982 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006956:	f7fc fc47 	bl	80031e8 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d803      	bhi.n	800696e <HAL_SPI_Transmit+0x16c>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696c:	d102      	bne.n	8006974 <HAL_SPI_Transmit+0x172>
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d106      	bne.n	8006982 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006980:	e0ab      	b.n	8006ada <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006986:	b29b      	uxth	r3, r3
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1ca      	bne.n	8006922 <HAL_SPI_Transmit+0x120>
 800698c:	e080      	b.n	8006a90 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <HAL_SPI_Transmit+0x19a>
 8006996:	8afb      	ldrh	r3, [r7, #22]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d174      	bne.n	8006a86 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d912      	bls.n	80069cc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069aa:	881a      	ldrh	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	1c9a      	adds	r2, r3, #2
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b02      	subs	r3, #2
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069ca:	e05c      	b.n	8006a86 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80069f2:	e048      	b.n	8006a86 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d12b      	bne.n	8006a5a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d912      	bls.n	8006a32 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a10:	881a      	ldrh	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	1c9a      	adds	r2, r3, #2
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3b02      	subs	r3, #2
 8006a2a:	b29a      	uxth	r2, r3
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a30:	e029      	b.n	8006a86 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	330c      	adds	r3, #12
 8006a3c:	7812      	ldrb	r2, [r2, #0]
 8006a3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	3b01      	subs	r3, #1
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a58:	e015      	b.n	8006a86 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a5a:	f7fc fbc5 	bl	80031e8 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d803      	bhi.n	8006a72 <HAL_SPI_Transmit+0x270>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a70:	d102      	bne.n	8006a78 <HAL_SPI_Transmit+0x276>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006a84:	e029      	b.n	8006ada <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1b1      	bne.n	80069f4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fcf9 	bl	800748c <SPI_EndRxTxTransaction>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d10a      	bne.n	8006ac4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	77fb      	strb	r3, [r7, #31]
 8006ad0:	e003      	b.n	8006ada <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ae2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af02      	add	r7, sp, #8
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	603b      	str	r3, [r7, #0]
 8006af8:	4613      	mov	r3, r2
 8006afa:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d002      	beq.n	8006b12 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b10:	e11a      	b.n	8006d48 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b1a:	d112      	bne.n	8006b42 <HAL_SPI_Receive+0x56>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10e      	bne.n	8006b42 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2204      	movs	r2, #4
 8006b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b2c:	88fa      	ldrh	r2, [r7, #6]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	4613      	mov	r3, r2
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f90e 	bl	8006d5a <HAL_SPI_TransmitReceive>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	e107      	b.n	8006d52 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d101      	bne.n	8006b50 <HAL_SPI_Receive+0x64>
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	e100      	b.n	8006d52 <HAL_SPI_Receive+0x266>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b58:	f7fc fb46 	bl	80031e8 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <HAL_SPI_Receive+0x7e>
 8006b64:	88fb      	ldrh	r3, [r7, #6]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d102      	bne.n	8006b70 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b6e:	e0eb      	b.n	8006d48 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2204      	movs	r2, #4
 8006b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	88fa      	ldrh	r2, [r7, #6]
 8006b88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	88fa      	ldrh	r2, [r7, #6]
 8006b90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bba:	d908      	bls.n	8006bce <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	685a      	ldr	r2, [r3, #4]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bca:	605a      	str	r2, [r3, #4]
 8006bcc:	e007      	b.n	8006bde <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bdc:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be6:	d10f      	bne.n	8006c08 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d007      	beq.n	8006c26 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c2e:	d86f      	bhi.n	8006d10 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c30:	e034      	b.n	8006c9c <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d117      	bne.n	8006c70 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f103 020c 	add.w	r2, r3, #12
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	7812      	ldrb	r2, [r2, #0]
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006c6e:	e015      	b.n	8006c9c <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c70:	f7fc faba 	bl	80031e8 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	683a      	ldr	r2, [r7, #0]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d803      	bhi.n	8006c88 <HAL_SPI_Receive+0x19c>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c86:	d102      	bne.n	8006c8e <HAL_SPI_Receive+0x1a2>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d106      	bne.n	8006c9c <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006c9a:	e055      	b.n	8006d48 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1c4      	bne.n	8006c32 <HAL_SPI_Receive+0x146>
 8006ca8:	e038      	b.n	8006d1c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d115      	bne.n	8006ce4 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68da      	ldr	r2, [r3, #12]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	b292      	uxth	r2, r2
 8006cc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	1c9a      	adds	r2, r3, #2
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006ce2:	e015      	b.n	8006d10 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ce4:	f7fc fa80 	bl	80031e8 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d803      	bhi.n	8006cfc <HAL_SPI_Receive+0x210>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfa:	d102      	bne.n	8006d02 <HAL_SPI_Receive+0x216>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d0e:	e01b      	b.n	8006d48 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1c6      	bne.n	8006caa <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fb5b 	bl	80073dc <SPI_EndRxTransaction>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
 8006d3e:	e003      	b.n	8006d48 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b08a      	sub	sp, #40	; 0x28
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_SPI_TransmitReceive+0x26>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e20a      	b.n	8007196 <HAL_SPI_TransmitReceive+0x43c>
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d88:	f7fc fa2e 	bl	80031e8 <HAL_GetTick>
 8006d8c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d94:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006d9c:	887b      	ldrh	r3, [r7, #2]
 8006d9e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006da0:	887b      	ldrh	r3, [r7, #2]
 8006da2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006da4:	7efb      	ldrb	r3, [r7, #27]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d00e      	beq.n	8006dc8 <HAL_SPI_TransmitReceive+0x6e>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006db0:	d106      	bne.n	8006dc0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d102      	bne.n	8006dc0 <HAL_SPI_TransmitReceive+0x66>
 8006dba:	7efb      	ldrb	r3, [r7, #27]
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d003      	beq.n	8006dc8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006dc6:	e1e0      	b.n	800718a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d005      	beq.n	8006dda <HAL_SPI_TransmitReceive+0x80>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d002      	beq.n	8006dda <HAL_SPI_TransmitReceive+0x80>
 8006dd4:	887b      	ldrh	r3, [r7, #2]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d103      	bne.n	8006de2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006de0:	e1d3      	b.n	800718a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d003      	beq.n	8006df6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2205      	movs	r2, #5
 8006df2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	887a      	ldrh	r2, [r7, #2]
 8006e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	887a      	ldrh	r2, [r7, #2]
 8006e0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	887a      	ldrh	r2, [r7, #2]
 8006e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	887a      	ldrh	r2, [r7, #2]
 8006e22:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e38:	d802      	bhi.n	8006e40 <HAL_SPI_TransmitReceive+0xe6>
 8006e3a:	8a3b      	ldrh	r3, [r7, #16]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d908      	bls.n	8006e52 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e4e:	605a      	str	r2, [r3, #4]
 8006e50:	e007      	b.n	8006e62 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e60:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b40      	cmp	r3, #64	; 0x40
 8006e6e:	d007      	beq.n	8006e80 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e88:	f240 8081 	bls.w	8006f8e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d002      	beq.n	8006e9a <HAL_SPI_TransmitReceive+0x140>
 8006e94:	8a7b      	ldrh	r3, [r7, #18]
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d16d      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	881a      	ldrh	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eaa:	1c9a      	adds	r2, r3, #2
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ebe:	e05a      	b.n	8006f76 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d11b      	bne.n	8006f06 <HAL_SPI_TransmitReceive+0x1ac>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d016      	beq.n	8006f06 <HAL_SPI_TransmitReceive+0x1ac>
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d113      	bne.n	8006f06 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	881a      	ldrh	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	1c9a      	adds	r2, r3, #2
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	3b01      	subs	r3, #1
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f02:	2300      	movs	r3, #0
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d11c      	bne.n	8006f4e <HAL_SPI_TransmitReceive+0x1f4>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d016      	beq.n	8006f4e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	b292      	uxth	r2, r2
 8006f2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	1c9a      	adds	r2, r3, #2
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f4e:	f7fc f94b 	bl	80031e8 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d80b      	bhi.n	8006f76 <HAL_SPI_TransmitReceive+0x21c>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d007      	beq.n	8006f76 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006f74:	e109      	b.n	800718a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d19f      	bne.n	8006ec0 <HAL_SPI_TransmitReceive+0x166>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d199      	bne.n	8006ec0 <HAL_SPI_TransmitReceive+0x166>
 8006f8c:	e0e3      	b.n	8007156 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_SPI_TransmitReceive+0x244>
 8006f96:	8a7b      	ldrh	r3, [r7, #18]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	f040 80cf 	bne.w	800713c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d912      	bls.n	8006fce <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b02      	subs	r3, #2
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fcc:	e0b6      	b.n	800713c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	3b01      	subs	r3, #1
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff4:	e0a2      	b.n	800713c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b02      	cmp	r3, #2
 8007002:	d134      	bne.n	800706e <HAL_SPI_TransmitReceive+0x314>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d02f      	beq.n	800706e <HAL_SPI_TransmitReceive+0x314>
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	2b01      	cmp	r3, #1
 8007012:	d12c      	bne.n	800706e <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b01      	cmp	r3, #1
 800701c:	d912      	bls.n	8007044 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	881a      	ldrh	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	1c9a      	adds	r2, r3, #2
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b02      	subs	r3, #2
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007042:	e012      	b.n	800706a <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	7812      	ldrb	r2, [r2, #0]
 8007050:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b01      	cmp	r3, #1
 800707a:	d148      	bne.n	800710e <HAL_SPI_TransmitReceive+0x3b4>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d042      	beq.n	800710e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d923      	bls.n	80070dc <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	b292      	uxth	r2, r2
 80070a0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	1c9a      	adds	r2, r3, #2
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b02      	subs	r3, #2
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d81f      	bhi.n	800710a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070d8:	605a      	str	r2, [r3, #4]
 80070da:	e016      	b.n	800710a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f103 020c 	add.w	r2, r3, #12
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800710a:	2301      	movs	r3, #1
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800710e:	f7fc f86b 	bl	80031e8 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711a:	429a      	cmp	r2, r3
 800711c:	d803      	bhi.n	8007126 <HAL_SPI_TransmitReceive+0x3cc>
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d102      	bne.n	800712c <HAL_SPI_TransmitReceive+0x3d2>
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	2b00      	cmp	r3, #0
 800712a:	d107      	bne.n	800713c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800713a:	e026      	b.n	800718a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	f47f af57 	bne.w	8006ff6 <HAL_SPI_TransmitReceive+0x29c>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	f47f af50 	bne.w	8006ff6 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007156:	69fa      	ldr	r2, [r7, #28]
 8007158:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f996 	bl	800748c <SPI_EndRxTxTransaction>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2220      	movs	r2, #32
 8007170:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007176:	2b00      	cmp	r3, #0
 8007178:	d003      	beq.n	8007182 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007180:	e003      	b.n	800718a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007196:	4618      	mov	r0, r3
 8007198:	3728      	adds	r7, #40	; 0x28
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	4613      	mov	r3, r2
 80071ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80071b0:	f7fc f81a 	bl	80031e8 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b8:	1a9b      	subs	r3, r3, r2
 80071ba:	683a      	ldr	r2, [r7, #0]
 80071bc:	4413      	add	r3, r2
 80071be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80071c0:	f7fc f812 	bl	80031e8 <HAL_GetTick>
 80071c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80071c6:	4b39      	ldr	r3, [pc, #228]	; (80072ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	015b      	lsls	r3, r3, #5
 80071cc:	0d1b      	lsrs	r3, r3, #20
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	fb02 f303 	mul.w	r3, r2, r3
 80071d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071d6:	e054      	b.n	8007282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071de:	d050      	beq.n	8007282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80071e0:	f7fc f802 	bl	80031e8 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d902      	bls.n	80071f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d13d      	bne.n	8007272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800720e:	d111      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007218:	d004      	beq.n	8007224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007222:	d107      	bne.n	8007234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800723c:	d10f      	bne.n	800725e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800725c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e017      	b.n	80072a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d101      	bne.n	800727c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	3b01      	subs	r3, #1
 8007280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	429a      	cmp	r2, r3
 8007290:	bf0c      	ite	eq
 8007292:	2301      	moveq	r3, #1
 8007294:	2300      	movne	r3, #0
 8007296:	b2db      	uxtb	r3, r3
 8007298:	461a      	mov	r2, r3
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	429a      	cmp	r2, r3
 800729e:	d19b      	bne.n	80071d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3720      	adds	r7, #32
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000018 	.word	0x20000018

080072b0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80072c2:	f7fb ff91 	bl	80031e8 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	4413      	add	r3, r2
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80072d2:	f7fb ff89 	bl	80031e8 <HAL_GetTick>
 80072d6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	330c      	adds	r3, #12
 80072de:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80072e0:	4b3d      	ldr	r3, [pc, #244]	; (80073d8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	4613      	mov	r3, r2
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	00da      	lsls	r2, r3, #3
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	0d1b      	lsrs	r3, r3, #20
 80072f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80072f8:	e060      	b.n	80073bc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007300:	d107      	bne.n	8007312 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d104      	bne.n	8007312 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	b2db      	uxtb	r3, r3
 800730e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007310:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d050      	beq.n	80073bc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800731a:	f7fb ff65 	bl	80031e8 <HAL_GetTick>
 800731e:	4602      	mov	r2, r0
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	1ad3      	subs	r3, r2, r3
 8007324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007326:	429a      	cmp	r2, r3
 8007328:	d902      	bls.n	8007330 <SPI_WaitFifoStateUntilTimeout+0x80>
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	2b00      	cmp	r3, #0
 800732e:	d13d      	bne.n	80073ac <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800733e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007348:	d111      	bne.n	800736e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007352:	d004      	beq.n	800735e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800735c:	d107      	bne.n	800736e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800736c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007376:	d10f      	bne.n	8007398 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007396:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e010      	b.n	80073ce <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d101      	bne.n	80073b6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689a      	ldr	r2, [r3, #8]
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	4013      	ands	r3, r2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d196      	bne.n	80072fa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3728      	adds	r7, #40	; 0x28
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	20000018 	.word	0x20000018

080073dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af02      	add	r7, sp, #8
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073f0:	d111      	bne.n	8007416 <SPI_EndRxTransaction+0x3a>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073fa:	d004      	beq.n	8007406 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007404:	d107      	bne.n	8007416 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007414:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2200      	movs	r2, #0
 800741e:	2180      	movs	r1, #128	; 0x80
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f7ff febd 	bl	80071a0 <SPI_WaitFlagStateUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007430:	f043 0220 	orr.w	r2, r3, #32
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e023      	b.n	8007484 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007444:	d11d      	bne.n	8007482 <SPI_EndRxTransaction+0xa6>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800744e:	d004      	beq.n	800745a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007458:	d113      	bne.n	8007482 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2200      	movs	r2, #0
 8007462:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007466:	68f8      	ldr	r0, [r7, #12]
 8007468:	f7ff ff22 	bl	80072b0 <SPI_WaitFifoStateUntilTimeout>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007476:	f043 0220 	orr.w	r2, r3, #32
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e000      	b.n	8007484 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af02      	add	r7, sp, #8
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	9300      	str	r3, [sp, #0]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2200      	movs	r2, #0
 80074a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f7ff ff03 	bl	80072b0 <SPI_WaitFifoStateUntilTimeout>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d007      	beq.n	80074c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b4:	f043 0220 	orr.w	r2, r3, #32
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074bc:	2303      	movs	r3, #3
 80074be:	e027      	b.n	8007510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2200      	movs	r2, #0
 80074c8:	2180      	movs	r1, #128	; 0x80
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f7ff fe68 	bl	80071a0 <SPI_WaitFlagStateUntilTimeout>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d007      	beq.n	80074e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074da:	f043 0220 	orr.w	r2, r3, #32
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e014      	b.n	8007510 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f7ff fedc 	bl	80072b0 <SPI_WaitFifoStateUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007502:	f043 0220 	orr.w	r2, r3, #32
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e000      	b.n	8007510 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e049      	b.n	80075be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d106      	bne.n	8007544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fb fc30 	bl	8002da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3304      	adds	r3, #4
 8007554:	4619      	mov	r1, r3
 8007556:	4610      	mov	r0, r2
 8007558:	f000 fbfe 	bl	8007d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d001      	beq.n	80075e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e03b      	b.n	8007658 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0201 	orr.w	r2, r2, #1
 80075f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a19      	ldr	r2, [pc, #100]	; (8007664 <HAL_TIM_Base_Start_IT+0x9c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d009      	beq.n	8007616 <HAL_TIM_Base_Start_IT+0x4e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800760a:	d004      	beq.n	8007616 <HAL_TIM_Base_Start_IT+0x4e>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a15      	ldr	r2, [pc, #84]	; (8007668 <HAL_TIM_Base_Start_IT+0xa0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d115      	bne.n	8007642 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	4b13      	ldr	r3, [pc, #76]	; (800766c <HAL_TIM_Base_Start_IT+0xa4>)
 800761e:	4013      	ands	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2b06      	cmp	r3, #6
 8007626:	d015      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x8c>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800762e:	d011      	beq.n	8007654 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0201 	orr.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007640:	e008      	b.n	8007654 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0201 	orr.w	r2, r2, #1
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	e000      	b.n	8007656 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007654:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	40012c00 	.word	0x40012c00
 8007668:	40014000 	.word	0x40014000
 800766c:	00010007 	.word	0x00010007

08007670 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e049      	b.n	8007716 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7fb fb64 	bl	8002d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	4619      	mov	r1, r3
 80076ae:	4610      	mov	r0, r2
 80076b0:	f000 fb52 	bl	8007d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_TIM_PWM_Start+0x24>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	bf14      	ite	ne
 800773c:	2301      	movne	r3, #1
 800773e:	2300      	moveq	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	e03c      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b04      	cmp	r3, #4
 8007748:	d109      	bne.n	800775e <HAL_TIM_PWM_Start+0x3e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b01      	cmp	r3, #1
 8007754:	bf14      	ite	ne
 8007756:	2301      	movne	r3, #1
 8007758:	2300      	moveq	r3, #0
 800775a:	b2db      	uxtb	r3, r3
 800775c:	e02f      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b08      	cmp	r3, #8
 8007762:	d109      	bne.n	8007778 <HAL_TIM_PWM_Start+0x58>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	bf14      	ite	ne
 8007770:	2301      	movne	r3, #1
 8007772:	2300      	moveq	r3, #0
 8007774:	b2db      	uxtb	r3, r3
 8007776:	e022      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2b0c      	cmp	r3, #12
 800777c:	d109      	bne.n	8007792 <HAL_TIM_PWM_Start+0x72>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b01      	cmp	r3, #1
 8007788:	bf14      	ite	ne
 800778a:	2301      	movne	r3, #1
 800778c:	2300      	moveq	r3, #0
 800778e:	b2db      	uxtb	r3, r3
 8007790:	e015      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b10      	cmp	r3, #16
 8007796:	d109      	bne.n	80077ac <HAL_TIM_PWM_Start+0x8c>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	bf14      	ite	ne
 80077a4:	2301      	movne	r3, #1
 80077a6:	2300      	moveq	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e008      	b.n	80077be <HAL_TIM_PWM_Start+0x9e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	bf14      	ite	ne
 80077b8:	2301      	movne	r3, #1
 80077ba:	2300      	moveq	r3, #0
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e07e      	b.n	80078c4 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d104      	bne.n	80077d6 <HAL_TIM_PWM_Start+0xb6>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077d4:	e023      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_PWM_Start+0xc6>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077e4:	e01b      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b08      	cmp	r3, #8
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_PWM_Start+0xd6>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077f4:	e013      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b0c      	cmp	r3, #12
 80077fa:	d104      	bne.n	8007806 <HAL_TIM_PWM_Start+0xe6>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007804:	e00b      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b10      	cmp	r3, #16
 800780a:	d104      	bne.n	8007816 <HAL_TIM_PWM_Start+0xf6>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007814:	e003      	b.n	800781e <HAL_TIM_PWM_Start+0xfe>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2201      	movs	r2, #1
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fd78 	bl	800831c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a26      	ldr	r2, [pc, #152]	; (80078cc <HAL_TIM_PWM_Start+0x1ac>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d009      	beq.n	800784a <HAL_TIM_PWM_Start+0x12a>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a25      	ldr	r2, [pc, #148]	; (80078d0 <HAL_TIM_PWM_Start+0x1b0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d004      	beq.n	800784a <HAL_TIM_PWM_Start+0x12a>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a23      	ldr	r2, [pc, #140]	; (80078d4 <HAL_TIM_PWM_Start+0x1b4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d101      	bne.n	800784e <HAL_TIM_PWM_Start+0x12e>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <HAL_TIM_PWM_Start+0x130>
 800784e:	2300      	movs	r3, #0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d007      	beq.n	8007864 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007862:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a18      	ldr	r2, [pc, #96]	; (80078cc <HAL_TIM_PWM_Start+0x1ac>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d009      	beq.n	8007882 <HAL_TIM_PWM_Start+0x162>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d004      	beq.n	8007882 <HAL_TIM_PWM_Start+0x162>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a14      	ldr	r2, [pc, #80]	; (80078d0 <HAL_TIM_PWM_Start+0x1b0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d115      	bne.n	80078ae <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	4b13      	ldr	r3, [pc, #76]	; (80078d8 <HAL_TIM_PWM_Start+0x1b8>)
 800788a:	4013      	ands	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b06      	cmp	r3, #6
 8007892:	d015      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x1a0>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800789a:	d011      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0201 	orr.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	e008      	b.n	80078c0 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f042 0201 	orr.w	r2, r2, #1
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	e000      	b.n	80078c2 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40014000 	.word	0x40014000
 80078d4:	40014400 	.word	0x40014400
 80078d8:	00010007 	.word	0x00010007

080078dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f003 0302 	and.w	r3, r3, #2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d020      	beq.n	8007940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01b      	beq.n	8007940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f06f 0202 	mvn.w	r2, #2
 8007910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f9f8 	bl	8007d1c <HAL_TIM_IC_CaptureCallback>
 800792c:	e005      	b.n	800793a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f9ea 	bl	8007d08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 f9fb 	bl	8007d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	d020      	beq.n	800798c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01b      	beq.n	800798c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f06f 0204 	mvn.w	r2, #4
 800795c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 f9d2 	bl	8007d1c <HAL_TIM_IC_CaptureCallback>
 8007978:	e005      	b.n	8007986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f9c4 	bl	8007d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f9d5 	bl	8007d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 0308 	and.w	r3, r3, #8
 8007992:	2b00      	cmp	r3, #0
 8007994:	d020      	beq.n	80079d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b00      	cmp	r3, #0
 800799e:	d01b      	beq.n	80079d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f06f 0208 	mvn.w	r2, #8
 80079a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2204      	movs	r2, #4
 80079ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f9ac 	bl	8007d1c <HAL_TIM_IC_CaptureCallback>
 80079c4:	e005      	b.n	80079d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f99e 	bl	8007d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f9af 	bl	8007d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f003 0310 	and.w	r3, r3, #16
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d020      	beq.n	8007a24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01b      	beq.n	8007a24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f06f 0210 	mvn.w	r2, #16
 80079f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2208      	movs	r2, #8
 80079fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	69db      	ldr	r3, [r3, #28]
 8007a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f986 	bl	8007d1c <HAL_TIM_IC_CaptureCallback>
 8007a10:	e005      	b.n	8007a1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f978 	bl	8007d08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f989 	bl	8007d30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f003 0301 	and.w	r3, r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00c      	beq.n	8007a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d007      	beq.n	8007a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f06f 0201 	mvn.w	r2, #1
 8007a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fa fa9a 	bl	8001f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00c      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fd66 	bl	8008538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d00c      	beq.n	8007a90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d007      	beq.n	8007a90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fd5e 	bl	800854c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00c      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f948 	bl	8007d44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f003 0320 	and.w	r3, r3, #32
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d007      	beq.n	8007ad8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f06f 0220 	mvn.w	r2, #32
 8007ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fd26 	bl	8008524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ad8:	bf00      	nop
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e0ff      	b.n	8007cfe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2b14      	cmp	r3, #20
 8007b0a:	f200 80f0 	bhi.w	8007cee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b0e:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b69 	.word	0x08007b69
 8007b18:	08007cef 	.word	0x08007cef
 8007b1c:	08007cef 	.word	0x08007cef
 8007b20:	08007cef 	.word	0x08007cef
 8007b24:	08007ba9 	.word	0x08007ba9
 8007b28:	08007cef 	.word	0x08007cef
 8007b2c:	08007cef 	.word	0x08007cef
 8007b30:	08007cef 	.word	0x08007cef
 8007b34:	08007beb 	.word	0x08007beb
 8007b38:	08007cef 	.word	0x08007cef
 8007b3c:	08007cef 	.word	0x08007cef
 8007b40:	08007cef 	.word	0x08007cef
 8007b44:	08007c2b 	.word	0x08007c2b
 8007b48:	08007cef 	.word	0x08007cef
 8007b4c:	08007cef 	.word	0x08007cef
 8007b50:	08007cef 	.word	0x08007cef
 8007b54:	08007c6d 	.word	0x08007c6d
 8007b58:	08007cef 	.word	0x08007cef
 8007b5c:	08007cef 	.word	0x08007cef
 8007b60:	08007cef 	.word	0x08007cef
 8007b64:	08007cad 	.word	0x08007cad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 f956 	bl	8007e20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f042 0208 	orr.w	r2, r2, #8
 8007b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699a      	ldr	r2, [r3, #24]
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f022 0204 	bic.w	r2, r2, #4
 8007b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6999      	ldr	r1, [r3, #24]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	691a      	ldr	r2, [r3, #16]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	619a      	str	r2, [r3, #24]
      break;
 8007ba6:	e0a5      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 f9b2 	bl	8007f18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	699a      	ldr	r2, [r3, #24]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6999      	ldr	r1, [r3, #24]
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	021a      	lsls	r2, r3, #8
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	619a      	str	r2, [r3, #24]
      break;
 8007be8:	e084      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68b9      	ldr	r1, [r7, #8]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fa0b 	bl	800800c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	69da      	ldr	r2, [r3, #28]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0208 	orr.w	r2, r2, #8
 8007c04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69da      	ldr	r2, [r3, #28]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f022 0204 	bic.w	r2, r2, #4
 8007c14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	69d9      	ldr	r1, [r3, #28]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	61da      	str	r2, [r3, #28]
      break;
 8007c28:	e064      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f000 fa63 	bl	80080fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69da      	ldr	r2, [r3, #28]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	69d9      	ldr	r1, [r3, #28]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	021a      	lsls	r2, r3, #8
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	61da      	str	r2, [r3, #28]
      break;
 8007c6a:	e043      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 faa0 	bl	80081b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0208 	orr.w	r2, r2, #8
 8007c86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0204 	bic.w	r2, r2, #4
 8007c96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	691a      	ldr	r2, [r3, #16]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007caa:	e023      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68b9      	ldr	r1, [r7, #8]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fad8 	bl	8008268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	021a      	lsls	r2, r3, #8
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007cec:	e002      	b.n	8007cf4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop

08007d08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a2a      	ldr	r2, [pc, #168]	; (8007e14 <TIM_Base_SetConfig+0xbc>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d003      	beq.n	8007d78 <TIM_Base_SetConfig+0x20>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d76:	d108      	bne.n	8007d8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a21      	ldr	r2, [pc, #132]	; (8007e14 <TIM_Base_SetConfig+0xbc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d00b      	beq.n	8007daa <TIM_Base_SetConfig+0x52>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d98:	d007      	beq.n	8007daa <TIM_Base_SetConfig+0x52>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <TIM_Base_SetConfig+0xc0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d003      	beq.n	8007daa <TIM_Base_SetConfig+0x52>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a1d      	ldr	r2, [pc, #116]	; (8007e1c <TIM_Base_SetConfig+0xc4>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d108      	bne.n	8007dbc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a0c      	ldr	r2, [pc, #48]	; (8007e14 <TIM_Base_SetConfig+0xbc>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d007      	beq.n	8007df8 <TIM_Base_SetConfig+0xa0>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a0b      	ldr	r2, [pc, #44]	; (8007e18 <TIM_Base_SetConfig+0xc0>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d003      	beq.n	8007df8 <TIM_Base_SetConfig+0xa0>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a0a      	ldr	r2, [pc, #40]	; (8007e1c <TIM_Base_SetConfig+0xc4>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d103      	bne.n	8007e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	615a      	str	r2, [r3, #20]
}
 8007e06:	bf00      	nop
 8007e08:	3714      	adds	r7, #20
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	40012c00 	.word	0x40012c00
 8007e18:	40014000 	.word	0x40014000
 8007e1c:	40014400 	.word	0x40014400

08007e20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	f023 0201 	bic.w	r2, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f023 0303 	bic.w	r3, r3, #3
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f023 0302 	bic.w	r3, r3, #2
 8007e6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	4a24      	ldr	r2, [pc, #144]	; (8007f0c <TIM_OC1_SetConfig+0xec>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d007      	beq.n	8007e90 <TIM_OC1_SetConfig+0x70>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4a23      	ldr	r2, [pc, #140]	; (8007f10 <TIM_OC1_SetConfig+0xf0>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d003      	beq.n	8007e90 <TIM_OC1_SetConfig+0x70>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a22      	ldr	r2, [pc, #136]	; (8007f14 <TIM_OC1_SetConfig+0xf4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d10c      	bne.n	8007eaa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f023 0308 	bic.w	r3, r3, #8
 8007e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f023 0304 	bic.w	r3, r3, #4
 8007ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a17      	ldr	r2, [pc, #92]	; (8007f0c <TIM_OC1_SetConfig+0xec>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d007      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xa2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a16      	ldr	r2, [pc, #88]	; (8007f10 <TIM_OC1_SetConfig+0xf0>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d003      	beq.n	8007ec2 <TIM_OC1_SetConfig+0xa2>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a15      	ldr	r2, [pc, #84]	; (8007f14 <TIM_OC1_SetConfig+0xf4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d111      	bne.n	8007ee6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68fa      	ldr	r2, [r7, #12]
 8007ef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	621a      	str	r2, [r3, #32]
}
 8007f00:	bf00      	nop
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40014000 	.word	0x40014000
 8007f14:	40014400 	.word	0x40014400

08007f18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a1b      	ldr	r3, [r3, #32]
 8007f2c:	f023 0210 	bic.w	r2, r3, #16
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	021b      	lsls	r3, r3, #8
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f023 0320 	bic.w	r3, r3, #32
 8007f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a22      	ldr	r2, [pc, #136]	; (8008000 <TIM_OC2_SetConfig+0xe8>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d10d      	bne.n	8007f98 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a19      	ldr	r2, [pc, #100]	; (8008000 <TIM_OC2_SetConfig+0xe8>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d007      	beq.n	8007fb0 <TIM_OC2_SetConfig+0x98>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a18      	ldr	r2, [pc, #96]	; (8008004 <TIM_OC2_SetConfig+0xec>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d003      	beq.n	8007fb0 <TIM_OC2_SetConfig+0x98>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a17      	ldr	r2, [pc, #92]	; (8008008 <TIM_OC2_SetConfig+0xf0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d113      	bne.n	8007fd8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	685a      	ldr	r2, [r3, #4]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	621a      	str	r2, [r3, #32]
}
 8007ff2:	bf00      	nop
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	40012c00 	.word	0x40012c00
 8008004:	40014000 	.word	0x40014000
 8008008:	40014400 	.word	0x40014400

0800800c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800803a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f023 0303 	bic.w	r3, r3, #3
 8008046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	021b      	lsls	r3, r3, #8
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	4313      	orrs	r3, r2
 8008064:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a21      	ldr	r2, [pc, #132]	; (80080f0 <TIM_OC3_SetConfig+0xe4>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d10d      	bne.n	800808a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	021b      	lsls	r3, r3, #8
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	4313      	orrs	r3, r2
 8008080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a18      	ldr	r2, [pc, #96]	; (80080f0 <TIM_OC3_SetConfig+0xe4>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d007      	beq.n	80080a2 <TIM_OC3_SetConfig+0x96>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <TIM_OC3_SetConfig+0xe8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d003      	beq.n	80080a2 <TIM_OC3_SetConfig+0x96>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a16      	ldr	r2, [pc, #88]	; (80080f8 <TIM_OC3_SetConfig+0xec>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d113      	bne.n	80080ca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	695b      	ldr	r3, [r3, #20]
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	699b      	ldr	r3, [r3, #24]
 80080c2:	011b      	lsls	r3, r3, #4
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	697a      	ldr	r2, [r7, #20]
 80080e2:	621a      	str	r2, [r3, #32]
}
 80080e4:	bf00      	nop
 80080e6:	371c      	adds	r7, #28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	40012c00 	.word	0x40012c00
 80080f4:	40014000 	.word	0x40014000
 80080f8:	40014400 	.word	0x40014400

080080fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a1b      	ldr	r3, [r3, #32]
 8008110:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800812a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	4313      	orrs	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800814a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	031b      	lsls	r3, r3, #12
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a14      	ldr	r2, [pc, #80]	; (80081ac <TIM_OC4_SetConfig+0xb0>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d007      	beq.n	8008170 <TIM_OC4_SetConfig+0x74>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <TIM_OC4_SetConfig+0xb4>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d003      	beq.n	8008170 <TIM_OC4_SetConfig+0x74>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a12      	ldr	r2, [pc, #72]	; (80081b4 <TIM_OC4_SetConfig+0xb8>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d109      	bne.n	8008184 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	019b      	lsls	r3, r3, #6
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	4313      	orrs	r3, r2
 8008182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	621a      	str	r2, [r3, #32]
}
 800819e:	bf00      	nop
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40014000 	.word	0x40014000
 80081b4:	40014400 	.word	0x40014400

080081b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80081fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	041b      	lsls	r3, r3, #16
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	4313      	orrs	r3, r2
 8008208:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a13      	ldr	r2, [pc, #76]	; (800825c <TIM_OC5_SetConfig+0xa4>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d007      	beq.n	8008222 <TIM_OC5_SetConfig+0x6a>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a12      	ldr	r2, [pc, #72]	; (8008260 <TIM_OC5_SetConfig+0xa8>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d003      	beq.n	8008222 <TIM_OC5_SetConfig+0x6a>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a11      	ldr	r2, [pc, #68]	; (8008264 <TIM_OC5_SetConfig+0xac>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d109      	bne.n	8008236 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008228:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	021b      	lsls	r3, r3, #8
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	4313      	orrs	r3, r2
 8008234:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	621a      	str	r2, [r3, #32]
}
 8008250:	bf00      	nop
 8008252:	371c      	adds	r7, #28
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	40012c00 	.word	0x40012c00
 8008260:	40014000 	.word	0x40014000
 8008264:	40014400 	.word	0x40014400

08008268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	021b      	lsls	r3, r3, #8
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80082ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	051b      	lsls	r3, r3, #20
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	4a14      	ldr	r2, [pc, #80]	; (8008310 <TIM_OC6_SetConfig+0xa8>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d007      	beq.n	80082d4 <TIM_OC6_SetConfig+0x6c>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a13      	ldr	r2, [pc, #76]	; (8008314 <TIM_OC6_SetConfig+0xac>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d003      	beq.n	80082d4 <TIM_OC6_SetConfig+0x6c>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a12      	ldr	r2, [pc, #72]	; (8008318 <TIM_OC6_SetConfig+0xb0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d109      	bne.n	80082e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80082da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	029b      	lsls	r3, r3, #10
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40012c00 	.word	0x40012c00
 8008314:	40014000 	.word	0x40014000
 8008318:	40014400 	.word	0x40014400

0800831c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	2201      	movs	r2, #1
 8008330:	fa02 f303 	lsl.w	r3, r2, r3
 8008334:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6a1a      	ldr	r2, [r3, #32]
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	43db      	mvns	r3, r3
 800833e:	401a      	ands	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6a1a      	ldr	r2, [r3, #32]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	fa01 f303 	lsl.w	r3, r1, r3
 8008354:	431a      	orrs	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
	...

08008368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008378:	2b01      	cmp	r3, #1
 800837a:	d101      	bne.n	8008380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800837c:	2302      	movs	r3, #2
 800837e:	e04f      	b.n	8008420 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2202      	movs	r2, #2
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a21      	ldr	r2, [pc, #132]	; (800842c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d108      	bne.n	80083bc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	4313      	orrs	r3, r2
 80083ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a14      	ldr	r2, [pc, #80]	; (800842c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d009      	beq.n	80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e8:	d004      	beq.n	80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a10      	ldr	r2, [pc, #64]	; (8008430 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d10c      	bne.n	800840e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	4313      	orrs	r3, r2
 8008404:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr
 800842c:	40012c00 	.word	0x40012c00
 8008430:	40014000 	.word	0x40014000

08008434 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800844c:	2302      	movs	r3, #2
 800844e:	e060      	b.n	8008512 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	4313      	orrs	r3, r2
 8008464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	4313      	orrs	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4313      	orrs	r3, r2
 800848e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	4313      	orrs	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	4313      	orrs	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	041b      	lsls	r3, r3, #16
 80084c6:	4313      	orrs	r3, r2
 80084c8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a14      	ldr	r2, [pc, #80]	; (8008520 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d115      	bne.n	8008500 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	051b      	lsls	r3, r3, #20
 80084e0:	4313      	orrs	r3, r2
 80084e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	4313      	orrs	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3714      	adds	r7, #20
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	40012c00 	.word	0x40012c00

08008524 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e040      	b.n	80085f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008576:	2b00      	cmp	r3, #0
 8008578:	d106      	bne.n	8008588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7fa faee 	bl	8002b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2224      	movs	r2, #36	; 0x24
 800858c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f022 0201 	bic.w	r2, r2, #1
 800859c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d002      	beq.n	80085ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 fba8 	bl	8008cfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 f979 	bl	80088a4 <UART_SetConfig>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d101      	bne.n	80085bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e01b      	b.n	80085f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f042 0201 	orr.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fc27 	bl	8008e40 <UART_CheckIdleState>
 80085f2:	4603      	mov	r3, r0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08a      	sub	sp, #40	; 0x28
 8008600:	af02      	add	r7, sp, #8
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	603b      	str	r3, [r7, #0]
 8008608:	4613      	mov	r3, r2
 800860a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008610:	2b20      	cmp	r3, #32
 8008612:	d178      	bne.n	8008706 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <HAL_UART_Transmit+0x24>
 800861a:	88fb      	ldrh	r3, [r7, #6]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e071      	b.n	8008708 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2221      	movs	r2, #33	; 0x21
 8008630:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008632:	f7fa fdd9 	bl	80031e8 <HAL_GetTick>
 8008636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	88fa      	ldrh	r2, [r7, #6]
 800863c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	88fa      	ldrh	r2, [r7, #6]
 8008644:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008650:	d108      	bne.n	8008664 <HAL_UART_Transmit+0x68>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d104      	bne.n	8008664 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	61bb      	str	r3, [r7, #24]
 8008662:	e003      	b.n	800866c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008668:	2300      	movs	r3, #0
 800866a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800866c:	e030      	b.n	80086d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2200      	movs	r2, #0
 8008676:	2180      	movs	r1, #128	; 0x80
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f000 fc89 	bl	8008f90 <UART_WaitOnFlagUntilTimeout>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d004      	beq.n	800868e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2220      	movs	r2, #32
 8008688:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e03c      	b.n	8008708 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008694:	69bb      	ldr	r3, [r7, #24]
 8008696:	881a      	ldrh	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086a0:	b292      	uxth	r2, r2
 80086a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	3302      	adds	r3, #2
 80086a8:	61bb      	str	r3, [r7, #24]
 80086aa:	e008      	b.n	80086be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	781a      	ldrb	r2, [r3, #0]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	b292      	uxth	r2, r2
 80086b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	3301      	adds	r3, #1
 80086bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	3b01      	subs	r3, #1
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1c8      	bne.n	800866e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2200      	movs	r2, #0
 80086e4:	2140      	movs	r1, #64	; 0x40
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f000 fc52 	bl	8008f90 <UART_WaitOnFlagUntilTimeout>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d004      	beq.n	80086fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2220      	movs	r2, #32
 80086f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e005      	b.n	8008708 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2220      	movs	r2, #32
 8008700:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	e000      	b.n	8008708 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008706:	2302      	movs	r3, #2
  }
}
 8008708:	4618      	mov	r0, r3
 800870a:	3720      	adds	r7, #32
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	; 0x28
 8008714:	af02      	add	r7, sp, #8
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	603b      	str	r3, [r7, #0]
 800871c:	4613      	mov	r3, r2
 800871e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008726:	2b20      	cmp	r3, #32
 8008728:	f040 80b6 	bne.w	8008898 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <HAL_UART_Receive+0x28>
 8008732:	88fb      	ldrh	r3, [r7, #6]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d101      	bne.n	800873c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e0ae      	b.n	800889a <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2222      	movs	r2, #34	; 0x22
 8008748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008752:	f7fa fd49 	bl	80031e8 <HAL_GetTick>
 8008756:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	88fa      	ldrh	r2, [r7, #6]
 800875c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	88fa      	ldrh	r2, [r7, #6]
 8008764:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008770:	d10e      	bne.n	8008790 <HAL_UART_Receive+0x80>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d105      	bne.n	8008786 <HAL_UART_Receive+0x76>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008784:	e02d      	b.n	80087e2 <HAL_UART_Receive+0xd2>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	22ff      	movs	r2, #255	; 0xff
 800878a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800878e:	e028      	b.n	80087e2 <HAL_UART_Receive+0xd2>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10d      	bne.n	80087b4 <HAL_UART_Receive+0xa4>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d104      	bne.n	80087aa <HAL_UART_Receive+0x9a>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	22ff      	movs	r2, #255	; 0xff
 80087a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087a8:	e01b      	b.n	80087e2 <HAL_UART_Receive+0xd2>
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	227f      	movs	r2, #127	; 0x7f
 80087ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087b2:	e016      	b.n	80087e2 <HAL_UART_Receive+0xd2>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087bc:	d10d      	bne.n	80087da <HAL_UART_Receive+0xca>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d104      	bne.n	80087d0 <HAL_UART_Receive+0xc0>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	227f      	movs	r2, #127	; 0x7f
 80087ca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087ce:	e008      	b.n	80087e2 <HAL_UART_Receive+0xd2>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	223f      	movs	r2, #63	; 0x3f
 80087d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087d8:	e003      	b.n	80087e2 <HAL_UART_Receive+0xd2>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087e8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087f2:	d108      	bne.n	8008806 <HAL_UART_Receive+0xf6>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d104      	bne.n	8008806 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	61bb      	str	r3, [r7, #24]
 8008804:	e003      	b.n	800880e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800880e:	e037      	b.n	8008880 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2200      	movs	r2, #0
 8008818:	2120      	movs	r1, #32
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fbb8 	bl	8008f90 <UART_WaitOnFlagUntilTimeout>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e033      	b.n	800889a <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10c      	bne.n	8008852 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800883e:	b29a      	uxth	r2, r3
 8008840:	8a7b      	ldrh	r3, [r7, #18]
 8008842:	4013      	ands	r3, r2
 8008844:	b29a      	uxth	r2, r3
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	3302      	adds	r3, #2
 800884e:	61bb      	str	r3, [r7, #24]
 8008850:	e00d      	b.n	800886e <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008858:	b29b      	uxth	r3, r3
 800885a:	b2da      	uxtb	r2, r3
 800885c:	8a7b      	ldrh	r3, [r7, #18]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	4013      	ands	r3, r2
 8008862:	b2da      	uxtb	r2, r3
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	3301      	adds	r3, #1
 800886c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008874:	b29b      	uxth	r3, r3
 8008876:	3b01      	subs	r3, #1
 8008878:	b29a      	uxth	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008886:	b29b      	uxth	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1c1      	bne.n	8008810 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	e000      	b.n	800889a <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8008898:	2302      	movs	r3, #2
  }
}
 800889a:	4618      	mov	r0, r3
 800889c:	3720      	adds	r7, #32
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
	...

080088a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088a8:	b08a      	sub	sp, #40	; 0x28
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	689a      	ldr	r2, [r3, #8]
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	431a      	orrs	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	431a      	orrs	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	4bb4      	ldr	r3, [pc, #720]	; (8008ba4 <UART_SetConfig+0x300>)
 80088d4:	4013      	ands	r3, r2
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	6812      	ldr	r2, [r2, #0]
 80088da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088dc:	430b      	orrs	r3, r1
 80088de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4aa9      	ldr	r2, [pc, #676]	; (8008ba8 <UART_SetConfig+0x304>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d004      	beq.n	8008910 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800890c:	4313      	orrs	r3, r2
 800890e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008920:	430a      	orrs	r2, r1
 8008922:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4aa0      	ldr	r2, [pc, #640]	; (8008bac <UART_SetConfig+0x308>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d126      	bne.n	800897c <UART_SetConfig+0xd8>
 800892e:	4ba0      	ldr	r3, [pc, #640]	; (8008bb0 <UART_SetConfig+0x30c>)
 8008930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008934:	f003 0303 	and.w	r3, r3, #3
 8008938:	2b03      	cmp	r3, #3
 800893a:	d81b      	bhi.n	8008974 <UART_SetConfig+0xd0>
 800893c:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <UART_SetConfig+0xa0>)
 800893e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008942:	bf00      	nop
 8008944:	08008955 	.word	0x08008955
 8008948:	08008965 	.word	0x08008965
 800894c:	0800895d 	.word	0x0800895d
 8008950:	0800896d 	.word	0x0800896d
 8008954:	2301      	movs	r3, #1
 8008956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800895a:	e080      	b.n	8008a5e <UART_SetConfig+0x1ba>
 800895c:	2302      	movs	r3, #2
 800895e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008962:	e07c      	b.n	8008a5e <UART_SetConfig+0x1ba>
 8008964:	2304      	movs	r3, #4
 8008966:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800896a:	e078      	b.n	8008a5e <UART_SetConfig+0x1ba>
 800896c:	2308      	movs	r3, #8
 800896e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008972:	e074      	b.n	8008a5e <UART_SetConfig+0x1ba>
 8008974:	2310      	movs	r3, #16
 8008976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800897a:	e070      	b.n	8008a5e <UART_SetConfig+0x1ba>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a8c      	ldr	r2, [pc, #560]	; (8008bb4 <UART_SetConfig+0x310>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d138      	bne.n	80089f8 <UART_SetConfig+0x154>
 8008986:	4b8a      	ldr	r3, [pc, #552]	; (8008bb0 <UART_SetConfig+0x30c>)
 8008988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800898c:	f003 030c 	and.w	r3, r3, #12
 8008990:	2b0c      	cmp	r3, #12
 8008992:	d82d      	bhi.n	80089f0 <UART_SetConfig+0x14c>
 8008994:	a201      	add	r2, pc, #4	; (adr r2, 800899c <UART_SetConfig+0xf8>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	080089d1 	.word	0x080089d1
 80089a0:	080089f1 	.word	0x080089f1
 80089a4:	080089f1 	.word	0x080089f1
 80089a8:	080089f1 	.word	0x080089f1
 80089ac:	080089e1 	.word	0x080089e1
 80089b0:	080089f1 	.word	0x080089f1
 80089b4:	080089f1 	.word	0x080089f1
 80089b8:	080089f1 	.word	0x080089f1
 80089bc:	080089d9 	.word	0x080089d9
 80089c0:	080089f1 	.word	0x080089f1
 80089c4:	080089f1 	.word	0x080089f1
 80089c8:	080089f1 	.word	0x080089f1
 80089cc:	080089e9 	.word	0x080089e9
 80089d0:	2300      	movs	r3, #0
 80089d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089d6:	e042      	b.n	8008a5e <UART_SetConfig+0x1ba>
 80089d8:	2302      	movs	r3, #2
 80089da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089de:	e03e      	b.n	8008a5e <UART_SetConfig+0x1ba>
 80089e0:	2304      	movs	r3, #4
 80089e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089e6:	e03a      	b.n	8008a5e <UART_SetConfig+0x1ba>
 80089e8:	2308      	movs	r3, #8
 80089ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ee:	e036      	b.n	8008a5e <UART_SetConfig+0x1ba>
 80089f0:	2310      	movs	r3, #16
 80089f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089f6:	e032      	b.n	8008a5e <UART_SetConfig+0x1ba>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a6a      	ldr	r2, [pc, #424]	; (8008ba8 <UART_SetConfig+0x304>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d12a      	bne.n	8008a58 <UART_SetConfig+0x1b4>
 8008a02:	4b6b      	ldr	r3, [pc, #428]	; (8008bb0 <UART_SetConfig+0x30c>)
 8008a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a10:	d01a      	beq.n	8008a48 <UART_SetConfig+0x1a4>
 8008a12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a16:	d81b      	bhi.n	8008a50 <UART_SetConfig+0x1ac>
 8008a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a1c:	d00c      	beq.n	8008a38 <UART_SetConfig+0x194>
 8008a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a22:	d815      	bhi.n	8008a50 <UART_SetConfig+0x1ac>
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <UART_SetConfig+0x18c>
 8008a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a2c:	d008      	beq.n	8008a40 <UART_SetConfig+0x19c>
 8008a2e:	e00f      	b.n	8008a50 <UART_SetConfig+0x1ac>
 8008a30:	2300      	movs	r3, #0
 8008a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a36:	e012      	b.n	8008a5e <UART_SetConfig+0x1ba>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a3e:	e00e      	b.n	8008a5e <UART_SetConfig+0x1ba>
 8008a40:	2304      	movs	r3, #4
 8008a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a46:	e00a      	b.n	8008a5e <UART_SetConfig+0x1ba>
 8008a48:	2308      	movs	r3, #8
 8008a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a4e:	e006      	b.n	8008a5e <UART_SetConfig+0x1ba>
 8008a50:	2310      	movs	r3, #16
 8008a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a56:	e002      	b.n	8008a5e <UART_SetConfig+0x1ba>
 8008a58:	2310      	movs	r3, #16
 8008a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a51      	ldr	r2, [pc, #324]	; (8008ba8 <UART_SetConfig+0x304>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d17a      	bne.n	8008b5e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a6c:	2b08      	cmp	r3, #8
 8008a6e:	d824      	bhi.n	8008aba <UART_SetConfig+0x216>
 8008a70:	a201      	add	r2, pc, #4	; (adr r2, 8008a78 <UART_SetConfig+0x1d4>)
 8008a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a76:	bf00      	nop
 8008a78:	08008a9d 	.word	0x08008a9d
 8008a7c:	08008abb 	.word	0x08008abb
 8008a80:	08008aa5 	.word	0x08008aa5
 8008a84:	08008abb 	.word	0x08008abb
 8008a88:	08008aab 	.word	0x08008aab
 8008a8c:	08008abb 	.word	0x08008abb
 8008a90:	08008abb 	.word	0x08008abb
 8008a94:	08008abb 	.word	0x08008abb
 8008a98:	08008ab3 	.word	0x08008ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a9c:	f7fd fa9a 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
 8008aa0:	61f8      	str	r0, [r7, #28]
        break;
 8008aa2:	e010      	b.n	8008ac6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008aa4:	4b44      	ldr	r3, [pc, #272]	; (8008bb8 <UART_SetConfig+0x314>)
 8008aa6:	61fb      	str	r3, [r7, #28]
        break;
 8008aa8:	e00d      	b.n	8008ac6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aaa:	f7fd f9fb 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 8008aae:	61f8      	str	r0, [r7, #28]
        break;
 8008ab0:	e009      	b.n	8008ac6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ab6:	61fb      	str	r3, [r7, #28]
        break;
 8008ab8:	e005      	b.n	8008ac6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ac4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 8107 	beq.w	8008cdc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	005b      	lsls	r3, r3, #1
 8008ad6:	4413      	add	r3, r2
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d305      	bcc.n	8008aea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008ae4:	69fa      	ldr	r2, [r7, #28]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d903      	bls.n	8008af2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008af0:	e0f4      	b.n	8008cdc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	2200      	movs	r2, #0
 8008af6:	461c      	mov	r4, r3
 8008af8:	4615      	mov	r5, r2
 8008afa:	f04f 0200 	mov.w	r2, #0
 8008afe:	f04f 0300 	mov.w	r3, #0
 8008b02:	022b      	lsls	r3, r5, #8
 8008b04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008b08:	0222      	lsls	r2, r4, #8
 8008b0a:	68f9      	ldr	r1, [r7, #12]
 8008b0c:	6849      	ldr	r1, [r1, #4]
 8008b0e:	0849      	lsrs	r1, r1, #1
 8008b10:	2000      	movs	r0, #0
 8008b12:	4688      	mov	r8, r1
 8008b14:	4681      	mov	r9, r0
 8008b16:	eb12 0a08 	adds.w	sl, r2, r8
 8008b1a:	eb43 0b09 	adc.w	fp, r3, r9
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	603b      	str	r3, [r7, #0]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b2c:	4650      	mov	r0, sl
 8008b2e:	4659      	mov	r1, fp
 8008b30:	f7f8 f8aa 	bl	8000c88 <__aeabi_uldivmod>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4613      	mov	r3, r2
 8008b3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b42:	d308      	bcc.n	8008b56 <UART_SetConfig+0x2b2>
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b4a:	d204      	bcs.n	8008b56 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69ba      	ldr	r2, [r7, #24]
 8008b52:	60da      	str	r2, [r3, #12]
 8008b54:	e0c2      	b.n	8008cdc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b5c:	e0be      	b.n	8008cdc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b66:	d16a      	bne.n	8008c3e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b6c:	2b08      	cmp	r3, #8
 8008b6e:	d834      	bhi.n	8008bda <UART_SetConfig+0x336>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <UART_SetConfig+0x2d4>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008b9d 	.word	0x08008b9d
 8008b7c:	08008bbd 	.word	0x08008bbd
 8008b80:	08008bc5 	.word	0x08008bc5
 8008b84:	08008bdb 	.word	0x08008bdb
 8008b88:	08008bcb 	.word	0x08008bcb
 8008b8c:	08008bdb 	.word	0x08008bdb
 8008b90:	08008bdb 	.word	0x08008bdb
 8008b94:	08008bdb 	.word	0x08008bdb
 8008b98:	08008bd3 	.word	0x08008bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b9c:	f7fd fa1a 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
 8008ba0:	61f8      	str	r0, [r7, #28]
        break;
 8008ba2:	e020      	b.n	8008be6 <UART_SetConfig+0x342>
 8008ba4:	efff69f3 	.word	0xefff69f3
 8008ba8:	40008000 	.word	0x40008000
 8008bac:	40013800 	.word	0x40013800
 8008bb0:	40021000 	.word	0x40021000
 8008bb4:	40004400 	.word	0x40004400
 8008bb8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bbc:	f7fd fa20 	bl	8006000 <HAL_RCC_GetPCLK2Freq>
 8008bc0:	61f8      	str	r0, [r7, #28]
        break;
 8008bc2:	e010      	b.n	8008be6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bc4:	4b4c      	ldr	r3, [pc, #304]	; (8008cf8 <UART_SetConfig+0x454>)
 8008bc6:	61fb      	str	r3, [r7, #28]
        break;
 8008bc8:	e00d      	b.n	8008be6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bca:	f7fd f96b 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 8008bce:	61f8      	str	r0, [r7, #28]
        break;
 8008bd0:	e009      	b.n	8008be6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bd6:	61fb      	str	r3, [r7, #28]
        break;
 8008bd8:	e005      	b.n	8008be6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d077      	beq.n	8008cdc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	005a      	lsls	r2, r3, #1
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	085b      	lsrs	r3, r3, #1
 8008bf6:	441a      	add	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	2b0f      	cmp	r3, #15
 8008c06:	d916      	bls.n	8008c36 <UART_SetConfig+0x392>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c0e:	d212      	bcs.n	8008c36 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f023 030f 	bic.w	r3, r3, #15
 8008c18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	085b      	lsrs	r3, r3, #1
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	8afb      	ldrh	r3, [r7, #22]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	8afa      	ldrh	r2, [r7, #22]
 8008c32:	60da      	str	r2, [r3, #12]
 8008c34:	e052      	b.n	8008cdc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008c36:	2301      	movs	r3, #1
 8008c38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008c3c:	e04e      	b.n	8008cdc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c42:	2b08      	cmp	r3, #8
 8008c44:	d827      	bhi.n	8008c96 <UART_SetConfig+0x3f2>
 8008c46:	a201      	add	r2, pc, #4	; (adr r2, 8008c4c <UART_SetConfig+0x3a8>)
 8008c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c79 	.word	0x08008c79
 8008c54:	08008c81 	.word	0x08008c81
 8008c58:	08008c97 	.word	0x08008c97
 8008c5c:	08008c87 	.word	0x08008c87
 8008c60:	08008c97 	.word	0x08008c97
 8008c64:	08008c97 	.word	0x08008c97
 8008c68:	08008c97 	.word	0x08008c97
 8008c6c:	08008c8f 	.word	0x08008c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c70:	f7fd f9b0 	bl	8005fd4 <HAL_RCC_GetPCLK1Freq>
 8008c74:	61f8      	str	r0, [r7, #28]
        break;
 8008c76:	e014      	b.n	8008ca2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c78:	f7fd f9c2 	bl	8006000 <HAL_RCC_GetPCLK2Freq>
 8008c7c:	61f8      	str	r0, [r7, #28]
        break;
 8008c7e:	e010      	b.n	8008ca2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c80:	4b1d      	ldr	r3, [pc, #116]	; (8008cf8 <UART_SetConfig+0x454>)
 8008c82:	61fb      	str	r3, [r7, #28]
        break;
 8008c84:	e00d      	b.n	8008ca2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c86:	f7fd f90d 	bl	8005ea4 <HAL_RCC_GetSysClockFreq>
 8008c8a:	61f8      	str	r0, [r7, #28]
        break;
 8008c8c:	e009      	b.n	8008ca2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c92:	61fb      	str	r3, [r7, #28]
        break;
 8008c94:	e005      	b.n	8008ca2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d019      	beq.n	8008cdc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	085a      	lsrs	r2, r3, #1
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	441a      	add	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	2b0f      	cmp	r3, #15
 8008cc0:	d909      	bls.n	8008cd6 <UART_SetConfig+0x432>
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc8:	d205      	bcs.n	8008cd6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60da      	str	r2, [r3, #12]
 8008cd4:	e002      	b.n	8008cdc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008ce8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3728      	adds	r7, #40	; 0x28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cf6:	bf00      	nop
 8008cf8:	00f42400 	.word	0x00f42400

08008cfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	f003 0308 	and.w	r3, r3, #8
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00a      	beq.n	8008d26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00a      	beq.n	8008d48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d00a      	beq.n	8008d6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	f003 0304 	and.w	r3, r3, #4
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	430a      	orrs	r2, r1
 8008d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d90:	f003 0310 	and.w	r3, r3, #16
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d00a      	beq.n	8008dae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01a      	beq.n	8008e12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dfa:	d10a      	bne.n	8008e12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	430a      	orrs	r2, r1
 8008e10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00a      	beq.n	8008e34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	605a      	str	r2, [r3, #4]
  }
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b098      	sub	sp, #96	; 0x60
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e50:	f7fa f9ca 	bl	80031e8 <HAL_GetTick>
 8008e54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b08      	cmp	r3, #8
 8008e62:	d12e      	bne.n	8008ec2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 f88c 	bl	8008f90 <UART_WaitOnFlagUntilTimeout>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d021      	beq.n	8008ec2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e86:	e853 3f00 	ldrex	r3, [r3]
 8008e8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e92:	653b      	str	r3, [r7, #80]	; 0x50
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008e9e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ea2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ea4:	e841 2300 	strex	r3, r2, [r1]
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d1e6      	bne.n	8008e7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e062      	b.n	8008f88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d149      	bne.n	8008f64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f856 	bl	8008f90 <UART_WaitOnFlagUntilTimeout>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d03c      	beq.n	8008f64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	e853 3f00 	ldrex	r3, [r3]
 8008ef6:	623b      	str	r3, [r7, #32]
   return(result);
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f08:	633b      	str	r3, [r7, #48]	; 0x30
 8008f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f10:	e841 2300 	strex	r3, r2, [r1]
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d1e6      	bne.n	8008eea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3308      	adds	r3, #8
 8008f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0301 	bic.w	r3, r3, #1
 8008f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	3308      	adds	r3, #8
 8008f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f3c:	61fa      	str	r2, [r7, #28]
 8008f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	69b9      	ldr	r1, [r7, #24]
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	617b      	str	r3, [r7, #20]
   return(result);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e5      	bne.n	8008f1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f60:	2303      	movs	r3, #3
 8008f62:	e011      	b.n	8008f88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3758      	adds	r7, #88	; 0x58
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	603b      	str	r3, [r7, #0]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fa0:	e049      	b.n	8009036 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fa2:	69bb      	ldr	r3, [r7, #24]
 8008fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa8:	d045      	beq.n	8009036 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008faa:	f7fa f91d 	bl	80031e8 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d302      	bcc.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e048      	b.n	8009056 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d031      	beq.n	8009036 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	69db      	ldr	r3, [r3, #28]
 8008fd8:	f003 0308 	and.w	r3, r3, #8
 8008fdc:	2b08      	cmp	r3, #8
 8008fde:	d110      	bne.n	8009002 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2208      	movs	r2, #8
 8008fe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f000 f838 	bl	800905e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2208      	movs	r2, #8
 8008ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	e029      	b.n	8009056 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800900c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009010:	d111      	bne.n	8009036 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800901a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 f81e 	bl	800905e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2220      	movs	r2, #32
 8009026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e00f      	b.n	8009056 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	69da      	ldr	r2, [r3, #28]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4013      	ands	r3, r2
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	429a      	cmp	r2, r3
 8009044:	bf0c      	ite	eq
 8009046:	2301      	moveq	r3, #1
 8009048:	2300      	movne	r3, #0
 800904a:	b2db      	uxtb	r3, r3
 800904c:	461a      	mov	r2, r3
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	429a      	cmp	r2, r3
 8009052:	d0a6      	beq.n	8008fa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800905e:	b480      	push	{r7}
 8009060:	b095      	sub	sp, #84	; 0x54
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800906e:	e853 3f00 	ldrex	r3, [r3]
 8009072:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800907a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	461a      	mov	r2, r3
 8009082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009084:	643b      	str	r3, [r7, #64]	; 0x40
 8009086:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009088:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800908a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800908c:	e841 2300 	strex	r3, r2, [r1]
 8009090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	2b00      	cmp	r3, #0
 8009096:	d1e6      	bne.n	8009066 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3308      	adds	r3, #8
 800909e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	6a3b      	ldr	r3, [r7, #32]
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	f023 0301 	bic.w	r3, r3, #1
 80090ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3308      	adds	r3, #8
 80090b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c0:	e841 2300 	strex	r3, r2, [r1]
 80090c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e5      	bne.n	8009098 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d118      	bne.n	8009106 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	f023 0310 	bic.w	r3, r3, #16
 80090e8:	647b      	str	r3, [r7, #68]	; 0x44
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090f2:	61bb      	str	r3, [r7, #24]
 80090f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6979      	ldr	r1, [r7, #20]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e6      	bne.n	80090d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2220      	movs	r2, #32
 800910a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	669a      	str	r2, [r3, #104]	; 0x68
}
 800911a:	bf00      	nop
 800911c:	3754      	adds	r7, #84	; 0x54
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <sulp>:
 8009126:	b570      	push	{r4, r5, r6, lr}
 8009128:	4604      	mov	r4, r0
 800912a:	460d      	mov	r5, r1
 800912c:	ec45 4b10 	vmov	d0, r4, r5
 8009130:	4616      	mov	r6, r2
 8009132:	f003 fd29 	bl	800cb88 <__ulp>
 8009136:	ec51 0b10 	vmov	r0, r1, d0
 800913a:	b17e      	cbz	r6, 800915c <sulp+0x36>
 800913c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009140:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009144:	2b00      	cmp	r3, #0
 8009146:	dd09      	ble.n	800915c <sulp+0x36>
 8009148:	051b      	lsls	r3, r3, #20
 800914a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800914e:	2400      	movs	r4, #0
 8009150:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009154:	4622      	mov	r2, r4
 8009156:	462b      	mov	r3, r5
 8009158:	f7f7 fa4e 	bl	80005f8 <__aeabi_dmul>
 800915c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009160 <_strtod_l>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	ed2d 8b02 	vpush	{d8}
 8009168:	b09b      	sub	sp, #108	; 0x6c
 800916a:	4604      	mov	r4, r0
 800916c:	9213      	str	r2, [sp, #76]	; 0x4c
 800916e:	2200      	movs	r2, #0
 8009170:	9216      	str	r2, [sp, #88]	; 0x58
 8009172:	460d      	mov	r5, r1
 8009174:	f04f 0800 	mov.w	r8, #0
 8009178:	f04f 0900 	mov.w	r9, #0
 800917c:	460a      	mov	r2, r1
 800917e:	9215      	str	r2, [sp, #84]	; 0x54
 8009180:	7811      	ldrb	r1, [r2, #0]
 8009182:	292b      	cmp	r1, #43	; 0x2b
 8009184:	d04c      	beq.n	8009220 <_strtod_l+0xc0>
 8009186:	d83a      	bhi.n	80091fe <_strtod_l+0x9e>
 8009188:	290d      	cmp	r1, #13
 800918a:	d834      	bhi.n	80091f6 <_strtod_l+0x96>
 800918c:	2908      	cmp	r1, #8
 800918e:	d834      	bhi.n	80091fa <_strtod_l+0x9a>
 8009190:	2900      	cmp	r1, #0
 8009192:	d03d      	beq.n	8009210 <_strtod_l+0xb0>
 8009194:	2200      	movs	r2, #0
 8009196:	920a      	str	r2, [sp, #40]	; 0x28
 8009198:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800919a:	7832      	ldrb	r2, [r6, #0]
 800919c:	2a30      	cmp	r2, #48	; 0x30
 800919e:	f040 80b4 	bne.w	800930a <_strtod_l+0x1aa>
 80091a2:	7872      	ldrb	r2, [r6, #1]
 80091a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80091a8:	2a58      	cmp	r2, #88	; 0x58
 80091aa:	d170      	bne.n	800928e <_strtod_l+0x12e>
 80091ac:	9302      	str	r3, [sp, #8]
 80091ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	ab16      	add	r3, sp, #88	; 0x58
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	4a8e      	ldr	r2, [pc, #568]	; (80093f0 <_strtod_l+0x290>)
 80091b8:	ab17      	add	r3, sp, #92	; 0x5c
 80091ba:	a915      	add	r1, sp, #84	; 0x54
 80091bc:	4620      	mov	r0, r4
 80091be:	f002 fdc1 	bl	800bd44 <__gethex>
 80091c2:	f010 070f 	ands.w	r7, r0, #15
 80091c6:	4605      	mov	r5, r0
 80091c8:	d005      	beq.n	80091d6 <_strtod_l+0x76>
 80091ca:	2f06      	cmp	r7, #6
 80091cc:	d12a      	bne.n	8009224 <_strtod_l+0xc4>
 80091ce:	3601      	adds	r6, #1
 80091d0:	2300      	movs	r3, #0
 80091d2:	9615      	str	r6, [sp, #84]	; 0x54
 80091d4:	930a      	str	r3, [sp, #40]	; 0x28
 80091d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f040 857f 	bne.w	8009cdc <_strtod_l+0xb7c>
 80091de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e0:	b1db      	cbz	r3, 800921a <_strtod_l+0xba>
 80091e2:	4642      	mov	r2, r8
 80091e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80091e8:	ec43 2b10 	vmov	d0, r2, r3
 80091ec:	b01b      	add	sp, #108	; 0x6c
 80091ee:	ecbd 8b02 	vpop	{d8}
 80091f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	2920      	cmp	r1, #32
 80091f8:	d1cc      	bne.n	8009194 <_strtod_l+0x34>
 80091fa:	3201      	adds	r2, #1
 80091fc:	e7bf      	b.n	800917e <_strtod_l+0x1e>
 80091fe:	292d      	cmp	r1, #45	; 0x2d
 8009200:	d1c8      	bne.n	8009194 <_strtod_l+0x34>
 8009202:	2101      	movs	r1, #1
 8009204:	910a      	str	r1, [sp, #40]	; 0x28
 8009206:	1c51      	adds	r1, r2, #1
 8009208:	9115      	str	r1, [sp, #84]	; 0x54
 800920a:	7852      	ldrb	r2, [r2, #1]
 800920c:	2a00      	cmp	r2, #0
 800920e:	d1c3      	bne.n	8009198 <_strtod_l+0x38>
 8009210:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009212:	9515      	str	r5, [sp, #84]	; 0x54
 8009214:	2b00      	cmp	r3, #0
 8009216:	f040 855f 	bne.w	8009cd8 <_strtod_l+0xb78>
 800921a:	4642      	mov	r2, r8
 800921c:	464b      	mov	r3, r9
 800921e:	e7e3      	b.n	80091e8 <_strtod_l+0x88>
 8009220:	2100      	movs	r1, #0
 8009222:	e7ef      	b.n	8009204 <_strtod_l+0xa4>
 8009224:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009226:	b13a      	cbz	r2, 8009238 <_strtod_l+0xd8>
 8009228:	2135      	movs	r1, #53	; 0x35
 800922a:	a818      	add	r0, sp, #96	; 0x60
 800922c:	f003 fda9 	bl	800cd82 <__copybits>
 8009230:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009232:	4620      	mov	r0, r4
 8009234:	f003 f97c 	bl	800c530 <_Bfree>
 8009238:	3f01      	subs	r7, #1
 800923a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800923c:	2f04      	cmp	r7, #4
 800923e:	d806      	bhi.n	800924e <_strtod_l+0xee>
 8009240:	e8df f007 	tbb	[pc, r7]
 8009244:	201d0314 	.word	0x201d0314
 8009248:	14          	.byte	0x14
 8009249:	00          	.byte	0x00
 800924a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800924e:	05e9      	lsls	r1, r5, #23
 8009250:	bf48      	it	mi
 8009252:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009256:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800925a:	0d1b      	lsrs	r3, r3, #20
 800925c:	051b      	lsls	r3, r3, #20
 800925e:	2b00      	cmp	r3, #0
 8009260:	d1b9      	bne.n	80091d6 <_strtod_l+0x76>
 8009262:	f001 fdf3 	bl	800ae4c <__errno>
 8009266:	2322      	movs	r3, #34	; 0x22
 8009268:	6003      	str	r3, [r0, #0]
 800926a:	e7b4      	b.n	80091d6 <_strtod_l+0x76>
 800926c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009270:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009274:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009278:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800927c:	e7e7      	b.n	800924e <_strtod_l+0xee>
 800927e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80093f8 <_strtod_l+0x298>
 8009282:	e7e4      	b.n	800924e <_strtod_l+0xee>
 8009284:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009288:	f04f 38ff 	mov.w	r8, #4294967295
 800928c:	e7df      	b.n	800924e <_strtod_l+0xee>
 800928e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	9215      	str	r2, [sp, #84]	; 0x54
 8009294:	785b      	ldrb	r3, [r3, #1]
 8009296:	2b30      	cmp	r3, #48	; 0x30
 8009298:	d0f9      	beq.n	800928e <_strtod_l+0x12e>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d09b      	beq.n	80091d6 <_strtod_l+0x76>
 800929e:	2301      	movs	r3, #1
 80092a0:	f04f 0a00 	mov.w	sl, #0
 80092a4:	9304      	str	r3, [sp, #16]
 80092a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80092a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80092aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80092ae:	46d3      	mov	fp, sl
 80092b0:	220a      	movs	r2, #10
 80092b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80092b4:	7806      	ldrb	r6, [r0, #0]
 80092b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80092ba:	b2d9      	uxtb	r1, r3
 80092bc:	2909      	cmp	r1, #9
 80092be:	d926      	bls.n	800930e <_strtod_l+0x1ae>
 80092c0:	494c      	ldr	r1, [pc, #304]	; (80093f4 <_strtod_l+0x294>)
 80092c2:	2201      	movs	r2, #1
 80092c4:	f001 fd65 	bl	800ad92 <strncmp>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d030      	beq.n	800932e <_strtod_l+0x1ce>
 80092cc:	2000      	movs	r0, #0
 80092ce:	4632      	mov	r2, r6
 80092d0:	9005      	str	r0, [sp, #20]
 80092d2:	465e      	mov	r6, fp
 80092d4:	4603      	mov	r3, r0
 80092d6:	2a65      	cmp	r2, #101	; 0x65
 80092d8:	d001      	beq.n	80092de <_strtod_l+0x17e>
 80092da:	2a45      	cmp	r2, #69	; 0x45
 80092dc:	d113      	bne.n	8009306 <_strtod_l+0x1a6>
 80092de:	b91e      	cbnz	r6, 80092e8 <_strtod_l+0x188>
 80092e0:	9a04      	ldr	r2, [sp, #16]
 80092e2:	4302      	orrs	r2, r0
 80092e4:	d094      	beq.n	8009210 <_strtod_l+0xb0>
 80092e6:	2600      	movs	r6, #0
 80092e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80092ea:	1c6a      	adds	r2, r5, #1
 80092ec:	9215      	str	r2, [sp, #84]	; 0x54
 80092ee:	786a      	ldrb	r2, [r5, #1]
 80092f0:	2a2b      	cmp	r2, #43	; 0x2b
 80092f2:	d074      	beq.n	80093de <_strtod_l+0x27e>
 80092f4:	2a2d      	cmp	r2, #45	; 0x2d
 80092f6:	d078      	beq.n	80093ea <_strtod_l+0x28a>
 80092f8:	f04f 0c00 	mov.w	ip, #0
 80092fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009300:	2909      	cmp	r1, #9
 8009302:	d97f      	bls.n	8009404 <_strtod_l+0x2a4>
 8009304:	9515      	str	r5, [sp, #84]	; 0x54
 8009306:	2700      	movs	r7, #0
 8009308:	e09e      	b.n	8009448 <_strtod_l+0x2e8>
 800930a:	2300      	movs	r3, #0
 800930c:	e7c8      	b.n	80092a0 <_strtod_l+0x140>
 800930e:	f1bb 0f08 	cmp.w	fp, #8
 8009312:	bfd8      	it	le
 8009314:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009316:	f100 0001 	add.w	r0, r0, #1
 800931a:	bfda      	itte	le
 800931c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009320:	9309      	strle	r3, [sp, #36]	; 0x24
 8009322:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009326:	f10b 0b01 	add.w	fp, fp, #1
 800932a:	9015      	str	r0, [sp, #84]	; 0x54
 800932c:	e7c1      	b.n	80092b2 <_strtod_l+0x152>
 800932e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	9215      	str	r2, [sp, #84]	; 0x54
 8009334:	785a      	ldrb	r2, [r3, #1]
 8009336:	f1bb 0f00 	cmp.w	fp, #0
 800933a:	d037      	beq.n	80093ac <_strtod_l+0x24c>
 800933c:	9005      	str	r0, [sp, #20]
 800933e:	465e      	mov	r6, fp
 8009340:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009344:	2b09      	cmp	r3, #9
 8009346:	d912      	bls.n	800936e <_strtod_l+0x20e>
 8009348:	2301      	movs	r3, #1
 800934a:	e7c4      	b.n	80092d6 <_strtod_l+0x176>
 800934c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	9215      	str	r2, [sp, #84]	; 0x54
 8009352:	785a      	ldrb	r2, [r3, #1]
 8009354:	3001      	adds	r0, #1
 8009356:	2a30      	cmp	r2, #48	; 0x30
 8009358:	d0f8      	beq.n	800934c <_strtod_l+0x1ec>
 800935a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800935e:	2b08      	cmp	r3, #8
 8009360:	f200 84c1 	bhi.w	8009ce6 <_strtod_l+0xb86>
 8009364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009366:	9005      	str	r0, [sp, #20]
 8009368:	2000      	movs	r0, #0
 800936a:	930b      	str	r3, [sp, #44]	; 0x2c
 800936c:	4606      	mov	r6, r0
 800936e:	3a30      	subs	r2, #48	; 0x30
 8009370:	f100 0301 	add.w	r3, r0, #1
 8009374:	d014      	beq.n	80093a0 <_strtod_l+0x240>
 8009376:	9905      	ldr	r1, [sp, #20]
 8009378:	4419      	add	r1, r3
 800937a:	9105      	str	r1, [sp, #20]
 800937c:	4633      	mov	r3, r6
 800937e:	eb00 0c06 	add.w	ip, r0, r6
 8009382:	210a      	movs	r1, #10
 8009384:	4563      	cmp	r3, ip
 8009386:	d113      	bne.n	80093b0 <_strtod_l+0x250>
 8009388:	1833      	adds	r3, r6, r0
 800938a:	2b08      	cmp	r3, #8
 800938c:	f106 0601 	add.w	r6, r6, #1
 8009390:	4406      	add	r6, r0
 8009392:	dc1a      	bgt.n	80093ca <_strtod_l+0x26a>
 8009394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009396:	230a      	movs	r3, #10
 8009398:	fb03 2301 	mla	r3, r3, r1, r2
 800939c:	9309      	str	r3, [sp, #36]	; 0x24
 800939e:	2300      	movs	r3, #0
 80093a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80093a2:	1c51      	adds	r1, r2, #1
 80093a4:	9115      	str	r1, [sp, #84]	; 0x54
 80093a6:	7852      	ldrb	r2, [r2, #1]
 80093a8:	4618      	mov	r0, r3
 80093aa:	e7c9      	b.n	8009340 <_strtod_l+0x1e0>
 80093ac:	4658      	mov	r0, fp
 80093ae:	e7d2      	b.n	8009356 <_strtod_l+0x1f6>
 80093b0:	2b08      	cmp	r3, #8
 80093b2:	f103 0301 	add.w	r3, r3, #1
 80093b6:	dc03      	bgt.n	80093c0 <_strtod_l+0x260>
 80093b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80093ba:	434f      	muls	r7, r1
 80093bc:	9709      	str	r7, [sp, #36]	; 0x24
 80093be:	e7e1      	b.n	8009384 <_strtod_l+0x224>
 80093c0:	2b10      	cmp	r3, #16
 80093c2:	bfd8      	it	le
 80093c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80093c8:	e7dc      	b.n	8009384 <_strtod_l+0x224>
 80093ca:	2e10      	cmp	r6, #16
 80093cc:	bfdc      	itt	le
 80093ce:	230a      	movle	r3, #10
 80093d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80093d4:	e7e3      	b.n	800939e <_strtod_l+0x23e>
 80093d6:	2300      	movs	r3, #0
 80093d8:	9305      	str	r3, [sp, #20]
 80093da:	2301      	movs	r3, #1
 80093dc:	e780      	b.n	80092e0 <_strtod_l+0x180>
 80093de:	f04f 0c00 	mov.w	ip, #0
 80093e2:	1caa      	adds	r2, r5, #2
 80093e4:	9215      	str	r2, [sp, #84]	; 0x54
 80093e6:	78aa      	ldrb	r2, [r5, #2]
 80093e8:	e788      	b.n	80092fc <_strtod_l+0x19c>
 80093ea:	f04f 0c01 	mov.w	ip, #1
 80093ee:	e7f8      	b.n	80093e2 <_strtod_l+0x282>
 80093f0:	0800ee64 	.word	0x0800ee64
 80093f4:	0800ee60 	.word	0x0800ee60
 80093f8:	7ff00000 	.word	0x7ff00000
 80093fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80093fe:	1c51      	adds	r1, r2, #1
 8009400:	9115      	str	r1, [sp, #84]	; 0x54
 8009402:	7852      	ldrb	r2, [r2, #1]
 8009404:	2a30      	cmp	r2, #48	; 0x30
 8009406:	d0f9      	beq.n	80093fc <_strtod_l+0x29c>
 8009408:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800940c:	2908      	cmp	r1, #8
 800940e:	f63f af7a 	bhi.w	8009306 <_strtod_l+0x1a6>
 8009412:	3a30      	subs	r2, #48	; 0x30
 8009414:	9208      	str	r2, [sp, #32]
 8009416:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009418:	920c      	str	r2, [sp, #48]	; 0x30
 800941a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800941c:	1c57      	adds	r7, r2, #1
 800941e:	9715      	str	r7, [sp, #84]	; 0x54
 8009420:	7852      	ldrb	r2, [r2, #1]
 8009422:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009426:	f1be 0f09 	cmp.w	lr, #9
 800942a:	d938      	bls.n	800949e <_strtod_l+0x33e>
 800942c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800942e:	1a7f      	subs	r7, r7, r1
 8009430:	2f08      	cmp	r7, #8
 8009432:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009436:	dc03      	bgt.n	8009440 <_strtod_l+0x2e0>
 8009438:	9908      	ldr	r1, [sp, #32]
 800943a:	428f      	cmp	r7, r1
 800943c:	bfa8      	it	ge
 800943e:	460f      	movge	r7, r1
 8009440:	f1bc 0f00 	cmp.w	ip, #0
 8009444:	d000      	beq.n	8009448 <_strtod_l+0x2e8>
 8009446:	427f      	negs	r7, r7
 8009448:	2e00      	cmp	r6, #0
 800944a:	d14f      	bne.n	80094ec <_strtod_l+0x38c>
 800944c:	9904      	ldr	r1, [sp, #16]
 800944e:	4301      	orrs	r1, r0
 8009450:	f47f aec1 	bne.w	80091d6 <_strtod_l+0x76>
 8009454:	2b00      	cmp	r3, #0
 8009456:	f47f aedb 	bne.w	8009210 <_strtod_l+0xb0>
 800945a:	2a69      	cmp	r2, #105	; 0x69
 800945c:	d029      	beq.n	80094b2 <_strtod_l+0x352>
 800945e:	dc26      	bgt.n	80094ae <_strtod_l+0x34e>
 8009460:	2a49      	cmp	r2, #73	; 0x49
 8009462:	d026      	beq.n	80094b2 <_strtod_l+0x352>
 8009464:	2a4e      	cmp	r2, #78	; 0x4e
 8009466:	f47f aed3 	bne.w	8009210 <_strtod_l+0xb0>
 800946a:	499b      	ldr	r1, [pc, #620]	; (80096d8 <_strtod_l+0x578>)
 800946c:	a815      	add	r0, sp, #84	; 0x54
 800946e:	f002 fea9 	bl	800c1c4 <__match>
 8009472:	2800      	cmp	r0, #0
 8009474:	f43f aecc 	beq.w	8009210 <_strtod_l+0xb0>
 8009478:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	2b28      	cmp	r3, #40	; 0x28
 800947e:	d12f      	bne.n	80094e0 <_strtod_l+0x380>
 8009480:	4996      	ldr	r1, [pc, #600]	; (80096dc <_strtod_l+0x57c>)
 8009482:	aa18      	add	r2, sp, #96	; 0x60
 8009484:	a815      	add	r0, sp, #84	; 0x54
 8009486:	f002 feb1 	bl	800c1ec <__hexnan>
 800948a:	2805      	cmp	r0, #5
 800948c:	d128      	bne.n	80094e0 <_strtod_l+0x380>
 800948e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009490:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009494:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009498:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800949c:	e69b      	b.n	80091d6 <_strtod_l+0x76>
 800949e:	9f08      	ldr	r7, [sp, #32]
 80094a0:	210a      	movs	r1, #10
 80094a2:	fb01 2107 	mla	r1, r1, r7, r2
 80094a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80094aa:	9208      	str	r2, [sp, #32]
 80094ac:	e7b5      	b.n	800941a <_strtod_l+0x2ba>
 80094ae:	2a6e      	cmp	r2, #110	; 0x6e
 80094b0:	e7d9      	b.n	8009466 <_strtod_l+0x306>
 80094b2:	498b      	ldr	r1, [pc, #556]	; (80096e0 <_strtod_l+0x580>)
 80094b4:	a815      	add	r0, sp, #84	; 0x54
 80094b6:	f002 fe85 	bl	800c1c4 <__match>
 80094ba:	2800      	cmp	r0, #0
 80094bc:	f43f aea8 	beq.w	8009210 <_strtod_l+0xb0>
 80094c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094c2:	4988      	ldr	r1, [pc, #544]	; (80096e4 <_strtod_l+0x584>)
 80094c4:	3b01      	subs	r3, #1
 80094c6:	a815      	add	r0, sp, #84	; 0x54
 80094c8:	9315      	str	r3, [sp, #84]	; 0x54
 80094ca:	f002 fe7b 	bl	800c1c4 <__match>
 80094ce:	b910      	cbnz	r0, 80094d6 <_strtod_l+0x376>
 80094d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094d2:	3301      	adds	r3, #1
 80094d4:	9315      	str	r3, [sp, #84]	; 0x54
 80094d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80096f4 <_strtod_l+0x594>
 80094da:	f04f 0800 	mov.w	r8, #0
 80094de:	e67a      	b.n	80091d6 <_strtod_l+0x76>
 80094e0:	4881      	ldr	r0, [pc, #516]	; (80096e8 <_strtod_l+0x588>)
 80094e2:	f001 fcf1 	bl	800aec8 <nan>
 80094e6:	ec59 8b10 	vmov	r8, r9, d0
 80094ea:	e674      	b.n	80091d6 <_strtod_l+0x76>
 80094ec:	9b05      	ldr	r3, [sp, #20]
 80094ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094f0:	1afb      	subs	r3, r7, r3
 80094f2:	f1bb 0f00 	cmp.w	fp, #0
 80094f6:	bf08      	it	eq
 80094f8:	46b3      	moveq	fp, r6
 80094fa:	2e10      	cmp	r6, #16
 80094fc:	9308      	str	r3, [sp, #32]
 80094fe:	4635      	mov	r5, r6
 8009500:	bfa8      	it	ge
 8009502:	2510      	movge	r5, #16
 8009504:	f7f6 fffe 	bl	8000504 <__aeabi_ui2d>
 8009508:	2e09      	cmp	r6, #9
 800950a:	4680      	mov	r8, r0
 800950c:	4689      	mov	r9, r1
 800950e:	dd13      	ble.n	8009538 <_strtod_l+0x3d8>
 8009510:	4b76      	ldr	r3, [pc, #472]	; (80096ec <_strtod_l+0x58c>)
 8009512:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009516:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800951a:	f7f7 f86d 	bl	80005f8 <__aeabi_dmul>
 800951e:	4680      	mov	r8, r0
 8009520:	4650      	mov	r0, sl
 8009522:	4689      	mov	r9, r1
 8009524:	f7f6 ffee 	bl	8000504 <__aeabi_ui2d>
 8009528:	4602      	mov	r2, r0
 800952a:	460b      	mov	r3, r1
 800952c:	4640      	mov	r0, r8
 800952e:	4649      	mov	r1, r9
 8009530:	f7f6 feac 	bl	800028c <__adddf3>
 8009534:	4680      	mov	r8, r0
 8009536:	4689      	mov	r9, r1
 8009538:	2e0f      	cmp	r6, #15
 800953a:	dc38      	bgt.n	80095ae <_strtod_l+0x44e>
 800953c:	9b08      	ldr	r3, [sp, #32]
 800953e:	2b00      	cmp	r3, #0
 8009540:	f43f ae49 	beq.w	80091d6 <_strtod_l+0x76>
 8009544:	dd24      	ble.n	8009590 <_strtod_l+0x430>
 8009546:	2b16      	cmp	r3, #22
 8009548:	dc0b      	bgt.n	8009562 <_strtod_l+0x402>
 800954a:	4968      	ldr	r1, [pc, #416]	; (80096ec <_strtod_l+0x58c>)
 800954c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009550:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009554:	4642      	mov	r2, r8
 8009556:	464b      	mov	r3, r9
 8009558:	f7f7 f84e 	bl	80005f8 <__aeabi_dmul>
 800955c:	4680      	mov	r8, r0
 800955e:	4689      	mov	r9, r1
 8009560:	e639      	b.n	80091d6 <_strtod_l+0x76>
 8009562:	9a08      	ldr	r2, [sp, #32]
 8009564:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009568:	4293      	cmp	r3, r2
 800956a:	db20      	blt.n	80095ae <_strtod_l+0x44e>
 800956c:	4c5f      	ldr	r4, [pc, #380]	; (80096ec <_strtod_l+0x58c>)
 800956e:	f1c6 060f 	rsb	r6, r6, #15
 8009572:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009576:	4642      	mov	r2, r8
 8009578:	464b      	mov	r3, r9
 800957a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800957e:	f7f7 f83b 	bl	80005f8 <__aeabi_dmul>
 8009582:	9b08      	ldr	r3, [sp, #32]
 8009584:	1b9e      	subs	r6, r3, r6
 8009586:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800958a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800958e:	e7e3      	b.n	8009558 <_strtod_l+0x3f8>
 8009590:	9b08      	ldr	r3, [sp, #32]
 8009592:	3316      	adds	r3, #22
 8009594:	db0b      	blt.n	80095ae <_strtod_l+0x44e>
 8009596:	9b05      	ldr	r3, [sp, #20]
 8009598:	1bdf      	subs	r7, r3, r7
 800959a:	4b54      	ldr	r3, [pc, #336]	; (80096ec <_strtod_l+0x58c>)
 800959c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80095a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095a4:	4640      	mov	r0, r8
 80095a6:	4649      	mov	r1, r9
 80095a8:	f7f7 f950 	bl	800084c <__aeabi_ddiv>
 80095ac:	e7d6      	b.n	800955c <_strtod_l+0x3fc>
 80095ae:	9b08      	ldr	r3, [sp, #32]
 80095b0:	1b75      	subs	r5, r6, r5
 80095b2:	441d      	add	r5, r3
 80095b4:	2d00      	cmp	r5, #0
 80095b6:	dd70      	ble.n	800969a <_strtod_l+0x53a>
 80095b8:	f015 030f 	ands.w	r3, r5, #15
 80095bc:	d00a      	beq.n	80095d4 <_strtod_l+0x474>
 80095be:	494b      	ldr	r1, [pc, #300]	; (80096ec <_strtod_l+0x58c>)
 80095c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095c4:	4642      	mov	r2, r8
 80095c6:	464b      	mov	r3, r9
 80095c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095cc:	f7f7 f814 	bl	80005f8 <__aeabi_dmul>
 80095d0:	4680      	mov	r8, r0
 80095d2:	4689      	mov	r9, r1
 80095d4:	f035 050f 	bics.w	r5, r5, #15
 80095d8:	d04d      	beq.n	8009676 <_strtod_l+0x516>
 80095da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80095de:	dd22      	ble.n	8009626 <_strtod_l+0x4c6>
 80095e0:	2500      	movs	r5, #0
 80095e2:	46ab      	mov	fp, r5
 80095e4:	9509      	str	r5, [sp, #36]	; 0x24
 80095e6:	9505      	str	r5, [sp, #20]
 80095e8:	2322      	movs	r3, #34	; 0x22
 80095ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80096f4 <_strtod_l+0x594>
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	f04f 0800 	mov.w	r8, #0
 80095f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f43f aded 	beq.w	80091d6 <_strtod_l+0x76>
 80095fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80095fe:	4620      	mov	r0, r4
 8009600:	f002 ff96 	bl	800c530 <_Bfree>
 8009604:	9905      	ldr	r1, [sp, #20]
 8009606:	4620      	mov	r0, r4
 8009608:	f002 ff92 	bl	800c530 <_Bfree>
 800960c:	4659      	mov	r1, fp
 800960e:	4620      	mov	r0, r4
 8009610:	f002 ff8e 	bl	800c530 <_Bfree>
 8009614:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009616:	4620      	mov	r0, r4
 8009618:	f002 ff8a 	bl	800c530 <_Bfree>
 800961c:	4629      	mov	r1, r5
 800961e:	4620      	mov	r0, r4
 8009620:	f002 ff86 	bl	800c530 <_Bfree>
 8009624:	e5d7      	b.n	80091d6 <_strtod_l+0x76>
 8009626:	4b32      	ldr	r3, [pc, #200]	; (80096f0 <_strtod_l+0x590>)
 8009628:	9304      	str	r3, [sp, #16]
 800962a:	2300      	movs	r3, #0
 800962c:	112d      	asrs	r5, r5, #4
 800962e:	4640      	mov	r0, r8
 8009630:	4649      	mov	r1, r9
 8009632:	469a      	mov	sl, r3
 8009634:	2d01      	cmp	r5, #1
 8009636:	dc21      	bgt.n	800967c <_strtod_l+0x51c>
 8009638:	b10b      	cbz	r3, 800963e <_strtod_l+0x4de>
 800963a:	4680      	mov	r8, r0
 800963c:	4689      	mov	r9, r1
 800963e:	492c      	ldr	r1, [pc, #176]	; (80096f0 <_strtod_l+0x590>)
 8009640:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009644:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009648:	4642      	mov	r2, r8
 800964a:	464b      	mov	r3, r9
 800964c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009650:	f7f6 ffd2 	bl	80005f8 <__aeabi_dmul>
 8009654:	4b27      	ldr	r3, [pc, #156]	; (80096f4 <_strtod_l+0x594>)
 8009656:	460a      	mov	r2, r1
 8009658:	400b      	ands	r3, r1
 800965a:	4927      	ldr	r1, [pc, #156]	; (80096f8 <_strtod_l+0x598>)
 800965c:	428b      	cmp	r3, r1
 800965e:	4680      	mov	r8, r0
 8009660:	d8be      	bhi.n	80095e0 <_strtod_l+0x480>
 8009662:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009666:	428b      	cmp	r3, r1
 8009668:	bf86      	itte	hi
 800966a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80096fc <_strtod_l+0x59c>
 800966e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009672:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009676:	2300      	movs	r3, #0
 8009678:	9304      	str	r3, [sp, #16]
 800967a:	e07b      	b.n	8009774 <_strtod_l+0x614>
 800967c:	07ea      	lsls	r2, r5, #31
 800967e:	d505      	bpl.n	800968c <_strtod_l+0x52c>
 8009680:	9b04      	ldr	r3, [sp, #16]
 8009682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009686:	f7f6 ffb7 	bl	80005f8 <__aeabi_dmul>
 800968a:	2301      	movs	r3, #1
 800968c:	9a04      	ldr	r2, [sp, #16]
 800968e:	3208      	adds	r2, #8
 8009690:	f10a 0a01 	add.w	sl, sl, #1
 8009694:	106d      	asrs	r5, r5, #1
 8009696:	9204      	str	r2, [sp, #16]
 8009698:	e7cc      	b.n	8009634 <_strtod_l+0x4d4>
 800969a:	d0ec      	beq.n	8009676 <_strtod_l+0x516>
 800969c:	426d      	negs	r5, r5
 800969e:	f015 020f 	ands.w	r2, r5, #15
 80096a2:	d00a      	beq.n	80096ba <_strtod_l+0x55a>
 80096a4:	4b11      	ldr	r3, [pc, #68]	; (80096ec <_strtod_l+0x58c>)
 80096a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096aa:	4640      	mov	r0, r8
 80096ac:	4649      	mov	r1, r9
 80096ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b2:	f7f7 f8cb 	bl	800084c <__aeabi_ddiv>
 80096b6:	4680      	mov	r8, r0
 80096b8:	4689      	mov	r9, r1
 80096ba:	112d      	asrs	r5, r5, #4
 80096bc:	d0db      	beq.n	8009676 <_strtod_l+0x516>
 80096be:	2d1f      	cmp	r5, #31
 80096c0:	dd1e      	ble.n	8009700 <_strtod_l+0x5a0>
 80096c2:	2500      	movs	r5, #0
 80096c4:	46ab      	mov	fp, r5
 80096c6:	9509      	str	r5, [sp, #36]	; 0x24
 80096c8:	9505      	str	r5, [sp, #20]
 80096ca:	2322      	movs	r3, #34	; 0x22
 80096cc:	f04f 0800 	mov.w	r8, #0
 80096d0:	f04f 0900 	mov.w	r9, #0
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	e78d      	b.n	80095f4 <_strtod_l+0x494>
 80096d8:	0800eec5 	.word	0x0800eec5
 80096dc:	0800ee78 	.word	0x0800ee78
 80096e0:	0800eebd 	.word	0x0800eebd
 80096e4:	0800eefc 	.word	0x0800eefc
 80096e8:	0800f289 	.word	0x0800f289
 80096ec:	0800f068 	.word	0x0800f068
 80096f0:	0800f040 	.word	0x0800f040
 80096f4:	7ff00000 	.word	0x7ff00000
 80096f8:	7ca00000 	.word	0x7ca00000
 80096fc:	7fefffff 	.word	0x7fefffff
 8009700:	f015 0310 	ands.w	r3, r5, #16
 8009704:	bf18      	it	ne
 8009706:	236a      	movne	r3, #106	; 0x6a
 8009708:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8009aac <_strtod_l+0x94c>
 800970c:	9304      	str	r3, [sp, #16]
 800970e:	4640      	mov	r0, r8
 8009710:	4649      	mov	r1, r9
 8009712:	2300      	movs	r3, #0
 8009714:	07ea      	lsls	r2, r5, #31
 8009716:	d504      	bpl.n	8009722 <_strtod_l+0x5c2>
 8009718:	e9da 2300 	ldrd	r2, r3, [sl]
 800971c:	f7f6 ff6c 	bl	80005f8 <__aeabi_dmul>
 8009720:	2301      	movs	r3, #1
 8009722:	106d      	asrs	r5, r5, #1
 8009724:	f10a 0a08 	add.w	sl, sl, #8
 8009728:	d1f4      	bne.n	8009714 <_strtod_l+0x5b4>
 800972a:	b10b      	cbz	r3, 8009730 <_strtod_l+0x5d0>
 800972c:	4680      	mov	r8, r0
 800972e:	4689      	mov	r9, r1
 8009730:	9b04      	ldr	r3, [sp, #16]
 8009732:	b1bb      	cbz	r3, 8009764 <_strtod_l+0x604>
 8009734:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009738:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800973c:	2b00      	cmp	r3, #0
 800973e:	4649      	mov	r1, r9
 8009740:	dd10      	ble.n	8009764 <_strtod_l+0x604>
 8009742:	2b1f      	cmp	r3, #31
 8009744:	f340 811e 	ble.w	8009984 <_strtod_l+0x824>
 8009748:	2b34      	cmp	r3, #52	; 0x34
 800974a:	bfde      	ittt	le
 800974c:	f04f 33ff 	movle.w	r3, #4294967295
 8009750:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009754:	4093      	lslle	r3, r2
 8009756:	f04f 0800 	mov.w	r8, #0
 800975a:	bfcc      	ite	gt
 800975c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009760:	ea03 0901 	andle.w	r9, r3, r1
 8009764:	2200      	movs	r2, #0
 8009766:	2300      	movs	r3, #0
 8009768:	4640      	mov	r0, r8
 800976a:	4649      	mov	r1, r9
 800976c:	f7f7 f9ac 	bl	8000ac8 <__aeabi_dcmpeq>
 8009770:	2800      	cmp	r0, #0
 8009772:	d1a6      	bne.n	80096c2 <_strtod_l+0x562>
 8009774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800977a:	4633      	mov	r3, r6
 800977c:	465a      	mov	r2, fp
 800977e:	4620      	mov	r0, r4
 8009780:	f002 ff3e 	bl	800c600 <__s2b>
 8009784:	9009      	str	r0, [sp, #36]	; 0x24
 8009786:	2800      	cmp	r0, #0
 8009788:	f43f af2a 	beq.w	80095e0 <_strtod_l+0x480>
 800978c:	9a08      	ldr	r2, [sp, #32]
 800978e:	9b05      	ldr	r3, [sp, #20]
 8009790:	2a00      	cmp	r2, #0
 8009792:	eba3 0307 	sub.w	r3, r3, r7
 8009796:	bfa8      	it	ge
 8009798:	2300      	movge	r3, #0
 800979a:	930c      	str	r3, [sp, #48]	; 0x30
 800979c:	2500      	movs	r5, #0
 800979e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097a2:	9312      	str	r3, [sp, #72]	; 0x48
 80097a4:	46ab      	mov	fp, r5
 80097a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a8:	4620      	mov	r0, r4
 80097aa:	6859      	ldr	r1, [r3, #4]
 80097ac:	f002 fe80 	bl	800c4b0 <_Balloc>
 80097b0:	9005      	str	r0, [sp, #20]
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f43f af18 	beq.w	80095e8 <_strtod_l+0x488>
 80097b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ba:	691a      	ldr	r2, [r3, #16]
 80097bc:	3202      	adds	r2, #2
 80097be:	f103 010c 	add.w	r1, r3, #12
 80097c2:	0092      	lsls	r2, r2, #2
 80097c4:	300c      	adds	r0, #12
 80097c6:	f001 fb6e 	bl	800aea6 <memcpy>
 80097ca:	ec49 8b10 	vmov	d0, r8, r9
 80097ce:	aa18      	add	r2, sp, #96	; 0x60
 80097d0:	a917      	add	r1, sp, #92	; 0x5c
 80097d2:	4620      	mov	r0, r4
 80097d4:	f003 fa48 	bl	800cc68 <__d2b>
 80097d8:	ec49 8b18 	vmov	d8, r8, r9
 80097dc:	9016      	str	r0, [sp, #88]	; 0x58
 80097de:	2800      	cmp	r0, #0
 80097e0:	f43f af02 	beq.w	80095e8 <_strtod_l+0x488>
 80097e4:	2101      	movs	r1, #1
 80097e6:	4620      	mov	r0, r4
 80097e8:	f002 ffa2 	bl	800c730 <__i2b>
 80097ec:	4683      	mov	fp, r0
 80097ee:	2800      	cmp	r0, #0
 80097f0:	f43f aefa 	beq.w	80095e8 <_strtod_l+0x488>
 80097f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80097f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80097f8:	2e00      	cmp	r6, #0
 80097fa:	bfab      	itete	ge
 80097fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80097fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009800:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009802:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009806:	bfac      	ite	ge
 8009808:	eb06 0a03 	addge.w	sl, r6, r3
 800980c:	1b9f      	sublt	r7, r3, r6
 800980e:	9b04      	ldr	r3, [sp, #16]
 8009810:	1af6      	subs	r6, r6, r3
 8009812:	4416      	add	r6, r2
 8009814:	4ba0      	ldr	r3, [pc, #640]	; (8009a98 <_strtod_l+0x938>)
 8009816:	3e01      	subs	r6, #1
 8009818:	429e      	cmp	r6, r3
 800981a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800981e:	f280 80c4 	bge.w	80099aa <_strtod_l+0x84a>
 8009822:	1b9b      	subs	r3, r3, r6
 8009824:	2b1f      	cmp	r3, #31
 8009826:	eba2 0203 	sub.w	r2, r2, r3
 800982a:	f04f 0101 	mov.w	r1, #1
 800982e:	f300 80b0 	bgt.w	8009992 <_strtod_l+0x832>
 8009832:	fa01 f303 	lsl.w	r3, r1, r3
 8009836:	930e      	str	r3, [sp, #56]	; 0x38
 8009838:	2300      	movs	r3, #0
 800983a:	930d      	str	r3, [sp, #52]	; 0x34
 800983c:	eb0a 0602 	add.w	r6, sl, r2
 8009840:	9b04      	ldr	r3, [sp, #16]
 8009842:	45b2      	cmp	sl, r6
 8009844:	4417      	add	r7, r2
 8009846:	441f      	add	r7, r3
 8009848:	4653      	mov	r3, sl
 800984a:	bfa8      	it	ge
 800984c:	4633      	movge	r3, r6
 800984e:	42bb      	cmp	r3, r7
 8009850:	bfa8      	it	ge
 8009852:	463b      	movge	r3, r7
 8009854:	2b00      	cmp	r3, #0
 8009856:	bfc2      	ittt	gt
 8009858:	1af6      	subgt	r6, r6, r3
 800985a:	1aff      	subgt	r7, r7, r3
 800985c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009862:	2b00      	cmp	r3, #0
 8009864:	dd17      	ble.n	8009896 <_strtod_l+0x736>
 8009866:	4659      	mov	r1, fp
 8009868:	461a      	mov	r2, r3
 800986a:	4620      	mov	r0, r4
 800986c:	f003 f820 	bl	800c8b0 <__pow5mult>
 8009870:	4683      	mov	fp, r0
 8009872:	2800      	cmp	r0, #0
 8009874:	f43f aeb8 	beq.w	80095e8 <_strtod_l+0x488>
 8009878:	4601      	mov	r1, r0
 800987a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800987c:	4620      	mov	r0, r4
 800987e:	f002 ff6d 	bl	800c75c <__multiply>
 8009882:	900b      	str	r0, [sp, #44]	; 0x2c
 8009884:	2800      	cmp	r0, #0
 8009886:	f43f aeaf 	beq.w	80095e8 <_strtod_l+0x488>
 800988a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800988c:	4620      	mov	r0, r4
 800988e:	f002 fe4f 	bl	800c530 <_Bfree>
 8009892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009894:	9316      	str	r3, [sp, #88]	; 0x58
 8009896:	2e00      	cmp	r6, #0
 8009898:	f300 808c 	bgt.w	80099b4 <_strtod_l+0x854>
 800989c:	9b08      	ldr	r3, [sp, #32]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	dd08      	ble.n	80098b4 <_strtod_l+0x754>
 80098a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098a4:	9905      	ldr	r1, [sp, #20]
 80098a6:	4620      	mov	r0, r4
 80098a8:	f003 f802 	bl	800c8b0 <__pow5mult>
 80098ac:	9005      	str	r0, [sp, #20]
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f43f ae9a 	beq.w	80095e8 <_strtod_l+0x488>
 80098b4:	2f00      	cmp	r7, #0
 80098b6:	dd08      	ble.n	80098ca <_strtod_l+0x76a>
 80098b8:	9905      	ldr	r1, [sp, #20]
 80098ba:	463a      	mov	r2, r7
 80098bc:	4620      	mov	r0, r4
 80098be:	f003 f851 	bl	800c964 <__lshift>
 80098c2:	9005      	str	r0, [sp, #20]
 80098c4:	2800      	cmp	r0, #0
 80098c6:	f43f ae8f 	beq.w	80095e8 <_strtod_l+0x488>
 80098ca:	f1ba 0f00 	cmp.w	sl, #0
 80098ce:	dd08      	ble.n	80098e2 <_strtod_l+0x782>
 80098d0:	4659      	mov	r1, fp
 80098d2:	4652      	mov	r2, sl
 80098d4:	4620      	mov	r0, r4
 80098d6:	f003 f845 	bl	800c964 <__lshift>
 80098da:	4683      	mov	fp, r0
 80098dc:	2800      	cmp	r0, #0
 80098de:	f43f ae83 	beq.w	80095e8 <_strtod_l+0x488>
 80098e2:	9a05      	ldr	r2, [sp, #20]
 80098e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80098e6:	4620      	mov	r0, r4
 80098e8:	f003 f8c4 	bl	800ca74 <__mdiff>
 80098ec:	4605      	mov	r5, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f ae7a 	beq.w	80095e8 <_strtod_l+0x488>
 80098f4:	68c3      	ldr	r3, [r0, #12]
 80098f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80098f8:	2300      	movs	r3, #0
 80098fa:	60c3      	str	r3, [r0, #12]
 80098fc:	4659      	mov	r1, fp
 80098fe:	f003 f89d 	bl	800ca3c <__mcmp>
 8009902:	2800      	cmp	r0, #0
 8009904:	da60      	bge.n	80099c8 <_strtod_l+0x868>
 8009906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009908:	ea53 0308 	orrs.w	r3, r3, r8
 800990c:	f040 8084 	bne.w	8009a18 <_strtod_l+0x8b8>
 8009910:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009914:	2b00      	cmp	r3, #0
 8009916:	d17f      	bne.n	8009a18 <_strtod_l+0x8b8>
 8009918:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800991c:	0d1b      	lsrs	r3, r3, #20
 800991e:	051b      	lsls	r3, r3, #20
 8009920:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009924:	d978      	bls.n	8009a18 <_strtod_l+0x8b8>
 8009926:	696b      	ldr	r3, [r5, #20]
 8009928:	b913      	cbnz	r3, 8009930 <_strtod_l+0x7d0>
 800992a:	692b      	ldr	r3, [r5, #16]
 800992c:	2b01      	cmp	r3, #1
 800992e:	dd73      	ble.n	8009a18 <_strtod_l+0x8b8>
 8009930:	4629      	mov	r1, r5
 8009932:	2201      	movs	r2, #1
 8009934:	4620      	mov	r0, r4
 8009936:	f003 f815 	bl	800c964 <__lshift>
 800993a:	4659      	mov	r1, fp
 800993c:	4605      	mov	r5, r0
 800993e:	f003 f87d 	bl	800ca3c <__mcmp>
 8009942:	2800      	cmp	r0, #0
 8009944:	dd68      	ble.n	8009a18 <_strtod_l+0x8b8>
 8009946:	9904      	ldr	r1, [sp, #16]
 8009948:	4a54      	ldr	r2, [pc, #336]	; (8009a9c <_strtod_l+0x93c>)
 800994a:	464b      	mov	r3, r9
 800994c:	2900      	cmp	r1, #0
 800994e:	f000 8084 	beq.w	8009a5a <_strtod_l+0x8fa>
 8009952:	ea02 0109 	and.w	r1, r2, r9
 8009956:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800995a:	dc7e      	bgt.n	8009a5a <_strtod_l+0x8fa>
 800995c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009960:	f77f aeb3 	ble.w	80096ca <_strtod_l+0x56a>
 8009964:	4b4e      	ldr	r3, [pc, #312]	; (8009aa0 <_strtod_l+0x940>)
 8009966:	4640      	mov	r0, r8
 8009968:	4649      	mov	r1, r9
 800996a:	2200      	movs	r2, #0
 800996c:	f7f6 fe44 	bl	80005f8 <__aeabi_dmul>
 8009970:	4b4a      	ldr	r3, [pc, #296]	; (8009a9c <_strtod_l+0x93c>)
 8009972:	400b      	ands	r3, r1
 8009974:	4680      	mov	r8, r0
 8009976:	4689      	mov	r9, r1
 8009978:	2b00      	cmp	r3, #0
 800997a:	f47f ae3f 	bne.w	80095fc <_strtod_l+0x49c>
 800997e:	2322      	movs	r3, #34	; 0x22
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	e63b      	b.n	80095fc <_strtod_l+0x49c>
 8009984:	f04f 32ff 	mov.w	r2, #4294967295
 8009988:	fa02 f303 	lsl.w	r3, r2, r3
 800998c:	ea03 0808 	and.w	r8, r3, r8
 8009990:	e6e8      	b.n	8009764 <_strtod_l+0x604>
 8009992:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009996:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800999a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800999e:	36e2      	adds	r6, #226	; 0xe2
 80099a0:	fa01 f306 	lsl.w	r3, r1, r6
 80099a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80099a8:	e748      	b.n	800983c <_strtod_l+0x6dc>
 80099aa:	2100      	movs	r1, #0
 80099ac:	2301      	movs	r3, #1
 80099ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80099b2:	e743      	b.n	800983c <_strtod_l+0x6dc>
 80099b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80099b6:	4632      	mov	r2, r6
 80099b8:	4620      	mov	r0, r4
 80099ba:	f002 ffd3 	bl	800c964 <__lshift>
 80099be:	9016      	str	r0, [sp, #88]	; 0x58
 80099c0:	2800      	cmp	r0, #0
 80099c2:	f47f af6b 	bne.w	800989c <_strtod_l+0x73c>
 80099c6:	e60f      	b.n	80095e8 <_strtod_l+0x488>
 80099c8:	46ca      	mov	sl, r9
 80099ca:	d171      	bne.n	8009ab0 <_strtod_l+0x950>
 80099cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099d2:	b352      	cbz	r2, 8009a2a <_strtod_l+0x8ca>
 80099d4:	4a33      	ldr	r2, [pc, #204]	; (8009aa4 <_strtod_l+0x944>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d12a      	bne.n	8009a30 <_strtod_l+0x8d0>
 80099da:	9b04      	ldr	r3, [sp, #16]
 80099dc:	4641      	mov	r1, r8
 80099de:	b1fb      	cbz	r3, 8009a20 <_strtod_l+0x8c0>
 80099e0:	4b2e      	ldr	r3, [pc, #184]	; (8009a9c <_strtod_l+0x93c>)
 80099e2:	ea09 0303 	and.w	r3, r9, r3
 80099e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80099ea:	f04f 32ff 	mov.w	r2, #4294967295
 80099ee:	d81a      	bhi.n	8009a26 <_strtod_l+0x8c6>
 80099f0:	0d1b      	lsrs	r3, r3, #20
 80099f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80099f6:	fa02 f303 	lsl.w	r3, r2, r3
 80099fa:	4299      	cmp	r1, r3
 80099fc:	d118      	bne.n	8009a30 <_strtod_l+0x8d0>
 80099fe:	4b2a      	ldr	r3, [pc, #168]	; (8009aa8 <_strtod_l+0x948>)
 8009a00:	459a      	cmp	sl, r3
 8009a02:	d102      	bne.n	8009a0a <_strtod_l+0x8aa>
 8009a04:	3101      	adds	r1, #1
 8009a06:	f43f adef 	beq.w	80095e8 <_strtod_l+0x488>
 8009a0a:	4b24      	ldr	r3, [pc, #144]	; (8009a9c <_strtod_l+0x93c>)
 8009a0c:	ea0a 0303 	and.w	r3, sl, r3
 8009a10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009a14:	f04f 0800 	mov.w	r8, #0
 8009a18:	9b04      	ldr	r3, [sp, #16]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d1a2      	bne.n	8009964 <_strtod_l+0x804>
 8009a1e:	e5ed      	b.n	80095fc <_strtod_l+0x49c>
 8009a20:	f04f 33ff 	mov.w	r3, #4294967295
 8009a24:	e7e9      	b.n	80099fa <_strtod_l+0x89a>
 8009a26:	4613      	mov	r3, r2
 8009a28:	e7e7      	b.n	80099fa <_strtod_l+0x89a>
 8009a2a:	ea53 0308 	orrs.w	r3, r3, r8
 8009a2e:	d08a      	beq.n	8009946 <_strtod_l+0x7e6>
 8009a30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a32:	b1e3      	cbz	r3, 8009a6e <_strtod_l+0x90e>
 8009a34:	ea13 0f0a 	tst.w	r3, sl
 8009a38:	d0ee      	beq.n	8009a18 <_strtod_l+0x8b8>
 8009a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a3c:	9a04      	ldr	r2, [sp, #16]
 8009a3e:	4640      	mov	r0, r8
 8009a40:	4649      	mov	r1, r9
 8009a42:	b1c3      	cbz	r3, 8009a76 <_strtod_l+0x916>
 8009a44:	f7ff fb6f 	bl	8009126 <sulp>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	ec51 0b18 	vmov	r0, r1, d8
 8009a50:	f7f6 fc1c 	bl	800028c <__adddf3>
 8009a54:	4680      	mov	r8, r0
 8009a56:	4689      	mov	r9, r1
 8009a58:	e7de      	b.n	8009a18 <_strtod_l+0x8b8>
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009a60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8009a64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8009a68:	f04f 38ff 	mov.w	r8, #4294967295
 8009a6c:	e7d4      	b.n	8009a18 <_strtod_l+0x8b8>
 8009a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a70:	ea13 0f08 	tst.w	r3, r8
 8009a74:	e7e0      	b.n	8009a38 <_strtod_l+0x8d8>
 8009a76:	f7ff fb56 	bl	8009126 <sulp>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	ec51 0b18 	vmov	r0, r1, d8
 8009a82:	f7f6 fc01 	bl	8000288 <__aeabi_dsub>
 8009a86:	2200      	movs	r2, #0
 8009a88:	2300      	movs	r3, #0
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	f7f7 f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d0c0      	beq.n	8009a18 <_strtod_l+0x8b8>
 8009a96:	e618      	b.n	80096ca <_strtod_l+0x56a>
 8009a98:	fffffc02 	.word	0xfffffc02
 8009a9c:	7ff00000 	.word	0x7ff00000
 8009aa0:	39500000 	.word	0x39500000
 8009aa4:	000fffff 	.word	0x000fffff
 8009aa8:	7fefffff 	.word	0x7fefffff
 8009aac:	0800ee90 	.word	0x0800ee90
 8009ab0:	4659      	mov	r1, fp
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f003 f932 	bl	800cd1c <__ratio>
 8009ab8:	ec57 6b10 	vmov	r6, r7, d0
 8009abc:	ee10 0a10 	vmov	r0, s0
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	f7f7 f812 	bl	8000af0 <__aeabi_dcmple>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	d071      	beq.n	8009bb4 <_strtod_l+0xa54>
 8009ad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d17c      	bne.n	8009bd0 <_strtod_l+0xa70>
 8009ad6:	f1b8 0f00 	cmp.w	r8, #0
 8009ada:	d15a      	bne.n	8009b92 <_strtod_l+0xa32>
 8009adc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d15d      	bne.n	8009ba0 <_strtod_l+0xa40>
 8009ae4:	4b90      	ldr	r3, [pc, #576]	; (8009d28 <_strtod_l+0xbc8>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	4630      	mov	r0, r6
 8009aea:	4639      	mov	r1, r7
 8009aec:	f7f6 fff6 	bl	8000adc <__aeabi_dcmplt>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d15c      	bne.n	8009bae <_strtod_l+0xa4e>
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	4b8c      	ldr	r3, [pc, #560]	; (8009d2c <_strtod_l+0xbcc>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	f7f6 fd7c 	bl	80005f8 <__aeabi_dmul>
 8009b00:	4606      	mov	r6, r0
 8009b02:	460f      	mov	r7, r1
 8009b04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009b08:	9606      	str	r6, [sp, #24]
 8009b0a:	9307      	str	r3, [sp, #28]
 8009b0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009b14:	4b86      	ldr	r3, [pc, #536]	; (8009d30 <_strtod_l+0xbd0>)
 8009b16:	ea0a 0303 	and.w	r3, sl, r3
 8009b1a:	930d      	str	r3, [sp, #52]	; 0x34
 8009b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b1e:	4b85      	ldr	r3, [pc, #532]	; (8009d34 <_strtod_l+0xbd4>)
 8009b20:	429a      	cmp	r2, r3
 8009b22:	f040 8090 	bne.w	8009c46 <_strtod_l+0xae6>
 8009b26:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8009b2a:	ec49 8b10 	vmov	d0, r8, r9
 8009b2e:	f003 f82b 	bl	800cb88 <__ulp>
 8009b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b36:	ec51 0b10 	vmov	r0, r1, d0
 8009b3a:	f7f6 fd5d 	bl	80005f8 <__aeabi_dmul>
 8009b3e:	4642      	mov	r2, r8
 8009b40:	464b      	mov	r3, r9
 8009b42:	f7f6 fba3 	bl	800028c <__adddf3>
 8009b46:	460b      	mov	r3, r1
 8009b48:	4979      	ldr	r1, [pc, #484]	; (8009d30 <_strtod_l+0xbd0>)
 8009b4a:	4a7b      	ldr	r2, [pc, #492]	; (8009d38 <_strtod_l+0xbd8>)
 8009b4c:	4019      	ands	r1, r3
 8009b4e:	4291      	cmp	r1, r2
 8009b50:	4680      	mov	r8, r0
 8009b52:	d944      	bls.n	8009bde <_strtod_l+0xa7e>
 8009b54:	ee18 2a90 	vmov	r2, s17
 8009b58:	4b78      	ldr	r3, [pc, #480]	; (8009d3c <_strtod_l+0xbdc>)
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d104      	bne.n	8009b68 <_strtod_l+0xa08>
 8009b5e:	ee18 3a10 	vmov	r3, s16
 8009b62:	3301      	adds	r3, #1
 8009b64:	f43f ad40 	beq.w	80095e8 <_strtod_l+0x488>
 8009b68:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8009d3c <_strtod_l+0xbdc>
 8009b6c:	f04f 38ff 	mov.w	r8, #4294967295
 8009b70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009b72:	4620      	mov	r0, r4
 8009b74:	f002 fcdc 	bl	800c530 <_Bfree>
 8009b78:	9905      	ldr	r1, [sp, #20]
 8009b7a:	4620      	mov	r0, r4
 8009b7c:	f002 fcd8 	bl	800c530 <_Bfree>
 8009b80:	4659      	mov	r1, fp
 8009b82:	4620      	mov	r0, r4
 8009b84:	f002 fcd4 	bl	800c530 <_Bfree>
 8009b88:	4629      	mov	r1, r5
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f002 fcd0 	bl	800c530 <_Bfree>
 8009b90:	e609      	b.n	80097a6 <_strtod_l+0x646>
 8009b92:	f1b8 0f01 	cmp.w	r8, #1
 8009b96:	d103      	bne.n	8009ba0 <_strtod_l+0xa40>
 8009b98:	f1b9 0f00 	cmp.w	r9, #0
 8009b9c:	f43f ad95 	beq.w	80096ca <_strtod_l+0x56a>
 8009ba0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009cf8 <_strtod_l+0xb98>
 8009ba4:	4f60      	ldr	r7, [pc, #384]	; (8009d28 <_strtod_l+0xbc8>)
 8009ba6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009baa:	2600      	movs	r6, #0
 8009bac:	e7ae      	b.n	8009b0c <_strtod_l+0x9ac>
 8009bae:	4f5f      	ldr	r7, [pc, #380]	; (8009d2c <_strtod_l+0xbcc>)
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	e7a7      	b.n	8009b04 <_strtod_l+0x9a4>
 8009bb4:	4b5d      	ldr	r3, [pc, #372]	; (8009d2c <_strtod_l+0xbcc>)
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	4639      	mov	r1, r7
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f7f6 fd1c 	bl	80005f8 <__aeabi_dmul>
 8009bc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc2:	4606      	mov	r6, r0
 8009bc4:	460f      	mov	r7, r1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d09c      	beq.n	8009b04 <_strtod_l+0x9a4>
 8009bca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009bce:	e79d      	b.n	8009b0c <_strtod_l+0x9ac>
 8009bd0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009d00 <_strtod_l+0xba0>
 8009bd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bd8:	ec57 6b17 	vmov	r6, r7, d7
 8009bdc:	e796      	b.n	8009b0c <_strtod_l+0x9ac>
 8009bde:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009be2:	9b04      	ldr	r3, [sp, #16]
 8009be4:	46ca      	mov	sl, r9
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1c2      	bne.n	8009b70 <_strtod_l+0xa10>
 8009bea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009bee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bf0:	0d1b      	lsrs	r3, r3, #20
 8009bf2:	051b      	lsls	r3, r3, #20
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d1bb      	bne.n	8009b70 <_strtod_l+0xa10>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f7 f85c 	bl	8000cb8 <__aeabi_d2lz>
 8009c00:	f7f6 fccc 	bl	800059c <__aeabi_l2d>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4639      	mov	r1, r7
 8009c0c:	f7f6 fb3c 	bl	8000288 <__aeabi_dsub>
 8009c10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c16:	ea43 0308 	orr.w	r3, r3, r8
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	4606      	mov	r6, r0
 8009c1e:	460f      	mov	r7, r1
 8009c20:	d054      	beq.n	8009ccc <_strtod_l+0xb6c>
 8009c22:	a339      	add	r3, pc, #228	; (adr r3, 8009d08 <_strtod_l+0xba8>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f7f6 ff58 	bl	8000adc <__aeabi_dcmplt>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	f47f ace5 	bne.w	80095fc <_strtod_l+0x49c>
 8009c32:	a337      	add	r3, pc, #220	; (adr r3, 8009d10 <_strtod_l+0xbb0>)
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	4630      	mov	r0, r6
 8009c3a:	4639      	mov	r1, r7
 8009c3c:	f7f6 ff6c 	bl	8000b18 <__aeabi_dcmpgt>
 8009c40:	2800      	cmp	r0, #0
 8009c42:	d095      	beq.n	8009b70 <_strtod_l+0xa10>
 8009c44:	e4da      	b.n	80095fc <_strtod_l+0x49c>
 8009c46:	9b04      	ldr	r3, [sp, #16]
 8009c48:	b333      	cbz	r3, 8009c98 <_strtod_l+0xb38>
 8009c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c50:	d822      	bhi.n	8009c98 <_strtod_l+0xb38>
 8009c52:	a331      	add	r3, pc, #196	; (adr r3, 8009d18 <_strtod_l+0xbb8>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	4630      	mov	r0, r6
 8009c5a:	4639      	mov	r1, r7
 8009c5c:	f7f6 ff48 	bl	8000af0 <__aeabi_dcmple>
 8009c60:	b1a0      	cbz	r0, 8009c8c <_strtod_l+0xb2c>
 8009c62:	4639      	mov	r1, r7
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7f6 ff9f 	bl	8000ba8 <__aeabi_d2uiz>
 8009c6a:	2801      	cmp	r0, #1
 8009c6c:	bf38      	it	cc
 8009c6e:	2001      	movcc	r0, #1
 8009c70:	f7f6 fc48 	bl	8000504 <__aeabi_ui2d>
 8009c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c76:	4606      	mov	r6, r0
 8009c78:	460f      	mov	r7, r1
 8009c7a:	bb23      	cbnz	r3, 8009cc6 <_strtod_l+0xb66>
 8009c7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c80:	9010      	str	r0, [sp, #64]	; 0x40
 8009c82:	9311      	str	r3, [sp, #68]	; 0x44
 8009c84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009c88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009c8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009c94:	1a9b      	subs	r3, r3, r2
 8009c96:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009c9c:	eeb0 0a48 	vmov.f32	s0, s16
 8009ca0:	eef0 0a68 	vmov.f32	s1, s17
 8009ca4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009ca8:	f002 ff6e 	bl	800cb88 <__ulp>
 8009cac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009cb0:	ec53 2b10 	vmov	r2, r3, d0
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	ec53 2b18 	vmov	r2, r3, d8
 8009cbc:	f7f6 fae6 	bl	800028c <__adddf3>
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	4689      	mov	r9, r1
 8009cc4:	e78d      	b.n	8009be2 <_strtod_l+0xa82>
 8009cc6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009cca:	e7db      	b.n	8009c84 <_strtod_l+0xb24>
 8009ccc:	a314      	add	r3, pc, #80	; (adr r3, 8009d20 <_strtod_l+0xbc0>)
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 ff03 	bl	8000adc <__aeabi_dcmplt>
 8009cd6:	e7b3      	b.n	8009c40 <_strtod_l+0xae0>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	930a      	str	r3, [sp, #40]	; 0x28
 8009cdc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009cde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	f7ff ba7c 	b.w	80091de <_strtod_l+0x7e>
 8009ce6:	2a65      	cmp	r2, #101	; 0x65
 8009ce8:	f43f ab75 	beq.w	80093d6 <_strtod_l+0x276>
 8009cec:	2a45      	cmp	r2, #69	; 0x45
 8009cee:	f43f ab72 	beq.w	80093d6 <_strtod_l+0x276>
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	f7ff bbaa 	b.w	800944c <_strtod_l+0x2ec>
 8009cf8:	00000000 	.word	0x00000000
 8009cfc:	bff00000 	.word	0xbff00000
 8009d00:	00000000 	.word	0x00000000
 8009d04:	3ff00000 	.word	0x3ff00000
 8009d08:	94a03595 	.word	0x94a03595
 8009d0c:	3fdfffff 	.word	0x3fdfffff
 8009d10:	35afe535 	.word	0x35afe535
 8009d14:	3fe00000 	.word	0x3fe00000
 8009d18:	ffc00000 	.word	0xffc00000
 8009d1c:	41dfffff 	.word	0x41dfffff
 8009d20:	94a03595 	.word	0x94a03595
 8009d24:	3fcfffff 	.word	0x3fcfffff
 8009d28:	3ff00000 	.word	0x3ff00000
 8009d2c:	3fe00000 	.word	0x3fe00000
 8009d30:	7ff00000 	.word	0x7ff00000
 8009d34:	7fe00000 	.word	0x7fe00000
 8009d38:	7c9fffff 	.word	0x7c9fffff
 8009d3c:	7fefffff 	.word	0x7fefffff

08009d40 <_strtod_r>:
 8009d40:	4b01      	ldr	r3, [pc, #4]	; (8009d48 <_strtod_r+0x8>)
 8009d42:	f7ff ba0d 	b.w	8009160 <_strtod_l>
 8009d46:	bf00      	nop
 8009d48:	20000030 	.word	0x20000030

08009d4c <strtof>:
 8009d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d50:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8009e14 <strtof+0xc8>
 8009d54:	4b2a      	ldr	r3, [pc, #168]	; (8009e00 <strtof+0xb4>)
 8009d56:	460a      	mov	r2, r1
 8009d58:	ed2d 8b02 	vpush	{d8}
 8009d5c:	4601      	mov	r1, r0
 8009d5e:	f8d8 0000 	ldr.w	r0, [r8]
 8009d62:	f7ff f9fd 	bl	8009160 <_strtod_l>
 8009d66:	ec55 4b10 	vmov	r4, r5, d0
 8009d6a:	ee10 2a10 	vmov	r2, s0
 8009d6e:	ee10 0a10 	vmov	r0, s0
 8009d72:	462b      	mov	r3, r5
 8009d74:	4629      	mov	r1, r5
 8009d76:	f7f6 fed9 	bl	8000b2c <__aeabi_dcmpun>
 8009d7a:	b190      	cbz	r0, 8009da2 <strtof+0x56>
 8009d7c:	2d00      	cmp	r5, #0
 8009d7e:	4821      	ldr	r0, [pc, #132]	; (8009e04 <strtof+0xb8>)
 8009d80:	da09      	bge.n	8009d96 <strtof+0x4a>
 8009d82:	f001 f8a9 	bl	800aed8 <nanf>
 8009d86:	eeb1 8a40 	vneg.f32	s16, s0
 8009d8a:	eeb0 0a48 	vmov.f32	s0, s16
 8009d8e:	ecbd 8b02 	vpop	{d8}
 8009d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d96:	ecbd 8b02 	vpop	{d8}
 8009d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d9e:	f001 b89b 	b.w	800aed8 <nanf>
 8009da2:	4620      	mov	r0, r4
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7f6 ff1f 	bl	8000be8 <__aeabi_d2f>
 8009daa:	ee08 0a10 	vmov	s16, r0
 8009dae:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009e08 <strtof+0xbc>
 8009db2:	eeb0 7ac8 	vabs.f32	s14, s16
 8009db6:	eeb4 7a67 	vcmp.f32	s14, s15
 8009dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dbe:	dd11      	ble.n	8009de4 <strtof+0x98>
 8009dc0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8009dc4:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <strtof+0xc0>)
 8009dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dca:	4620      	mov	r0, r4
 8009dcc:	4639      	mov	r1, r7
 8009dce:	f7f6 fead 	bl	8000b2c <__aeabi_dcmpun>
 8009dd2:	b980      	cbnz	r0, 8009df6 <strtof+0xaa>
 8009dd4:	4b0d      	ldr	r3, [pc, #52]	; (8009e0c <strtof+0xc0>)
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4639      	mov	r1, r7
 8009dde:	f7f6 fe87 	bl	8000af0 <__aeabi_dcmple>
 8009de2:	b940      	cbnz	r0, 8009df6 <strtof+0xaa>
 8009de4:	ee18 3a10 	vmov	r3, s16
 8009de8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009dec:	d1cd      	bne.n	8009d8a <strtof+0x3e>
 8009dee:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <strtof+0xc4>)
 8009df0:	402b      	ands	r3, r5
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d0c9      	beq.n	8009d8a <strtof+0x3e>
 8009df6:	f8d8 3000 	ldr.w	r3, [r8]
 8009dfa:	2222      	movs	r2, #34	; 0x22
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	e7c4      	b.n	8009d8a <strtof+0x3e>
 8009e00:	20000030 	.word	0x20000030
 8009e04:	0800f289 	.word	0x0800f289
 8009e08:	7f7fffff 	.word	0x7f7fffff
 8009e0c:	7fefffff 	.word	0x7fefffff
 8009e10:	7ff00000 	.word	0x7ff00000
 8009e14:	200001e8 	.word	0x200001e8

08009e18 <__cvt>:
 8009e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e1c:	ec55 4b10 	vmov	r4, r5, d0
 8009e20:	2d00      	cmp	r5, #0
 8009e22:	460e      	mov	r6, r1
 8009e24:	4619      	mov	r1, r3
 8009e26:	462b      	mov	r3, r5
 8009e28:	bfbb      	ittet	lt
 8009e2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009e2e:	461d      	movlt	r5, r3
 8009e30:	2300      	movge	r3, #0
 8009e32:	232d      	movlt	r3, #45	; 0x2d
 8009e34:	700b      	strb	r3, [r1, #0]
 8009e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009e3c:	4691      	mov	r9, r2
 8009e3e:	f023 0820 	bic.w	r8, r3, #32
 8009e42:	bfbc      	itt	lt
 8009e44:	4622      	movlt	r2, r4
 8009e46:	4614      	movlt	r4, r2
 8009e48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e4c:	d005      	beq.n	8009e5a <__cvt+0x42>
 8009e4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009e52:	d100      	bne.n	8009e56 <__cvt+0x3e>
 8009e54:	3601      	adds	r6, #1
 8009e56:	2102      	movs	r1, #2
 8009e58:	e000      	b.n	8009e5c <__cvt+0x44>
 8009e5a:	2103      	movs	r1, #3
 8009e5c:	ab03      	add	r3, sp, #12
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	ab02      	add	r3, sp, #8
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	ec45 4b10 	vmov	d0, r4, r5
 8009e68:	4653      	mov	r3, sl
 8009e6a:	4632      	mov	r2, r6
 8009e6c:	f001 f8c4 	bl	800aff8 <_dtoa_r>
 8009e70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009e74:	4607      	mov	r7, r0
 8009e76:	d102      	bne.n	8009e7e <__cvt+0x66>
 8009e78:	f019 0f01 	tst.w	r9, #1
 8009e7c:	d022      	beq.n	8009ec4 <__cvt+0xac>
 8009e7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009e82:	eb07 0906 	add.w	r9, r7, r6
 8009e86:	d110      	bne.n	8009eaa <__cvt+0x92>
 8009e88:	783b      	ldrb	r3, [r7, #0]
 8009e8a:	2b30      	cmp	r3, #48	; 0x30
 8009e8c:	d10a      	bne.n	8009ea4 <__cvt+0x8c>
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2300      	movs	r3, #0
 8009e92:	4620      	mov	r0, r4
 8009e94:	4629      	mov	r1, r5
 8009e96:	f7f6 fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e9a:	b918      	cbnz	r0, 8009ea4 <__cvt+0x8c>
 8009e9c:	f1c6 0601 	rsb	r6, r6, #1
 8009ea0:	f8ca 6000 	str.w	r6, [sl]
 8009ea4:	f8da 3000 	ldr.w	r3, [sl]
 8009ea8:	4499      	add	r9, r3
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2300      	movs	r3, #0
 8009eae:	4620      	mov	r0, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	f7f6 fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eb6:	b108      	cbz	r0, 8009ebc <__cvt+0xa4>
 8009eb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ebc:	2230      	movs	r2, #48	; 0x30
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	454b      	cmp	r3, r9
 8009ec2:	d307      	bcc.n	8009ed4 <__cvt+0xbc>
 8009ec4:	9b03      	ldr	r3, [sp, #12]
 8009ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ec8:	1bdb      	subs	r3, r3, r7
 8009eca:	4638      	mov	r0, r7
 8009ecc:	6013      	str	r3, [r2, #0]
 8009ece:	b004      	add	sp, #16
 8009ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed4:	1c59      	adds	r1, r3, #1
 8009ed6:	9103      	str	r1, [sp, #12]
 8009ed8:	701a      	strb	r2, [r3, #0]
 8009eda:	e7f0      	b.n	8009ebe <__cvt+0xa6>

08009edc <__exponent>:
 8009edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2900      	cmp	r1, #0
 8009ee2:	bfb8      	it	lt
 8009ee4:	4249      	neglt	r1, r1
 8009ee6:	f803 2b02 	strb.w	r2, [r3], #2
 8009eea:	bfb4      	ite	lt
 8009eec:	222d      	movlt	r2, #45	; 0x2d
 8009eee:	222b      	movge	r2, #43	; 0x2b
 8009ef0:	2909      	cmp	r1, #9
 8009ef2:	7042      	strb	r2, [r0, #1]
 8009ef4:	dd2a      	ble.n	8009f4c <__exponent+0x70>
 8009ef6:	f10d 0207 	add.w	r2, sp, #7
 8009efa:	4617      	mov	r7, r2
 8009efc:	260a      	movs	r6, #10
 8009efe:	4694      	mov	ip, r2
 8009f00:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f04:	fb06 1415 	mls	r4, r6, r5, r1
 8009f08:	3430      	adds	r4, #48	; 0x30
 8009f0a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009f0e:	460c      	mov	r4, r1
 8009f10:	2c63      	cmp	r4, #99	; 0x63
 8009f12:	f102 32ff 	add.w	r2, r2, #4294967295
 8009f16:	4629      	mov	r1, r5
 8009f18:	dcf1      	bgt.n	8009efe <__exponent+0x22>
 8009f1a:	3130      	adds	r1, #48	; 0x30
 8009f1c:	f1ac 0402 	sub.w	r4, ip, #2
 8009f20:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009f24:	1c41      	adds	r1, r0, #1
 8009f26:	4622      	mov	r2, r4
 8009f28:	42ba      	cmp	r2, r7
 8009f2a:	d30a      	bcc.n	8009f42 <__exponent+0x66>
 8009f2c:	f10d 0209 	add.w	r2, sp, #9
 8009f30:	eba2 020c 	sub.w	r2, r2, ip
 8009f34:	42bc      	cmp	r4, r7
 8009f36:	bf88      	it	hi
 8009f38:	2200      	movhi	r2, #0
 8009f3a:	4413      	add	r3, r2
 8009f3c:	1a18      	subs	r0, r3, r0
 8009f3e:	b003      	add	sp, #12
 8009f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f42:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009f46:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009f4a:	e7ed      	b.n	8009f28 <__exponent+0x4c>
 8009f4c:	2330      	movs	r3, #48	; 0x30
 8009f4e:	3130      	adds	r1, #48	; 0x30
 8009f50:	7083      	strb	r3, [r0, #2]
 8009f52:	70c1      	strb	r1, [r0, #3]
 8009f54:	1d03      	adds	r3, r0, #4
 8009f56:	e7f1      	b.n	8009f3c <__exponent+0x60>

08009f58 <_printf_float>:
 8009f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f5c:	ed2d 8b02 	vpush	{d8}
 8009f60:	b08d      	sub	sp, #52	; 0x34
 8009f62:	460c      	mov	r4, r1
 8009f64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009f68:	4616      	mov	r6, r2
 8009f6a:	461f      	mov	r7, r3
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	f000 ff23 	bl	800adb8 <_localeconv_r>
 8009f72:	f8d0 a000 	ldr.w	sl, [r0]
 8009f76:	4650      	mov	r0, sl
 8009f78:	f7f6 f97a 	bl	8000270 <strlen>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	9305      	str	r3, [sp, #20]
 8009f84:	f8d8 3000 	ldr.w	r3, [r8]
 8009f88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009f8c:	3307      	adds	r3, #7
 8009f8e:	f023 0307 	bic.w	r3, r3, #7
 8009f92:	f103 0208 	add.w	r2, r3, #8
 8009f96:	f8c8 2000 	str.w	r2, [r8]
 8009f9a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009fa2:	9307      	str	r3, [sp, #28]
 8009fa4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fa8:	ee08 0a10 	vmov	s16, r0
 8009fac:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009fb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fb4:	4b9e      	ldr	r3, [pc, #632]	; (800a230 <_printf_float+0x2d8>)
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	f7f6 fdb7 	bl	8000b2c <__aeabi_dcmpun>
 8009fbe:	bb88      	cbnz	r0, 800a024 <_printf_float+0xcc>
 8009fc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fc4:	4b9a      	ldr	r3, [pc, #616]	; (800a230 <_printf_float+0x2d8>)
 8009fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fca:	f7f6 fd91 	bl	8000af0 <__aeabi_dcmple>
 8009fce:	bb48      	cbnz	r0, 800a024 <_printf_float+0xcc>
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	4649      	mov	r1, r9
 8009fd8:	f7f6 fd80 	bl	8000adc <__aeabi_dcmplt>
 8009fdc:	b110      	cbz	r0, 8009fe4 <_printf_float+0x8c>
 8009fde:	232d      	movs	r3, #45	; 0x2d
 8009fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fe4:	4a93      	ldr	r2, [pc, #588]	; (800a234 <_printf_float+0x2dc>)
 8009fe6:	4b94      	ldr	r3, [pc, #592]	; (800a238 <_printf_float+0x2e0>)
 8009fe8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009fec:	bf94      	ite	ls
 8009fee:	4690      	movls	r8, r2
 8009ff0:	4698      	movhi	r8, r3
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	6123      	str	r3, [r4, #16]
 8009ff6:	9b05      	ldr	r3, [sp, #20]
 8009ff8:	f023 0304 	bic.w	r3, r3, #4
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	f04f 0900 	mov.w	r9, #0
 800a002:	9700      	str	r7, [sp, #0]
 800a004:	4633      	mov	r3, r6
 800a006:	aa0b      	add	r2, sp, #44	; 0x2c
 800a008:	4621      	mov	r1, r4
 800a00a:	4628      	mov	r0, r5
 800a00c:	f000 f9da 	bl	800a3c4 <_printf_common>
 800a010:	3001      	adds	r0, #1
 800a012:	f040 8090 	bne.w	800a136 <_printf_float+0x1de>
 800a016:	f04f 30ff 	mov.w	r0, #4294967295
 800a01a:	b00d      	add	sp, #52	; 0x34
 800a01c:	ecbd 8b02 	vpop	{d8}
 800a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a024:	4642      	mov	r2, r8
 800a026:	464b      	mov	r3, r9
 800a028:	4640      	mov	r0, r8
 800a02a:	4649      	mov	r1, r9
 800a02c:	f7f6 fd7e 	bl	8000b2c <__aeabi_dcmpun>
 800a030:	b140      	cbz	r0, 800a044 <_printf_float+0xec>
 800a032:	464b      	mov	r3, r9
 800a034:	2b00      	cmp	r3, #0
 800a036:	bfbc      	itt	lt
 800a038:	232d      	movlt	r3, #45	; 0x2d
 800a03a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a03e:	4a7f      	ldr	r2, [pc, #508]	; (800a23c <_printf_float+0x2e4>)
 800a040:	4b7f      	ldr	r3, [pc, #508]	; (800a240 <_printf_float+0x2e8>)
 800a042:	e7d1      	b.n	8009fe8 <_printf_float+0x90>
 800a044:	6863      	ldr	r3, [r4, #4]
 800a046:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a04a:	9206      	str	r2, [sp, #24]
 800a04c:	1c5a      	adds	r2, r3, #1
 800a04e:	d13f      	bne.n	800a0d0 <_printf_float+0x178>
 800a050:	2306      	movs	r3, #6
 800a052:	6063      	str	r3, [r4, #4]
 800a054:	9b05      	ldr	r3, [sp, #20]
 800a056:	6861      	ldr	r1, [r4, #4]
 800a058:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a05c:	2300      	movs	r3, #0
 800a05e:	9303      	str	r3, [sp, #12]
 800a060:	ab0a      	add	r3, sp, #40	; 0x28
 800a062:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a066:	ab09      	add	r3, sp, #36	; 0x24
 800a068:	ec49 8b10 	vmov	d0, r8, r9
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	6022      	str	r2, [r4, #0]
 800a070:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a074:	4628      	mov	r0, r5
 800a076:	f7ff fecf 	bl	8009e18 <__cvt>
 800a07a:	9b06      	ldr	r3, [sp, #24]
 800a07c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a07e:	2b47      	cmp	r3, #71	; 0x47
 800a080:	4680      	mov	r8, r0
 800a082:	d108      	bne.n	800a096 <_printf_float+0x13e>
 800a084:	1cc8      	adds	r0, r1, #3
 800a086:	db02      	blt.n	800a08e <_printf_float+0x136>
 800a088:	6863      	ldr	r3, [r4, #4]
 800a08a:	4299      	cmp	r1, r3
 800a08c:	dd41      	ble.n	800a112 <_printf_float+0x1ba>
 800a08e:	f1ab 0302 	sub.w	r3, fp, #2
 800a092:	fa5f fb83 	uxtb.w	fp, r3
 800a096:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a09a:	d820      	bhi.n	800a0de <_printf_float+0x186>
 800a09c:	3901      	subs	r1, #1
 800a09e:	465a      	mov	r2, fp
 800a0a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a0a4:	9109      	str	r1, [sp, #36]	; 0x24
 800a0a6:	f7ff ff19 	bl	8009edc <__exponent>
 800a0aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ac:	1813      	adds	r3, r2, r0
 800a0ae:	2a01      	cmp	r2, #1
 800a0b0:	4681      	mov	r9, r0
 800a0b2:	6123      	str	r3, [r4, #16]
 800a0b4:	dc02      	bgt.n	800a0bc <_printf_float+0x164>
 800a0b6:	6822      	ldr	r2, [r4, #0]
 800a0b8:	07d2      	lsls	r2, r2, #31
 800a0ba:	d501      	bpl.n	800a0c0 <_printf_float+0x168>
 800a0bc:	3301      	adds	r3, #1
 800a0be:	6123      	str	r3, [r4, #16]
 800a0c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d09c      	beq.n	800a002 <_printf_float+0xaa>
 800a0c8:	232d      	movs	r3, #45	; 0x2d
 800a0ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0ce:	e798      	b.n	800a002 <_printf_float+0xaa>
 800a0d0:	9a06      	ldr	r2, [sp, #24]
 800a0d2:	2a47      	cmp	r2, #71	; 0x47
 800a0d4:	d1be      	bne.n	800a054 <_printf_float+0xfc>
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1bc      	bne.n	800a054 <_printf_float+0xfc>
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e7b9      	b.n	800a052 <_printf_float+0xfa>
 800a0de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a0e2:	d118      	bne.n	800a116 <_printf_float+0x1be>
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	6863      	ldr	r3, [r4, #4]
 800a0e8:	dd0b      	ble.n	800a102 <_printf_float+0x1aa>
 800a0ea:	6121      	str	r1, [r4, #16]
 800a0ec:	b913      	cbnz	r3, 800a0f4 <_printf_float+0x19c>
 800a0ee:	6822      	ldr	r2, [r4, #0]
 800a0f0:	07d0      	lsls	r0, r2, #31
 800a0f2:	d502      	bpl.n	800a0fa <_printf_float+0x1a2>
 800a0f4:	3301      	adds	r3, #1
 800a0f6:	440b      	add	r3, r1
 800a0f8:	6123      	str	r3, [r4, #16]
 800a0fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a0fc:	f04f 0900 	mov.w	r9, #0
 800a100:	e7de      	b.n	800a0c0 <_printf_float+0x168>
 800a102:	b913      	cbnz	r3, 800a10a <_printf_float+0x1b2>
 800a104:	6822      	ldr	r2, [r4, #0]
 800a106:	07d2      	lsls	r2, r2, #31
 800a108:	d501      	bpl.n	800a10e <_printf_float+0x1b6>
 800a10a:	3302      	adds	r3, #2
 800a10c:	e7f4      	b.n	800a0f8 <_printf_float+0x1a0>
 800a10e:	2301      	movs	r3, #1
 800a110:	e7f2      	b.n	800a0f8 <_printf_float+0x1a0>
 800a112:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a118:	4299      	cmp	r1, r3
 800a11a:	db05      	blt.n	800a128 <_printf_float+0x1d0>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	6121      	str	r1, [r4, #16]
 800a120:	07d8      	lsls	r0, r3, #31
 800a122:	d5ea      	bpl.n	800a0fa <_printf_float+0x1a2>
 800a124:	1c4b      	adds	r3, r1, #1
 800a126:	e7e7      	b.n	800a0f8 <_printf_float+0x1a0>
 800a128:	2900      	cmp	r1, #0
 800a12a:	bfd4      	ite	le
 800a12c:	f1c1 0202 	rsble	r2, r1, #2
 800a130:	2201      	movgt	r2, #1
 800a132:	4413      	add	r3, r2
 800a134:	e7e0      	b.n	800a0f8 <_printf_float+0x1a0>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	055a      	lsls	r2, r3, #21
 800a13a:	d407      	bmi.n	800a14c <_printf_float+0x1f4>
 800a13c:	6923      	ldr	r3, [r4, #16]
 800a13e:	4642      	mov	r2, r8
 800a140:	4631      	mov	r1, r6
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	d12c      	bne.n	800a1a4 <_printf_float+0x24c>
 800a14a:	e764      	b.n	800a016 <_printf_float+0xbe>
 800a14c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a150:	f240 80e0 	bls.w	800a314 <_printf_float+0x3bc>
 800a154:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a158:	2200      	movs	r2, #0
 800a15a:	2300      	movs	r3, #0
 800a15c:	f7f6 fcb4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a160:	2800      	cmp	r0, #0
 800a162:	d034      	beq.n	800a1ce <_printf_float+0x276>
 800a164:	4a37      	ldr	r2, [pc, #220]	; (800a244 <_printf_float+0x2ec>)
 800a166:	2301      	movs	r3, #1
 800a168:	4631      	mov	r1, r6
 800a16a:	4628      	mov	r0, r5
 800a16c:	47b8      	blx	r7
 800a16e:	3001      	adds	r0, #1
 800a170:	f43f af51 	beq.w	800a016 <_printf_float+0xbe>
 800a174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a178:	429a      	cmp	r2, r3
 800a17a:	db02      	blt.n	800a182 <_printf_float+0x22a>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	07d8      	lsls	r0, r3, #31
 800a180:	d510      	bpl.n	800a1a4 <_printf_float+0x24c>
 800a182:	ee18 3a10 	vmov	r3, s16
 800a186:	4652      	mov	r2, sl
 800a188:	4631      	mov	r1, r6
 800a18a:	4628      	mov	r0, r5
 800a18c:	47b8      	blx	r7
 800a18e:	3001      	adds	r0, #1
 800a190:	f43f af41 	beq.w	800a016 <_printf_float+0xbe>
 800a194:	f04f 0800 	mov.w	r8, #0
 800a198:	f104 091a 	add.w	r9, r4, #26
 800a19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	4543      	cmp	r3, r8
 800a1a2:	dc09      	bgt.n	800a1b8 <_printf_float+0x260>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	079b      	lsls	r3, r3, #30
 800a1a8:	f100 8107 	bmi.w	800a3ba <_printf_float+0x462>
 800a1ac:	68e0      	ldr	r0, [r4, #12]
 800a1ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1b0:	4298      	cmp	r0, r3
 800a1b2:	bfb8      	it	lt
 800a1b4:	4618      	movlt	r0, r3
 800a1b6:	e730      	b.n	800a01a <_printf_float+0xc2>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	464a      	mov	r2, r9
 800a1bc:	4631      	mov	r1, r6
 800a1be:	4628      	mov	r0, r5
 800a1c0:	47b8      	blx	r7
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	f43f af27 	beq.w	800a016 <_printf_float+0xbe>
 800a1c8:	f108 0801 	add.w	r8, r8, #1
 800a1cc:	e7e6      	b.n	800a19c <_printf_float+0x244>
 800a1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	dc39      	bgt.n	800a248 <_printf_float+0x2f0>
 800a1d4:	4a1b      	ldr	r2, [pc, #108]	; (800a244 <_printf_float+0x2ec>)
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4628      	mov	r0, r5
 800a1dc:	47b8      	blx	r7
 800a1de:	3001      	adds	r0, #1
 800a1e0:	f43f af19 	beq.w	800a016 <_printf_float+0xbe>
 800a1e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	d102      	bne.n	800a1f2 <_printf_float+0x29a>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	07d9      	lsls	r1, r3, #31
 800a1f0:	d5d8      	bpl.n	800a1a4 <_printf_float+0x24c>
 800a1f2:	ee18 3a10 	vmov	r3, s16
 800a1f6:	4652      	mov	r2, sl
 800a1f8:	4631      	mov	r1, r6
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	47b8      	blx	r7
 800a1fe:	3001      	adds	r0, #1
 800a200:	f43f af09 	beq.w	800a016 <_printf_float+0xbe>
 800a204:	f04f 0900 	mov.w	r9, #0
 800a208:	f104 0a1a 	add.w	sl, r4, #26
 800a20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a20e:	425b      	negs	r3, r3
 800a210:	454b      	cmp	r3, r9
 800a212:	dc01      	bgt.n	800a218 <_printf_float+0x2c0>
 800a214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a216:	e792      	b.n	800a13e <_printf_float+0x1e6>
 800a218:	2301      	movs	r3, #1
 800a21a:	4652      	mov	r2, sl
 800a21c:	4631      	mov	r1, r6
 800a21e:	4628      	mov	r0, r5
 800a220:	47b8      	blx	r7
 800a222:	3001      	adds	r0, #1
 800a224:	f43f aef7 	beq.w	800a016 <_printf_float+0xbe>
 800a228:	f109 0901 	add.w	r9, r9, #1
 800a22c:	e7ee      	b.n	800a20c <_printf_float+0x2b4>
 800a22e:	bf00      	nop
 800a230:	7fefffff 	.word	0x7fefffff
 800a234:	0800eeb8 	.word	0x0800eeb8
 800a238:	0800eebc 	.word	0x0800eebc
 800a23c:	0800eec0 	.word	0x0800eec0
 800a240:	0800eec4 	.word	0x0800eec4
 800a244:	0800eec8 	.word	0x0800eec8
 800a248:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a24a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a24c:	429a      	cmp	r2, r3
 800a24e:	bfa8      	it	ge
 800a250:	461a      	movge	r2, r3
 800a252:	2a00      	cmp	r2, #0
 800a254:	4691      	mov	r9, r2
 800a256:	dc37      	bgt.n	800a2c8 <_printf_float+0x370>
 800a258:	f04f 0b00 	mov.w	fp, #0
 800a25c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a260:	f104 021a 	add.w	r2, r4, #26
 800a264:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a266:	9305      	str	r3, [sp, #20]
 800a268:	eba3 0309 	sub.w	r3, r3, r9
 800a26c:	455b      	cmp	r3, fp
 800a26e:	dc33      	bgt.n	800a2d8 <_printf_float+0x380>
 800a270:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a274:	429a      	cmp	r2, r3
 800a276:	db3b      	blt.n	800a2f0 <_printf_float+0x398>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	07da      	lsls	r2, r3, #31
 800a27c:	d438      	bmi.n	800a2f0 <_printf_float+0x398>
 800a27e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a282:	eba2 0903 	sub.w	r9, r2, r3
 800a286:	9b05      	ldr	r3, [sp, #20]
 800a288:	1ad2      	subs	r2, r2, r3
 800a28a:	4591      	cmp	r9, r2
 800a28c:	bfa8      	it	ge
 800a28e:	4691      	movge	r9, r2
 800a290:	f1b9 0f00 	cmp.w	r9, #0
 800a294:	dc35      	bgt.n	800a302 <_printf_float+0x3aa>
 800a296:	f04f 0800 	mov.w	r8, #0
 800a29a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a29e:	f104 0a1a 	add.w	sl, r4, #26
 800a2a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2a6:	1a9b      	subs	r3, r3, r2
 800a2a8:	eba3 0309 	sub.w	r3, r3, r9
 800a2ac:	4543      	cmp	r3, r8
 800a2ae:	f77f af79 	ble.w	800a1a4 <_printf_float+0x24c>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4652      	mov	r2, sl
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	47b8      	blx	r7
 800a2bc:	3001      	adds	r0, #1
 800a2be:	f43f aeaa 	beq.w	800a016 <_printf_float+0xbe>
 800a2c2:	f108 0801 	add.w	r8, r8, #1
 800a2c6:	e7ec      	b.n	800a2a2 <_printf_float+0x34a>
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	4642      	mov	r2, r8
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	47b8      	blx	r7
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	d1c0      	bne.n	800a258 <_printf_float+0x300>
 800a2d6:	e69e      	b.n	800a016 <_printf_float+0xbe>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4628      	mov	r0, r5
 800a2de:	9205      	str	r2, [sp, #20]
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f ae97 	beq.w	800a016 <_printf_float+0xbe>
 800a2e8:	9a05      	ldr	r2, [sp, #20]
 800a2ea:	f10b 0b01 	add.w	fp, fp, #1
 800a2ee:	e7b9      	b.n	800a264 <_printf_float+0x30c>
 800a2f0:	ee18 3a10 	vmov	r3, s16
 800a2f4:	4652      	mov	r2, sl
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	47b8      	blx	r7
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d1be      	bne.n	800a27e <_printf_float+0x326>
 800a300:	e689      	b.n	800a016 <_printf_float+0xbe>
 800a302:	9a05      	ldr	r2, [sp, #20]
 800a304:	464b      	mov	r3, r9
 800a306:	4442      	add	r2, r8
 800a308:	4631      	mov	r1, r6
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b8      	blx	r7
 800a30e:	3001      	adds	r0, #1
 800a310:	d1c1      	bne.n	800a296 <_printf_float+0x33e>
 800a312:	e680      	b.n	800a016 <_printf_float+0xbe>
 800a314:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a316:	2a01      	cmp	r2, #1
 800a318:	dc01      	bgt.n	800a31e <_printf_float+0x3c6>
 800a31a:	07db      	lsls	r3, r3, #31
 800a31c:	d53a      	bpl.n	800a394 <_printf_float+0x43c>
 800a31e:	2301      	movs	r3, #1
 800a320:	4642      	mov	r2, r8
 800a322:	4631      	mov	r1, r6
 800a324:	4628      	mov	r0, r5
 800a326:	47b8      	blx	r7
 800a328:	3001      	adds	r0, #1
 800a32a:	f43f ae74 	beq.w	800a016 <_printf_float+0xbe>
 800a32e:	ee18 3a10 	vmov	r3, s16
 800a332:	4652      	mov	r2, sl
 800a334:	4631      	mov	r1, r6
 800a336:	4628      	mov	r0, r5
 800a338:	47b8      	blx	r7
 800a33a:	3001      	adds	r0, #1
 800a33c:	f43f ae6b 	beq.w	800a016 <_printf_float+0xbe>
 800a340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a344:	2200      	movs	r2, #0
 800a346:	2300      	movs	r3, #0
 800a348:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a34c:	f7f6 fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 800a350:	b9d8      	cbnz	r0, 800a38a <_printf_float+0x432>
 800a352:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a356:	f108 0201 	add.w	r2, r8, #1
 800a35a:	4631      	mov	r1, r6
 800a35c:	4628      	mov	r0, r5
 800a35e:	47b8      	blx	r7
 800a360:	3001      	adds	r0, #1
 800a362:	d10e      	bne.n	800a382 <_printf_float+0x42a>
 800a364:	e657      	b.n	800a016 <_printf_float+0xbe>
 800a366:	2301      	movs	r3, #1
 800a368:	4652      	mov	r2, sl
 800a36a:	4631      	mov	r1, r6
 800a36c:	4628      	mov	r0, r5
 800a36e:	47b8      	blx	r7
 800a370:	3001      	adds	r0, #1
 800a372:	f43f ae50 	beq.w	800a016 <_printf_float+0xbe>
 800a376:	f108 0801 	add.w	r8, r8, #1
 800a37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a37c:	3b01      	subs	r3, #1
 800a37e:	4543      	cmp	r3, r8
 800a380:	dcf1      	bgt.n	800a366 <_printf_float+0x40e>
 800a382:	464b      	mov	r3, r9
 800a384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a388:	e6da      	b.n	800a140 <_printf_float+0x1e8>
 800a38a:	f04f 0800 	mov.w	r8, #0
 800a38e:	f104 0a1a 	add.w	sl, r4, #26
 800a392:	e7f2      	b.n	800a37a <_printf_float+0x422>
 800a394:	2301      	movs	r3, #1
 800a396:	4642      	mov	r2, r8
 800a398:	e7df      	b.n	800a35a <_printf_float+0x402>
 800a39a:	2301      	movs	r3, #1
 800a39c:	464a      	mov	r2, r9
 800a39e:	4631      	mov	r1, r6
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b8      	blx	r7
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	f43f ae36 	beq.w	800a016 <_printf_float+0xbe>
 800a3aa:	f108 0801 	add.w	r8, r8, #1
 800a3ae:	68e3      	ldr	r3, [r4, #12]
 800a3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a3b2:	1a5b      	subs	r3, r3, r1
 800a3b4:	4543      	cmp	r3, r8
 800a3b6:	dcf0      	bgt.n	800a39a <_printf_float+0x442>
 800a3b8:	e6f8      	b.n	800a1ac <_printf_float+0x254>
 800a3ba:	f04f 0800 	mov.w	r8, #0
 800a3be:	f104 0919 	add.w	r9, r4, #25
 800a3c2:	e7f4      	b.n	800a3ae <_printf_float+0x456>

0800a3c4 <_printf_common>:
 800a3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c8:	4616      	mov	r6, r2
 800a3ca:	4699      	mov	r9, r3
 800a3cc:	688a      	ldr	r2, [r1, #8]
 800a3ce:	690b      	ldr	r3, [r1, #16]
 800a3d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	bfb8      	it	lt
 800a3d8:	4613      	movlt	r3, r2
 800a3da:	6033      	str	r3, [r6, #0]
 800a3dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	b10a      	cbz	r2, 800a3ea <_printf_common+0x26>
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	6033      	str	r3, [r6, #0]
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	0699      	lsls	r1, r3, #26
 800a3ee:	bf42      	ittt	mi
 800a3f0:	6833      	ldrmi	r3, [r6, #0]
 800a3f2:	3302      	addmi	r3, #2
 800a3f4:	6033      	strmi	r3, [r6, #0]
 800a3f6:	6825      	ldr	r5, [r4, #0]
 800a3f8:	f015 0506 	ands.w	r5, r5, #6
 800a3fc:	d106      	bne.n	800a40c <_printf_common+0x48>
 800a3fe:	f104 0a19 	add.w	sl, r4, #25
 800a402:	68e3      	ldr	r3, [r4, #12]
 800a404:	6832      	ldr	r2, [r6, #0]
 800a406:	1a9b      	subs	r3, r3, r2
 800a408:	42ab      	cmp	r3, r5
 800a40a:	dc26      	bgt.n	800a45a <_printf_common+0x96>
 800a40c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a410:	1e13      	subs	r3, r2, #0
 800a412:	6822      	ldr	r2, [r4, #0]
 800a414:	bf18      	it	ne
 800a416:	2301      	movne	r3, #1
 800a418:	0692      	lsls	r2, r2, #26
 800a41a:	d42b      	bmi.n	800a474 <_printf_common+0xb0>
 800a41c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a420:	4649      	mov	r1, r9
 800a422:	4638      	mov	r0, r7
 800a424:	47c0      	blx	r8
 800a426:	3001      	adds	r0, #1
 800a428:	d01e      	beq.n	800a468 <_printf_common+0xa4>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	6922      	ldr	r2, [r4, #16]
 800a42e:	f003 0306 	and.w	r3, r3, #6
 800a432:	2b04      	cmp	r3, #4
 800a434:	bf02      	ittt	eq
 800a436:	68e5      	ldreq	r5, [r4, #12]
 800a438:	6833      	ldreq	r3, [r6, #0]
 800a43a:	1aed      	subeq	r5, r5, r3
 800a43c:	68a3      	ldr	r3, [r4, #8]
 800a43e:	bf0c      	ite	eq
 800a440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a444:	2500      	movne	r5, #0
 800a446:	4293      	cmp	r3, r2
 800a448:	bfc4      	itt	gt
 800a44a:	1a9b      	subgt	r3, r3, r2
 800a44c:	18ed      	addgt	r5, r5, r3
 800a44e:	2600      	movs	r6, #0
 800a450:	341a      	adds	r4, #26
 800a452:	42b5      	cmp	r5, r6
 800a454:	d11a      	bne.n	800a48c <_printf_common+0xc8>
 800a456:	2000      	movs	r0, #0
 800a458:	e008      	b.n	800a46c <_printf_common+0xa8>
 800a45a:	2301      	movs	r3, #1
 800a45c:	4652      	mov	r2, sl
 800a45e:	4649      	mov	r1, r9
 800a460:	4638      	mov	r0, r7
 800a462:	47c0      	blx	r8
 800a464:	3001      	adds	r0, #1
 800a466:	d103      	bne.n	800a470 <_printf_common+0xac>
 800a468:	f04f 30ff 	mov.w	r0, #4294967295
 800a46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a470:	3501      	adds	r5, #1
 800a472:	e7c6      	b.n	800a402 <_printf_common+0x3e>
 800a474:	18e1      	adds	r1, r4, r3
 800a476:	1c5a      	adds	r2, r3, #1
 800a478:	2030      	movs	r0, #48	; 0x30
 800a47a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a47e:	4422      	add	r2, r4
 800a480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a488:	3302      	adds	r3, #2
 800a48a:	e7c7      	b.n	800a41c <_printf_common+0x58>
 800a48c:	2301      	movs	r3, #1
 800a48e:	4622      	mov	r2, r4
 800a490:	4649      	mov	r1, r9
 800a492:	4638      	mov	r0, r7
 800a494:	47c0      	blx	r8
 800a496:	3001      	adds	r0, #1
 800a498:	d0e6      	beq.n	800a468 <_printf_common+0xa4>
 800a49a:	3601      	adds	r6, #1
 800a49c:	e7d9      	b.n	800a452 <_printf_common+0x8e>
	...

0800a4a0 <_printf_i>:
 800a4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a4:	7e0f      	ldrb	r7, [r1, #24]
 800a4a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4a8:	2f78      	cmp	r7, #120	; 0x78
 800a4aa:	4691      	mov	r9, r2
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	469a      	mov	sl, r3
 800a4b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a4b6:	d807      	bhi.n	800a4c8 <_printf_i+0x28>
 800a4b8:	2f62      	cmp	r7, #98	; 0x62
 800a4ba:	d80a      	bhi.n	800a4d2 <_printf_i+0x32>
 800a4bc:	2f00      	cmp	r7, #0
 800a4be:	f000 80d4 	beq.w	800a66a <_printf_i+0x1ca>
 800a4c2:	2f58      	cmp	r7, #88	; 0x58
 800a4c4:	f000 80c0 	beq.w	800a648 <_printf_i+0x1a8>
 800a4c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a4d0:	e03a      	b.n	800a548 <_printf_i+0xa8>
 800a4d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a4d6:	2b15      	cmp	r3, #21
 800a4d8:	d8f6      	bhi.n	800a4c8 <_printf_i+0x28>
 800a4da:	a101      	add	r1, pc, #4	; (adr r1, 800a4e0 <_printf_i+0x40>)
 800a4dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4e0:	0800a539 	.word	0x0800a539
 800a4e4:	0800a54d 	.word	0x0800a54d
 800a4e8:	0800a4c9 	.word	0x0800a4c9
 800a4ec:	0800a4c9 	.word	0x0800a4c9
 800a4f0:	0800a4c9 	.word	0x0800a4c9
 800a4f4:	0800a4c9 	.word	0x0800a4c9
 800a4f8:	0800a54d 	.word	0x0800a54d
 800a4fc:	0800a4c9 	.word	0x0800a4c9
 800a500:	0800a4c9 	.word	0x0800a4c9
 800a504:	0800a4c9 	.word	0x0800a4c9
 800a508:	0800a4c9 	.word	0x0800a4c9
 800a50c:	0800a651 	.word	0x0800a651
 800a510:	0800a579 	.word	0x0800a579
 800a514:	0800a60b 	.word	0x0800a60b
 800a518:	0800a4c9 	.word	0x0800a4c9
 800a51c:	0800a4c9 	.word	0x0800a4c9
 800a520:	0800a673 	.word	0x0800a673
 800a524:	0800a4c9 	.word	0x0800a4c9
 800a528:	0800a579 	.word	0x0800a579
 800a52c:	0800a4c9 	.word	0x0800a4c9
 800a530:	0800a4c9 	.word	0x0800a4c9
 800a534:	0800a613 	.word	0x0800a613
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	1d1a      	adds	r2, r3, #4
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	602a      	str	r2, [r5, #0]
 800a540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a548:	2301      	movs	r3, #1
 800a54a:	e09f      	b.n	800a68c <_printf_i+0x1ec>
 800a54c:	6820      	ldr	r0, [r4, #0]
 800a54e:	682b      	ldr	r3, [r5, #0]
 800a550:	0607      	lsls	r7, r0, #24
 800a552:	f103 0104 	add.w	r1, r3, #4
 800a556:	6029      	str	r1, [r5, #0]
 800a558:	d501      	bpl.n	800a55e <_printf_i+0xbe>
 800a55a:	681e      	ldr	r6, [r3, #0]
 800a55c:	e003      	b.n	800a566 <_printf_i+0xc6>
 800a55e:	0646      	lsls	r6, r0, #25
 800a560:	d5fb      	bpl.n	800a55a <_printf_i+0xba>
 800a562:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a566:	2e00      	cmp	r6, #0
 800a568:	da03      	bge.n	800a572 <_printf_i+0xd2>
 800a56a:	232d      	movs	r3, #45	; 0x2d
 800a56c:	4276      	negs	r6, r6
 800a56e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a572:	485a      	ldr	r0, [pc, #360]	; (800a6dc <_printf_i+0x23c>)
 800a574:	230a      	movs	r3, #10
 800a576:	e012      	b.n	800a59e <_printf_i+0xfe>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	6820      	ldr	r0, [r4, #0]
 800a57c:	1d19      	adds	r1, r3, #4
 800a57e:	6029      	str	r1, [r5, #0]
 800a580:	0605      	lsls	r5, r0, #24
 800a582:	d501      	bpl.n	800a588 <_printf_i+0xe8>
 800a584:	681e      	ldr	r6, [r3, #0]
 800a586:	e002      	b.n	800a58e <_printf_i+0xee>
 800a588:	0641      	lsls	r1, r0, #25
 800a58a:	d5fb      	bpl.n	800a584 <_printf_i+0xe4>
 800a58c:	881e      	ldrh	r6, [r3, #0]
 800a58e:	4853      	ldr	r0, [pc, #332]	; (800a6dc <_printf_i+0x23c>)
 800a590:	2f6f      	cmp	r7, #111	; 0x6f
 800a592:	bf0c      	ite	eq
 800a594:	2308      	moveq	r3, #8
 800a596:	230a      	movne	r3, #10
 800a598:	2100      	movs	r1, #0
 800a59a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a59e:	6865      	ldr	r5, [r4, #4]
 800a5a0:	60a5      	str	r5, [r4, #8]
 800a5a2:	2d00      	cmp	r5, #0
 800a5a4:	bfa2      	ittt	ge
 800a5a6:	6821      	ldrge	r1, [r4, #0]
 800a5a8:	f021 0104 	bicge.w	r1, r1, #4
 800a5ac:	6021      	strge	r1, [r4, #0]
 800a5ae:	b90e      	cbnz	r6, 800a5b4 <_printf_i+0x114>
 800a5b0:	2d00      	cmp	r5, #0
 800a5b2:	d04b      	beq.n	800a64c <_printf_i+0x1ac>
 800a5b4:	4615      	mov	r5, r2
 800a5b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a5ba:	fb03 6711 	mls	r7, r3, r1, r6
 800a5be:	5dc7      	ldrb	r7, [r0, r7]
 800a5c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a5c4:	4637      	mov	r7, r6
 800a5c6:	42bb      	cmp	r3, r7
 800a5c8:	460e      	mov	r6, r1
 800a5ca:	d9f4      	bls.n	800a5b6 <_printf_i+0x116>
 800a5cc:	2b08      	cmp	r3, #8
 800a5ce:	d10b      	bne.n	800a5e8 <_printf_i+0x148>
 800a5d0:	6823      	ldr	r3, [r4, #0]
 800a5d2:	07de      	lsls	r6, r3, #31
 800a5d4:	d508      	bpl.n	800a5e8 <_printf_i+0x148>
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	6861      	ldr	r1, [r4, #4]
 800a5da:	4299      	cmp	r1, r3
 800a5dc:	bfde      	ittt	le
 800a5de:	2330      	movle	r3, #48	; 0x30
 800a5e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a5e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a5e8:	1b52      	subs	r2, r2, r5
 800a5ea:	6122      	str	r2, [r4, #16]
 800a5ec:	f8cd a000 	str.w	sl, [sp]
 800a5f0:	464b      	mov	r3, r9
 800a5f2:	aa03      	add	r2, sp, #12
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	f7ff fee4 	bl	800a3c4 <_printf_common>
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	d14a      	bne.n	800a696 <_printf_i+0x1f6>
 800a600:	f04f 30ff 	mov.w	r0, #4294967295
 800a604:	b004      	add	sp, #16
 800a606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a60a:	6823      	ldr	r3, [r4, #0]
 800a60c:	f043 0320 	orr.w	r3, r3, #32
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	4833      	ldr	r0, [pc, #204]	; (800a6e0 <_printf_i+0x240>)
 800a614:	2778      	movs	r7, #120	; 0x78
 800a616:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	6829      	ldr	r1, [r5, #0]
 800a61e:	061f      	lsls	r7, r3, #24
 800a620:	f851 6b04 	ldr.w	r6, [r1], #4
 800a624:	d402      	bmi.n	800a62c <_printf_i+0x18c>
 800a626:	065f      	lsls	r7, r3, #25
 800a628:	bf48      	it	mi
 800a62a:	b2b6      	uxthmi	r6, r6
 800a62c:	07df      	lsls	r7, r3, #31
 800a62e:	bf48      	it	mi
 800a630:	f043 0320 	orrmi.w	r3, r3, #32
 800a634:	6029      	str	r1, [r5, #0]
 800a636:	bf48      	it	mi
 800a638:	6023      	strmi	r3, [r4, #0]
 800a63a:	b91e      	cbnz	r6, 800a644 <_printf_i+0x1a4>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	f023 0320 	bic.w	r3, r3, #32
 800a642:	6023      	str	r3, [r4, #0]
 800a644:	2310      	movs	r3, #16
 800a646:	e7a7      	b.n	800a598 <_printf_i+0xf8>
 800a648:	4824      	ldr	r0, [pc, #144]	; (800a6dc <_printf_i+0x23c>)
 800a64a:	e7e4      	b.n	800a616 <_printf_i+0x176>
 800a64c:	4615      	mov	r5, r2
 800a64e:	e7bd      	b.n	800a5cc <_printf_i+0x12c>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	6826      	ldr	r6, [r4, #0]
 800a654:	6961      	ldr	r1, [r4, #20]
 800a656:	1d18      	adds	r0, r3, #4
 800a658:	6028      	str	r0, [r5, #0]
 800a65a:	0635      	lsls	r5, r6, #24
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	d501      	bpl.n	800a664 <_printf_i+0x1c4>
 800a660:	6019      	str	r1, [r3, #0]
 800a662:	e002      	b.n	800a66a <_printf_i+0x1ca>
 800a664:	0670      	lsls	r0, r6, #25
 800a666:	d5fb      	bpl.n	800a660 <_printf_i+0x1c0>
 800a668:	8019      	strh	r1, [r3, #0]
 800a66a:	2300      	movs	r3, #0
 800a66c:	6123      	str	r3, [r4, #16]
 800a66e:	4615      	mov	r5, r2
 800a670:	e7bc      	b.n	800a5ec <_printf_i+0x14c>
 800a672:	682b      	ldr	r3, [r5, #0]
 800a674:	1d1a      	adds	r2, r3, #4
 800a676:	602a      	str	r2, [r5, #0]
 800a678:	681d      	ldr	r5, [r3, #0]
 800a67a:	6862      	ldr	r2, [r4, #4]
 800a67c:	2100      	movs	r1, #0
 800a67e:	4628      	mov	r0, r5
 800a680:	f7f5 fda6 	bl	80001d0 <memchr>
 800a684:	b108      	cbz	r0, 800a68a <_printf_i+0x1ea>
 800a686:	1b40      	subs	r0, r0, r5
 800a688:	6060      	str	r0, [r4, #4]
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	6123      	str	r3, [r4, #16]
 800a68e:	2300      	movs	r3, #0
 800a690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a694:	e7aa      	b.n	800a5ec <_printf_i+0x14c>
 800a696:	6923      	ldr	r3, [r4, #16]
 800a698:	462a      	mov	r2, r5
 800a69a:	4649      	mov	r1, r9
 800a69c:	4640      	mov	r0, r8
 800a69e:	47d0      	blx	sl
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	d0ad      	beq.n	800a600 <_printf_i+0x160>
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	079b      	lsls	r3, r3, #30
 800a6a8:	d413      	bmi.n	800a6d2 <_printf_i+0x232>
 800a6aa:	68e0      	ldr	r0, [r4, #12]
 800a6ac:	9b03      	ldr	r3, [sp, #12]
 800a6ae:	4298      	cmp	r0, r3
 800a6b0:	bfb8      	it	lt
 800a6b2:	4618      	movlt	r0, r3
 800a6b4:	e7a6      	b.n	800a604 <_printf_i+0x164>
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	4632      	mov	r2, r6
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	4640      	mov	r0, r8
 800a6be:	47d0      	blx	sl
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d09d      	beq.n	800a600 <_printf_i+0x160>
 800a6c4:	3501      	adds	r5, #1
 800a6c6:	68e3      	ldr	r3, [r4, #12]
 800a6c8:	9903      	ldr	r1, [sp, #12]
 800a6ca:	1a5b      	subs	r3, r3, r1
 800a6cc:	42ab      	cmp	r3, r5
 800a6ce:	dcf2      	bgt.n	800a6b6 <_printf_i+0x216>
 800a6d0:	e7eb      	b.n	800a6aa <_printf_i+0x20a>
 800a6d2:	2500      	movs	r5, #0
 800a6d4:	f104 0619 	add.w	r6, r4, #25
 800a6d8:	e7f5      	b.n	800a6c6 <_printf_i+0x226>
 800a6da:	bf00      	nop
 800a6dc:	0800eeca 	.word	0x0800eeca
 800a6e0:	0800eedb 	.word	0x0800eedb

0800a6e4 <_scanf_float>:
 800a6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	b087      	sub	sp, #28
 800a6ea:	4617      	mov	r7, r2
 800a6ec:	9303      	str	r3, [sp, #12]
 800a6ee:	688b      	ldr	r3, [r1, #8]
 800a6f0:	1e5a      	subs	r2, r3, #1
 800a6f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a6f6:	bf83      	ittte	hi
 800a6f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a6fc:	195b      	addhi	r3, r3, r5
 800a6fe:	9302      	strhi	r3, [sp, #8]
 800a700:	2300      	movls	r3, #0
 800a702:	bf86      	itte	hi
 800a704:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a708:	608b      	strhi	r3, [r1, #8]
 800a70a:	9302      	strls	r3, [sp, #8]
 800a70c:	680b      	ldr	r3, [r1, #0]
 800a70e:	468b      	mov	fp, r1
 800a710:	2500      	movs	r5, #0
 800a712:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a716:	f84b 3b1c 	str.w	r3, [fp], #28
 800a71a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a71e:	4680      	mov	r8, r0
 800a720:	460c      	mov	r4, r1
 800a722:	465e      	mov	r6, fp
 800a724:	46aa      	mov	sl, r5
 800a726:	46a9      	mov	r9, r5
 800a728:	9501      	str	r5, [sp, #4]
 800a72a:	68a2      	ldr	r2, [r4, #8]
 800a72c:	b152      	cbz	r2, 800a744 <_scanf_float+0x60>
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b4e      	cmp	r3, #78	; 0x4e
 800a734:	d864      	bhi.n	800a800 <_scanf_float+0x11c>
 800a736:	2b40      	cmp	r3, #64	; 0x40
 800a738:	d83c      	bhi.n	800a7b4 <_scanf_float+0xd0>
 800a73a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a73e:	b2c8      	uxtb	r0, r1
 800a740:	280e      	cmp	r0, #14
 800a742:	d93a      	bls.n	800a7ba <_scanf_float+0xd6>
 800a744:	f1b9 0f00 	cmp.w	r9, #0
 800a748:	d003      	beq.n	800a752 <_scanf_float+0x6e>
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a756:	f1ba 0f01 	cmp.w	sl, #1
 800a75a:	f200 8113 	bhi.w	800a984 <_scanf_float+0x2a0>
 800a75e:	455e      	cmp	r6, fp
 800a760:	f200 8105 	bhi.w	800a96e <_scanf_float+0x28a>
 800a764:	2501      	movs	r5, #1
 800a766:	4628      	mov	r0, r5
 800a768:	b007      	add	sp, #28
 800a76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a772:	2a0d      	cmp	r2, #13
 800a774:	d8e6      	bhi.n	800a744 <_scanf_float+0x60>
 800a776:	a101      	add	r1, pc, #4	; (adr r1, 800a77c <_scanf_float+0x98>)
 800a778:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a77c:	0800a8bb 	.word	0x0800a8bb
 800a780:	0800a745 	.word	0x0800a745
 800a784:	0800a745 	.word	0x0800a745
 800a788:	0800a745 	.word	0x0800a745
 800a78c:	0800a91b 	.word	0x0800a91b
 800a790:	0800a8f3 	.word	0x0800a8f3
 800a794:	0800a745 	.word	0x0800a745
 800a798:	0800a745 	.word	0x0800a745
 800a79c:	0800a8c9 	.word	0x0800a8c9
 800a7a0:	0800a745 	.word	0x0800a745
 800a7a4:	0800a745 	.word	0x0800a745
 800a7a8:	0800a745 	.word	0x0800a745
 800a7ac:	0800a745 	.word	0x0800a745
 800a7b0:	0800a881 	.word	0x0800a881
 800a7b4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a7b8:	e7db      	b.n	800a772 <_scanf_float+0x8e>
 800a7ba:	290e      	cmp	r1, #14
 800a7bc:	d8c2      	bhi.n	800a744 <_scanf_float+0x60>
 800a7be:	a001      	add	r0, pc, #4	; (adr r0, 800a7c4 <_scanf_float+0xe0>)
 800a7c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a7c4:	0800a873 	.word	0x0800a873
 800a7c8:	0800a745 	.word	0x0800a745
 800a7cc:	0800a873 	.word	0x0800a873
 800a7d0:	0800a907 	.word	0x0800a907
 800a7d4:	0800a745 	.word	0x0800a745
 800a7d8:	0800a821 	.word	0x0800a821
 800a7dc:	0800a85d 	.word	0x0800a85d
 800a7e0:	0800a85d 	.word	0x0800a85d
 800a7e4:	0800a85d 	.word	0x0800a85d
 800a7e8:	0800a85d 	.word	0x0800a85d
 800a7ec:	0800a85d 	.word	0x0800a85d
 800a7f0:	0800a85d 	.word	0x0800a85d
 800a7f4:	0800a85d 	.word	0x0800a85d
 800a7f8:	0800a85d 	.word	0x0800a85d
 800a7fc:	0800a85d 	.word	0x0800a85d
 800a800:	2b6e      	cmp	r3, #110	; 0x6e
 800a802:	d809      	bhi.n	800a818 <_scanf_float+0x134>
 800a804:	2b60      	cmp	r3, #96	; 0x60
 800a806:	d8b2      	bhi.n	800a76e <_scanf_float+0x8a>
 800a808:	2b54      	cmp	r3, #84	; 0x54
 800a80a:	d077      	beq.n	800a8fc <_scanf_float+0x218>
 800a80c:	2b59      	cmp	r3, #89	; 0x59
 800a80e:	d199      	bne.n	800a744 <_scanf_float+0x60>
 800a810:	2d07      	cmp	r5, #7
 800a812:	d197      	bne.n	800a744 <_scanf_float+0x60>
 800a814:	2508      	movs	r5, #8
 800a816:	e029      	b.n	800a86c <_scanf_float+0x188>
 800a818:	2b74      	cmp	r3, #116	; 0x74
 800a81a:	d06f      	beq.n	800a8fc <_scanf_float+0x218>
 800a81c:	2b79      	cmp	r3, #121	; 0x79
 800a81e:	e7f6      	b.n	800a80e <_scanf_float+0x12a>
 800a820:	6821      	ldr	r1, [r4, #0]
 800a822:	05c8      	lsls	r0, r1, #23
 800a824:	d51a      	bpl.n	800a85c <_scanf_float+0x178>
 800a826:	9b02      	ldr	r3, [sp, #8]
 800a828:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a82c:	6021      	str	r1, [r4, #0]
 800a82e:	f109 0901 	add.w	r9, r9, #1
 800a832:	b11b      	cbz	r3, 800a83c <_scanf_float+0x158>
 800a834:	3b01      	subs	r3, #1
 800a836:	3201      	adds	r2, #1
 800a838:	9302      	str	r3, [sp, #8]
 800a83a:	60a2      	str	r2, [r4, #8]
 800a83c:	68a3      	ldr	r3, [r4, #8]
 800a83e:	3b01      	subs	r3, #1
 800a840:	60a3      	str	r3, [r4, #8]
 800a842:	6923      	ldr	r3, [r4, #16]
 800a844:	3301      	adds	r3, #1
 800a846:	6123      	str	r3, [r4, #16]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	607b      	str	r3, [r7, #4]
 800a850:	f340 8084 	ble.w	800a95c <_scanf_float+0x278>
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	3301      	adds	r3, #1
 800a858:	603b      	str	r3, [r7, #0]
 800a85a:	e766      	b.n	800a72a <_scanf_float+0x46>
 800a85c:	eb1a 0f05 	cmn.w	sl, r5
 800a860:	f47f af70 	bne.w	800a744 <_scanf_float+0x60>
 800a864:	6822      	ldr	r2, [r4, #0]
 800a866:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a86a:	6022      	str	r2, [r4, #0]
 800a86c:	f806 3b01 	strb.w	r3, [r6], #1
 800a870:	e7e4      	b.n	800a83c <_scanf_float+0x158>
 800a872:	6822      	ldr	r2, [r4, #0]
 800a874:	0610      	lsls	r0, r2, #24
 800a876:	f57f af65 	bpl.w	800a744 <_scanf_float+0x60>
 800a87a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a87e:	e7f4      	b.n	800a86a <_scanf_float+0x186>
 800a880:	f1ba 0f00 	cmp.w	sl, #0
 800a884:	d10e      	bne.n	800a8a4 <_scanf_float+0x1c0>
 800a886:	f1b9 0f00 	cmp.w	r9, #0
 800a88a:	d10e      	bne.n	800a8aa <_scanf_float+0x1c6>
 800a88c:	6822      	ldr	r2, [r4, #0]
 800a88e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a892:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a896:	d108      	bne.n	800a8aa <_scanf_float+0x1c6>
 800a898:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a89c:	6022      	str	r2, [r4, #0]
 800a89e:	f04f 0a01 	mov.w	sl, #1
 800a8a2:	e7e3      	b.n	800a86c <_scanf_float+0x188>
 800a8a4:	f1ba 0f02 	cmp.w	sl, #2
 800a8a8:	d055      	beq.n	800a956 <_scanf_float+0x272>
 800a8aa:	2d01      	cmp	r5, #1
 800a8ac:	d002      	beq.n	800a8b4 <_scanf_float+0x1d0>
 800a8ae:	2d04      	cmp	r5, #4
 800a8b0:	f47f af48 	bne.w	800a744 <_scanf_float+0x60>
 800a8b4:	3501      	adds	r5, #1
 800a8b6:	b2ed      	uxtb	r5, r5
 800a8b8:	e7d8      	b.n	800a86c <_scanf_float+0x188>
 800a8ba:	f1ba 0f01 	cmp.w	sl, #1
 800a8be:	f47f af41 	bne.w	800a744 <_scanf_float+0x60>
 800a8c2:	f04f 0a02 	mov.w	sl, #2
 800a8c6:	e7d1      	b.n	800a86c <_scanf_float+0x188>
 800a8c8:	b97d      	cbnz	r5, 800a8ea <_scanf_float+0x206>
 800a8ca:	f1b9 0f00 	cmp.w	r9, #0
 800a8ce:	f47f af3c 	bne.w	800a74a <_scanf_float+0x66>
 800a8d2:	6822      	ldr	r2, [r4, #0]
 800a8d4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a8d8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a8dc:	f47f af39 	bne.w	800a752 <_scanf_float+0x6e>
 800a8e0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a8e4:	6022      	str	r2, [r4, #0]
 800a8e6:	2501      	movs	r5, #1
 800a8e8:	e7c0      	b.n	800a86c <_scanf_float+0x188>
 800a8ea:	2d03      	cmp	r5, #3
 800a8ec:	d0e2      	beq.n	800a8b4 <_scanf_float+0x1d0>
 800a8ee:	2d05      	cmp	r5, #5
 800a8f0:	e7de      	b.n	800a8b0 <_scanf_float+0x1cc>
 800a8f2:	2d02      	cmp	r5, #2
 800a8f4:	f47f af26 	bne.w	800a744 <_scanf_float+0x60>
 800a8f8:	2503      	movs	r5, #3
 800a8fa:	e7b7      	b.n	800a86c <_scanf_float+0x188>
 800a8fc:	2d06      	cmp	r5, #6
 800a8fe:	f47f af21 	bne.w	800a744 <_scanf_float+0x60>
 800a902:	2507      	movs	r5, #7
 800a904:	e7b2      	b.n	800a86c <_scanf_float+0x188>
 800a906:	6822      	ldr	r2, [r4, #0]
 800a908:	0591      	lsls	r1, r2, #22
 800a90a:	f57f af1b 	bpl.w	800a744 <_scanf_float+0x60>
 800a90e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a912:	6022      	str	r2, [r4, #0]
 800a914:	f8cd 9004 	str.w	r9, [sp, #4]
 800a918:	e7a8      	b.n	800a86c <_scanf_float+0x188>
 800a91a:	6822      	ldr	r2, [r4, #0]
 800a91c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a920:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a924:	d006      	beq.n	800a934 <_scanf_float+0x250>
 800a926:	0550      	lsls	r0, r2, #21
 800a928:	f57f af0c 	bpl.w	800a744 <_scanf_float+0x60>
 800a92c:	f1b9 0f00 	cmp.w	r9, #0
 800a930:	f43f af0f 	beq.w	800a752 <_scanf_float+0x6e>
 800a934:	0591      	lsls	r1, r2, #22
 800a936:	bf58      	it	pl
 800a938:	9901      	ldrpl	r1, [sp, #4]
 800a93a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a93e:	bf58      	it	pl
 800a940:	eba9 0101 	subpl.w	r1, r9, r1
 800a944:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a948:	bf58      	it	pl
 800a94a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a94e:	6022      	str	r2, [r4, #0]
 800a950:	f04f 0900 	mov.w	r9, #0
 800a954:	e78a      	b.n	800a86c <_scanf_float+0x188>
 800a956:	f04f 0a03 	mov.w	sl, #3
 800a95a:	e787      	b.n	800a86c <_scanf_float+0x188>
 800a95c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a960:	4639      	mov	r1, r7
 800a962:	4640      	mov	r0, r8
 800a964:	4798      	blx	r3
 800a966:	2800      	cmp	r0, #0
 800a968:	f43f aedf 	beq.w	800a72a <_scanf_float+0x46>
 800a96c:	e6ea      	b.n	800a744 <_scanf_float+0x60>
 800a96e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a976:	463a      	mov	r2, r7
 800a978:	4640      	mov	r0, r8
 800a97a:	4798      	blx	r3
 800a97c:	6923      	ldr	r3, [r4, #16]
 800a97e:	3b01      	subs	r3, #1
 800a980:	6123      	str	r3, [r4, #16]
 800a982:	e6ec      	b.n	800a75e <_scanf_float+0x7a>
 800a984:	1e6b      	subs	r3, r5, #1
 800a986:	2b06      	cmp	r3, #6
 800a988:	d825      	bhi.n	800a9d6 <_scanf_float+0x2f2>
 800a98a:	2d02      	cmp	r5, #2
 800a98c:	d836      	bhi.n	800a9fc <_scanf_float+0x318>
 800a98e:	455e      	cmp	r6, fp
 800a990:	f67f aee8 	bls.w	800a764 <_scanf_float+0x80>
 800a994:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a998:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a99c:	463a      	mov	r2, r7
 800a99e:	4640      	mov	r0, r8
 800a9a0:	4798      	blx	r3
 800a9a2:	6923      	ldr	r3, [r4, #16]
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	6123      	str	r3, [r4, #16]
 800a9a8:	e7f1      	b.n	800a98e <_scanf_float+0x2aa>
 800a9aa:	9802      	ldr	r0, [sp, #8]
 800a9ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9b0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a9b4:	9002      	str	r0, [sp, #8]
 800a9b6:	463a      	mov	r2, r7
 800a9b8:	4640      	mov	r0, r8
 800a9ba:	4798      	blx	r3
 800a9bc:	6923      	ldr	r3, [r4, #16]
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	6123      	str	r3, [r4, #16]
 800a9c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9c6:	fa5f fa8a 	uxtb.w	sl, sl
 800a9ca:	f1ba 0f02 	cmp.w	sl, #2
 800a9ce:	d1ec      	bne.n	800a9aa <_scanf_float+0x2c6>
 800a9d0:	3d03      	subs	r5, #3
 800a9d2:	b2ed      	uxtb	r5, r5
 800a9d4:	1b76      	subs	r6, r6, r5
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	05da      	lsls	r2, r3, #23
 800a9da:	d52f      	bpl.n	800aa3c <_scanf_float+0x358>
 800a9dc:	055b      	lsls	r3, r3, #21
 800a9de:	d510      	bpl.n	800aa02 <_scanf_float+0x31e>
 800a9e0:	455e      	cmp	r6, fp
 800a9e2:	f67f aebf 	bls.w	800a764 <_scanf_float+0x80>
 800a9e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a9ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9ee:	463a      	mov	r2, r7
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4798      	blx	r3
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	6123      	str	r3, [r4, #16]
 800a9fa:	e7f1      	b.n	800a9e0 <_scanf_float+0x2fc>
 800a9fc:	46aa      	mov	sl, r5
 800a9fe:	9602      	str	r6, [sp, #8]
 800aa00:	e7df      	b.n	800a9c2 <_scanf_float+0x2de>
 800aa02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa06:	6923      	ldr	r3, [r4, #16]
 800aa08:	2965      	cmp	r1, #101	; 0x65
 800aa0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa0e:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa12:	6123      	str	r3, [r4, #16]
 800aa14:	d00c      	beq.n	800aa30 <_scanf_float+0x34c>
 800aa16:	2945      	cmp	r1, #69	; 0x45
 800aa18:	d00a      	beq.n	800aa30 <_scanf_float+0x34c>
 800aa1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa1e:	463a      	mov	r2, r7
 800aa20:	4640      	mov	r0, r8
 800aa22:	4798      	blx	r3
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	1eb5      	subs	r5, r6, #2
 800aa2e:	6123      	str	r3, [r4, #16]
 800aa30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa34:	463a      	mov	r2, r7
 800aa36:	4640      	mov	r0, r8
 800aa38:	4798      	blx	r3
 800aa3a:	462e      	mov	r6, r5
 800aa3c:	6825      	ldr	r5, [r4, #0]
 800aa3e:	f015 0510 	ands.w	r5, r5, #16
 800aa42:	d158      	bne.n	800aaf6 <_scanf_float+0x412>
 800aa44:	7035      	strb	r5, [r6, #0]
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aa4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa50:	d11c      	bne.n	800aa8c <_scanf_float+0x3a8>
 800aa52:	9b01      	ldr	r3, [sp, #4]
 800aa54:	454b      	cmp	r3, r9
 800aa56:	eba3 0209 	sub.w	r2, r3, r9
 800aa5a:	d124      	bne.n	800aaa6 <_scanf_float+0x3c2>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	4659      	mov	r1, fp
 800aa60:	4640      	mov	r0, r8
 800aa62:	f7ff f96d 	bl	8009d40 <_strtod_r>
 800aa66:	9b03      	ldr	r3, [sp, #12]
 800aa68:	6821      	ldr	r1, [r4, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f011 0f02 	tst.w	r1, #2
 800aa70:	ec57 6b10 	vmov	r6, r7, d0
 800aa74:	f103 0204 	add.w	r2, r3, #4
 800aa78:	d020      	beq.n	800aabc <_scanf_float+0x3d8>
 800aa7a:	9903      	ldr	r1, [sp, #12]
 800aa7c:	600a      	str	r2, [r1, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	e9c3 6700 	strd	r6, r7, [r3]
 800aa84:	68e3      	ldr	r3, [r4, #12]
 800aa86:	3301      	adds	r3, #1
 800aa88:	60e3      	str	r3, [r4, #12]
 800aa8a:	e66c      	b.n	800a766 <_scanf_float+0x82>
 800aa8c:	9b04      	ldr	r3, [sp, #16]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0e4      	beq.n	800aa5c <_scanf_float+0x378>
 800aa92:	9905      	ldr	r1, [sp, #20]
 800aa94:	230a      	movs	r3, #10
 800aa96:	462a      	mov	r2, r5
 800aa98:	3101      	adds	r1, #1
 800aa9a:	4640      	mov	r0, r8
 800aa9c:	f002 fa38 	bl	800cf10 <_strtol_r>
 800aaa0:	9b04      	ldr	r3, [sp, #16]
 800aaa2:	9e05      	ldr	r6, [sp, #20]
 800aaa4:	1ac2      	subs	r2, r0, r3
 800aaa6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800aaaa:	429e      	cmp	r6, r3
 800aaac:	bf28      	it	cs
 800aaae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800aab2:	4912      	ldr	r1, [pc, #72]	; (800aafc <_scanf_float+0x418>)
 800aab4:	4630      	mov	r0, r6
 800aab6:	f000 f901 	bl	800acbc <siprintf>
 800aaba:	e7cf      	b.n	800aa5c <_scanf_float+0x378>
 800aabc:	f011 0f04 	tst.w	r1, #4
 800aac0:	9903      	ldr	r1, [sp, #12]
 800aac2:	600a      	str	r2, [r1, #0]
 800aac4:	d1db      	bne.n	800aa7e <_scanf_float+0x39a>
 800aac6:	f8d3 8000 	ldr.w	r8, [r3]
 800aaca:	ee10 2a10 	vmov	r2, s0
 800aace:	ee10 0a10 	vmov	r0, s0
 800aad2:	463b      	mov	r3, r7
 800aad4:	4639      	mov	r1, r7
 800aad6:	f7f6 f829 	bl	8000b2c <__aeabi_dcmpun>
 800aada:	b128      	cbz	r0, 800aae8 <_scanf_float+0x404>
 800aadc:	4808      	ldr	r0, [pc, #32]	; (800ab00 <_scanf_float+0x41c>)
 800aade:	f000 f9fb 	bl	800aed8 <nanf>
 800aae2:	ed88 0a00 	vstr	s0, [r8]
 800aae6:	e7cd      	b.n	800aa84 <_scanf_float+0x3a0>
 800aae8:	4630      	mov	r0, r6
 800aaea:	4639      	mov	r1, r7
 800aaec:	f7f6 f87c 	bl	8000be8 <__aeabi_d2f>
 800aaf0:	f8c8 0000 	str.w	r0, [r8]
 800aaf4:	e7c6      	b.n	800aa84 <_scanf_float+0x3a0>
 800aaf6:	2500      	movs	r5, #0
 800aaf8:	e635      	b.n	800a766 <_scanf_float+0x82>
 800aafa:	bf00      	nop
 800aafc:	0800eeec 	.word	0x0800eeec
 800ab00:	0800f289 	.word	0x0800f289

0800ab04 <std>:
 800ab04:	2300      	movs	r3, #0
 800ab06:	b510      	push	{r4, lr}
 800ab08:	4604      	mov	r4, r0
 800ab0a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab12:	6083      	str	r3, [r0, #8]
 800ab14:	8181      	strh	r1, [r0, #12]
 800ab16:	6643      	str	r3, [r0, #100]	; 0x64
 800ab18:	81c2      	strh	r2, [r0, #14]
 800ab1a:	6183      	str	r3, [r0, #24]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	2208      	movs	r2, #8
 800ab20:	305c      	adds	r0, #92	; 0x5c
 800ab22:	f000 f92e 	bl	800ad82 <memset>
 800ab26:	4b0d      	ldr	r3, [pc, #52]	; (800ab5c <std+0x58>)
 800ab28:	6263      	str	r3, [r4, #36]	; 0x24
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	; (800ab60 <std+0x5c>)
 800ab2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	; (800ab64 <std+0x60>)
 800ab30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab32:	4b0d      	ldr	r3, [pc, #52]	; (800ab68 <std+0x64>)
 800ab34:	6323      	str	r3, [r4, #48]	; 0x30
 800ab36:	4b0d      	ldr	r3, [pc, #52]	; (800ab6c <std+0x68>)
 800ab38:	6224      	str	r4, [r4, #32]
 800ab3a:	429c      	cmp	r4, r3
 800ab3c:	d006      	beq.n	800ab4c <std+0x48>
 800ab3e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ab42:	4294      	cmp	r4, r2
 800ab44:	d002      	beq.n	800ab4c <std+0x48>
 800ab46:	33d0      	adds	r3, #208	; 0xd0
 800ab48:	429c      	cmp	r4, r3
 800ab4a:	d105      	bne.n	800ab58 <std+0x54>
 800ab4c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab54:	f000 b9a4 	b.w	800aea0 <__retarget_lock_init_recursive>
 800ab58:	bd10      	pop	{r4, pc}
 800ab5a:	bf00      	nop
 800ab5c:	0800acfd 	.word	0x0800acfd
 800ab60:	0800ad1f 	.word	0x0800ad1f
 800ab64:	0800ad57 	.word	0x0800ad57
 800ab68:	0800ad7b 	.word	0x0800ad7b
 800ab6c:	200006b8 	.word	0x200006b8

0800ab70 <stdio_exit_handler>:
 800ab70:	4a02      	ldr	r2, [pc, #8]	; (800ab7c <stdio_exit_handler+0xc>)
 800ab72:	4903      	ldr	r1, [pc, #12]	; (800ab80 <stdio_exit_handler+0x10>)
 800ab74:	4803      	ldr	r0, [pc, #12]	; (800ab84 <stdio_exit_handler+0x14>)
 800ab76:	f000 b869 	b.w	800ac4c <_fwalk_sglue>
 800ab7a:	bf00      	nop
 800ab7c:	20000024 	.word	0x20000024
 800ab80:	0800d575 	.word	0x0800d575
 800ab84:	2000019c 	.word	0x2000019c

0800ab88 <cleanup_stdio>:
 800ab88:	6841      	ldr	r1, [r0, #4]
 800ab8a:	4b0c      	ldr	r3, [pc, #48]	; (800abbc <cleanup_stdio+0x34>)
 800ab8c:	4299      	cmp	r1, r3
 800ab8e:	b510      	push	{r4, lr}
 800ab90:	4604      	mov	r4, r0
 800ab92:	d001      	beq.n	800ab98 <cleanup_stdio+0x10>
 800ab94:	f002 fcee 	bl	800d574 <_fflush_r>
 800ab98:	68a1      	ldr	r1, [r4, #8]
 800ab9a:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <cleanup_stdio+0x38>)
 800ab9c:	4299      	cmp	r1, r3
 800ab9e:	d002      	beq.n	800aba6 <cleanup_stdio+0x1e>
 800aba0:	4620      	mov	r0, r4
 800aba2:	f002 fce7 	bl	800d574 <_fflush_r>
 800aba6:	68e1      	ldr	r1, [r4, #12]
 800aba8:	4b06      	ldr	r3, [pc, #24]	; (800abc4 <cleanup_stdio+0x3c>)
 800abaa:	4299      	cmp	r1, r3
 800abac:	d004      	beq.n	800abb8 <cleanup_stdio+0x30>
 800abae:	4620      	mov	r0, r4
 800abb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb4:	f002 bcde 	b.w	800d574 <_fflush_r>
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	bf00      	nop
 800abbc:	200006b8 	.word	0x200006b8
 800abc0:	20000720 	.word	0x20000720
 800abc4:	20000788 	.word	0x20000788

0800abc8 <global_stdio_init.part.0>:
 800abc8:	b510      	push	{r4, lr}
 800abca:	4b0b      	ldr	r3, [pc, #44]	; (800abf8 <global_stdio_init.part.0+0x30>)
 800abcc:	4c0b      	ldr	r4, [pc, #44]	; (800abfc <global_stdio_init.part.0+0x34>)
 800abce:	4a0c      	ldr	r2, [pc, #48]	; (800ac00 <global_stdio_init.part.0+0x38>)
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	4620      	mov	r0, r4
 800abd4:	2200      	movs	r2, #0
 800abd6:	2104      	movs	r1, #4
 800abd8:	f7ff ff94 	bl	800ab04 <std>
 800abdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800abe0:	2201      	movs	r2, #1
 800abe2:	2109      	movs	r1, #9
 800abe4:	f7ff ff8e 	bl	800ab04 <std>
 800abe8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800abec:	2202      	movs	r2, #2
 800abee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abf2:	2112      	movs	r1, #18
 800abf4:	f7ff bf86 	b.w	800ab04 <std>
 800abf8:	200007f0 	.word	0x200007f0
 800abfc:	200006b8 	.word	0x200006b8
 800ac00:	0800ab71 	.word	0x0800ab71

0800ac04 <__sfp_lock_acquire>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__sfp_lock_acquire+0x8>)
 800ac06:	f000 b94c 	b.w	800aea2 <__retarget_lock_acquire_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	200007f9 	.word	0x200007f9

0800ac10 <__sfp_lock_release>:
 800ac10:	4801      	ldr	r0, [pc, #4]	; (800ac18 <__sfp_lock_release+0x8>)
 800ac12:	f000 b947 	b.w	800aea4 <__retarget_lock_release_recursive>
 800ac16:	bf00      	nop
 800ac18:	200007f9 	.word	0x200007f9

0800ac1c <__sinit>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	4604      	mov	r4, r0
 800ac20:	f7ff fff0 	bl	800ac04 <__sfp_lock_acquire>
 800ac24:	6a23      	ldr	r3, [r4, #32]
 800ac26:	b11b      	cbz	r3, 800ac30 <__sinit+0x14>
 800ac28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac2c:	f7ff bff0 	b.w	800ac10 <__sfp_lock_release>
 800ac30:	4b04      	ldr	r3, [pc, #16]	; (800ac44 <__sinit+0x28>)
 800ac32:	6223      	str	r3, [r4, #32]
 800ac34:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <__sinit+0x2c>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1f5      	bne.n	800ac28 <__sinit+0xc>
 800ac3c:	f7ff ffc4 	bl	800abc8 <global_stdio_init.part.0>
 800ac40:	e7f2      	b.n	800ac28 <__sinit+0xc>
 800ac42:	bf00      	nop
 800ac44:	0800ab89 	.word	0x0800ab89
 800ac48:	200007f0 	.word	0x200007f0

0800ac4c <_fwalk_sglue>:
 800ac4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac50:	4607      	mov	r7, r0
 800ac52:	4688      	mov	r8, r1
 800ac54:	4614      	mov	r4, r2
 800ac56:	2600      	movs	r6, #0
 800ac58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac5c:	f1b9 0901 	subs.w	r9, r9, #1
 800ac60:	d505      	bpl.n	800ac6e <_fwalk_sglue+0x22>
 800ac62:	6824      	ldr	r4, [r4, #0]
 800ac64:	2c00      	cmp	r4, #0
 800ac66:	d1f7      	bne.n	800ac58 <_fwalk_sglue+0xc>
 800ac68:	4630      	mov	r0, r6
 800ac6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac6e:	89ab      	ldrh	r3, [r5, #12]
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d907      	bls.n	800ac84 <_fwalk_sglue+0x38>
 800ac74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac78:	3301      	adds	r3, #1
 800ac7a:	d003      	beq.n	800ac84 <_fwalk_sglue+0x38>
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	4638      	mov	r0, r7
 800ac80:	47c0      	blx	r8
 800ac82:	4306      	orrs	r6, r0
 800ac84:	3568      	adds	r5, #104	; 0x68
 800ac86:	e7e9      	b.n	800ac5c <_fwalk_sglue+0x10>

0800ac88 <iprintf>:
 800ac88:	b40f      	push	{r0, r1, r2, r3}
 800ac8a:	b507      	push	{r0, r1, r2, lr}
 800ac8c:	4906      	ldr	r1, [pc, #24]	; (800aca8 <iprintf+0x20>)
 800ac8e:	ab04      	add	r3, sp, #16
 800ac90:	6808      	ldr	r0, [r1, #0]
 800ac92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac96:	6881      	ldr	r1, [r0, #8]
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	f002 facb 	bl	800d234 <_vfiprintf_r>
 800ac9e:	b003      	add	sp, #12
 800aca0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aca4:	b004      	add	sp, #16
 800aca6:	4770      	bx	lr
 800aca8:	200001e8 	.word	0x200001e8

0800acac <putchar>:
 800acac:	4b02      	ldr	r3, [pc, #8]	; (800acb8 <putchar+0xc>)
 800acae:	4601      	mov	r1, r0
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	6882      	ldr	r2, [r0, #8]
 800acb4:	f002 bc86 	b.w	800d5c4 <_putc_r>
 800acb8:	200001e8 	.word	0x200001e8

0800acbc <siprintf>:
 800acbc:	b40e      	push	{r1, r2, r3}
 800acbe:	b500      	push	{lr}
 800acc0:	b09c      	sub	sp, #112	; 0x70
 800acc2:	ab1d      	add	r3, sp, #116	; 0x74
 800acc4:	9002      	str	r0, [sp, #8]
 800acc6:	9006      	str	r0, [sp, #24]
 800acc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800accc:	4809      	ldr	r0, [pc, #36]	; (800acf4 <siprintf+0x38>)
 800acce:	9107      	str	r1, [sp, #28]
 800acd0:	9104      	str	r1, [sp, #16]
 800acd2:	4909      	ldr	r1, [pc, #36]	; (800acf8 <siprintf+0x3c>)
 800acd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800acd8:	9105      	str	r1, [sp, #20]
 800acda:	6800      	ldr	r0, [r0, #0]
 800acdc:	9301      	str	r3, [sp, #4]
 800acde:	a902      	add	r1, sp, #8
 800ace0:	f002 f980 	bl	800cfe4 <_svfiprintf_r>
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	2200      	movs	r2, #0
 800ace8:	701a      	strb	r2, [r3, #0]
 800acea:	b01c      	add	sp, #112	; 0x70
 800acec:	f85d eb04 	ldr.w	lr, [sp], #4
 800acf0:	b003      	add	sp, #12
 800acf2:	4770      	bx	lr
 800acf4:	200001e8 	.word	0x200001e8
 800acf8:	ffff0208 	.word	0xffff0208

0800acfc <__sread>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	460c      	mov	r4, r1
 800ad00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad04:	f000 f87e 	bl	800ae04 <_read_r>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	bfab      	itete	ge
 800ad0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad0e:	89a3      	ldrhlt	r3, [r4, #12]
 800ad10:	181b      	addge	r3, r3, r0
 800ad12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ad16:	bfac      	ite	ge
 800ad18:	6563      	strge	r3, [r4, #84]	; 0x54
 800ad1a:	81a3      	strhlt	r3, [r4, #12]
 800ad1c:	bd10      	pop	{r4, pc}

0800ad1e <__swrite>:
 800ad1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad22:	461f      	mov	r7, r3
 800ad24:	898b      	ldrh	r3, [r1, #12]
 800ad26:	05db      	lsls	r3, r3, #23
 800ad28:	4605      	mov	r5, r0
 800ad2a:	460c      	mov	r4, r1
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	d505      	bpl.n	800ad3c <__swrite+0x1e>
 800ad30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad34:	2302      	movs	r3, #2
 800ad36:	2200      	movs	r2, #0
 800ad38:	f000 f852 	bl	800ade0 <_lseek_r>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	4632      	mov	r2, r6
 800ad4a:	463b      	mov	r3, r7
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad52:	f000 b869 	b.w	800ae28 <_write_r>

0800ad56 <__sseek>:
 800ad56:	b510      	push	{r4, lr}
 800ad58:	460c      	mov	r4, r1
 800ad5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5e:	f000 f83f 	bl	800ade0 <_lseek_r>
 800ad62:	1c43      	adds	r3, r0, #1
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	bf15      	itete	ne
 800ad68:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad72:	81a3      	strheq	r3, [r4, #12]
 800ad74:	bf18      	it	ne
 800ad76:	81a3      	strhne	r3, [r4, #12]
 800ad78:	bd10      	pop	{r4, pc}

0800ad7a <__sclose>:
 800ad7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad7e:	f000 b81f 	b.w	800adc0 <_close_r>

0800ad82 <memset>:
 800ad82:	4402      	add	r2, r0
 800ad84:	4603      	mov	r3, r0
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d100      	bne.n	800ad8c <memset+0xa>
 800ad8a:	4770      	bx	lr
 800ad8c:	f803 1b01 	strb.w	r1, [r3], #1
 800ad90:	e7f9      	b.n	800ad86 <memset+0x4>

0800ad92 <strncmp>:
 800ad92:	b510      	push	{r4, lr}
 800ad94:	b16a      	cbz	r2, 800adb2 <strncmp+0x20>
 800ad96:	3901      	subs	r1, #1
 800ad98:	1884      	adds	r4, r0, r2
 800ad9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d103      	bne.n	800adae <strncmp+0x1c>
 800ada6:	42a0      	cmp	r0, r4
 800ada8:	d001      	beq.n	800adae <strncmp+0x1c>
 800adaa:	2a00      	cmp	r2, #0
 800adac:	d1f5      	bne.n	800ad9a <strncmp+0x8>
 800adae:	1ad0      	subs	r0, r2, r3
 800adb0:	bd10      	pop	{r4, pc}
 800adb2:	4610      	mov	r0, r2
 800adb4:	e7fc      	b.n	800adb0 <strncmp+0x1e>
	...

0800adb8 <_localeconv_r>:
 800adb8:	4800      	ldr	r0, [pc, #0]	; (800adbc <_localeconv_r+0x4>)
 800adba:	4770      	bx	lr
 800adbc:	20000120 	.word	0x20000120

0800adc0 <_close_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d06      	ldr	r5, [pc, #24]	; (800addc <_close_r+0x1c>)
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	602b      	str	r3, [r5, #0]
 800adcc:	f7f8 f8fd 	bl	8002fca <_close>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d102      	bne.n	800adda <_close_r+0x1a>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b103      	cbz	r3, 800adda <_close_r+0x1a>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	bd38      	pop	{r3, r4, r5, pc}
 800addc:	200007f4 	.word	0x200007f4

0800ade0 <_lseek_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	4d07      	ldr	r5, [pc, #28]	; (800ae00 <_lseek_r+0x20>)
 800ade4:	4604      	mov	r4, r0
 800ade6:	4608      	mov	r0, r1
 800ade8:	4611      	mov	r1, r2
 800adea:	2200      	movs	r2, #0
 800adec:	602a      	str	r2, [r5, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	f7f8 f912 	bl	8003018 <_lseek>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	d102      	bne.n	800adfe <_lseek_r+0x1e>
 800adf8:	682b      	ldr	r3, [r5, #0]
 800adfa:	b103      	cbz	r3, 800adfe <_lseek_r+0x1e>
 800adfc:	6023      	str	r3, [r4, #0]
 800adfe:	bd38      	pop	{r3, r4, r5, pc}
 800ae00:	200007f4 	.word	0x200007f4

0800ae04 <_read_r>:
 800ae04:	b538      	push	{r3, r4, r5, lr}
 800ae06:	4d07      	ldr	r5, [pc, #28]	; (800ae24 <_read_r+0x20>)
 800ae08:	4604      	mov	r4, r0
 800ae0a:	4608      	mov	r0, r1
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	2200      	movs	r2, #0
 800ae10:	602a      	str	r2, [r5, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	f7f8 f8a0 	bl	8002f58 <_read>
 800ae18:	1c43      	adds	r3, r0, #1
 800ae1a:	d102      	bne.n	800ae22 <_read_r+0x1e>
 800ae1c:	682b      	ldr	r3, [r5, #0]
 800ae1e:	b103      	cbz	r3, 800ae22 <_read_r+0x1e>
 800ae20:	6023      	str	r3, [r4, #0]
 800ae22:	bd38      	pop	{r3, r4, r5, pc}
 800ae24:	200007f4 	.word	0x200007f4

0800ae28 <_write_r>:
 800ae28:	b538      	push	{r3, r4, r5, lr}
 800ae2a:	4d07      	ldr	r5, [pc, #28]	; (800ae48 <_write_r+0x20>)
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	4608      	mov	r0, r1
 800ae30:	4611      	mov	r1, r2
 800ae32:	2200      	movs	r2, #0
 800ae34:	602a      	str	r2, [r5, #0]
 800ae36:	461a      	mov	r2, r3
 800ae38:	f7f8 f8ab 	bl	8002f92 <_write>
 800ae3c:	1c43      	adds	r3, r0, #1
 800ae3e:	d102      	bne.n	800ae46 <_write_r+0x1e>
 800ae40:	682b      	ldr	r3, [r5, #0]
 800ae42:	b103      	cbz	r3, 800ae46 <_write_r+0x1e>
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	200007f4 	.word	0x200007f4

0800ae4c <__errno>:
 800ae4c:	4b01      	ldr	r3, [pc, #4]	; (800ae54 <__errno+0x8>)
 800ae4e:	6818      	ldr	r0, [r3, #0]
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	200001e8 	.word	0x200001e8

0800ae58 <__libc_init_array>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	4d0d      	ldr	r5, [pc, #52]	; (800ae90 <__libc_init_array+0x38>)
 800ae5c:	4c0d      	ldr	r4, [pc, #52]	; (800ae94 <__libc_init_array+0x3c>)
 800ae5e:	1b64      	subs	r4, r4, r5
 800ae60:	10a4      	asrs	r4, r4, #2
 800ae62:	2600      	movs	r6, #0
 800ae64:	42a6      	cmp	r6, r4
 800ae66:	d109      	bne.n	800ae7c <__libc_init_array+0x24>
 800ae68:	4d0b      	ldr	r5, [pc, #44]	; (800ae98 <__libc_init_array+0x40>)
 800ae6a:	4c0c      	ldr	r4, [pc, #48]	; (800ae9c <__libc_init_array+0x44>)
 800ae6c:	f003 ff30 	bl	800ecd0 <_init>
 800ae70:	1b64      	subs	r4, r4, r5
 800ae72:	10a4      	asrs	r4, r4, #2
 800ae74:	2600      	movs	r6, #0
 800ae76:	42a6      	cmp	r6, r4
 800ae78:	d105      	bne.n	800ae86 <__libc_init_array+0x2e>
 800ae7a:	bd70      	pop	{r4, r5, r6, pc}
 800ae7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae80:	4798      	blx	r3
 800ae82:	3601      	adds	r6, #1
 800ae84:	e7ee      	b.n	800ae64 <__libc_init_array+0xc>
 800ae86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae8a:	4798      	blx	r3
 800ae8c:	3601      	adds	r6, #1
 800ae8e:	e7f2      	b.n	800ae76 <__libc_init_array+0x1e>
 800ae90:	0800f470 	.word	0x0800f470
 800ae94:	0800f470 	.word	0x0800f470
 800ae98:	0800f470 	.word	0x0800f470
 800ae9c:	0800f474 	.word	0x0800f474

0800aea0 <__retarget_lock_init_recursive>:
 800aea0:	4770      	bx	lr

0800aea2 <__retarget_lock_acquire_recursive>:
 800aea2:	4770      	bx	lr

0800aea4 <__retarget_lock_release_recursive>:
 800aea4:	4770      	bx	lr

0800aea6 <memcpy>:
 800aea6:	440a      	add	r2, r1
 800aea8:	4291      	cmp	r1, r2
 800aeaa:	f100 33ff 	add.w	r3, r0, #4294967295
 800aeae:	d100      	bne.n	800aeb2 <memcpy+0xc>
 800aeb0:	4770      	bx	lr
 800aeb2:	b510      	push	{r4, lr}
 800aeb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aeb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aebc:	4291      	cmp	r1, r2
 800aebe:	d1f9      	bne.n	800aeb4 <memcpy+0xe>
 800aec0:	bd10      	pop	{r4, pc}
 800aec2:	0000      	movs	r0, r0
 800aec4:	0000      	movs	r0, r0
	...

0800aec8 <nan>:
 800aec8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aed0 <nan+0x8>
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	00000000 	.word	0x00000000
 800aed4:	7ff80000 	.word	0x7ff80000

0800aed8 <nanf>:
 800aed8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800aee0 <nanf+0x8>
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	7fc00000 	.word	0x7fc00000

0800aee4 <quorem>:
 800aee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	6903      	ldr	r3, [r0, #16]
 800aeea:	690c      	ldr	r4, [r1, #16]
 800aeec:	42a3      	cmp	r3, r4
 800aeee:	4607      	mov	r7, r0
 800aef0:	db7e      	blt.n	800aff0 <quorem+0x10c>
 800aef2:	3c01      	subs	r4, #1
 800aef4:	f101 0814 	add.w	r8, r1, #20
 800aef8:	f100 0514 	add.w	r5, r0, #20
 800aefc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af00:	9301      	str	r3, [sp, #4]
 800af02:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af0a:	3301      	adds	r3, #1
 800af0c:	429a      	cmp	r2, r3
 800af0e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af16:	fbb2 f6f3 	udiv	r6, r2, r3
 800af1a:	d331      	bcc.n	800af80 <quorem+0x9c>
 800af1c:	f04f 0e00 	mov.w	lr, #0
 800af20:	4640      	mov	r0, r8
 800af22:	46ac      	mov	ip, r5
 800af24:	46f2      	mov	sl, lr
 800af26:	f850 2b04 	ldr.w	r2, [r0], #4
 800af2a:	b293      	uxth	r3, r2
 800af2c:	fb06 e303 	mla	r3, r6, r3, lr
 800af30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af34:	0c1a      	lsrs	r2, r3, #16
 800af36:	b29b      	uxth	r3, r3
 800af38:	ebaa 0303 	sub.w	r3, sl, r3
 800af3c:	f8dc a000 	ldr.w	sl, [ip]
 800af40:	fa13 f38a 	uxtah	r3, r3, sl
 800af44:	fb06 220e 	mla	r2, r6, lr, r2
 800af48:	9300      	str	r3, [sp, #0]
 800af4a:	9b00      	ldr	r3, [sp, #0]
 800af4c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af50:	b292      	uxth	r2, r2
 800af52:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af5a:	f8bd 3000 	ldrh.w	r3, [sp]
 800af5e:	4581      	cmp	r9, r0
 800af60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af64:	f84c 3b04 	str.w	r3, [ip], #4
 800af68:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af6c:	d2db      	bcs.n	800af26 <quorem+0x42>
 800af6e:	f855 300b 	ldr.w	r3, [r5, fp]
 800af72:	b92b      	cbnz	r3, 800af80 <quorem+0x9c>
 800af74:	9b01      	ldr	r3, [sp, #4]
 800af76:	3b04      	subs	r3, #4
 800af78:	429d      	cmp	r5, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	d32c      	bcc.n	800afd8 <quorem+0xf4>
 800af7e:	613c      	str	r4, [r7, #16]
 800af80:	4638      	mov	r0, r7
 800af82:	f001 fd5b 	bl	800ca3c <__mcmp>
 800af86:	2800      	cmp	r0, #0
 800af88:	db22      	blt.n	800afd0 <quorem+0xec>
 800af8a:	3601      	adds	r6, #1
 800af8c:	4629      	mov	r1, r5
 800af8e:	2000      	movs	r0, #0
 800af90:	f858 2b04 	ldr.w	r2, [r8], #4
 800af94:	f8d1 c000 	ldr.w	ip, [r1]
 800af98:	b293      	uxth	r3, r2
 800af9a:	1ac3      	subs	r3, r0, r3
 800af9c:	0c12      	lsrs	r2, r2, #16
 800af9e:	fa13 f38c 	uxtah	r3, r3, ip
 800afa2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800afa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afaa:	b29b      	uxth	r3, r3
 800afac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afb0:	45c1      	cmp	r9, r8
 800afb2:	f841 3b04 	str.w	r3, [r1], #4
 800afb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800afba:	d2e9      	bcs.n	800af90 <quorem+0xac>
 800afbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afc4:	b922      	cbnz	r2, 800afd0 <quorem+0xec>
 800afc6:	3b04      	subs	r3, #4
 800afc8:	429d      	cmp	r5, r3
 800afca:	461a      	mov	r2, r3
 800afcc:	d30a      	bcc.n	800afe4 <quorem+0x100>
 800afce:	613c      	str	r4, [r7, #16]
 800afd0:	4630      	mov	r0, r6
 800afd2:	b003      	add	sp, #12
 800afd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd8:	6812      	ldr	r2, [r2, #0]
 800afda:	3b04      	subs	r3, #4
 800afdc:	2a00      	cmp	r2, #0
 800afde:	d1ce      	bne.n	800af7e <quorem+0x9a>
 800afe0:	3c01      	subs	r4, #1
 800afe2:	e7c9      	b.n	800af78 <quorem+0x94>
 800afe4:	6812      	ldr	r2, [r2, #0]
 800afe6:	3b04      	subs	r3, #4
 800afe8:	2a00      	cmp	r2, #0
 800afea:	d1f0      	bne.n	800afce <quorem+0xea>
 800afec:	3c01      	subs	r4, #1
 800afee:	e7eb      	b.n	800afc8 <quorem+0xe4>
 800aff0:	2000      	movs	r0, #0
 800aff2:	e7ee      	b.n	800afd2 <quorem+0xee>
 800aff4:	0000      	movs	r0, r0
	...

0800aff8 <_dtoa_r>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	ed2d 8b04 	vpush	{d8-d9}
 800b000:	69c5      	ldr	r5, [r0, #28]
 800b002:	b093      	sub	sp, #76	; 0x4c
 800b004:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b008:	ec57 6b10 	vmov	r6, r7, d0
 800b00c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b010:	9107      	str	r1, [sp, #28]
 800b012:	4604      	mov	r4, r0
 800b014:	920a      	str	r2, [sp, #40]	; 0x28
 800b016:	930d      	str	r3, [sp, #52]	; 0x34
 800b018:	b975      	cbnz	r5, 800b038 <_dtoa_r+0x40>
 800b01a:	2010      	movs	r0, #16
 800b01c:	f001 f982 	bl	800c324 <malloc>
 800b020:	4602      	mov	r2, r0
 800b022:	61e0      	str	r0, [r4, #28]
 800b024:	b920      	cbnz	r0, 800b030 <_dtoa_r+0x38>
 800b026:	4bae      	ldr	r3, [pc, #696]	; (800b2e0 <_dtoa_r+0x2e8>)
 800b028:	21ef      	movs	r1, #239	; 0xef
 800b02a:	48ae      	ldr	r0, [pc, #696]	; (800b2e4 <_dtoa_r+0x2ec>)
 800b02c:	f002 fbbe 	bl	800d7ac <__assert_func>
 800b030:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b034:	6005      	str	r5, [r0, #0]
 800b036:	60c5      	str	r5, [r0, #12]
 800b038:	69e3      	ldr	r3, [r4, #28]
 800b03a:	6819      	ldr	r1, [r3, #0]
 800b03c:	b151      	cbz	r1, 800b054 <_dtoa_r+0x5c>
 800b03e:	685a      	ldr	r2, [r3, #4]
 800b040:	604a      	str	r2, [r1, #4]
 800b042:	2301      	movs	r3, #1
 800b044:	4093      	lsls	r3, r2
 800b046:	608b      	str	r3, [r1, #8]
 800b048:	4620      	mov	r0, r4
 800b04a:	f001 fa71 	bl	800c530 <_Bfree>
 800b04e:	69e3      	ldr	r3, [r4, #28]
 800b050:	2200      	movs	r2, #0
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	1e3b      	subs	r3, r7, #0
 800b056:	bfbb      	ittet	lt
 800b058:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b05c:	9303      	strlt	r3, [sp, #12]
 800b05e:	2300      	movge	r3, #0
 800b060:	2201      	movlt	r2, #1
 800b062:	bfac      	ite	ge
 800b064:	f8c8 3000 	strge.w	r3, [r8]
 800b068:	f8c8 2000 	strlt.w	r2, [r8]
 800b06c:	4b9e      	ldr	r3, [pc, #632]	; (800b2e8 <_dtoa_r+0x2f0>)
 800b06e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b072:	ea33 0308 	bics.w	r3, r3, r8
 800b076:	d11b      	bne.n	800b0b0 <_dtoa_r+0xb8>
 800b078:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b07a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b07e:	6013      	str	r3, [r2, #0]
 800b080:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b084:	4333      	orrs	r3, r6
 800b086:	f000 8593 	beq.w	800bbb0 <_dtoa_r+0xbb8>
 800b08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b08c:	b963      	cbnz	r3, 800b0a8 <_dtoa_r+0xb0>
 800b08e:	4b97      	ldr	r3, [pc, #604]	; (800b2ec <_dtoa_r+0x2f4>)
 800b090:	e027      	b.n	800b0e2 <_dtoa_r+0xea>
 800b092:	4b97      	ldr	r3, [pc, #604]	; (800b2f0 <_dtoa_r+0x2f8>)
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	3308      	adds	r3, #8
 800b098:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	9800      	ldr	r0, [sp, #0]
 800b09e:	b013      	add	sp, #76	; 0x4c
 800b0a0:	ecbd 8b04 	vpop	{d8-d9}
 800b0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a8:	4b90      	ldr	r3, [pc, #576]	; (800b2ec <_dtoa_r+0x2f4>)
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	3303      	adds	r3, #3
 800b0ae:	e7f3      	b.n	800b098 <_dtoa_r+0xa0>
 800b0b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	ec51 0b17 	vmov	r0, r1, d7
 800b0ba:	eeb0 8a47 	vmov.f32	s16, s14
 800b0be:	eef0 8a67 	vmov.f32	s17, s15
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f7f5 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0c8:	4681      	mov	r9, r0
 800b0ca:	b160      	cbz	r0, 800b0e6 <_dtoa_r+0xee>
 800b0cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	6013      	str	r3, [r2, #0]
 800b0d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 8568 	beq.w	800bbaa <_dtoa_r+0xbb2>
 800b0da:	4b86      	ldr	r3, [pc, #536]	; (800b2f4 <_dtoa_r+0x2fc>)
 800b0dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	e7da      	b.n	800b09c <_dtoa_r+0xa4>
 800b0e6:	aa10      	add	r2, sp, #64	; 0x40
 800b0e8:	a911      	add	r1, sp, #68	; 0x44
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	eeb0 0a48 	vmov.f32	s0, s16
 800b0f0:	eef0 0a68 	vmov.f32	s1, s17
 800b0f4:	f001 fdb8 	bl	800cc68 <__d2b>
 800b0f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	2d00      	cmp	r5, #0
 800b100:	d07f      	beq.n	800b202 <_dtoa_r+0x20a>
 800b102:	ee18 3a90 	vmov	r3, s17
 800b106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b10a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b10e:	ec51 0b18 	vmov	r0, r1, d8
 800b112:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b116:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b11a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b11e:	4619      	mov	r1, r3
 800b120:	2200      	movs	r2, #0
 800b122:	4b75      	ldr	r3, [pc, #468]	; (800b2f8 <_dtoa_r+0x300>)
 800b124:	f7f5 f8b0 	bl	8000288 <__aeabi_dsub>
 800b128:	a367      	add	r3, pc, #412	; (adr r3, 800b2c8 <_dtoa_r+0x2d0>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	f7f5 fa63 	bl	80005f8 <__aeabi_dmul>
 800b132:	a367      	add	r3, pc, #412	; (adr r3, 800b2d0 <_dtoa_r+0x2d8>)
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	f7f5 f8a8 	bl	800028c <__adddf3>
 800b13c:	4606      	mov	r6, r0
 800b13e:	4628      	mov	r0, r5
 800b140:	460f      	mov	r7, r1
 800b142:	f7f5 f9ef 	bl	8000524 <__aeabi_i2d>
 800b146:	a364      	add	r3, pc, #400	; (adr r3, 800b2d8 <_dtoa_r+0x2e0>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	f7f5 fa54 	bl	80005f8 <__aeabi_dmul>
 800b150:	4602      	mov	r2, r0
 800b152:	460b      	mov	r3, r1
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 f898 	bl	800028c <__adddf3>
 800b15c:	4606      	mov	r6, r0
 800b15e:	460f      	mov	r7, r1
 800b160:	f7f5 fcfa 	bl	8000b58 <__aeabi_d2iz>
 800b164:	2200      	movs	r2, #0
 800b166:	4683      	mov	fp, r0
 800b168:	2300      	movs	r3, #0
 800b16a:	4630      	mov	r0, r6
 800b16c:	4639      	mov	r1, r7
 800b16e:	f7f5 fcb5 	bl	8000adc <__aeabi_dcmplt>
 800b172:	b148      	cbz	r0, 800b188 <_dtoa_r+0x190>
 800b174:	4658      	mov	r0, fp
 800b176:	f7f5 f9d5 	bl	8000524 <__aeabi_i2d>
 800b17a:	4632      	mov	r2, r6
 800b17c:	463b      	mov	r3, r7
 800b17e:	f7f5 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b182:	b908      	cbnz	r0, 800b188 <_dtoa_r+0x190>
 800b184:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b188:	f1bb 0f16 	cmp.w	fp, #22
 800b18c:	d857      	bhi.n	800b23e <_dtoa_r+0x246>
 800b18e:	4b5b      	ldr	r3, [pc, #364]	; (800b2fc <_dtoa_r+0x304>)
 800b190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	ec51 0b18 	vmov	r0, r1, d8
 800b19c:	f7f5 fc9e 	bl	8000adc <__aeabi_dcmplt>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d04e      	beq.n	800b242 <_dtoa_r+0x24a>
 800b1a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	930c      	str	r3, [sp, #48]	; 0x30
 800b1ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1ae:	1b5b      	subs	r3, r3, r5
 800b1b0:	1e5a      	subs	r2, r3, #1
 800b1b2:	bf45      	ittet	mi
 800b1b4:	f1c3 0301 	rsbmi	r3, r3, #1
 800b1b8:	9305      	strmi	r3, [sp, #20]
 800b1ba:	2300      	movpl	r3, #0
 800b1bc:	2300      	movmi	r3, #0
 800b1be:	9206      	str	r2, [sp, #24]
 800b1c0:	bf54      	ite	pl
 800b1c2:	9305      	strpl	r3, [sp, #20]
 800b1c4:	9306      	strmi	r3, [sp, #24]
 800b1c6:	f1bb 0f00 	cmp.w	fp, #0
 800b1ca:	db3c      	blt.n	800b246 <_dtoa_r+0x24e>
 800b1cc:	9b06      	ldr	r3, [sp, #24]
 800b1ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b1d2:	445b      	add	r3, fp
 800b1d4:	9306      	str	r3, [sp, #24]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9308      	str	r3, [sp, #32]
 800b1da:	9b07      	ldr	r3, [sp, #28]
 800b1dc:	2b09      	cmp	r3, #9
 800b1de:	d868      	bhi.n	800b2b2 <_dtoa_r+0x2ba>
 800b1e0:	2b05      	cmp	r3, #5
 800b1e2:	bfc4      	itt	gt
 800b1e4:	3b04      	subgt	r3, #4
 800b1e6:	9307      	strgt	r3, [sp, #28]
 800b1e8:	9b07      	ldr	r3, [sp, #28]
 800b1ea:	f1a3 0302 	sub.w	r3, r3, #2
 800b1ee:	bfcc      	ite	gt
 800b1f0:	2500      	movgt	r5, #0
 800b1f2:	2501      	movle	r5, #1
 800b1f4:	2b03      	cmp	r3, #3
 800b1f6:	f200 8085 	bhi.w	800b304 <_dtoa_r+0x30c>
 800b1fa:	e8df f003 	tbb	[pc, r3]
 800b1fe:	3b2e      	.short	0x3b2e
 800b200:	5839      	.short	0x5839
 800b202:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b206:	441d      	add	r5, r3
 800b208:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b20c:	2b20      	cmp	r3, #32
 800b20e:	bfc1      	itttt	gt
 800b210:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b214:	fa08 f803 	lslgt.w	r8, r8, r3
 800b218:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b21c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b220:	bfd6      	itet	le
 800b222:	f1c3 0320 	rsble	r3, r3, #32
 800b226:	ea48 0003 	orrgt.w	r0, r8, r3
 800b22a:	fa06 f003 	lslle.w	r0, r6, r3
 800b22e:	f7f5 f969 	bl	8000504 <__aeabi_ui2d>
 800b232:	2201      	movs	r2, #1
 800b234:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b238:	3d01      	subs	r5, #1
 800b23a:	920e      	str	r2, [sp, #56]	; 0x38
 800b23c:	e76f      	b.n	800b11e <_dtoa_r+0x126>
 800b23e:	2301      	movs	r3, #1
 800b240:	e7b3      	b.n	800b1aa <_dtoa_r+0x1b2>
 800b242:	900c      	str	r0, [sp, #48]	; 0x30
 800b244:	e7b2      	b.n	800b1ac <_dtoa_r+0x1b4>
 800b246:	9b05      	ldr	r3, [sp, #20]
 800b248:	eba3 030b 	sub.w	r3, r3, fp
 800b24c:	9305      	str	r3, [sp, #20]
 800b24e:	f1cb 0300 	rsb	r3, fp, #0
 800b252:	9308      	str	r3, [sp, #32]
 800b254:	2300      	movs	r3, #0
 800b256:	930b      	str	r3, [sp, #44]	; 0x2c
 800b258:	e7bf      	b.n	800b1da <_dtoa_r+0x1e2>
 800b25a:	2300      	movs	r3, #0
 800b25c:	9309      	str	r3, [sp, #36]	; 0x24
 800b25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc52      	bgt.n	800b30a <_dtoa_r+0x312>
 800b264:	2301      	movs	r3, #1
 800b266:	9301      	str	r3, [sp, #4]
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	461a      	mov	r2, r3
 800b26c:	920a      	str	r2, [sp, #40]	; 0x28
 800b26e:	e00b      	b.n	800b288 <_dtoa_r+0x290>
 800b270:	2301      	movs	r3, #1
 800b272:	e7f3      	b.n	800b25c <_dtoa_r+0x264>
 800b274:	2300      	movs	r3, #0
 800b276:	9309      	str	r3, [sp, #36]	; 0x24
 800b278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b27a:	445b      	add	r3, fp
 800b27c:	9301      	str	r3, [sp, #4]
 800b27e:	3301      	adds	r3, #1
 800b280:	2b01      	cmp	r3, #1
 800b282:	9304      	str	r3, [sp, #16]
 800b284:	bfb8      	it	lt
 800b286:	2301      	movlt	r3, #1
 800b288:	69e0      	ldr	r0, [r4, #28]
 800b28a:	2100      	movs	r1, #0
 800b28c:	2204      	movs	r2, #4
 800b28e:	f102 0614 	add.w	r6, r2, #20
 800b292:	429e      	cmp	r6, r3
 800b294:	d93d      	bls.n	800b312 <_dtoa_r+0x31a>
 800b296:	6041      	str	r1, [r0, #4]
 800b298:	4620      	mov	r0, r4
 800b29a:	f001 f909 	bl	800c4b0 <_Balloc>
 800b29e:	9000      	str	r0, [sp, #0]
 800b2a0:	2800      	cmp	r0, #0
 800b2a2:	d139      	bne.n	800b318 <_dtoa_r+0x320>
 800b2a4:	4b16      	ldr	r3, [pc, #88]	; (800b300 <_dtoa_r+0x308>)
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	f240 11af 	movw	r1, #431	; 0x1af
 800b2ac:	e6bd      	b.n	800b02a <_dtoa_r+0x32>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e7e1      	b.n	800b276 <_dtoa_r+0x27e>
 800b2b2:	2501      	movs	r5, #1
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	9307      	str	r3, [sp, #28]
 800b2b8:	9509      	str	r5, [sp, #36]	; 0x24
 800b2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b2be:	9301      	str	r3, [sp, #4]
 800b2c0:	9304      	str	r3, [sp, #16]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	2312      	movs	r3, #18
 800b2c6:	e7d1      	b.n	800b26c <_dtoa_r+0x274>
 800b2c8:	636f4361 	.word	0x636f4361
 800b2cc:	3fd287a7 	.word	0x3fd287a7
 800b2d0:	8b60c8b3 	.word	0x8b60c8b3
 800b2d4:	3fc68a28 	.word	0x3fc68a28
 800b2d8:	509f79fb 	.word	0x509f79fb
 800b2dc:	3fd34413 	.word	0x3fd34413
 800b2e0:	0800ef06 	.word	0x0800ef06
 800b2e4:	0800ef1d 	.word	0x0800ef1d
 800b2e8:	7ff00000 	.word	0x7ff00000
 800b2ec:	0800ef02 	.word	0x0800ef02
 800b2f0:	0800eef9 	.word	0x0800eef9
 800b2f4:	0800eec9 	.word	0x0800eec9
 800b2f8:	3ff80000 	.word	0x3ff80000
 800b2fc:	0800f068 	.word	0x0800f068
 800b300:	0800ef75 	.word	0x0800ef75
 800b304:	2301      	movs	r3, #1
 800b306:	9309      	str	r3, [sp, #36]	; 0x24
 800b308:	e7d7      	b.n	800b2ba <_dtoa_r+0x2c2>
 800b30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	9304      	str	r3, [sp, #16]
 800b310:	e7ba      	b.n	800b288 <_dtoa_r+0x290>
 800b312:	3101      	adds	r1, #1
 800b314:	0052      	lsls	r2, r2, #1
 800b316:	e7ba      	b.n	800b28e <_dtoa_r+0x296>
 800b318:	69e3      	ldr	r3, [r4, #28]
 800b31a:	9a00      	ldr	r2, [sp, #0]
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	9b04      	ldr	r3, [sp, #16]
 800b320:	2b0e      	cmp	r3, #14
 800b322:	f200 80a8 	bhi.w	800b476 <_dtoa_r+0x47e>
 800b326:	2d00      	cmp	r5, #0
 800b328:	f000 80a5 	beq.w	800b476 <_dtoa_r+0x47e>
 800b32c:	f1bb 0f00 	cmp.w	fp, #0
 800b330:	dd38      	ble.n	800b3a4 <_dtoa_r+0x3ac>
 800b332:	4bc0      	ldr	r3, [pc, #768]	; (800b634 <_dtoa_r+0x63c>)
 800b334:	f00b 020f 	and.w	r2, fp, #15
 800b338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b33c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b340:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b344:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b348:	d019      	beq.n	800b37e <_dtoa_r+0x386>
 800b34a:	4bbb      	ldr	r3, [pc, #748]	; (800b638 <_dtoa_r+0x640>)
 800b34c:	ec51 0b18 	vmov	r0, r1, d8
 800b350:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b354:	f7f5 fa7a 	bl	800084c <__aeabi_ddiv>
 800b358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b35c:	f008 080f 	and.w	r8, r8, #15
 800b360:	2503      	movs	r5, #3
 800b362:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b638 <_dtoa_r+0x640>
 800b366:	f1b8 0f00 	cmp.w	r8, #0
 800b36a:	d10a      	bne.n	800b382 <_dtoa_r+0x38a>
 800b36c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b370:	4632      	mov	r2, r6
 800b372:	463b      	mov	r3, r7
 800b374:	f7f5 fa6a 	bl	800084c <__aeabi_ddiv>
 800b378:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b37c:	e02b      	b.n	800b3d6 <_dtoa_r+0x3de>
 800b37e:	2502      	movs	r5, #2
 800b380:	e7ef      	b.n	800b362 <_dtoa_r+0x36a>
 800b382:	f018 0f01 	tst.w	r8, #1
 800b386:	d008      	beq.n	800b39a <_dtoa_r+0x3a2>
 800b388:	4630      	mov	r0, r6
 800b38a:	4639      	mov	r1, r7
 800b38c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b390:	f7f5 f932 	bl	80005f8 <__aeabi_dmul>
 800b394:	3501      	adds	r5, #1
 800b396:	4606      	mov	r6, r0
 800b398:	460f      	mov	r7, r1
 800b39a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b39e:	f109 0908 	add.w	r9, r9, #8
 800b3a2:	e7e0      	b.n	800b366 <_dtoa_r+0x36e>
 800b3a4:	f000 809f 	beq.w	800b4e6 <_dtoa_r+0x4ee>
 800b3a8:	f1cb 0600 	rsb	r6, fp, #0
 800b3ac:	4ba1      	ldr	r3, [pc, #644]	; (800b634 <_dtoa_r+0x63c>)
 800b3ae:	4fa2      	ldr	r7, [pc, #648]	; (800b638 <_dtoa_r+0x640>)
 800b3b0:	f006 020f 	and.w	r2, r6, #15
 800b3b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	ec51 0b18 	vmov	r0, r1, d8
 800b3c0:	f7f5 f91a 	bl	80005f8 <__aeabi_dmul>
 800b3c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3c8:	1136      	asrs	r6, r6, #4
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	2502      	movs	r5, #2
 800b3ce:	2e00      	cmp	r6, #0
 800b3d0:	d17e      	bne.n	800b4d0 <_dtoa_r+0x4d8>
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1d0      	bne.n	800b378 <_dtoa_r+0x380>
 800b3d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 8084 	beq.w	800b4ea <_dtoa_r+0x4f2>
 800b3e2:	4b96      	ldr	r3, [pc, #600]	; (800b63c <_dtoa_r+0x644>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	4640      	mov	r0, r8
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	f7f5 fb77 	bl	8000adc <__aeabi_dcmplt>
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d07b      	beq.n	800b4ea <_dtoa_r+0x4f2>
 800b3f2:	9b04      	ldr	r3, [sp, #16]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d078      	beq.n	800b4ea <_dtoa_r+0x4f2>
 800b3f8:	9b01      	ldr	r3, [sp, #4]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	dd39      	ble.n	800b472 <_dtoa_r+0x47a>
 800b3fe:	4b90      	ldr	r3, [pc, #576]	; (800b640 <_dtoa_r+0x648>)
 800b400:	2200      	movs	r2, #0
 800b402:	4640      	mov	r0, r8
 800b404:	4649      	mov	r1, r9
 800b406:	f7f5 f8f7 	bl	80005f8 <__aeabi_dmul>
 800b40a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b40e:	9e01      	ldr	r6, [sp, #4]
 800b410:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b414:	3501      	adds	r5, #1
 800b416:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b41a:	4628      	mov	r0, r5
 800b41c:	f7f5 f882 	bl	8000524 <__aeabi_i2d>
 800b420:	4642      	mov	r2, r8
 800b422:	464b      	mov	r3, r9
 800b424:	f7f5 f8e8 	bl	80005f8 <__aeabi_dmul>
 800b428:	4b86      	ldr	r3, [pc, #536]	; (800b644 <_dtoa_r+0x64c>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	f7f4 ff2e 	bl	800028c <__adddf3>
 800b430:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b438:	9303      	str	r3, [sp, #12]
 800b43a:	2e00      	cmp	r6, #0
 800b43c:	d158      	bne.n	800b4f0 <_dtoa_r+0x4f8>
 800b43e:	4b82      	ldr	r3, [pc, #520]	; (800b648 <_dtoa_r+0x650>)
 800b440:	2200      	movs	r2, #0
 800b442:	4640      	mov	r0, r8
 800b444:	4649      	mov	r1, r9
 800b446:	f7f4 ff1f 	bl	8000288 <__aeabi_dsub>
 800b44a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b44e:	4680      	mov	r8, r0
 800b450:	4689      	mov	r9, r1
 800b452:	f7f5 fb61 	bl	8000b18 <__aeabi_dcmpgt>
 800b456:	2800      	cmp	r0, #0
 800b458:	f040 8296 	bne.w	800b988 <_dtoa_r+0x990>
 800b45c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b460:	4640      	mov	r0, r8
 800b462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b466:	4649      	mov	r1, r9
 800b468:	f7f5 fb38 	bl	8000adc <__aeabi_dcmplt>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f040 8289 	bne.w	800b984 <_dtoa_r+0x98c>
 800b472:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f2c0 814e 	blt.w	800b71a <_dtoa_r+0x722>
 800b47e:	f1bb 0f0e 	cmp.w	fp, #14
 800b482:	f300 814a 	bgt.w	800b71a <_dtoa_r+0x722>
 800b486:	4b6b      	ldr	r3, [pc, #428]	; (800b634 <_dtoa_r+0x63c>)
 800b488:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b48c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b492:	2b00      	cmp	r3, #0
 800b494:	f280 80dc 	bge.w	800b650 <_dtoa_r+0x658>
 800b498:	9b04      	ldr	r3, [sp, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f300 80d8 	bgt.w	800b650 <_dtoa_r+0x658>
 800b4a0:	f040 826f 	bne.w	800b982 <_dtoa_r+0x98a>
 800b4a4:	4b68      	ldr	r3, [pc, #416]	; (800b648 <_dtoa_r+0x650>)
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	4640      	mov	r0, r8
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	f7f5 f8a4 	bl	80005f8 <__aeabi_dmul>
 800b4b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4b4:	f7f5 fb26 	bl	8000b04 <__aeabi_dcmpge>
 800b4b8:	9e04      	ldr	r6, [sp, #16]
 800b4ba:	4637      	mov	r7, r6
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f040 8245 	bne.w	800b94c <_dtoa_r+0x954>
 800b4c2:	9d00      	ldr	r5, [sp, #0]
 800b4c4:	2331      	movs	r3, #49	; 0x31
 800b4c6:	f805 3b01 	strb.w	r3, [r5], #1
 800b4ca:	f10b 0b01 	add.w	fp, fp, #1
 800b4ce:	e241      	b.n	800b954 <_dtoa_r+0x95c>
 800b4d0:	07f2      	lsls	r2, r6, #31
 800b4d2:	d505      	bpl.n	800b4e0 <_dtoa_r+0x4e8>
 800b4d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4d8:	f7f5 f88e 	bl	80005f8 <__aeabi_dmul>
 800b4dc:	3501      	adds	r5, #1
 800b4de:	2301      	movs	r3, #1
 800b4e0:	1076      	asrs	r6, r6, #1
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	e773      	b.n	800b3ce <_dtoa_r+0x3d6>
 800b4e6:	2502      	movs	r5, #2
 800b4e8:	e775      	b.n	800b3d6 <_dtoa_r+0x3de>
 800b4ea:	9e04      	ldr	r6, [sp, #16]
 800b4ec:	465f      	mov	r7, fp
 800b4ee:	e792      	b.n	800b416 <_dtoa_r+0x41e>
 800b4f0:	9900      	ldr	r1, [sp, #0]
 800b4f2:	4b50      	ldr	r3, [pc, #320]	; (800b634 <_dtoa_r+0x63c>)
 800b4f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4f8:	4431      	add	r1, r6
 800b4fa:	9102      	str	r1, [sp, #8]
 800b4fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4fe:	eeb0 9a47 	vmov.f32	s18, s14
 800b502:	eef0 9a67 	vmov.f32	s19, s15
 800b506:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b50a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b50e:	2900      	cmp	r1, #0
 800b510:	d044      	beq.n	800b59c <_dtoa_r+0x5a4>
 800b512:	494e      	ldr	r1, [pc, #312]	; (800b64c <_dtoa_r+0x654>)
 800b514:	2000      	movs	r0, #0
 800b516:	f7f5 f999 	bl	800084c <__aeabi_ddiv>
 800b51a:	ec53 2b19 	vmov	r2, r3, d9
 800b51e:	f7f4 feb3 	bl	8000288 <__aeabi_dsub>
 800b522:	9d00      	ldr	r5, [sp, #0]
 800b524:	ec41 0b19 	vmov	d9, r0, r1
 800b528:	4649      	mov	r1, r9
 800b52a:	4640      	mov	r0, r8
 800b52c:	f7f5 fb14 	bl	8000b58 <__aeabi_d2iz>
 800b530:	4606      	mov	r6, r0
 800b532:	f7f4 fff7 	bl	8000524 <__aeabi_i2d>
 800b536:	4602      	mov	r2, r0
 800b538:	460b      	mov	r3, r1
 800b53a:	4640      	mov	r0, r8
 800b53c:	4649      	mov	r1, r9
 800b53e:	f7f4 fea3 	bl	8000288 <__aeabi_dsub>
 800b542:	3630      	adds	r6, #48	; 0x30
 800b544:	f805 6b01 	strb.w	r6, [r5], #1
 800b548:	ec53 2b19 	vmov	r2, r3, d9
 800b54c:	4680      	mov	r8, r0
 800b54e:	4689      	mov	r9, r1
 800b550:	f7f5 fac4 	bl	8000adc <__aeabi_dcmplt>
 800b554:	2800      	cmp	r0, #0
 800b556:	d164      	bne.n	800b622 <_dtoa_r+0x62a>
 800b558:	4642      	mov	r2, r8
 800b55a:	464b      	mov	r3, r9
 800b55c:	4937      	ldr	r1, [pc, #220]	; (800b63c <_dtoa_r+0x644>)
 800b55e:	2000      	movs	r0, #0
 800b560:	f7f4 fe92 	bl	8000288 <__aeabi_dsub>
 800b564:	ec53 2b19 	vmov	r2, r3, d9
 800b568:	f7f5 fab8 	bl	8000adc <__aeabi_dcmplt>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	f040 80b6 	bne.w	800b6de <_dtoa_r+0x6e6>
 800b572:	9b02      	ldr	r3, [sp, #8]
 800b574:	429d      	cmp	r5, r3
 800b576:	f43f af7c 	beq.w	800b472 <_dtoa_r+0x47a>
 800b57a:	4b31      	ldr	r3, [pc, #196]	; (800b640 <_dtoa_r+0x648>)
 800b57c:	ec51 0b19 	vmov	r0, r1, d9
 800b580:	2200      	movs	r2, #0
 800b582:	f7f5 f839 	bl	80005f8 <__aeabi_dmul>
 800b586:	4b2e      	ldr	r3, [pc, #184]	; (800b640 <_dtoa_r+0x648>)
 800b588:	ec41 0b19 	vmov	d9, r0, r1
 800b58c:	2200      	movs	r2, #0
 800b58e:	4640      	mov	r0, r8
 800b590:	4649      	mov	r1, r9
 800b592:	f7f5 f831 	bl	80005f8 <__aeabi_dmul>
 800b596:	4680      	mov	r8, r0
 800b598:	4689      	mov	r9, r1
 800b59a:	e7c5      	b.n	800b528 <_dtoa_r+0x530>
 800b59c:	ec51 0b17 	vmov	r0, r1, d7
 800b5a0:	f7f5 f82a 	bl	80005f8 <__aeabi_dmul>
 800b5a4:	9b02      	ldr	r3, [sp, #8]
 800b5a6:	9d00      	ldr	r5, [sp, #0]
 800b5a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5aa:	ec41 0b19 	vmov	d9, r0, r1
 800b5ae:	4649      	mov	r1, r9
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	f7f5 fad1 	bl	8000b58 <__aeabi_d2iz>
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	f7f4 ffb4 	bl	8000524 <__aeabi_i2d>
 800b5bc:	3630      	adds	r6, #48	; 0x30
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	4640      	mov	r0, r8
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	f7f4 fe5f 	bl	8000288 <__aeabi_dsub>
 800b5ca:	f805 6b01 	strb.w	r6, [r5], #1
 800b5ce:	9b02      	ldr	r3, [sp, #8]
 800b5d0:	429d      	cmp	r5, r3
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	4689      	mov	r9, r1
 800b5d6:	f04f 0200 	mov.w	r2, #0
 800b5da:	d124      	bne.n	800b626 <_dtoa_r+0x62e>
 800b5dc:	4b1b      	ldr	r3, [pc, #108]	; (800b64c <_dtoa_r+0x654>)
 800b5de:	ec51 0b19 	vmov	r0, r1, d9
 800b5e2:	f7f4 fe53 	bl	800028c <__adddf3>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	4640      	mov	r0, r8
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	f7f5 fa93 	bl	8000b18 <__aeabi_dcmpgt>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d173      	bne.n	800b6de <_dtoa_r+0x6e6>
 800b5f6:	ec53 2b19 	vmov	r2, r3, d9
 800b5fa:	4914      	ldr	r1, [pc, #80]	; (800b64c <_dtoa_r+0x654>)
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	f7f4 fe43 	bl	8000288 <__aeabi_dsub>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	4640      	mov	r0, r8
 800b608:	4649      	mov	r1, r9
 800b60a:	f7f5 fa67 	bl	8000adc <__aeabi_dcmplt>
 800b60e:	2800      	cmp	r0, #0
 800b610:	f43f af2f 	beq.w	800b472 <_dtoa_r+0x47a>
 800b614:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b616:	1e6b      	subs	r3, r5, #1
 800b618:	930f      	str	r3, [sp, #60]	; 0x3c
 800b61a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b61e:	2b30      	cmp	r3, #48	; 0x30
 800b620:	d0f8      	beq.n	800b614 <_dtoa_r+0x61c>
 800b622:	46bb      	mov	fp, r7
 800b624:	e04a      	b.n	800b6bc <_dtoa_r+0x6c4>
 800b626:	4b06      	ldr	r3, [pc, #24]	; (800b640 <_dtoa_r+0x648>)
 800b628:	f7f4 ffe6 	bl	80005f8 <__aeabi_dmul>
 800b62c:	4680      	mov	r8, r0
 800b62e:	4689      	mov	r9, r1
 800b630:	e7bd      	b.n	800b5ae <_dtoa_r+0x5b6>
 800b632:	bf00      	nop
 800b634:	0800f068 	.word	0x0800f068
 800b638:	0800f040 	.word	0x0800f040
 800b63c:	3ff00000 	.word	0x3ff00000
 800b640:	40240000 	.word	0x40240000
 800b644:	401c0000 	.word	0x401c0000
 800b648:	40140000 	.word	0x40140000
 800b64c:	3fe00000 	.word	0x3fe00000
 800b650:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b654:	9d00      	ldr	r5, [sp, #0]
 800b656:	4642      	mov	r2, r8
 800b658:	464b      	mov	r3, r9
 800b65a:	4630      	mov	r0, r6
 800b65c:	4639      	mov	r1, r7
 800b65e:	f7f5 f8f5 	bl	800084c <__aeabi_ddiv>
 800b662:	f7f5 fa79 	bl	8000b58 <__aeabi_d2iz>
 800b666:	9001      	str	r0, [sp, #4]
 800b668:	f7f4 ff5c 	bl	8000524 <__aeabi_i2d>
 800b66c:	4642      	mov	r2, r8
 800b66e:	464b      	mov	r3, r9
 800b670:	f7f4 ffc2 	bl	80005f8 <__aeabi_dmul>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4630      	mov	r0, r6
 800b67a:	4639      	mov	r1, r7
 800b67c:	f7f4 fe04 	bl	8000288 <__aeabi_dsub>
 800b680:	9e01      	ldr	r6, [sp, #4]
 800b682:	9f04      	ldr	r7, [sp, #16]
 800b684:	3630      	adds	r6, #48	; 0x30
 800b686:	f805 6b01 	strb.w	r6, [r5], #1
 800b68a:	9e00      	ldr	r6, [sp, #0]
 800b68c:	1bae      	subs	r6, r5, r6
 800b68e:	42b7      	cmp	r7, r6
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	d134      	bne.n	800b700 <_dtoa_r+0x708>
 800b696:	f7f4 fdf9 	bl	800028c <__adddf3>
 800b69a:	4642      	mov	r2, r8
 800b69c:	464b      	mov	r3, r9
 800b69e:	4606      	mov	r6, r0
 800b6a0:	460f      	mov	r7, r1
 800b6a2:	f7f5 fa39 	bl	8000b18 <__aeabi_dcmpgt>
 800b6a6:	b9c8      	cbnz	r0, 800b6dc <_dtoa_r+0x6e4>
 800b6a8:	4642      	mov	r2, r8
 800b6aa:	464b      	mov	r3, r9
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	f7f5 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6b4:	b110      	cbz	r0, 800b6bc <_dtoa_r+0x6c4>
 800b6b6:	9b01      	ldr	r3, [sp, #4]
 800b6b8:	07db      	lsls	r3, r3, #31
 800b6ba:	d40f      	bmi.n	800b6dc <_dtoa_r+0x6e4>
 800b6bc:	4651      	mov	r1, sl
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 ff36 	bl	800c530 <_Bfree>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6c8:	702b      	strb	r3, [r5, #0]
 800b6ca:	f10b 0301 	add.w	r3, fp, #1
 800b6ce:	6013      	str	r3, [r2, #0]
 800b6d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f43f ace2 	beq.w	800b09c <_dtoa_r+0xa4>
 800b6d8:	601d      	str	r5, [r3, #0]
 800b6da:	e4df      	b.n	800b09c <_dtoa_r+0xa4>
 800b6dc:	465f      	mov	r7, fp
 800b6de:	462b      	mov	r3, r5
 800b6e0:	461d      	mov	r5, r3
 800b6e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6e6:	2a39      	cmp	r2, #57	; 0x39
 800b6e8:	d106      	bne.n	800b6f8 <_dtoa_r+0x700>
 800b6ea:	9a00      	ldr	r2, [sp, #0]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d1f7      	bne.n	800b6e0 <_dtoa_r+0x6e8>
 800b6f0:	9900      	ldr	r1, [sp, #0]
 800b6f2:	2230      	movs	r2, #48	; 0x30
 800b6f4:	3701      	adds	r7, #1
 800b6f6:	700a      	strb	r2, [r1, #0]
 800b6f8:	781a      	ldrb	r2, [r3, #0]
 800b6fa:	3201      	adds	r2, #1
 800b6fc:	701a      	strb	r2, [r3, #0]
 800b6fe:	e790      	b.n	800b622 <_dtoa_r+0x62a>
 800b700:	4ba3      	ldr	r3, [pc, #652]	; (800b990 <_dtoa_r+0x998>)
 800b702:	2200      	movs	r2, #0
 800b704:	f7f4 ff78 	bl	80005f8 <__aeabi_dmul>
 800b708:	2200      	movs	r2, #0
 800b70a:	2300      	movs	r3, #0
 800b70c:	4606      	mov	r6, r0
 800b70e:	460f      	mov	r7, r1
 800b710:	f7f5 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 800b714:	2800      	cmp	r0, #0
 800b716:	d09e      	beq.n	800b656 <_dtoa_r+0x65e>
 800b718:	e7d0      	b.n	800b6bc <_dtoa_r+0x6c4>
 800b71a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b71c:	2a00      	cmp	r2, #0
 800b71e:	f000 80ca 	beq.w	800b8b6 <_dtoa_r+0x8be>
 800b722:	9a07      	ldr	r2, [sp, #28]
 800b724:	2a01      	cmp	r2, #1
 800b726:	f300 80ad 	bgt.w	800b884 <_dtoa_r+0x88c>
 800b72a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b72c:	2a00      	cmp	r2, #0
 800b72e:	f000 80a5 	beq.w	800b87c <_dtoa_r+0x884>
 800b732:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b736:	9e08      	ldr	r6, [sp, #32]
 800b738:	9d05      	ldr	r5, [sp, #20]
 800b73a:	9a05      	ldr	r2, [sp, #20]
 800b73c:	441a      	add	r2, r3
 800b73e:	9205      	str	r2, [sp, #20]
 800b740:	9a06      	ldr	r2, [sp, #24]
 800b742:	2101      	movs	r1, #1
 800b744:	441a      	add	r2, r3
 800b746:	4620      	mov	r0, r4
 800b748:	9206      	str	r2, [sp, #24]
 800b74a:	f000 fff1 	bl	800c730 <__i2b>
 800b74e:	4607      	mov	r7, r0
 800b750:	b165      	cbz	r5, 800b76c <_dtoa_r+0x774>
 800b752:	9b06      	ldr	r3, [sp, #24]
 800b754:	2b00      	cmp	r3, #0
 800b756:	dd09      	ble.n	800b76c <_dtoa_r+0x774>
 800b758:	42ab      	cmp	r3, r5
 800b75a:	9a05      	ldr	r2, [sp, #20]
 800b75c:	bfa8      	it	ge
 800b75e:	462b      	movge	r3, r5
 800b760:	1ad2      	subs	r2, r2, r3
 800b762:	9205      	str	r2, [sp, #20]
 800b764:	9a06      	ldr	r2, [sp, #24]
 800b766:	1aed      	subs	r5, r5, r3
 800b768:	1ad3      	subs	r3, r2, r3
 800b76a:	9306      	str	r3, [sp, #24]
 800b76c:	9b08      	ldr	r3, [sp, #32]
 800b76e:	b1f3      	cbz	r3, 800b7ae <_dtoa_r+0x7b6>
 800b770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 80a3 	beq.w	800b8be <_dtoa_r+0x8c6>
 800b778:	2e00      	cmp	r6, #0
 800b77a:	dd10      	ble.n	800b79e <_dtoa_r+0x7a6>
 800b77c:	4639      	mov	r1, r7
 800b77e:	4632      	mov	r2, r6
 800b780:	4620      	mov	r0, r4
 800b782:	f001 f895 	bl	800c8b0 <__pow5mult>
 800b786:	4652      	mov	r2, sl
 800b788:	4601      	mov	r1, r0
 800b78a:	4607      	mov	r7, r0
 800b78c:	4620      	mov	r0, r4
 800b78e:	f000 ffe5 	bl	800c75c <__multiply>
 800b792:	4651      	mov	r1, sl
 800b794:	4680      	mov	r8, r0
 800b796:	4620      	mov	r0, r4
 800b798:	f000 feca 	bl	800c530 <_Bfree>
 800b79c:	46c2      	mov	sl, r8
 800b79e:	9b08      	ldr	r3, [sp, #32]
 800b7a0:	1b9a      	subs	r2, r3, r6
 800b7a2:	d004      	beq.n	800b7ae <_dtoa_r+0x7b6>
 800b7a4:	4651      	mov	r1, sl
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f001 f882 	bl	800c8b0 <__pow5mult>
 800b7ac:	4682      	mov	sl, r0
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f000 ffbd 	bl	800c730 <__i2b>
 800b7b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	f340 8081 	ble.w	800b8c2 <_dtoa_r+0x8ca>
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	4601      	mov	r1, r0
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f001 f873 	bl	800c8b0 <__pow5mult>
 800b7ca:	9b07      	ldr	r3, [sp, #28]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	dd7a      	ble.n	800b8c8 <_dtoa_r+0x8d0>
 800b7d2:	f04f 0800 	mov.w	r8, #0
 800b7d6:	6933      	ldr	r3, [r6, #16]
 800b7d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7dc:	6918      	ldr	r0, [r3, #16]
 800b7de:	f000 ff59 	bl	800c694 <__hi0bits>
 800b7e2:	f1c0 0020 	rsb	r0, r0, #32
 800b7e6:	9b06      	ldr	r3, [sp, #24]
 800b7e8:	4418      	add	r0, r3
 800b7ea:	f010 001f 	ands.w	r0, r0, #31
 800b7ee:	f000 8094 	beq.w	800b91a <_dtoa_r+0x922>
 800b7f2:	f1c0 0320 	rsb	r3, r0, #32
 800b7f6:	2b04      	cmp	r3, #4
 800b7f8:	f340 8085 	ble.w	800b906 <_dtoa_r+0x90e>
 800b7fc:	9b05      	ldr	r3, [sp, #20]
 800b7fe:	f1c0 001c 	rsb	r0, r0, #28
 800b802:	4403      	add	r3, r0
 800b804:	9305      	str	r3, [sp, #20]
 800b806:	9b06      	ldr	r3, [sp, #24]
 800b808:	4403      	add	r3, r0
 800b80a:	4405      	add	r5, r0
 800b80c:	9306      	str	r3, [sp, #24]
 800b80e:	9b05      	ldr	r3, [sp, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	dd05      	ble.n	800b820 <_dtoa_r+0x828>
 800b814:	4651      	mov	r1, sl
 800b816:	461a      	mov	r2, r3
 800b818:	4620      	mov	r0, r4
 800b81a:	f001 f8a3 	bl	800c964 <__lshift>
 800b81e:	4682      	mov	sl, r0
 800b820:	9b06      	ldr	r3, [sp, #24]
 800b822:	2b00      	cmp	r3, #0
 800b824:	dd05      	ble.n	800b832 <_dtoa_r+0x83a>
 800b826:	4631      	mov	r1, r6
 800b828:	461a      	mov	r2, r3
 800b82a:	4620      	mov	r0, r4
 800b82c:	f001 f89a 	bl	800c964 <__lshift>
 800b830:	4606      	mov	r6, r0
 800b832:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b834:	2b00      	cmp	r3, #0
 800b836:	d072      	beq.n	800b91e <_dtoa_r+0x926>
 800b838:	4631      	mov	r1, r6
 800b83a:	4650      	mov	r0, sl
 800b83c:	f001 f8fe 	bl	800ca3c <__mcmp>
 800b840:	2800      	cmp	r0, #0
 800b842:	da6c      	bge.n	800b91e <_dtoa_r+0x926>
 800b844:	2300      	movs	r3, #0
 800b846:	4651      	mov	r1, sl
 800b848:	220a      	movs	r2, #10
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 fe92 	bl	800c574 <__multadd>
 800b850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b852:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b856:	4682      	mov	sl, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 81b0 	beq.w	800bbbe <_dtoa_r+0xbc6>
 800b85e:	2300      	movs	r3, #0
 800b860:	4639      	mov	r1, r7
 800b862:	220a      	movs	r2, #10
 800b864:	4620      	mov	r0, r4
 800b866:	f000 fe85 	bl	800c574 <__multadd>
 800b86a:	9b01      	ldr	r3, [sp, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	4607      	mov	r7, r0
 800b870:	f300 8096 	bgt.w	800b9a0 <_dtoa_r+0x9a8>
 800b874:	9b07      	ldr	r3, [sp, #28]
 800b876:	2b02      	cmp	r3, #2
 800b878:	dc59      	bgt.n	800b92e <_dtoa_r+0x936>
 800b87a:	e091      	b.n	800b9a0 <_dtoa_r+0x9a8>
 800b87c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b87e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b882:	e758      	b.n	800b736 <_dtoa_r+0x73e>
 800b884:	9b04      	ldr	r3, [sp, #16]
 800b886:	1e5e      	subs	r6, r3, #1
 800b888:	9b08      	ldr	r3, [sp, #32]
 800b88a:	42b3      	cmp	r3, r6
 800b88c:	bfbf      	itttt	lt
 800b88e:	9b08      	ldrlt	r3, [sp, #32]
 800b890:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b892:	9608      	strlt	r6, [sp, #32]
 800b894:	1af3      	sublt	r3, r6, r3
 800b896:	bfb4      	ite	lt
 800b898:	18d2      	addlt	r2, r2, r3
 800b89a:	1b9e      	subge	r6, r3, r6
 800b89c:	9b04      	ldr	r3, [sp, #16]
 800b89e:	bfbc      	itt	lt
 800b8a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b8a2:	2600      	movlt	r6, #0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	bfb7      	itett	lt
 800b8a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b8ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b8b0:	1a9d      	sublt	r5, r3, r2
 800b8b2:	2300      	movlt	r3, #0
 800b8b4:	e741      	b.n	800b73a <_dtoa_r+0x742>
 800b8b6:	9e08      	ldr	r6, [sp, #32]
 800b8b8:	9d05      	ldr	r5, [sp, #20]
 800b8ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b8bc:	e748      	b.n	800b750 <_dtoa_r+0x758>
 800b8be:	9a08      	ldr	r2, [sp, #32]
 800b8c0:	e770      	b.n	800b7a4 <_dtoa_r+0x7ac>
 800b8c2:	9b07      	ldr	r3, [sp, #28]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	dc19      	bgt.n	800b8fc <_dtoa_r+0x904>
 800b8c8:	9b02      	ldr	r3, [sp, #8]
 800b8ca:	b9bb      	cbnz	r3, 800b8fc <_dtoa_r+0x904>
 800b8cc:	9b03      	ldr	r3, [sp, #12]
 800b8ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8d2:	b99b      	cbnz	r3, 800b8fc <_dtoa_r+0x904>
 800b8d4:	9b03      	ldr	r3, [sp, #12]
 800b8d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8da:	0d1b      	lsrs	r3, r3, #20
 800b8dc:	051b      	lsls	r3, r3, #20
 800b8de:	b183      	cbz	r3, 800b902 <_dtoa_r+0x90a>
 800b8e0:	9b05      	ldr	r3, [sp, #20]
 800b8e2:	3301      	adds	r3, #1
 800b8e4:	9305      	str	r3, [sp, #20]
 800b8e6:	9b06      	ldr	r3, [sp, #24]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	9306      	str	r3, [sp, #24]
 800b8ec:	f04f 0801 	mov.w	r8, #1
 800b8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f47f af6f 	bne.w	800b7d6 <_dtoa_r+0x7de>
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	e774      	b.n	800b7e6 <_dtoa_r+0x7ee>
 800b8fc:	f04f 0800 	mov.w	r8, #0
 800b900:	e7f6      	b.n	800b8f0 <_dtoa_r+0x8f8>
 800b902:	4698      	mov	r8, r3
 800b904:	e7f4      	b.n	800b8f0 <_dtoa_r+0x8f8>
 800b906:	d082      	beq.n	800b80e <_dtoa_r+0x816>
 800b908:	9a05      	ldr	r2, [sp, #20]
 800b90a:	331c      	adds	r3, #28
 800b90c:	441a      	add	r2, r3
 800b90e:	9205      	str	r2, [sp, #20]
 800b910:	9a06      	ldr	r2, [sp, #24]
 800b912:	441a      	add	r2, r3
 800b914:	441d      	add	r5, r3
 800b916:	9206      	str	r2, [sp, #24]
 800b918:	e779      	b.n	800b80e <_dtoa_r+0x816>
 800b91a:	4603      	mov	r3, r0
 800b91c:	e7f4      	b.n	800b908 <_dtoa_r+0x910>
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	2b00      	cmp	r3, #0
 800b922:	dc37      	bgt.n	800b994 <_dtoa_r+0x99c>
 800b924:	9b07      	ldr	r3, [sp, #28]
 800b926:	2b02      	cmp	r3, #2
 800b928:	dd34      	ble.n	800b994 <_dtoa_r+0x99c>
 800b92a:	9b04      	ldr	r3, [sp, #16]
 800b92c:	9301      	str	r3, [sp, #4]
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	b963      	cbnz	r3, 800b94c <_dtoa_r+0x954>
 800b932:	4631      	mov	r1, r6
 800b934:	2205      	movs	r2, #5
 800b936:	4620      	mov	r0, r4
 800b938:	f000 fe1c 	bl	800c574 <__multadd>
 800b93c:	4601      	mov	r1, r0
 800b93e:	4606      	mov	r6, r0
 800b940:	4650      	mov	r0, sl
 800b942:	f001 f87b 	bl	800ca3c <__mcmp>
 800b946:	2800      	cmp	r0, #0
 800b948:	f73f adbb 	bgt.w	800b4c2 <_dtoa_r+0x4ca>
 800b94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94e:	9d00      	ldr	r5, [sp, #0]
 800b950:	ea6f 0b03 	mvn.w	fp, r3
 800b954:	f04f 0800 	mov.w	r8, #0
 800b958:	4631      	mov	r1, r6
 800b95a:	4620      	mov	r0, r4
 800b95c:	f000 fde8 	bl	800c530 <_Bfree>
 800b960:	2f00      	cmp	r7, #0
 800b962:	f43f aeab 	beq.w	800b6bc <_dtoa_r+0x6c4>
 800b966:	f1b8 0f00 	cmp.w	r8, #0
 800b96a:	d005      	beq.n	800b978 <_dtoa_r+0x980>
 800b96c:	45b8      	cmp	r8, r7
 800b96e:	d003      	beq.n	800b978 <_dtoa_r+0x980>
 800b970:	4641      	mov	r1, r8
 800b972:	4620      	mov	r0, r4
 800b974:	f000 fddc 	bl	800c530 <_Bfree>
 800b978:	4639      	mov	r1, r7
 800b97a:	4620      	mov	r0, r4
 800b97c:	f000 fdd8 	bl	800c530 <_Bfree>
 800b980:	e69c      	b.n	800b6bc <_dtoa_r+0x6c4>
 800b982:	2600      	movs	r6, #0
 800b984:	4637      	mov	r7, r6
 800b986:	e7e1      	b.n	800b94c <_dtoa_r+0x954>
 800b988:	46bb      	mov	fp, r7
 800b98a:	4637      	mov	r7, r6
 800b98c:	e599      	b.n	800b4c2 <_dtoa_r+0x4ca>
 800b98e:	bf00      	nop
 800b990:	40240000 	.word	0x40240000
 800b994:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 80c8 	beq.w	800bb2c <_dtoa_r+0xb34>
 800b99c:	9b04      	ldr	r3, [sp, #16]
 800b99e:	9301      	str	r3, [sp, #4]
 800b9a0:	2d00      	cmp	r5, #0
 800b9a2:	dd05      	ble.n	800b9b0 <_dtoa_r+0x9b8>
 800b9a4:	4639      	mov	r1, r7
 800b9a6:	462a      	mov	r2, r5
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f000 ffdb 	bl	800c964 <__lshift>
 800b9ae:	4607      	mov	r7, r0
 800b9b0:	f1b8 0f00 	cmp.w	r8, #0
 800b9b4:	d05b      	beq.n	800ba6e <_dtoa_r+0xa76>
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f000 fd79 	bl	800c4b0 <_Balloc>
 800b9be:	4605      	mov	r5, r0
 800b9c0:	b928      	cbnz	r0, 800b9ce <_dtoa_r+0x9d6>
 800b9c2:	4b83      	ldr	r3, [pc, #524]	; (800bbd0 <_dtoa_r+0xbd8>)
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b9ca:	f7ff bb2e 	b.w	800b02a <_dtoa_r+0x32>
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	3202      	adds	r2, #2
 800b9d2:	0092      	lsls	r2, r2, #2
 800b9d4:	f107 010c 	add.w	r1, r7, #12
 800b9d8:	300c      	adds	r0, #12
 800b9da:	f7ff fa64 	bl	800aea6 <memcpy>
 800b9de:	2201      	movs	r2, #1
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 ffbe 	bl	800c964 <__lshift>
 800b9e8:	9b00      	ldr	r3, [sp, #0]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	9304      	str	r3, [sp, #16]
 800b9ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	9308      	str	r3, [sp, #32]
 800b9f6:	9b02      	ldr	r3, [sp, #8]
 800b9f8:	f003 0301 	and.w	r3, r3, #1
 800b9fc:	46b8      	mov	r8, r7
 800b9fe:	9306      	str	r3, [sp, #24]
 800ba00:	4607      	mov	r7, r0
 800ba02:	9b04      	ldr	r3, [sp, #16]
 800ba04:	4631      	mov	r1, r6
 800ba06:	3b01      	subs	r3, #1
 800ba08:	4650      	mov	r0, sl
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	f7ff fa6a 	bl	800aee4 <quorem>
 800ba10:	4641      	mov	r1, r8
 800ba12:	9002      	str	r0, [sp, #8]
 800ba14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ba18:	4650      	mov	r0, sl
 800ba1a:	f001 f80f 	bl	800ca3c <__mcmp>
 800ba1e:	463a      	mov	r2, r7
 800ba20:	9005      	str	r0, [sp, #20]
 800ba22:	4631      	mov	r1, r6
 800ba24:	4620      	mov	r0, r4
 800ba26:	f001 f825 	bl	800ca74 <__mdiff>
 800ba2a:	68c2      	ldr	r2, [r0, #12]
 800ba2c:	4605      	mov	r5, r0
 800ba2e:	bb02      	cbnz	r2, 800ba72 <_dtoa_r+0xa7a>
 800ba30:	4601      	mov	r1, r0
 800ba32:	4650      	mov	r0, sl
 800ba34:	f001 f802 	bl	800ca3c <__mcmp>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba40:	f000 fd76 	bl	800c530 <_Bfree>
 800ba44:	9b07      	ldr	r3, [sp, #28]
 800ba46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba48:	9d04      	ldr	r5, [sp, #16]
 800ba4a:	ea43 0102 	orr.w	r1, r3, r2
 800ba4e:	9b06      	ldr	r3, [sp, #24]
 800ba50:	4319      	orrs	r1, r3
 800ba52:	d110      	bne.n	800ba76 <_dtoa_r+0xa7e>
 800ba54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ba58:	d029      	beq.n	800baae <_dtoa_r+0xab6>
 800ba5a:	9b05      	ldr	r3, [sp, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dd02      	ble.n	800ba66 <_dtoa_r+0xa6e>
 800ba60:	9b02      	ldr	r3, [sp, #8]
 800ba62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	f883 9000 	strb.w	r9, [r3]
 800ba6c:	e774      	b.n	800b958 <_dtoa_r+0x960>
 800ba6e:	4638      	mov	r0, r7
 800ba70:	e7ba      	b.n	800b9e8 <_dtoa_r+0x9f0>
 800ba72:	2201      	movs	r2, #1
 800ba74:	e7e1      	b.n	800ba3a <_dtoa_r+0xa42>
 800ba76:	9b05      	ldr	r3, [sp, #20]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	db04      	blt.n	800ba86 <_dtoa_r+0xa8e>
 800ba7c:	9907      	ldr	r1, [sp, #28]
 800ba7e:	430b      	orrs	r3, r1
 800ba80:	9906      	ldr	r1, [sp, #24]
 800ba82:	430b      	orrs	r3, r1
 800ba84:	d120      	bne.n	800bac8 <_dtoa_r+0xad0>
 800ba86:	2a00      	cmp	r2, #0
 800ba88:	dded      	ble.n	800ba66 <_dtoa_r+0xa6e>
 800ba8a:	4651      	mov	r1, sl
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 ff68 	bl	800c964 <__lshift>
 800ba94:	4631      	mov	r1, r6
 800ba96:	4682      	mov	sl, r0
 800ba98:	f000 ffd0 	bl	800ca3c <__mcmp>
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	dc03      	bgt.n	800baa8 <_dtoa_r+0xab0>
 800baa0:	d1e1      	bne.n	800ba66 <_dtoa_r+0xa6e>
 800baa2:	f019 0f01 	tst.w	r9, #1
 800baa6:	d0de      	beq.n	800ba66 <_dtoa_r+0xa6e>
 800baa8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800baac:	d1d8      	bne.n	800ba60 <_dtoa_r+0xa68>
 800baae:	9a01      	ldr	r2, [sp, #4]
 800bab0:	2339      	movs	r3, #57	; 0x39
 800bab2:	7013      	strb	r3, [r2, #0]
 800bab4:	462b      	mov	r3, r5
 800bab6:	461d      	mov	r5, r3
 800bab8:	3b01      	subs	r3, #1
 800baba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800babe:	2a39      	cmp	r2, #57	; 0x39
 800bac0:	d06c      	beq.n	800bb9c <_dtoa_r+0xba4>
 800bac2:	3201      	adds	r2, #1
 800bac4:	701a      	strb	r2, [r3, #0]
 800bac6:	e747      	b.n	800b958 <_dtoa_r+0x960>
 800bac8:	2a00      	cmp	r2, #0
 800baca:	dd07      	ble.n	800badc <_dtoa_r+0xae4>
 800bacc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bad0:	d0ed      	beq.n	800baae <_dtoa_r+0xab6>
 800bad2:	9a01      	ldr	r2, [sp, #4]
 800bad4:	f109 0301 	add.w	r3, r9, #1
 800bad8:	7013      	strb	r3, [r2, #0]
 800bada:	e73d      	b.n	800b958 <_dtoa_r+0x960>
 800badc:	9b04      	ldr	r3, [sp, #16]
 800bade:	9a08      	ldr	r2, [sp, #32]
 800bae0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d043      	beq.n	800bb70 <_dtoa_r+0xb78>
 800bae8:	4651      	mov	r1, sl
 800baea:	2300      	movs	r3, #0
 800baec:	220a      	movs	r2, #10
 800baee:	4620      	mov	r0, r4
 800baf0:	f000 fd40 	bl	800c574 <__multadd>
 800baf4:	45b8      	cmp	r8, r7
 800baf6:	4682      	mov	sl, r0
 800baf8:	f04f 0300 	mov.w	r3, #0
 800bafc:	f04f 020a 	mov.w	r2, #10
 800bb00:	4641      	mov	r1, r8
 800bb02:	4620      	mov	r0, r4
 800bb04:	d107      	bne.n	800bb16 <_dtoa_r+0xb1e>
 800bb06:	f000 fd35 	bl	800c574 <__multadd>
 800bb0a:	4680      	mov	r8, r0
 800bb0c:	4607      	mov	r7, r0
 800bb0e:	9b04      	ldr	r3, [sp, #16]
 800bb10:	3301      	adds	r3, #1
 800bb12:	9304      	str	r3, [sp, #16]
 800bb14:	e775      	b.n	800ba02 <_dtoa_r+0xa0a>
 800bb16:	f000 fd2d 	bl	800c574 <__multadd>
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	4680      	mov	r8, r0
 800bb1e:	2300      	movs	r3, #0
 800bb20:	220a      	movs	r2, #10
 800bb22:	4620      	mov	r0, r4
 800bb24:	f000 fd26 	bl	800c574 <__multadd>
 800bb28:	4607      	mov	r7, r0
 800bb2a:	e7f0      	b.n	800bb0e <_dtoa_r+0xb16>
 800bb2c:	9b04      	ldr	r3, [sp, #16]
 800bb2e:	9301      	str	r3, [sp, #4]
 800bb30:	9d00      	ldr	r5, [sp, #0]
 800bb32:	4631      	mov	r1, r6
 800bb34:	4650      	mov	r0, sl
 800bb36:	f7ff f9d5 	bl	800aee4 <quorem>
 800bb3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bb3e:	9b00      	ldr	r3, [sp, #0]
 800bb40:	f805 9b01 	strb.w	r9, [r5], #1
 800bb44:	1aea      	subs	r2, r5, r3
 800bb46:	9b01      	ldr	r3, [sp, #4]
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	dd07      	ble.n	800bb5c <_dtoa_r+0xb64>
 800bb4c:	4651      	mov	r1, sl
 800bb4e:	2300      	movs	r3, #0
 800bb50:	220a      	movs	r2, #10
 800bb52:	4620      	mov	r0, r4
 800bb54:	f000 fd0e 	bl	800c574 <__multadd>
 800bb58:	4682      	mov	sl, r0
 800bb5a:	e7ea      	b.n	800bb32 <_dtoa_r+0xb3a>
 800bb5c:	9b01      	ldr	r3, [sp, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	bfc8      	it	gt
 800bb62:	461d      	movgt	r5, r3
 800bb64:	9b00      	ldr	r3, [sp, #0]
 800bb66:	bfd8      	it	le
 800bb68:	2501      	movle	r5, #1
 800bb6a:	441d      	add	r5, r3
 800bb6c:	f04f 0800 	mov.w	r8, #0
 800bb70:	4651      	mov	r1, sl
 800bb72:	2201      	movs	r2, #1
 800bb74:	4620      	mov	r0, r4
 800bb76:	f000 fef5 	bl	800c964 <__lshift>
 800bb7a:	4631      	mov	r1, r6
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	f000 ff5d 	bl	800ca3c <__mcmp>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	dc96      	bgt.n	800bab4 <_dtoa_r+0xabc>
 800bb86:	d102      	bne.n	800bb8e <_dtoa_r+0xb96>
 800bb88:	f019 0f01 	tst.w	r9, #1
 800bb8c:	d192      	bne.n	800bab4 <_dtoa_r+0xabc>
 800bb8e:	462b      	mov	r3, r5
 800bb90:	461d      	mov	r5, r3
 800bb92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb96:	2a30      	cmp	r2, #48	; 0x30
 800bb98:	d0fa      	beq.n	800bb90 <_dtoa_r+0xb98>
 800bb9a:	e6dd      	b.n	800b958 <_dtoa_r+0x960>
 800bb9c:	9a00      	ldr	r2, [sp, #0]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d189      	bne.n	800bab6 <_dtoa_r+0xabe>
 800bba2:	f10b 0b01 	add.w	fp, fp, #1
 800bba6:	2331      	movs	r3, #49	; 0x31
 800bba8:	e796      	b.n	800bad8 <_dtoa_r+0xae0>
 800bbaa:	4b0a      	ldr	r3, [pc, #40]	; (800bbd4 <_dtoa_r+0xbdc>)
 800bbac:	f7ff ba99 	b.w	800b0e2 <_dtoa_r+0xea>
 800bbb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f47f aa6d 	bne.w	800b092 <_dtoa_r+0x9a>
 800bbb8:	4b07      	ldr	r3, [pc, #28]	; (800bbd8 <_dtoa_r+0xbe0>)
 800bbba:	f7ff ba92 	b.w	800b0e2 <_dtoa_r+0xea>
 800bbbe:	9b01      	ldr	r3, [sp, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	dcb5      	bgt.n	800bb30 <_dtoa_r+0xb38>
 800bbc4:	9b07      	ldr	r3, [sp, #28]
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	f73f aeb1 	bgt.w	800b92e <_dtoa_r+0x936>
 800bbcc:	e7b0      	b.n	800bb30 <_dtoa_r+0xb38>
 800bbce:	bf00      	nop
 800bbd0:	0800ef75 	.word	0x0800ef75
 800bbd4:	0800eec8 	.word	0x0800eec8
 800bbd8:	0800eef9 	.word	0x0800eef9

0800bbdc <_free_r>:
 800bbdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbde:	2900      	cmp	r1, #0
 800bbe0:	d044      	beq.n	800bc6c <_free_r+0x90>
 800bbe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbe6:	9001      	str	r0, [sp, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f1a1 0404 	sub.w	r4, r1, #4
 800bbee:	bfb8      	it	lt
 800bbf0:	18e4      	addlt	r4, r4, r3
 800bbf2:	f000 fc51 	bl	800c498 <__malloc_lock>
 800bbf6:	4a1e      	ldr	r2, [pc, #120]	; (800bc70 <_free_r+0x94>)
 800bbf8:	9801      	ldr	r0, [sp, #4]
 800bbfa:	6813      	ldr	r3, [r2, #0]
 800bbfc:	b933      	cbnz	r3, 800bc0c <_free_r+0x30>
 800bbfe:	6063      	str	r3, [r4, #4]
 800bc00:	6014      	str	r4, [r2, #0]
 800bc02:	b003      	add	sp, #12
 800bc04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc08:	f000 bc4c 	b.w	800c4a4 <__malloc_unlock>
 800bc0c:	42a3      	cmp	r3, r4
 800bc0e:	d908      	bls.n	800bc22 <_free_r+0x46>
 800bc10:	6825      	ldr	r5, [r4, #0]
 800bc12:	1961      	adds	r1, r4, r5
 800bc14:	428b      	cmp	r3, r1
 800bc16:	bf01      	itttt	eq
 800bc18:	6819      	ldreq	r1, [r3, #0]
 800bc1a:	685b      	ldreq	r3, [r3, #4]
 800bc1c:	1949      	addeq	r1, r1, r5
 800bc1e:	6021      	streq	r1, [r4, #0]
 800bc20:	e7ed      	b.n	800bbfe <_free_r+0x22>
 800bc22:	461a      	mov	r2, r3
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	b10b      	cbz	r3, 800bc2c <_free_r+0x50>
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	d9fa      	bls.n	800bc22 <_free_r+0x46>
 800bc2c:	6811      	ldr	r1, [r2, #0]
 800bc2e:	1855      	adds	r5, r2, r1
 800bc30:	42a5      	cmp	r5, r4
 800bc32:	d10b      	bne.n	800bc4c <_free_r+0x70>
 800bc34:	6824      	ldr	r4, [r4, #0]
 800bc36:	4421      	add	r1, r4
 800bc38:	1854      	adds	r4, r2, r1
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	6011      	str	r1, [r2, #0]
 800bc3e:	d1e0      	bne.n	800bc02 <_free_r+0x26>
 800bc40:	681c      	ldr	r4, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	6053      	str	r3, [r2, #4]
 800bc46:	440c      	add	r4, r1
 800bc48:	6014      	str	r4, [r2, #0]
 800bc4a:	e7da      	b.n	800bc02 <_free_r+0x26>
 800bc4c:	d902      	bls.n	800bc54 <_free_r+0x78>
 800bc4e:	230c      	movs	r3, #12
 800bc50:	6003      	str	r3, [r0, #0]
 800bc52:	e7d6      	b.n	800bc02 <_free_r+0x26>
 800bc54:	6825      	ldr	r5, [r4, #0]
 800bc56:	1961      	adds	r1, r4, r5
 800bc58:	428b      	cmp	r3, r1
 800bc5a:	bf04      	itt	eq
 800bc5c:	6819      	ldreq	r1, [r3, #0]
 800bc5e:	685b      	ldreq	r3, [r3, #4]
 800bc60:	6063      	str	r3, [r4, #4]
 800bc62:	bf04      	itt	eq
 800bc64:	1949      	addeq	r1, r1, r5
 800bc66:	6021      	streq	r1, [r4, #0]
 800bc68:	6054      	str	r4, [r2, #4]
 800bc6a:	e7ca      	b.n	800bc02 <_free_r+0x26>
 800bc6c:	b003      	add	sp, #12
 800bc6e:	bd30      	pop	{r4, r5, pc}
 800bc70:	200007fc 	.word	0x200007fc

0800bc74 <rshift>:
 800bc74:	6903      	ldr	r3, [r0, #16]
 800bc76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bc7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bc82:	f100 0414 	add.w	r4, r0, #20
 800bc86:	dd45      	ble.n	800bd14 <rshift+0xa0>
 800bc88:	f011 011f 	ands.w	r1, r1, #31
 800bc8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bc90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bc94:	d10c      	bne.n	800bcb0 <rshift+0x3c>
 800bc96:	f100 0710 	add.w	r7, r0, #16
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	42b1      	cmp	r1, r6
 800bc9e:	d334      	bcc.n	800bd0a <rshift+0x96>
 800bca0:	1a9b      	subs	r3, r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	1eea      	subs	r2, r5, #3
 800bca6:	4296      	cmp	r6, r2
 800bca8:	bf38      	it	cc
 800bcaa:	2300      	movcc	r3, #0
 800bcac:	4423      	add	r3, r4
 800bcae:	e015      	b.n	800bcdc <rshift+0x68>
 800bcb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bcb4:	f1c1 0820 	rsb	r8, r1, #32
 800bcb8:	40cf      	lsrs	r7, r1
 800bcba:	f105 0e04 	add.w	lr, r5, #4
 800bcbe:	46a1      	mov	r9, r4
 800bcc0:	4576      	cmp	r6, lr
 800bcc2:	46f4      	mov	ip, lr
 800bcc4:	d815      	bhi.n	800bcf2 <rshift+0x7e>
 800bcc6:	1a9a      	subs	r2, r3, r2
 800bcc8:	0092      	lsls	r2, r2, #2
 800bcca:	3a04      	subs	r2, #4
 800bccc:	3501      	adds	r5, #1
 800bcce:	42ae      	cmp	r6, r5
 800bcd0:	bf38      	it	cc
 800bcd2:	2200      	movcc	r2, #0
 800bcd4:	18a3      	adds	r3, r4, r2
 800bcd6:	50a7      	str	r7, [r4, r2]
 800bcd8:	b107      	cbz	r7, 800bcdc <rshift+0x68>
 800bcda:	3304      	adds	r3, #4
 800bcdc:	1b1a      	subs	r2, r3, r4
 800bcde:	42a3      	cmp	r3, r4
 800bce0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bce4:	bf08      	it	eq
 800bce6:	2300      	moveq	r3, #0
 800bce8:	6102      	str	r2, [r0, #16]
 800bcea:	bf08      	it	eq
 800bcec:	6143      	streq	r3, [r0, #20]
 800bcee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bcf2:	f8dc c000 	ldr.w	ip, [ip]
 800bcf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800bcfa:	ea4c 0707 	orr.w	r7, ip, r7
 800bcfe:	f849 7b04 	str.w	r7, [r9], #4
 800bd02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd06:	40cf      	lsrs	r7, r1
 800bd08:	e7da      	b.n	800bcc0 <rshift+0x4c>
 800bd0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bd0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bd12:	e7c3      	b.n	800bc9c <rshift+0x28>
 800bd14:	4623      	mov	r3, r4
 800bd16:	e7e1      	b.n	800bcdc <rshift+0x68>

0800bd18 <__hexdig_fun>:
 800bd18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bd1c:	2b09      	cmp	r3, #9
 800bd1e:	d802      	bhi.n	800bd26 <__hexdig_fun+0xe>
 800bd20:	3820      	subs	r0, #32
 800bd22:	b2c0      	uxtb	r0, r0
 800bd24:	4770      	bx	lr
 800bd26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bd2a:	2b05      	cmp	r3, #5
 800bd2c:	d801      	bhi.n	800bd32 <__hexdig_fun+0x1a>
 800bd2e:	3847      	subs	r0, #71	; 0x47
 800bd30:	e7f7      	b.n	800bd22 <__hexdig_fun+0xa>
 800bd32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bd36:	2b05      	cmp	r3, #5
 800bd38:	d801      	bhi.n	800bd3e <__hexdig_fun+0x26>
 800bd3a:	3827      	subs	r0, #39	; 0x27
 800bd3c:	e7f1      	b.n	800bd22 <__hexdig_fun+0xa>
 800bd3e:	2000      	movs	r0, #0
 800bd40:	4770      	bx	lr
	...

0800bd44 <__gethex>:
 800bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd48:	4617      	mov	r7, r2
 800bd4a:	680a      	ldr	r2, [r1, #0]
 800bd4c:	b085      	sub	sp, #20
 800bd4e:	f102 0b02 	add.w	fp, r2, #2
 800bd52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bd56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bd5a:	4681      	mov	r9, r0
 800bd5c:	468a      	mov	sl, r1
 800bd5e:	9302      	str	r3, [sp, #8]
 800bd60:	32fe      	adds	r2, #254	; 0xfe
 800bd62:	eb02 030b 	add.w	r3, r2, fp
 800bd66:	46d8      	mov	r8, fp
 800bd68:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	2830      	cmp	r0, #48	; 0x30
 800bd70:	d0f7      	beq.n	800bd62 <__gethex+0x1e>
 800bd72:	f7ff ffd1 	bl	800bd18 <__hexdig_fun>
 800bd76:	4604      	mov	r4, r0
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d138      	bne.n	800bdee <__gethex+0xaa>
 800bd7c:	49a7      	ldr	r1, [pc, #668]	; (800c01c <__gethex+0x2d8>)
 800bd7e:	2201      	movs	r2, #1
 800bd80:	4640      	mov	r0, r8
 800bd82:	f7ff f806 	bl	800ad92 <strncmp>
 800bd86:	4606      	mov	r6, r0
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d169      	bne.n	800be60 <__gethex+0x11c>
 800bd8c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bd90:	465d      	mov	r5, fp
 800bd92:	f7ff ffc1 	bl	800bd18 <__hexdig_fun>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d064      	beq.n	800be64 <__gethex+0x120>
 800bd9a:	465a      	mov	r2, fp
 800bd9c:	7810      	ldrb	r0, [r2, #0]
 800bd9e:	2830      	cmp	r0, #48	; 0x30
 800bda0:	4690      	mov	r8, r2
 800bda2:	f102 0201 	add.w	r2, r2, #1
 800bda6:	d0f9      	beq.n	800bd9c <__gethex+0x58>
 800bda8:	f7ff ffb6 	bl	800bd18 <__hexdig_fun>
 800bdac:	2301      	movs	r3, #1
 800bdae:	fab0 f480 	clz	r4, r0
 800bdb2:	0964      	lsrs	r4, r4, #5
 800bdb4:	465e      	mov	r6, fp
 800bdb6:	9301      	str	r3, [sp, #4]
 800bdb8:	4642      	mov	r2, r8
 800bdba:	4615      	mov	r5, r2
 800bdbc:	3201      	adds	r2, #1
 800bdbe:	7828      	ldrb	r0, [r5, #0]
 800bdc0:	f7ff ffaa 	bl	800bd18 <__hexdig_fun>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d1f8      	bne.n	800bdba <__gethex+0x76>
 800bdc8:	4994      	ldr	r1, [pc, #592]	; (800c01c <__gethex+0x2d8>)
 800bdca:	2201      	movs	r2, #1
 800bdcc:	4628      	mov	r0, r5
 800bdce:	f7fe ffe0 	bl	800ad92 <strncmp>
 800bdd2:	b978      	cbnz	r0, 800bdf4 <__gethex+0xb0>
 800bdd4:	b946      	cbnz	r6, 800bde8 <__gethex+0xa4>
 800bdd6:	1c6e      	adds	r6, r5, #1
 800bdd8:	4632      	mov	r2, r6
 800bdda:	4615      	mov	r5, r2
 800bddc:	3201      	adds	r2, #1
 800bdde:	7828      	ldrb	r0, [r5, #0]
 800bde0:	f7ff ff9a 	bl	800bd18 <__hexdig_fun>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	d1f8      	bne.n	800bdda <__gethex+0x96>
 800bde8:	1b73      	subs	r3, r6, r5
 800bdea:	009e      	lsls	r6, r3, #2
 800bdec:	e004      	b.n	800bdf8 <__gethex+0xb4>
 800bdee:	2400      	movs	r4, #0
 800bdf0:	4626      	mov	r6, r4
 800bdf2:	e7e1      	b.n	800bdb8 <__gethex+0x74>
 800bdf4:	2e00      	cmp	r6, #0
 800bdf6:	d1f7      	bne.n	800bde8 <__gethex+0xa4>
 800bdf8:	782b      	ldrb	r3, [r5, #0]
 800bdfa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bdfe:	2b50      	cmp	r3, #80	; 0x50
 800be00:	d13d      	bne.n	800be7e <__gethex+0x13a>
 800be02:	786b      	ldrb	r3, [r5, #1]
 800be04:	2b2b      	cmp	r3, #43	; 0x2b
 800be06:	d02f      	beq.n	800be68 <__gethex+0x124>
 800be08:	2b2d      	cmp	r3, #45	; 0x2d
 800be0a:	d031      	beq.n	800be70 <__gethex+0x12c>
 800be0c:	1c69      	adds	r1, r5, #1
 800be0e:	f04f 0b00 	mov.w	fp, #0
 800be12:	7808      	ldrb	r0, [r1, #0]
 800be14:	f7ff ff80 	bl	800bd18 <__hexdig_fun>
 800be18:	1e42      	subs	r2, r0, #1
 800be1a:	b2d2      	uxtb	r2, r2
 800be1c:	2a18      	cmp	r2, #24
 800be1e:	d82e      	bhi.n	800be7e <__gethex+0x13a>
 800be20:	f1a0 0210 	sub.w	r2, r0, #16
 800be24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800be28:	f7ff ff76 	bl	800bd18 <__hexdig_fun>
 800be2c:	f100 3cff 	add.w	ip, r0, #4294967295
 800be30:	fa5f fc8c 	uxtb.w	ip, ip
 800be34:	f1bc 0f18 	cmp.w	ip, #24
 800be38:	d91d      	bls.n	800be76 <__gethex+0x132>
 800be3a:	f1bb 0f00 	cmp.w	fp, #0
 800be3e:	d000      	beq.n	800be42 <__gethex+0xfe>
 800be40:	4252      	negs	r2, r2
 800be42:	4416      	add	r6, r2
 800be44:	f8ca 1000 	str.w	r1, [sl]
 800be48:	b1dc      	cbz	r4, 800be82 <__gethex+0x13e>
 800be4a:	9b01      	ldr	r3, [sp, #4]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	bf14      	ite	ne
 800be50:	f04f 0800 	movne.w	r8, #0
 800be54:	f04f 0806 	moveq.w	r8, #6
 800be58:	4640      	mov	r0, r8
 800be5a:	b005      	add	sp, #20
 800be5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be60:	4645      	mov	r5, r8
 800be62:	4626      	mov	r6, r4
 800be64:	2401      	movs	r4, #1
 800be66:	e7c7      	b.n	800bdf8 <__gethex+0xb4>
 800be68:	f04f 0b00 	mov.w	fp, #0
 800be6c:	1ca9      	adds	r1, r5, #2
 800be6e:	e7d0      	b.n	800be12 <__gethex+0xce>
 800be70:	f04f 0b01 	mov.w	fp, #1
 800be74:	e7fa      	b.n	800be6c <__gethex+0x128>
 800be76:	230a      	movs	r3, #10
 800be78:	fb03 0002 	mla	r0, r3, r2, r0
 800be7c:	e7d0      	b.n	800be20 <__gethex+0xdc>
 800be7e:	4629      	mov	r1, r5
 800be80:	e7e0      	b.n	800be44 <__gethex+0x100>
 800be82:	eba5 0308 	sub.w	r3, r5, r8
 800be86:	3b01      	subs	r3, #1
 800be88:	4621      	mov	r1, r4
 800be8a:	2b07      	cmp	r3, #7
 800be8c:	dc0a      	bgt.n	800bea4 <__gethex+0x160>
 800be8e:	4648      	mov	r0, r9
 800be90:	f000 fb0e 	bl	800c4b0 <_Balloc>
 800be94:	4604      	mov	r4, r0
 800be96:	b940      	cbnz	r0, 800beaa <__gethex+0x166>
 800be98:	4b61      	ldr	r3, [pc, #388]	; (800c020 <__gethex+0x2dc>)
 800be9a:	4602      	mov	r2, r0
 800be9c:	21e4      	movs	r1, #228	; 0xe4
 800be9e:	4861      	ldr	r0, [pc, #388]	; (800c024 <__gethex+0x2e0>)
 800bea0:	f001 fc84 	bl	800d7ac <__assert_func>
 800bea4:	3101      	adds	r1, #1
 800bea6:	105b      	asrs	r3, r3, #1
 800bea8:	e7ef      	b.n	800be8a <__gethex+0x146>
 800beaa:	f100 0a14 	add.w	sl, r0, #20
 800beae:	2300      	movs	r3, #0
 800beb0:	495a      	ldr	r1, [pc, #360]	; (800c01c <__gethex+0x2d8>)
 800beb2:	f8cd a004 	str.w	sl, [sp, #4]
 800beb6:	469b      	mov	fp, r3
 800beb8:	45a8      	cmp	r8, r5
 800beba:	d342      	bcc.n	800bf42 <__gethex+0x1fe>
 800bebc:	9801      	ldr	r0, [sp, #4]
 800bebe:	f840 bb04 	str.w	fp, [r0], #4
 800bec2:	eba0 000a 	sub.w	r0, r0, sl
 800bec6:	1080      	asrs	r0, r0, #2
 800bec8:	6120      	str	r0, [r4, #16]
 800beca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bece:	4658      	mov	r0, fp
 800bed0:	f000 fbe0 	bl	800c694 <__hi0bits>
 800bed4:	683d      	ldr	r5, [r7, #0]
 800bed6:	eba8 0000 	sub.w	r0, r8, r0
 800beda:	42a8      	cmp	r0, r5
 800bedc:	dd59      	ble.n	800bf92 <__gethex+0x24e>
 800bede:	eba0 0805 	sub.w	r8, r0, r5
 800bee2:	4641      	mov	r1, r8
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 ff6f 	bl	800cdc8 <__any_on>
 800beea:	4683      	mov	fp, r0
 800beec:	b1b8      	cbz	r0, 800bf1e <__gethex+0x1da>
 800beee:	f108 33ff 	add.w	r3, r8, #4294967295
 800bef2:	1159      	asrs	r1, r3, #5
 800bef4:	f003 021f 	and.w	r2, r3, #31
 800bef8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800befc:	f04f 0b01 	mov.w	fp, #1
 800bf00:	fa0b f202 	lsl.w	r2, fp, r2
 800bf04:	420a      	tst	r2, r1
 800bf06:	d00a      	beq.n	800bf1e <__gethex+0x1da>
 800bf08:	455b      	cmp	r3, fp
 800bf0a:	dd06      	ble.n	800bf1a <__gethex+0x1d6>
 800bf0c:	f1a8 0102 	sub.w	r1, r8, #2
 800bf10:	4620      	mov	r0, r4
 800bf12:	f000 ff59 	bl	800cdc8 <__any_on>
 800bf16:	2800      	cmp	r0, #0
 800bf18:	d138      	bne.n	800bf8c <__gethex+0x248>
 800bf1a:	f04f 0b02 	mov.w	fp, #2
 800bf1e:	4641      	mov	r1, r8
 800bf20:	4620      	mov	r0, r4
 800bf22:	f7ff fea7 	bl	800bc74 <rshift>
 800bf26:	4446      	add	r6, r8
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	42b3      	cmp	r3, r6
 800bf2c:	da41      	bge.n	800bfb2 <__gethex+0x26e>
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4648      	mov	r0, r9
 800bf32:	f000 fafd 	bl	800c530 <_Bfree>
 800bf36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf38:	2300      	movs	r3, #0
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bf40:	e78a      	b.n	800be58 <__gethex+0x114>
 800bf42:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bf46:	2a2e      	cmp	r2, #46	; 0x2e
 800bf48:	d014      	beq.n	800bf74 <__gethex+0x230>
 800bf4a:	2b20      	cmp	r3, #32
 800bf4c:	d106      	bne.n	800bf5c <__gethex+0x218>
 800bf4e:	9b01      	ldr	r3, [sp, #4]
 800bf50:	f843 bb04 	str.w	fp, [r3], #4
 800bf54:	f04f 0b00 	mov.w	fp, #0
 800bf58:	9301      	str	r3, [sp, #4]
 800bf5a:	465b      	mov	r3, fp
 800bf5c:	7828      	ldrb	r0, [r5, #0]
 800bf5e:	9303      	str	r3, [sp, #12]
 800bf60:	f7ff feda 	bl	800bd18 <__hexdig_fun>
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	f000 000f 	and.w	r0, r0, #15
 800bf6a:	4098      	lsls	r0, r3
 800bf6c:	ea4b 0b00 	orr.w	fp, fp, r0
 800bf70:	3304      	adds	r3, #4
 800bf72:	e7a1      	b.n	800beb8 <__gethex+0x174>
 800bf74:	45a8      	cmp	r8, r5
 800bf76:	d8e8      	bhi.n	800bf4a <__gethex+0x206>
 800bf78:	2201      	movs	r2, #1
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	9303      	str	r3, [sp, #12]
 800bf7e:	f7fe ff08 	bl	800ad92 <strncmp>
 800bf82:	4926      	ldr	r1, [pc, #152]	; (800c01c <__gethex+0x2d8>)
 800bf84:	9b03      	ldr	r3, [sp, #12]
 800bf86:	2800      	cmp	r0, #0
 800bf88:	d1df      	bne.n	800bf4a <__gethex+0x206>
 800bf8a:	e795      	b.n	800beb8 <__gethex+0x174>
 800bf8c:	f04f 0b03 	mov.w	fp, #3
 800bf90:	e7c5      	b.n	800bf1e <__gethex+0x1da>
 800bf92:	da0b      	bge.n	800bfac <__gethex+0x268>
 800bf94:	eba5 0800 	sub.w	r8, r5, r0
 800bf98:	4621      	mov	r1, r4
 800bf9a:	4642      	mov	r2, r8
 800bf9c:	4648      	mov	r0, r9
 800bf9e:	f000 fce1 	bl	800c964 <__lshift>
 800bfa2:	eba6 0608 	sub.w	r6, r6, r8
 800bfa6:	4604      	mov	r4, r0
 800bfa8:	f100 0a14 	add.w	sl, r0, #20
 800bfac:	f04f 0b00 	mov.w	fp, #0
 800bfb0:	e7ba      	b.n	800bf28 <__gethex+0x1e4>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	42b3      	cmp	r3, r6
 800bfb6:	dd73      	ble.n	800c0a0 <__gethex+0x35c>
 800bfb8:	1b9e      	subs	r6, r3, r6
 800bfba:	42b5      	cmp	r5, r6
 800bfbc:	dc34      	bgt.n	800c028 <__gethex+0x2e4>
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d023      	beq.n	800c00c <__gethex+0x2c8>
 800bfc4:	2b03      	cmp	r3, #3
 800bfc6:	d025      	beq.n	800c014 <__gethex+0x2d0>
 800bfc8:	2b01      	cmp	r3, #1
 800bfca:	d115      	bne.n	800bff8 <__gethex+0x2b4>
 800bfcc:	42b5      	cmp	r5, r6
 800bfce:	d113      	bne.n	800bff8 <__gethex+0x2b4>
 800bfd0:	2d01      	cmp	r5, #1
 800bfd2:	d10b      	bne.n	800bfec <__gethex+0x2a8>
 800bfd4:	9a02      	ldr	r2, [sp, #8]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	2301      	movs	r3, #1
 800bfdc:	6123      	str	r3, [r4, #16]
 800bfde:	f8ca 3000 	str.w	r3, [sl]
 800bfe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfe4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bfe8:	601c      	str	r4, [r3, #0]
 800bfea:	e735      	b.n	800be58 <__gethex+0x114>
 800bfec:	1e69      	subs	r1, r5, #1
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 feea 	bl	800cdc8 <__any_on>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	d1ed      	bne.n	800bfd4 <__gethex+0x290>
 800bff8:	4621      	mov	r1, r4
 800bffa:	4648      	mov	r0, r9
 800bffc:	f000 fa98 	bl	800c530 <_Bfree>
 800c000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c002:	2300      	movs	r3, #0
 800c004:	6013      	str	r3, [r2, #0]
 800c006:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c00a:	e725      	b.n	800be58 <__gethex+0x114>
 800c00c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1f2      	bne.n	800bff8 <__gethex+0x2b4>
 800c012:	e7df      	b.n	800bfd4 <__gethex+0x290>
 800c014:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1dc      	bne.n	800bfd4 <__gethex+0x290>
 800c01a:	e7ed      	b.n	800bff8 <__gethex+0x2b4>
 800c01c:	0800ee60 	.word	0x0800ee60
 800c020:	0800ef75 	.word	0x0800ef75
 800c024:	0800ef86 	.word	0x0800ef86
 800c028:	f106 38ff 	add.w	r8, r6, #4294967295
 800c02c:	f1bb 0f00 	cmp.w	fp, #0
 800c030:	d133      	bne.n	800c09a <__gethex+0x356>
 800c032:	f1b8 0f00 	cmp.w	r8, #0
 800c036:	d004      	beq.n	800c042 <__gethex+0x2fe>
 800c038:	4641      	mov	r1, r8
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 fec4 	bl	800cdc8 <__any_on>
 800c040:	4683      	mov	fp, r0
 800c042:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c046:	2301      	movs	r3, #1
 800c048:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c04c:	f008 081f 	and.w	r8, r8, #31
 800c050:	fa03 f308 	lsl.w	r3, r3, r8
 800c054:	4213      	tst	r3, r2
 800c056:	4631      	mov	r1, r6
 800c058:	4620      	mov	r0, r4
 800c05a:	bf18      	it	ne
 800c05c:	f04b 0b02 	orrne.w	fp, fp, #2
 800c060:	1bad      	subs	r5, r5, r6
 800c062:	f7ff fe07 	bl	800bc74 <rshift>
 800c066:	687e      	ldr	r6, [r7, #4]
 800c068:	f04f 0802 	mov.w	r8, #2
 800c06c:	f1bb 0f00 	cmp.w	fp, #0
 800c070:	d04a      	beq.n	800c108 <__gethex+0x3c4>
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b02      	cmp	r3, #2
 800c076:	d016      	beq.n	800c0a6 <__gethex+0x362>
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d018      	beq.n	800c0ae <__gethex+0x36a>
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d109      	bne.n	800c094 <__gethex+0x350>
 800c080:	f01b 0f02 	tst.w	fp, #2
 800c084:	d006      	beq.n	800c094 <__gethex+0x350>
 800c086:	f8da 3000 	ldr.w	r3, [sl]
 800c08a:	ea4b 0b03 	orr.w	fp, fp, r3
 800c08e:	f01b 0f01 	tst.w	fp, #1
 800c092:	d10f      	bne.n	800c0b4 <__gethex+0x370>
 800c094:	f048 0810 	orr.w	r8, r8, #16
 800c098:	e036      	b.n	800c108 <__gethex+0x3c4>
 800c09a:	f04f 0b01 	mov.w	fp, #1
 800c09e:	e7d0      	b.n	800c042 <__gethex+0x2fe>
 800c0a0:	f04f 0801 	mov.w	r8, #1
 800c0a4:	e7e2      	b.n	800c06c <__gethex+0x328>
 800c0a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0a8:	f1c3 0301 	rsb	r3, r3, #1
 800c0ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800c0ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0ef      	beq.n	800c094 <__gethex+0x350>
 800c0b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c0b8:	f104 0214 	add.w	r2, r4, #20
 800c0bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	4694      	mov	ip, r2
 800c0ca:	f852 1b04 	ldr.w	r1, [r2], #4
 800c0ce:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c0d2:	d01e      	beq.n	800c112 <__gethex+0x3ce>
 800c0d4:	3101      	adds	r1, #1
 800c0d6:	f8cc 1000 	str.w	r1, [ip]
 800c0da:	f1b8 0f02 	cmp.w	r8, #2
 800c0de:	f104 0214 	add.w	r2, r4, #20
 800c0e2:	d13d      	bne.n	800c160 <__gethex+0x41c>
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	3b01      	subs	r3, #1
 800c0e8:	42ab      	cmp	r3, r5
 800c0ea:	d10b      	bne.n	800c104 <__gethex+0x3c0>
 800c0ec:	1169      	asrs	r1, r5, #5
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	f005 051f 	and.w	r5, r5, #31
 800c0f4:	fa03 f505 	lsl.w	r5, r3, r5
 800c0f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0fc:	421d      	tst	r5, r3
 800c0fe:	bf18      	it	ne
 800c100:	f04f 0801 	movne.w	r8, #1
 800c104:	f048 0820 	orr.w	r8, r8, #32
 800c108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c10a:	601c      	str	r4, [r3, #0]
 800c10c:	9b02      	ldr	r3, [sp, #8]
 800c10e:	601e      	str	r6, [r3, #0]
 800c110:	e6a2      	b.n	800be58 <__gethex+0x114>
 800c112:	4290      	cmp	r0, r2
 800c114:	f842 3c04 	str.w	r3, [r2, #-4]
 800c118:	d8d6      	bhi.n	800c0c8 <__gethex+0x384>
 800c11a:	68a2      	ldr	r2, [r4, #8]
 800c11c:	4593      	cmp	fp, r2
 800c11e:	db17      	blt.n	800c150 <__gethex+0x40c>
 800c120:	6861      	ldr	r1, [r4, #4]
 800c122:	4648      	mov	r0, r9
 800c124:	3101      	adds	r1, #1
 800c126:	f000 f9c3 	bl	800c4b0 <_Balloc>
 800c12a:	4682      	mov	sl, r0
 800c12c:	b918      	cbnz	r0, 800c136 <__gethex+0x3f2>
 800c12e:	4b1b      	ldr	r3, [pc, #108]	; (800c19c <__gethex+0x458>)
 800c130:	4602      	mov	r2, r0
 800c132:	2184      	movs	r1, #132	; 0x84
 800c134:	e6b3      	b.n	800be9e <__gethex+0x15a>
 800c136:	6922      	ldr	r2, [r4, #16]
 800c138:	3202      	adds	r2, #2
 800c13a:	f104 010c 	add.w	r1, r4, #12
 800c13e:	0092      	lsls	r2, r2, #2
 800c140:	300c      	adds	r0, #12
 800c142:	f7fe feb0 	bl	800aea6 <memcpy>
 800c146:	4621      	mov	r1, r4
 800c148:	4648      	mov	r0, r9
 800c14a:	f000 f9f1 	bl	800c530 <_Bfree>
 800c14e:	4654      	mov	r4, sl
 800c150:	6922      	ldr	r2, [r4, #16]
 800c152:	1c51      	adds	r1, r2, #1
 800c154:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c158:	6121      	str	r1, [r4, #16]
 800c15a:	2101      	movs	r1, #1
 800c15c:	6151      	str	r1, [r2, #20]
 800c15e:	e7bc      	b.n	800c0da <__gethex+0x396>
 800c160:	6921      	ldr	r1, [r4, #16]
 800c162:	4559      	cmp	r1, fp
 800c164:	dd0b      	ble.n	800c17e <__gethex+0x43a>
 800c166:	2101      	movs	r1, #1
 800c168:	4620      	mov	r0, r4
 800c16a:	f7ff fd83 	bl	800bc74 <rshift>
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	3601      	adds	r6, #1
 800c172:	42b3      	cmp	r3, r6
 800c174:	f6ff aedb 	blt.w	800bf2e <__gethex+0x1ea>
 800c178:	f04f 0801 	mov.w	r8, #1
 800c17c:	e7c2      	b.n	800c104 <__gethex+0x3c0>
 800c17e:	f015 051f 	ands.w	r5, r5, #31
 800c182:	d0f9      	beq.n	800c178 <__gethex+0x434>
 800c184:	9b01      	ldr	r3, [sp, #4]
 800c186:	441a      	add	r2, r3
 800c188:	f1c5 0520 	rsb	r5, r5, #32
 800c18c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c190:	f000 fa80 	bl	800c694 <__hi0bits>
 800c194:	42a8      	cmp	r0, r5
 800c196:	dbe6      	blt.n	800c166 <__gethex+0x422>
 800c198:	e7ee      	b.n	800c178 <__gethex+0x434>
 800c19a:	bf00      	nop
 800c19c:	0800ef75 	.word	0x0800ef75

0800c1a0 <L_shift>:
 800c1a0:	f1c2 0208 	rsb	r2, r2, #8
 800c1a4:	0092      	lsls	r2, r2, #2
 800c1a6:	b570      	push	{r4, r5, r6, lr}
 800c1a8:	f1c2 0620 	rsb	r6, r2, #32
 800c1ac:	6843      	ldr	r3, [r0, #4]
 800c1ae:	6804      	ldr	r4, [r0, #0]
 800c1b0:	fa03 f506 	lsl.w	r5, r3, r6
 800c1b4:	432c      	orrs	r4, r5
 800c1b6:	40d3      	lsrs	r3, r2
 800c1b8:	6004      	str	r4, [r0, #0]
 800c1ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800c1be:	4288      	cmp	r0, r1
 800c1c0:	d3f4      	bcc.n	800c1ac <L_shift+0xc>
 800c1c2:	bd70      	pop	{r4, r5, r6, pc}

0800c1c4 <__match>:
 800c1c4:	b530      	push	{r4, r5, lr}
 800c1c6:	6803      	ldr	r3, [r0, #0]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1ce:	b914      	cbnz	r4, 800c1d6 <__match+0x12>
 800c1d0:	6003      	str	r3, [r0, #0]
 800c1d2:	2001      	movs	r0, #1
 800c1d4:	bd30      	pop	{r4, r5, pc}
 800c1d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c1de:	2d19      	cmp	r5, #25
 800c1e0:	bf98      	it	ls
 800c1e2:	3220      	addls	r2, #32
 800c1e4:	42a2      	cmp	r2, r4
 800c1e6:	d0f0      	beq.n	800c1ca <__match+0x6>
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e7f3      	b.n	800c1d4 <__match+0x10>

0800c1ec <__hexnan>:
 800c1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f0:	680b      	ldr	r3, [r1, #0]
 800c1f2:	6801      	ldr	r1, [r0, #0]
 800c1f4:	115e      	asrs	r6, r3, #5
 800c1f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c1fa:	f013 031f 	ands.w	r3, r3, #31
 800c1fe:	b087      	sub	sp, #28
 800c200:	bf18      	it	ne
 800c202:	3604      	addne	r6, #4
 800c204:	2500      	movs	r5, #0
 800c206:	1f37      	subs	r7, r6, #4
 800c208:	4682      	mov	sl, r0
 800c20a:	4690      	mov	r8, r2
 800c20c:	9301      	str	r3, [sp, #4]
 800c20e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c212:	46b9      	mov	r9, r7
 800c214:	463c      	mov	r4, r7
 800c216:	9502      	str	r5, [sp, #8]
 800c218:	46ab      	mov	fp, r5
 800c21a:	784a      	ldrb	r2, [r1, #1]
 800c21c:	1c4b      	adds	r3, r1, #1
 800c21e:	9303      	str	r3, [sp, #12]
 800c220:	b342      	cbz	r2, 800c274 <__hexnan+0x88>
 800c222:	4610      	mov	r0, r2
 800c224:	9105      	str	r1, [sp, #20]
 800c226:	9204      	str	r2, [sp, #16]
 800c228:	f7ff fd76 	bl	800bd18 <__hexdig_fun>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d14f      	bne.n	800c2d0 <__hexnan+0xe4>
 800c230:	9a04      	ldr	r2, [sp, #16]
 800c232:	9905      	ldr	r1, [sp, #20]
 800c234:	2a20      	cmp	r2, #32
 800c236:	d818      	bhi.n	800c26a <__hexnan+0x7e>
 800c238:	9b02      	ldr	r3, [sp, #8]
 800c23a:	459b      	cmp	fp, r3
 800c23c:	dd13      	ble.n	800c266 <__hexnan+0x7a>
 800c23e:	454c      	cmp	r4, r9
 800c240:	d206      	bcs.n	800c250 <__hexnan+0x64>
 800c242:	2d07      	cmp	r5, #7
 800c244:	dc04      	bgt.n	800c250 <__hexnan+0x64>
 800c246:	462a      	mov	r2, r5
 800c248:	4649      	mov	r1, r9
 800c24a:	4620      	mov	r0, r4
 800c24c:	f7ff ffa8 	bl	800c1a0 <L_shift>
 800c250:	4544      	cmp	r4, r8
 800c252:	d950      	bls.n	800c2f6 <__hexnan+0x10a>
 800c254:	2300      	movs	r3, #0
 800c256:	f1a4 0904 	sub.w	r9, r4, #4
 800c25a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c25e:	f8cd b008 	str.w	fp, [sp, #8]
 800c262:	464c      	mov	r4, r9
 800c264:	461d      	mov	r5, r3
 800c266:	9903      	ldr	r1, [sp, #12]
 800c268:	e7d7      	b.n	800c21a <__hexnan+0x2e>
 800c26a:	2a29      	cmp	r2, #41	; 0x29
 800c26c:	d155      	bne.n	800c31a <__hexnan+0x12e>
 800c26e:	3102      	adds	r1, #2
 800c270:	f8ca 1000 	str.w	r1, [sl]
 800c274:	f1bb 0f00 	cmp.w	fp, #0
 800c278:	d04f      	beq.n	800c31a <__hexnan+0x12e>
 800c27a:	454c      	cmp	r4, r9
 800c27c:	d206      	bcs.n	800c28c <__hexnan+0xa0>
 800c27e:	2d07      	cmp	r5, #7
 800c280:	dc04      	bgt.n	800c28c <__hexnan+0xa0>
 800c282:	462a      	mov	r2, r5
 800c284:	4649      	mov	r1, r9
 800c286:	4620      	mov	r0, r4
 800c288:	f7ff ff8a 	bl	800c1a0 <L_shift>
 800c28c:	4544      	cmp	r4, r8
 800c28e:	d934      	bls.n	800c2fa <__hexnan+0x10e>
 800c290:	f1a8 0204 	sub.w	r2, r8, #4
 800c294:	4623      	mov	r3, r4
 800c296:	f853 1b04 	ldr.w	r1, [r3], #4
 800c29a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c29e:	429f      	cmp	r7, r3
 800c2a0:	d2f9      	bcs.n	800c296 <__hexnan+0xaa>
 800c2a2:	1b3b      	subs	r3, r7, r4
 800c2a4:	f023 0303 	bic.w	r3, r3, #3
 800c2a8:	3304      	adds	r3, #4
 800c2aa:	3e03      	subs	r6, #3
 800c2ac:	3401      	adds	r4, #1
 800c2ae:	42a6      	cmp	r6, r4
 800c2b0:	bf38      	it	cc
 800c2b2:	2304      	movcc	r3, #4
 800c2b4:	4443      	add	r3, r8
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	f843 2b04 	str.w	r2, [r3], #4
 800c2bc:	429f      	cmp	r7, r3
 800c2be:	d2fb      	bcs.n	800c2b8 <__hexnan+0xcc>
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	b91b      	cbnz	r3, 800c2cc <__hexnan+0xe0>
 800c2c4:	4547      	cmp	r7, r8
 800c2c6:	d126      	bne.n	800c316 <__hexnan+0x12a>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	603b      	str	r3, [r7, #0]
 800c2cc:	2005      	movs	r0, #5
 800c2ce:	e025      	b.n	800c31c <__hexnan+0x130>
 800c2d0:	3501      	adds	r5, #1
 800c2d2:	2d08      	cmp	r5, #8
 800c2d4:	f10b 0b01 	add.w	fp, fp, #1
 800c2d8:	dd06      	ble.n	800c2e8 <__hexnan+0xfc>
 800c2da:	4544      	cmp	r4, r8
 800c2dc:	d9c3      	bls.n	800c266 <__hexnan+0x7a>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c2e4:	2501      	movs	r5, #1
 800c2e6:	3c04      	subs	r4, #4
 800c2e8:	6822      	ldr	r2, [r4, #0]
 800c2ea:	f000 000f 	and.w	r0, r0, #15
 800c2ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c2f2:	6020      	str	r0, [r4, #0]
 800c2f4:	e7b7      	b.n	800c266 <__hexnan+0x7a>
 800c2f6:	2508      	movs	r5, #8
 800c2f8:	e7b5      	b.n	800c266 <__hexnan+0x7a>
 800c2fa:	9b01      	ldr	r3, [sp, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d0df      	beq.n	800c2c0 <__hexnan+0xd4>
 800c300:	f1c3 0320 	rsb	r3, r3, #32
 800c304:	f04f 32ff 	mov.w	r2, #4294967295
 800c308:	40da      	lsrs	r2, r3
 800c30a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c30e:	4013      	ands	r3, r2
 800c310:	f846 3c04 	str.w	r3, [r6, #-4]
 800c314:	e7d4      	b.n	800c2c0 <__hexnan+0xd4>
 800c316:	3f04      	subs	r7, #4
 800c318:	e7d2      	b.n	800c2c0 <__hexnan+0xd4>
 800c31a:	2004      	movs	r0, #4
 800c31c:	b007      	add	sp, #28
 800c31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800c324 <malloc>:
 800c324:	4b02      	ldr	r3, [pc, #8]	; (800c330 <malloc+0xc>)
 800c326:	4601      	mov	r1, r0
 800c328:	6818      	ldr	r0, [r3, #0]
 800c32a:	f000 b823 	b.w	800c374 <_malloc_r>
 800c32e:	bf00      	nop
 800c330:	200001e8 	.word	0x200001e8

0800c334 <sbrk_aligned>:
 800c334:	b570      	push	{r4, r5, r6, lr}
 800c336:	4e0e      	ldr	r6, [pc, #56]	; (800c370 <sbrk_aligned+0x3c>)
 800c338:	460c      	mov	r4, r1
 800c33a:	6831      	ldr	r1, [r6, #0]
 800c33c:	4605      	mov	r5, r0
 800c33e:	b911      	cbnz	r1, 800c346 <sbrk_aligned+0x12>
 800c340:	f001 fa24 	bl	800d78c <_sbrk_r>
 800c344:	6030      	str	r0, [r6, #0]
 800c346:	4621      	mov	r1, r4
 800c348:	4628      	mov	r0, r5
 800c34a:	f001 fa1f 	bl	800d78c <_sbrk_r>
 800c34e:	1c43      	adds	r3, r0, #1
 800c350:	d00a      	beq.n	800c368 <sbrk_aligned+0x34>
 800c352:	1cc4      	adds	r4, r0, #3
 800c354:	f024 0403 	bic.w	r4, r4, #3
 800c358:	42a0      	cmp	r0, r4
 800c35a:	d007      	beq.n	800c36c <sbrk_aligned+0x38>
 800c35c:	1a21      	subs	r1, r4, r0
 800c35e:	4628      	mov	r0, r5
 800c360:	f001 fa14 	bl	800d78c <_sbrk_r>
 800c364:	3001      	adds	r0, #1
 800c366:	d101      	bne.n	800c36c <sbrk_aligned+0x38>
 800c368:	f04f 34ff 	mov.w	r4, #4294967295
 800c36c:	4620      	mov	r0, r4
 800c36e:	bd70      	pop	{r4, r5, r6, pc}
 800c370:	20000800 	.word	0x20000800

0800c374 <_malloc_r>:
 800c374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c378:	1ccd      	adds	r5, r1, #3
 800c37a:	f025 0503 	bic.w	r5, r5, #3
 800c37e:	3508      	adds	r5, #8
 800c380:	2d0c      	cmp	r5, #12
 800c382:	bf38      	it	cc
 800c384:	250c      	movcc	r5, #12
 800c386:	2d00      	cmp	r5, #0
 800c388:	4607      	mov	r7, r0
 800c38a:	db01      	blt.n	800c390 <_malloc_r+0x1c>
 800c38c:	42a9      	cmp	r1, r5
 800c38e:	d905      	bls.n	800c39c <_malloc_r+0x28>
 800c390:	230c      	movs	r3, #12
 800c392:	603b      	str	r3, [r7, #0]
 800c394:	2600      	movs	r6, #0
 800c396:	4630      	mov	r0, r6
 800c398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c39c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c470 <_malloc_r+0xfc>
 800c3a0:	f000 f87a 	bl	800c498 <__malloc_lock>
 800c3a4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3a8:	461c      	mov	r4, r3
 800c3aa:	bb5c      	cbnz	r4, 800c404 <_malloc_r+0x90>
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	4638      	mov	r0, r7
 800c3b0:	f7ff ffc0 	bl	800c334 <sbrk_aligned>
 800c3b4:	1c43      	adds	r3, r0, #1
 800c3b6:	4604      	mov	r4, r0
 800c3b8:	d155      	bne.n	800c466 <_malloc_r+0xf2>
 800c3ba:	f8d8 4000 	ldr.w	r4, [r8]
 800c3be:	4626      	mov	r6, r4
 800c3c0:	2e00      	cmp	r6, #0
 800c3c2:	d145      	bne.n	800c450 <_malloc_r+0xdc>
 800c3c4:	2c00      	cmp	r4, #0
 800c3c6:	d048      	beq.n	800c45a <_malloc_r+0xe6>
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4638      	mov	r0, r7
 800c3ce:	eb04 0903 	add.w	r9, r4, r3
 800c3d2:	f001 f9db 	bl	800d78c <_sbrk_r>
 800c3d6:	4581      	cmp	r9, r0
 800c3d8:	d13f      	bne.n	800c45a <_malloc_r+0xe6>
 800c3da:	6821      	ldr	r1, [r4, #0]
 800c3dc:	1a6d      	subs	r5, r5, r1
 800c3de:	4629      	mov	r1, r5
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	f7ff ffa7 	bl	800c334 <sbrk_aligned>
 800c3e6:	3001      	adds	r0, #1
 800c3e8:	d037      	beq.n	800c45a <_malloc_r+0xe6>
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	442b      	add	r3, r5
 800c3ee:	6023      	str	r3, [r4, #0]
 800c3f0:	f8d8 3000 	ldr.w	r3, [r8]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d038      	beq.n	800c46a <_malloc_r+0xf6>
 800c3f8:	685a      	ldr	r2, [r3, #4]
 800c3fa:	42a2      	cmp	r2, r4
 800c3fc:	d12b      	bne.n	800c456 <_malloc_r+0xe2>
 800c3fe:	2200      	movs	r2, #0
 800c400:	605a      	str	r2, [r3, #4]
 800c402:	e00f      	b.n	800c424 <_malloc_r+0xb0>
 800c404:	6822      	ldr	r2, [r4, #0]
 800c406:	1b52      	subs	r2, r2, r5
 800c408:	d41f      	bmi.n	800c44a <_malloc_r+0xd6>
 800c40a:	2a0b      	cmp	r2, #11
 800c40c:	d917      	bls.n	800c43e <_malloc_r+0xca>
 800c40e:	1961      	adds	r1, r4, r5
 800c410:	42a3      	cmp	r3, r4
 800c412:	6025      	str	r5, [r4, #0]
 800c414:	bf18      	it	ne
 800c416:	6059      	strne	r1, [r3, #4]
 800c418:	6863      	ldr	r3, [r4, #4]
 800c41a:	bf08      	it	eq
 800c41c:	f8c8 1000 	streq.w	r1, [r8]
 800c420:	5162      	str	r2, [r4, r5]
 800c422:	604b      	str	r3, [r1, #4]
 800c424:	4638      	mov	r0, r7
 800c426:	f104 060b 	add.w	r6, r4, #11
 800c42a:	f000 f83b 	bl	800c4a4 <__malloc_unlock>
 800c42e:	f026 0607 	bic.w	r6, r6, #7
 800c432:	1d23      	adds	r3, r4, #4
 800c434:	1af2      	subs	r2, r6, r3
 800c436:	d0ae      	beq.n	800c396 <_malloc_r+0x22>
 800c438:	1b9b      	subs	r3, r3, r6
 800c43a:	50a3      	str	r3, [r4, r2]
 800c43c:	e7ab      	b.n	800c396 <_malloc_r+0x22>
 800c43e:	42a3      	cmp	r3, r4
 800c440:	6862      	ldr	r2, [r4, #4]
 800c442:	d1dd      	bne.n	800c400 <_malloc_r+0x8c>
 800c444:	f8c8 2000 	str.w	r2, [r8]
 800c448:	e7ec      	b.n	800c424 <_malloc_r+0xb0>
 800c44a:	4623      	mov	r3, r4
 800c44c:	6864      	ldr	r4, [r4, #4]
 800c44e:	e7ac      	b.n	800c3aa <_malloc_r+0x36>
 800c450:	4634      	mov	r4, r6
 800c452:	6876      	ldr	r6, [r6, #4]
 800c454:	e7b4      	b.n	800c3c0 <_malloc_r+0x4c>
 800c456:	4613      	mov	r3, r2
 800c458:	e7cc      	b.n	800c3f4 <_malloc_r+0x80>
 800c45a:	230c      	movs	r3, #12
 800c45c:	603b      	str	r3, [r7, #0]
 800c45e:	4638      	mov	r0, r7
 800c460:	f000 f820 	bl	800c4a4 <__malloc_unlock>
 800c464:	e797      	b.n	800c396 <_malloc_r+0x22>
 800c466:	6025      	str	r5, [r4, #0]
 800c468:	e7dc      	b.n	800c424 <_malloc_r+0xb0>
 800c46a:	605b      	str	r3, [r3, #4]
 800c46c:	deff      	udf	#255	; 0xff
 800c46e:	bf00      	nop
 800c470:	200007fc 	.word	0x200007fc

0800c474 <__ascii_mbtowc>:
 800c474:	b082      	sub	sp, #8
 800c476:	b901      	cbnz	r1, 800c47a <__ascii_mbtowc+0x6>
 800c478:	a901      	add	r1, sp, #4
 800c47a:	b142      	cbz	r2, 800c48e <__ascii_mbtowc+0x1a>
 800c47c:	b14b      	cbz	r3, 800c492 <__ascii_mbtowc+0x1e>
 800c47e:	7813      	ldrb	r3, [r2, #0]
 800c480:	600b      	str	r3, [r1, #0]
 800c482:	7812      	ldrb	r2, [r2, #0]
 800c484:	1e10      	subs	r0, r2, #0
 800c486:	bf18      	it	ne
 800c488:	2001      	movne	r0, #1
 800c48a:	b002      	add	sp, #8
 800c48c:	4770      	bx	lr
 800c48e:	4610      	mov	r0, r2
 800c490:	e7fb      	b.n	800c48a <__ascii_mbtowc+0x16>
 800c492:	f06f 0001 	mvn.w	r0, #1
 800c496:	e7f8      	b.n	800c48a <__ascii_mbtowc+0x16>

0800c498 <__malloc_lock>:
 800c498:	4801      	ldr	r0, [pc, #4]	; (800c4a0 <__malloc_lock+0x8>)
 800c49a:	f7fe bd02 	b.w	800aea2 <__retarget_lock_acquire_recursive>
 800c49e:	bf00      	nop
 800c4a0:	200007f8 	.word	0x200007f8

0800c4a4 <__malloc_unlock>:
 800c4a4:	4801      	ldr	r0, [pc, #4]	; (800c4ac <__malloc_unlock+0x8>)
 800c4a6:	f7fe bcfd 	b.w	800aea4 <__retarget_lock_release_recursive>
 800c4aa:	bf00      	nop
 800c4ac:	200007f8 	.word	0x200007f8

0800c4b0 <_Balloc>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	69c6      	ldr	r6, [r0, #28]
 800c4b4:	4604      	mov	r4, r0
 800c4b6:	460d      	mov	r5, r1
 800c4b8:	b976      	cbnz	r6, 800c4d8 <_Balloc+0x28>
 800c4ba:	2010      	movs	r0, #16
 800c4bc:	f7ff ff32 	bl	800c324 <malloc>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	61e0      	str	r0, [r4, #28]
 800c4c4:	b920      	cbnz	r0, 800c4d0 <_Balloc+0x20>
 800c4c6:	4b18      	ldr	r3, [pc, #96]	; (800c528 <_Balloc+0x78>)
 800c4c8:	4818      	ldr	r0, [pc, #96]	; (800c52c <_Balloc+0x7c>)
 800c4ca:	216b      	movs	r1, #107	; 0x6b
 800c4cc:	f001 f96e 	bl	800d7ac <__assert_func>
 800c4d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4d4:	6006      	str	r6, [r0, #0]
 800c4d6:	60c6      	str	r6, [r0, #12]
 800c4d8:	69e6      	ldr	r6, [r4, #28]
 800c4da:	68f3      	ldr	r3, [r6, #12]
 800c4dc:	b183      	cbz	r3, 800c500 <_Balloc+0x50>
 800c4de:	69e3      	ldr	r3, [r4, #28]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4e6:	b9b8      	cbnz	r0, 800c518 <_Balloc+0x68>
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	fa01 f605 	lsl.w	r6, r1, r5
 800c4ee:	1d72      	adds	r2, r6, #5
 800c4f0:	0092      	lsls	r2, r2, #2
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f001 f978 	bl	800d7e8 <_calloc_r>
 800c4f8:	b160      	cbz	r0, 800c514 <_Balloc+0x64>
 800c4fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4fe:	e00e      	b.n	800c51e <_Balloc+0x6e>
 800c500:	2221      	movs	r2, #33	; 0x21
 800c502:	2104      	movs	r1, #4
 800c504:	4620      	mov	r0, r4
 800c506:	f001 f96f 	bl	800d7e8 <_calloc_r>
 800c50a:	69e3      	ldr	r3, [r4, #28]
 800c50c:	60f0      	str	r0, [r6, #12]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1e4      	bne.n	800c4de <_Balloc+0x2e>
 800c514:	2000      	movs	r0, #0
 800c516:	bd70      	pop	{r4, r5, r6, pc}
 800c518:	6802      	ldr	r2, [r0, #0]
 800c51a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c51e:	2300      	movs	r3, #0
 800c520:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c524:	e7f7      	b.n	800c516 <_Balloc+0x66>
 800c526:	bf00      	nop
 800c528:	0800ef06 	.word	0x0800ef06
 800c52c:	0800efe6 	.word	0x0800efe6

0800c530 <_Bfree>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	69c6      	ldr	r6, [r0, #28]
 800c534:	4605      	mov	r5, r0
 800c536:	460c      	mov	r4, r1
 800c538:	b976      	cbnz	r6, 800c558 <_Bfree+0x28>
 800c53a:	2010      	movs	r0, #16
 800c53c:	f7ff fef2 	bl	800c324 <malloc>
 800c540:	4602      	mov	r2, r0
 800c542:	61e8      	str	r0, [r5, #28]
 800c544:	b920      	cbnz	r0, 800c550 <_Bfree+0x20>
 800c546:	4b09      	ldr	r3, [pc, #36]	; (800c56c <_Bfree+0x3c>)
 800c548:	4809      	ldr	r0, [pc, #36]	; (800c570 <_Bfree+0x40>)
 800c54a:	218f      	movs	r1, #143	; 0x8f
 800c54c:	f001 f92e 	bl	800d7ac <__assert_func>
 800c550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c554:	6006      	str	r6, [r0, #0]
 800c556:	60c6      	str	r6, [r0, #12]
 800c558:	b13c      	cbz	r4, 800c56a <_Bfree+0x3a>
 800c55a:	69eb      	ldr	r3, [r5, #28]
 800c55c:	6862      	ldr	r2, [r4, #4]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c564:	6021      	str	r1, [r4, #0]
 800c566:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c56a:	bd70      	pop	{r4, r5, r6, pc}
 800c56c:	0800ef06 	.word	0x0800ef06
 800c570:	0800efe6 	.word	0x0800efe6

0800c574 <__multadd>:
 800c574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c578:	690d      	ldr	r5, [r1, #16]
 800c57a:	4607      	mov	r7, r0
 800c57c:	460c      	mov	r4, r1
 800c57e:	461e      	mov	r6, r3
 800c580:	f101 0c14 	add.w	ip, r1, #20
 800c584:	2000      	movs	r0, #0
 800c586:	f8dc 3000 	ldr.w	r3, [ip]
 800c58a:	b299      	uxth	r1, r3
 800c58c:	fb02 6101 	mla	r1, r2, r1, r6
 800c590:	0c1e      	lsrs	r6, r3, #16
 800c592:	0c0b      	lsrs	r3, r1, #16
 800c594:	fb02 3306 	mla	r3, r2, r6, r3
 800c598:	b289      	uxth	r1, r1
 800c59a:	3001      	adds	r0, #1
 800c59c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c5a0:	4285      	cmp	r5, r0
 800c5a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c5a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c5aa:	dcec      	bgt.n	800c586 <__multadd+0x12>
 800c5ac:	b30e      	cbz	r6, 800c5f2 <__multadd+0x7e>
 800c5ae:	68a3      	ldr	r3, [r4, #8]
 800c5b0:	42ab      	cmp	r3, r5
 800c5b2:	dc19      	bgt.n	800c5e8 <__multadd+0x74>
 800c5b4:	6861      	ldr	r1, [r4, #4]
 800c5b6:	4638      	mov	r0, r7
 800c5b8:	3101      	adds	r1, #1
 800c5ba:	f7ff ff79 	bl	800c4b0 <_Balloc>
 800c5be:	4680      	mov	r8, r0
 800c5c0:	b928      	cbnz	r0, 800c5ce <__multadd+0x5a>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <__multadd+0x84>)
 800c5c6:	480d      	ldr	r0, [pc, #52]	; (800c5fc <__multadd+0x88>)
 800c5c8:	21ba      	movs	r1, #186	; 0xba
 800c5ca:	f001 f8ef 	bl	800d7ac <__assert_func>
 800c5ce:	6922      	ldr	r2, [r4, #16]
 800c5d0:	3202      	adds	r2, #2
 800c5d2:	f104 010c 	add.w	r1, r4, #12
 800c5d6:	0092      	lsls	r2, r2, #2
 800c5d8:	300c      	adds	r0, #12
 800c5da:	f7fe fc64 	bl	800aea6 <memcpy>
 800c5de:	4621      	mov	r1, r4
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff ffa5 	bl	800c530 <_Bfree>
 800c5e6:	4644      	mov	r4, r8
 800c5e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5ec:	3501      	adds	r5, #1
 800c5ee:	615e      	str	r6, [r3, #20]
 800c5f0:	6125      	str	r5, [r4, #16]
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5f8:	0800ef75 	.word	0x0800ef75
 800c5fc:	0800efe6 	.word	0x0800efe6

0800c600 <__s2b>:
 800c600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c604:	460c      	mov	r4, r1
 800c606:	4615      	mov	r5, r2
 800c608:	461f      	mov	r7, r3
 800c60a:	2209      	movs	r2, #9
 800c60c:	3308      	adds	r3, #8
 800c60e:	4606      	mov	r6, r0
 800c610:	fb93 f3f2 	sdiv	r3, r3, r2
 800c614:	2100      	movs	r1, #0
 800c616:	2201      	movs	r2, #1
 800c618:	429a      	cmp	r2, r3
 800c61a:	db09      	blt.n	800c630 <__s2b+0x30>
 800c61c:	4630      	mov	r0, r6
 800c61e:	f7ff ff47 	bl	800c4b0 <_Balloc>
 800c622:	b940      	cbnz	r0, 800c636 <__s2b+0x36>
 800c624:	4602      	mov	r2, r0
 800c626:	4b19      	ldr	r3, [pc, #100]	; (800c68c <__s2b+0x8c>)
 800c628:	4819      	ldr	r0, [pc, #100]	; (800c690 <__s2b+0x90>)
 800c62a:	21d3      	movs	r1, #211	; 0xd3
 800c62c:	f001 f8be 	bl	800d7ac <__assert_func>
 800c630:	0052      	lsls	r2, r2, #1
 800c632:	3101      	adds	r1, #1
 800c634:	e7f0      	b.n	800c618 <__s2b+0x18>
 800c636:	9b08      	ldr	r3, [sp, #32]
 800c638:	6143      	str	r3, [r0, #20]
 800c63a:	2d09      	cmp	r5, #9
 800c63c:	f04f 0301 	mov.w	r3, #1
 800c640:	6103      	str	r3, [r0, #16]
 800c642:	dd16      	ble.n	800c672 <__s2b+0x72>
 800c644:	f104 0909 	add.w	r9, r4, #9
 800c648:	46c8      	mov	r8, r9
 800c64a:	442c      	add	r4, r5
 800c64c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c650:	4601      	mov	r1, r0
 800c652:	3b30      	subs	r3, #48	; 0x30
 800c654:	220a      	movs	r2, #10
 800c656:	4630      	mov	r0, r6
 800c658:	f7ff ff8c 	bl	800c574 <__multadd>
 800c65c:	45a0      	cmp	r8, r4
 800c65e:	d1f5      	bne.n	800c64c <__s2b+0x4c>
 800c660:	f1a5 0408 	sub.w	r4, r5, #8
 800c664:	444c      	add	r4, r9
 800c666:	1b2d      	subs	r5, r5, r4
 800c668:	1963      	adds	r3, r4, r5
 800c66a:	42bb      	cmp	r3, r7
 800c66c:	db04      	blt.n	800c678 <__s2b+0x78>
 800c66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c672:	340a      	adds	r4, #10
 800c674:	2509      	movs	r5, #9
 800c676:	e7f6      	b.n	800c666 <__s2b+0x66>
 800c678:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c67c:	4601      	mov	r1, r0
 800c67e:	3b30      	subs	r3, #48	; 0x30
 800c680:	220a      	movs	r2, #10
 800c682:	4630      	mov	r0, r6
 800c684:	f7ff ff76 	bl	800c574 <__multadd>
 800c688:	e7ee      	b.n	800c668 <__s2b+0x68>
 800c68a:	bf00      	nop
 800c68c:	0800ef75 	.word	0x0800ef75
 800c690:	0800efe6 	.word	0x0800efe6

0800c694 <__hi0bits>:
 800c694:	0c03      	lsrs	r3, r0, #16
 800c696:	041b      	lsls	r3, r3, #16
 800c698:	b9d3      	cbnz	r3, 800c6d0 <__hi0bits+0x3c>
 800c69a:	0400      	lsls	r0, r0, #16
 800c69c:	2310      	movs	r3, #16
 800c69e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c6a2:	bf04      	itt	eq
 800c6a4:	0200      	lsleq	r0, r0, #8
 800c6a6:	3308      	addeq	r3, #8
 800c6a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c6ac:	bf04      	itt	eq
 800c6ae:	0100      	lsleq	r0, r0, #4
 800c6b0:	3304      	addeq	r3, #4
 800c6b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c6b6:	bf04      	itt	eq
 800c6b8:	0080      	lsleq	r0, r0, #2
 800c6ba:	3302      	addeq	r3, #2
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	db05      	blt.n	800c6cc <__hi0bits+0x38>
 800c6c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c6c4:	f103 0301 	add.w	r3, r3, #1
 800c6c8:	bf08      	it	eq
 800c6ca:	2320      	moveq	r3, #32
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	4770      	bx	lr
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	e7e4      	b.n	800c69e <__hi0bits+0xa>

0800c6d4 <__lo0bits>:
 800c6d4:	6803      	ldr	r3, [r0, #0]
 800c6d6:	f013 0207 	ands.w	r2, r3, #7
 800c6da:	d00c      	beq.n	800c6f6 <__lo0bits+0x22>
 800c6dc:	07d9      	lsls	r1, r3, #31
 800c6de:	d422      	bmi.n	800c726 <__lo0bits+0x52>
 800c6e0:	079a      	lsls	r2, r3, #30
 800c6e2:	bf49      	itett	mi
 800c6e4:	085b      	lsrmi	r3, r3, #1
 800c6e6:	089b      	lsrpl	r3, r3, #2
 800c6e8:	6003      	strmi	r3, [r0, #0]
 800c6ea:	2201      	movmi	r2, #1
 800c6ec:	bf5c      	itt	pl
 800c6ee:	6003      	strpl	r3, [r0, #0]
 800c6f0:	2202      	movpl	r2, #2
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	4770      	bx	lr
 800c6f6:	b299      	uxth	r1, r3
 800c6f8:	b909      	cbnz	r1, 800c6fe <__lo0bits+0x2a>
 800c6fa:	0c1b      	lsrs	r3, r3, #16
 800c6fc:	2210      	movs	r2, #16
 800c6fe:	b2d9      	uxtb	r1, r3
 800c700:	b909      	cbnz	r1, 800c706 <__lo0bits+0x32>
 800c702:	3208      	adds	r2, #8
 800c704:	0a1b      	lsrs	r3, r3, #8
 800c706:	0719      	lsls	r1, r3, #28
 800c708:	bf04      	itt	eq
 800c70a:	091b      	lsreq	r3, r3, #4
 800c70c:	3204      	addeq	r2, #4
 800c70e:	0799      	lsls	r1, r3, #30
 800c710:	bf04      	itt	eq
 800c712:	089b      	lsreq	r3, r3, #2
 800c714:	3202      	addeq	r2, #2
 800c716:	07d9      	lsls	r1, r3, #31
 800c718:	d403      	bmi.n	800c722 <__lo0bits+0x4e>
 800c71a:	085b      	lsrs	r3, r3, #1
 800c71c:	f102 0201 	add.w	r2, r2, #1
 800c720:	d003      	beq.n	800c72a <__lo0bits+0x56>
 800c722:	6003      	str	r3, [r0, #0]
 800c724:	e7e5      	b.n	800c6f2 <__lo0bits+0x1e>
 800c726:	2200      	movs	r2, #0
 800c728:	e7e3      	b.n	800c6f2 <__lo0bits+0x1e>
 800c72a:	2220      	movs	r2, #32
 800c72c:	e7e1      	b.n	800c6f2 <__lo0bits+0x1e>
	...

0800c730 <__i2b>:
 800c730:	b510      	push	{r4, lr}
 800c732:	460c      	mov	r4, r1
 800c734:	2101      	movs	r1, #1
 800c736:	f7ff febb 	bl	800c4b0 <_Balloc>
 800c73a:	4602      	mov	r2, r0
 800c73c:	b928      	cbnz	r0, 800c74a <__i2b+0x1a>
 800c73e:	4b05      	ldr	r3, [pc, #20]	; (800c754 <__i2b+0x24>)
 800c740:	4805      	ldr	r0, [pc, #20]	; (800c758 <__i2b+0x28>)
 800c742:	f240 1145 	movw	r1, #325	; 0x145
 800c746:	f001 f831 	bl	800d7ac <__assert_func>
 800c74a:	2301      	movs	r3, #1
 800c74c:	6144      	str	r4, [r0, #20]
 800c74e:	6103      	str	r3, [r0, #16]
 800c750:	bd10      	pop	{r4, pc}
 800c752:	bf00      	nop
 800c754:	0800ef75 	.word	0x0800ef75
 800c758:	0800efe6 	.word	0x0800efe6

0800c75c <__multiply>:
 800c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	4691      	mov	r9, r2
 800c762:	690a      	ldr	r2, [r1, #16]
 800c764:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c768:	429a      	cmp	r2, r3
 800c76a:	bfb8      	it	lt
 800c76c:	460b      	movlt	r3, r1
 800c76e:	460c      	mov	r4, r1
 800c770:	bfbc      	itt	lt
 800c772:	464c      	movlt	r4, r9
 800c774:	4699      	movlt	r9, r3
 800c776:	6927      	ldr	r7, [r4, #16]
 800c778:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c77c:	68a3      	ldr	r3, [r4, #8]
 800c77e:	6861      	ldr	r1, [r4, #4]
 800c780:	eb07 060a 	add.w	r6, r7, sl
 800c784:	42b3      	cmp	r3, r6
 800c786:	b085      	sub	sp, #20
 800c788:	bfb8      	it	lt
 800c78a:	3101      	addlt	r1, #1
 800c78c:	f7ff fe90 	bl	800c4b0 <_Balloc>
 800c790:	b930      	cbnz	r0, 800c7a0 <__multiply+0x44>
 800c792:	4602      	mov	r2, r0
 800c794:	4b44      	ldr	r3, [pc, #272]	; (800c8a8 <__multiply+0x14c>)
 800c796:	4845      	ldr	r0, [pc, #276]	; (800c8ac <__multiply+0x150>)
 800c798:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c79c:	f001 f806 	bl	800d7ac <__assert_func>
 800c7a0:	f100 0514 	add.w	r5, r0, #20
 800c7a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c7a8:	462b      	mov	r3, r5
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	4543      	cmp	r3, r8
 800c7ae:	d321      	bcc.n	800c7f4 <__multiply+0x98>
 800c7b0:	f104 0314 	add.w	r3, r4, #20
 800c7b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c7b8:	f109 0314 	add.w	r3, r9, #20
 800c7bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c7c0:	9202      	str	r2, [sp, #8]
 800c7c2:	1b3a      	subs	r2, r7, r4
 800c7c4:	3a15      	subs	r2, #21
 800c7c6:	f022 0203 	bic.w	r2, r2, #3
 800c7ca:	3204      	adds	r2, #4
 800c7cc:	f104 0115 	add.w	r1, r4, #21
 800c7d0:	428f      	cmp	r7, r1
 800c7d2:	bf38      	it	cc
 800c7d4:	2204      	movcc	r2, #4
 800c7d6:	9201      	str	r2, [sp, #4]
 800c7d8:	9a02      	ldr	r2, [sp, #8]
 800c7da:	9303      	str	r3, [sp, #12]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d80c      	bhi.n	800c7fa <__multiply+0x9e>
 800c7e0:	2e00      	cmp	r6, #0
 800c7e2:	dd03      	ble.n	800c7ec <__multiply+0x90>
 800c7e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d05b      	beq.n	800c8a4 <__multiply+0x148>
 800c7ec:	6106      	str	r6, [r0, #16]
 800c7ee:	b005      	add	sp, #20
 800c7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f4:	f843 2b04 	str.w	r2, [r3], #4
 800c7f8:	e7d8      	b.n	800c7ac <__multiply+0x50>
 800c7fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800c7fe:	f1ba 0f00 	cmp.w	sl, #0
 800c802:	d024      	beq.n	800c84e <__multiply+0xf2>
 800c804:	f104 0e14 	add.w	lr, r4, #20
 800c808:	46a9      	mov	r9, r5
 800c80a:	f04f 0c00 	mov.w	ip, #0
 800c80e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c812:	f8d9 1000 	ldr.w	r1, [r9]
 800c816:	fa1f fb82 	uxth.w	fp, r2
 800c81a:	b289      	uxth	r1, r1
 800c81c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c820:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c824:	f8d9 2000 	ldr.w	r2, [r9]
 800c828:	4461      	add	r1, ip
 800c82a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c82e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c832:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c836:	b289      	uxth	r1, r1
 800c838:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c83c:	4577      	cmp	r7, lr
 800c83e:	f849 1b04 	str.w	r1, [r9], #4
 800c842:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c846:	d8e2      	bhi.n	800c80e <__multiply+0xb2>
 800c848:	9a01      	ldr	r2, [sp, #4]
 800c84a:	f845 c002 	str.w	ip, [r5, r2]
 800c84e:	9a03      	ldr	r2, [sp, #12]
 800c850:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c854:	3304      	adds	r3, #4
 800c856:	f1b9 0f00 	cmp.w	r9, #0
 800c85a:	d021      	beq.n	800c8a0 <__multiply+0x144>
 800c85c:	6829      	ldr	r1, [r5, #0]
 800c85e:	f104 0c14 	add.w	ip, r4, #20
 800c862:	46ae      	mov	lr, r5
 800c864:	f04f 0a00 	mov.w	sl, #0
 800c868:	f8bc b000 	ldrh.w	fp, [ip]
 800c86c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c870:	fb09 220b 	mla	r2, r9, fp, r2
 800c874:	4452      	add	r2, sl
 800c876:	b289      	uxth	r1, r1
 800c878:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c87c:	f84e 1b04 	str.w	r1, [lr], #4
 800c880:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c884:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c888:	f8be 1000 	ldrh.w	r1, [lr]
 800c88c:	fb09 110a 	mla	r1, r9, sl, r1
 800c890:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c894:	4567      	cmp	r7, ip
 800c896:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c89a:	d8e5      	bhi.n	800c868 <__multiply+0x10c>
 800c89c:	9a01      	ldr	r2, [sp, #4]
 800c89e:	50a9      	str	r1, [r5, r2]
 800c8a0:	3504      	adds	r5, #4
 800c8a2:	e799      	b.n	800c7d8 <__multiply+0x7c>
 800c8a4:	3e01      	subs	r6, #1
 800c8a6:	e79b      	b.n	800c7e0 <__multiply+0x84>
 800c8a8:	0800ef75 	.word	0x0800ef75
 800c8ac:	0800efe6 	.word	0x0800efe6

0800c8b0 <__pow5mult>:
 800c8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8b4:	4615      	mov	r5, r2
 800c8b6:	f012 0203 	ands.w	r2, r2, #3
 800c8ba:	4606      	mov	r6, r0
 800c8bc:	460f      	mov	r7, r1
 800c8be:	d007      	beq.n	800c8d0 <__pow5mult+0x20>
 800c8c0:	4c25      	ldr	r4, [pc, #148]	; (800c958 <__pow5mult+0xa8>)
 800c8c2:	3a01      	subs	r2, #1
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c8ca:	f7ff fe53 	bl	800c574 <__multadd>
 800c8ce:	4607      	mov	r7, r0
 800c8d0:	10ad      	asrs	r5, r5, #2
 800c8d2:	d03d      	beq.n	800c950 <__pow5mult+0xa0>
 800c8d4:	69f4      	ldr	r4, [r6, #28]
 800c8d6:	b97c      	cbnz	r4, 800c8f8 <__pow5mult+0x48>
 800c8d8:	2010      	movs	r0, #16
 800c8da:	f7ff fd23 	bl	800c324 <malloc>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	61f0      	str	r0, [r6, #28]
 800c8e2:	b928      	cbnz	r0, 800c8f0 <__pow5mult+0x40>
 800c8e4:	4b1d      	ldr	r3, [pc, #116]	; (800c95c <__pow5mult+0xac>)
 800c8e6:	481e      	ldr	r0, [pc, #120]	; (800c960 <__pow5mult+0xb0>)
 800c8e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c8ec:	f000 ff5e 	bl	800d7ac <__assert_func>
 800c8f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8f4:	6004      	str	r4, [r0, #0]
 800c8f6:	60c4      	str	r4, [r0, #12]
 800c8f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c8fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c900:	b94c      	cbnz	r4, 800c916 <__pow5mult+0x66>
 800c902:	f240 2171 	movw	r1, #625	; 0x271
 800c906:	4630      	mov	r0, r6
 800c908:	f7ff ff12 	bl	800c730 <__i2b>
 800c90c:	2300      	movs	r3, #0
 800c90e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c912:	4604      	mov	r4, r0
 800c914:	6003      	str	r3, [r0, #0]
 800c916:	f04f 0900 	mov.w	r9, #0
 800c91a:	07eb      	lsls	r3, r5, #31
 800c91c:	d50a      	bpl.n	800c934 <__pow5mult+0x84>
 800c91e:	4639      	mov	r1, r7
 800c920:	4622      	mov	r2, r4
 800c922:	4630      	mov	r0, r6
 800c924:	f7ff ff1a 	bl	800c75c <__multiply>
 800c928:	4639      	mov	r1, r7
 800c92a:	4680      	mov	r8, r0
 800c92c:	4630      	mov	r0, r6
 800c92e:	f7ff fdff 	bl	800c530 <_Bfree>
 800c932:	4647      	mov	r7, r8
 800c934:	106d      	asrs	r5, r5, #1
 800c936:	d00b      	beq.n	800c950 <__pow5mult+0xa0>
 800c938:	6820      	ldr	r0, [r4, #0]
 800c93a:	b938      	cbnz	r0, 800c94c <__pow5mult+0x9c>
 800c93c:	4622      	mov	r2, r4
 800c93e:	4621      	mov	r1, r4
 800c940:	4630      	mov	r0, r6
 800c942:	f7ff ff0b 	bl	800c75c <__multiply>
 800c946:	6020      	str	r0, [r4, #0]
 800c948:	f8c0 9000 	str.w	r9, [r0]
 800c94c:	4604      	mov	r4, r0
 800c94e:	e7e4      	b.n	800c91a <__pow5mult+0x6a>
 800c950:	4638      	mov	r0, r7
 800c952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c956:	bf00      	nop
 800c958:	0800f130 	.word	0x0800f130
 800c95c:	0800ef06 	.word	0x0800ef06
 800c960:	0800efe6 	.word	0x0800efe6

0800c964 <__lshift>:
 800c964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c968:	460c      	mov	r4, r1
 800c96a:	6849      	ldr	r1, [r1, #4]
 800c96c:	6923      	ldr	r3, [r4, #16]
 800c96e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c972:	68a3      	ldr	r3, [r4, #8]
 800c974:	4607      	mov	r7, r0
 800c976:	4691      	mov	r9, r2
 800c978:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c97c:	f108 0601 	add.w	r6, r8, #1
 800c980:	42b3      	cmp	r3, r6
 800c982:	db0b      	blt.n	800c99c <__lshift+0x38>
 800c984:	4638      	mov	r0, r7
 800c986:	f7ff fd93 	bl	800c4b0 <_Balloc>
 800c98a:	4605      	mov	r5, r0
 800c98c:	b948      	cbnz	r0, 800c9a2 <__lshift+0x3e>
 800c98e:	4602      	mov	r2, r0
 800c990:	4b28      	ldr	r3, [pc, #160]	; (800ca34 <__lshift+0xd0>)
 800c992:	4829      	ldr	r0, [pc, #164]	; (800ca38 <__lshift+0xd4>)
 800c994:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c998:	f000 ff08 	bl	800d7ac <__assert_func>
 800c99c:	3101      	adds	r1, #1
 800c99e:	005b      	lsls	r3, r3, #1
 800c9a0:	e7ee      	b.n	800c980 <__lshift+0x1c>
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	f100 0114 	add.w	r1, r0, #20
 800c9a8:	f100 0210 	add.w	r2, r0, #16
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	4553      	cmp	r3, sl
 800c9b0:	db33      	blt.n	800ca1a <__lshift+0xb6>
 800c9b2:	6920      	ldr	r0, [r4, #16]
 800c9b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c9b8:	f104 0314 	add.w	r3, r4, #20
 800c9bc:	f019 091f 	ands.w	r9, r9, #31
 800c9c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c9c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c9c8:	d02b      	beq.n	800ca22 <__lshift+0xbe>
 800c9ca:	f1c9 0e20 	rsb	lr, r9, #32
 800c9ce:	468a      	mov	sl, r1
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	6818      	ldr	r0, [r3, #0]
 800c9d4:	fa00 f009 	lsl.w	r0, r0, r9
 800c9d8:	4310      	orrs	r0, r2
 800c9da:	f84a 0b04 	str.w	r0, [sl], #4
 800c9de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e2:	459c      	cmp	ip, r3
 800c9e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c9e8:	d8f3      	bhi.n	800c9d2 <__lshift+0x6e>
 800c9ea:	ebac 0304 	sub.w	r3, ip, r4
 800c9ee:	3b15      	subs	r3, #21
 800c9f0:	f023 0303 	bic.w	r3, r3, #3
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	f104 0015 	add.w	r0, r4, #21
 800c9fa:	4584      	cmp	ip, r0
 800c9fc:	bf38      	it	cc
 800c9fe:	2304      	movcc	r3, #4
 800ca00:	50ca      	str	r2, [r1, r3]
 800ca02:	b10a      	cbz	r2, 800ca08 <__lshift+0xa4>
 800ca04:	f108 0602 	add.w	r6, r8, #2
 800ca08:	3e01      	subs	r6, #1
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	612e      	str	r6, [r5, #16]
 800ca0e:	4621      	mov	r1, r4
 800ca10:	f7ff fd8e 	bl	800c530 <_Bfree>
 800ca14:	4628      	mov	r0, r5
 800ca16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ca1e:	3301      	adds	r3, #1
 800ca20:	e7c5      	b.n	800c9ae <__lshift+0x4a>
 800ca22:	3904      	subs	r1, #4
 800ca24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca28:	f841 2f04 	str.w	r2, [r1, #4]!
 800ca2c:	459c      	cmp	ip, r3
 800ca2e:	d8f9      	bhi.n	800ca24 <__lshift+0xc0>
 800ca30:	e7ea      	b.n	800ca08 <__lshift+0xa4>
 800ca32:	bf00      	nop
 800ca34:	0800ef75 	.word	0x0800ef75
 800ca38:	0800efe6 	.word	0x0800efe6

0800ca3c <__mcmp>:
 800ca3c:	b530      	push	{r4, r5, lr}
 800ca3e:	6902      	ldr	r2, [r0, #16]
 800ca40:	690c      	ldr	r4, [r1, #16]
 800ca42:	1b12      	subs	r2, r2, r4
 800ca44:	d10e      	bne.n	800ca64 <__mcmp+0x28>
 800ca46:	f100 0314 	add.w	r3, r0, #20
 800ca4a:	3114      	adds	r1, #20
 800ca4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ca50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ca54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ca58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ca5c:	42a5      	cmp	r5, r4
 800ca5e:	d003      	beq.n	800ca68 <__mcmp+0x2c>
 800ca60:	d305      	bcc.n	800ca6e <__mcmp+0x32>
 800ca62:	2201      	movs	r2, #1
 800ca64:	4610      	mov	r0, r2
 800ca66:	bd30      	pop	{r4, r5, pc}
 800ca68:	4283      	cmp	r3, r0
 800ca6a:	d3f3      	bcc.n	800ca54 <__mcmp+0x18>
 800ca6c:	e7fa      	b.n	800ca64 <__mcmp+0x28>
 800ca6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ca72:	e7f7      	b.n	800ca64 <__mcmp+0x28>

0800ca74 <__mdiff>:
 800ca74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca78:	460c      	mov	r4, r1
 800ca7a:	4606      	mov	r6, r0
 800ca7c:	4611      	mov	r1, r2
 800ca7e:	4620      	mov	r0, r4
 800ca80:	4690      	mov	r8, r2
 800ca82:	f7ff ffdb 	bl	800ca3c <__mcmp>
 800ca86:	1e05      	subs	r5, r0, #0
 800ca88:	d110      	bne.n	800caac <__mdiff+0x38>
 800ca8a:	4629      	mov	r1, r5
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	f7ff fd0f 	bl	800c4b0 <_Balloc>
 800ca92:	b930      	cbnz	r0, 800caa2 <__mdiff+0x2e>
 800ca94:	4b3a      	ldr	r3, [pc, #232]	; (800cb80 <__mdiff+0x10c>)
 800ca96:	4602      	mov	r2, r0
 800ca98:	f240 2137 	movw	r1, #567	; 0x237
 800ca9c:	4839      	ldr	r0, [pc, #228]	; (800cb84 <__mdiff+0x110>)
 800ca9e:	f000 fe85 	bl	800d7ac <__assert_func>
 800caa2:	2301      	movs	r3, #1
 800caa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800caa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caac:	bfa4      	itt	ge
 800caae:	4643      	movge	r3, r8
 800cab0:	46a0      	movge	r8, r4
 800cab2:	4630      	mov	r0, r6
 800cab4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cab8:	bfa6      	itte	ge
 800caba:	461c      	movge	r4, r3
 800cabc:	2500      	movge	r5, #0
 800cabe:	2501      	movlt	r5, #1
 800cac0:	f7ff fcf6 	bl	800c4b0 <_Balloc>
 800cac4:	b920      	cbnz	r0, 800cad0 <__mdiff+0x5c>
 800cac6:	4b2e      	ldr	r3, [pc, #184]	; (800cb80 <__mdiff+0x10c>)
 800cac8:	4602      	mov	r2, r0
 800caca:	f240 2145 	movw	r1, #581	; 0x245
 800cace:	e7e5      	b.n	800ca9c <__mdiff+0x28>
 800cad0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cad4:	6926      	ldr	r6, [r4, #16]
 800cad6:	60c5      	str	r5, [r0, #12]
 800cad8:	f104 0914 	add.w	r9, r4, #20
 800cadc:	f108 0514 	add.w	r5, r8, #20
 800cae0:	f100 0e14 	add.w	lr, r0, #20
 800cae4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cae8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800caec:	f108 0210 	add.w	r2, r8, #16
 800caf0:	46f2      	mov	sl, lr
 800caf2:	2100      	movs	r1, #0
 800caf4:	f859 3b04 	ldr.w	r3, [r9], #4
 800caf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cafc:	fa11 f88b 	uxtah	r8, r1, fp
 800cb00:	b299      	uxth	r1, r3
 800cb02:	0c1b      	lsrs	r3, r3, #16
 800cb04:	eba8 0801 	sub.w	r8, r8, r1
 800cb08:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cb0c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cb10:	fa1f f888 	uxth.w	r8, r8
 800cb14:	1419      	asrs	r1, r3, #16
 800cb16:	454e      	cmp	r6, r9
 800cb18:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cb1c:	f84a 3b04 	str.w	r3, [sl], #4
 800cb20:	d8e8      	bhi.n	800caf4 <__mdiff+0x80>
 800cb22:	1b33      	subs	r3, r6, r4
 800cb24:	3b15      	subs	r3, #21
 800cb26:	f023 0303 	bic.w	r3, r3, #3
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	3415      	adds	r4, #21
 800cb2e:	42a6      	cmp	r6, r4
 800cb30:	bf38      	it	cc
 800cb32:	2304      	movcc	r3, #4
 800cb34:	441d      	add	r5, r3
 800cb36:	4473      	add	r3, lr
 800cb38:	469e      	mov	lr, r3
 800cb3a:	462e      	mov	r6, r5
 800cb3c:	4566      	cmp	r6, ip
 800cb3e:	d30e      	bcc.n	800cb5e <__mdiff+0xea>
 800cb40:	f10c 0203 	add.w	r2, ip, #3
 800cb44:	1b52      	subs	r2, r2, r5
 800cb46:	f022 0203 	bic.w	r2, r2, #3
 800cb4a:	3d03      	subs	r5, #3
 800cb4c:	45ac      	cmp	ip, r5
 800cb4e:	bf38      	it	cc
 800cb50:	2200      	movcc	r2, #0
 800cb52:	4413      	add	r3, r2
 800cb54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb58:	b17a      	cbz	r2, 800cb7a <__mdiff+0x106>
 800cb5a:	6107      	str	r7, [r0, #16]
 800cb5c:	e7a4      	b.n	800caa8 <__mdiff+0x34>
 800cb5e:	f856 8b04 	ldr.w	r8, [r6], #4
 800cb62:	fa11 f288 	uxtah	r2, r1, r8
 800cb66:	1414      	asrs	r4, r2, #16
 800cb68:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cb6c:	b292      	uxth	r2, r2
 800cb6e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cb72:	f84e 2b04 	str.w	r2, [lr], #4
 800cb76:	1421      	asrs	r1, r4, #16
 800cb78:	e7e0      	b.n	800cb3c <__mdiff+0xc8>
 800cb7a:	3f01      	subs	r7, #1
 800cb7c:	e7ea      	b.n	800cb54 <__mdiff+0xe0>
 800cb7e:	bf00      	nop
 800cb80:	0800ef75 	.word	0x0800ef75
 800cb84:	0800efe6 	.word	0x0800efe6

0800cb88 <__ulp>:
 800cb88:	b082      	sub	sp, #8
 800cb8a:	ed8d 0b00 	vstr	d0, [sp]
 800cb8e:	9a01      	ldr	r2, [sp, #4]
 800cb90:	4b0f      	ldr	r3, [pc, #60]	; (800cbd0 <__ulp+0x48>)
 800cb92:	4013      	ands	r3, r2
 800cb94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	dc08      	bgt.n	800cbae <__ulp+0x26>
 800cb9c:	425b      	negs	r3, r3
 800cb9e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800cba2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cba6:	da04      	bge.n	800cbb2 <__ulp+0x2a>
 800cba8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cbac:	4113      	asrs	r3, r2
 800cbae:	2200      	movs	r2, #0
 800cbb0:	e008      	b.n	800cbc4 <__ulp+0x3c>
 800cbb2:	f1a2 0314 	sub.w	r3, r2, #20
 800cbb6:	2b1e      	cmp	r3, #30
 800cbb8:	bfda      	itte	le
 800cbba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800cbbe:	40da      	lsrle	r2, r3
 800cbc0:	2201      	movgt	r2, #1
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	4610      	mov	r0, r2
 800cbc8:	ec41 0b10 	vmov	d0, r0, r1
 800cbcc:	b002      	add	sp, #8
 800cbce:	4770      	bx	lr
 800cbd0:	7ff00000 	.word	0x7ff00000

0800cbd4 <__b2d>:
 800cbd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd8:	6906      	ldr	r6, [r0, #16]
 800cbda:	f100 0814 	add.w	r8, r0, #20
 800cbde:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800cbe2:	1f37      	subs	r7, r6, #4
 800cbe4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cbe8:	4610      	mov	r0, r2
 800cbea:	f7ff fd53 	bl	800c694 <__hi0bits>
 800cbee:	f1c0 0320 	rsb	r3, r0, #32
 800cbf2:	280a      	cmp	r0, #10
 800cbf4:	600b      	str	r3, [r1, #0]
 800cbf6:	491b      	ldr	r1, [pc, #108]	; (800cc64 <__b2d+0x90>)
 800cbf8:	dc15      	bgt.n	800cc26 <__b2d+0x52>
 800cbfa:	f1c0 0c0b 	rsb	ip, r0, #11
 800cbfe:	fa22 f30c 	lsr.w	r3, r2, ip
 800cc02:	45b8      	cmp	r8, r7
 800cc04:	ea43 0501 	orr.w	r5, r3, r1
 800cc08:	bf34      	ite	cc
 800cc0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc0e:	2300      	movcs	r3, #0
 800cc10:	3015      	adds	r0, #21
 800cc12:	fa02 f000 	lsl.w	r0, r2, r0
 800cc16:	fa23 f30c 	lsr.w	r3, r3, ip
 800cc1a:	4303      	orrs	r3, r0
 800cc1c:	461c      	mov	r4, r3
 800cc1e:	ec45 4b10 	vmov	d0, r4, r5
 800cc22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc26:	45b8      	cmp	r8, r7
 800cc28:	bf3a      	itte	cc
 800cc2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800cc2e:	f1a6 0708 	subcc.w	r7, r6, #8
 800cc32:	2300      	movcs	r3, #0
 800cc34:	380b      	subs	r0, #11
 800cc36:	d012      	beq.n	800cc5e <__b2d+0x8a>
 800cc38:	f1c0 0120 	rsb	r1, r0, #32
 800cc3c:	fa23 f401 	lsr.w	r4, r3, r1
 800cc40:	4082      	lsls	r2, r0
 800cc42:	4322      	orrs	r2, r4
 800cc44:	4547      	cmp	r7, r8
 800cc46:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800cc4a:	bf8c      	ite	hi
 800cc4c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800cc50:	2200      	movls	r2, #0
 800cc52:	4083      	lsls	r3, r0
 800cc54:	40ca      	lsrs	r2, r1
 800cc56:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	e7de      	b.n	800cc1c <__b2d+0x48>
 800cc5e:	ea42 0501 	orr.w	r5, r2, r1
 800cc62:	e7db      	b.n	800cc1c <__b2d+0x48>
 800cc64:	3ff00000 	.word	0x3ff00000

0800cc68 <__d2b>:
 800cc68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc6c:	460f      	mov	r7, r1
 800cc6e:	2101      	movs	r1, #1
 800cc70:	ec59 8b10 	vmov	r8, r9, d0
 800cc74:	4616      	mov	r6, r2
 800cc76:	f7ff fc1b 	bl	800c4b0 <_Balloc>
 800cc7a:	4604      	mov	r4, r0
 800cc7c:	b930      	cbnz	r0, 800cc8c <__d2b+0x24>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	4b24      	ldr	r3, [pc, #144]	; (800cd14 <__d2b+0xac>)
 800cc82:	4825      	ldr	r0, [pc, #148]	; (800cd18 <__d2b+0xb0>)
 800cc84:	f240 310f 	movw	r1, #783	; 0x30f
 800cc88:	f000 fd90 	bl	800d7ac <__assert_func>
 800cc8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cc90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc94:	bb2d      	cbnz	r5, 800cce2 <__d2b+0x7a>
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	f1b8 0300 	subs.w	r3, r8, #0
 800cc9c:	d026      	beq.n	800ccec <__d2b+0x84>
 800cc9e:	4668      	mov	r0, sp
 800cca0:	9300      	str	r3, [sp, #0]
 800cca2:	f7ff fd17 	bl	800c6d4 <__lo0bits>
 800cca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ccaa:	b1e8      	cbz	r0, 800cce8 <__d2b+0x80>
 800ccac:	f1c0 0320 	rsb	r3, r0, #32
 800ccb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb4:	430b      	orrs	r3, r1
 800ccb6:	40c2      	lsrs	r2, r0
 800ccb8:	6163      	str	r3, [r4, #20]
 800ccba:	9201      	str	r2, [sp, #4]
 800ccbc:	9b01      	ldr	r3, [sp, #4]
 800ccbe:	61a3      	str	r3, [r4, #24]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	bf14      	ite	ne
 800ccc4:	2202      	movne	r2, #2
 800ccc6:	2201      	moveq	r2, #1
 800ccc8:	6122      	str	r2, [r4, #16]
 800ccca:	b1bd      	cbz	r5, 800ccfc <__d2b+0x94>
 800cccc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccd0:	4405      	add	r5, r0
 800ccd2:	603d      	str	r5, [r7, #0]
 800ccd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccd8:	6030      	str	r0, [r6, #0]
 800ccda:	4620      	mov	r0, r4
 800ccdc:	b003      	add	sp, #12
 800ccde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cce6:	e7d6      	b.n	800cc96 <__d2b+0x2e>
 800cce8:	6161      	str	r1, [r4, #20]
 800ccea:	e7e7      	b.n	800ccbc <__d2b+0x54>
 800ccec:	a801      	add	r0, sp, #4
 800ccee:	f7ff fcf1 	bl	800c6d4 <__lo0bits>
 800ccf2:	9b01      	ldr	r3, [sp, #4]
 800ccf4:	6163      	str	r3, [r4, #20]
 800ccf6:	3020      	adds	r0, #32
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	e7e5      	b.n	800ccc8 <__d2b+0x60>
 800ccfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd04:	6038      	str	r0, [r7, #0]
 800cd06:	6918      	ldr	r0, [r3, #16]
 800cd08:	f7ff fcc4 	bl	800c694 <__hi0bits>
 800cd0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd10:	e7e2      	b.n	800ccd8 <__d2b+0x70>
 800cd12:	bf00      	nop
 800cd14:	0800ef75 	.word	0x0800ef75
 800cd18:	0800efe6 	.word	0x0800efe6

0800cd1c <__ratio>:
 800cd1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd20:	4688      	mov	r8, r1
 800cd22:	4669      	mov	r1, sp
 800cd24:	4681      	mov	r9, r0
 800cd26:	f7ff ff55 	bl	800cbd4 <__b2d>
 800cd2a:	a901      	add	r1, sp, #4
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	ec55 4b10 	vmov	r4, r5, d0
 800cd32:	f7ff ff4f 	bl	800cbd4 <__b2d>
 800cd36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cd3e:	eba3 0c02 	sub.w	ip, r3, r2
 800cd42:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cd46:	1a9b      	subs	r3, r3, r2
 800cd48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cd4c:	ec51 0b10 	vmov	r0, r1, d0
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	bfd6      	itet	le
 800cd54:	460a      	movle	r2, r1
 800cd56:	462a      	movgt	r2, r5
 800cd58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cd5c:	468b      	mov	fp, r1
 800cd5e:	462f      	mov	r7, r5
 800cd60:	bfd4      	ite	le
 800cd62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cd66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cd6a:	4620      	mov	r0, r4
 800cd6c:	ee10 2a10 	vmov	r2, s0
 800cd70:	465b      	mov	r3, fp
 800cd72:	4639      	mov	r1, r7
 800cd74:	f7f3 fd6a 	bl	800084c <__aeabi_ddiv>
 800cd78:	ec41 0b10 	vmov	d0, r0, r1
 800cd7c:	b003      	add	sp, #12
 800cd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cd82 <__copybits>:
 800cd82:	3901      	subs	r1, #1
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	1149      	asrs	r1, r1, #5
 800cd88:	6914      	ldr	r4, [r2, #16]
 800cd8a:	3101      	adds	r1, #1
 800cd8c:	f102 0314 	add.w	r3, r2, #20
 800cd90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cd94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd98:	1f05      	subs	r5, r0, #4
 800cd9a:	42a3      	cmp	r3, r4
 800cd9c:	d30c      	bcc.n	800cdb8 <__copybits+0x36>
 800cd9e:	1aa3      	subs	r3, r4, r2
 800cda0:	3b11      	subs	r3, #17
 800cda2:	f023 0303 	bic.w	r3, r3, #3
 800cda6:	3211      	adds	r2, #17
 800cda8:	42a2      	cmp	r2, r4
 800cdaa:	bf88      	it	hi
 800cdac:	2300      	movhi	r3, #0
 800cdae:	4418      	add	r0, r3
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4288      	cmp	r0, r1
 800cdb4:	d305      	bcc.n	800cdc2 <__copybits+0x40>
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	f853 6b04 	ldr.w	r6, [r3], #4
 800cdbc:	f845 6f04 	str.w	r6, [r5, #4]!
 800cdc0:	e7eb      	b.n	800cd9a <__copybits+0x18>
 800cdc2:	f840 3b04 	str.w	r3, [r0], #4
 800cdc6:	e7f4      	b.n	800cdb2 <__copybits+0x30>

0800cdc8 <__any_on>:
 800cdc8:	f100 0214 	add.w	r2, r0, #20
 800cdcc:	6900      	ldr	r0, [r0, #16]
 800cdce:	114b      	asrs	r3, r1, #5
 800cdd0:	4298      	cmp	r0, r3
 800cdd2:	b510      	push	{r4, lr}
 800cdd4:	db11      	blt.n	800cdfa <__any_on+0x32>
 800cdd6:	dd0a      	ble.n	800cdee <__any_on+0x26>
 800cdd8:	f011 011f 	ands.w	r1, r1, #31
 800cddc:	d007      	beq.n	800cdee <__any_on+0x26>
 800cdde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cde2:	fa24 f001 	lsr.w	r0, r4, r1
 800cde6:	fa00 f101 	lsl.w	r1, r0, r1
 800cdea:	428c      	cmp	r4, r1
 800cdec:	d10b      	bne.n	800ce06 <__any_on+0x3e>
 800cdee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d803      	bhi.n	800cdfe <__any_on+0x36>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	bd10      	pop	{r4, pc}
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	e7f7      	b.n	800cdee <__any_on+0x26>
 800cdfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce02:	2900      	cmp	r1, #0
 800ce04:	d0f5      	beq.n	800cdf2 <__any_on+0x2a>
 800ce06:	2001      	movs	r0, #1
 800ce08:	e7f6      	b.n	800cdf8 <__any_on+0x30>
	...

0800ce0c <_strtol_l.constprop.0>:
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce12:	d001      	beq.n	800ce18 <_strtol_l.constprop.0+0xc>
 800ce14:	2b24      	cmp	r3, #36	; 0x24
 800ce16:	d906      	bls.n	800ce26 <_strtol_l.constprop.0+0x1a>
 800ce18:	f7fe f818 	bl	800ae4c <__errno>
 800ce1c:	2316      	movs	r3, #22
 800ce1e:	6003      	str	r3, [r0, #0]
 800ce20:	2000      	movs	r0, #0
 800ce22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce26:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cf0c <_strtol_l.constprop.0+0x100>
 800ce2a:	460d      	mov	r5, r1
 800ce2c:	462e      	mov	r6, r5
 800ce2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce32:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ce36:	f017 0708 	ands.w	r7, r7, #8
 800ce3a:	d1f7      	bne.n	800ce2c <_strtol_l.constprop.0+0x20>
 800ce3c:	2c2d      	cmp	r4, #45	; 0x2d
 800ce3e:	d132      	bne.n	800cea6 <_strtol_l.constprop.0+0x9a>
 800ce40:	782c      	ldrb	r4, [r5, #0]
 800ce42:	2701      	movs	r7, #1
 800ce44:	1cb5      	adds	r5, r6, #2
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d05b      	beq.n	800cf02 <_strtol_l.constprop.0+0xf6>
 800ce4a:	2b10      	cmp	r3, #16
 800ce4c:	d109      	bne.n	800ce62 <_strtol_l.constprop.0+0x56>
 800ce4e:	2c30      	cmp	r4, #48	; 0x30
 800ce50:	d107      	bne.n	800ce62 <_strtol_l.constprop.0+0x56>
 800ce52:	782c      	ldrb	r4, [r5, #0]
 800ce54:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ce58:	2c58      	cmp	r4, #88	; 0x58
 800ce5a:	d14d      	bne.n	800cef8 <_strtol_l.constprop.0+0xec>
 800ce5c:	786c      	ldrb	r4, [r5, #1]
 800ce5e:	2310      	movs	r3, #16
 800ce60:	3502      	adds	r5, #2
 800ce62:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ce66:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce6a:	f04f 0e00 	mov.w	lr, #0
 800ce6e:	fbb8 f9f3 	udiv	r9, r8, r3
 800ce72:	4676      	mov	r6, lr
 800ce74:	fb03 8a19 	mls	sl, r3, r9, r8
 800ce78:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ce7c:	f1bc 0f09 	cmp.w	ip, #9
 800ce80:	d816      	bhi.n	800ceb0 <_strtol_l.constprop.0+0xa4>
 800ce82:	4664      	mov	r4, ip
 800ce84:	42a3      	cmp	r3, r4
 800ce86:	dd24      	ble.n	800ced2 <_strtol_l.constprop.0+0xc6>
 800ce88:	f1be 3fff 	cmp.w	lr, #4294967295
 800ce8c:	d008      	beq.n	800cea0 <_strtol_l.constprop.0+0x94>
 800ce8e:	45b1      	cmp	r9, r6
 800ce90:	d31c      	bcc.n	800cecc <_strtol_l.constprop.0+0xc0>
 800ce92:	d101      	bne.n	800ce98 <_strtol_l.constprop.0+0x8c>
 800ce94:	45a2      	cmp	sl, r4
 800ce96:	db19      	blt.n	800cecc <_strtol_l.constprop.0+0xc0>
 800ce98:	fb06 4603 	mla	r6, r6, r3, r4
 800ce9c:	f04f 0e01 	mov.w	lr, #1
 800cea0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cea4:	e7e8      	b.n	800ce78 <_strtol_l.constprop.0+0x6c>
 800cea6:	2c2b      	cmp	r4, #43	; 0x2b
 800cea8:	bf04      	itt	eq
 800ceaa:	782c      	ldrbeq	r4, [r5, #0]
 800ceac:	1cb5      	addeq	r5, r6, #2
 800ceae:	e7ca      	b.n	800ce46 <_strtol_l.constprop.0+0x3a>
 800ceb0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ceb4:	f1bc 0f19 	cmp.w	ip, #25
 800ceb8:	d801      	bhi.n	800cebe <_strtol_l.constprop.0+0xb2>
 800ceba:	3c37      	subs	r4, #55	; 0x37
 800cebc:	e7e2      	b.n	800ce84 <_strtol_l.constprop.0+0x78>
 800cebe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cec2:	f1bc 0f19 	cmp.w	ip, #25
 800cec6:	d804      	bhi.n	800ced2 <_strtol_l.constprop.0+0xc6>
 800cec8:	3c57      	subs	r4, #87	; 0x57
 800ceca:	e7db      	b.n	800ce84 <_strtol_l.constprop.0+0x78>
 800cecc:	f04f 3eff 	mov.w	lr, #4294967295
 800ced0:	e7e6      	b.n	800cea0 <_strtol_l.constprop.0+0x94>
 800ced2:	f1be 3fff 	cmp.w	lr, #4294967295
 800ced6:	d105      	bne.n	800cee4 <_strtol_l.constprop.0+0xd8>
 800ced8:	2322      	movs	r3, #34	; 0x22
 800ceda:	6003      	str	r3, [r0, #0]
 800cedc:	4646      	mov	r6, r8
 800cede:	b942      	cbnz	r2, 800cef2 <_strtol_l.constprop.0+0xe6>
 800cee0:	4630      	mov	r0, r6
 800cee2:	e79e      	b.n	800ce22 <_strtol_l.constprop.0+0x16>
 800cee4:	b107      	cbz	r7, 800cee8 <_strtol_l.constprop.0+0xdc>
 800cee6:	4276      	negs	r6, r6
 800cee8:	2a00      	cmp	r2, #0
 800ceea:	d0f9      	beq.n	800cee0 <_strtol_l.constprop.0+0xd4>
 800ceec:	f1be 0f00 	cmp.w	lr, #0
 800cef0:	d000      	beq.n	800cef4 <_strtol_l.constprop.0+0xe8>
 800cef2:	1e69      	subs	r1, r5, #1
 800cef4:	6011      	str	r1, [r2, #0]
 800cef6:	e7f3      	b.n	800cee0 <_strtol_l.constprop.0+0xd4>
 800cef8:	2430      	movs	r4, #48	; 0x30
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1b1      	bne.n	800ce62 <_strtol_l.constprop.0+0x56>
 800cefe:	2308      	movs	r3, #8
 800cf00:	e7af      	b.n	800ce62 <_strtol_l.constprop.0+0x56>
 800cf02:	2c30      	cmp	r4, #48	; 0x30
 800cf04:	d0a5      	beq.n	800ce52 <_strtol_l.constprop.0+0x46>
 800cf06:	230a      	movs	r3, #10
 800cf08:	e7ab      	b.n	800ce62 <_strtol_l.constprop.0+0x56>
 800cf0a:	bf00      	nop
 800cf0c:	0800f13d 	.word	0x0800f13d

0800cf10 <_strtol_r>:
 800cf10:	f7ff bf7c 	b.w	800ce0c <_strtol_l.constprop.0>

0800cf14 <__ascii_wctomb>:
 800cf14:	b149      	cbz	r1, 800cf2a <__ascii_wctomb+0x16>
 800cf16:	2aff      	cmp	r2, #255	; 0xff
 800cf18:	bf85      	ittet	hi
 800cf1a:	238a      	movhi	r3, #138	; 0x8a
 800cf1c:	6003      	strhi	r3, [r0, #0]
 800cf1e:	700a      	strbls	r2, [r1, #0]
 800cf20:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf24:	bf98      	it	ls
 800cf26:	2001      	movls	r0, #1
 800cf28:	4770      	bx	lr
 800cf2a:	4608      	mov	r0, r1
 800cf2c:	4770      	bx	lr

0800cf2e <__ssputs_r>:
 800cf2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf32:	688e      	ldr	r6, [r1, #8]
 800cf34:	461f      	mov	r7, r3
 800cf36:	42be      	cmp	r6, r7
 800cf38:	680b      	ldr	r3, [r1, #0]
 800cf3a:	4682      	mov	sl, r0
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	4690      	mov	r8, r2
 800cf40:	d82c      	bhi.n	800cf9c <__ssputs_r+0x6e>
 800cf42:	898a      	ldrh	r2, [r1, #12]
 800cf44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf48:	d026      	beq.n	800cf98 <__ssputs_r+0x6a>
 800cf4a:	6965      	ldr	r5, [r4, #20]
 800cf4c:	6909      	ldr	r1, [r1, #16]
 800cf4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf52:	eba3 0901 	sub.w	r9, r3, r1
 800cf56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf5a:	1c7b      	adds	r3, r7, #1
 800cf5c:	444b      	add	r3, r9
 800cf5e:	106d      	asrs	r5, r5, #1
 800cf60:	429d      	cmp	r5, r3
 800cf62:	bf38      	it	cc
 800cf64:	461d      	movcc	r5, r3
 800cf66:	0553      	lsls	r3, r2, #21
 800cf68:	d527      	bpl.n	800cfba <__ssputs_r+0x8c>
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	f7ff fa02 	bl	800c374 <_malloc_r>
 800cf70:	4606      	mov	r6, r0
 800cf72:	b360      	cbz	r0, 800cfce <__ssputs_r+0xa0>
 800cf74:	6921      	ldr	r1, [r4, #16]
 800cf76:	464a      	mov	r2, r9
 800cf78:	f7fd ff95 	bl	800aea6 <memcpy>
 800cf7c:	89a3      	ldrh	r3, [r4, #12]
 800cf7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf86:	81a3      	strh	r3, [r4, #12]
 800cf88:	6126      	str	r6, [r4, #16]
 800cf8a:	6165      	str	r5, [r4, #20]
 800cf8c:	444e      	add	r6, r9
 800cf8e:	eba5 0509 	sub.w	r5, r5, r9
 800cf92:	6026      	str	r6, [r4, #0]
 800cf94:	60a5      	str	r5, [r4, #8]
 800cf96:	463e      	mov	r6, r7
 800cf98:	42be      	cmp	r6, r7
 800cf9a:	d900      	bls.n	800cf9e <__ssputs_r+0x70>
 800cf9c:	463e      	mov	r6, r7
 800cf9e:	6820      	ldr	r0, [r4, #0]
 800cfa0:	4632      	mov	r2, r6
 800cfa2:	4641      	mov	r1, r8
 800cfa4:	f000 fbd8 	bl	800d758 <memmove>
 800cfa8:	68a3      	ldr	r3, [r4, #8]
 800cfaa:	1b9b      	subs	r3, r3, r6
 800cfac:	60a3      	str	r3, [r4, #8]
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	4433      	add	r3, r6
 800cfb2:	6023      	str	r3, [r4, #0]
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfba:	462a      	mov	r2, r5
 800cfbc:	f000 fc2a 	bl	800d814 <_realloc_r>
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	d1e0      	bne.n	800cf88 <__ssputs_r+0x5a>
 800cfc6:	6921      	ldr	r1, [r4, #16]
 800cfc8:	4650      	mov	r0, sl
 800cfca:	f7fe fe07 	bl	800bbdc <_free_r>
 800cfce:	230c      	movs	r3, #12
 800cfd0:	f8ca 3000 	str.w	r3, [sl]
 800cfd4:	89a3      	ldrh	r3, [r4, #12]
 800cfd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfda:	81a3      	strh	r3, [r4, #12]
 800cfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe0:	e7e9      	b.n	800cfb6 <__ssputs_r+0x88>
	...

0800cfe4 <_svfiprintf_r>:
 800cfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe8:	4698      	mov	r8, r3
 800cfea:	898b      	ldrh	r3, [r1, #12]
 800cfec:	061b      	lsls	r3, r3, #24
 800cfee:	b09d      	sub	sp, #116	; 0x74
 800cff0:	4607      	mov	r7, r0
 800cff2:	460d      	mov	r5, r1
 800cff4:	4614      	mov	r4, r2
 800cff6:	d50e      	bpl.n	800d016 <_svfiprintf_r+0x32>
 800cff8:	690b      	ldr	r3, [r1, #16]
 800cffa:	b963      	cbnz	r3, 800d016 <_svfiprintf_r+0x32>
 800cffc:	2140      	movs	r1, #64	; 0x40
 800cffe:	f7ff f9b9 	bl	800c374 <_malloc_r>
 800d002:	6028      	str	r0, [r5, #0]
 800d004:	6128      	str	r0, [r5, #16]
 800d006:	b920      	cbnz	r0, 800d012 <_svfiprintf_r+0x2e>
 800d008:	230c      	movs	r3, #12
 800d00a:	603b      	str	r3, [r7, #0]
 800d00c:	f04f 30ff 	mov.w	r0, #4294967295
 800d010:	e0d0      	b.n	800d1b4 <_svfiprintf_r+0x1d0>
 800d012:	2340      	movs	r3, #64	; 0x40
 800d014:	616b      	str	r3, [r5, #20]
 800d016:	2300      	movs	r3, #0
 800d018:	9309      	str	r3, [sp, #36]	; 0x24
 800d01a:	2320      	movs	r3, #32
 800d01c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d020:	f8cd 800c 	str.w	r8, [sp, #12]
 800d024:	2330      	movs	r3, #48	; 0x30
 800d026:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d1cc <_svfiprintf_r+0x1e8>
 800d02a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d02e:	f04f 0901 	mov.w	r9, #1
 800d032:	4623      	mov	r3, r4
 800d034:	469a      	mov	sl, r3
 800d036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d03a:	b10a      	cbz	r2, 800d040 <_svfiprintf_r+0x5c>
 800d03c:	2a25      	cmp	r2, #37	; 0x25
 800d03e:	d1f9      	bne.n	800d034 <_svfiprintf_r+0x50>
 800d040:	ebba 0b04 	subs.w	fp, sl, r4
 800d044:	d00b      	beq.n	800d05e <_svfiprintf_r+0x7a>
 800d046:	465b      	mov	r3, fp
 800d048:	4622      	mov	r2, r4
 800d04a:	4629      	mov	r1, r5
 800d04c:	4638      	mov	r0, r7
 800d04e:	f7ff ff6e 	bl	800cf2e <__ssputs_r>
 800d052:	3001      	adds	r0, #1
 800d054:	f000 80a9 	beq.w	800d1aa <_svfiprintf_r+0x1c6>
 800d058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d05a:	445a      	add	r2, fp
 800d05c:	9209      	str	r2, [sp, #36]	; 0x24
 800d05e:	f89a 3000 	ldrb.w	r3, [sl]
 800d062:	2b00      	cmp	r3, #0
 800d064:	f000 80a1 	beq.w	800d1aa <_svfiprintf_r+0x1c6>
 800d068:	2300      	movs	r3, #0
 800d06a:	f04f 32ff 	mov.w	r2, #4294967295
 800d06e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d072:	f10a 0a01 	add.w	sl, sl, #1
 800d076:	9304      	str	r3, [sp, #16]
 800d078:	9307      	str	r3, [sp, #28]
 800d07a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d07e:	931a      	str	r3, [sp, #104]	; 0x68
 800d080:	4654      	mov	r4, sl
 800d082:	2205      	movs	r2, #5
 800d084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d088:	4850      	ldr	r0, [pc, #320]	; (800d1cc <_svfiprintf_r+0x1e8>)
 800d08a:	f7f3 f8a1 	bl	80001d0 <memchr>
 800d08e:	9a04      	ldr	r2, [sp, #16]
 800d090:	b9d8      	cbnz	r0, 800d0ca <_svfiprintf_r+0xe6>
 800d092:	06d0      	lsls	r0, r2, #27
 800d094:	bf44      	itt	mi
 800d096:	2320      	movmi	r3, #32
 800d098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d09c:	0711      	lsls	r1, r2, #28
 800d09e:	bf44      	itt	mi
 800d0a0:	232b      	movmi	r3, #43	; 0x2b
 800d0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d0aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ac:	d015      	beq.n	800d0da <_svfiprintf_r+0xf6>
 800d0ae:	9a07      	ldr	r2, [sp, #28]
 800d0b0:	4654      	mov	r4, sl
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	f04f 0c0a 	mov.w	ip, #10
 800d0b8:	4621      	mov	r1, r4
 800d0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0be:	3b30      	subs	r3, #48	; 0x30
 800d0c0:	2b09      	cmp	r3, #9
 800d0c2:	d94d      	bls.n	800d160 <_svfiprintf_r+0x17c>
 800d0c4:	b1b0      	cbz	r0, 800d0f4 <_svfiprintf_r+0x110>
 800d0c6:	9207      	str	r2, [sp, #28]
 800d0c8:	e014      	b.n	800d0f4 <_svfiprintf_r+0x110>
 800d0ca:	eba0 0308 	sub.w	r3, r0, r8
 800d0ce:	fa09 f303 	lsl.w	r3, r9, r3
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	9304      	str	r3, [sp, #16]
 800d0d6:	46a2      	mov	sl, r4
 800d0d8:	e7d2      	b.n	800d080 <_svfiprintf_r+0x9c>
 800d0da:	9b03      	ldr	r3, [sp, #12]
 800d0dc:	1d19      	adds	r1, r3, #4
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	9103      	str	r1, [sp, #12]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	bfbb      	ittet	lt
 800d0e6:	425b      	neglt	r3, r3
 800d0e8:	f042 0202 	orrlt.w	r2, r2, #2
 800d0ec:	9307      	strge	r3, [sp, #28]
 800d0ee:	9307      	strlt	r3, [sp, #28]
 800d0f0:	bfb8      	it	lt
 800d0f2:	9204      	strlt	r2, [sp, #16]
 800d0f4:	7823      	ldrb	r3, [r4, #0]
 800d0f6:	2b2e      	cmp	r3, #46	; 0x2e
 800d0f8:	d10c      	bne.n	800d114 <_svfiprintf_r+0x130>
 800d0fa:	7863      	ldrb	r3, [r4, #1]
 800d0fc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0fe:	d134      	bne.n	800d16a <_svfiprintf_r+0x186>
 800d100:	9b03      	ldr	r3, [sp, #12]
 800d102:	1d1a      	adds	r2, r3, #4
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	9203      	str	r2, [sp, #12]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	bfb8      	it	lt
 800d10c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d110:	3402      	adds	r4, #2
 800d112:	9305      	str	r3, [sp, #20]
 800d114:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d1dc <_svfiprintf_r+0x1f8>
 800d118:	7821      	ldrb	r1, [r4, #0]
 800d11a:	2203      	movs	r2, #3
 800d11c:	4650      	mov	r0, sl
 800d11e:	f7f3 f857 	bl	80001d0 <memchr>
 800d122:	b138      	cbz	r0, 800d134 <_svfiprintf_r+0x150>
 800d124:	9b04      	ldr	r3, [sp, #16]
 800d126:	eba0 000a 	sub.w	r0, r0, sl
 800d12a:	2240      	movs	r2, #64	; 0x40
 800d12c:	4082      	lsls	r2, r0
 800d12e:	4313      	orrs	r3, r2
 800d130:	3401      	adds	r4, #1
 800d132:	9304      	str	r3, [sp, #16]
 800d134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d138:	4825      	ldr	r0, [pc, #148]	; (800d1d0 <_svfiprintf_r+0x1ec>)
 800d13a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d13e:	2206      	movs	r2, #6
 800d140:	f7f3 f846 	bl	80001d0 <memchr>
 800d144:	2800      	cmp	r0, #0
 800d146:	d038      	beq.n	800d1ba <_svfiprintf_r+0x1d6>
 800d148:	4b22      	ldr	r3, [pc, #136]	; (800d1d4 <_svfiprintf_r+0x1f0>)
 800d14a:	bb1b      	cbnz	r3, 800d194 <_svfiprintf_r+0x1b0>
 800d14c:	9b03      	ldr	r3, [sp, #12]
 800d14e:	3307      	adds	r3, #7
 800d150:	f023 0307 	bic.w	r3, r3, #7
 800d154:	3308      	adds	r3, #8
 800d156:	9303      	str	r3, [sp, #12]
 800d158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d15a:	4433      	add	r3, r6
 800d15c:	9309      	str	r3, [sp, #36]	; 0x24
 800d15e:	e768      	b.n	800d032 <_svfiprintf_r+0x4e>
 800d160:	fb0c 3202 	mla	r2, ip, r2, r3
 800d164:	460c      	mov	r4, r1
 800d166:	2001      	movs	r0, #1
 800d168:	e7a6      	b.n	800d0b8 <_svfiprintf_r+0xd4>
 800d16a:	2300      	movs	r3, #0
 800d16c:	3401      	adds	r4, #1
 800d16e:	9305      	str	r3, [sp, #20]
 800d170:	4619      	mov	r1, r3
 800d172:	f04f 0c0a 	mov.w	ip, #10
 800d176:	4620      	mov	r0, r4
 800d178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d17c:	3a30      	subs	r2, #48	; 0x30
 800d17e:	2a09      	cmp	r2, #9
 800d180:	d903      	bls.n	800d18a <_svfiprintf_r+0x1a6>
 800d182:	2b00      	cmp	r3, #0
 800d184:	d0c6      	beq.n	800d114 <_svfiprintf_r+0x130>
 800d186:	9105      	str	r1, [sp, #20]
 800d188:	e7c4      	b.n	800d114 <_svfiprintf_r+0x130>
 800d18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d18e:	4604      	mov	r4, r0
 800d190:	2301      	movs	r3, #1
 800d192:	e7f0      	b.n	800d176 <_svfiprintf_r+0x192>
 800d194:	ab03      	add	r3, sp, #12
 800d196:	9300      	str	r3, [sp, #0]
 800d198:	462a      	mov	r2, r5
 800d19a:	4b0f      	ldr	r3, [pc, #60]	; (800d1d8 <_svfiprintf_r+0x1f4>)
 800d19c:	a904      	add	r1, sp, #16
 800d19e:	4638      	mov	r0, r7
 800d1a0:	f7fc feda 	bl	8009f58 <_printf_float>
 800d1a4:	1c42      	adds	r2, r0, #1
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	d1d6      	bne.n	800d158 <_svfiprintf_r+0x174>
 800d1aa:	89ab      	ldrh	r3, [r5, #12]
 800d1ac:	065b      	lsls	r3, r3, #25
 800d1ae:	f53f af2d 	bmi.w	800d00c <_svfiprintf_r+0x28>
 800d1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1b4:	b01d      	add	sp, #116	; 0x74
 800d1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ba:	ab03      	add	r3, sp, #12
 800d1bc:	9300      	str	r3, [sp, #0]
 800d1be:	462a      	mov	r2, r5
 800d1c0:	4b05      	ldr	r3, [pc, #20]	; (800d1d8 <_svfiprintf_r+0x1f4>)
 800d1c2:	a904      	add	r1, sp, #16
 800d1c4:	4638      	mov	r0, r7
 800d1c6:	f7fd f96b 	bl	800a4a0 <_printf_i>
 800d1ca:	e7eb      	b.n	800d1a4 <_svfiprintf_r+0x1c0>
 800d1cc:	0800f23d 	.word	0x0800f23d
 800d1d0:	0800f247 	.word	0x0800f247
 800d1d4:	08009f59 	.word	0x08009f59
 800d1d8:	0800cf2f 	.word	0x0800cf2f
 800d1dc:	0800f243 	.word	0x0800f243

0800d1e0 <__sfputc_r>:
 800d1e0:	6893      	ldr	r3, [r2, #8]
 800d1e2:	3b01      	subs	r3, #1
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	b410      	push	{r4}
 800d1e8:	6093      	str	r3, [r2, #8]
 800d1ea:	da08      	bge.n	800d1fe <__sfputc_r+0x1e>
 800d1ec:	6994      	ldr	r4, [r2, #24]
 800d1ee:	42a3      	cmp	r3, r4
 800d1f0:	db01      	blt.n	800d1f6 <__sfputc_r+0x16>
 800d1f2:	290a      	cmp	r1, #10
 800d1f4:	d103      	bne.n	800d1fe <__sfputc_r+0x1e>
 800d1f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1fa:	f000 ba17 	b.w	800d62c <__swbuf_r>
 800d1fe:	6813      	ldr	r3, [r2, #0]
 800d200:	1c58      	adds	r0, r3, #1
 800d202:	6010      	str	r0, [r2, #0]
 800d204:	7019      	strb	r1, [r3, #0]
 800d206:	4608      	mov	r0, r1
 800d208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d20c:	4770      	bx	lr

0800d20e <__sfputs_r>:
 800d20e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d210:	4606      	mov	r6, r0
 800d212:	460f      	mov	r7, r1
 800d214:	4614      	mov	r4, r2
 800d216:	18d5      	adds	r5, r2, r3
 800d218:	42ac      	cmp	r4, r5
 800d21a:	d101      	bne.n	800d220 <__sfputs_r+0x12>
 800d21c:	2000      	movs	r0, #0
 800d21e:	e007      	b.n	800d230 <__sfputs_r+0x22>
 800d220:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d224:	463a      	mov	r2, r7
 800d226:	4630      	mov	r0, r6
 800d228:	f7ff ffda 	bl	800d1e0 <__sfputc_r>
 800d22c:	1c43      	adds	r3, r0, #1
 800d22e:	d1f3      	bne.n	800d218 <__sfputs_r+0xa>
 800d230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d234 <_vfiprintf_r>:
 800d234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d238:	460d      	mov	r5, r1
 800d23a:	b09d      	sub	sp, #116	; 0x74
 800d23c:	4614      	mov	r4, r2
 800d23e:	4698      	mov	r8, r3
 800d240:	4606      	mov	r6, r0
 800d242:	b118      	cbz	r0, 800d24c <_vfiprintf_r+0x18>
 800d244:	6a03      	ldr	r3, [r0, #32]
 800d246:	b90b      	cbnz	r3, 800d24c <_vfiprintf_r+0x18>
 800d248:	f7fd fce8 	bl	800ac1c <__sinit>
 800d24c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d24e:	07d9      	lsls	r1, r3, #31
 800d250:	d405      	bmi.n	800d25e <_vfiprintf_r+0x2a>
 800d252:	89ab      	ldrh	r3, [r5, #12]
 800d254:	059a      	lsls	r2, r3, #22
 800d256:	d402      	bmi.n	800d25e <_vfiprintf_r+0x2a>
 800d258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d25a:	f7fd fe22 	bl	800aea2 <__retarget_lock_acquire_recursive>
 800d25e:	89ab      	ldrh	r3, [r5, #12]
 800d260:	071b      	lsls	r3, r3, #28
 800d262:	d501      	bpl.n	800d268 <_vfiprintf_r+0x34>
 800d264:	692b      	ldr	r3, [r5, #16]
 800d266:	b99b      	cbnz	r3, 800d290 <_vfiprintf_r+0x5c>
 800d268:	4629      	mov	r1, r5
 800d26a:	4630      	mov	r0, r6
 800d26c:	f000 fa1c 	bl	800d6a8 <__swsetup_r>
 800d270:	b170      	cbz	r0, 800d290 <_vfiprintf_r+0x5c>
 800d272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d274:	07dc      	lsls	r4, r3, #31
 800d276:	d504      	bpl.n	800d282 <_vfiprintf_r+0x4e>
 800d278:	f04f 30ff 	mov.w	r0, #4294967295
 800d27c:	b01d      	add	sp, #116	; 0x74
 800d27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d282:	89ab      	ldrh	r3, [r5, #12]
 800d284:	0598      	lsls	r0, r3, #22
 800d286:	d4f7      	bmi.n	800d278 <_vfiprintf_r+0x44>
 800d288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d28a:	f7fd fe0b 	bl	800aea4 <__retarget_lock_release_recursive>
 800d28e:	e7f3      	b.n	800d278 <_vfiprintf_r+0x44>
 800d290:	2300      	movs	r3, #0
 800d292:	9309      	str	r3, [sp, #36]	; 0x24
 800d294:	2320      	movs	r3, #32
 800d296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d29a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d29e:	2330      	movs	r3, #48	; 0x30
 800d2a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d454 <_vfiprintf_r+0x220>
 800d2a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2a8:	f04f 0901 	mov.w	r9, #1
 800d2ac:	4623      	mov	r3, r4
 800d2ae:	469a      	mov	sl, r3
 800d2b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b4:	b10a      	cbz	r2, 800d2ba <_vfiprintf_r+0x86>
 800d2b6:	2a25      	cmp	r2, #37	; 0x25
 800d2b8:	d1f9      	bne.n	800d2ae <_vfiprintf_r+0x7a>
 800d2ba:	ebba 0b04 	subs.w	fp, sl, r4
 800d2be:	d00b      	beq.n	800d2d8 <_vfiprintf_r+0xa4>
 800d2c0:	465b      	mov	r3, fp
 800d2c2:	4622      	mov	r2, r4
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	f7ff ffa1 	bl	800d20e <__sfputs_r>
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	f000 80a9 	beq.w	800d424 <_vfiprintf_r+0x1f0>
 800d2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2d4:	445a      	add	r2, fp
 800d2d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d2d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	f000 80a1 	beq.w	800d424 <_vfiprintf_r+0x1f0>
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2ec:	f10a 0a01 	add.w	sl, sl, #1
 800d2f0:	9304      	str	r3, [sp, #16]
 800d2f2:	9307      	str	r3, [sp, #28]
 800d2f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d2fa:	4654      	mov	r4, sl
 800d2fc:	2205      	movs	r2, #5
 800d2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d302:	4854      	ldr	r0, [pc, #336]	; (800d454 <_vfiprintf_r+0x220>)
 800d304:	f7f2 ff64 	bl	80001d0 <memchr>
 800d308:	9a04      	ldr	r2, [sp, #16]
 800d30a:	b9d8      	cbnz	r0, 800d344 <_vfiprintf_r+0x110>
 800d30c:	06d1      	lsls	r1, r2, #27
 800d30e:	bf44      	itt	mi
 800d310:	2320      	movmi	r3, #32
 800d312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d316:	0713      	lsls	r3, r2, #28
 800d318:	bf44      	itt	mi
 800d31a:	232b      	movmi	r3, #43	; 0x2b
 800d31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d320:	f89a 3000 	ldrb.w	r3, [sl]
 800d324:	2b2a      	cmp	r3, #42	; 0x2a
 800d326:	d015      	beq.n	800d354 <_vfiprintf_r+0x120>
 800d328:	9a07      	ldr	r2, [sp, #28]
 800d32a:	4654      	mov	r4, sl
 800d32c:	2000      	movs	r0, #0
 800d32e:	f04f 0c0a 	mov.w	ip, #10
 800d332:	4621      	mov	r1, r4
 800d334:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d338:	3b30      	subs	r3, #48	; 0x30
 800d33a:	2b09      	cmp	r3, #9
 800d33c:	d94d      	bls.n	800d3da <_vfiprintf_r+0x1a6>
 800d33e:	b1b0      	cbz	r0, 800d36e <_vfiprintf_r+0x13a>
 800d340:	9207      	str	r2, [sp, #28]
 800d342:	e014      	b.n	800d36e <_vfiprintf_r+0x13a>
 800d344:	eba0 0308 	sub.w	r3, r0, r8
 800d348:	fa09 f303 	lsl.w	r3, r9, r3
 800d34c:	4313      	orrs	r3, r2
 800d34e:	9304      	str	r3, [sp, #16]
 800d350:	46a2      	mov	sl, r4
 800d352:	e7d2      	b.n	800d2fa <_vfiprintf_r+0xc6>
 800d354:	9b03      	ldr	r3, [sp, #12]
 800d356:	1d19      	adds	r1, r3, #4
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	9103      	str	r1, [sp, #12]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	bfbb      	ittet	lt
 800d360:	425b      	neglt	r3, r3
 800d362:	f042 0202 	orrlt.w	r2, r2, #2
 800d366:	9307      	strge	r3, [sp, #28]
 800d368:	9307      	strlt	r3, [sp, #28]
 800d36a:	bfb8      	it	lt
 800d36c:	9204      	strlt	r2, [sp, #16]
 800d36e:	7823      	ldrb	r3, [r4, #0]
 800d370:	2b2e      	cmp	r3, #46	; 0x2e
 800d372:	d10c      	bne.n	800d38e <_vfiprintf_r+0x15a>
 800d374:	7863      	ldrb	r3, [r4, #1]
 800d376:	2b2a      	cmp	r3, #42	; 0x2a
 800d378:	d134      	bne.n	800d3e4 <_vfiprintf_r+0x1b0>
 800d37a:	9b03      	ldr	r3, [sp, #12]
 800d37c:	1d1a      	adds	r2, r3, #4
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	9203      	str	r2, [sp, #12]
 800d382:	2b00      	cmp	r3, #0
 800d384:	bfb8      	it	lt
 800d386:	f04f 33ff 	movlt.w	r3, #4294967295
 800d38a:	3402      	adds	r4, #2
 800d38c:	9305      	str	r3, [sp, #20]
 800d38e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d464 <_vfiprintf_r+0x230>
 800d392:	7821      	ldrb	r1, [r4, #0]
 800d394:	2203      	movs	r2, #3
 800d396:	4650      	mov	r0, sl
 800d398:	f7f2 ff1a 	bl	80001d0 <memchr>
 800d39c:	b138      	cbz	r0, 800d3ae <_vfiprintf_r+0x17a>
 800d39e:	9b04      	ldr	r3, [sp, #16]
 800d3a0:	eba0 000a 	sub.w	r0, r0, sl
 800d3a4:	2240      	movs	r2, #64	; 0x40
 800d3a6:	4082      	lsls	r2, r0
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	3401      	adds	r4, #1
 800d3ac:	9304      	str	r3, [sp, #16]
 800d3ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b2:	4829      	ldr	r0, [pc, #164]	; (800d458 <_vfiprintf_r+0x224>)
 800d3b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3b8:	2206      	movs	r2, #6
 800d3ba:	f7f2 ff09 	bl	80001d0 <memchr>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d03f      	beq.n	800d442 <_vfiprintf_r+0x20e>
 800d3c2:	4b26      	ldr	r3, [pc, #152]	; (800d45c <_vfiprintf_r+0x228>)
 800d3c4:	bb1b      	cbnz	r3, 800d40e <_vfiprintf_r+0x1da>
 800d3c6:	9b03      	ldr	r3, [sp, #12]
 800d3c8:	3307      	adds	r3, #7
 800d3ca:	f023 0307 	bic.w	r3, r3, #7
 800d3ce:	3308      	adds	r3, #8
 800d3d0:	9303      	str	r3, [sp, #12]
 800d3d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3d4:	443b      	add	r3, r7
 800d3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d3d8:	e768      	b.n	800d2ac <_vfiprintf_r+0x78>
 800d3da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3de:	460c      	mov	r4, r1
 800d3e0:	2001      	movs	r0, #1
 800d3e2:	e7a6      	b.n	800d332 <_vfiprintf_r+0xfe>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	3401      	adds	r4, #1
 800d3e8:	9305      	str	r3, [sp, #20]
 800d3ea:	4619      	mov	r1, r3
 800d3ec:	f04f 0c0a 	mov.w	ip, #10
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3f6:	3a30      	subs	r2, #48	; 0x30
 800d3f8:	2a09      	cmp	r2, #9
 800d3fa:	d903      	bls.n	800d404 <_vfiprintf_r+0x1d0>
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d0c6      	beq.n	800d38e <_vfiprintf_r+0x15a>
 800d400:	9105      	str	r1, [sp, #20]
 800d402:	e7c4      	b.n	800d38e <_vfiprintf_r+0x15a>
 800d404:	fb0c 2101 	mla	r1, ip, r1, r2
 800d408:	4604      	mov	r4, r0
 800d40a:	2301      	movs	r3, #1
 800d40c:	e7f0      	b.n	800d3f0 <_vfiprintf_r+0x1bc>
 800d40e:	ab03      	add	r3, sp, #12
 800d410:	9300      	str	r3, [sp, #0]
 800d412:	462a      	mov	r2, r5
 800d414:	4b12      	ldr	r3, [pc, #72]	; (800d460 <_vfiprintf_r+0x22c>)
 800d416:	a904      	add	r1, sp, #16
 800d418:	4630      	mov	r0, r6
 800d41a:	f7fc fd9d 	bl	8009f58 <_printf_float>
 800d41e:	4607      	mov	r7, r0
 800d420:	1c78      	adds	r0, r7, #1
 800d422:	d1d6      	bne.n	800d3d2 <_vfiprintf_r+0x19e>
 800d424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d426:	07d9      	lsls	r1, r3, #31
 800d428:	d405      	bmi.n	800d436 <_vfiprintf_r+0x202>
 800d42a:	89ab      	ldrh	r3, [r5, #12]
 800d42c:	059a      	lsls	r2, r3, #22
 800d42e:	d402      	bmi.n	800d436 <_vfiprintf_r+0x202>
 800d430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d432:	f7fd fd37 	bl	800aea4 <__retarget_lock_release_recursive>
 800d436:	89ab      	ldrh	r3, [r5, #12]
 800d438:	065b      	lsls	r3, r3, #25
 800d43a:	f53f af1d 	bmi.w	800d278 <_vfiprintf_r+0x44>
 800d43e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d440:	e71c      	b.n	800d27c <_vfiprintf_r+0x48>
 800d442:	ab03      	add	r3, sp, #12
 800d444:	9300      	str	r3, [sp, #0]
 800d446:	462a      	mov	r2, r5
 800d448:	4b05      	ldr	r3, [pc, #20]	; (800d460 <_vfiprintf_r+0x22c>)
 800d44a:	a904      	add	r1, sp, #16
 800d44c:	4630      	mov	r0, r6
 800d44e:	f7fd f827 	bl	800a4a0 <_printf_i>
 800d452:	e7e4      	b.n	800d41e <_vfiprintf_r+0x1ea>
 800d454:	0800f23d 	.word	0x0800f23d
 800d458:	0800f247 	.word	0x0800f247
 800d45c:	08009f59 	.word	0x08009f59
 800d460:	0800d20f 	.word	0x0800d20f
 800d464:	0800f243 	.word	0x0800f243

0800d468 <__sflush_r>:
 800d468:	898a      	ldrh	r2, [r1, #12]
 800d46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d46e:	4605      	mov	r5, r0
 800d470:	0710      	lsls	r0, r2, #28
 800d472:	460c      	mov	r4, r1
 800d474:	d458      	bmi.n	800d528 <__sflush_r+0xc0>
 800d476:	684b      	ldr	r3, [r1, #4]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	dc05      	bgt.n	800d488 <__sflush_r+0x20>
 800d47c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d47e:	2b00      	cmp	r3, #0
 800d480:	dc02      	bgt.n	800d488 <__sflush_r+0x20>
 800d482:	2000      	movs	r0, #0
 800d484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d48a:	2e00      	cmp	r6, #0
 800d48c:	d0f9      	beq.n	800d482 <__sflush_r+0x1a>
 800d48e:	2300      	movs	r3, #0
 800d490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d494:	682f      	ldr	r7, [r5, #0]
 800d496:	6a21      	ldr	r1, [r4, #32]
 800d498:	602b      	str	r3, [r5, #0]
 800d49a:	d032      	beq.n	800d502 <__sflush_r+0x9a>
 800d49c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d49e:	89a3      	ldrh	r3, [r4, #12]
 800d4a0:	075a      	lsls	r2, r3, #29
 800d4a2:	d505      	bpl.n	800d4b0 <__sflush_r+0x48>
 800d4a4:	6863      	ldr	r3, [r4, #4]
 800d4a6:	1ac0      	subs	r0, r0, r3
 800d4a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d4aa:	b10b      	cbz	r3, 800d4b0 <__sflush_r+0x48>
 800d4ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d4ae:	1ac0      	subs	r0, r0, r3
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d4b6:	6a21      	ldr	r1, [r4, #32]
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	47b0      	blx	r6
 800d4bc:	1c43      	adds	r3, r0, #1
 800d4be:	89a3      	ldrh	r3, [r4, #12]
 800d4c0:	d106      	bne.n	800d4d0 <__sflush_r+0x68>
 800d4c2:	6829      	ldr	r1, [r5, #0]
 800d4c4:	291d      	cmp	r1, #29
 800d4c6:	d82b      	bhi.n	800d520 <__sflush_r+0xb8>
 800d4c8:	4a29      	ldr	r2, [pc, #164]	; (800d570 <__sflush_r+0x108>)
 800d4ca:	410a      	asrs	r2, r1
 800d4cc:	07d6      	lsls	r6, r2, #31
 800d4ce:	d427      	bmi.n	800d520 <__sflush_r+0xb8>
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	6062      	str	r2, [r4, #4]
 800d4d4:	04d9      	lsls	r1, r3, #19
 800d4d6:	6922      	ldr	r2, [r4, #16]
 800d4d8:	6022      	str	r2, [r4, #0]
 800d4da:	d504      	bpl.n	800d4e6 <__sflush_r+0x7e>
 800d4dc:	1c42      	adds	r2, r0, #1
 800d4de:	d101      	bne.n	800d4e4 <__sflush_r+0x7c>
 800d4e0:	682b      	ldr	r3, [r5, #0]
 800d4e2:	b903      	cbnz	r3, 800d4e6 <__sflush_r+0x7e>
 800d4e4:	6560      	str	r0, [r4, #84]	; 0x54
 800d4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4e8:	602f      	str	r7, [r5, #0]
 800d4ea:	2900      	cmp	r1, #0
 800d4ec:	d0c9      	beq.n	800d482 <__sflush_r+0x1a>
 800d4ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4f2:	4299      	cmp	r1, r3
 800d4f4:	d002      	beq.n	800d4fc <__sflush_r+0x94>
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	f7fe fb70 	bl	800bbdc <_free_r>
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	6360      	str	r0, [r4, #52]	; 0x34
 800d500:	e7c0      	b.n	800d484 <__sflush_r+0x1c>
 800d502:	2301      	movs	r3, #1
 800d504:	4628      	mov	r0, r5
 800d506:	47b0      	blx	r6
 800d508:	1c41      	adds	r1, r0, #1
 800d50a:	d1c8      	bne.n	800d49e <__sflush_r+0x36>
 800d50c:	682b      	ldr	r3, [r5, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d0c5      	beq.n	800d49e <__sflush_r+0x36>
 800d512:	2b1d      	cmp	r3, #29
 800d514:	d001      	beq.n	800d51a <__sflush_r+0xb2>
 800d516:	2b16      	cmp	r3, #22
 800d518:	d101      	bne.n	800d51e <__sflush_r+0xb6>
 800d51a:	602f      	str	r7, [r5, #0]
 800d51c:	e7b1      	b.n	800d482 <__sflush_r+0x1a>
 800d51e:	89a3      	ldrh	r3, [r4, #12]
 800d520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d524:	81a3      	strh	r3, [r4, #12]
 800d526:	e7ad      	b.n	800d484 <__sflush_r+0x1c>
 800d528:	690f      	ldr	r7, [r1, #16]
 800d52a:	2f00      	cmp	r7, #0
 800d52c:	d0a9      	beq.n	800d482 <__sflush_r+0x1a>
 800d52e:	0793      	lsls	r3, r2, #30
 800d530:	680e      	ldr	r6, [r1, #0]
 800d532:	bf08      	it	eq
 800d534:	694b      	ldreq	r3, [r1, #20]
 800d536:	600f      	str	r7, [r1, #0]
 800d538:	bf18      	it	ne
 800d53a:	2300      	movne	r3, #0
 800d53c:	eba6 0807 	sub.w	r8, r6, r7
 800d540:	608b      	str	r3, [r1, #8]
 800d542:	f1b8 0f00 	cmp.w	r8, #0
 800d546:	dd9c      	ble.n	800d482 <__sflush_r+0x1a>
 800d548:	6a21      	ldr	r1, [r4, #32]
 800d54a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d54c:	4643      	mov	r3, r8
 800d54e:	463a      	mov	r2, r7
 800d550:	4628      	mov	r0, r5
 800d552:	47b0      	blx	r6
 800d554:	2800      	cmp	r0, #0
 800d556:	dc06      	bgt.n	800d566 <__sflush_r+0xfe>
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d55e:	81a3      	strh	r3, [r4, #12]
 800d560:	f04f 30ff 	mov.w	r0, #4294967295
 800d564:	e78e      	b.n	800d484 <__sflush_r+0x1c>
 800d566:	4407      	add	r7, r0
 800d568:	eba8 0800 	sub.w	r8, r8, r0
 800d56c:	e7e9      	b.n	800d542 <__sflush_r+0xda>
 800d56e:	bf00      	nop
 800d570:	dfbffffe 	.word	0xdfbffffe

0800d574 <_fflush_r>:
 800d574:	b538      	push	{r3, r4, r5, lr}
 800d576:	690b      	ldr	r3, [r1, #16]
 800d578:	4605      	mov	r5, r0
 800d57a:	460c      	mov	r4, r1
 800d57c:	b913      	cbnz	r3, 800d584 <_fflush_r+0x10>
 800d57e:	2500      	movs	r5, #0
 800d580:	4628      	mov	r0, r5
 800d582:	bd38      	pop	{r3, r4, r5, pc}
 800d584:	b118      	cbz	r0, 800d58e <_fflush_r+0x1a>
 800d586:	6a03      	ldr	r3, [r0, #32]
 800d588:	b90b      	cbnz	r3, 800d58e <_fflush_r+0x1a>
 800d58a:	f7fd fb47 	bl	800ac1c <__sinit>
 800d58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d0f3      	beq.n	800d57e <_fflush_r+0xa>
 800d596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d598:	07d0      	lsls	r0, r2, #31
 800d59a:	d404      	bmi.n	800d5a6 <_fflush_r+0x32>
 800d59c:	0599      	lsls	r1, r3, #22
 800d59e:	d402      	bmi.n	800d5a6 <_fflush_r+0x32>
 800d5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5a2:	f7fd fc7e 	bl	800aea2 <__retarget_lock_acquire_recursive>
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	f7ff ff5d 	bl	800d468 <__sflush_r>
 800d5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5b0:	07da      	lsls	r2, r3, #31
 800d5b2:	4605      	mov	r5, r0
 800d5b4:	d4e4      	bmi.n	800d580 <_fflush_r+0xc>
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	059b      	lsls	r3, r3, #22
 800d5ba:	d4e1      	bmi.n	800d580 <_fflush_r+0xc>
 800d5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5be:	f7fd fc71 	bl	800aea4 <__retarget_lock_release_recursive>
 800d5c2:	e7dd      	b.n	800d580 <_fflush_r+0xc>

0800d5c4 <_putc_r>:
 800d5c4:	b570      	push	{r4, r5, r6, lr}
 800d5c6:	460d      	mov	r5, r1
 800d5c8:	4614      	mov	r4, r2
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	b118      	cbz	r0, 800d5d6 <_putc_r+0x12>
 800d5ce:	6a03      	ldr	r3, [r0, #32]
 800d5d0:	b90b      	cbnz	r3, 800d5d6 <_putc_r+0x12>
 800d5d2:	f7fd fb23 	bl	800ac1c <__sinit>
 800d5d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d5d8:	07d8      	lsls	r0, r3, #31
 800d5da:	d405      	bmi.n	800d5e8 <_putc_r+0x24>
 800d5dc:	89a3      	ldrh	r3, [r4, #12]
 800d5de:	0599      	lsls	r1, r3, #22
 800d5e0:	d402      	bmi.n	800d5e8 <_putc_r+0x24>
 800d5e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d5e4:	f7fd fc5d 	bl	800aea2 <__retarget_lock_acquire_recursive>
 800d5e8:	68a3      	ldr	r3, [r4, #8]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	60a3      	str	r3, [r4, #8]
 800d5f0:	da05      	bge.n	800d5fe <_putc_r+0x3a>
 800d5f2:	69a2      	ldr	r2, [r4, #24]
 800d5f4:	4293      	cmp	r3, r2
 800d5f6:	db12      	blt.n	800d61e <_putc_r+0x5a>
 800d5f8:	b2eb      	uxtb	r3, r5
 800d5fa:	2b0a      	cmp	r3, #10
 800d5fc:	d00f      	beq.n	800d61e <_putc_r+0x5a>
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	1c5a      	adds	r2, r3, #1
 800d602:	6022      	str	r2, [r4, #0]
 800d604:	701d      	strb	r5, [r3, #0]
 800d606:	b2ed      	uxtb	r5, r5
 800d608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d60a:	07da      	lsls	r2, r3, #31
 800d60c:	d405      	bmi.n	800d61a <_putc_r+0x56>
 800d60e:	89a3      	ldrh	r3, [r4, #12]
 800d610:	059b      	lsls	r3, r3, #22
 800d612:	d402      	bmi.n	800d61a <_putc_r+0x56>
 800d614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d616:	f7fd fc45 	bl	800aea4 <__retarget_lock_release_recursive>
 800d61a:	4628      	mov	r0, r5
 800d61c:	bd70      	pop	{r4, r5, r6, pc}
 800d61e:	4629      	mov	r1, r5
 800d620:	4622      	mov	r2, r4
 800d622:	4630      	mov	r0, r6
 800d624:	f000 f802 	bl	800d62c <__swbuf_r>
 800d628:	4605      	mov	r5, r0
 800d62a:	e7ed      	b.n	800d608 <_putc_r+0x44>

0800d62c <__swbuf_r>:
 800d62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62e:	460e      	mov	r6, r1
 800d630:	4614      	mov	r4, r2
 800d632:	4605      	mov	r5, r0
 800d634:	b118      	cbz	r0, 800d63e <__swbuf_r+0x12>
 800d636:	6a03      	ldr	r3, [r0, #32]
 800d638:	b90b      	cbnz	r3, 800d63e <__swbuf_r+0x12>
 800d63a:	f7fd faef 	bl	800ac1c <__sinit>
 800d63e:	69a3      	ldr	r3, [r4, #24]
 800d640:	60a3      	str	r3, [r4, #8]
 800d642:	89a3      	ldrh	r3, [r4, #12]
 800d644:	071a      	lsls	r2, r3, #28
 800d646:	d525      	bpl.n	800d694 <__swbuf_r+0x68>
 800d648:	6923      	ldr	r3, [r4, #16]
 800d64a:	b31b      	cbz	r3, 800d694 <__swbuf_r+0x68>
 800d64c:	6823      	ldr	r3, [r4, #0]
 800d64e:	6922      	ldr	r2, [r4, #16]
 800d650:	1a98      	subs	r0, r3, r2
 800d652:	6963      	ldr	r3, [r4, #20]
 800d654:	b2f6      	uxtb	r6, r6
 800d656:	4283      	cmp	r3, r0
 800d658:	4637      	mov	r7, r6
 800d65a:	dc04      	bgt.n	800d666 <__swbuf_r+0x3a>
 800d65c:	4621      	mov	r1, r4
 800d65e:	4628      	mov	r0, r5
 800d660:	f7ff ff88 	bl	800d574 <_fflush_r>
 800d664:	b9e0      	cbnz	r0, 800d6a0 <__swbuf_r+0x74>
 800d666:	68a3      	ldr	r3, [r4, #8]
 800d668:	3b01      	subs	r3, #1
 800d66a:	60a3      	str	r3, [r4, #8]
 800d66c:	6823      	ldr	r3, [r4, #0]
 800d66e:	1c5a      	adds	r2, r3, #1
 800d670:	6022      	str	r2, [r4, #0]
 800d672:	701e      	strb	r6, [r3, #0]
 800d674:	6962      	ldr	r2, [r4, #20]
 800d676:	1c43      	adds	r3, r0, #1
 800d678:	429a      	cmp	r2, r3
 800d67a:	d004      	beq.n	800d686 <__swbuf_r+0x5a>
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	07db      	lsls	r3, r3, #31
 800d680:	d506      	bpl.n	800d690 <__swbuf_r+0x64>
 800d682:	2e0a      	cmp	r6, #10
 800d684:	d104      	bne.n	800d690 <__swbuf_r+0x64>
 800d686:	4621      	mov	r1, r4
 800d688:	4628      	mov	r0, r5
 800d68a:	f7ff ff73 	bl	800d574 <_fflush_r>
 800d68e:	b938      	cbnz	r0, 800d6a0 <__swbuf_r+0x74>
 800d690:	4638      	mov	r0, r7
 800d692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d694:	4621      	mov	r1, r4
 800d696:	4628      	mov	r0, r5
 800d698:	f000 f806 	bl	800d6a8 <__swsetup_r>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	d0d5      	beq.n	800d64c <__swbuf_r+0x20>
 800d6a0:	f04f 37ff 	mov.w	r7, #4294967295
 800d6a4:	e7f4      	b.n	800d690 <__swbuf_r+0x64>
	...

0800d6a8 <__swsetup_r>:
 800d6a8:	b538      	push	{r3, r4, r5, lr}
 800d6aa:	4b2a      	ldr	r3, [pc, #168]	; (800d754 <__swsetup_r+0xac>)
 800d6ac:	4605      	mov	r5, r0
 800d6ae:	6818      	ldr	r0, [r3, #0]
 800d6b0:	460c      	mov	r4, r1
 800d6b2:	b118      	cbz	r0, 800d6bc <__swsetup_r+0x14>
 800d6b4:	6a03      	ldr	r3, [r0, #32]
 800d6b6:	b90b      	cbnz	r3, 800d6bc <__swsetup_r+0x14>
 800d6b8:	f7fd fab0 	bl	800ac1c <__sinit>
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d6c2:	0718      	lsls	r0, r3, #28
 800d6c4:	d422      	bmi.n	800d70c <__swsetup_r+0x64>
 800d6c6:	06d9      	lsls	r1, r3, #27
 800d6c8:	d407      	bmi.n	800d6da <__swsetup_r+0x32>
 800d6ca:	2309      	movs	r3, #9
 800d6cc:	602b      	str	r3, [r5, #0]
 800d6ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d6d2:	81a3      	strh	r3, [r4, #12]
 800d6d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6d8:	e034      	b.n	800d744 <__swsetup_r+0x9c>
 800d6da:	0758      	lsls	r0, r3, #29
 800d6dc:	d512      	bpl.n	800d704 <__swsetup_r+0x5c>
 800d6de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6e0:	b141      	cbz	r1, 800d6f4 <__swsetup_r+0x4c>
 800d6e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6e6:	4299      	cmp	r1, r3
 800d6e8:	d002      	beq.n	800d6f0 <__swsetup_r+0x48>
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	f7fe fa76 	bl	800bbdc <_free_r>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	6363      	str	r3, [r4, #52]	; 0x34
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d6fa:	81a3      	strh	r3, [r4, #12]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	6063      	str	r3, [r4, #4]
 800d700:	6923      	ldr	r3, [r4, #16]
 800d702:	6023      	str	r3, [r4, #0]
 800d704:	89a3      	ldrh	r3, [r4, #12]
 800d706:	f043 0308 	orr.w	r3, r3, #8
 800d70a:	81a3      	strh	r3, [r4, #12]
 800d70c:	6923      	ldr	r3, [r4, #16]
 800d70e:	b94b      	cbnz	r3, 800d724 <__swsetup_r+0x7c>
 800d710:	89a3      	ldrh	r3, [r4, #12]
 800d712:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d71a:	d003      	beq.n	800d724 <__swsetup_r+0x7c>
 800d71c:	4621      	mov	r1, r4
 800d71e:	4628      	mov	r0, r5
 800d720:	f000 f8e0 	bl	800d8e4 <__smakebuf_r>
 800d724:	89a0      	ldrh	r0, [r4, #12]
 800d726:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d72a:	f010 0301 	ands.w	r3, r0, #1
 800d72e:	d00a      	beq.n	800d746 <__swsetup_r+0x9e>
 800d730:	2300      	movs	r3, #0
 800d732:	60a3      	str	r3, [r4, #8]
 800d734:	6963      	ldr	r3, [r4, #20]
 800d736:	425b      	negs	r3, r3
 800d738:	61a3      	str	r3, [r4, #24]
 800d73a:	6923      	ldr	r3, [r4, #16]
 800d73c:	b943      	cbnz	r3, 800d750 <__swsetup_r+0xa8>
 800d73e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d742:	d1c4      	bne.n	800d6ce <__swsetup_r+0x26>
 800d744:	bd38      	pop	{r3, r4, r5, pc}
 800d746:	0781      	lsls	r1, r0, #30
 800d748:	bf58      	it	pl
 800d74a:	6963      	ldrpl	r3, [r4, #20]
 800d74c:	60a3      	str	r3, [r4, #8]
 800d74e:	e7f4      	b.n	800d73a <__swsetup_r+0x92>
 800d750:	2000      	movs	r0, #0
 800d752:	e7f7      	b.n	800d744 <__swsetup_r+0x9c>
 800d754:	200001e8 	.word	0x200001e8

0800d758 <memmove>:
 800d758:	4288      	cmp	r0, r1
 800d75a:	b510      	push	{r4, lr}
 800d75c:	eb01 0402 	add.w	r4, r1, r2
 800d760:	d902      	bls.n	800d768 <memmove+0x10>
 800d762:	4284      	cmp	r4, r0
 800d764:	4623      	mov	r3, r4
 800d766:	d807      	bhi.n	800d778 <memmove+0x20>
 800d768:	1e43      	subs	r3, r0, #1
 800d76a:	42a1      	cmp	r1, r4
 800d76c:	d008      	beq.n	800d780 <memmove+0x28>
 800d76e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d772:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d776:	e7f8      	b.n	800d76a <memmove+0x12>
 800d778:	4402      	add	r2, r0
 800d77a:	4601      	mov	r1, r0
 800d77c:	428a      	cmp	r2, r1
 800d77e:	d100      	bne.n	800d782 <memmove+0x2a>
 800d780:	bd10      	pop	{r4, pc}
 800d782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d78a:	e7f7      	b.n	800d77c <memmove+0x24>

0800d78c <_sbrk_r>:
 800d78c:	b538      	push	{r3, r4, r5, lr}
 800d78e:	4d06      	ldr	r5, [pc, #24]	; (800d7a8 <_sbrk_r+0x1c>)
 800d790:	2300      	movs	r3, #0
 800d792:	4604      	mov	r4, r0
 800d794:	4608      	mov	r0, r1
 800d796:	602b      	str	r3, [r5, #0]
 800d798:	f7f5 fc4c 	bl	8003034 <_sbrk>
 800d79c:	1c43      	adds	r3, r0, #1
 800d79e:	d102      	bne.n	800d7a6 <_sbrk_r+0x1a>
 800d7a0:	682b      	ldr	r3, [r5, #0]
 800d7a2:	b103      	cbz	r3, 800d7a6 <_sbrk_r+0x1a>
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	bd38      	pop	{r3, r4, r5, pc}
 800d7a8:	200007f4 	.word	0x200007f4

0800d7ac <__assert_func>:
 800d7ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7ae:	4614      	mov	r4, r2
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	4b09      	ldr	r3, [pc, #36]	; (800d7d8 <__assert_func+0x2c>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	68d8      	ldr	r0, [r3, #12]
 800d7ba:	b14c      	cbz	r4, 800d7d0 <__assert_func+0x24>
 800d7bc:	4b07      	ldr	r3, [pc, #28]	; (800d7dc <__assert_func+0x30>)
 800d7be:	9100      	str	r1, [sp, #0]
 800d7c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7c4:	4906      	ldr	r1, [pc, #24]	; (800d7e0 <__assert_func+0x34>)
 800d7c6:	462b      	mov	r3, r5
 800d7c8:	f000 f854 	bl	800d874 <fiprintf>
 800d7cc:	f000 f8e8 	bl	800d9a0 <abort>
 800d7d0:	4b04      	ldr	r3, [pc, #16]	; (800d7e4 <__assert_func+0x38>)
 800d7d2:	461c      	mov	r4, r3
 800d7d4:	e7f3      	b.n	800d7be <__assert_func+0x12>
 800d7d6:	bf00      	nop
 800d7d8:	200001e8 	.word	0x200001e8
 800d7dc:	0800f24e 	.word	0x0800f24e
 800d7e0:	0800f25b 	.word	0x0800f25b
 800d7e4:	0800f289 	.word	0x0800f289

0800d7e8 <_calloc_r>:
 800d7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7ea:	fba1 2402 	umull	r2, r4, r1, r2
 800d7ee:	b94c      	cbnz	r4, 800d804 <_calloc_r+0x1c>
 800d7f0:	4611      	mov	r1, r2
 800d7f2:	9201      	str	r2, [sp, #4]
 800d7f4:	f7fe fdbe 	bl	800c374 <_malloc_r>
 800d7f8:	9a01      	ldr	r2, [sp, #4]
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	b930      	cbnz	r0, 800d80c <_calloc_r+0x24>
 800d7fe:	4628      	mov	r0, r5
 800d800:	b003      	add	sp, #12
 800d802:	bd30      	pop	{r4, r5, pc}
 800d804:	220c      	movs	r2, #12
 800d806:	6002      	str	r2, [r0, #0]
 800d808:	2500      	movs	r5, #0
 800d80a:	e7f8      	b.n	800d7fe <_calloc_r+0x16>
 800d80c:	4621      	mov	r1, r4
 800d80e:	f7fd fab8 	bl	800ad82 <memset>
 800d812:	e7f4      	b.n	800d7fe <_calloc_r+0x16>

0800d814 <_realloc_r>:
 800d814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d818:	4680      	mov	r8, r0
 800d81a:	4614      	mov	r4, r2
 800d81c:	460e      	mov	r6, r1
 800d81e:	b921      	cbnz	r1, 800d82a <_realloc_r+0x16>
 800d820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d824:	4611      	mov	r1, r2
 800d826:	f7fe bda5 	b.w	800c374 <_malloc_r>
 800d82a:	b92a      	cbnz	r2, 800d838 <_realloc_r+0x24>
 800d82c:	f7fe f9d6 	bl	800bbdc <_free_r>
 800d830:	4625      	mov	r5, r4
 800d832:	4628      	mov	r0, r5
 800d834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d838:	f000 f8b9 	bl	800d9ae <_malloc_usable_size_r>
 800d83c:	4284      	cmp	r4, r0
 800d83e:	4607      	mov	r7, r0
 800d840:	d802      	bhi.n	800d848 <_realloc_r+0x34>
 800d842:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d846:	d812      	bhi.n	800d86e <_realloc_r+0x5a>
 800d848:	4621      	mov	r1, r4
 800d84a:	4640      	mov	r0, r8
 800d84c:	f7fe fd92 	bl	800c374 <_malloc_r>
 800d850:	4605      	mov	r5, r0
 800d852:	2800      	cmp	r0, #0
 800d854:	d0ed      	beq.n	800d832 <_realloc_r+0x1e>
 800d856:	42bc      	cmp	r4, r7
 800d858:	4622      	mov	r2, r4
 800d85a:	4631      	mov	r1, r6
 800d85c:	bf28      	it	cs
 800d85e:	463a      	movcs	r2, r7
 800d860:	f7fd fb21 	bl	800aea6 <memcpy>
 800d864:	4631      	mov	r1, r6
 800d866:	4640      	mov	r0, r8
 800d868:	f7fe f9b8 	bl	800bbdc <_free_r>
 800d86c:	e7e1      	b.n	800d832 <_realloc_r+0x1e>
 800d86e:	4635      	mov	r5, r6
 800d870:	e7df      	b.n	800d832 <_realloc_r+0x1e>
	...

0800d874 <fiprintf>:
 800d874:	b40e      	push	{r1, r2, r3}
 800d876:	b503      	push	{r0, r1, lr}
 800d878:	4601      	mov	r1, r0
 800d87a:	ab03      	add	r3, sp, #12
 800d87c:	4805      	ldr	r0, [pc, #20]	; (800d894 <fiprintf+0x20>)
 800d87e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d882:	6800      	ldr	r0, [r0, #0]
 800d884:	9301      	str	r3, [sp, #4]
 800d886:	f7ff fcd5 	bl	800d234 <_vfiprintf_r>
 800d88a:	b002      	add	sp, #8
 800d88c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d890:	b003      	add	sp, #12
 800d892:	4770      	bx	lr
 800d894:	200001e8 	.word	0x200001e8

0800d898 <__swhatbuf_r>:
 800d898:	b570      	push	{r4, r5, r6, lr}
 800d89a:	460c      	mov	r4, r1
 800d89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a0:	2900      	cmp	r1, #0
 800d8a2:	b096      	sub	sp, #88	; 0x58
 800d8a4:	4615      	mov	r5, r2
 800d8a6:	461e      	mov	r6, r3
 800d8a8:	da0d      	bge.n	800d8c6 <__swhatbuf_r+0x2e>
 800d8aa:	89a3      	ldrh	r3, [r4, #12]
 800d8ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d8b0:	f04f 0100 	mov.w	r1, #0
 800d8b4:	bf0c      	ite	eq
 800d8b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d8ba:	2340      	movne	r3, #64	; 0x40
 800d8bc:	2000      	movs	r0, #0
 800d8be:	6031      	str	r1, [r6, #0]
 800d8c0:	602b      	str	r3, [r5, #0]
 800d8c2:	b016      	add	sp, #88	; 0x58
 800d8c4:	bd70      	pop	{r4, r5, r6, pc}
 800d8c6:	466a      	mov	r2, sp
 800d8c8:	f000 f848 	bl	800d95c <_fstat_r>
 800d8cc:	2800      	cmp	r0, #0
 800d8ce:	dbec      	blt.n	800d8aa <__swhatbuf_r+0x12>
 800d8d0:	9901      	ldr	r1, [sp, #4]
 800d8d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d8d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d8da:	4259      	negs	r1, r3
 800d8dc:	4159      	adcs	r1, r3
 800d8de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8e2:	e7eb      	b.n	800d8bc <__swhatbuf_r+0x24>

0800d8e4 <__smakebuf_r>:
 800d8e4:	898b      	ldrh	r3, [r1, #12]
 800d8e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8e8:	079d      	lsls	r5, r3, #30
 800d8ea:	4606      	mov	r6, r0
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	d507      	bpl.n	800d900 <__smakebuf_r+0x1c>
 800d8f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8f4:	6023      	str	r3, [r4, #0]
 800d8f6:	6123      	str	r3, [r4, #16]
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	6163      	str	r3, [r4, #20]
 800d8fc:	b002      	add	sp, #8
 800d8fe:	bd70      	pop	{r4, r5, r6, pc}
 800d900:	ab01      	add	r3, sp, #4
 800d902:	466a      	mov	r2, sp
 800d904:	f7ff ffc8 	bl	800d898 <__swhatbuf_r>
 800d908:	9900      	ldr	r1, [sp, #0]
 800d90a:	4605      	mov	r5, r0
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7fe fd31 	bl	800c374 <_malloc_r>
 800d912:	b948      	cbnz	r0, 800d928 <__smakebuf_r+0x44>
 800d914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d918:	059a      	lsls	r2, r3, #22
 800d91a:	d4ef      	bmi.n	800d8fc <__smakebuf_r+0x18>
 800d91c:	f023 0303 	bic.w	r3, r3, #3
 800d920:	f043 0302 	orr.w	r3, r3, #2
 800d924:	81a3      	strh	r3, [r4, #12]
 800d926:	e7e3      	b.n	800d8f0 <__smakebuf_r+0xc>
 800d928:	89a3      	ldrh	r3, [r4, #12]
 800d92a:	6020      	str	r0, [r4, #0]
 800d92c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d930:	81a3      	strh	r3, [r4, #12]
 800d932:	9b00      	ldr	r3, [sp, #0]
 800d934:	6163      	str	r3, [r4, #20]
 800d936:	9b01      	ldr	r3, [sp, #4]
 800d938:	6120      	str	r0, [r4, #16]
 800d93a:	b15b      	cbz	r3, 800d954 <__smakebuf_r+0x70>
 800d93c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d940:	4630      	mov	r0, r6
 800d942:	f000 f81d 	bl	800d980 <_isatty_r>
 800d946:	b128      	cbz	r0, 800d954 <__smakebuf_r+0x70>
 800d948:	89a3      	ldrh	r3, [r4, #12]
 800d94a:	f023 0303 	bic.w	r3, r3, #3
 800d94e:	f043 0301 	orr.w	r3, r3, #1
 800d952:	81a3      	strh	r3, [r4, #12]
 800d954:	89a3      	ldrh	r3, [r4, #12]
 800d956:	431d      	orrs	r5, r3
 800d958:	81a5      	strh	r5, [r4, #12]
 800d95a:	e7cf      	b.n	800d8fc <__smakebuf_r+0x18>

0800d95c <_fstat_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	4d07      	ldr	r5, [pc, #28]	; (800d97c <_fstat_r+0x20>)
 800d960:	2300      	movs	r3, #0
 800d962:	4604      	mov	r4, r0
 800d964:	4608      	mov	r0, r1
 800d966:	4611      	mov	r1, r2
 800d968:	602b      	str	r3, [r5, #0]
 800d96a:	f7f5 fb3a 	bl	8002fe2 <_fstat>
 800d96e:	1c43      	adds	r3, r0, #1
 800d970:	d102      	bne.n	800d978 <_fstat_r+0x1c>
 800d972:	682b      	ldr	r3, [r5, #0]
 800d974:	b103      	cbz	r3, 800d978 <_fstat_r+0x1c>
 800d976:	6023      	str	r3, [r4, #0]
 800d978:	bd38      	pop	{r3, r4, r5, pc}
 800d97a:	bf00      	nop
 800d97c:	200007f4 	.word	0x200007f4

0800d980 <_isatty_r>:
 800d980:	b538      	push	{r3, r4, r5, lr}
 800d982:	4d06      	ldr	r5, [pc, #24]	; (800d99c <_isatty_r+0x1c>)
 800d984:	2300      	movs	r3, #0
 800d986:	4604      	mov	r4, r0
 800d988:	4608      	mov	r0, r1
 800d98a:	602b      	str	r3, [r5, #0]
 800d98c:	f7f5 fb39 	bl	8003002 <_isatty>
 800d990:	1c43      	adds	r3, r0, #1
 800d992:	d102      	bne.n	800d99a <_isatty_r+0x1a>
 800d994:	682b      	ldr	r3, [r5, #0]
 800d996:	b103      	cbz	r3, 800d99a <_isatty_r+0x1a>
 800d998:	6023      	str	r3, [r4, #0]
 800d99a:	bd38      	pop	{r3, r4, r5, pc}
 800d99c:	200007f4 	.word	0x200007f4

0800d9a0 <abort>:
 800d9a0:	b508      	push	{r3, lr}
 800d9a2:	2006      	movs	r0, #6
 800d9a4:	f000 f834 	bl	800da10 <raise>
 800d9a8:	2001      	movs	r0, #1
 800d9aa:	f7f5 facb 	bl	8002f44 <_exit>

0800d9ae <_malloc_usable_size_r>:
 800d9ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9b2:	1f18      	subs	r0, r3, #4
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	bfbc      	itt	lt
 800d9b8:	580b      	ldrlt	r3, [r1, r0]
 800d9ba:	18c0      	addlt	r0, r0, r3
 800d9bc:	4770      	bx	lr

0800d9be <_raise_r>:
 800d9be:	291f      	cmp	r1, #31
 800d9c0:	b538      	push	{r3, r4, r5, lr}
 800d9c2:	4604      	mov	r4, r0
 800d9c4:	460d      	mov	r5, r1
 800d9c6:	d904      	bls.n	800d9d2 <_raise_r+0x14>
 800d9c8:	2316      	movs	r3, #22
 800d9ca:	6003      	str	r3, [r0, #0]
 800d9cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d0:	bd38      	pop	{r3, r4, r5, pc}
 800d9d2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d9d4:	b112      	cbz	r2, 800d9dc <_raise_r+0x1e>
 800d9d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9da:	b94b      	cbnz	r3, 800d9f0 <_raise_r+0x32>
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f000 f831 	bl	800da44 <_getpid_r>
 800d9e2:	462a      	mov	r2, r5
 800d9e4:	4601      	mov	r1, r0
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9ec:	f000 b818 	b.w	800da20 <_kill_r>
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d00a      	beq.n	800da0a <_raise_r+0x4c>
 800d9f4:	1c59      	adds	r1, r3, #1
 800d9f6:	d103      	bne.n	800da00 <_raise_r+0x42>
 800d9f8:	2316      	movs	r3, #22
 800d9fa:	6003      	str	r3, [r0, #0]
 800d9fc:	2001      	movs	r0, #1
 800d9fe:	e7e7      	b.n	800d9d0 <_raise_r+0x12>
 800da00:	2400      	movs	r4, #0
 800da02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da06:	4628      	mov	r0, r5
 800da08:	4798      	blx	r3
 800da0a:	2000      	movs	r0, #0
 800da0c:	e7e0      	b.n	800d9d0 <_raise_r+0x12>
	...

0800da10 <raise>:
 800da10:	4b02      	ldr	r3, [pc, #8]	; (800da1c <raise+0xc>)
 800da12:	4601      	mov	r1, r0
 800da14:	6818      	ldr	r0, [r3, #0]
 800da16:	f7ff bfd2 	b.w	800d9be <_raise_r>
 800da1a:	bf00      	nop
 800da1c:	200001e8 	.word	0x200001e8

0800da20 <_kill_r>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	4d07      	ldr	r5, [pc, #28]	; (800da40 <_kill_r+0x20>)
 800da24:	2300      	movs	r3, #0
 800da26:	4604      	mov	r4, r0
 800da28:	4608      	mov	r0, r1
 800da2a:	4611      	mov	r1, r2
 800da2c:	602b      	str	r3, [r5, #0]
 800da2e:	f7f5 fa79 	bl	8002f24 <_kill>
 800da32:	1c43      	adds	r3, r0, #1
 800da34:	d102      	bne.n	800da3c <_kill_r+0x1c>
 800da36:	682b      	ldr	r3, [r5, #0]
 800da38:	b103      	cbz	r3, 800da3c <_kill_r+0x1c>
 800da3a:	6023      	str	r3, [r4, #0]
 800da3c:	bd38      	pop	{r3, r4, r5, pc}
 800da3e:	bf00      	nop
 800da40:	200007f4 	.word	0x200007f4

0800da44 <_getpid_r>:
 800da44:	f7f5 ba66 	b.w	8002f14 <_getpid>

0800da48 <sqrt>:
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	ed2d 8b02 	vpush	{d8}
 800da4e:	ec55 4b10 	vmov	r4, r5, d0
 800da52:	f000 f879 	bl	800db48 <__ieee754_sqrt>
 800da56:	4622      	mov	r2, r4
 800da58:	462b      	mov	r3, r5
 800da5a:	4620      	mov	r0, r4
 800da5c:	4629      	mov	r1, r5
 800da5e:	eeb0 8a40 	vmov.f32	s16, s0
 800da62:	eef0 8a60 	vmov.f32	s17, s1
 800da66:	f7f3 f861 	bl	8000b2c <__aeabi_dcmpun>
 800da6a:	b990      	cbnz	r0, 800da92 <sqrt+0x4a>
 800da6c:	2200      	movs	r2, #0
 800da6e:	2300      	movs	r3, #0
 800da70:	4620      	mov	r0, r4
 800da72:	4629      	mov	r1, r5
 800da74:	f7f3 f832 	bl	8000adc <__aeabi_dcmplt>
 800da78:	b158      	cbz	r0, 800da92 <sqrt+0x4a>
 800da7a:	f7fd f9e7 	bl	800ae4c <__errno>
 800da7e:	2321      	movs	r3, #33	; 0x21
 800da80:	6003      	str	r3, [r0, #0]
 800da82:	2200      	movs	r2, #0
 800da84:	2300      	movs	r3, #0
 800da86:	4610      	mov	r0, r2
 800da88:	4619      	mov	r1, r3
 800da8a:	f7f2 fedf 	bl	800084c <__aeabi_ddiv>
 800da8e:	ec41 0b18 	vmov	d8, r0, r1
 800da92:	eeb0 0a48 	vmov.f32	s0, s16
 800da96:	eef0 0a68 	vmov.f32	s1, s17
 800da9a:	ecbd 8b02 	vpop	{d8}
 800da9e:	bd38      	pop	{r3, r4, r5, pc}

0800daa0 <cos>:
 800daa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daa2:	ec53 2b10 	vmov	r2, r3, d0
 800daa6:	4826      	ldr	r0, [pc, #152]	; (800db40 <cos+0xa0>)
 800daa8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800daac:	4281      	cmp	r1, r0
 800daae:	dc06      	bgt.n	800dabe <cos+0x1e>
 800dab0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800db38 <cos+0x98>
 800dab4:	b005      	add	sp, #20
 800dab6:	f85d eb04 	ldr.w	lr, [sp], #4
 800daba:	f000 b921 	b.w	800dd00 <__kernel_cos>
 800dabe:	4821      	ldr	r0, [pc, #132]	; (800db44 <cos+0xa4>)
 800dac0:	4281      	cmp	r1, r0
 800dac2:	dd09      	ble.n	800dad8 <cos+0x38>
 800dac4:	ee10 0a10 	vmov	r0, s0
 800dac8:	4619      	mov	r1, r3
 800daca:	f7f2 fbdd 	bl	8000288 <__aeabi_dsub>
 800dace:	ec41 0b10 	vmov	d0, r0, r1
 800dad2:	b005      	add	sp, #20
 800dad4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dad8:	4668      	mov	r0, sp
 800dada:	f000 fa99 	bl	800e010 <__ieee754_rem_pio2>
 800dade:	f000 0003 	and.w	r0, r0, #3
 800dae2:	2801      	cmp	r0, #1
 800dae4:	d00b      	beq.n	800dafe <cos+0x5e>
 800dae6:	2802      	cmp	r0, #2
 800dae8:	d016      	beq.n	800db18 <cos+0x78>
 800daea:	b9e0      	cbnz	r0, 800db26 <cos+0x86>
 800daec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800daf0:	ed9d 0b00 	vldr	d0, [sp]
 800daf4:	f000 f904 	bl	800dd00 <__kernel_cos>
 800daf8:	ec51 0b10 	vmov	r0, r1, d0
 800dafc:	e7e7      	b.n	800dace <cos+0x2e>
 800dafe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db02:	ed9d 0b00 	vldr	d0, [sp]
 800db06:	f000 f9c3 	bl	800de90 <__kernel_sin>
 800db0a:	ec53 2b10 	vmov	r2, r3, d0
 800db0e:	ee10 0a10 	vmov	r0, s0
 800db12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db16:	e7da      	b.n	800dace <cos+0x2e>
 800db18:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db1c:	ed9d 0b00 	vldr	d0, [sp]
 800db20:	f000 f8ee 	bl	800dd00 <__kernel_cos>
 800db24:	e7f1      	b.n	800db0a <cos+0x6a>
 800db26:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db2a:	ed9d 0b00 	vldr	d0, [sp]
 800db2e:	2001      	movs	r0, #1
 800db30:	f000 f9ae 	bl	800de90 <__kernel_sin>
 800db34:	e7e0      	b.n	800daf8 <cos+0x58>
 800db36:	bf00      	nop
	...
 800db40:	3fe921fb 	.word	0x3fe921fb
 800db44:	7fefffff 	.word	0x7fefffff

0800db48 <__ieee754_sqrt>:
 800db48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db4c:	ec55 4b10 	vmov	r4, r5, d0
 800db50:	4e67      	ldr	r6, [pc, #412]	; (800dcf0 <__ieee754_sqrt+0x1a8>)
 800db52:	43ae      	bics	r6, r5
 800db54:	ee10 0a10 	vmov	r0, s0
 800db58:	ee10 2a10 	vmov	r2, s0
 800db5c:	4629      	mov	r1, r5
 800db5e:	462b      	mov	r3, r5
 800db60:	d10d      	bne.n	800db7e <__ieee754_sqrt+0x36>
 800db62:	f7f2 fd49 	bl	80005f8 <__aeabi_dmul>
 800db66:	4602      	mov	r2, r0
 800db68:	460b      	mov	r3, r1
 800db6a:	4620      	mov	r0, r4
 800db6c:	4629      	mov	r1, r5
 800db6e:	f7f2 fb8d 	bl	800028c <__adddf3>
 800db72:	4604      	mov	r4, r0
 800db74:	460d      	mov	r5, r1
 800db76:	ec45 4b10 	vmov	d0, r4, r5
 800db7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db7e:	2d00      	cmp	r5, #0
 800db80:	dc0b      	bgt.n	800db9a <__ieee754_sqrt+0x52>
 800db82:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db86:	4326      	orrs	r6, r4
 800db88:	d0f5      	beq.n	800db76 <__ieee754_sqrt+0x2e>
 800db8a:	b135      	cbz	r5, 800db9a <__ieee754_sqrt+0x52>
 800db8c:	f7f2 fb7c 	bl	8000288 <__aeabi_dsub>
 800db90:	4602      	mov	r2, r0
 800db92:	460b      	mov	r3, r1
 800db94:	f7f2 fe5a 	bl	800084c <__aeabi_ddiv>
 800db98:	e7eb      	b.n	800db72 <__ieee754_sqrt+0x2a>
 800db9a:	1509      	asrs	r1, r1, #20
 800db9c:	f000 808d 	beq.w	800dcba <__ieee754_sqrt+0x172>
 800dba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dba4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800dba8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbac:	07c9      	lsls	r1, r1, #31
 800dbae:	bf5c      	itt	pl
 800dbb0:	005b      	lslpl	r3, r3, #1
 800dbb2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800dbb6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dbba:	bf58      	it	pl
 800dbbc:	0052      	lslpl	r2, r2, #1
 800dbbe:	2500      	movs	r5, #0
 800dbc0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dbc4:	1076      	asrs	r6, r6, #1
 800dbc6:	0052      	lsls	r2, r2, #1
 800dbc8:	f04f 0e16 	mov.w	lr, #22
 800dbcc:	46ac      	mov	ip, r5
 800dbce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dbd2:	eb0c 0001 	add.w	r0, ip, r1
 800dbd6:	4298      	cmp	r0, r3
 800dbd8:	bfde      	ittt	le
 800dbda:	1a1b      	suble	r3, r3, r0
 800dbdc:	eb00 0c01 	addle.w	ip, r0, r1
 800dbe0:	186d      	addle	r5, r5, r1
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	f1be 0e01 	subs.w	lr, lr, #1
 800dbe8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dbec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dbf0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dbf4:	d1ed      	bne.n	800dbd2 <__ieee754_sqrt+0x8a>
 800dbf6:	4674      	mov	r4, lr
 800dbf8:	2720      	movs	r7, #32
 800dbfa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800dbfe:	4563      	cmp	r3, ip
 800dc00:	eb01 000e 	add.w	r0, r1, lr
 800dc04:	dc02      	bgt.n	800dc0c <__ieee754_sqrt+0xc4>
 800dc06:	d113      	bne.n	800dc30 <__ieee754_sqrt+0xe8>
 800dc08:	4290      	cmp	r0, r2
 800dc0a:	d811      	bhi.n	800dc30 <__ieee754_sqrt+0xe8>
 800dc0c:	2800      	cmp	r0, #0
 800dc0e:	eb00 0e01 	add.w	lr, r0, r1
 800dc12:	da57      	bge.n	800dcc4 <__ieee754_sqrt+0x17c>
 800dc14:	f1be 0f00 	cmp.w	lr, #0
 800dc18:	db54      	blt.n	800dcc4 <__ieee754_sqrt+0x17c>
 800dc1a:	f10c 0801 	add.w	r8, ip, #1
 800dc1e:	eba3 030c 	sub.w	r3, r3, ip
 800dc22:	4290      	cmp	r0, r2
 800dc24:	bf88      	it	hi
 800dc26:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800dc2a:	1a12      	subs	r2, r2, r0
 800dc2c:	440c      	add	r4, r1
 800dc2e:	46c4      	mov	ip, r8
 800dc30:	005b      	lsls	r3, r3, #1
 800dc32:	3f01      	subs	r7, #1
 800dc34:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800dc38:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dc3c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dc40:	d1dd      	bne.n	800dbfe <__ieee754_sqrt+0xb6>
 800dc42:	4313      	orrs	r3, r2
 800dc44:	d01b      	beq.n	800dc7e <__ieee754_sqrt+0x136>
 800dc46:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800dcf4 <__ieee754_sqrt+0x1ac>
 800dc4a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800dcf8 <__ieee754_sqrt+0x1b0>
 800dc4e:	e9da 0100 	ldrd	r0, r1, [sl]
 800dc52:	e9db 2300 	ldrd	r2, r3, [fp]
 800dc56:	f7f2 fb17 	bl	8000288 <__aeabi_dsub>
 800dc5a:	e9da 8900 	ldrd	r8, r9, [sl]
 800dc5e:	4602      	mov	r2, r0
 800dc60:	460b      	mov	r3, r1
 800dc62:	4640      	mov	r0, r8
 800dc64:	4649      	mov	r1, r9
 800dc66:	f7f2 ff43 	bl	8000af0 <__aeabi_dcmple>
 800dc6a:	b140      	cbz	r0, 800dc7e <__ieee754_sqrt+0x136>
 800dc6c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dc70:	e9da 0100 	ldrd	r0, r1, [sl]
 800dc74:	e9db 2300 	ldrd	r2, r3, [fp]
 800dc78:	d126      	bne.n	800dcc8 <__ieee754_sqrt+0x180>
 800dc7a:	3501      	adds	r5, #1
 800dc7c:	463c      	mov	r4, r7
 800dc7e:	106a      	asrs	r2, r5, #1
 800dc80:	0863      	lsrs	r3, r4, #1
 800dc82:	07e9      	lsls	r1, r5, #31
 800dc84:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dc88:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dc8c:	bf48      	it	mi
 800dc8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dc92:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800dc96:	461c      	mov	r4, r3
 800dc98:	e76d      	b.n	800db76 <__ieee754_sqrt+0x2e>
 800dc9a:	0ad3      	lsrs	r3, r2, #11
 800dc9c:	3815      	subs	r0, #21
 800dc9e:	0552      	lsls	r2, r2, #21
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d0fa      	beq.n	800dc9a <__ieee754_sqrt+0x152>
 800dca4:	02dc      	lsls	r4, r3, #11
 800dca6:	d50a      	bpl.n	800dcbe <__ieee754_sqrt+0x176>
 800dca8:	f1c1 0420 	rsb	r4, r1, #32
 800dcac:	fa22 f404 	lsr.w	r4, r2, r4
 800dcb0:	1e4d      	subs	r5, r1, #1
 800dcb2:	408a      	lsls	r2, r1
 800dcb4:	4323      	orrs	r3, r4
 800dcb6:	1b41      	subs	r1, r0, r5
 800dcb8:	e772      	b.n	800dba0 <__ieee754_sqrt+0x58>
 800dcba:	4608      	mov	r0, r1
 800dcbc:	e7f0      	b.n	800dca0 <__ieee754_sqrt+0x158>
 800dcbe:	005b      	lsls	r3, r3, #1
 800dcc0:	3101      	adds	r1, #1
 800dcc2:	e7ef      	b.n	800dca4 <__ieee754_sqrt+0x15c>
 800dcc4:	46e0      	mov	r8, ip
 800dcc6:	e7aa      	b.n	800dc1e <__ieee754_sqrt+0xd6>
 800dcc8:	f7f2 fae0 	bl	800028c <__adddf3>
 800dccc:	e9da 8900 	ldrd	r8, r9, [sl]
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	4640      	mov	r0, r8
 800dcd6:	4649      	mov	r1, r9
 800dcd8:	f7f2 ff00 	bl	8000adc <__aeabi_dcmplt>
 800dcdc:	b120      	cbz	r0, 800dce8 <__ieee754_sqrt+0x1a0>
 800dcde:	1ca0      	adds	r0, r4, #2
 800dce0:	bf08      	it	eq
 800dce2:	3501      	addeq	r5, #1
 800dce4:	3402      	adds	r4, #2
 800dce6:	e7ca      	b.n	800dc7e <__ieee754_sqrt+0x136>
 800dce8:	3401      	adds	r4, #1
 800dcea:	f024 0401 	bic.w	r4, r4, #1
 800dcee:	e7c6      	b.n	800dc7e <__ieee754_sqrt+0x136>
 800dcf0:	7ff00000 	.word	0x7ff00000
 800dcf4:	200001f0 	.word	0x200001f0
 800dcf8:	200001f8 	.word	0x200001f8
 800dcfc:	00000000 	.word	0x00000000

0800dd00 <__kernel_cos>:
 800dd00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	ec57 6b10 	vmov	r6, r7, d0
 800dd08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dd0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dd10:	ed8d 1b00 	vstr	d1, [sp]
 800dd14:	da07      	bge.n	800dd26 <__kernel_cos+0x26>
 800dd16:	ee10 0a10 	vmov	r0, s0
 800dd1a:	4639      	mov	r1, r7
 800dd1c:	f7f2 ff1c 	bl	8000b58 <__aeabi_d2iz>
 800dd20:	2800      	cmp	r0, #0
 800dd22:	f000 8088 	beq.w	800de36 <__kernel_cos+0x136>
 800dd26:	4632      	mov	r2, r6
 800dd28:	463b      	mov	r3, r7
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	4639      	mov	r1, r7
 800dd2e:	f7f2 fc63 	bl	80005f8 <__aeabi_dmul>
 800dd32:	4b51      	ldr	r3, [pc, #324]	; (800de78 <__kernel_cos+0x178>)
 800dd34:	2200      	movs	r2, #0
 800dd36:	4604      	mov	r4, r0
 800dd38:	460d      	mov	r5, r1
 800dd3a:	f7f2 fc5d 	bl	80005f8 <__aeabi_dmul>
 800dd3e:	a340      	add	r3, pc, #256	; (adr r3, 800de40 <__kernel_cos+0x140>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	4682      	mov	sl, r0
 800dd46:	468b      	mov	fp, r1
 800dd48:	4620      	mov	r0, r4
 800dd4a:	4629      	mov	r1, r5
 800dd4c:	f7f2 fc54 	bl	80005f8 <__aeabi_dmul>
 800dd50:	a33d      	add	r3, pc, #244	; (adr r3, 800de48 <__kernel_cos+0x148>)
 800dd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd56:	f7f2 fa99 	bl	800028c <__adddf3>
 800dd5a:	4622      	mov	r2, r4
 800dd5c:	462b      	mov	r3, r5
 800dd5e:	f7f2 fc4b 	bl	80005f8 <__aeabi_dmul>
 800dd62:	a33b      	add	r3, pc, #236	; (adr r3, 800de50 <__kernel_cos+0x150>)
 800dd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd68:	f7f2 fa8e 	bl	8000288 <__aeabi_dsub>
 800dd6c:	4622      	mov	r2, r4
 800dd6e:	462b      	mov	r3, r5
 800dd70:	f7f2 fc42 	bl	80005f8 <__aeabi_dmul>
 800dd74:	a338      	add	r3, pc, #224	; (adr r3, 800de58 <__kernel_cos+0x158>)
 800dd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7a:	f7f2 fa87 	bl	800028c <__adddf3>
 800dd7e:	4622      	mov	r2, r4
 800dd80:	462b      	mov	r3, r5
 800dd82:	f7f2 fc39 	bl	80005f8 <__aeabi_dmul>
 800dd86:	a336      	add	r3, pc, #216	; (adr r3, 800de60 <__kernel_cos+0x160>)
 800dd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8c:	f7f2 fa7c 	bl	8000288 <__aeabi_dsub>
 800dd90:	4622      	mov	r2, r4
 800dd92:	462b      	mov	r3, r5
 800dd94:	f7f2 fc30 	bl	80005f8 <__aeabi_dmul>
 800dd98:	a333      	add	r3, pc, #204	; (adr r3, 800de68 <__kernel_cos+0x168>)
 800dd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9e:	f7f2 fa75 	bl	800028c <__adddf3>
 800dda2:	4622      	mov	r2, r4
 800dda4:	462b      	mov	r3, r5
 800dda6:	f7f2 fc27 	bl	80005f8 <__aeabi_dmul>
 800ddaa:	4622      	mov	r2, r4
 800ddac:	462b      	mov	r3, r5
 800ddae:	f7f2 fc23 	bl	80005f8 <__aeabi_dmul>
 800ddb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	460d      	mov	r5, r1
 800ddba:	4630      	mov	r0, r6
 800ddbc:	4639      	mov	r1, r7
 800ddbe:	f7f2 fc1b 	bl	80005f8 <__aeabi_dmul>
 800ddc2:	460b      	mov	r3, r1
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	4629      	mov	r1, r5
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f7f2 fa5d 	bl	8000288 <__aeabi_dsub>
 800ddce:	4b2b      	ldr	r3, [pc, #172]	; (800de7c <__kernel_cos+0x17c>)
 800ddd0:	4598      	cmp	r8, r3
 800ddd2:	4606      	mov	r6, r0
 800ddd4:	460f      	mov	r7, r1
 800ddd6:	dc10      	bgt.n	800ddfa <__kernel_cos+0xfa>
 800ddd8:	4602      	mov	r2, r0
 800ddda:	460b      	mov	r3, r1
 800dddc:	4650      	mov	r0, sl
 800ddde:	4659      	mov	r1, fp
 800dde0:	f7f2 fa52 	bl	8000288 <__aeabi_dsub>
 800dde4:	460b      	mov	r3, r1
 800dde6:	4926      	ldr	r1, [pc, #152]	; (800de80 <__kernel_cos+0x180>)
 800dde8:	4602      	mov	r2, r0
 800ddea:	2000      	movs	r0, #0
 800ddec:	f7f2 fa4c 	bl	8000288 <__aeabi_dsub>
 800ddf0:	ec41 0b10 	vmov	d0, r0, r1
 800ddf4:	b003      	add	sp, #12
 800ddf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfa:	4b22      	ldr	r3, [pc, #136]	; (800de84 <__kernel_cos+0x184>)
 800ddfc:	4920      	ldr	r1, [pc, #128]	; (800de80 <__kernel_cos+0x180>)
 800ddfe:	4598      	cmp	r8, r3
 800de00:	bfcc      	ite	gt
 800de02:	4d21      	ldrgt	r5, [pc, #132]	; (800de88 <__kernel_cos+0x188>)
 800de04:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800de08:	2400      	movs	r4, #0
 800de0a:	4622      	mov	r2, r4
 800de0c:	462b      	mov	r3, r5
 800de0e:	2000      	movs	r0, #0
 800de10:	f7f2 fa3a 	bl	8000288 <__aeabi_dsub>
 800de14:	4622      	mov	r2, r4
 800de16:	4680      	mov	r8, r0
 800de18:	4689      	mov	r9, r1
 800de1a:	462b      	mov	r3, r5
 800de1c:	4650      	mov	r0, sl
 800de1e:	4659      	mov	r1, fp
 800de20:	f7f2 fa32 	bl	8000288 <__aeabi_dsub>
 800de24:	4632      	mov	r2, r6
 800de26:	463b      	mov	r3, r7
 800de28:	f7f2 fa2e 	bl	8000288 <__aeabi_dsub>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	4640      	mov	r0, r8
 800de32:	4649      	mov	r1, r9
 800de34:	e7da      	b.n	800ddec <__kernel_cos+0xec>
 800de36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800de70 <__kernel_cos+0x170>
 800de3a:	e7db      	b.n	800ddf4 <__kernel_cos+0xf4>
 800de3c:	f3af 8000 	nop.w
 800de40:	be8838d4 	.word	0xbe8838d4
 800de44:	bda8fae9 	.word	0xbda8fae9
 800de48:	bdb4b1c4 	.word	0xbdb4b1c4
 800de4c:	3e21ee9e 	.word	0x3e21ee9e
 800de50:	809c52ad 	.word	0x809c52ad
 800de54:	3e927e4f 	.word	0x3e927e4f
 800de58:	19cb1590 	.word	0x19cb1590
 800de5c:	3efa01a0 	.word	0x3efa01a0
 800de60:	16c15177 	.word	0x16c15177
 800de64:	3f56c16c 	.word	0x3f56c16c
 800de68:	5555554c 	.word	0x5555554c
 800de6c:	3fa55555 	.word	0x3fa55555
 800de70:	00000000 	.word	0x00000000
 800de74:	3ff00000 	.word	0x3ff00000
 800de78:	3fe00000 	.word	0x3fe00000
 800de7c:	3fd33332 	.word	0x3fd33332
 800de80:	3ff00000 	.word	0x3ff00000
 800de84:	3fe90000 	.word	0x3fe90000
 800de88:	3fd20000 	.word	0x3fd20000
 800de8c:	00000000 	.word	0x00000000

0800de90 <__kernel_sin>:
 800de90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de94:	ed2d 8b04 	vpush	{d8-d9}
 800de98:	eeb0 8a41 	vmov.f32	s16, s2
 800de9c:	eef0 8a61 	vmov.f32	s17, s3
 800dea0:	ec55 4b10 	vmov	r4, r5, d0
 800dea4:	b083      	sub	sp, #12
 800dea6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800deaa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800deae:	9001      	str	r0, [sp, #4]
 800deb0:	da06      	bge.n	800dec0 <__kernel_sin+0x30>
 800deb2:	ee10 0a10 	vmov	r0, s0
 800deb6:	4629      	mov	r1, r5
 800deb8:	f7f2 fe4e 	bl	8000b58 <__aeabi_d2iz>
 800debc:	2800      	cmp	r0, #0
 800debe:	d051      	beq.n	800df64 <__kernel_sin+0xd4>
 800dec0:	4622      	mov	r2, r4
 800dec2:	462b      	mov	r3, r5
 800dec4:	4620      	mov	r0, r4
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 fb96 	bl	80005f8 <__aeabi_dmul>
 800decc:	4682      	mov	sl, r0
 800dece:	468b      	mov	fp, r1
 800ded0:	4602      	mov	r2, r0
 800ded2:	460b      	mov	r3, r1
 800ded4:	4620      	mov	r0, r4
 800ded6:	4629      	mov	r1, r5
 800ded8:	f7f2 fb8e 	bl	80005f8 <__aeabi_dmul>
 800dedc:	a341      	add	r3, pc, #260	; (adr r3, 800dfe4 <__kernel_sin+0x154>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	4680      	mov	r8, r0
 800dee4:	4689      	mov	r9, r1
 800dee6:	4650      	mov	r0, sl
 800dee8:	4659      	mov	r1, fp
 800deea:	f7f2 fb85 	bl	80005f8 <__aeabi_dmul>
 800deee:	a33f      	add	r3, pc, #252	; (adr r3, 800dfec <__kernel_sin+0x15c>)
 800def0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def4:	f7f2 f9c8 	bl	8000288 <__aeabi_dsub>
 800def8:	4652      	mov	r2, sl
 800defa:	465b      	mov	r3, fp
 800defc:	f7f2 fb7c 	bl	80005f8 <__aeabi_dmul>
 800df00:	a33c      	add	r3, pc, #240	; (adr r3, 800dff4 <__kernel_sin+0x164>)
 800df02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df06:	f7f2 f9c1 	bl	800028c <__adddf3>
 800df0a:	4652      	mov	r2, sl
 800df0c:	465b      	mov	r3, fp
 800df0e:	f7f2 fb73 	bl	80005f8 <__aeabi_dmul>
 800df12:	a33a      	add	r3, pc, #232	; (adr r3, 800dffc <__kernel_sin+0x16c>)
 800df14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df18:	f7f2 f9b6 	bl	8000288 <__aeabi_dsub>
 800df1c:	4652      	mov	r2, sl
 800df1e:	465b      	mov	r3, fp
 800df20:	f7f2 fb6a 	bl	80005f8 <__aeabi_dmul>
 800df24:	a337      	add	r3, pc, #220	; (adr r3, 800e004 <__kernel_sin+0x174>)
 800df26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2a:	f7f2 f9af 	bl	800028c <__adddf3>
 800df2e:	9b01      	ldr	r3, [sp, #4]
 800df30:	4606      	mov	r6, r0
 800df32:	460f      	mov	r7, r1
 800df34:	b9eb      	cbnz	r3, 800df72 <__kernel_sin+0xe2>
 800df36:	4602      	mov	r2, r0
 800df38:	460b      	mov	r3, r1
 800df3a:	4650      	mov	r0, sl
 800df3c:	4659      	mov	r1, fp
 800df3e:	f7f2 fb5b 	bl	80005f8 <__aeabi_dmul>
 800df42:	a325      	add	r3, pc, #148	; (adr r3, 800dfd8 <__kernel_sin+0x148>)
 800df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df48:	f7f2 f99e 	bl	8000288 <__aeabi_dsub>
 800df4c:	4642      	mov	r2, r8
 800df4e:	464b      	mov	r3, r9
 800df50:	f7f2 fb52 	bl	80005f8 <__aeabi_dmul>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4620      	mov	r0, r4
 800df5a:	4629      	mov	r1, r5
 800df5c:	f7f2 f996 	bl	800028c <__adddf3>
 800df60:	4604      	mov	r4, r0
 800df62:	460d      	mov	r5, r1
 800df64:	ec45 4b10 	vmov	d0, r4, r5
 800df68:	b003      	add	sp, #12
 800df6a:	ecbd 8b04 	vpop	{d8-d9}
 800df6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df72:	4b1b      	ldr	r3, [pc, #108]	; (800dfe0 <__kernel_sin+0x150>)
 800df74:	ec51 0b18 	vmov	r0, r1, d8
 800df78:	2200      	movs	r2, #0
 800df7a:	f7f2 fb3d 	bl	80005f8 <__aeabi_dmul>
 800df7e:	4632      	mov	r2, r6
 800df80:	ec41 0b19 	vmov	d9, r0, r1
 800df84:	463b      	mov	r3, r7
 800df86:	4640      	mov	r0, r8
 800df88:	4649      	mov	r1, r9
 800df8a:	f7f2 fb35 	bl	80005f8 <__aeabi_dmul>
 800df8e:	4602      	mov	r2, r0
 800df90:	460b      	mov	r3, r1
 800df92:	ec51 0b19 	vmov	r0, r1, d9
 800df96:	f7f2 f977 	bl	8000288 <__aeabi_dsub>
 800df9a:	4652      	mov	r2, sl
 800df9c:	465b      	mov	r3, fp
 800df9e:	f7f2 fb2b 	bl	80005f8 <__aeabi_dmul>
 800dfa2:	ec53 2b18 	vmov	r2, r3, d8
 800dfa6:	f7f2 f96f 	bl	8000288 <__aeabi_dsub>
 800dfaa:	a30b      	add	r3, pc, #44	; (adr r3, 800dfd8 <__kernel_sin+0x148>)
 800dfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb0:	4606      	mov	r6, r0
 800dfb2:	460f      	mov	r7, r1
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	4649      	mov	r1, r9
 800dfb8:	f7f2 fb1e 	bl	80005f8 <__aeabi_dmul>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	4630      	mov	r0, r6
 800dfc2:	4639      	mov	r1, r7
 800dfc4:	f7f2 f962 	bl	800028c <__adddf3>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	460b      	mov	r3, r1
 800dfcc:	4620      	mov	r0, r4
 800dfce:	4629      	mov	r1, r5
 800dfd0:	f7f2 f95a 	bl	8000288 <__aeabi_dsub>
 800dfd4:	e7c4      	b.n	800df60 <__kernel_sin+0xd0>
 800dfd6:	bf00      	nop
 800dfd8:	55555549 	.word	0x55555549
 800dfdc:	3fc55555 	.word	0x3fc55555
 800dfe0:	3fe00000 	.word	0x3fe00000
 800dfe4:	5acfd57c 	.word	0x5acfd57c
 800dfe8:	3de5d93a 	.word	0x3de5d93a
 800dfec:	8a2b9ceb 	.word	0x8a2b9ceb
 800dff0:	3e5ae5e6 	.word	0x3e5ae5e6
 800dff4:	57b1fe7d 	.word	0x57b1fe7d
 800dff8:	3ec71de3 	.word	0x3ec71de3
 800dffc:	19c161d5 	.word	0x19c161d5
 800e000:	3f2a01a0 	.word	0x3f2a01a0
 800e004:	1110f8a6 	.word	0x1110f8a6
 800e008:	3f811111 	.word	0x3f811111
 800e00c:	00000000 	.word	0x00000000

0800e010 <__ieee754_rem_pio2>:
 800e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	ed2d 8b02 	vpush	{d8}
 800e018:	ec55 4b10 	vmov	r4, r5, d0
 800e01c:	4bca      	ldr	r3, [pc, #808]	; (800e348 <__ieee754_rem_pio2+0x338>)
 800e01e:	b08b      	sub	sp, #44	; 0x2c
 800e020:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e024:	4598      	cmp	r8, r3
 800e026:	4682      	mov	sl, r0
 800e028:	9502      	str	r5, [sp, #8]
 800e02a:	dc08      	bgt.n	800e03e <__ieee754_rem_pio2+0x2e>
 800e02c:	2200      	movs	r2, #0
 800e02e:	2300      	movs	r3, #0
 800e030:	ed80 0b00 	vstr	d0, [r0]
 800e034:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e038:	f04f 0b00 	mov.w	fp, #0
 800e03c:	e028      	b.n	800e090 <__ieee754_rem_pio2+0x80>
 800e03e:	4bc3      	ldr	r3, [pc, #780]	; (800e34c <__ieee754_rem_pio2+0x33c>)
 800e040:	4598      	cmp	r8, r3
 800e042:	dc78      	bgt.n	800e136 <__ieee754_rem_pio2+0x126>
 800e044:	9b02      	ldr	r3, [sp, #8]
 800e046:	4ec2      	ldr	r6, [pc, #776]	; (800e350 <__ieee754_rem_pio2+0x340>)
 800e048:	2b00      	cmp	r3, #0
 800e04a:	ee10 0a10 	vmov	r0, s0
 800e04e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e310 <__ieee754_rem_pio2+0x300>)
 800e050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e054:	4629      	mov	r1, r5
 800e056:	dd39      	ble.n	800e0cc <__ieee754_rem_pio2+0xbc>
 800e058:	f7f2 f916 	bl	8000288 <__aeabi_dsub>
 800e05c:	45b0      	cmp	r8, r6
 800e05e:	4604      	mov	r4, r0
 800e060:	460d      	mov	r5, r1
 800e062:	d01b      	beq.n	800e09c <__ieee754_rem_pio2+0x8c>
 800e064:	a3ac      	add	r3, pc, #688	; (adr r3, 800e318 <__ieee754_rem_pio2+0x308>)
 800e066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06a:	f7f2 f90d 	bl	8000288 <__aeabi_dsub>
 800e06e:	4602      	mov	r2, r0
 800e070:	460b      	mov	r3, r1
 800e072:	e9ca 2300 	strd	r2, r3, [sl]
 800e076:	4620      	mov	r0, r4
 800e078:	4629      	mov	r1, r5
 800e07a:	f7f2 f905 	bl	8000288 <__aeabi_dsub>
 800e07e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e318 <__ieee754_rem_pio2+0x308>)
 800e080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e084:	f7f2 f900 	bl	8000288 <__aeabi_dsub>
 800e088:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e08c:	f04f 0b01 	mov.w	fp, #1
 800e090:	4658      	mov	r0, fp
 800e092:	b00b      	add	sp, #44	; 0x2c
 800e094:	ecbd 8b02 	vpop	{d8}
 800e098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e09c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e320 <__ieee754_rem_pio2+0x310>)
 800e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a2:	f7f2 f8f1 	bl	8000288 <__aeabi_dsub>
 800e0a6:	a3a0      	add	r3, pc, #640	; (adr r3, 800e328 <__ieee754_rem_pio2+0x318>)
 800e0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	460d      	mov	r5, r1
 800e0b0:	f7f2 f8ea 	bl	8000288 <__aeabi_dsub>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	e9ca 2300 	strd	r2, r3, [sl]
 800e0bc:	4620      	mov	r0, r4
 800e0be:	4629      	mov	r1, r5
 800e0c0:	f7f2 f8e2 	bl	8000288 <__aeabi_dsub>
 800e0c4:	a398      	add	r3, pc, #608	; (adr r3, 800e328 <__ieee754_rem_pio2+0x318>)
 800e0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ca:	e7db      	b.n	800e084 <__ieee754_rem_pio2+0x74>
 800e0cc:	f7f2 f8de 	bl	800028c <__adddf3>
 800e0d0:	45b0      	cmp	r8, r6
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	460d      	mov	r5, r1
 800e0d6:	d016      	beq.n	800e106 <__ieee754_rem_pio2+0xf6>
 800e0d8:	a38f      	add	r3, pc, #572	; (adr r3, 800e318 <__ieee754_rem_pio2+0x308>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	f7f2 f8d5 	bl	800028c <__adddf3>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	e9ca 2300 	strd	r2, r3, [sl]
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7f2 f8cb 	bl	8000288 <__aeabi_dsub>
 800e0f2:	a389      	add	r3, pc, #548	; (adr r3, 800e318 <__ieee754_rem_pio2+0x308>)
 800e0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f8:	f7f2 f8c8 	bl	800028c <__adddf3>
 800e0fc:	f04f 3bff 	mov.w	fp, #4294967295
 800e100:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e104:	e7c4      	b.n	800e090 <__ieee754_rem_pio2+0x80>
 800e106:	a386      	add	r3, pc, #536	; (adr r3, 800e320 <__ieee754_rem_pio2+0x310>)
 800e108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10c:	f7f2 f8be 	bl	800028c <__adddf3>
 800e110:	a385      	add	r3, pc, #532	; (adr r3, 800e328 <__ieee754_rem_pio2+0x318>)
 800e112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e116:	4604      	mov	r4, r0
 800e118:	460d      	mov	r5, r1
 800e11a:	f7f2 f8b7 	bl	800028c <__adddf3>
 800e11e:	4602      	mov	r2, r0
 800e120:	460b      	mov	r3, r1
 800e122:	e9ca 2300 	strd	r2, r3, [sl]
 800e126:	4620      	mov	r0, r4
 800e128:	4629      	mov	r1, r5
 800e12a:	f7f2 f8ad 	bl	8000288 <__aeabi_dsub>
 800e12e:	a37e      	add	r3, pc, #504	; (adr r3, 800e328 <__ieee754_rem_pio2+0x318>)
 800e130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e134:	e7e0      	b.n	800e0f8 <__ieee754_rem_pio2+0xe8>
 800e136:	4b87      	ldr	r3, [pc, #540]	; (800e354 <__ieee754_rem_pio2+0x344>)
 800e138:	4598      	cmp	r8, r3
 800e13a:	f300 80d8 	bgt.w	800e2ee <__ieee754_rem_pio2+0x2de>
 800e13e:	f000 f96d 	bl	800e41c <fabs>
 800e142:	ec55 4b10 	vmov	r4, r5, d0
 800e146:	ee10 0a10 	vmov	r0, s0
 800e14a:	a379      	add	r3, pc, #484	; (adr r3, 800e330 <__ieee754_rem_pio2+0x320>)
 800e14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e150:	4629      	mov	r1, r5
 800e152:	f7f2 fa51 	bl	80005f8 <__aeabi_dmul>
 800e156:	4b80      	ldr	r3, [pc, #512]	; (800e358 <__ieee754_rem_pio2+0x348>)
 800e158:	2200      	movs	r2, #0
 800e15a:	f7f2 f897 	bl	800028c <__adddf3>
 800e15e:	f7f2 fcfb 	bl	8000b58 <__aeabi_d2iz>
 800e162:	4683      	mov	fp, r0
 800e164:	f7f2 f9de 	bl	8000524 <__aeabi_i2d>
 800e168:	4602      	mov	r2, r0
 800e16a:	460b      	mov	r3, r1
 800e16c:	ec43 2b18 	vmov	d8, r2, r3
 800e170:	a367      	add	r3, pc, #412	; (adr r3, 800e310 <__ieee754_rem_pio2+0x300>)
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	f7f2 fa3f 	bl	80005f8 <__aeabi_dmul>
 800e17a:	4602      	mov	r2, r0
 800e17c:	460b      	mov	r3, r1
 800e17e:	4620      	mov	r0, r4
 800e180:	4629      	mov	r1, r5
 800e182:	f7f2 f881 	bl	8000288 <__aeabi_dsub>
 800e186:	a364      	add	r3, pc, #400	; (adr r3, 800e318 <__ieee754_rem_pio2+0x308>)
 800e188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18c:	4606      	mov	r6, r0
 800e18e:	460f      	mov	r7, r1
 800e190:	ec51 0b18 	vmov	r0, r1, d8
 800e194:	f7f2 fa30 	bl	80005f8 <__aeabi_dmul>
 800e198:	f1bb 0f1f 	cmp.w	fp, #31
 800e19c:	4604      	mov	r4, r0
 800e19e:	460d      	mov	r5, r1
 800e1a0:	dc0d      	bgt.n	800e1be <__ieee754_rem_pio2+0x1ae>
 800e1a2:	4b6e      	ldr	r3, [pc, #440]	; (800e35c <__ieee754_rem_pio2+0x34c>)
 800e1a4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ac:	4543      	cmp	r3, r8
 800e1ae:	d006      	beq.n	800e1be <__ieee754_rem_pio2+0x1ae>
 800e1b0:	4622      	mov	r2, r4
 800e1b2:	462b      	mov	r3, r5
 800e1b4:	4630      	mov	r0, r6
 800e1b6:	4639      	mov	r1, r7
 800e1b8:	f7f2 f866 	bl	8000288 <__aeabi_dsub>
 800e1bc:	e00e      	b.n	800e1dc <__ieee754_rem_pio2+0x1cc>
 800e1be:	462b      	mov	r3, r5
 800e1c0:	4622      	mov	r2, r4
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	4639      	mov	r1, r7
 800e1c6:	f7f2 f85f 	bl	8000288 <__aeabi_dsub>
 800e1ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e1ce:	9303      	str	r3, [sp, #12]
 800e1d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e1d4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e1d8:	2b10      	cmp	r3, #16
 800e1da:	dc02      	bgt.n	800e1e2 <__ieee754_rem_pio2+0x1d2>
 800e1dc:	e9ca 0100 	strd	r0, r1, [sl]
 800e1e0:	e039      	b.n	800e256 <__ieee754_rem_pio2+0x246>
 800e1e2:	a34f      	add	r3, pc, #316	; (adr r3, 800e320 <__ieee754_rem_pio2+0x310>)
 800e1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e8:	ec51 0b18 	vmov	r0, r1, d8
 800e1ec:	f7f2 fa04 	bl	80005f8 <__aeabi_dmul>
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	460d      	mov	r5, r1
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	4639      	mov	r1, r7
 800e1fc:	f7f2 f844 	bl	8000288 <__aeabi_dsub>
 800e200:	4602      	mov	r2, r0
 800e202:	460b      	mov	r3, r1
 800e204:	4680      	mov	r8, r0
 800e206:	4689      	mov	r9, r1
 800e208:	4630      	mov	r0, r6
 800e20a:	4639      	mov	r1, r7
 800e20c:	f7f2 f83c 	bl	8000288 <__aeabi_dsub>
 800e210:	4622      	mov	r2, r4
 800e212:	462b      	mov	r3, r5
 800e214:	f7f2 f838 	bl	8000288 <__aeabi_dsub>
 800e218:	a343      	add	r3, pc, #268	; (adr r3, 800e328 <__ieee754_rem_pio2+0x318>)
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	4604      	mov	r4, r0
 800e220:	460d      	mov	r5, r1
 800e222:	ec51 0b18 	vmov	r0, r1, d8
 800e226:	f7f2 f9e7 	bl	80005f8 <__aeabi_dmul>
 800e22a:	4622      	mov	r2, r4
 800e22c:	462b      	mov	r3, r5
 800e22e:	f7f2 f82b 	bl	8000288 <__aeabi_dsub>
 800e232:	4602      	mov	r2, r0
 800e234:	460b      	mov	r3, r1
 800e236:	4604      	mov	r4, r0
 800e238:	460d      	mov	r5, r1
 800e23a:	4640      	mov	r0, r8
 800e23c:	4649      	mov	r1, r9
 800e23e:	f7f2 f823 	bl	8000288 <__aeabi_dsub>
 800e242:	9a03      	ldr	r2, [sp, #12]
 800e244:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	2b31      	cmp	r3, #49	; 0x31
 800e24c:	dc24      	bgt.n	800e298 <__ieee754_rem_pio2+0x288>
 800e24e:	e9ca 0100 	strd	r0, r1, [sl]
 800e252:	4646      	mov	r6, r8
 800e254:	464f      	mov	r7, r9
 800e256:	e9da 8900 	ldrd	r8, r9, [sl]
 800e25a:	4630      	mov	r0, r6
 800e25c:	4642      	mov	r2, r8
 800e25e:	464b      	mov	r3, r9
 800e260:	4639      	mov	r1, r7
 800e262:	f7f2 f811 	bl	8000288 <__aeabi_dsub>
 800e266:	462b      	mov	r3, r5
 800e268:	4622      	mov	r2, r4
 800e26a:	f7f2 f80d 	bl	8000288 <__aeabi_dsub>
 800e26e:	9b02      	ldr	r3, [sp, #8]
 800e270:	2b00      	cmp	r3, #0
 800e272:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e276:	f6bf af0b 	bge.w	800e090 <__ieee754_rem_pio2+0x80>
 800e27a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e27e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e286:	f8ca 8000 	str.w	r8, [sl]
 800e28a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e28e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e292:	f1cb 0b00 	rsb	fp, fp, #0
 800e296:	e6fb      	b.n	800e090 <__ieee754_rem_pio2+0x80>
 800e298:	a327      	add	r3, pc, #156	; (adr r3, 800e338 <__ieee754_rem_pio2+0x328>)
 800e29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29e:	ec51 0b18 	vmov	r0, r1, d8
 800e2a2:	f7f2 f9a9 	bl	80005f8 <__aeabi_dmul>
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	4649      	mov	r1, r9
 800e2b2:	f7f1 ffe9 	bl	8000288 <__aeabi_dsub>
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	4606      	mov	r6, r0
 800e2bc:	460f      	mov	r7, r1
 800e2be:	4640      	mov	r0, r8
 800e2c0:	4649      	mov	r1, r9
 800e2c2:	f7f1 ffe1 	bl	8000288 <__aeabi_dsub>
 800e2c6:	4622      	mov	r2, r4
 800e2c8:	462b      	mov	r3, r5
 800e2ca:	f7f1 ffdd 	bl	8000288 <__aeabi_dsub>
 800e2ce:	a31c      	add	r3, pc, #112	; (adr r3, 800e340 <__ieee754_rem_pio2+0x330>)
 800e2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	460d      	mov	r5, r1
 800e2d8:	ec51 0b18 	vmov	r0, r1, d8
 800e2dc:	f7f2 f98c 	bl	80005f8 <__aeabi_dmul>
 800e2e0:	4622      	mov	r2, r4
 800e2e2:	462b      	mov	r3, r5
 800e2e4:	f7f1 ffd0 	bl	8000288 <__aeabi_dsub>
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	e760      	b.n	800e1b0 <__ieee754_rem_pio2+0x1a0>
 800e2ee:	4b1c      	ldr	r3, [pc, #112]	; (800e360 <__ieee754_rem_pio2+0x350>)
 800e2f0:	4598      	cmp	r8, r3
 800e2f2:	dd37      	ble.n	800e364 <__ieee754_rem_pio2+0x354>
 800e2f4:	ee10 2a10 	vmov	r2, s0
 800e2f8:	462b      	mov	r3, r5
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	4629      	mov	r1, r5
 800e2fe:	f7f1 ffc3 	bl	8000288 <__aeabi_dsub>
 800e302:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e306:	e9ca 0100 	strd	r0, r1, [sl]
 800e30a:	e695      	b.n	800e038 <__ieee754_rem_pio2+0x28>
 800e30c:	f3af 8000 	nop.w
 800e310:	54400000 	.word	0x54400000
 800e314:	3ff921fb 	.word	0x3ff921fb
 800e318:	1a626331 	.word	0x1a626331
 800e31c:	3dd0b461 	.word	0x3dd0b461
 800e320:	1a600000 	.word	0x1a600000
 800e324:	3dd0b461 	.word	0x3dd0b461
 800e328:	2e037073 	.word	0x2e037073
 800e32c:	3ba3198a 	.word	0x3ba3198a
 800e330:	6dc9c883 	.word	0x6dc9c883
 800e334:	3fe45f30 	.word	0x3fe45f30
 800e338:	2e000000 	.word	0x2e000000
 800e33c:	3ba3198a 	.word	0x3ba3198a
 800e340:	252049c1 	.word	0x252049c1
 800e344:	397b839a 	.word	0x397b839a
 800e348:	3fe921fb 	.word	0x3fe921fb
 800e34c:	4002d97b 	.word	0x4002d97b
 800e350:	3ff921fb 	.word	0x3ff921fb
 800e354:	413921fb 	.word	0x413921fb
 800e358:	3fe00000 	.word	0x3fe00000
 800e35c:	0800f28c 	.word	0x0800f28c
 800e360:	7fefffff 	.word	0x7fefffff
 800e364:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e368:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e36c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e370:	4620      	mov	r0, r4
 800e372:	460d      	mov	r5, r1
 800e374:	f7f2 fbf0 	bl	8000b58 <__aeabi_d2iz>
 800e378:	f7f2 f8d4 	bl	8000524 <__aeabi_i2d>
 800e37c:	4602      	mov	r2, r0
 800e37e:	460b      	mov	r3, r1
 800e380:	4620      	mov	r0, r4
 800e382:	4629      	mov	r1, r5
 800e384:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e388:	f7f1 ff7e 	bl	8000288 <__aeabi_dsub>
 800e38c:	4b21      	ldr	r3, [pc, #132]	; (800e414 <__ieee754_rem_pio2+0x404>)
 800e38e:	2200      	movs	r2, #0
 800e390:	f7f2 f932 	bl	80005f8 <__aeabi_dmul>
 800e394:	460d      	mov	r5, r1
 800e396:	4604      	mov	r4, r0
 800e398:	f7f2 fbde 	bl	8000b58 <__aeabi_d2iz>
 800e39c:	f7f2 f8c2 	bl	8000524 <__aeabi_i2d>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	4629      	mov	r1, r5
 800e3a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e3ac:	f7f1 ff6c 	bl	8000288 <__aeabi_dsub>
 800e3b0:	4b18      	ldr	r3, [pc, #96]	; (800e414 <__ieee754_rem_pio2+0x404>)
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	f7f2 f920 	bl	80005f8 <__aeabi_dmul>
 800e3b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e3bc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e3c0:	2703      	movs	r7, #3
 800e3c2:	2400      	movs	r4, #0
 800e3c4:	2500      	movs	r5, #0
 800e3c6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e3ca:	4622      	mov	r2, r4
 800e3cc:	462b      	mov	r3, r5
 800e3ce:	46b9      	mov	r9, r7
 800e3d0:	3f01      	subs	r7, #1
 800e3d2:	f7f2 fb79 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	d1f5      	bne.n	800e3c6 <__ieee754_rem_pio2+0x3b6>
 800e3da:	4b0f      	ldr	r3, [pc, #60]	; (800e418 <__ieee754_rem_pio2+0x408>)
 800e3dc:	9301      	str	r3, [sp, #4]
 800e3de:	2302      	movs	r3, #2
 800e3e0:	9300      	str	r3, [sp, #0]
 800e3e2:	4632      	mov	r2, r6
 800e3e4:	464b      	mov	r3, r9
 800e3e6:	4651      	mov	r1, sl
 800e3e8:	a804      	add	r0, sp, #16
 800e3ea:	f000 f821 	bl	800e430 <__kernel_rem_pio2>
 800e3ee:	9b02      	ldr	r3, [sp, #8]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	4683      	mov	fp, r0
 800e3f4:	f6bf ae4c 	bge.w	800e090 <__ieee754_rem_pio2+0x80>
 800e3f8:	e9da 2100 	ldrd	r2, r1, [sl]
 800e3fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e400:	e9ca 2300 	strd	r2, r3, [sl]
 800e404:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e408:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e40c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e410:	e73f      	b.n	800e292 <__ieee754_rem_pio2+0x282>
 800e412:	bf00      	nop
 800e414:	41700000 	.word	0x41700000
 800e418:	0800f30c 	.word	0x0800f30c

0800e41c <fabs>:
 800e41c:	ec51 0b10 	vmov	r0, r1, d0
 800e420:	ee10 2a10 	vmov	r2, s0
 800e424:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e428:	ec43 2b10 	vmov	d0, r2, r3
 800e42c:	4770      	bx	lr
	...

0800e430 <__kernel_rem_pio2>:
 800e430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e434:	ed2d 8b02 	vpush	{d8}
 800e438:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e43c:	f112 0f14 	cmn.w	r2, #20
 800e440:	9306      	str	r3, [sp, #24]
 800e442:	9104      	str	r1, [sp, #16]
 800e444:	4bc2      	ldr	r3, [pc, #776]	; (800e750 <__kernel_rem_pio2+0x320>)
 800e446:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e448:	9009      	str	r0, [sp, #36]	; 0x24
 800e44a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	9b06      	ldr	r3, [sp, #24]
 800e452:	f103 33ff 	add.w	r3, r3, #4294967295
 800e456:	bfa8      	it	ge
 800e458:	1ed4      	subge	r4, r2, #3
 800e45a:	9305      	str	r3, [sp, #20]
 800e45c:	bfb2      	itee	lt
 800e45e:	2400      	movlt	r4, #0
 800e460:	2318      	movge	r3, #24
 800e462:	fb94 f4f3 	sdivge	r4, r4, r3
 800e466:	f06f 0317 	mvn.w	r3, #23
 800e46a:	fb04 3303 	mla	r3, r4, r3, r3
 800e46e:	eb03 0a02 	add.w	sl, r3, r2
 800e472:	9b00      	ldr	r3, [sp, #0]
 800e474:	9a05      	ldr	r2, [sp, #20]
 800e476:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800e740 <__kernel_rem_pio2+0x310>
 800e47a:	eb03 0802 	add.w	r8, r3, r2
 800e47e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e480:	1aa7      	subs	r7, r4, r2
 800e482:	ae20      	add	r6, sp, #128	; 0x80
 800e484:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e488:	2500      	movs	r5, #0
 800e48a:	4545      	cmp	r5, r8
 800e48c:	dd13      	ble.n	800e4b6 <__kernel_rem_pio2+0x86>
 800e48e:	9b06      	ldr	r3, [sp, #24]
 800e490:	aa20      	add	r2, sp, #128	; 0x80
 800e492:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e496:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e49a:	f04f 0800 	mov.w	r8, #0
 800e49e:	9b00      	ldr	r3, [sp, #0]
 800e4a0:	4598      	cmp	r8, r3
 800e4a2:	dc31      	bgt.n	800e508 <__kernel_rem_pio2+0xd8>
 800e4a4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800e740 <__kernel_rem_pio2+0x310>
 800e4a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e4ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e4b0:	462f      	mov	r7, r5
 800e4b2:	2600      	movs	r6, #0
 800e4b4:	e01b      	b.n	800e4ee <__kernel_rem_pio2+0xbe>
 800e4b6:	42ef      	cmn	r7, r5
 800e4b8:	d407      	bmi.n	800e4ca <__kernel_rem_pio2+0x9a>
 800e4ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e4be:	f7f2 f831 	bl	8000524 <__aeabi_i2d>
 800e4c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e4c6:	3501      	adds	r5, #1
 800e4c8:	e7df      	b.n	800e48a <__kernel_rem_pio2+0x5a>
 800e4ca:	ec51 0b18 	vmov	r0, r1, d8
 800e4ce:	e7f8      	b.n	800e4c2 <__kernel_rem_pio2+0x92>
 800e4d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e4d8:	f7f2 f88e 	bl	80005f8 <__aeabi_dmul>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	460b      	mov	r3, r1
 800e4e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4e4:	f7f1 fed2 	bl	800028c <__adddf3>
 800e4e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4ec:	3601      	adds	r6, #1
 800e4ee:	9b05      	ldr	r3, [sp, #20]
 800e4f0:	429e      	cmp	r6, r3
 800e4f2:	f1a7 0708 	sub.w	r7, r7, #8
 800e4f6:	ddeb      	ble.n	800e4d0 <__kernel_rem_pio2+0xa0>
 800e4f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e4fc:	f108 0801 	add.w	r8, r8, #1
 800e500:	ecab 7b02 	vstmia	fp!, {d7}
 800e504:	3508      	adds	r5, #8
 800e506:	e7ca      	b.n	800e49e <__kernel_rem_pio2+0x6e>
 800e508:	9b00      	ldr	r3, [sp, #0]
 800e50a:	aa0c      	add	r2, sp, #48	; 0x30
 800e50c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e510:	930b      	str	r3, [sp, #44]	; 0x2c
 800e512:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e514:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e518:	9c00      	ldr	r4, [sp, #0]
 800e51a:	930a      	str	r3, [sp, #40]	; 0x28
 800e51c:	00e3      	lsls	r3, r4, #3
 800e51e:	9308      	str	r3, [sp, #32]
 800e520:	ab98      	add	r3, sp, #608	; 0x260
 800e522:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e526:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e52a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e52e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e530:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e534:	46c3      	mov	fp, r8
 800e536:	46a1      	mov	r9, r4
 800e538:	f1b9 0f00 	cmp.w	r9, #0
 800e53c:	f1a5 0508 	sub.w	r5, r5, #8
 800e540:	dc77      	bgt.n	800e632 <__kernel_rem_pio2+0x202>
 800e542:	ec47 6b10 	vmov	d0, r6, r7
 800e546:	4650      	mov	r0, sl
 800e548:	f000 fac2 	bl	800ead0 <scalbn>
 800e54c:	ec57 6b10 	vmov	r6, r7, d0
 800e550:	2200      	movs	r2, #0
 800e552:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e556:	ee10 0a10 	vmov	r0, s0
 800e55a:	4639      	mov	r1, r7
 800e55c:	f7f2 f84c 	bl	80005f8 <__aeabi_dmul>
 800e560:	ec41 0b10 	vmov	d0, r0, r1
 800e564:	f000 fb34 	bl	800ebd0 <floor>
 800e568:	4b7a      	ldr	r3, [pc, #488]	; (800e754 <__kernel_rem_pio2+0x324>)
 800e56a:	ec51 0b10 	vmov	r0, r1, d0
 800e56e:	2200      	movs	r2, #0
 800e570:	f7f2 f842 	bl	80005f8 <__aeabi_dmul>
 800e574:	4602      	mov	r2, r0
 800e576:	460b      	mov	r3, r1
 800e578:	4630      	mov	r0, r6
 800e57a:	4639      	mov	r1, r7
 800e57c:	f7f1 fe84 	bl	8000288 <__aeabi_dsub>
 800e580:	460f      	mov	r7, r1
 800e582:	4606      	mov	r6, r0
 800e584:	f7f2 fae8 	bl	8000b58 <__aeabi_d2iz>
 800e588:	9002      	str	r0, [sp, #8]
 800e58a:	f7f1 ffcb 	bl	8000524 <__aeabi_i2d>
 800e58e:	4602      	mov	r2, r0
 800e590:	460b      	mov	r3, r1
 800e592:	4630      	mov	r0, r6
 800e594:	4639      	mov	r1, r7
 800e596:	f7f1 fe77 	bl	8000288 <__aeabi_dsub>
 800e59a:	f1ba 0f00 	cmp.w	sl, #0
 800e59e:	4606      	mov	r6, r0
 800e5a0:	460f      	mov	r7, r1
 800e5a2:	dd6d      	ble.n	800e680 <__kernel_rem_pio2+0x250>
 800e5a4:	1e61      	subs	r1, r4, #1
 800e5a6:	ab0c      	add	r3, sp, #48	; 0x30
 800e5a8:	9d02      	ldr	r5, [sp, #8]
 800e5aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5ae:	f1ca 0018 	rsb	r0, sl, #24
 800e5b2:	fa43 f200 	asr.w	r2, r3, r0
 800e5b6:	4415      	add	r5, r2
 800e5b8:	4082      	lsls	r2, r0
 800e5ba:	1a9b      	subs	r3, r3, r2
 800e5bc:	aa0c      	add	r2, sp, #48	; 0x30
 800e5be:	9502      	str	r5, [sp, #8]
 800e5c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e5c4:	f1ca 0217 	rsb	r2, sl, #23
 800e5c8:	fa43 fb02 	asr.w	fp, r3, r2
 800e5cc:	f1bb 0f00 	cmp.w	fp, #0
 800e5d0:	dd65      	ble.n	800e69e <__kernel_rem_pio2+0x26e>
 800e5d2:	9b02      	ldr	r3, [sp, #8]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	9302      	str	r3, [sp, #8]
 800e5da:	4615      	mov	r5, r2
 800e5dc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e5e0:	4294      	cmp	r4, r2
 800e5e2:	f300 809f 	bgt.w	800e724 <__kernel_rem_pio2+0x2f4>
 800e5e6:	f1ba 0f00 	cmp.w	sl, #0
 800e5ea:	dd07      	ble.n	800e5fc <__kernel_rem_pio2+0x1cc>
 800e5ec:	f1ba 0f01 	cmp.w	sl, #1
 800e5f0:	f000 80c1 	beq.w	800e776 <__kernel_rem_pio2+0x346>
 800e5f4:	f1ba 0f02 	cmp.w	sl, #2
 800e5f8:	f000 80c7 	beq.w	800e78a <__kernel_rem_pio2+0x35a>
 800e5fc:	f1bb 0f02 	cmp.w	fp, #2
 800e600:	d14d      	bne.n	800e69e <__kernel_rem_pio2+0x26e>
 800e602:	4632      	mov	r2, r6
 800e604:	463b      	mov	r3, r7
 800e606:	4954      	ldr	r1, [pc, #336]	; (800e758 <__kernel_rem_pio2+0x328>)
 800e608:	2000      	movs	r0, #0
 800e60a:	f7f1 fe3d 	bl	8000288 <__aeabi_dsub>
 800e60e:	4606      	mov	r6, r0
 800e610:	460f      	mov	r7, r1
 800e612:	2d00      	cmp	r5, #0
 800e614:	d043      	beq.n	800e69e <__kernel_rem_pio2+0x26e>
 800e616:	4650      	mov	r0, sl
 800e618:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800e748 <__kernel_rem_pio2+0x318>
 800e61c:	f000 fa58 	bl	800ead0 <scalbn>
 800e620:	4630      	mov	r0, r6
 800e622:	4639      	mov	r1, r7
 800e624:	ec53 2b10 	vmov	r2, r3, d0
 800e628:	f7f1 fe2e 	bl	8000288 <__aeabi_dsub>
 800e62c:	4606      	mov	r6, r0
 800e62e:	460f      	mov	r7, r1
 800e630:	e035      	b.n	800e69e <__kernel_rem_pio2+0x26e>
 800e632:	4b4a      	ldr	r3, [pc, #296]	; (800e75c <__kernel_rem_pio2+0x32c>)
 800e634:	2200      	movs	r2, #0
 800e636:	4630      	mov	r0, r6
 800e638:	4639      	mov	r1, r7
 800e63a:	f7f1 ffdd 	bl	80005f8 <__aeabi_dmul>
 800e63e:	f7f2 fa8b 	bl	8000b58 <__aeabi_d2iz>
 800e642:	f7f1 ff6f 	bl	8000524 <__aeabi_i2d>
 800e646:	4602      	mov	r2, r0
 800e648:	460b      	mov	r3, r1
 800e64a:	ec43 2b18 	vmov	d8, r2, r3
 800e64e:	4b44      	ldr	r3, [pc, #272]	; (800e760 <__kernel_rem_pio2+0x330>)
 800e650:	2200      	movs	r2, #0
 800e652:	f7f1 ffd1 	bl	80005f8 <__aeabi_dmul>
 800e656:	4602      	mov	r2, r0
 800e658:	460b      	mov	r3, r1
 800e65a:	4630      	mov	r0, r6
 800e65c:	4639      	mov	r1, r7
 800e65e:	f7f1 fe13 	bl	8000288 <__aeabi_dsub>
 800e662:	f7f2 fa79 	bl	8000b58 <__aeabi_d2iz>
 800e666:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e66a:	f84b 0b04 	str.w	r0, [fp], #4
 800e66e:	ec51 0b18 	vmov	r0, r1, d8
 800e672:	f7f1 fe0b 	bl	800028c <__adddf3>
 800e676:	f109 39ff 	add.w	r9, r9, #4294967295
 800e67a:	4606      	mov	r6, r0
 800e67c:	460f      	mov	r7, r1
 800e67e:	e75b      	b.n	800e538 <__kernel_rem_pio2+0x108>
 800e680:	d106      	bne.n	800e690 <__kernel_rem_pio2+0x260>
 800e682:	1e63      	subs	r3, r4, #1
 800e684:	aa0c      	add	r2, sp, #48	; 0x30
 800e686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e68a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800e68e:	e79d      	b.n	800e5cc <__kernel_rem_pio2+0x19c>
 800e690:	4b34      	ldr	r3, [pc, #208]	; (800e764 <__kernel_rem_pio2+0x334>)
 800e692:	2200      	movs	r2, #0
 800e694:	f7f2 fa36 	bl	8000b04 <__aeabi_dcmpge>
 800e698:	2800      	cmp	r0, #0
 800e69a:	d140      	bne.n	800e71e <__kernel_rem_pio2+0x2ee>
 800e69c:	4683      	mov	fp, r0
 800e69e:	2200      	movs	r2, #0
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	4630      	mov	r0, r6
 800e6a4:	4639      	mov	r1, r7
 800e6a6:	f7f2 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	f000 80c1 	beq.w	800e832 <__kernel_rem_pio2+0x402>
 800e6b0:	1e65      	subs	r5, r4, #1
 800e6b2:	462b      	mov	r3, r5
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	9900      	ldr	r1, [sp, #0]
 800e6b8:	428b      	cmp	r3, r1
 800e6ba:	da6d      	bge.n	800e798 <__kernel_rem_pio2+0x368>
 800e6bc:	2a00      	cmp	r2, #0
 800e6be:	f000 808a 	beq.w	800e7d6 <__kernel_rem_pio2+0x3a6>
 800e6c2:	ab0c      	add	r3, sp, #48	; 0x30
 800e6c4:	f1aa 0a18 	sub.w	sl, sl, #24
 800e6c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f000 80ae 	beq.w	800e82e <__kernel_rem_pio2+0x3fe>
 800e6d2:	4650      	mov	r0, sl
 800e6d4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800e748 <__kernel_rem_pio2+0x318>
 800e6d8:	f000 f9fa 	bl	800ead0 <scalbn>
 800e6dc:	1c6b      	adds	r3, r5, #1
 800e6de:	00da      	lsls	r2, r3, #3
 800e6e0:	9205      	str	r2, [sp, #20]
 800e6e2:	ec57 6b10 	vmov	r6, r7, d0
 800e6e6:	aa70      	add	r2, sp, #448	; 0x1c0
 800e6e8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800e75c <__kernel_rem_pio2+0x32c>
 800e6ec:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800e6f0:	462c      	mov	r4, r5
 800e6f2:	f04f 0800 	mov.w	r8, #0
 800e6f6:	2c00      	cmp	r4, #0
 800e6f8:	f280 80d4 	bge.w	800e8a4 <__kernel_rem_pio2+0x474>
 800e6fc:	462c      	mov	r4, r5
 800e6fe:	2c00      	cmp	r4, #0
 800e700:	f2c0 8102 	blt.w	800e908 <__kernel_rem_pio2+0x4d8>
 800e704:	4b18      	ldr	r3, [pc, #96]	; (800e768 <__kernel_rem_pio2+0x338>)
 800e706:	461e      	mov	r6, r3
 800e708:	ab70      	add	r3, sp, #448	; 0x1c0
 800e70a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800e70e:	1b2b      	subs	r3, r5, r4
 800e710:	f04f 0900 	mov.w	r9, #0
 800e714:	f04f 0a00 	mov.w	sl, #0
 800e718:	2700      	movs	r7, #0
 800e71a:	9306      	str	r3, [sp, #24]
 800e71c:	e0e6      	b.n	800e8ec <__kernel_rem_pio2+0x4bc>
 800e71e:	f04f 0b02 	mov.w	fp, #2
 800e722:	e756      	b.n	800e5d2 <__kernel_rem_pio2+0x1a2>
 800e724:	f8d8 3000 	ldr.w	r3, [r8]
 800e728:	bb05      	cbnz	r5, 800e76c <__kernel_rem_pio2+0x33c>
 800e72a:	b123      	cbz	r3, 800e736 <__kernel_rem_pio2+0x306>
 800e72c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e730:	f8c8 3000 	str.w	r3, [r8]
 800e734:	2301      	movs	r3, #1
 800e736:	3201      	adds	r2, #1
 800e738:	f108 0804 	add.w	r8, r8, #4
 800e73c:	461d      	mov	r5, r3
 800e73e:	e74f      	b.n	800e5e0 <__kernel_rem_pio2+0x1b0>
	...
 800e74c:	3ff00000 	.word	0x3ff00000
 800e750:	0800f458 	.word	0x0800f458
 800e754:	40200000 	.word	0x40200000
 800e758:	3ff00000 	.word	0x3ff00000
 800e75c:	3e700000 	.word	0x3e700000
 800e760:	41700000 	.word	0x41700000
 800e764:	3fe00000 	.word	0x3fe00000
 800e768:	0800f418 	.word	0x0800f418
 800e76c:	1acb      	subs	r3, r1, r3
 800e76e:	f8c8 3000 	str.w	r3, [r8]
 800e772:	462b      	mov	r3, r5
 800e774:	e7df      	b.n	800e736 <__kernel_rem_pio2+0x306>
 800e776:	1e62      	subs	r2, r4, #1
 800e778:	ab0c      	add	r3, sp, #48	; 0x30
 800e77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e77e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e782:	a90c      	add	r1, sp, #48	; 0x30
 800e784:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e788:	e738      	b.n	800e5fc <__kernel_rem_pio2+0x1cc>
 800e78a:	1e62      	subs	r2, r4, #1
 800e78c:	ab0c      	add	r3, sp, #48	; 0x30
 800e78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e792:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e796:	e7f4      	b.n	800e782 <__kernel_rem_pio2+0x352>
 800e798:	a90c      	add	r1, sp, #48	; 0x30
 800e79a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	430a      	orrs	r2, r1
 800e7a2:	e788      	b.n	800e6b6 <__kernel_rem_pio2+0x286>
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e7aa:	2900      	cmp	r1, #0
 800e7ac:	d0fa      	beq.n	800e7a4 <__kernel_rem_pio2+0x374>
 800e7ae:	9a08      	ldr	r2, [sp, #32]
 800e7b0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800e7b4:	446a      	add	r2, sp
 800e7b6:	3a98      	subs	r2, #152	; 0x98
 800e7b8:	9208      	str	r2, [sp, #32]
 800e7ba:	9a06      	ldr	r2, [sp, #24]
 800e7bc:	a920      	add	r1, sp, #128	; 0x80
 800e7be:	18a2      	adds	r2, r4, r2
 800e7c0:	18e3      	adds	r3, r4, r3
 800e7c2:	f104 0801 	add.w	r8, r4, #1
 800e7c6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e7ca:	9302      	str	r3, [sp, #8]
 800e7cc:	9b02      	ldr	r3, [sp, #8]
 800e7ce:	4543      	cmp	r3, r8
 800e7d0:	da04      	bge.n	800e7dc <__kernel_rem_pio2+0x3ac>
 800e7d2:	461c      	mov	r4, r3
 800e7d4:	e6a2      	b.n	800e51c <__kernel_rem_pio2+0xec>
 800e7d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7d8:	2301      	movs	r3, #1
 800e7da:	e7e4      	b.n	800e7a6 <__kernel_rem_pio2+0x376>
 800e7dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e7e2:	f7f1 fe9f 	bl	8000524 <__aeabi_i2d>
 800e7e6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e7ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7ec:	46ab      	mov	fp, r5
 800e7ee:	461c      	mov	r4, r3
 800e7f0:	f04f 0900 	mov.w	r9, #0
 800e7f4:	2600      	movs	r6, #0
 800e7f6:	2700      	movs	r7, #0
 800e7f8:	9b05      	ldr	r3, [sp, #20]
 800e7fa:	4599      	cmp	r9, r3
 800e7fc:	dd06      	ble.n	800e80c <__kernel_rem_pio2+0x3dc>
 800e7fe:	9b08      	ldr	r3, [sp, #32]
 800e800:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e804:	f108 0801 	add.w	r8, r8, #1
 800e808:	9308      	str	r3, [sp, #32]
 800e80a:	e7df      	b.n	800e7cc <__kernel_rem_pio2+0x39c>
 800e80c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e810:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e814:	f7f1 fef0 	bl	80005f8 <__aeabi_dmul>
 800e818:	4602      	mov	r2, r0
 800e81a:	460b      	mov	r3, r1
 800e81c:	4630      	mov	r0, r6
 800e81e:	4639      	mov	r1, r7
 800e820:	f7f1 fd34 	bl	800028c <__adddf3>
 800e824:	f109 0901 	add.w	r9, r9, #1
 800e828:	4606      	mov	r6, r0
 800e82a:	460f      	mov	r7, r1
 800e82c:	e7e4      	b.n	800e7f8 <__kernel_rem_pio2+0x3c8>
 800e82e:	3d01      	subs	r5, #1
 800e830:	e747      	b.n	800e6c2 <__kernel_rem_pio2+0x292>
 800e832:	ec47 6b10 	vmov	d0, r6, r7
 800e836:	f1ca 0000 	rsb	r0, sl, #0
 800e83a:	f000 f949 	bl	800ead0 <scalbn>
 800e83e:	ec57 6b10 	vmov	r6, r7, d0
 800e842:	4ba0      	ldr	r3, [pc, #640]	; (800eac4 <__kernel_rem_pio2+0x694>)
 800e844:	ee10 0a10 	vmov	r0, s0
 800e848:	2200      	movs	r2, #0
 800e84a:	4639      	mov	r1, r7
 800e84c:	f7f2 f95a 	bl	8000b04 <__aeabi_dcmpge>
 800e850:	b1f8      	cbz	r0, 800e892 <__kernel_rem_pio2+0x462>
 800e852:	4b9d      	ldr	r3, [pc, #628]	; (800eac8 <__kernel_rem_pio2+0x698>)
 800e854:	2200      	movs	r2, #0
 800e856:	4630      	mov	r0, r6
 800e858:	4639      	mov	r1, r7
 800e85a:	f7f1 fecd 	bl	80005f8 <__aeabi_dmul>
 800e85e:	f7f2 f97b 	bl	8000b58 <__aeabi_d2iz>
 800e862:	4680      	mov	r8, r0
 800e864:	f7f1 fe5e 	bl	8000524 <__aeabi_i2d>
 800e868:	4b96      	ldr	r3, [pc, #600]	; (800eac4 <__kernel_rem_pio2+0x694>)
 800e86a:	2200      	movs	r2, #0
 800e86c:	f7f1 fec4 	bl	80005f8 <__aeabi_dmul>
 800e870:	460b      	mov	r3, r1
 800e872:	4602      	mov	r2, r0
 800e874:	4639      	mov	r1, r7
 800e876:	4630      	mov	r0, r6
 800e878:	f7f1 fd06 	bl	8000288 <__aeabi_dsub>
 800e87c:	f7f2 f96c 	bl	8000b58 <__aeabi_d2iz>
 800e880:	1c65      	adds	r5, r4, #1
 800e882:	ab0c      	add	r3, sp, #48	; 0x30
 800e884:	f10a 0a18 	add.w	sl, sl, #24
 800e888:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e88c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e890:	e71f      	b.n	800e6d2 <__kernel_rem_pio2+0x2a2>
 800e892:	4630      	mov	r0, r6
 800e894:	4639      	mov	r1, r7
 800e896:	f7f2 f95f 	bl	8000b58 <__aeabi_d2iz>
 800e89a:	ab0c      	add	r3, sp, #48	; 0x30
 800e89c:	4625      	mov	r5, r4
 800e89e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e8a2:	e716      	b.n	800e6d2 <__kernel_rem_pio2+0x2a2>
 800e8a4:	ab0c      	add	r3, sp, #48	; 0x30
 800e8a6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e8aa:	f7f1 fe3b 	bl	8000524 <__aeabi_i2d>
 800e8ae:	4632      	mov	r2, r6
 800e8b0:	463b      	mov	r3, r7
 800e8b2:	f7f1 fea1 	bl	80005f8 <__aeabi_dmul>
 800e8b6:	4642      	mov	r2, r8
 800e8b8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e8bc:	464b      	mov	r3, r9
 800e8be:	4630      	mov	r0, r6
 800e8c0:	4639      	mov	r1, r7
 800e8c2:	f7f1 fe99 	bl	80005f8 <__aeabi_dmul>
 800e8c6:	3c01      	subs	r4, #1
 800e8c8:	4606      	mov	r6, r0
 800e8ca:	460f      	mov	r7, r1
 800e8cc:	e713      	b.n	800e6f6 <__kernel_rem_pio2+0x2c6>
 800e8ce:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800e8d2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800e8d6:	f7f1 fe8f 	bl	80005f8 <__aeabi_dmul>
 800e8da:	4602      	mov	r2, r0
 800e8dc:	460b      	mov	r3, r1
 800e8de:	4648      	mov	r0, r9
 800e8e0:	4651      	mov	r1, sl
 800e8e2:	f7f1 fcd3 	bl	800028c <__adddf3>
 800e8e6:	3701      	adds	r7, #1
 800e8e8:	4681      	mov	r9, r0
 800e8ea:	468a      	mov	sl, r1
 800e8ec:	9b00      	ldr	r3, [sp, #0]
 800e8ee:	429f      	cmp	r7, r3
 800e8f0:	dc02      	bgt.n	800e8f8 <__kernel_rem_pio2+0x4c8>
 800e8f2:	9b06      	ldr	r3, [sp, #24]
 800e8f4:	429f      	cmp	r7, r3
 800e8f6:	ddea      	ble.n	800e8ce <__kernel_rem_pio2+0x49e>
 800e8f8:	9a06      	ldr	r2, [sp, #24]
 800e8fa:	ab48      	add	r3, sp, #288	; 0x120
 800e8fc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800e900:	e9c6 9a00 	strd	r9, sl, [r6]
 800e904:	3c01      	subs	r4, #1
 800e906:	e6fa      	b.n	800e6fe <__kernel_rem_pio2+0x2ce>
 800e908:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e90a:	2b02      	cmp	r3, #2
 800e90c:	dc0b      	bgt.n	800e926 <__kernel_rem_pio2+0x4f6>
 800e90e:	2b00      	cmp	r3, #0
 800e910:	dc39      	bgt.n	800e986 <__kernel_rem_pio2+0x556>
 800e912:	d05d      	beq.n	800e9d0 <__kernel_rem_pio2+0x5a0>
 800e914:	9b02      	ldr	r3, [sp, #8]
 800e916:	f003 0007 	and.w	r0, r3, #7
 800e91a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800e91e:	ecbd 8b02 	vpop	{d8}
 800e922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e926:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800e928:	2b03      	cmp	r3, #3
 800e92a:	d1f3      	bne.n	800e914 <__kernel_rem_pio2+0x4e4>
 800e92c:	9b05      	ldr	r3, [sp, #20]
 800e92e:	9500      	str	r5, [sp, #0]
 800e930:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800e934:	eb0d 0403 	add.w	r4, sp, r3
 800e938:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800e93c:	46a2      	mov	sl, r4
 800e93e:	9b00      	ldr	r3, [sp, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	f1aa 0a08 	sub.w	sl, sl, #8
 800e946:	dc69      	bgt.n	800ea1c <__kernel_rem_pio2+0x5ec>
 800e948:	46aa      	mov	sl, r5
 800e94a:	f1ba 0f01 	cmp.w	sl, #1
 800e94e:	f1a4 0408 	sub.w	r4, r4, #8
 800e952:	f300 8083 	bgt.w	800ea5c <__kernel_rem_pio2+0x62c>
 800e956:	9c05      	ldr	r4, [sp, #20]
 800e958:	ab48      	add	r3, sp, #288	; 0x120
 800e95a:	441c      	add	r4, r3
 800e95c:	2000      	movs	r0, #0
 800e95e:	2100      	movs	r1, #0
 800e960:	2d01      	cmp	r5, #1
 800e962:	f300 809a 	bgt.w	800ea9a <__kernel_rem_pio2+0x66a>
 800e966:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800e96a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e96e:	f1bb 0f00 	cmp.w	fp, #0
 800e972:	f040 8098 	bne.w	800eaa6 <__kernel_rem_pio2+0x676>
 800e976:	9b04      	ldr	r3, [sp, #16]
 800e978:	e9c3 7800 	strd	r7, r8, [r3]
 800e97c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e980:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e984:	e7c6      	b.n	800e914 <__kernel_rem_pio2+0x4e4>
 800e986:	9e05      	ldr	r6, [sp, #20]
 800e988:	ab48      	add	r3, sp, #288	; 0x120
 800e98a:	441e      	add	r6, r3
 800e98c:	462c      	mov	r4, r5
 800e98e:	2000      	movs	r0, #0
 800e990:	2100      	movs	r1, #0
 800e992:	2c00      	cmp	r4, #0
 800e994:	da33      	bge.n	800e9fe <__kernel_rem_pio2+0x5ce>
 800e996:	f1bb 0f00 	cmp.w	fp, #0
 800e99a:	d036      	beq.n	800ea0a <__kernel_rem_pio2+0x5da>
 800e99c:	4602      	mov	r2, r0
 800e99e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9a2:	9c04      	ldr	r4, [sp, #16]
 800e9a4:	e9c4 2300 	strd	r2, r3, [r4]
 800e9a8:	4602      	mov	r2, r0
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800e9b0:	f7f1 fc6a 	bl	8000288 <__aeabi_dsub>
 800e9b4:	ae4a      	add	r6, sp, #296	; 0x128
 800e9b6:	2401      	movs	r4, #1
 800e9b8:	42a5      	cmp	r5, r4
 800e9ba:	da29      	bge.n	800ea10 <__kernel_rem_pio2+0x5e0>
 800e9bc:	f1bb 0f00 	cmp.w	fp, #0
 800e9c0:	d002      	beq.n	800e9c8 <__kernel_rem_pio2+0x598>
 800e9c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	9b04      	ldr	r3, [sp, #16]
 800e9ca:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e9ce:	e7a1      	b.n	800e914 <__kernel_rem_pio2+0x4e4>
 800e9d0:	9c05      	ldr	r4, [sp, #20]
 800e9d2:	ab48      	add	r3, sp, #288	; 0x120
 800e9d4:	441c      	add	r4, r3
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	2100      	movs	r1, #0
 800e9da:	2d00      	cmp	r5, #0
 800e9dc:	da09      	bge.n	800e9f2 <__kernel_rem_pio2+0x5c2>
 800e9de:	f1bb 0f00 	cmp.w	fp, #0
 800e9e2:	d002      	beq.n	800e9ea <__kernel_rem_pio2+0x5ba>
 800e9e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	9b04      	ldr	r3, [sp, #16]
 800e9ec:	e9c3 0100 	strd	r0, r1, [r3]
 800e9f0:	e790      	b.n	800e914 <__kernel_rem_pio2+0x4e4>
 800e9f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e9f6:	f7f1 fc49 	bl	800028c <__adddf3>
 800e9fa:	3d01      	subs	r5, #1
 800e9fc:	e7ed      	b.n	800e9da <__kernel_rem_pio2+0x5aa>
 800e9fe:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ea02:	f7f1 fc43 	bl	800028c <__adddf3>
 800ea06:	3c01      	subs	r4, #1
 800ea08:	e7c3      	b.n	800e992 <__kernel_rem_pio2+0x562>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	e7c8      	b.n	800e9a2 <__kernel_rem_pio2+0x572>
 800ea10:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ea14:	f7f1 fc3a 	bl	800028c <__adddf3>
 800ea18:	3401      	adds	r4, #1
 800ea1a:	e7cd      	b.n	800e9b8 <__kernel_rem_pio2+0x588>
 800ea1c:	e9da 8900 	ldrd	r8, r9, [sl]
 800ea20:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ea24:	9b00      	ldr	r3, [sp, #0]
 800ea26:	3b01      	subs	r3, #1
 800ea28:	9300      	str	r3, [sp, #0]
 800ea2a:	4632      	mov	r2, r6
 800ea2c:	463b      	mov	r3, r7
 800ea2e:	4640      	mov	r0, r8
 800ea30:	4649      	mov	r1, r9
 800ea32:	f7f1 fc2b 	bl	800028c <__adddf3>
 800ea36:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4640      	mov	r0, r8
 800ea40:	4649      	mov	r1, r9
 800ea42:	f7f1 fc21 	bl	8000288 <__aeabi_dsub>
 800ea46:	4632      	mov	r2, r6
 800ea48:	463b      	mov	r3, r7
 800ea4a:	f7f1 fc1f 	bl	800028c <__adddf3>
 800ea4e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ea52:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea56:	ed8a 7b00 	vstr	d7, [sl]
 800ea5a:	e770      	b.n	800e93e <__kernel_rem_pio2+0x50e>
 800ea5c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ea60:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ea64:	4640      	mov	r0, r8
 800ea66:	4632      	mov	r2, r6
 800ea68:	463b      	mov	r3, r7
 800ea6a:	4649      	mov	r1, r9
 800ea6c:	f7f1 fc0e 	bl	800028c <__adddf3>
 800ea70:	e9cd 0100 	strd	r0, r1, [sp]
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	4640      	mov	r0, r8
 800ea7a:	4649      	mov	r1, r9
 800ea7c:	f7f1 fc04 	bl	8000288 <__aeabi_dsub>
 800ea80:	4632      	mov	r2, r6
 800ea82:	463b      	mov	r3, r7
 800ea84:	f7f1 fc02 	bl	800028c <__adddf3>
 800ea88:	ed9d 7b00 	vldr	d7, [sp]
 800ea8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea90:	ed84 7b00 	vstr	d7, [r4]
 800ea94:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ea98:	e757      	b.n	800e94a <__kernel_rem_pio2+0x51a>
 800ea9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ea9e:	f7f1 fbf5 	bl	800028c <__adddf3>
 800eaa2:	3d01      	subs	r5, #1
 800eaa4:	e75c      	b.n	800e960 <__kernel_rem_pio2+0x530>
 800eaa6:	9b04      	ldr	r3, [sp, #16]
 800eaa8:	9a04      	ldr	r2, [sp, #16]
 800eaaa:	601f      	str	r7, [r3, #0]
 800eaac:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800eab0:	605c      	str	r4, [r3, #4]
 800eab2:	609d      	str	r5, [r3, #8]
 800eab4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eab8:	60d3      	str	r3, [r2, #12]
 800eaba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eabe:	6110      	str	r0, [r2, #16]
 800eac0:	6153      	str	r3, [r2, #20]
 800eac2:	e727      	b.n	800e914 <__kernel_rem_pio2+0x4e4>
 800eac4:	41700000 	.word	0x41700000
 800eac8:	3e700000 	.word	0x3e700000
 800eacc:	00000000 	.word	0x00000000

0800ead0 <scalbn>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	ec55 4b10 	vmov	r4, r5, d0
 800ead6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800eada:	4606      	mov	r6, r0
 800eadc:	462b      	mov	r3, r5
 800eade:	b999      	cbnz	r1, 800eb08 <scalbn+0x38>
 800eae0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eae4:	4323      	orrs	r3, r4
 800eae6:	d03f      	beq.n	800eb68 <scalbn+0x98>
 800eae8:	4b35      	ldr	r3, [pc, #212]	; (800ebc0 <scalbn+0xf0>)
 800eaea:	4629      	mov	r1, r5
 800eaec:	ee10 0a10 	vmov	r0, s0
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f7f1 fd81 	bl	80005f8 <__aeabi_dmul>
 800eaf6:	4b33      	ldr	r3, [pc, #204]	; (800ebc4 <scalbn+0xf4>)
 800eaf8:	429e      	cmp	r6, r3
 800eafa:	4604      	mov	r4, r0
 800eafc:	460d      	mov	r5, r1
 800eafe:	da10      	bge.n	800eb22 <scalbn+0x52>
 800eb00:	a327      	add	r3, pc, #156	; (adr r3, 800eba0 <scalbn+0xd0>)
 800eb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb06:	e01f      	b.n	800eb48 <scalbn+0x78>
 800eb08:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800eb0c:	4291      	cmp	r1, r2
 800eb0e:	d10c      	bne.n	800eb2a <scalbn+0x5a>
 800eb10:	ee10 2a10 	vmov	r2, s0
 800eb14:	4620      	mov	r0, r4
 800eb16:	4629      	mov	r1, r5
 800eb18:	f7f1 fbb8 	bl	800028c <__adddf3>
 800eb1c:	4604      	mov	r4, r0
 800eb1e:	460d      	mov	r5, r1
 800eb20:	e022      	b.n	800eb68 <scalbn+0x98>
 800eb22:	460b      	mov	r3, r1
 800eb24:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800eb28:	3936      	subs	r1, #54	; 0x36
 800eb2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800eb2e:	4296      	cmp	r6, r2
 800eb30:	dd0d      	ble.n	800eb4e <scalbn+0x7e>
 800eb32:	2d00      	cmp	r5, #0
 800eb34:	a11c      	add	r1, pc, #112	; (adr r1, 800eba8 <scalbn+0xd8>)
 800eb36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb3a:	da02      	bge.n	800eb42 <scalbn+0x72>
 800eb3c:	a11c      	add	r1, pc, #112	; (adr r1, 800ebb0 <scalbn+0xe0>)
 800eb3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb42:	a319      	add	r3, pc, #100	; (adr r3, 800eba8 <scalbn+0xd8>)
 800eb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb48:	f7f1 fd56 	bl	80005f8 <__aeabi_dmul>
 800eb4c:	e7e6      	b.n	800eb1c <scalbn+0x4c>
 800eb4e:	1872      	adds	r2, r6, r1
 800eb50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eb54:	428a      	cmp	r2, r1
 800eb56:	dcec      	bgt.n	800eb32 <scalbn+0x62>
 800eb58:	2a00      	cmp	r2, #0
 800eb5a:	dd08      	ble.n	800eb6e <scalbn+0x9e>
 800eb5c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb60:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb64:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eb68:	ec45 4b10 	vmov	d0, r4, r5
 800eb6c:	bd70      	pop	{r4, r5, r6, pc}
 800eb6e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800eb72:	da08      	bge.n	800eb86 <scalbn+0xb6>
 800eb74:	2d00      	cmp	r5, #0
 800eb76:	a10a      	add	r1, pc, #40	; (adr r1, 800eba0 <scalbn+0xd0>)
 800eb78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb7c:	dac0      	bge.n	800eb00 <scalbn+0x30>
 800eb7e:	a10e      	add	r1, pc, #56	; (adr r1, 800ebb8 <scalbn+0xe8>)
 800eb80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb84:	e7bc      	b.n	800eb00 <scalbn+0x30>
 800eb86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eb8a:	3236      	adds	r2, #54	; 0x36
 800eb8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eb90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eb94:	4620      	mov	r0, r4
 800eb96:	4b0c      	ldr	r3, [pc, #48]	; (800ebc8 <scalbn+0xf8>)
 800eb98:	2200      	movs	r2, #0
 800eb9a:	e7d5      	b.n	800eb48 <scalbn+0x78>
 800eb9c:	f3af 8000 	nop.w
 800eba0:	c2f8f359 	.word	0xc2f8f359
 800eba4:	01a56e1f 	.word	0x01a56e1f
 800eba8:	8800759c 	.word	0x8800759c
 800ebac:	7e37e43c 	.word	0x7e37e43c
 800ebb0:	8800759c 	.word	0x8800759c
 800ebb4:	fe37e43c 	.word	0xfe37e43c
 800ebb8:	c2f8f359 	.word	0xc2f8f359
 800ebbc:	81a56e1f 	.word	0x81a56e1f
 800ebc0:	43500000 	.word	0x43500000
 800ebc4:	ffff3cb0 	.word	0xffff3cb0
 800ebc8:	3c900000 	.word	0x3c900000
 800ebcc:	00000000 	.word	0x00000000

0800ebd0 <floor>:
 800ebd0:	ec51 0b10 	vmov	r0, r1, d0
 800ebd4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ebd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebdc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800ebe0:	2e13      	cmp	r6, #19
 800ebe2:	ee10 5a10 	vmov	r5, s0
 800ebe6:	ee10 8a10 	vmov	r8, s0
 800ebea:	460c      	mov	r4, r1
 800ebec:	dc31      	bgt.n	800ec52 <floor+0x82>
 800ebee:	2e00      	cmp	r6, #0
 800ebf0:	da14      	bge.n	800ec1c <floor+0x4c>
 800ebf2:	a333      	add	r3, pc, #204	; (adr r3, 800ecc0 <floor+0xf0>)
 800ebf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf8:	f7f1 fb48 	bl	800028c <__adddf3>
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2300      	movs	r3, #0
 800ec00:	f7f1 ff8a 	bl	8000b18 <__aeabi_dcmpgt>
 800ec04:	b138      	cbz	r0, 800ec16 <floor+0x46>
 800ec06:	2c00      	cmp	r4, #0
 800ec08:	da53      	bge.n	800ecb2 <floor+0xe2>
 800ec0a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800ec0e:	4325      	orrs	r5, r4
 800ec10:	d052      	beq.n	800ecb8 <floor+0xe8>
 800ec12:	4c2d      	ldr	r4, [pc, #180]	; (800ecc8 <floor+0xf8>)
 800ec14:	2500      	movs	r5, #0
 800ec16:	4621      	mov	r1, r4
 800ec18:	4628      	mov	r0, r5
 800ec1a:	e024      	b.n	800ec66 <floor+0x96>
 800ec1c:	4f2b      	ldr	r7, [pc, #172]	; (800eccc <floor+0xfc>)
 800ec1e:	4137      	asrs	r7, r6
 800ec20:	ea01 0307 	and.w	r3, r1, r7
 800ec24:	4303      	orrs	r3, r0
 800ec26:	d01e      	beq.n	800ec66 <floor+0x96>
 800ec28:	a325      	add	r3, pc, #148	; (adr r3, 800ecc0 <floor+0xf0>)
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	f7f1 fb2d 	bl	800028c <__adddf3>
 800ec32:	2200      	movs	r2, #0
 800ec34:	2300      	movs	r3, #0
 800ec36:	f7f1 ff6f 	bl	8000b18 <__aeabi_dcmpgt>
 800ec3a:	2800      	cmp	r0, #0
 800ec3c:	d0eb      	beq.n	800ec16 <floor+0x46>
 800ec3e:	2c00      	cmp	r4, #0
 800ec40:	bfbe      	ittt	lt
 800ec42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ec46:	4133      	asrlt	r3, r6
 800ec48:	18e4      	addlt	r4, r4, r3
 800ec4a:	ea24 0407 	bic.w	r4, r4, r7
 800ec4e:	2500      	movs	r5, #0
 800ec50:	e7e1      	b.n	800ec16 <floor+0x46>
 800ec52:	2e33      	cmp	r6, #51	; 0x33
 800ec54:	dd0b      	ble.n	800ec6e <floor+0x9e>
 800ec56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ec5a:	d104      	bne.n	800ec66 <floor+0x96>
 800ec5c:	ee10 2a10 	vmov	r2, s0
 800ec60:	460b      	mov	r3, r1
 800ec62:	f7f1 fb13 	bl	800028c <__adddf3>
 800ec66:	ec41 0b10 	vmov	d0, r0, r1
 800ec6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec6e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800ec72:	f04f 37ff 	mov.w	r7, #4294967295
 800ec76:	40df      	lsrs	r7, r3
 800ec78:	4238      	tst	r0, r7
 800ec7a:	d0f4      	beq.n	800ec66 <floor+0x96>
 800ec7c:	a310      	add	r3, pc, #64	; (adr r3, 800ecc0 <floor+0xf0>)
 800ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec82:	f7f1 fb03 	bl	800028c <__adddf3>
 800ec86:	2200      	movs	r2, #0
 800ec88:	2300      	movs	r3, #0
 800ec8a:	f7f1 ff45 	bl	8000b18 <__aeabi_dcmpgt>
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	d0c1      	beq.n	800ec16 <floor+0x46>
 800ec92:	2c00      	cmp	r4, #0
 800ec94:	da0a      	bge.n	800ecac <floor+0xdc>
 800ec96:	2e14      	cmp	r6, #20
 800ec98:	d101      	bne.n	800ec9e <floor+0xce>
 800ec9a:	3401      	adds	r4, #1
 800ec9c:	e006      	b.n	800ecac <floor+0xdc>
 800ec9e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800eca2:	2301      	movs	r3, #1
 800eca4:	40b3      	lsls	r3, r6
 800eca6:	441d      	add	r5, r3
 800eca8:	45a8      	cmp	r8, r5
 800ecaa:	d8f6      	bhi.n	800ec9a <floor+0xca>
 800ecac:	ea25 0507 	bic.w	r5, r5, r7
 800ecb0:	e7b1      	b.n	800ec16 <floor+0x46>
 800ecb2:	2500      	movs	r5, #0
 800ecb4:	462c      	mov	r4, r5
 800ecb6:	e7ae      	b.n	800ec16 <floor+0x46>
 800ecb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ecbc:	e7ab      	b.n	800ec16 <floor+0x46>
 800ecbe:	bf00      	nop
 800ecc0:	8800759c 	.word	0x8800759c
 800ecc4:	7e37e43c 	.word	0x7e37e43c
 800ecc8:	bff00000 	.word	0xbff00000
 800eccc:	000fffff 	.word	0x000fffff

0800ecd0 <_init>:
 800ecd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecd2:	bf00      	nop
 800ecd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecd6:	bc08      	pop	{r3}
 800ecd8:	469e      	mov	lr, r3
 800ecda:	4770      	bx	lr

0800ecdc <_fini>:
 800ecdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecde:	bf00      	nop
 800ece0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ece2:	bc08      	pop	{r3}
 800ece4:	469e      	mov	lr, r3
 800ece6:	4770      	bx	lr

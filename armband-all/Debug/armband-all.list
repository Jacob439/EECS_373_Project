
armband-all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800f3e8  0800f3e8  0001f3e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb40  0800fb40  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb40  0800fb40  0001fb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb48  0800fb48  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb48  0800fb48  0001fb48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb4c  0800fb4c  0001fb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800fb50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000210  0800fd60  00020210  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000820  0800fd60  00020820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001af93  00000000  00000000  00020283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003746  00000000  00000000  0003b216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  0003e960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001426  00000000  00000000  00040320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025487  00000000  00000000  00041746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d53d  00000000  00000000  00066bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1ee4  00000000  00000000  0008410a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008684  00000000  00000000  00165ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016e674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f3d0 	.word	0x0800f3d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800f3d0 	.word	0x0800f3d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <fix_msb_loss>:
 * exceed 286 m/s2
 * this is 100% fine for gravity vector
 * this is most likely fine for acc vector as no runner is
 * putting out 30g's while running
 */
uint16_t fix_msb_loss(uint16_t val){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	if ((val & 0xF000) == 0x7000) {
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001000:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001004:	d105      	bne.n	8001012 <fix_msb_loss+0x22>
		val |= 0x8000;
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800100c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001010:	80fb      	strh	r3, [r7, #6]
	}
	return val;
 8001012:	88fb      	ldrh	r3, [r7, #6]
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <startup_IMU>:

void startup_IMU(I2C_HandleTypeDef *hi2c){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	// verify i2c is working properly by reading chip id
	read_to_buf(hi2c, 0x00, buf, 1);
 8001028:	f107 020c 	add.w	r2, r7, #12
 800102c:	2301      	movs	r3, #1
 800102e:	2100      	movs	r1, #0
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f848 	bl	80010c6 <read_to_buf>
	if(buf[0] != 0xA0) {
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	2ba0      	cmp	r3, #160	; 0xa0
 800103a:	d003      	beq.n	8001044 <startup_IMU+0x24>
		printf("chip error, wrong/no chip ID returned\n\r");
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <startup_IMU+0x40>)
 800103e:	f00a fa8d 	bl	800b55c <iprintf>
 8001042:	e00a      	b.n	800105a <startup_IMU+0x3a>
		return;
	}

	// put chip in configuration mode
	buf[0] = 0x3D;
 8001044:	233d      	movs	r3, #61	; 0x3d
 8001046:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x00;
 8001048:	2300      	movs	r3, #0
 800104a:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2202      	movs	r2, #2
 8001052:	4619      	mov	r1, r3
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f81b 	bl	8001090 <transmit_buf>
}
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	0800f3e8 	.word	0x0800f3e8

08001064 <init_IMU>:

void init_IMU(I2C_HandleTypeDef *hi2c){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	startup_IMU(hi2c);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffd7 	bl	8001020 <startup_IMU>

	// put chip in IMU mode
	buf[0] = 0x3D;
 8001072:	233d      	movs	r3, #61	; 0x3d
 8001074:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x08;
 8001076:	2308      	movs	r3, #8
 8001078:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2202      	movs	r2, #2
 8001080:	4619      	mov	r1, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f804 	bl	8001090 <transmit_buf>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <transmit_buf>:
	buf[1] = buf[0];
	buf[0] = 0x3B;
	transmit_buf(hi2c, buf, 2);
}

uint8_t transmit_buf(I2C_HandleTypeDef *hi2c, uint8_t *buf, uint16_t bytes) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af02      	add	r7, sp, #8
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, bytes, 1000);
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	2150      	movs	r1, #80	; 0x50
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f003 fe3c 	bl	8004d28 <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f838 	bl	800112c <check_ret>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <read_to_buf>:

uint8_t read_to_buf(I2C_HandleTypeDef *hi2c, uint8_t subAddr, uint8_t *buf, uint16_t bytes){
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b088      	sub	sp, #32
 80010ca:	af02      	add	r7, sp, #8
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	461a      	mov	r2, r3
 80010d2:	460b      	mov	r3, r1
 80010d4:	72fb      	strb	r3, [r7, #11]
 80010d6:	4613      	mov	r3, r2
 80010d8:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, &subAddr, 1, 1000);
 80010da:	f107 020b 	add.w	r2, r7, #11
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2150      	movs	r1, #80	; 0x50
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f003 fe1d 	bl	8004d28 <HAL_I2C_Master_Transmit>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]
	if (!check_ret(ret)) return 0;
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f819 	bl	800112c <check_ret>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <read_to_buf+0x3e>
 8001100:	2300      	movs	r3, #0
 8001102:	e00f      	b.n	8001124 <read_to_buf+0x5e>
	ret = HAL_I2C_Master_Receive(hi2c, SAD_R, buf, bytes, 1000);
 8001104:	893b      	ldrh	r3, [r7, #8]
 8001106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110a:	9200      	str	r2, [sp, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	2151      	movs	r1, #81	; 0x51
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f003 ff21 	bl	8004f58 <HAL_I2C_Master_Receive>
 8001116:	4603      	mov	r3, r0
 8001118:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f805 	bl	800112c <check_ret>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <check_ret>:

uint8_t check_ret(HAL_StatusTypeDef ret) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK) {
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <check_ret+0x14>
		return 1;
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <check_ret+0x16>
	} else {
		// TODO:
		// add more descriptive error
		//printf("i2c error!\n\r");
		return 0;
 8001140:	2300      	movs	r3, #0
	}
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <lin_acc_vec_raw>:

void lin_acc_vec_raw(I2C_HandleTypeDef *hi2c, int16_t* vec) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];
	read_to_buf(hi2c, 0x28, buf, 6);
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2306      	movs	r3, #6
 800115e:	2128      	movs	r1, #40	; 0x28
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ffb0 	bl	80010c6 <read_to_buf>
	vec[0] = fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 8001166:	7a3b      	ldrb	r3, [r7, #8]
 8001168:	b21a      	sxth	r2, r3
 800116a:	7a7b      	ldrb	r3, [r7, #9]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21b      	sxth	r3, r3
 8001174:	b29b      	uxth	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff3a 	bl	8000ff0 <fix_msb_loss>
 800117c:	4603      	mov	r3, r0
 800117e:	b21a      	sxth	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	801a      	strh	r2, [r3, #0]
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
 8001184:	7abb      	ldrb	r3, [r7, #10]
 8001186:	b21a      	sxth	r2, r3
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff2b 	bl	8000ff0 <fix_msb_loss>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3302      	adds	r3, #2
 80011a2:	b212      	sxth	r2, r2
 80011a4:	801a      	strh	r2, [r3, #0]
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff1a 	bl	8000ff0 <fix_msb_loss>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	3304      	adds	r3, #4
 80011c4:	b212      	sxth	r2, r2
 80011c6:	801a      	strh	r2, [r3, #0]
	return;
 80011c8:	bf00      	nop
}
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <lin_acc_vec>:
	uint8_t buf[2];
	read_to_buf(hi2c, 0x2C, buf, 2);
	return fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
}

void lin_acc_vec(I2C_HandleTypeDef *hi2c, float* vec){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
	int16_t veci[3];
	lin_acc_vec_raw(hi2c, veci);
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	4619      	mov	r1, r3
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffb4 	bl	800114e <lin_acc_vec_raw>
	vec[0] = veci[0] / 100.0f;
 80011e6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001240 <lin_acc_vec+0x70>
 80011f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	edc3 7a00 	vstr	s15, [r3]
	vec[1] = veci[1] / 100.0f;
 8001200:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	3304      	adds	r3, #4
 8001210:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001240 <lin_acc_vec+0x70>
 8001214:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001218:	edc3 7a00 	vstr	s15, [r3]
	vec[2] = veci[2] / 100.0f;
 800121c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	3308      	adds	r3, #8
 800122c:	eddf 6a04 	vldr	s13, [pc, #16]	; 8001240 <lin_acc_vec+0x70>
 8001230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001234:	edc3 7a00 	vstr	s15, [r3]
	return;
 8001238:	bf00      	nop
}
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	42c80000 	.word	0x42c80000

08001244 <grav_vec_raw>:
float z_lin_acc(I2C_HandleTypeDef *hi2c){
	return z_lin_acc_raw(hi2c) / 100.0f;
}


void grav_vec_raw(I2C_HandleTypeDef *hi2c, int16_t* vec) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];
	read_to_buf(hi2c, 0x2E, buf, 6);
 800124e:	f107 0208 	add.w	r2, r7, #8
 8001252:	2306      	movs	r3, #6
 8001254:	212e      	movs	r1, #46	; 0x2e
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff35 	bl	80010c6 <read_to_buf>
	vec[0] = fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 800125c:	7a3b      	ldrb	r3, [r7, #8]
 800125e:	b21a      	sxth	r2, r3
 8001260:	7a7b      	ldrb	r3, [r7, #9]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21b      	sxth	r3, r3
 800126a:	b29b      	uxth	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff febf 	bl	8000ff0 <fix_msb_loss>
 8001272:	4603      	mov	r3, r0
 8001274:	b21a      	sxth	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	801a      	strh	r2, [r3, #0]
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
 800127a:	7abb      	ldrb	r3, [r7, #10]
 800127c:	b21a      	sxth	r2, r3
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	b21b      	sxth	r3, r3
 8001284:	4313      	orrs	r3, r2
 8001286:	b21b      	sxth	r3, r3
 8001288:	b29b      	uxth	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff feb0 	bl	8000ff0 <fix_msb_loss>
 8001290:	4603      	mov	r3, r0
 8001292:	461a      	mov	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	3302      	adds	r3, #2
 8001298:	b212      	sxth	r2, r2
 800129a:	801a      	strh	r2, [r3, #0]
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
 800129c:	7b3b      	ldrb	r3, [r7, #12]
 800129e:	b21a      	sxth	r2, r3
 80012a0:	7b7b      	ldrb	r3, [r7, #13]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fe9f 	bl	8000ff0 <fix_msb_loss>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	3304      	adds	r3, #4
 80012ba:	b212      	sxth	r2, r2
 80012bc:	801a      	strh	r2, [r3, #0]
	return;
 80012be:	bf00      	nop
}
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <grav_vec>:
	uint8_t buf[2];
	read_to_buf(hi2c, 0x32, buf, 2);
	return fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
}

void grav_vec(I2C_HandleTypeDef *hi2c, float* vec) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	int16_t veci[3];
	grav_vec_raw(hi2c, veci);
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	4619      	mov	r1, r3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ffb3 	bl	8001244 <grav_vec_raw>
	vec[0] = veci[0] / 100.0f;
 80012de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012e2:	ee07 3a90 	vmov	s15, r3
 80012e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ea:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001338 <grav_vec+0x70>
 80012ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	edc3 7a00 	vstr	s15, [r3]
	vec[1] = veci[1] / 100.0f;
 80012f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	3304      	adds	r3, #4
 8001308:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001338 <grav_vec+0x70>
 800130c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001310:	edc3 7a00 	vstr	s15, [r3]
	vec[2] = veci[2] / 100.0f;
 8001314:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001318:	ee07 3a90 	vmov	s15, r3
 800131c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3308      	adds	r3, #8
 8001324:	eddf 6a04 	vldr	s13, [pc, #16]	; 8001338 <grav_vec+0x70>
 8001328:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132c:	edc3 7a00 	vstr	s15, [r3]
	return;
 8001330:	bf00      	nop
}
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	42c80000 	.word	0x42c80000

0800133c <initPulseSensor>:
static bool first_beat = true;		// first beat bool
static bool second_beat = false; 	// second beat bool
static bool pulse = false; 		// pulse recognized bool
static int samples_since_last_beat = 0;

void initPulseSensor(ADC_HandleTypeDef *hadc_in) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	hadc = hadc_in;
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <initPulseSensor+0x1c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	2000022c 	.word	0x2000022c

0800135c <updatePulseSensor>:

void updatePulseSensor(void){
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	read_ADC();
 8001360:	f000 f804 	bl	800136c <read_ADC>
	get_pulse();
 8001364:	f000 f834 	bl	80013d0 <get_pulse>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <read_ADC>:

void read_ADC(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	//uint32_t val;
	unsigned int val;

	HAL_ADC_Start(hadc);
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <read_ADC+0x54>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fbae 	bl	8003ad8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 0xFFFFFFFF);
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <read_ADC+0x54>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001384:	4618      	mov	r0, r3
 8001386:	f002 fc0a 	bl	8003b9e <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(hadc);
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <read_ADC+0x54>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fc94 	bl	8003cbc <HAL_ADC_GetValue>
 8001394:	6078      	str	r0, [r7, #4]
	signal = val * 3.3f / 4096.0f;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	ee07 3a90 	vmov	s15, r3
 800139c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013c4 <read_ADC+0x58>
 80013a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013a8:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013c8 <read_ADC+0x5c>
 80013ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <read_ADC+0x60>)
 80013b2:	edc3 7a00 	vstr	s15, [r3]
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000022c 	.word	0x2000022c
 80013c4:	40533333 	.word	0x40533333
 80013c8:	45800000 	.word	0x45800000
 80013cc:	2000025c 	.word	0x2000025c

080013d0 <get_pulse>:

void get_pulse() {
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
	++samples_since_last_beat;
 80013d6:	4b95      	ldr	r3, [pc, #596]	; (800162c <get_pulse+0x25c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	4a93      	ldr	r2, [pc, #588]	; (800162c <get_pulse+0x25c>)
 80013de:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_beat * SAMPLE_PERIOD;
 80013e0:	4b92      	ldr	r3, [pc, #584]	; (800162c <get_pulse+0x25c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	603b      	str	r3, [r7, #0]
	if (signal < thresh && N > (IBI / 5) * 3) { // avoid dicrotic noise by waiting 3/5 of last IBI
 80013ec:	4b90      	ldr	r3, [pc, #576]	; (8001630 <get_pulse+0x260>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4b90      	ldr	r3, [pc, #576]	; (8001634 <get_pulse+0x264>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001400:	d51c      	bpl.n	800143c <get_pulse+0x6c>
 8001402:	4b8d      	ldr	r3, [pc, #564]	; (8001638 <get_pulse+0x268>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a8d      	ldr	r2, [pc, #564]	; (800163c <get_pulse+0x26c>)
 8001408:	fb82 1203 	smull	r1, r2, r2, r3
 800140c:	1052      	asrs	r2, r2, #1
 800140e:	17db      	asrs	r3, r3, #31
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	dd0e      	ble.n	800143c <get_pulse+0x6c>
	    if (signal < trough_amp) {                        // T is the trough
 800141e:	4b84      	ldr	r3, [pc, #528]	; (8001630 <get_pulse+0x260>)
 8001420:	ed93 7a00 	vldr	s14, [r3]
 8001424:	4b86      	ldr	r3, [pc, #536]	; (8001640 <get_pulse+0x270>)
 8001426:	edd3 7a00 	vldr	s15, [r3]
 800142a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	d503      	bpl.n	800143c <get_pulse+0x6c>
	      trough_amp = signal;                            // keep track of lowest point in pulse wave
 8001434:	4b7e      	ldr	r3, [pc, #504]	; (8001630 <get_pulse+0x260>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a81      	ldr	r2, [pc, #516]	; (8001640 <get_pulse+0x270>)
 800143a:	6013      	str	r3, [r2, #0]
	    }
	  }

	  if (signal > thresh && signal > peak_amp) {       // thresh condition helps avoid noise
 800143c:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <get_pulse+0x260>)
 800143e:	ed93 7a00 	vldr	s14, [r3]
 8001442:	4b7c      	ldr	r3, [pc, #496]	; (8001634 <get_pulse+0x264>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001450:	dd0e      	ble.n	8001470 <get_pulse+0xa0>
 8001452:	4b77      	ldr	r3, [pc, #476]	; (8001630 <get_pulse+0x260>)
 8001454:	ed93 7a00 	vldr	s14, [r3]
 8001458:	4b7a      	ldr	r3, [pc, #488]	; (8001644 <get_pulse+0x274>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001466:	dd03      	ble.n	8001470 <get_pulse+0xa0>
		  peak_amp = signal;                              // P is the peak
 8001468:	4b71      	ldr	r3, [pc, #452]	; (8001630 <get_pulse+0x260>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a75      	ldr	r2, [pc, #468]	; (8001644 <get_pulse+0x274>)
 800146e:	6013      	str	r3, [r2, #0]
	  }                                          // keep track of highest point in pulse wave

	  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	  // signal surges up in value every time there is a pulse
	  if (N > 250) {                             // avoid high frequency noise
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2bfa      	cmp	r3, #250	; 0xfa
 8001474:	dd7c      	ble.n	8001570 <get_pulse+0x1a0>
	    if ( (signal > thresh) && (pulse == false) && (N > ((IBI / 5) * 3)) ) {
 8001476:	4b6e      	ldr	r3, [pc, #440]	; (8001630 <get_pulse+0x260>)
 8001478:	ed93 7a00 	vldr	s14, [r3]
 800147c:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <get_pulse+0x264>)
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148a:	dd71      	ble.n	8001570 <get_pulse+0x1a0>
 800148c:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <get_pulse+0x278>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	f083 0301 	eor.w	r3, r3, #1
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d06a      	beq.n	8001570 <get_pulse+0x1a0>
 800149a:	4b67      	ldr	r3, [pc, #412]	; (8001638 <get_pulse+0x268>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a67      	ldr	r2, [pc, #412]	; (800163c <get_pulse+0x26c>)
 80014a0:	fb82 1203 	smull	r1, r2, r2, r3
 80014a4:	1052      	asrs	r2, r2, #1
 80014a6:	17db      	asrs	r3, r3, #31
 80014a8:	1ad2      	subs	r2, r2, r3
 80014aa:	4613      	mov	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dd5c      	ble.n	8001570 <get_pulse+0x1a0>
	      pulse = true;                             // set the Pulse flag when we think there is a pulse
 80014b6:	4b64      	ldr	r3, [pc, #400]	; (8001648 <get_pulse+0x278>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
	      IBI = N;    // measure time between beats in mS
 80014bc:	4a5e      	ldr	r2, [pc, #376]	; (8001638 <get_pulse+0x268>)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	6013      	str	r3, [r2, #0]
	      samples_since_last_beat = 0;
 80014c2:	4b5a      	ldr	r3, [pc, #360]	; (800162c <get_pulse+0x25c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

	      if (second_beat) {                      // if this is the second beat, if secondBeat == TRUE
 80014c8:	4b60      	ldr	r3, [pc, #384]	; (800164c <get_pulse+0x27c>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d011      	beq.n	80014f4 <get_pulse+0x124>
	        second_beat = false;                    // clear secondBeat flag
 80014d0:	4b5e      	ldr	r3, [pc, #376]	; (800164c <get_pulse+0x27c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	e008      	b.n	80014ee <get_pulse+0x11e>
	          rate[i] = IBI;
 80014dc:	4b56      	ldr	r3, [pc, #344]	; (8001638 <get_pulse+0x268>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	495b      	ldr	r1, [pc, #364]	; (8001650 <get_pulse+0x280>)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b09      	cmp	r3, #9
 80014f2:	ddf3      	ble.n	80014dc <get_pulse+0x10c>
	        }
	      }

	      if (first_beat) {                       // if it's the first time we found a beat, if firstBeat == TRUE
 80014f4:	4b57      	ldr	r3, [pc, #348]	; (8001654 <get_pulse+0x284>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <get_pulse+0x13a>
	    	first_beat = 0;                       // clear firstBeat flag
 80014fc:	4b55      	ldr	r3, [pc, #340]	; (8001654 <get_pulse+0x284>)
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
	    	second_beat = 1;                      // set the second beat flag
 8001502:	4b52      	ldr	r3, [pc, #328]	; (800164c <get_pulse+0x27c>)
 8001504:	2201      	movs	r2, #1
 8001506:	701a      	strb	r2, [r3, #0]
	        // IBI value is unreliable so discard it
	        return;
 8001508:	e08a      	b.n	8001620 <get_pulse+0x250>
	      }


	      // keep a running total of the last 10 IBI values
	      int runningTotal = 0;                  // clear the runningTotal variable
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]

	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	e012      	b.n	800153a <get_pulse+0x16a>
	        rate[i] = rate[i + 1];                // and drop the oldest IBI value
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3301      	adds	r3, #1
 8001518:	4a4d      	ldr	r2, [pc, #308]	; (8001650 <get_pulse+0x280>)
 800151a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800151e:	494c      	ldr	r1, [pc, #304]	; (8001650 <get_pulse+0x280>)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        runningTotal += rate[i];              // add up the 9 oldest IBI values
 8001526:	4a4a      	ldr	r2, [pc, #296]	; (8001650 <get_pulse+0x280>)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	4413      	add	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3301      	adds	r3, #1
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b08      	cmp	r3, #8
 800153e:	dde9      	ble.n	8001514 <get_pulse+0x144>
	      }

	      rate[BUF_LENGTH - 1] = IBI;                          // add the latest IBI to the rate array
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <get_pulse+0x268>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a42      	ldr	r2, [pc, #264]	; (8001650 <get_pulse+0x280>)
 8001546:	6253      	str	r3, [r2, #36]	; 0x24
	      runningTotal += rate[BUF_LENGTH - 1];                // add the latest IBI to runningTotal
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <get_pulse+0x280>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	68ba      	ldr	r2, [r7, #8]
 800154e:	4413      	add	r3, r2
 8001550:	60bb      	str	r3, [r7, #8]
	      runningTotal /= BUF_LENGTH;                     // average the last 10 IBI values
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4a39      	ldr	r2, [pc, #228]	; (800163c <get_pulse+0x26c>)
 8001556:	fb82 1203 	smull	r1, r2, r2, r3
 800155a:	1092      	asrs	r2, r2, #2
 800155c:	17db      	asrs	r3, r3, #31
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	60bb      	str	r3, [r7, #8]
	      BPM = 60000 / runningTotal;             // how many beats can fit into a minute? that's BPM!
 8001562:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	fb92 f3f3 	sdiv	r3, r2, r3
 800156c:	4a3a      	ldr	r2, [pc, #232]	; (8001658 <get_pulse+0x288>)
 800156e:	6013      	str	r3, [r2, #0]
	      //fadeLevel = MAX_FADE_LEVEL;             // If we're fading, re-light that LED.
	    }
	  }

	  if (signal < thresh && pulse) {  // when the values are going down, the beat is over
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <get_pulse+0x260>)
 8001572:	ed93 7a00 	vldr	s14, [r3]
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <get_pulse+0x264>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	d528      	bpl.n	80015d8 <get_pulse+0x208>
 8001586:	4b30      	ldr	r3, [pc, #192]	; (8001648 <get_pulse+0x278>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d024      	beq.n	80015d8 <get_pulse+0x208>
	    pulse = false;                         // reset the Pulse flag so we can do it again
 800158e:	4b2e      	ldr	r3, [pc, #184]	; (8001648 <get_pulse+0x278>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
	    amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 8001594:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <get_pulse+0x274>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	4b29      	ldr	r3, [pc, #164]	; (8001640 <get_pulse+0x270>)
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <get_pulse+0x28c>)
 80015a6:	edc3 7a00 	vstr	s15, [r3]
	    thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 80015aa:	4b2c      	ldr	r3, [pc, #176]	; (800165c <get_pulse+0x28c>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80015b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <get_pulse+0x270>)
 80015ba:	edd3 7a00 	vldr	s15, [r3]
 80015be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <get_pulse+0x264>)
 80015c4:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <get_pulse+0x264>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <get_pulse+0x274>)
 80015ce:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <get_pulse+0x264>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1a      	ldr	r2, [pc, #104]	; (8001640 <get_pulse+0x270>)
 80015d6:	6013      	str	r3, [r2, #0]
	  }

	  if (N > 2500) {                          // if 2.5 seconds go by without a beat
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015de:	4293      	cmp	r3, r2
 80015e0:	dd1e      	ble.n	8001620 <get_pulse+0x250>
	    thresh = THRESH_DEFAULT;                // set thresh default
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <get_pulse+0x264>)
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <get_pulse+0x290>)
 80015e6:	601a      	str	r2, [r3, #0]
	    peak_amp = THRESH_DEFAULT;                               // set P default
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <get_pulse+0x274>)
 80015ea:	4a1d      	ldr	r2, [pc, #116]	; (8001660 <get_pulse+0x290>)
 80015ec:	601a      	str	r2, [r3, #0]
	    trough_amp = THRESH_DEFAULT;                               // set T default
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <get_pulse+0x270>)
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <get_pulse+0x290>)
 80015f2:	601a      	str	r2, [r3, #0]
	    samples_since_last_beat = 0;          // bring the lastBeatTime up to date
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <get_pulse+0x25c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
	    first_beat = true;                      // set these to avoid noise
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <get_pulse+0x284>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
	    second_beat = false;                    // when we get the heartbeat back
 8001600:	4b12      	ldr	r3, [pc, #72]	; (800164c <get_pulse+0x27c>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
	    BPM = 0;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <get_pulse+0x288>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
	    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <get_pulse+0x268>)
 800160e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001612:	601a      	str	r2, [r3, #0]
	    pulse = false;
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <get_pulse+0x278>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
	    amp = 100;                  // beat amplitude 1/10 of input range.
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <get_pulse+0x28c>)
 800161c:	4a11      	ldr	r2, [pc, #68]	; (8001664 <get_pulse+0x294>)
 800161e:	601a      	str	r2, [r3, #0]

	  }
}
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000264 	.word	0x20000264
 8001630:	2000025c 	.word	0x2000025c
 8001634:	20000008 	.word	0x20000008
 8001638:	20000000 	.word	0x20000000
 800163c:	66666667 	.word	0x66666667
 8001640:	20000010 	.word	0x20000010
 8001644:	2000000c 	.word	0x2000000c
 8001648:	20000261 	.word	0x20000261
 800164c:	20000260 	.word	0x20000260
 8001650:	20000234 	.word	0x20000234
 8001654:	20000014 	.word	0x20000014
 8001658:	20000230 	.word	0x20000230
 800165c:	20000004 	.word	0x20000004
 8001660:	3fcccccd 	.word	0x3fcccccd
 8001664:	42c80000 	.word	0x42c80000

08001668 <get_BPM>:

int get_BPM(void) {
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return BPM;
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <get_BPM+0x14>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000230 	.word	0x20000230

08001680 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	ed87 0a01 	vstr	s0, [r7, #4]
 800168a:	4603      	mov	r3, r0
 800168c:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 800168e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001692:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001714 <GPS_nmea_to_dec+0x94>
 8001696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800169a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800169e:	ee17 3a90 	vmov	r3, s15
 80016a2:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2264      	movs	r2, #100	; 0x64
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016bc:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80016c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80016c4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001718 <GPS_nmea_to_dec+0x98>
 80016c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016cc:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016da:	ed97 7a02 	vldr	s14, [r7, #8]
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	2b53      	cmp	r3, #83	; 0x53
 80016ea:	d002      	beq.n	80016f2 <GPS_nmea_to_dec+0x72>
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	2b57      	cmp	r3, #87	; 0x57
 80016f0:	d105      	bne.n	80016fe <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80016f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f6:	eef1 7a67 	vneg.f32	s15, s15
 80016fa:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	ee07 3a90 	vmov	s15, r3
}
 8001704:	eeb0 0a67 	vmov.f32	s0, s15
 8001708:	371c      	adds	r7, #28
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	42c80000 	.word	0x42c80000
 8001718:	42700000 	.word	0x42700000
 800171c:	00000000 	.word	0x00000000

08001720 <updateGPS>:

updateGPS(){
 8001720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001724:	b08e      	sub	sp, #56	; 0x38
 8001726:	af00      	add	r7, sp, #0
	// imu_ctr = 1;
	  int counter = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	637b      	str	r3, [r7, #52]	; 0x34
	  int counter2 = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
	  while(1){
		  HAL_StatusTypeDef ret = HAL_UART_Receive(&huart1, a, 1, 5000);
 8001730:	f241 3388 	movw	r3, #5000	; 0x1388
 8001734:	2201      	movs	r2, #1
 8001736:	4980      	ldr	r1, [pc, #512]	; (8001938 <updateGPS+0x218>)
 8001738:	4880      	ldr	r0, [pc, #512]	; (800193c <updateGPS+0x21c>)
 800173a:	f007 fb6b 	bl	8008e14 <HAL_UART_Receive>
 800173e:	4603      	mov	r3, r0
 8001740:	75fb      	strb	r3, [r7, #23]
		  if (ret == HAL_TIMEOUT) {
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	2b03      	cmp	r3, #3
 8001746:	f000 81b6 	beq.w	8001ab6 <updateGPS+0x396>
			  break;
		  }
		  if(a[0] == '$'){
 800174a:	4b7b      	ldr	r3, [pc, #492]	; (8001938 <updateGPS+0x218>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b24      	cmp	r3, #36	; 0x24
 8001750:	f040 810d 	bne.w	800196e <updateGPS+0x24e>
			  gps_buf[gps_idx++] = a[0];
 8001754:	4b7a      	ldr	r3, [pc, #488]	; (8001940 <updateGPS+0x220>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	b2d1      	uxtb	r1, r2
 800175c:	4a78      	ldr	r2, [pc, #480]	; (8001940 <updateGPS+0x220>)
 800175e:	7011      	strb	r1, [r2, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	4b75      	ldr	r3, [pc, #468]	; (8001938 <updateGPS+0x218>)
 8001764:	7819      	ldrb	r1, [r3, #0]
 8001766:	4b77      	ldr	r3, [pc, #476]	; (8001944 <updateGPS+0x224>)
 8001768:	5499      	strb	r1, [r3, r2]
			  //printf("%c", a[0]);
			  while (a[0] != 10){
 800176a:	e011      	b.n	8001790 <updateGPS+0x70>
				  HAL_UART_Receive(&huart1, a, 1, 5000);
 800176c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001770:	2201      	movs	r2, #1
 8001772:	4971      	ldr	r1, [pc, #452]	; (8001938 <updateGPS+0x218>)
 8001774:	4871      	ldr	r0, [pc, #452]	; (800193c <updateGPS+0x21c>)
 8001776:	f007 fb4d 	bl	8008e14 <HAL_UART_Receive>
				  gps_buf[gps_idx++] = a[0];
 800177a:	4b71      	ldr	r3, [pc, #452]	; (8001940 <updateGPS+0x220>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	b2d1      	uxtb	r1, r2
 8001782:	4a6f      	ldr	r2, [pc, #444]	; (8001940 <updateGPS+0x220>)
 8001784:	7011      	strb	r1, [r2, #0]
 8001786:	461a      	mov	r2, r3
 8001788:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <updateGPS+0x218>)
 800178a:	7819      	ldrb	r1, [r3, #0]
 800178c:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <updateGPS+0x224>)
 800178e:	5499      	strb	r1, [r3, r2]
			  while (a[0] != 10){
 8001790:	4b69      	ldr	r3, [pc, #420]	; (8001938 <updateGPS+0x218>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b0a      	cmp	r3, #10
 8001796:	d1e9      	bne.n	800176c <updateGPS+0x4c>
				  //printf("%c", a[0]);
			  }
			  for (int i = 0; i < 7; ++i){
 8001798:	2300      	movs	r3, #0
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179c:	e00b      	b.n	80017b6 <updateGPS+0x96>
				  temp[i] = gps_buf[i];
 800179e:	4a69      	ldr	r2, [pc, #420]	; (8001944 <updateGPS+0x224>)
 80017a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a2:	4413      	add	r3, r2
 80017a4:	7819      	ldrb	r1, [r3, #0]
 80017a6:	4a68      	ldr	r2, [pc, #416]	; (8001948 <updateGPS+0x228>)
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	4413      	add	r3, r2
 80017ac:	460a      	mov	r2, r1
 80017ae:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; ++i){
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	3301      	adds	r3, #1
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b8:	2b06      	cmp	r3, #6
 80017ba:	ddf0      	ble.n	800179e <updateGPS+0x7e>
			  }
			  temp[6] = '\0';
 80017bc:	4b62      	ldr	r3, [pc, #392]	; (8001948 <updateGPS+0x228>)
 80017be:	2200      	movs	r2, #0
 80017c0:	719a      	strb	r2, [r3, #6]
			  for (int i = 0; i < 128; ++i){
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80017c6:	e009      	b.n	80017dc <updateGPS+0xbc>
				  printf("%c", gps_buf[i]);////////
 80017c8:	4a5e      	ldr	r2, [pc, #376]	; (8001944 <updateGPS+0x224>)
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	4413      	add	r3, r2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f009 fed5 	bl	800b580 <putchar>
			  for (int i = 0; i < 128; ++i){
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	3301      	adds	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	2b7f      	cmp	r3, #127	; 0x7f
 80017e0:	ddf2      	ble.n	80017c8 <updateGPS+0xa8>
			  }


			  //printf("done\n");
			  counter++;
 80017e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017e4:	3301      	adds	r3, #1
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
			  gps_idx = 0;
 80017e8:	4b55      	ldr	r3, [pc, #340]	; (8001940 <updateGPS+0x220>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]


			  if (!strncmp((char*)temp, "$GPGGA", 6)){
 80017ee:	2206      	movs	r2, #6
 80017f0:	4956      	ldr	r1, [pc, #344]	; (800194c <updateGPS+0x22c>)
 80017f2:	4855      	ldr	r0, [pc, #340]	; (8001948 <updateGPS+0x228>)
 80017f4:	f009 fecc 	bl	800b590 <strncmp>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 8081 	bne.w	8001902 <updateGPS+0x1e2>
				  char lat[9];
				  char lat_ns;
				  char lon[9];
				  char lon_ew;

				  for (int i = 18; i < 27; i++){
 8001800:	2312      	movs	r3, #18
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
 8001804:	e00c      	b.n	8001820 <updateGPS+0x100>
					  lat[i-18] = gps_buf[i];
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	3b12      	subs	r3, #18
 800180a:	494e      	ldr	r1, [pc, #312]	; (8001944 <updateGPS+0x224>)
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	440a      	add	r2, r1
 8001810:	7812      	ldrb	r2, [r2, #0]
 8001812:	3338      	adds	r3, #56	; 0x38
 8001814:	443b      	add	r3, r7
 8001816:	f803 2c2c 	strb.w	r2, [r3, #-44]
				  for (int i = 18; i < 27; i++){
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	3301      	adds	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	2b1a      	cmp	r3, #26
 8001824:	ddef      	ble.n	8001806 <updateGPS+0xe6>

				  }
				  lat_ns = gps_buf[28];
 8001826:	4b47      	ldr	r3, [pc, #284]	; (8001944 <updateGPS+0x224>)
 8001828:	7f1b      	ldrb	r3, [r3, #28]
 800182a:	75bb      	strb	r3, [r7, #22]
				  for (int i = 30; i < 40; i++){
 800182c:	231e      	movs	r3, #30
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	e00c      	b.n	800184c <updateGPS+0x12c>
					  lon[i-30] = gps_buf[i];
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	3b1e      	subs	r3, #30
 8001836:	4943      	ldr	r1, [pc, #268]	; (8001944 <updateGPS+0x224>)
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	440a      	add	r2, r1
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	3338      	adds	r3, #56	; 0x38
 8001840:	443b      	add	r3, r7
 8001842:	f803 2c38 	strb.w	r2, [r3, #-56]
				  for (int i = 30; i < 40; i++){
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	3301      	adds	r3, #1
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	6a3b      	ldr	r3, [r7, #32]
 800184e:	2b27      	cmp	r3, #39	; 0x27
 8001850:	ddef      	ble.n	8001832 <updateGPS+0x112>
				  }
				  lon_ew = gps_buf[41];
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <updateGPS+0x224>)
 8001854:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001858:	757b      	strb	r3, [r7, #21]
				  for (int i = 0; i < 128; ++i){
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	e007      	b.n	8001870 <updateGPS+0x150>
					  gps_buf[i] = 0;
 8001860:	4a38      	ldr	r2, [pc, #224]	; (8001944 <updateGPS+0x224>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 128; ++i){
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	3301      	adds	r3, #1
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2b7f      	cmp	r3, #127	; 0x7f
 8001874:	ddf4      	ble.n	8001860 <updateGPS+0x140>
				  }
				  GPS2.dec_latitude = GPS_nmea_to_dec(strtof(lat, NULL), lat_ns)*(PI/180);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f009 fd65 	bl	800b34c <strtof>
 8001882:	ee07 0a90 	vmov	s15, r0
 8001886:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800188a:	7dbb      	ldrb	r3, [r7, #22]
 800188c:	4618      	mov	r0, r3
 800188e:	eeb0 0a67 	vmov.f32	s0, s15
 8001892:	f7ff fef5 	bl	8001680 <GPS_nmea_to_dec>
 8001896:	ee10 3a10 	vmov	r3, s0
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe54 	bl	8000548 <__aeabi_f2d>
 80018a0:	a323      	add	r3, pc, #140	; (adr r3, 8001930 <updateGPS+0x210>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fea7 	bl	80005f8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f999 	bl	8000be8 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a25      	ldr	r2, [pc, #148]	; (8001950 <updateGPS+0x230>)
 80018ba:	6053      	str	r3, [r2, #4]
				  GPS2.dec_longitude = GPS_nmea_to_dec(strtof(lon, NULL), lon_ew)*(PI/180);
 80018bc:	463b      	mov	r3, r7
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f009 fd43 	bl	800b34c <strtof>
 80018c6:	ee07 0a90 	vmov	s15, r0
 80018ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ce:	7d7b      	ldrb	r3, [r7, #21]
 80018d0:	4618      	mov	r0, r3
 80018d2:	eeb0 0a67 	vmov.f32	s0, s15
 80018d6:	f7ff fed3 	bl	8001680 <GPS_nmea_to_dec>
 80018da:	ee10 3a10 	vmov	r3, s0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7fe fe32 	bl	8000548 <__aeabi_f2d>
 80018e4:	a312      	add	r3, pc, #72	; (adr r3, 8001930 <updateGPS+0x210>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	f7fe fe85 	bl	80005f8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f977 	bl	8000be8 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a14      	ldr	r2, [pc, #80]	; (8001950 <updateGPS+0x230>)
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e011      	b.n	8001926 <updateGPS+0x206>

			  }
			  else if (!strncmp((char*)temp, "$GPRMC", 6)){
 8001902:	2206      	movs	r2, #6
 8001904:	4913      	ldr	r1, [pc, #76]	; (8001954 <updateGPS+0x234>)
 8001906:	4810      	ldr	r0, [pc, #64]	; (8001948 <updateGPS+0x228>)
 8001908:	f009 fe42 	bl	800b590 <strncmp>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <updateGPS+0x206>
				//sscanf((char*)gps_buf, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS2.utc_time, &GPS2.nmea_latitude, &GPS2.ns, &GPS2.nmea_longitude, &GPS2.ew, &GPS2.speed_k, &GPS2.course_d, &GPS2.date);
				  GPS2.speed_k++;
 8001912:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <updateGPS+0x230>)
 8001914:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800191c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <updateGPS+0x230>)
 8001922:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			  }
			  for (int i = 0; i < 128; ++i){
 8001926:	2300      	movs	r3, #0
 8001928:	61bb      	str	r3, [r7, #24]
 800192a:	e01d      	b.n	8001968 <updateGPS+0x248>
 800192c:	f3af 8000 	nop.w
 8001930:	a2529d39 	.word	0xa2529d39
 8001934:	3f91df46 	.word	0x3f91df46
 8001938:	20000268 	.word	0x20000268
 800193c:	200004c0 	.word	0x200004c0
 8001940:	200002f4 	.word	0x200002f4
 8001944:	20000274 	.word	0x20000274
 8001948:	20000370 	.word	0x20000370
 800194c:	0800f458 	.word	0x0800f458
 8001950:	200002f8 	.word	0x200002f8
 8001954:	0800f488 	.word	0x0800f488
				  gps_buf[i] = 0;
 8001958:	4a5d      	ldr	r2, [pc, #372]	; (8001ad0 <updateGPS+0x3b0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4413      	add	r3, r2
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 128; ++i){
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	3301      	adds	r3, #1
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2b7f      	cmp	r3, #127	; 0x7f
 800196c:	ddf4      	ble.n	8001958 <updateGPS+0x238>
			  }
		  }

		  if(counter == 6){
 800196e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001970:	2b06      	cmp	r3, #6
 8001972:	f47f aedd 	bne.w	8001730 <updateGPS+0x10>
//				  printf("long: %f, longdec: %f\n\r", GPS2.nmea_latitude, GPS2.dec_longitude);
//				  printf("lat: %f, latdec: %f\n\r", GPS2.nmea_longitude, GPS2.dec_latitude);
//				  printf("speed: %f\n\r", GPS2.speed_k);
//				  printf("date: %f\n\r", GPS2.utc_time);

			  if(counter2 == 1){
 8001976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001978:	2b01      	cmp	r3, #1
 800197a:	f040 8096 	bne.w	8001aaa <updateGPS+0x38a>
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 800197e:	4b55      	ldr	r3, [pc, #340]	; (8001ad4 <updateGPS+0x3b4>)
 8001980:	ed93 7a00 	vldr	s14, [r3]
 8001984:	4b53      	ldr	r3, [pc, #332]	; (8001ad4 <updateGPS+0x3b4>)
 8001986:	edd3 7a02 	vldr	s15, [r3, #8]
 800198a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198e:	ee17 0a90 	vmov	r0, s15
 8001992:	f7fe fdd9 	bl	8000548 <__aeabi_f2d>
 8001996:	4604      	mov	r4, r0
 8001998:	460d      	mov	r5, r1
						  (cos(((double)GPS2.dec_longitude+(double)GPS2.dec_longitude_prev)/2));
 800199a:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <updateGPS+0x3b4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdd2 	bl	8000548 <__aeabi_f2d>
 80019a4:	4680      	mov	r8, r0
 80019a6:	4689      	mov	r9, r1
 80019a8:	4b4a      	ldr	r3, [pc, #296]	; (8001ad4 <updateGPS+0x3b4>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdcb 	bl	8000548 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4640      	mov	r0, r8
 80019b8:	4649      	mov	r1, r9
 80019ba:	f7fe fc67 	bl	800028c <__adddf3>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019ce:	f7fe ff3d 	bl	800084c <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	ec43 2b17 	vmov	d7, r2, r3
 80019da:	eeb0 0a47 	vmov.f32	s0, s14
 80019de:	eef0 0a67 	vmov.f32	s1, s15
 80019e2:	f00c fbdd 	bl	800e1a0 <cos>
 80019e6:	ec53 2b10 	vmov	r2, r3, d0
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 80019ea:	4620      	mov	r0, r4
 80019ec:	4629      	mov	r1, r5
 80019ee:	f7fe fe03 	bl	80005f8 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4938      	ldr	r1, [pc, #224]	; (8001ad8 <updateGPS+0x3b8>)
 80019f8:	e9c1 2300 	strd	r2, r3, [r1]
				  y_cord = (double)(GPS2.dec_latitude - GPS2.dec_latitude_prev);
 80019fc:	4b35      	ldr	r3, [pc, #212]	; (8001ad4 <updateGPS+0x3b4>)
 80019fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <updateGPS+0x3b4>)
 8001a04:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0c:	ee17 0a90 	vmov	r0, s15
 8001a10:	f7fe fd9a 	bl	8000548 <__aeabi_f2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4930      	ldr	r1, [pc, #192]	; (8001adc <updateGPS+0x3bc>)
 8001a1a:	e9c1 2300 	strd	r2, r3, [r1]
				  p2p_dist = sqrt(x_cord*x_cord + y_cord*y_cord)*6371000;
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ad8 <updateGPS+0x3b8>)
 8001a20:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a24:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <updateGPS+0x3b8>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe fde5 	bl	80005f8 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4614      	mov	r4, r2
 8001a34:	461d      	mov	r5, r3
 8001a36:	4b29      	ldr	r3, [pc, #164]	; (8001adc <updateGPS+0x3bc>)
 8001a38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3c:	4b27      	ldr	r3, [pc, #156]	; (8001adc <updateGPS+0x3bc>)
 8001a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a42:	f7fe fdd9 	bl	80005f8 <__aeabi_dmul>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4620      	mov	r0, r4
 8001a4c:	4629      	mov	r1, r5
 8001a4e:	f7fe fc1d 	bl	800028c <__adddf3>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	ec43 2b17 	vmov	d7, r2, r3
 8001a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5e:	eef0 0a67 	vmov.f32	s1, s15
 8001a62:	f00c fb6f 	bl	800e144 <sqrt>
 8001a66:	ec51 0b10 	vmov	r0, r1, d0
 8001a6a:	a317      	add	r3, pc, #92	; (adr r3, 8001ac8 <updateGPS+0x3a8>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fdc2 	bl	80005f8 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4919      	ldr	r1, [pc, #100]	; (8001ae0 <updateGPS+0x3c0>)
 8001a7a:	e9c1 2300 	strd	r2, r3, [r1]
				  velocity = p2p_dist/5;// m/s, timer is set for 5 sec
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <updateGPS+0x3c0>)
 8001a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <updateGPS+0x3c4>)
 8001a8a:	f7fe fedf 	bl	800084c <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4915      	ldr	r1, [pc, #84]	; (8001ae8 <updateGPS+0x3c8>)
 8001a94:	e9c1 2300 	strd	r2, r3, [r1]
				  //printf("p2p: %f\nmeter/sec: %f\n\r", p2p_dist,velocity);
				  //printf("Minute Per Mile: %f\n\r", .08333/(p2p_dist/1609.3));
				  GPS2.dec_latitude_prev = GPS2.dec_latitude;
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <updateGPS+0x3b4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <updateGPS+0x3b4>)
 8001a9e:	60d3      	str	r3, [r2, #12]
				  GPS2.dec_longitude_prev = GPS2.dec_longitude;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <updateGPS+0x3b4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <updateGPS+0x3b4>)
 8001aa6:	6093      	str	r3, [r2, #8]


				  break;
 8001aa8:	e006      	b.n	8001ab8 <updateGPS+0x398>
			  }
			  counter2++;
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	3301      	adds	r3, #1
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
			  counter = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
	  while(1){
 8001ab4:	e63c      	b.n	8001730 <updateGPS+0x10>
			  break;
 8001ab6:	bf00      	nop


		  }
	  }
}
 8001ab8:	bf00      	nop
 8001aba:	3738      	adds	r7, #56	; 0x38
 8001abc:	46bd      	mov	sp, r7
 8001abe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ac2:	bf00      	nop
 8001ac4:	f3af 8000 	nop.w
 8001ac8:	00000000 	.word	0x00000000
 8001acc:	41584dae 	.word	0x41584dae
 8001ad0:	20000274 	.word	0x20000274
 8001ad4:	200002f8 	.word	0x200002f8
 8001ad8:	20000360 	.word	0x20000360
 8001adc:	20000368 	.word	0x20000368
 8001ae0:	20000358 	.word	0x20000358
 8001ae4:	40140000 	.word	0x40140000
 8001ae8:	20000378 	.word	0x20000378

08001aec <get_distance>:

double get_distance(){
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
	return p2p_dist;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <get_distance+0x20>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001afa:	eeb0 0a47 	vmov.f32	s0, s14
 8001afe:	eef0 0a67 	vmov.f32	s1, s15
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000358 	.word	0x20000358

08001b10 <get_velocity>:

double get_velocity(){
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
	return velocity;
 8001b14:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <get_velocity+0x20>)
 8001b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b22:	eef0 0a67 	vmov.f32	s1, s15
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20000378 	.word	0x20000378

08001b34 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6858      	ldr	r0, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8adb      	ldrh	r3, [r3, #22]
 8001b56:	2200      	movs	r2, #0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f003 f831 	bl	8004bc0 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	1cf9      	adds	r1, r7, #3
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f005 f83c 	bl	8006be6 <HAL_SPI_Transmit>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f107 010f 	add.w	r1, r7, #15
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f005 f9a6 	bl	8006ed0 <HAL_SPI_Receive>
 8001b84:	4603      	mov	r3, r0
 8001b86:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6858      	ldr	r0, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	8adb      	ldrh	r3, [r3, #22]
 8001b90:	2201      	movs	r2, #1
 8001b92:	4619      	mov	r1, r3
 8001b94:	f003 f814 	bl	8004bc0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b084      	sub	sp, #16
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	70fb      	strb	r3, [r7, #3]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bb8:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001bba:	78bb      	ldrb	r3, [r7, #2]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	b21b      	sxth	r3, r3
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	b21b      	sxth	r3, r3
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6858      	ldr	r0, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	8adb      	ldrh	r3, [r3, #22]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f002 fff2 	bl	8004bc0 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f107 010a 	add.w	r1, r7, #10
 8001be8:	2202      	movs	r2, #2
 8001bea:	f004 fffc 	bl	8006be6 <HAL_SPI_Transmit>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6858      	ldr	r0, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	8adb      	ldrh	r3, [r3, #22]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f002 ffdf 	bl	8004bc0 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001c02:	bf00      	nop
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b088      	sub	sp, #32
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	4611      	mov	r1, r2
 8001c16:	461a      	mov	r2, r3
 8001c18:	460b      	mov	r3, r1
 8001c1a:	71fb      	strb	r3, [r7, #7]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6858      	ldr	r0, [r3, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8adb      	ldrh	r3, [r3, #22]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f002 ffc6 	bl	8004bc0 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6818      	ldr	r0, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f107 0117 	add.w	r1, r7, #23
 8001c40:	2201      	movs	r2, #1
 8001c42:	f004 ffd0 	bl	8006be6 <HAL_SPI_Transmit>
 8001c46:	4603      	mov	r3, r0
 8001c48:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d108      	bne.n	8001c62 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	79fa      	ldrb	r2, [r7, #7]
 8001c56:	b292      	uxth	r2, r2
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f005 fc92 	bl	8007584 <HAL_SPI_Transmit_DMA>
 8001c60:	e012      	b.n	8001c88 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	f004 ffb9 	bl	8006be6 <HAL_SPI_Transmit>
 8001c74:	4603      	mov	r3, r0
 8001c76:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6858      	ldr	r0, [r3, #4]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8adb      	ldrh	r3, [r3, #22]
 8001c80:	2201      	movs	r2, #1
 8001c82:	4619      	mov	r1, r3
 8001c84:	f002 ff9c 	bl	8004bc0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ff7b 	bl	8001ba2 <write_register>
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	2b2c      	cmp	r3, #44	; 0x2c
 8001cc4:	d801      	bhi.n	8001cca <set_OCP+0x16>
    imax = 45;
 8001cc6:	232d      	movs	r3, #45	; 0x2d
 8001cc8:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	2bf0      	cmp	r3, #240	; 0xf0
 8001cce:	d901      	bls.n	8001cd4 <set_OCP+0x20>
    imax = 240;
 8001cd0:	23f0      	movs	r3, #240	; 0xf0
 8001cd2:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	2b81      	cmp	r3, #129	; 0x81
 8001cd8:	d809      	bhi.n	8001cee <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	3b2d      	subs	r3, #45	; 0x2d
 8001cde:	4a0f      	ldr	r2, [pc, #60]	; (8001d1c <set_OCP+0x68>)
 8001ce0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce4:	1052      	asrs	r2, r2, #1
 8001ce6:	17db      	asrs	r3, r3, #31
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	73fb      	strb	r3, [r7, #15]
 8001cec:	e008      	b.n	8001d00 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001cee:	78fb      	ldrb	r3, [r7, #3]
 8001cf0:	331e      	adds	r3, #30
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <set_OCP+0x68>)
 8001cf4:	fb82 1203 	smull	r1, r2, r2, r3
 8001cf8:	1092      	asrs	r2, r2, #2
 8001cfa:	17db      	asrs	r3, r3, #31
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	f043 0320 	orr.w	r3, r3, #32
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	210b      	movs	r1, #11
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff ff48 	bl	8001ba2 <write_register>
}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	66666667 	.word	0x66666667

08001d20 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001d28:	211d      	movs	r1, #29
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ff02 	bl	8001b34 <read_register>
 8001d30:	4603      	mov	r3, r0
 8001d32:	091b      	lsrs	r3, r3, #4
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	461c      	mov	r4, r3
 8001d3c:	4615      	mov	r5, r2
 8001d3e:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001d42:	211e      	movs	r1, #30
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7ff fef5 	bl	8001b34 <read_register>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001d50:	2304      	movs	r3, #4
 8001d52:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b0a      	cmp	r3, #10
 8001d58:	d908      	bls.n	8001d6c <set_low_data_rate_optimization+0x4c>
 8001d5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d5e:	1fd1      	subs	r1, r2, #7
 8001d60:	430b      	orrs	r3, r1
 8001d62:	d103      	bne.n	8001d6c <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001d64:	7ffb      	ldrb	r3, [r7, #31]
 8001d66:	f043 0308 	orr.w	r3, r3, #8
 8001d6a:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001d6c:	7ffb      	ldrb	r3, [r7, #31]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2126      	movs	r1, #38	; 0x26
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff ff15 	bl	8001ba2 <write_register>
}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdb0      	pop	{r4, r5, r7, pc}

08001d80 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001d88:	2100      	movs	r1, #0
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ff7f 	bl	8001c8e <set_mode>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <lora_mode_standby>:

  set_mode(lora, OPMODE_RX_SINGLE);
}

void lora_mode_standby(lora_sx1276 *lora)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001da0:	2101      	movs	r1, #1
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff73 	bl	8001c8e <set_mode>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001db8:	211d      	movs	r1, #29
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff feba 	bl	8001b34 <read_register>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	211d      	movs	r1, #29
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fee5 	bl	8001ba2 <write_register>
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10e      	bne.n	8001e12 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	2b0f      	cmp	r3, #15
 8001df8:	d901      	bls.n	8001dfe <lora_set_tx_power+0x1e>
      level = 15;
 8001dfa:	230f      	movs	r3, #15
 8001dfc:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	2109      	movs	r1, #9
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff fec9 	bl	8001ba2 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001e10:	e02e      	b.n	8001e70 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	2b14      	cmp	r3, #20
 8001e16:	d901      	bls.n	8001e1c <lora_set_tx_power+0x3c>
      level = 20;
 8001e18:	2314      	movs	r3, #20
 8001e1a:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d801      	bhi.n	8001e26 <lora_set_tx_power+0x46>
      level = 2;
 8001e22:	2302      	movs	r3, #2
 8001e24:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	2b11      	cmp	r3, #17
 8001e2a:	d90c      	bls.n	8001e46 <lora_set_tx_power+0x66>
      level -= 3;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	3b03      	subs	r3, #3
 8001e30:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001e32:	2287      	movs	r2, #135	; 0x87
 8001e34:	214d      	movs	r1, #77	; 0x4d
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff feb3 	bl	8001ba2 <write_register>
      set_OCP(lora, 140);
 8001e3c:	218c      	movs	r1, #140	; 0x8c
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ff38 	bl	8001cb4 <set_OCP>
 8001e44:	e008      	b.n	8001e58 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8001e46:	2284      	movs	r2, #132	; 0x84
 8001e48:	214d      	movs	r1, #77	; 0x4d
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff fea9 	bl	8001ba2 <write_register>
      set_OCP(lora, 97);
 8001e50:	2161      	movs	r1, #97	; 0x61
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff ff2e 	bl	8001cb4 <set_OCP>
    level -= 2;
 8001e58:	78fb      	ldrb	r3, [r7, #3]
 8001e5a:	3b02      	subs	r3, #2
 8001e5c:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001e5e:	78fb      	ldrb	r3, [r7, #3]
 8001e60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	2109      	movs	r1, #9
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe99 	bl	8001ba2 <write_register>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8001e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f04f 0100 	mov.w	r1, #0
 8001e90:	04d9      	lsls	r1, r3, #19
 8001e92:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001e96:	04d0      	lsls	r0, r2, #19
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <lora_set_frequency+0x88>)
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	f7fe fef3 	bl	8000c88 <__aeabi_uldivmod>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001eaa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	0c02      	lsrs	r2, r0, #16
 8001eb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ebc:	0c0b      	lsrs	r3, r1, #16
 8001ebe:	b2d3      	uxtb	r3, r2
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2106      	movs	r1, #6
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff fe6c 	bl	8001ba2 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001eca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	0a02      	lsrs	r2, r0, #8
 8001ed8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001edc:	0a0b      	lsrs	r3, r1, #8
 8001ede:	b2d3      	uxtb	r3, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2107      	movs	r1, #7
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f7ff fe5c 	bl	8001ba2 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001eea:	7c3b      	ldrb	r3, [r7, #16]
 8001eec:	461a      	mov	r2, r3
 8001eee:	2108      	movs	r1, #8
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff fe56 	bl	8001ba2 <write_register>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	01e84800 	.word	0x01e84800

08001f04 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d802      	bhi.n	8001f1c <lora_set_spreading_factor+0x18>
    sf = 6;
 8001f16:	2306      	movs	r3, #6
 8001f18:	70fb      	strb	r3, [r7, #3]
 8001f1a:	e004      	b.n	8001f26 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d901      	bls.n	8001f26 <lora_set_spreading_factor+0x22>
    sf = 12;
 8001f22:	230c      	movs	r3, #12
 8001f24:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	2b06      	cmp	r3, #6
 8001f2a:	d10a      	bne.n	8001f42 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001f2c:	22c5      	movs	r2, #197	; 0xc5
 8001f2e:	2131      	movs	r1, #49	; 0x31
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fe36 	bl	8001ba2 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8001f36:	220c      	movs	r2, #12
 8001f38:	2137      	movs	r1, #55	; 0x37
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff fe31 	bl	8001ba2 <write_register>
 8001f40:	e009      	b.n	8001f56 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001f42:	22c3      	movs	r2, #195	; 0xc3
 8001f44:	2131      	movs	r1, #49	; 0x31
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fe2b 	bl	8001ba2 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001f4c:	220a      	movs	r2, #10
 8001f4e:	2137      	movs	r1, #55	; 0x37
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fe26 	bl	8001ba2 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8001f56:	211e      	movs	r1, #30
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fdeb 	bl	8001b34 <read_register>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	b25a      	sxtb	r2, r3
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	011b      	lsls	r3, r3, #4
 8001f70:	b25b      	sxtb	r3, r3
 8001f72:	4313      	orrs	r3, r2
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	211e      	movs	r1, #30
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fe0f 	bl	8001ba2 <write_register>

  set_low_data_rate_optimization(lora);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fecb 	bl	8001d20 <set_low_data_rate_optimization>
}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2120      	movs	r1, #32
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fdf9 	bl	8001ba2 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	2121      	movs	r1, #33	; 0x21
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fdef 	bl	8001ba2 <write_register>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8001fd4:	2142      	movs	r1, #66	; 0x42
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff fdac 	bl	8001b34 <read_register>
 8001fdc:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001fee:	2101      	movs	r1, #1
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff fd9f 	bl	8001b34 <read_register>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	2b03      	cmp	r3, #3
 8002002:	d101      	bne.n	8002008 <lora_is_transmitting+0x22>
 8002004:	2305      	movs	r3, #5
 8002006:	e000      	b.n	800200a <lora_is_transmitting+0x24>
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b084      	sub	sp, #16
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	4611      	mov	r1, r2
 800201e:	461a      	mov	r2, r3
 8002020:	460b      	mov	r3, r1
 8002022:	71fb      	strb	r3, [r7, #7]
 8002024:	4613      	mov	r3, r2
 8002026:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f7ff ffdc 	bl	8001fe6 <lora_is_transmitting>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8002034:	2305      	movs	r3, #5
 8002036:	e02a      	b.n	800208e <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8002038:	2101      	movs	r1, #1
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7ff fe27 	bl	8001c8e <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f83a 	bl	80020ba <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	7d1b      	ldrb	r3, [r3, #20]
 800204a:	461a      	mov	r2, r3
 800204c:	210d      	movs	r1, #13
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f7ff fda7 	bl	8001ba2 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	7d1b      	ldrb	r3, [r3, #20]
 8002058:	461a      	mov	r2, r3
 800205a:	210e      	movs	r1, #14
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f7ff fda0 	bl	8001ba2 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	461a      	mov	r2, r3
 8002066:	2122      	movs	r1, #34	; 0x22
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff fd9a 	bl	8001ba2 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 800206e:	79bb      	ldrb	r3, [r7, #6]
 8002070:	79fa      	ldrb	r2, [r7, #7]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff fdc8 	bl	8001c0a <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800207a:	79bb      	ldrb	r3, [r7, #6]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <lora_send_packet_base+0x72>
    return LORA_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	e004      	b.n	800208e <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8002084:	2103      	movs	r1, #3
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7ff fe01 	bl	8001c8e <set_mode>
  return LORA_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	4613      	mov	r3, r2
 80020a2:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80020a4:	79fa      	ldrb	r2, [r7, #7]
 80020a6:	2302      	movs	r3, #2
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f7ff ffb1 	bl	8002012 <lora_send_packet_base>
 80020b0:	4603      	mov	r3, r0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 80020c2:	2208      	movs	r2, #8
 80020c4:	2112      	movs	r1, #18
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fd6b 	bl	8001ba2 <write_register>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
 80020e0:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	887a      	ldrh	r2, [r7, #2]
 80020f2:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 80020f4:	6a3a      	ldr	r2, [r7, #32]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002112:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff ff59 	bl	8001fcc <lora_version>
 800211a:	4603      	mov	r3, r0
 800211c:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b12      	cmp	r3, #18
 8002122:	d001      	beq.n	8002128 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8002124:	2304      	movs	r3, #4
 8002126:	e031      	b.n	800218c <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f7ff fe29 	bl	8001d80 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f7ff fe26 	bl	8001d80 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8002134:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f7ff fe9d 	bl	8001e78 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800213e:	2107      	movs	r1, #7
 8002140:	68f8      	ldr	r0, [r7, #12]
 8002142:	f7ff fedf 	bl	8001f04 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 8002146:	210a      	movs	r1, #10
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff ff22 	bl	8001f92 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f7ff fe2e 	bl	8001db0 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 8002154:	210c      	movs	r1, #12
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7ff fcec 	bl	8001b34 <read_register>
 800215c:	4603      	mov	r3, r0
 800215e:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8002160:	7dbb      	ldrb	r3, [r7, #22]
 8002162:	f043 0303 	orr.w	r3, r3, #3
 8002166:	b2db      	uxtb	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	210c      	movs	r1, #12
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff fd18 	bl	8001ba2 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8002172:	2204      	movs	r2, #4
 8002174:	2126      	movs	r1, #38	; 0x26
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7ff fd13 	bl	8001ba2 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 800217c:	2111      	movs	r1, #17
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fe2e 	bl	8001de0 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7ff fe07 	bl	8001d98 <lora_mode_standby>

  return LORA_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	0000      	movs	r0, r0
	...

08002198 <lora_infINIT>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* lora initiation helper, executes up to 100 times */
uint8_t lora_infINIT(int init_ctr) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af02      	add	r7, sp, #8
 800219e:	6078      	str	r0, [r7, #4]
	if (init_ctr < 100) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b63      	cmp	r3, #99	; 0x63
 80021a4:	dc18      	bgt.n	80021d8 <lora_infINIT+0x40>
		uint8_t res = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 80021a6:	a313      	add	r3, pc, #76	; (adr r3, 80021f4 <lora_infINIT+0x5c>)
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	e9cd 2300 	strd	r2, r3, [sp]
 80021b0:	2301      	movs	r3, #1
 80021b2:	4a0d      	ldr	r2, [pc, #52]	; (80021e8 <lora_infINIT+0x50>)
 80021b4:	490d      	ldr	r1, [pc, #52]	; (80021ec <lora_infINIT+0x54>)
 80021b6:	480e      	ldr	r0, [pc, #56]	; (80021f0 <lora_infINIT+0x58>)
 80021b8:	f7ff ff8c 	bl	80020d4 <lora_init>
 80021bc:	4603      	mov	r3, r0
 80021be:	73fb      	strb	r3, [r7, #15]
		if (res != LORA_OK) {
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <lora_infINIT+0x3c>
			// Initialization failed
			// retry lol
			return lora_infINIT(init_ctr + 1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3301      	adds	r3, #1
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ffe4 	bl	8002198 <lora_infINIT>
 80021d0:	4603      	mov	r3, r0
 80021d2:	e002      	b.n	80021da <lora_infINIT+0x42>
	  	} else {
	  		return LORA_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <lora_infINIT+0x42>
	  	}
	} else {
		return LORA_ERROR;
 80021d8:	2304      	movs	r3, #4
	}
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	f3af 8000 	nop.w
 80021e8:	48000400 	.word	0x48000400
 80021ec:	20000548 	.word	0x20000548
 80021f0:	20000690 	.word	0x20000690
 80021f4:	36e55840 	.word	0x36e55840
 80021f8:	00000000 	.word	0x00000000

080021fc <IMUcallback>:

/* called @ 200Hz, updates step count based on IMU data */
inline void IMUcallback(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
	vec_t acc_vec, gravity_vec;
	lin_acc_vec(&hi2c3, &acc_vec.x);
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	4619      	mov	r1, r3
 8002208:	4812      	ldr	r0, [pc, #72]	; (8002254 <IMUcallback+0x58>)
 800220a:	f7fe ffe1 	bl	80011d0 <lin_acc_vec>
	grav_vec(&hi2c3, &gravity_vec.x);
 800220e:	463b      	mov	r3, r7
 8002210:	4619      	mov	r1, r3
 8002212:	4810      	ldr	r0, [pc, #64]	; (8002254 <IMUcallback+0x58>)
 8002214:	f7ff f858 	bl	80012c8 <grav_vec>
	input_step_data(gravity_vec, acc_vec);
 8002218:	ed97 5a03 	vldr	s10, [r7, #12]
 800221c:	edd7 5a04 	vldr	s11, [r7, #16]
 8002220:	ed97 6a05 	vldr	s12, [r7, #20]
 8002224:	edd7 6a00 	vldr	s13, [r7]
 8002228:	ed97 7a01 	vldr	s14, [r7, #4]
 800222c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002230:	eef0 1a45 	vmov.f32	s3, s10
 8002234:	eeb0 2a65 	vmov.f32	s4, s11
 8002238:	eef0 2a46 	vmov.f32	s5, s12
 800223c:	eeb0 0a66 	vmov.f32	s0, s13
 8002240:	eef0 0a47 	vmov.f32	s1, s14
 8002244:	eeb0 1a67 	vmov.f32	s2, s15
 8002248:	f000 fb86 	bl	8002958 <input_step_data>
	//input_acc(gravity_vec, acc_vec);
	// do somethign to add to speed vec or acc vec idk
}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200003e4 	.word	0x200003e4

08002258 <loraCallback>:
	}

}

/* loraCallback(): called after gps is read (5s period) to send relevant data */
inline void loraCallback(void) {
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	// possibly send 5 seconds late
	// before next* gps poll in order
	// to send at a precise times
	// --> 5 second delay should not have large effect

	lora_data.speed = get_velocity();	// speed from gps file
 800225c:	f7ff fc58 	bl	8001b10 <get_velocity>
 8002260:	ec53 2b10 	vmov	r2, r3, d0
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe fcbe 	bl	8000be8 <__aeabi_d2f>
 800226c:	4603      	mov	r3, r0
 800226e:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <loraCallback+0x54>)
 8002270:	6013      	str	r3, [r2, #0]
	lora_data.distance = get_distance();	// distance from gps file
 8002272:	f7ff fc3b 	bl	8001aec <get_distance>
 8002276:	ec53 2b10 	vmov	r2, r3, d0
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f7fe fcb3 	bl	8000be8 <__aeabi_d2f>
 8002282:	4603      	mov	r3, r0
 8002284:	4a09      	ldr	r2, [pc, #36]	; (80022ac <loraCallback+0x54>)
 8002286:	6053      	str	r3, [r2, #4]
	lora_data.heart_rate = get_BPM();	// bpm from pulse sensor file
 8002288:	f7ff f9ee 	bl	8001668 <get_BPM>
 800228c:	4603      	mov	r3, r0
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <loraCallback+0x54>)
 8002290:	6093      	str	r3, [r2, #8]
	lora_data.steps = get_step_count();	// step count from steps file
 8002292:	f000 fcbf 	bl	8002c14 <get_step_count>
 8002296:	4603      	mov	r3, r0
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <loraCallback+0x54>)
 800229a:	60d3      	str	r3, [r2, #12]
	lora_send_packet(&lora, (uint8_t*)&lora_data, sizeof(lora_data));
 800229c:	2210      	movs	r2, #16
 800229e:	4903      	ldr	r1, [pc, #12]	; (80022ac <loraCallback+0x54>)
 80022a0:	4803      	ldr	r0, [pc, #12]	; (80022b0 <loraCallback+0x58>)
 80022a2:	f7ff fef8 	bl	8002096 <lora_send_packet>
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200006ac 	.word	0x200006ac
 80022b0:	20000690 	.word	0x20000690

080022b4 <HAL_TIM_PeriodElapsedCallback>:

/* timer checker */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d104      	bne.n	80022ce <HAL_TIM_PeriodElapsedCallback+0x1a>
		IMUcallback();
 80022c4:	f7ff ff9a 	bl	80021fc <IMUcallback>
		updatePulseSensor();
 80022c8:	f7ff f848 	bl	800135c <updatePulseSensor>
	} else if (htim == &htim7) {
		/* timer controlling GPS and LoRa data */
		gps_flag = 1;
		//vibratorCallback();
	}
}
 80022cc:	e006      	b.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x28>
	} else if (htim == &htim7) {
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d102      	bne.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x28>
		gps_flag = 1;
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x38>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200005f8 	.word	0x200005f8
 80022e8:	20000644 	.word	0x20000644
 80022ec:	200006a8 	.word	0x200006a8

080022f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022f6:	f001 f870 	bl	80033da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022fa:	f000 f83f 	bl	800237c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022fe:	f000 fabd 	bl	800287c <MX_GPIO_Init>
  MX_TIM6_Init();
 8002302:	f000 fa4d 	bl	80027a0 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002306:	f000 f94d 	bl	80025a4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800230a:	f000 f87d 	bl	8002408 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800230e:	f000 f91d 	bl	800254c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002312:	f000 f977 	bl	8002604 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002316:	f000 f9b3 	bl	8002680 <MX_TIM1_Init>
  MX_TIM7_Init();
 800231a:	f000 fa77 	bl	800280c <MX_TIM7_Init>
  MX_I2C3_Init();
 800231e:	f000 f8d7 	bl	80024d0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  initPulseSensor(&hadc1);
 8002322:	4810      	ldr	r0, [pc, #64]	; (8002364 <main+0x74>)
 8002324:	f7ff f80a 	bl	800133c <initPulseSensor>
  init_IMU(&hi2c3);
 8002328:	480f      	ldr	r0, [pc, #60]	; (8002368 <main+0x78>)
 800232a:	f7fe fe9b 	bl	8001064 <init_IMU>
  uint8_t res = lora_infINIT(0);
 800232e:	2000      	movs	r0, #0
 8002330:	f7ff ff32 	bl	8002198 <lora_infINIT>
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
  if (res != LORA_OK) {
	  // restart whole system idk
  }

  // start your engines!
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002338:	2100      	movs	r1, #0
 800233a:	480c      	ldr	r0, [pc, #48]	; (800236c <main+0x7c>)
 800233c:	f005 fd72 	bl	8007e24 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8002340:	480b      	ldr	r0, [pc, #44]	; (8002370 <main+0x80>)
 8002342:	f005 fcc3 	bl	8007ccc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002346:	480b      	ldr	r0, [pc, #44]	; (8002374 <main+0x84>)
 8002348:	f005 fcc0 	bl	8007ccc <HAL_TIM_Base_Start_IT>

  while (1)
  {

	  /* GPS Polling */
	  if (gps_flag) {
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <main+0x88>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0fb      	beq.n	800234c <main+0x5c>
		  updateGPS();
 8002354:	f7ff f9e4 	bl	8001720 <updateGPS>
		  gps_flag = 0;
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <main+0x88>)
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
		  loraCallback(); // transmit lora data after GPS bottleneck finishes
 800235e:	f7ff ff7b 	bl	8002258 <loraCallback>
	  if (gps_flag) {
 8002362:	e7f3      	b.n	800234c <main+0x5c>
 8002364:	20000380 	.word	0x20000380
 8002368:	200003e4 	.word	0x200003e4
 800236c:	200005ac 	.word	0x200005ac
 8002370:	200005f8 	.word	0x200005f8
 8002374:	20000644 	.word	0x20000644
 8002378:	200006a8 	.word	0x200006a8

0800237c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b096      	sub	sp, #88	; 0x58
 8002380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	2244      	movs	r2, #68	; 0x44
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f009 f912 	bl	800b5b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002390:	463b      	mov	r3, r7
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800239e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023a2:	f003 fa07 	bl	80057b4 <HAL_PWREx_ControlVoltageScaling>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80023ac:	f000 facc 	bl	8002948 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80023b0:	2310      	movs	r3, #16
 80023b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80023b4:	2301      	movs	r3, #1
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80023bc:	2360      	movs	r3, #96	; 0x60
 80023be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 fa49 	bl	8005860 <HAL_RCC_OscConfig>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80023d4:	f000 fab8 	bl	8002948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023d8:	230f      	movs	r3, #15
 80023da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80023dc:	2300      	movs	r3, #0
 80023de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023ec:	463b      	mov	r3, r7
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f003 fe49 	bl	8006088 <HAL_RCC_ClockConfig>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80023fc:	f000 faa4 	bl	8002948 <Error_Handler>
  }
}
 8002400:	bf00      	nop
 8002402:	3758      	adds	r7, #88	; 0x58
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b086      	sub	sp, #24
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800240e:	463b      	mov	r3, r7
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800241e:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002420:	4a29      	ldr	r2, [pc, #164]	; (80024c8 <MX_ADC1_Init+0xc0>)
 8002422:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002426:	2200      	movs	r2, #0
 8002428:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800242a:	4b26      	ldr	r3, [pc, #152]	; (80024c4 <MX_ADC1_Init+0xbc>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002430:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800243c:	4b21      	ldr	r3, [pc, #132]	; (80024c4 <MX_ADC1_Init+0xbc>)
 800243e:	2204      	movs	r2, #4
 8002440:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002444:	2200      	movs	r2, #0
 8002446:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <MX_ADC1_Init+0xbc>)
 800244a:	2200      	movs	r2, #0
 800244c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002450:	2201      	movs	r2, #1
 8002452:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <MX_ADC1_Init+0xbc>)
 800245e:	2200      	movs	r2, #0
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002464:	2200      	movs	r2, #0
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002468:	4b16      	ldr	r3, [pc, #88]	; (80024c4 <MX_ADC1_Init+0xbc>)
 800246a:	2200      	movs	r2, #0
 800246c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002472:	2200      	movs	r2, #0
 8002474:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800247e:	4811      	ldr	r0, [pc, #68]	; (80024c4 <MX_ADC1_Init+0xbc>)
 8002480:	f001 f9e8 	bl	8003854 <HAL_ADC_Init>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800248a:	f000 fa5d 	bl	8002948 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_ADC1_Init+0xc4>)
 8002490:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002492:	2306      	movs	r3, #6
 8002494:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800249a:	237f      	movs	r3, #127	; 0x7f
 800249c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800249e:	2304      	movs	r3, #4
 80024a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024a6:	463b      	mov	r3, r7
 80024a8:	4619      	mov	r1, r3
 80024aa:	4806      	ldr	r0, [pc, #24]	; (80024c4 <MX_ADC1_Init+0xbc>)
 80024ac:	f001 fc14 	bl	8003cd8 <HAL_ADC_ConfigChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80024b6:	f000 fa47 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000380 	.word	0x20000380
 80024c8:	50040000 	.word	0x50040000
 80024cc:	14f00020 	.word	0x14f00020

080024d0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <MX_I2C3_Init+0x74>)
 80024d6:	4a1c      	ldr	r2, [pc, #112]	; (8002548 <MX_I2C3_Init+0x78>)
 80024d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <MX_I2C3_Init+0x74>)
 80024dc:	f640 6214 	movw	r2, #3604	; 0xe14
 80024e0:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80024e2:	4b18      	ldr	r3, [pc, #96]	; (8002544 <MX_I2C3_Init+0x74>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <MX_I2C3_Init+0x74>)
 80024ea:	2201      	movs	r2, #1
 80024ec:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <MX_I2C3_Init+0x74>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <MX_I2C3_Init+0x74>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <MX_I2C3_Init+0x74>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002500:	4b10      	ldr	r3, [pc, #64]	; (8002544 <MX_I2C3_Init+0x74>)
 8002502:	2200      	movs	r2, #0
 8002504:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002506:	4b0f      	ldr	r3, [pc, #60]	; (8002544 <MX_I2C3_Init+0x74>)
 8002508:	2200      	movs	r2, #0
 800250a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800250c:	480d      	ldr	r0, [pc, #52]	; (8002544 <MX_I2C3_Init+0x74>)
 800250e:	f002 fb6f 	bl	8004bf0 <HAL_I2C_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002518:	f000 fa16 	bl	8002948 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800251c:	2100      	movs	r1, #0
 800251e:	4809      	ldr	r0, [pc, #36]	; (8002544 <MX_I2C3_Init+0x74>)
 8002520:	f003 f8a2 	bl	8005668 <HAL_I2CEx_ConfigAnalogFilter>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800252a:	f000 fa0d 	bl	8002948 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800252e:	2100      	movs	r1, #0
 8002530:	4804      	ldr	r0, [pc, #16]	; (8002544 <MX_I2C3_Init+0x74>)
 8002532:	f003 f8e4 	bl	80056fe <HAL_I2CEx_ConfigDigitalFilter>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800253c:	f000 fa04 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200003e4 	.word	0x200003e4
 8002548:	40005c00 	.word	0x40005c00

0800254c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 8002552:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <MX_LPUART1_UART_Init+0x54>)
 8002554:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002556:	4b11      	ldr	r3, [pc, #68]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 8002558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800255c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	4b0f      	ldr	r3, [pc, #60]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002564:	4b0d      	ldr	r3, [pc, #52]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800256a:	4b0c      	ldr	r3, [pc, #48]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002570:	4b0a      	ldr	r3, [pc, #40]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 8002572:	220c      	movs	r2, #12
 8002574:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002576:	4b09      	ldr	r3, [pc, #36]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800257c:	4b07      	ldr	r3, [pc, #28]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 800257e:	2200      	movs	r2, #0
 8002580:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 8002584:	2200      	movs	r2, #0
 8002586:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002588:	4804      	ldr	r0, [pc, #16]	; (800259c <MX_LPUART1_UART_Init+0x50>)
 800258a:	f006 fb6b 	bl	8008c64 <HAL_UART_Init>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002594:	f000 f9d8 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000438 	.word	0x20000438
 80025a0:	40008000 	.word	0x40008000

080025a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025aa:	4a15      	ldr	r2, [pc, #84]	; (8002600 <MX_USART1_UART_Init+0x5c>)
 80025ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025bc:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025c8:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025ca:	220c      	movs	r2, #12
 80025cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025e6:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_USART1_UART_Init+0x58>)
 80025e8:	f006 fb3c 	bl	8008c64 <HAL_UART_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025f2:	f000 f9a9 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200004c0 	.word	0x200004c0
 8002600:	40013800 	.word	0x40013800

08002604 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <MX_SPI1_Init+0x74>)
 800260a:	4a1c      	ldr	r2, [pc, #112]	; (800267c <MX_SPI1_Init+0x78>)
 800260c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <MX_SPI1_Init+0x74>)
 8002610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002614:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <MX_SPI1_Init+0x74>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <MX_SPI1_Init+0x74>)
 800261e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002622:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <MX_SPI1_Init+0x74>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800262a:	4b13      	ldr	r3, [pc, #76]	; (8002678 <MX_SPI1_Init+0x74>)
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <MX_SPI1_Init+0x74>)
 8002632:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002636:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <MX_SPI1_Init+0x74>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <MX_SPI1_Init+0x74>)
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <MX_SPI1_Init+0x74>)
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <MX_SPI1_Init+0x74>)
 800264c:	2200      	movs	r2, #0
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <MX_SPI1_Init+0x74>)
 8002652:	2207      	movs	r2, #7
 8002654:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <MX_SPI1_Init+0x74>)
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <MX_SPI1_Init+0x74>)
 800265e:	2208      	movs	r2, #8
 8002660:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002662:	4805      	ldr	r0, [pc, #20]	; (8002678 <MX_SPI1_Init+0x74>)
 8002664:	f004 fa1c 	bl	8006aa0 <HAL_SPI_Init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800266e:	f000 f96b 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000548 	.word	0x20000548
 800267c:	40013000 	.word	0x40013000

08002680 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b096      	sub	sp, #88	; 0x58
 8002684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002686:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]
 80026a2:	615a      	str	r2, [r3, #20]
 80026a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	222c      	movs	r2, #44	; 0x2c
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f008 ff81 	bl	800b5b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <MX_TIM1_Init+0x118>)
 80026b4:	4a39      	ldr	r2, [pc, #228]	; (800279c <MX_TIM1_Init+0x11c>)
 80026b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026b8:	4b37      	ldr	r3, [pc, #220]	; (8002798 <MX_TIM1_Init+0x118>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026be:	4b36      	ldr	r3, [pc, #216]	; (8002798 <MX_TIM1_Init+0x118>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <MX_TIM1_Init+0x118>)
 80026c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <MX_TIM1_Init+0x118>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <MX_TIM1_Init+0x118>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <MX_TIM1_Init+0x118>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026de:	482e      	ldr	r0, [pc, #184]	; (8002798 <MX_TIM1_Init+0x118>)
 80026e0:	f005 fb48 	bl	8007d74 <HAL_TIM_PWM_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80026ea:	f000 f92d 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026fe:	4619      	mov	r1, r3
 8002700:	4825      	ldr	r0, [pc, #148]	; (8002798 <MX_TIM1_Init+0x118>)
 8002702:	f006 f9b3 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800270c:	f000 f91c 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002710:	2360      	movs	r3, #96	; 0x60
 8002712:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002718:	2300      	movs	r3, #0
 800271a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800271c:	2300      	movs	r3, #0
 800271e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002720:	2300      	movs	r3, #0
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002724:	2300      	movs	r3, #0
 8002726:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002730:	2200      	movs	r2, #0
 8002732:	4619      	mov	r1, r3
 8002734:	4818      	ldr	r0, [pc, #96]	; (8002798 <MX_TIM1_Init+0x118>)
 8002736:	f005 fd55 	bl	80081e4 <HAL_TIM_PWM_ConfigChannel>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002740:	f000 f902 	bl	8002948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002744:	2300      	movs	r3, #0
 8002746:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002770:	2300      	movs	r3, #0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002774:	1d3b      	adds	r3, r7, #4
 8002776:	4619      	mov	r1, r3
 8002778:	4807      	ldr	r0, [pc, #28]	; (8002798 <MX_TIM1_Init+0x118>)
 800277a:	f006 f9dd 	bl	8008b38 <HAL_TIMEx_ConfigBreakDeadTime>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002784:	f000 f8e0 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <MX_TIM1_Init+0x118>)
 800278a:	f000 fcaf 	bl	80030ec <HAL_TIM_MspPostInit>

}
 800278e:	bf00      	nop
 8002790:	3758      	adds	r7, #88	; 0x58
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200005ac 	.word	0x200005ac
 800279c:	40012c00 	.word	0x40012c00

080027a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <MX_TIM6_Init+0x64>)
 80027b2:	4a15      	ldr	r2, [pc, #84]	; (8002808 <MX_TIM6_Init+0x68>)
 80027b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <MX_TIM6_Init+0x64>)
 80027b8:	2227      	movs	r2, #39	; 0x27
 80027ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027bc:	4b11      	ldr	r3, [pc, #68]	; (8002804 <MX_TIM6_Init+0x64>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <MX_TIM6_Init+0x64>)
 80027c4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80027c8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ca:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <MX_TIM6_Init+0x64>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027d0:	480c      	ldr	r0, [pc, #48]	; (8002804 <MX_TIM6_Init+0x64>)
 80027d2:	f005 fa23 	bl	8007c1c <HAL_TIM_Base_Init>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80027dc:	f000 f8b4 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e0:	2300      	movs	r3, #0
 80027e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	4619      	mov	r1, r3
 80027ec:	4805      	ldr	r0, [pc, #20]	; (8002804 <MX_TIM6_Init+0x64>)
 80027ee:	f006 f93d 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80027f8:	f000 f8a6 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200005f8 	.word	0x200005f8
 8002808:	40001000 	.word	0x40001000

0800280c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <MX_TIM7_Init+0x68>)
 800281e:	4a16      	ldr	r2, [pc, #88]	; (8002878 <MX_TIM7_Init+0x6c>)
 8002820:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 399;
 8002822:	4b14      	ldr	r3, [pc, #80]	; (8002874 <MX_TIM7_Init+0x68>)
 8002824:	f240 128f 	movw	r2, #399	; 0x18f
 8002828:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <MX_TIM7_Init+0x68>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <MX_TIM7_Init+0x68>)
 8002832:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002836:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <MX_TIM7_Init+0x68>)
 800283a:	2200      	movs	r2, #0
 800283c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800283e:	480d      	ldr	r0, [pc, #52]	; (8002874 <MX_TIM7_Init+0x68>)
 8002840:	f005 f9ec 	bl	8007c1c <HAL_TIM_Base_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800284a:	f000 f87d 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	4619      	mov	r1, r3
 800285a:	4806      	ldr	r0, [pc, #24]	; (8002874 <MX_TIM7_Init+0x68>)
 800285c:	f006 f906 	bl	8008a6c <HAL_TIMEx_MasterConfigSynchronization>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002866:	f000 f86f 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000644 	.word	0x20000644
 8002878:	40001400 	.word	0x40001400

0800287c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002892:	4b22      	ldr	r3, [pc, #136]	; (800291c <MX_GPIO_Init+0xa0>)
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	4a21      	ldr	r2, [pc, #132]	; (800291c <MX_GPIO_Init+0xa0>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800289e:	4b1f      	ldr	r3, [pc, #124]	; (800291c <MX_GPIO_Init+0xa0>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <MX_GPIO_Init+0xa0>)
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	4a1b      	ldr	r2, [pc, #108]	; (800291c <MX_GPIO_Init+0xa0>)
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <MX_GPIO_Init+0xa0>)
 80028b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	607b      	str	r3, [r7, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2120      	movs	r1, #32
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ca:	f002 f979 	bl	8004bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80028ce:	2201      	movs	r2, #1
 80028d0:	2101      	movs	r1, #1
 80028d2:	4813      	ldr	r0, [pc, #76]	; (8002920 <MX_GPIO_Init+0xa4>)
 80028d4:	f002 f974 	bl	8004bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028d8:	2320      	movs	r3, #32
 80028da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028dc:	2301      	movs	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e8:	f107 030c 	add.w	r3, r7, #12
 80028ec:	4619      	mov	r1, r3
 80028ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028f2:	f001 fffb 	bl	80048ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028f6:	2301      	movs	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fa:	2301      	movs	r3, #1
 80028fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	2300      	movs	r3, #0
 8002904:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002906:	f107 030c 	add.w	r3, r7, #12
 800290a:	4619      	mov	r1, r3
 800290c:	4804      	ldr	r0, [pc, #16]	; (8002920 <MX_GPIO_Init+0xa4>)
 800290e:	f001 ffed 	bl	80048ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002912:	bf00      	nop
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	48000400 	.word	0x48000400

08002924 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 800292c:	1d39      	adds	r1, r7, #4
 800292e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002932:	2201      	movs	r2, #1
 8002934:	4803      	ldr	r0, [pc, #12]	; (8002944 <__io_putchar+0x20>)
 8002936:	f006 f9e3 	bl	8008d00 <HAL_UART_Transmit>
  return ch;
 800293a:	687b      	ldr	r3, [r7, #4]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000438 	.word	0x20000438

08002948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
}
 800294e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002950:	e7fe      	b.n	8002950 <Error_Handler+0x8>
 8002952:	0000      	movs	r0, r0
 8002954:	0000      	movs	r0, r0
	...

08002958 <input_step_data>:

static bool first_step = true;		// first beat bool
static bool second_step = false; 	// second beat bool
static bool step = false; 		// pulse recognized bool

void input_step_data(vec_t gravity_vec, vec_t acc_vec) {
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	eeb0 5a40 	vmov.f32	s10, s0
 8002962:	eef0 5a60 	vmov.f32	s11, s1
 8002966:	eeb0 6a41 	vmov.f32	s12, s2
 800296a:	eef0 6a61 	vmov.f32	s13, s3
 800296e:	eeb0 7a42 	vmov.f32	s14, s4
 8002972:	eef0 7a62 	vmov.f32	s15, s5
 8002976:	ed87 5a03 	vstr	s10, [r7, #12]
 800297a:	edc7 5a04 	vstr	s11, [r7, #16]
 800297e:	ed87 6a05 	vstr	s12, [r7, #20]
 8002982:	edc7 6a00 	vstr	s13, [r7]
 8002986:	ed87 7a01 	vstr	s14, [r7, #4]
 800298a:	edc7 7a02 	vstr	s15, [r7, #8]
	curr_step_mag = 0;
 800298e:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <input_step_data+0x110>)
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

	// normalize gravity vector
	gravity_vec.x /= 9.8;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fd fdd5 	bl	8000548 <__aeabi_f2d>
 800299e:	a330      	add	r3, pc, #192	; (adr r3, 8002a60 <input_step_data+0x108>)
 80029a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a4:	f7fd ff52 	bl	800084c <__aeabi_ddiv>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	f7fe f91a 	bl	8000be8 <__aeabi_d2f>
 80029b4:	4603      	mov	r3, r0
 80029b6:	60fb      	str	r3, [r7, #12]
	gravity_vec.y /= 9.8;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7fd fdc4 	bl	8000548 <__aeabi_f2d>
 80029c0:	a327      	add	r3, pc, #156	; (adr r3, 8002a60 <input_step_data+0x108>)
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f7fd ff41 	bl	800084c <__aeabi_ddiv>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	f7fe f909 	bl	8000be8 <__aeabi_d2f>
 80029d6:	4603      	mov	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]
	gravity_vec.z /= 9.8;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fdb3 	bl	8000548 <__aeabi_f2d>
 80029e2:	a31f      	add	r3, pc, #124	; (adr r3, 8002a60 <input_step_data+0x108>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd ff30 	bl	800084c <__aeabi_ddiv>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f7fe f8f8 	bl	8000be8 <__aeabi_d2f>
 80029f8:	4603      	mov	r3, r0
 80029fa:	617b      	str	r3, [r7, #20]

	// dot product
	curr_step_mag += acc_vec.x * gravity_vec.x;
 80029fc:	ed97 7a00 	vldr	s14, [r7]
 8002a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <input_step_data+0x110>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <input_step_data+0x110>)
 8002a14:	edc3 7a00 	vstr	s15, [r3]
	curr_step_mag += acc_vec.y * gravity_vec.y;
 8002a18:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <input_step_data+0x110>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <input_step_data+0x110>)
 8002a30:	edc3 7a00 	vstr	s15, [r3]
	curr_step_mag += acc_vec.z * gravity_vec.z;
 8002a34:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a38:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <input_step_data+0x110>)
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <input_step_data+0x110>)
 8002a4c:	edc3 7a00 	vstr	s15, [r3]

	get_step();
 8002a50:	f000 f80c 	bl	8002a6c <get_step>
	return steps;
 8002a54:	bf00      	nop
}
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	f3af 8000 	nop.w
 8002a60:	9999999a 	.word	0x9999999a
 8002a64:	40239999 	.word	0x40239999
 8002a68:	200006bc 	.word	0x200006bc

08002a6c <get_step>:

void get_step() {
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
	++samples_since_last_step;
 8002a72:	4b5d      	ldr	r3, [pc, #372]	; (8002be8 <get_step+0x17c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3301      	adds	r3, #1
 8002a78:	4a5b      	ldr	r2, [pc, #364]	; (8002be8 <get_step+0x17c>)
 8002a7a:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_step * STEP_SAMPLE_PERIOD;
 8002a7c:	4b5a      	ldr	r3, [pc, #360]	; (8002be8 <get_step+0x17c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	607b      	str	r3, [r7, #4]

	if (curr_step_mag < thresh && curr_step_mag < trough_amp) { // update trough
 8002a88:	4b58      	ldr	r3, [pc, #352]	; (8002bec <get_step+0x180>)
 8002a8a:	ed93 7a00 	vldr	s14, [r3]
 8002a8e:	4b58      	ldr	r3, [pc, #352]	; (8002bf0 <get_step+0x184>)
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9c:	d50e      	bpl.n	8002abc <get_step+0x50>
 8002a9e:	4b53      	ldr	r3, [pc, #332]	; (8002bec <get_step+0x180>)
 8002aa0:	ed93 7a00 	vldr	s14, [r3]
 8002aa4:	4b53      	ldr	r3, [pc, #332]	; (8002bf4 <get_step+0x188>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	d503      	bpl.n	8002abc <get_step+0x50>
		trough_amp = curr_step_mag;
 8002ab4:	4b4d      	ldr	r3, [pc, #308]	; (8002bec <get_step+0x180>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a4e      	ldr	r2, [pc, #312]	; (8002bf4 <get_step+0x188>)
 8002aba:	6013      	str	r3, [r2, #0]
	}// if.. lower trough

	if (curr_step_mag > thresh && curr_step_mag > peak_amp && curr_step_mag > min_peak_amp) {  // thresh condition helps avoid noise
 8002abc:	4b4b      	ldr	r3, [pc, #300]	; (8002bec <get_step+0x180>)
 8002abe:	ed93 7a00 	vldr	s14, [r3]
 8002ac2:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <get_step+0x184>)
 8002ac4:	edd3 7a00 	vldr	s15, [r3]
 8002ac8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad0:	dd19      	ble.n	8002b06 <get_step+0x9a>
 8002ad2:	4b46      	ldr	r3, [pc, #280]	; (8002bec <get_step+0x180>)
 8002ad4:	ed93 7a00 	vldr	s14, [r3]
 8002ad8:	4b47      	ldr	r3, [pc, #284]	; (8002bf8 <get_step+0x18c>)
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	dd0e      	ble.n	8002b06 <get_step+0x9a>
 8002ae8:	4b40      	ldr	r3, [pc, #256]	; (8002bec <get_step+0x180>)
 8002aea:	ed93 7a00 	vldr	s14, [r3]
 8002aee:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <get_step+0x190>)
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	dd03      	ble.n	8002b06 <get_step+0x9a>
		peak_amp = curr_step_mag;
 8002afe:	4b3b      	ldr	r3, [pc, #236]	; (8002bec <get_step+0x180>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a3d      	ldr	r2, [pc, #244]	; (8002bf8 <get_step+0x18c>)
 8002b04:	6013      	str	r3, [r2, #0]
	}// if.. higher peak

	//  NOW IT'S TIME TO LOOK FOR THE step
	// signal surges up in value every time there is a step
	if (N > 100 && (curr_step_mag > thresh) && (step == false) ) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b64      	cmp	r3, #100	; 0x64
 8002b0a:	dd1c      	ble.n	8002b46 <get_step+0xda>
 8002b0c:	4b37      	ldr	r3, [pc, #220]	; (8002bec <get_step+0x180>)
 8002b0e:	ed93 7a00 	vldr	s14, [r3]
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <get_step+0x184>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b20:	dd11      	ble.n	8002b46 <get_step+0xda>
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <get_step+0x194>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	f083 0301 	eor.w	r3, r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <get_step+0xda>
		step = true;                             // set the Pulse flag when we think there is a pulse
 8002b30:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <get_step+0x194>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
	  	samples_since_last_step = 0;
 8002b36:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <get_step+0x17c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
	  	++steps;
 8002b3c:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <get_step+0x198>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	4a30      	ldr	r2, [pc, #192]	; (8002c04 <get_step+0x198>)
 8002b44:	6013      	str	r3, [r2, #0]
	}// if.. new step

	if (curr_step_mag < thresh && step) {  // when the values are going down, the beat is over
 8002b46:	4b29      	ldr	r3, [pc, #164]	; (8002bec <get_step+0x180>)
 8002b48:	ed93 7a00 	vldr	s14, [r3]
 8002b4c:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <get_step+0x184>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5a:	d528      	bpl.n	8002bae <get_step+0x142>
 8002b5c:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <get_step+0x194>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d024      	beq.n	8002bae <get_step+0x142>
		step = false;                         // reset the Pulse flag so we can do it again
 8002b64:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <get_step+0x194>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	701a      	strb	r2, [r3, #0]
		amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 8002b6a:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <get_step+0x18c>)
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <get_step+0x188>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7a:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <get_step+0x19c>)
 8002b7c:	edc3 7a00 	vstr	s15, [r3]
		thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 8002b80:	4b21      	ldr	r3, [pc, #132]	; (8002c08 <get_step+0x19c>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <get_step+0x188>)
 8002b90:	edd3 7a00 	vldr	s15, [r3]
 8002b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <get_step+0x184>)
 8002b9a:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <get_step+0x184>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a15      	ldr	r2, [pc, #84]	; (8002bf8 <get_step+0x18c>)
 8002ba4:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <get_step+0x184>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <get_step+0x188>)
 8002bac:	6013      	str	r3, [r2, #0]
	}// if.. step over

	if (N > 2500) {                          // if 2.5 seconds go by without a beat
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	dd11      	ble.n	8002bdc <get_step+0x170>
	    thresh = STEP_THRESH_DEFAULT;                // set thresh default
 8002bb8:	4b0d      	ldr	r3, [pc, #52]	; (8002bf0 <get_step+0x184>)
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <get_step+0x1a0>)
 8002bbc:	601a      	str	r2, [r3, #0]
	    peak_amp = STEP_THRESH_DEFAULT;                               // set P default
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <get_step+0x18c>)
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <get_step+0x1a0>)
 8002bc2:	601a      	str	r2, [r3, #0]
	    trough_amp = STEP_THRESH_DEFAULT;                               // set T default
 8002bc4:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <get_step+0x188>)
 8002bc6:	4a11      	ldr	r2, [pc, #68]	; (8002c0c <get_step+0x1a0>)
 8002bc8:	601a      	str	r2, [r3, #0]
	    samples_since_last_step = 0;          // bring the lastBeatTime up to date
 8002bca:	4b07      	ldr	r3, [pc, #28]	; (8002be8 <get_step+0x17c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
	    step = false;
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <get_step+0x194>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	701a      	strb	r2, [r3, #0]
	    amp = 20;
 8002bd6:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <get_step+0x19c>)
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <get_step+0x1a4>)
 8002bda:	601a      	str	r2, [r3, #0]
	}// if.. N>2500
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	200006c0 	.word	0x200006c0
 8002bec:	200006bc 	.word	0x200006bc
 8002bf0:	2000001c 	.word	0x2000001c
 8002bf4:	20000028 	.word	0x20000028
 8002bf8:	20000020 	.word	0x20000020
 8002bfc:	20000024 	.word	0x20000024
 8002c00:	200006c8 	.word	0x200006c8
 8002c04:	200006c4 	.word	0x200006c4
 8002c08:	20000018 	.word	0x20000018
 8002c0c:	41200000 	.word	0x41200000
 8002c10:	41a00000 	.word	0x41a00000

08002c14 <get_step_count>:

int get_step_count(void) {
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
	return steps;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <get_step_count+0x14>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	200006c4 	.word	0x200006c4

08002c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c32:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <HAL_MspInit+0x44>)
 8002c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c36:	4a0e      	ldr	r2, [pc, #56]	; (8002c70 <HAL_MspInit+0x44>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002c3e:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <HAL_MspInit+0x44>)
 8002c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <HAL_MspInit+0x44>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <HAL_MspInit+0x44>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6593      	str	r3, [r2, #88]	; 0x58
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_MspInit+0x44>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000

08002c74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b09e      	sub	sp, #120	; 0x78
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c8c:	f107 0310 	add.w	r3, r7, #16
 8002c90:	2254      	movs	r2, #84	; 0x54
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f008 fc8d 	bl	800b5b4 <memset>
  if(hadc->Instance==ADC1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_ADC_MspInit+0xc0>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d143      	bne.n	8002d2c <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ca8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002caa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002cae:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002cb8:	2310      	movs	r3, #16
 8002cba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002cbc:	2307      	movs	r3, #7
 8002cbe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002cc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cce:	f107 0310 	add.w	r3, r7, #16
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f003 fbfc 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002cde:	f7ff fe33 	bl	8002948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_ADC_MspInit+0xc4>)
 8002ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce6:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <HAL_ADC_MspInit+0xc4>)
 8002ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_ADC_MspInit+0xc4>)
 8002cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <HAL_ADC_MspInit+0xc4>)
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfe:	4a0e      	ldr	r2, [pc, #56]	; (8002d38 <HAL_ADC_MspInit+0xc4>)
 8002d00:	f043 0301 	orr.w	r3, r3, #1
 8002d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_ADC_MspInit+0xc4>)
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002d12:	2301      	movs	r3, #1
 8002d14:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d16:	230b      	movs	r3, #11
 8002d18:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d22:	4619      	mov	r1, r3
 8002d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d28:	f001 fde0 	bl	80048ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d2c:	bf00      	nop
 8002d2e:	3778      	adds	r7, #120	; 0x78
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	50040000 	.word	0x50040000
 8002d38:	40021000 	.word	0x40021000

08002d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b0a0      	sub	sp, #128	; 0x80
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d54:	f107 0318 	add.w	r3, r7, #24
 8002d58:	2254      	movs	r2, #84	; 0x54
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f008 fc29 	bl	800b5b4 <memset>
  if(hi2c->Instance==I2C3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2d      	ldr	r2, [pc, #180]	; (8002e1c <HAL_I2C_MspInit+0xe0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d153      	bne.n	8002e14 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d70:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002d72:	2300      	movs	r3, #0
 8002d74:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d76:	f107 0318 	add.w	r3, r7, #24
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 fba8 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002d86:	f7ff fddf 	bl	8002948 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8a:	4b25      	ldr	r3, [pc, #148]	; (8002e20 <HAL_I2C_MspInit+0xe4>)
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <HAL_I2C_MspInit+0xe4>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <HAL_I2C_MspInit+0xe4>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002da2:	4b1f      	ldr	r3, [pc, #124]	; (8002e20 <HAL_I2C_MspInit+0xe4>)
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <HAL_I2C_MspInit+0xe4>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <HAL_I2C_MspInit+0xe4>)
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dba:	2380      	movs	r3, #128	; 0x80
 8002dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dbe:	2312      	movs	r3, #18
 8002dc0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dca:	2304      	movs	r3, #4
 8002dcc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dd8:	f001 fd88 	bl	80048ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ddc:	2310      	movs	r3, #16
 8002dde:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de0:	2312      	movs	r3, #18
 8002de2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dec:	2304      	movs	r3, #4
 8002dee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002df4:	4619      	mov	r1, r3
 8002df6:	480b      	ldr	r0, [pc, #44]	; (8002e24 <HAL_I2C_MspInit+0xe8>)
 8002df8:	f001 fd78 	bl	80048ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <HAL_I2C_MspInit+0xe4>)
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <HAL_I2C_MspInit+0xe4>)
 8002e02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e06:	6593      	str	r3, [r2, #88]	; 0x58
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_I2C_MspInit+0xe4>)
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e14:	bf00      	nop
 8002e16:	3780      	adds	r7, #128	; 0x80
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40005c00 	.word	0x40005c00
 8002e20:	40021000 	.word	0x40021000
 8002e24:	48000400 	.word	0x48000400

08002e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b0a2      	sub	sp, #136	; 0x88
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e30:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]
 8002e38:	605a      	str	r2, [r3, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e40:	f107 0320 	add.w	r3, r7, #32
 8002e44:	2254      	movs	r2, #84	; 0x54
 8002e46:	2100      	movs	r1, #0
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f008 fbb3 	bl	800b5b4 <memset>
  if(huart->Instance==LPUART1)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a4f      	ldr	r2, [pc, #316]	; (8002f90 <HAL_UART_MspInit+0x168>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d139      	bne.n	8002ecc <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e60:	f107 0320 	add.w	r3, r7, #32
 8002e64:	4618      	mov	r0, r3
 8002e66:	f003 fb33 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e70:	f7ff fd6a 	bl	8002948 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002e74:	4b47      	ldr	r3, [pc, #284]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	4a46      	ldr	r2, [pc, #280]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002e80:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8c:	4b41      	ldr	r3, [pc, #260]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e90:	4a40      	ldr	r2, [pc, #256]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e98:	4b3e      	ldr	r3, [pc, #248]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	61bb      	str	r3, [r7, #24]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ea4:	230c      	movs	r3, #12
 8002ea6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eac:	2300      	movs	r3, #0
 8002eae:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ebc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec6:	f001 fd11 	bl	80048ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002eca:	e05c      	b.n	8002f86 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <HAL_UART_MspInit+0x170>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d157      	bne.n	8002f86 <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002eda:	2300      	movs	r3, #0
 8002edc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ede:	f107 0320 	add.w	r3, r7, #32
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f003 faf4 	bl	80064d0 <HAL_RCCEx_PeriphCLKConfig>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8002eee:	f7ff fd2b 	bl	8002948 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef2:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef6:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efc:	6613      	str	r3, [r2, #96]	; 0x60
 8002efe:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	4a21      	ldr	r2, [pc, #132]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f16:	4b1f      	ldr	r3, [pc, #124]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	4a1b      	ldr	r2, [pc, #108]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002f28:	f043 0302 	orr.w	r3, r3, #2
 8002f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_UART_MspInit+0x16c>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f3e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f40:	2302      	movs	r3, #2
 8002f42:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f4e:	2307      	movs	r3, #7
 8002f50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f5e:	f001 fcc5 	bl	80048ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f62:	2340      	movs	r3, #64	; 0x40
 8002f64:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f74:	2307      	movs	r3, #7
 8002f76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4806      	ldr	r0, [pc, #24]	; (8002f9c <HAL_UART_MspInit+0x174>)
 8002f82:	f001 fcb3 	bl	80048ec <HAL_GPIO_Init>
}
 8002f86:	bf00      	nop
 8002f88:	3788      	adds	r7, #136	; 0x88
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40008000 	.word	0x40008000
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40013800 	.word	0x40013800
 8002f9c:	48000400 	.word	0x48000400

08002fa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	; 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_SPI_MspInit+0x80>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d129      	bne.n	8003016 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fc2:	4b18      	ldr	r3, [pc, #96]	; (8003024 <HAL_SPI_MspInit+0x84>)
 8002fc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fc6:	4a17      	ldr	r2, [pc, #92]	; (8003024 <HAL_SPI_MspInit+0x84>)
 8002fc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fcc:	6613      	str	r3, [r2, #96]	; 0x60
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_SPI_MspInit+0x84>)
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fda:	4b12      	ldr	r3, [pc, #72]	; (8003024 <HAL_SPI_MspInit+0x84>)
 8002fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fde:	4a11      	ldr	r2, [pc, #68]	; (8003024 <HAL_SPI_MspInit+0x84>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <HAL_SPI_MspInit+0x84>)
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002ff2:	f641 0302 	movw	r3, #6146	; 0x1802
 8002ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003000:	2303      	movs	r3, #3
 8003002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003004:	2305      	movs	r3, #5
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	4619      	mov	r1, r3
 800300e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003012:	f001 fc6b 	bl	80048ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003016:	bf00      	nop
 8003018:	3728      	adds	r7, #40	; 0x28
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	40013000 	.word	0x40013000
 8003024:	40021000 	.word	0x40021000

08003028 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_TIM_PWM_MspInit+0x38>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d10b      	bne.n	8003052 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <HAL_TIM_PWM_MspInit+0x3c>)
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	4a09      	ldr	r2, [pc, #36]	; (8003064 <HAL_TIM_PWM_MspInit+0x3c>)
 8003040:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003044:	6613      	str	r3, [r2, #96]	; 0x60
 8003046:	4b07      	ldr	r3, [pc, #28]	; (8003064 <HAL_TIM_PWM_MspInit+0x3c>)
 8003048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800304a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40021000 	.word	0x40021000

08003068 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a1a      	ldr	r2, [pc, #104]	; (80030e0 <HAL_TIM_Base_MspInit+0x78>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d114      	bne.n	80030a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800307a:	4b1a      	ldr	r3, [pc, #104]	; (80030e4 <HAL_TIM_Base_MspInit+0x7c>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <HAL_TIM_Base_MspInit+0x7c>)
 8003080:	f043 0310 	orr.w	r3, r3, #16
 8003084:	6593      	str	r3, [r2, #88]	; 0x58
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_TIM_Base_MspInit+0x7c>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003092:	2200      	movs	r2, #0
 8003094:	2100      	movs	r1, #0
 8003096:	2036      	movs	r0, #54	; 0x36
 8003098:	f001 fb61 	bl	800475e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800309c:	2036      	movs	r0, #54	; 0x36
 800309e:	f001 fb7a 	bl	8004796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80030a2:	e018      	b.n	80030d6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <HAL_TIM_Base_MspInit+0x80>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d113      	bne.n	80030d6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_TIM_Base_MspInit+0x7c>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	4a0c      	ldr	r2, [pc, #48]	; (80030e4 <HAL_TIM_Base_MspInit+0x7c>)
 80030b4:	f043 0320 	orr.w	r3, r3, #32
 80030b8:	6593      	str	r3, [r2, #88]	; 0x58
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_TIM_Base_MspInit+0x7c>)
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80030c6:	2200      	movs	r2, #0
 80030c8:	2100      	movs	r1, #0
 80030ca:	2037      	movs	r0, #55	; 0x37
 80030cc:	f001 fb47 	bl	800475e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80030d0:	2037      	movs	r0, #55	; 0x37
 80030d2:	f001 fb60 	bl	8004796 <HAL_NVIC_EnableIRQ>
}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40001000 	.word	0x40001000
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40001400 	.word	0x40001400

080030ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030f4:	f107 030c 	add.w	r3, r7, #12
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	60da      	str	r2, [r3, #12]
 8003102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a12      	ldr	r2, [pc, #72]	; (8003154 <HAL_TIM_MspPostInit+0x68>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d11d      	bne.n	800314a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_TIM_MspPostInit+0x6c>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <HAL_TIM_MspPostInit+0x6c>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311a:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_TIM_MspPostInit+0x6c>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800312a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003134:	2300      	movs	r3, #0
 8003136:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003138:	2301      	movs	r3, #1
 800313a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	4619      	mov	r1, r3
 8003142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003146:	f001 fbd1 	bl	80048ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800314a:	bf00      	nop
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40021000 	.word	0x40021000

0800315c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003160:	e7fe      	b.n	8003160 <NMI_Handler+0x4>

08003162 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003162:	b480      	push	{r7}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003166:	e7fe      	b.n	8003166 <HardFault_Handler+0x4>

08003168 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800316c:	e7fe      	b.n	800316c <MemManage_Handler+0x4>

0800316e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316e:	b480      	push	{r7}
 8003170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003172:	e7fe      	b.n	8003172 <BusFault_Handler+0x4>

08003174 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003178:	e7fe      	b.n	8003178 <UsageFault_Handler+0x4>

0800317a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800318c:	bf00      	nop
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003196:	b480      	push	{r7}
 8003198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800319a:	bf00      	nop
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031a8:	f000 f96c 	bl	8003484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80031b4:	4802      	ldr	r0, [pc, #8]	; (80031c0 <TIM6_DAC_IRQHandler+0x10>)
 80031b6:	f004 ff13 	bl	8007fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	200005f8 	.word	0x200005f8

080031c4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <TIM7_IRQHandler+0x10>)
 80031ca:	f004 ff09 	bl	8007fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000644 	.word	0x20000644

080031d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  return 1;
 80031dc:	2301      	movs	r3, #1
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <_kill>:

int _kill(int pid, int sig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80031f2:	f008 fa31 	bl	800b658 <__errno>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2216      	movs	r2, #22
 80031fa:	601a      	str	r2, [r3, #0]
  return -1;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <_exit>:

void _exit (int status)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003210:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff ffe7 	bl	80031e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800321a:	e7fe      	b.n	800321a <_exit+0x12>

0800321c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	e00a      	b.n	8003244 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800322e:	f3af 8000 	nop.w
 8003232:	4601      	mov	r1, r0
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	60ba      	str	r2, [r7, #8]
 800323a:	b2ca      	uxtb	r2, r1
 800323c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	3301      	adds	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	dbf0      	blt.n	800322e <_read+0x12>
  }

  return len;
 800324c:	687b      	ldr	r3, [r7, #4]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b086      	sub	sp, #24
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	e009      	b.n	800327c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	60ba      	str	r2, [r7, #8]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fb57 	bl	8002924 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3301      	adds	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	dbf1      	blt.n	8003268 <_write+0x12>
  }
  return len;
 8003284:	687b      	ldr	r3, [r7, #4]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <_close>:

int _close(int file)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
 80032ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032b6:	605a      	str	r2, [r3, #4]
  return 0;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <_isatty>:

int _isatty(int file)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032ce:	2301      	movs	r3, #1
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <_sbrk+0x5c>)
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <_sbrk+0x60>)
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <_sbrk+0x64>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d102      	bne.n	800331a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <_sbrk+0x64>)
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <_sbrk+0x68>)
 8003318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <_sbrk+0x64>)
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	429a      	cmp	r2, r3
 8003326:	d207      	bcs.n	8003338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003328:	f008 f996 	bl	800b658 <__errno>
 800332c:	4603      	mov	r3, r0
 800332e:	220c      	movs	r2, #12
 8003330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003336:	e009      	b.n	800334c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <_sbrk+0x64>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800333e:	4b07      	ldr	r3, [pc, #28]	; (800335c <_sbrk+0x64>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4413      	add	r3, r2
 8003346:	4a05      	ldr	r2, [pc, #20]	; (800335c <_sbrk+0x64>)
 8003348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800334a:	68fb      	ldr	r3, [r7, #12]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	20010000 	.word	0x20010000
 8003358:	00000400 	.word	0x00000400
 800335c:	200006cc 	.word	0x200006cc
 8003360:	20000820 	.word	0x20000820

08003364 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <SystemInit+0x20>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <SystemInit+0x20>)
 8003370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800338c:	f7ff ffea 	bl	8003364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003390:	480c      	ldr	r0, [pc, #48]	; (80033c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003392:	490d      	ldr	r1, [pc, #52]	; (80033c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <LoopForever+0xe>)
  movs r3, #0
 8003396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003398:	e002      	b.n	80033a0 <LoopCopyDataInit>

0800339a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800339a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800339c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800339e:	3304      	adds	r3, #4

080033a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a4:	d3f9      	bcc.n	800339a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033a6:	4a0a      	ldr	r2, [pc, #40]	; (80033d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80033a8:	4c0a      	ldr	r4, [pc, #40]	; (80033d4 <LoopForever+0x16>)
  movs r3, #0
 80033aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033ac:	e001      	b.n	80033b2 <LoopFillZerobss>

080033ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033b0:	3204      	adds	r2, #4

080033b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b4:	d3fb      	bcc.n	80033ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80033b6:	f008 f955 	bl	800b664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033ba:	f7fe ff99 	bl	80022f0 <main>

080033be <LoopForever>:

LoopForever:
    b LoopForever
 80033be:	e7fe      	b.n	80033be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80033c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80033c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c8:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80033cc:	0800fb50 	.word	0x0800fb50
  ldr r2, =_sbss
 80033d0:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80033d4:	20000820 	.word	0x20000820

080033d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033d8:	e7fe      	b.n	80033d8 <ADC1_IRQHandler>

080033da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033e4:	2003      	movs	r0, #3
 80033e6:	f001 f9af 	bl	8004748 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ea:	200f      	movs	r0, #15
 80033ec:	f000 f80e 	bl	800340c <HAL_InitTick>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	71fb      	strb	r3, [r7, #7]
 80033fa:	e001      	b.n	8003400 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80033fc:	f7ff fc16 	bl	8002c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003400:	79fb      	ldrb	r3, [r7, #7]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_InitTick+0x6c>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d023      	beq.n	8003468 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003420:	4b16      	ldr	r3, [pc, #88]	; (800347c <HAL_InitTick+0x70>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_InitTick+0x6c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	4619      	mov	r1, r3
 800342a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003432:	fbb2 f3f3 	udiv	r3, r2, r3
 8003436:	4618      	mov	r0, r3
 8003438:	f001 f9bb 	bl	80047b2 <HAL_SYSTICK_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10f      	bne.n	8003462 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b0f      	cmp	r3, #15
 8003446:	d809      	bhi.n	800345c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003448:	2200      	movs	r2, #0
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003450:	f001 f985 	bl	800475e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003454:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <HAL_InitTick+0x74>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e007      	b.n	800346c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
 8003460:	e004      	b.n	800346c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	73fb      	strb	r3, [r7, #15]
 8003466:	e001      	b.n	800346c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000034 	.word	0x20000034
 800347c:	2000002c 	.word	0x2000002c
 8003480:	20000030 	.word	0x20000030

08003484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_IncTick+0x20>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_IncTick+0x24>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4413      	add	r3, r2
 8003494:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <HAL_IncTick+0x24>)
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000034 	.word	0x20000034
 80034a8:	200006d0 	.word	0x200006d0

080034ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  return uwTick;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <HAL_GetTick+0x14>)
 80034b2:	681b      	ldr	r3, [r3, #0]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	200006d0 	.word	0x200006d0

080034c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	609a      	str	r2, [r3, #8]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	609a      	str	r2, [r3, #8]
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3360      	adds	r3, #96	; 0x60
 800353e:	461a      	mov	r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	4b08      	ldr	r3, [pc, #32]	; (8003570 <LL_ADC_SetOffset+0x44>)
 800354e:	4013      	ands	r3, r2
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	4313      	orrs	r3, r2
 800355c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	03fff000 	.word	0x03fff000

08003574 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3360      	adds	r3, #96	; 0x60
 8003582:	461a      	mov	r2, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	3360      	adds	r3, #96	; 0x60
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	431a      	orrs	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80035ca:	bf00      	nop
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3330      	adds	r3, #48	; 0x30
 800360c:	461a      	mov	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	f003 030c 	and.w	r3, r3, #12
 8003618:	4413      	add	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f003 031f 	and.w	r3, r3, #31
 8003626:	211f      	movs	r1, #31
 8003628:	fa01 f303 	lsl.w	r3, r1, r3
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	0e9b      	lsrs	r3, r3, #26
 8003634:	f003 011f 	and.w	r1, r3, #31
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	fa01 f303 	lsl.w	r3, r1, r3
 8003642:	431a      	orrs	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3314      	adds	r3, #20
 8003664:	461a      	mov	r2, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	0e5b      	lsrs	r3, r3, #25
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	4413      	add	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	0d1b      	lsrs	r3, r3, #20
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	2107      	movs	r1, #7
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	401a      	ands	r2, r3
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	0d1b      	lsrs	r3, r3, #20
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	431a      	orrs	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c4:	43db      	mvns	r3, r3
 80036c6:	401a      	ands	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0318 	and.w	r3, r3, #24
 80036ce:	4908      	ldr	r1, [pc, #32]	; (80036f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80036d0:	40d9      	lsrs	r1, r3
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	400b      	ands	r3, r1
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	431a      	orrs	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	0007ffff 	.word	0x0007ffff

080036f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003704:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6093      	str	r3, [r2, #8]
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800372c:	d101      	bne.n	8003732 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003750:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003754:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800377c:	d101      	bne.n	8003782 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037a4:	f043 0201 	orr.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <LL_ADC_IsEnabled+0x18>
 80037cc:	2301      	movs	r3, #1
 80037ce:	e000      	b.n	80037d2 <LL_ADC_IsEnabled+0x1a>
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037f2:	f043 0204 	orr.w	r2, r3, #4
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b04      	cmp	r3, #4
 8003818:	d101      	bne.n	800381e <LL_ADC_REG_IsConversionOngoing+0x18>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0308 	and.w	r3, r3, #8
 800383c:	2b08      	cmp	r3, #8
 800383e:	d101      	bne.n	8003844 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e126      	b.n	8003abc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff f9f9 	bl	8002c74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff3f 	bl	8003718 <LL_ADC_IsDeepPowerDownEnabled>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d004      	beq.n	80038aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff ff25 	bl	80036f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff ff5a 	bl	8003768 <LL_ADC_IsInternalRegulatorEnabled>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d115      	bne.n	80038e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ff3e 	bl	8003740 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038c4:	4b7f      	ldr	r3, [pc, #508]	; (8003ac4 <HAL_ADC_Init+0x270>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	4a7f      	ldr	r2, [pc, #508]	; (8003ac8 <HAL_ADC_Init+0x274>)
 80038cc:	fba2 2303 	umull	r2, r3, r2, r3
 80038d0:	099b      	lsrs	r3, r3, #6
 80038d2:	3301      	adds	r3, #1
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038d8:	e002      	b.n	80038e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3b01      	subs	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f9      	bne.n	80038da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff ff3c 	bl	8003768 <LL_ADC_IsInternalRegulatorEnabled>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10d      	bne.n	8003912 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	f043 0210 	orr.w	r2, r3, #16
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003906:	f043 0201 	orr.w	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f7ff ff75 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 800391c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 80bf 	bne.w	8003aaa <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b00      	cmp	r3, #0
 8003930:	f040 80bb 	bne.w	8003aaa <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800393c:	f043 0202 	orr.w	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff35 	bl	80037b8 <LL_ADC_IsEnabled>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003954:	485d      	ldr	r0, [pc, #372]	; (8003acc <HAL_ADC_Init+0x278>)
 8003956:	f7ff ff2f 	bl	80037b8 <LL_ADC_IsEnabled>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4619      	mov	r1, r3
 8003966:	485a      	ldr	r0, [pc, #360]	; (8003ad0 <HAL_ADC_Init+0x27c>)
 8003968:	f7ff fdac 	bl	80034c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7e5b      	ldrb	r3, [r3, #25]
 8003970:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003976:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800397c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003982:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 3020 	ldrb.w	r3, [r3, #32]
 800398a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d106      	bne.n	80039a8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	3b01      	subs	r3, #1
 80039a0:	045b      	lsls	r3, r3, #17
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d009      	beq.n	80039c4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	4b42      	ldr	r3, [pc, #264]	; (8003ad4 <HAL_ADC_Init+0x280>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	69b9      	ldr	r1, [r7, #24]
 80039d4:	430b      	orrs	r3, r1
 80039d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f7ff ff25 	bl	800382c <LL_ADC_INJ_IsConversionOngoing>
 80039e2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d13d      	bne.n	8003a66 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d13a      	bne.n	8003a66 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039f4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80039fc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039fe:	4313      	orrs	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a0c:	f023 0302 	bic.w	r3, r3, #2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	69b9      	ldr	r1, [r7, #24]
 8003a16:	430b      	orrs	r3, r1
 8003a18:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d118      	bne.n	8003a56 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003a2e:	f023 0304 	bic.w	r3, r3, #4
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a3a:	4311      	orrs	r1, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003a40:	4311      	orrs	r1, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a46:	430a      	orrs	r2, r1
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	611a      	str	r2, [r3, #16]
 8003a54:	e007      	b.n	8003a66 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10c      	bne.n	8003a88 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	f023 010f 	bic.w	r1, r3, #15
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	1e5a      	subs	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
 8003a86:	e007      	b.n	8003a98 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 020f 	bic.w	r2, r2, #15
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9c:	f023 0303 	bic.w	r3, r3, #3
 8003aa0:	f043 0201 	orr.w	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
 8003aa8:	e007      	b.n	8003aba <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	f043 0210 	orr.w	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003aba:	7ffb      	ldrb	r3, [r7, #31]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	2000002c 	.word	0x2000002c
 8003ac8:	053e2d63 	.word	0x053e2d63
 8003acc:	50040000 	.word	0x50040000
 8003ad0:	50040300 	.word	0x50040300
 8003ad4:	fff0c007 	.word	0xfff0c007

08003ad8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fe8e 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d14f      	bne.n	8003b90 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d101      	bne.n	8003afe <HAL_ADC_Start+0x26>
 8003afa:	2302      	movs	r3, #2
 8003afc:	e04b      	b.n	8003b96 <HAL_ADC_Start+0xbe>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fcc8 	bl	800449c <ADC_Enable>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d137      	bne.n	8003b86 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b36:	d106      	bne.n	8003b46 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3c:	f023 0206 	bic.w	r2, r3, #6
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	659a      	str	r2, [r3, #88]	; 0x58
 8003b44:	e002      	b.n	8003b4c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	221c      	movs	r2, #28
 8003b52:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fe2d 	bl	80037de <LL_ADC_REG_StartConversion>
 8003b84:	e006      	b.n	8003b94 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003b8e:	e001      	b.n	8003b94 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
 8003b92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d102      	bne.n	8003bb6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	e010      	b.n	8003bd8 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc8:	f043 0220 	orr.w	r2, r3, #32
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e06f      	b.n	8003cb4 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003bd8:	f7ff fc68 	bl	80034ac <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bde:	e021      	b.n	8003c24 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be6:	d01d      	beq.n	8003c24 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003be8:	f7ff fc60 	bl	80034ac <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d302      	bcc.n	8003bfe <HAL_ADC_PollForConversion+0x60>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d112      	bne.n	8003c24 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	4013      	ands	r3, r2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10b      	bne.n	8003c24 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	f043 0204 	orr.w	r2, r3, #4
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e047      	b.n	8003cb4 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0d6      	beq.n	8003be0 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff fcc7 	bl	80035d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01c      	beq.n	8003c88 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	7e5b      	ldrb	r3, [r3, #25]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d111      	bne.n	8003c88 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d105      	bne.n	8003c88 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	f043 0201 	orr.w	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d104      	bne.n	8003ca0 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2208      	movs	r2, #8
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	e008      	b.n	8003cb2 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	220c      	movs	r2, #12
 8003cb0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b0b6      	sub	sp, #216	; 0xd8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_ADC_ConfigChannel+0x22>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e3bb      	b.n	8004472 <HAL_ADC_ConfigChannel+0x79a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fd7d 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f040 83a0 	bne.w	8004454 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	2b05      	cmp	r3, #5
 8003d22:	d824      	bhi.n	8003d6e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	3b02      	subs	r3, #2
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d81b      	bhi.n	8003d66 <HAL_ADC_ConfigChannel+0x8e>
 8003d2e:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <HAL_ADC_ConfigChannel+0x5c>)
 8003d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d34:	08003d45 	.word	0x08003d45
 8003d38:	08003d4d 	.word	0x08003d4d
 8003d3c:	08003d55 	.word	0x08003d55
 8003d40:	08003d5d 	.word	0x08003d5d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003d44:	230c      	movs	r3, #12
 8003d46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d4a:	e010      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003d4c:	2312      	movs	r3, #18
 8003d4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d52:	e00c      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003d54:	2318      	movs	r3, #24
 8003d56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d5a:	e008      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d64:	e003      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003d66:	2306      	movs	r3, #6
 8003d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003d6c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003d7c:	f7ff fc3e 	bl	80035fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fd3e 	bl	8003806 <LL_ADC_REG_IsConversionOngoing>
 8003d8a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff fd4a 	bl	800382c <LL_ADC_INJ_IsConversionOngoing>
 8003d98:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f040 81a4 	bne.w	80040ee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 819f 	bne.w	80040ee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6819      	ldr	r1, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f7ff fc49 	bl	8003654 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	08db      	lsrs	r3, r3, #3
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d00a      	beq.n	8003dfa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6919      	ldr	r1, [r3, #16]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003df4:	f7ff fb9a 	bl	800352c <LL_ADC_SetOffset>
 8003df8:	e179      	b.n	80040ee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fbb7 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x14e>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2100      	movs	r1, #0
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fbac 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	0e9b      	lsrs	r3, r3, #26
 8003e20:	f003 021f 	and.w	r2, r3, #31
 8003e24:	e01e      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x18c>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fba1 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003e54:	2320      	movs	r3, #32
 8003e56:	e004      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003e58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e5c:	fab3 f383 	clz	r3, r3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d105      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x1a4>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	0e9b      	lsrs	r3, r3, #26
 8003e76:	f003 031f 	and.w	r3, r3, #31
 8003e7a:	e018      	b.n	8003eae <HAL_ADC_ConfigChannel+0x1d6>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003ea0:	2320      	movs	r3, #32
 8003ea2:	e004      	b.n	8003eae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003ea4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003ea8:	fab3 f383 	clz	r3, r3
 8003eac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d106      	bne.n	8003ec0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fb70 	bl	80035a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fb54 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <HAL_ADC_ConfigChannel+0x214>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2101      	movs	r1, #1
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fb49 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	0e9b      	lsrs	r3, r3, #26
 8003ee6:	f003 021f 	and.w	r2, r3, #31
 8003eea:	e01e      	b.n	8003f2a <HAL_ADC_ConfigChannel+0x252>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fb3e 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003f0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003f12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	e004      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8003f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d105      	bne.n	8003f42 <HAL_ADC_ConfigChannel+0x26a>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	0e9b      	lsrs	r3, r3, #26
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	e018      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x29c>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f4e:	fa93 f3a3 	rbit	r3, r3
 8003f52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003f5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8003f66:	2320      	movs	r3, #32
 8003f68:	e004      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8003f6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d106      	bne.n	8003f86 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fb0d 	bl	80035a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff faf1 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x2da>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2102      	movs	r1, #2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fae6 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	0e9b      	lsrs	r3, r3, #26
 8003fac:	f003 021f 	and.w	r2, r3, #31
 8003fb0:	e01e      	b.n	8003ff0 <HAL_ADC_ConfigChannel+0x318>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fadb 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fc8:	fa93 f3a3 	rbit	r3, r3
 8003fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003fe0:	2320      	movs	r3, #32
 8003fe2:	e004      	b.n	8003fee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d105      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x330>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	0e9b      	lsrs	r3, r3, #26
 8004002:	f003 031f 	and.w	r3, r3, #31
 8004006:	e014      	b.n	8004032 <HAL_ADC_ConfigChannel+0x35a>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004010:	fa93 f3a3 	rbit	r3, r3
 8004014:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004018:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800401c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004024:	2320      	movs	r3, #32
 8004026:	e004      	b.n	8004032 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004032:	429a      	cmp	r2, r3
 8004034:	d106      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	2102      	movs	r1, #2
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff faae 	bl	80035a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2103      	movs	r1, #3
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fa92 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8004050:	4603      	mov	r3, r0
 8004052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10a      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x398>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2103      	movs	r1, #3
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fa87 	bl	8003574 <LL_ADC_GetOffsetChannel>
 8004066:	4603      	mov	r3, r0
 8004068:	0e9b      	lsrs	r3, r3, #26
 800406a:	f003 021f 	and.w	r2, r3, #31
 800406e:	e017      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x3c8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2103      	movs	r1, #3
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fa7c 	bl	8003574 <LL_ADC_GetOffsetChannel>
 800407c:	4603      	mov	r3, r0
 800407e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004082:	fa93 f3a3 	rbit	r3, r3
 8004086:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800408c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004092:	2320      	movs	r3, #32
 8004094:	e003      	b.n	800409e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004098:	fab3 f383 	clz	r3, r3
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x3e0>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	e011      	b.n	80040dc <HAL_ADC_ConfigChannel+0x404>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80040c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80040ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80040d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040dc:	429a      	cmp	r2, r3
 80040de:	d106      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2103      	movs	r1, #3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff fa59 	bl	80035a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fb60 	bl	80037b8 <LL_ADC_IsEnabled>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f040 8140 	bne.w	8004380 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	6819      	ldr	r1, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	461a      	mov	r2, r3
 800410e:	f7ff facd 	bl	80036ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4a8f      	ldr	r2, [pc, #572]	; (8004354 <HAL_ADC_ConfigChannel+0x67c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	f040 8131 	bne.w	8004380 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10b      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x46e>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	0e9b      	lsrs	r3, r3, #26
 8004134:	3301      	adds	r3, #1
 8004136:	f003 031f 	and.w	r3, r3, #31
 800413a:	2b09      	cmp	r3, #9
 800413c:	bf94      	ite	ls
 800413e:	2301      	movls	r3, #1
 8004140:	2300      	movhi	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	e019      	b.n	800417a <HAL_ADC_ConfigChannel+0x4a2>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004156:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800415e:	2320      	movs	r3, #32
 8004160:	e003      	b.n	800416a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	b2db      	uxtb	r3, r3
 800416a:	3301      	adds	r3, #1
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	2b09      	cmp	r3, #9
 8004172:	bf94      	ite	ls
 8004174:	2301      	movls	r3, #1
 8004176:	2300      	movhi	r3, #0
 8004178:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800417a:	2b00      	cmp	r3, #0
 800417c:	d079      	beq.n	8004272 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <HAL_ADC_ConfigChannel+0x4c2>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	0e9b      	lsrs	r3, r3, #26
 8004190:	3301      	adds	r3, #1
 8004192:	069b      	lsls	r3, r3, #26
 8004194:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004198:	e015      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x4ee>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80041a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80041ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80041b2:	2320      	movs	r3, #32
 80041b4:	e003      	b.n	80041be <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80041b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	3301      	adds	r3, #1
 80041c0:	069b      	lsls	r3, r3, #26
 80041c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x50e>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	0e9b      	lsrs	r3, r3, #26
 80041d8:	3301      	adds	r3, #1
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2101      	movs	r1, #1
 80041e0:	fa01 f303 	lsl.w	r3, r1, r3
 80041e4:	e017      	b.n	8004216 <HAL_ADC_ConfigChannel+0x53e>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ee:	fa93 f3a3 	rbit	r3, r3
 80041f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80041f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80041f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d101      	bne.n	8004202 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80041fe:	2320      	movs	r3, #32
 8004200:	e003      	b.n	800420a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004204:	fab3 f383 	clz	r3, r3
 8004208:	b2db      	uxtb	r3, r3
 800420a:	3301      	adds	r3, #1
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2101      	movs	r1, #1
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	ea42 0103 	orr.w	r1, r2, r3
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_ADC_ConfigChannel+0x564>
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	0e9b      	lsrs	r3, r3, #26
 800422c:	3301      	adds	r3, #1
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	051b      	lsls	r3, r3, #20
 800423a:	e018      	b.n	800426e <HAL_ADC_ConfigChannel+0x596>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004254:	2320      	movs	r3, #32
 8004256:	e003      	b.n	8004260 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3301      	adds	r3, #1
 8004262:	f003 021f 	and.w	r2, r3, #31
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800426e:	430b      	orrs	r3, r1
 8004270:	e081      	b.n	8004376 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427a:	2b00      	cmp	r3, #0
 800427c:	d107      	bne.n	800428e <HAL_ADC_ConfigChannel+0x5b6>
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	0e9b      	lsrs	r3, r3, #26
 8004284:	3301      	adds	r3, #1
 8004286:	069b      	lsls	r3, r3, #26
 8004288:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800428c:	e015      	b.n	80042ba <HAL_ADC_ConfigChannel+0x5e2>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	fa93 f3a3 	rbit	r3, r3
 800429a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80042a6:	2320      	movs	r3, #32
 80042a8:	e003      	b.n	80042b2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	fab3 f383 	clz	r3, r3
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	3301      	adds	r3, #1
 80042b4:	069b      	lsls	r3, r3, #26
 80042b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d109      	bne.n	80042da <HAL_ADC_ConfigChannel+0x602>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	0e9b      	lsrs	r3, r3, #26
 80042cc:	3301      	adds	r3, #1
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	2101      	movs	r1, #1
 80042d4:	fa01 f303 	lsl.w	r3, r1, r3
 80042d8:	e017      	b.n	800430a <HAL_ADC_ConfigChannel+0x632>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	61bb      	str	r3, [r7, #24]
  return result;
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80042f2:	2320      	movs	r3, #32
 80042f4:	e003      	b.n	80042fe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80042f6:	6a3b      	ldr	r3, [r7, #32]
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	3301      	adds	r3, #1
 8004300:	f003 031f 	and.w	r3, r3, #31
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	ea42 0103 	orr.w	r1, r2, r3
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10d      	bne.n	8004336 <HAL_ADC_ConfigChannel+0x65e>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	0e9b      	lsrs	r3, r3, #26
 8004320:	3301      	adds	r3, #1
 8004322:	f003 021f 	and.w	r2, r3, #31
 8004326:	4613      	mov	r3, r2
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	4413      	add	r3, r2
 800432c:	3b1e      	subs	r3, #30
 800432e:	051b      	lsls	r3, r3, #20
 8004330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004334:	e01e      	b.n	8004374 <HAL_ADC_ConfigChannel+0x69c>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	fa93 f3a3 	rbit	r3, r3
 8004342:	60fb      	str	r3, [r7, #12]
  return result;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800434e:	2320      	movs	r3, #32
 8004350:	e006      	b.n	8004360 <HAL_ADC_ConfigChannel+0x688>
 8004352:	bf00      	nop
 8004354:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	fab3 f383 	clz	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	3301      	adds	r3, #1
 8004362:	f003 021f 	and.w	r2, r3, #31
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	3b1e      	subs	r3, #30
 800436e:	051b      	lsls	r3, r3, #20
 8004370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004374:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800437a:	4619      	mov	r1, r3
 800437c:	f7ff f96a 	bl	8003654 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	4b3d      	ldr	r3, [pc, #244]	; (800447c <HAL_ADC_ConfigChannel+0x7a4>)
 8004386:	4013      	ands	r3, r2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d06c      	beq.n	8004466 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800438c:	483c      	ldr	r0, [pc, #240]	; (8004480 <HAL_ADC_ConfigChannel+0x7a8>)
 800438e:	f7ff f8bf 	bl	8003510 <LL_ADC_GetCommonPathInternalCh>
 8004392:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a3a      	ldr	r2, [pc, #232]	; (8004484 <HAL_ADC_ConfigChannel+0x7ac>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d127      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d121      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a35      	ldr	r2, [pc, #212]	; (8004488 <HAL_ADC_ConfigChannel+0x7b0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d157      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043be:	4619      	mov	r1, r3
 80043c0:	482f      	ldr	r0, [pc, #188]	; (8004480 <HAL_ADC_ConfigChannel+0x7a8>)
 80043c2:	f7ff f892 	bl	80034ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_ADC_ConfigChannel+0x7b4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	4a30      	ldr	r2, [pc, #192]	; (8004490 <HAL_ADC_ConfigChannel+0x7b8>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	099b      	lsrs	r3, r3, #6
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80043e0:	e002      	b.n	80043e8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f9      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043ee:	e03a      	b.n	8004466 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a27      	ldr	r2, [pc, #156]	; (8004494 <HAL_ADC_ConfigChannel+0x7bc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d113      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10d      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <HAL_ADC_ConfigChannel+0x7b0>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d12a      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004410:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004414:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004418:	4619      	mov	r1, r3
 800441a:	4819      	ldr	r0, [pc, #100]	; (8004480 <HAL_ADC_ConfigChannel+0x7a8>)
 800441c:	f7ff f865 	bl	80034ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004420:	e021      	b.n	8004466 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1c      	ldr	r2, [pc, #112]	; (8004498 <HAL_ADC_ConfigChannel+0x7c0>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d11c      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800442c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d116      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a12      	ldr	r2, [pc, #72]	; (8004488 <HAL_ADC_ConfigChannel+0x7b0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d111      	bne.n	8004466 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004442:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004446:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800444a:	4619      	mov	r1, r3
 800444c:	480c      	ldr	r0, [pc, #48]	; (8004480 <HAL_ADC_ConfigChannel+0x7a8>)
 800444e:	f7ff f84c 	bl	80034ea <LL_ADC_SetCommonPathInternalCh>
 8004452:	e008      	b.n	8004466 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	f043 0220 	orr.w	r2, r3, #32
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800446e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004472:	4618      	mov	r0, r3
 8004474:	37d8      	adds	r7, #216	; 0xd8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	80080000 	.word	0x80080000
 8004480:	50040300 	.word	0x50040300
 8004484:	c7520000 	.word	0xc7520000
 8004488:	50040000 	.word	0x50040000
 800448c:	2000002c 	.word	0x2000002c
 8004490:	053e2d63 	.word	0x053e2d63
 8004494:	cb840000 	.word	0xcb840000
 8004498:	80000001 	.word	0x80000001

0800449c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff f983 	bl	80037b8 <LL_ADC_IsEnabled>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d169      	bne.n	800458c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	4b36      	ldr	r3, [pc, #216]	; (8004598 <ADC_Enable+0xfc>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	f043 0210 	orr.w	r2, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d6:	f043 0201 	orr.w	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e055      	b.n	800458e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff f952 	bl	8003790 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044ec:	482b      	ldr	r0, [pc, #172]	; (800459c <ADC_Enable+0x100>)
 80044ee:	f7ff f80f 	bl	8003510 <LL_ADC_GetCommonPathInternalCh>
 80044f2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80044f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d013      	beq.n	8004524 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044fc:	4b28      	ldr	r3, [pc, #160]	; (80045a0 <ADC_Enable+0x104>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	099b      	lsrs	r3, r3, #6
 8004502:	4a28      	ldr	r2, [pc, #160]	; (80045a4 <ADC_Enable+0x108>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	099b      	lsrs	r3, r3, #6
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	4613      	mov	r3, r2
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004516:	e002      	b.n	800451e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	3b01      	subs	r3, #1
 800451c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f9      	bne.n	8004518 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004524:	f7fe ffc2 	bl	80034ac <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800452a:	e028      	b.n	800457e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff f941 	bl	80037b8 <LL_ADC_IsEnabled>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff f925 	bl	8003790 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004546:	f7fe ffb1 	bl	80034ac <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d914      	bls.n	800457e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d00d      	beq.n	800457e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f043 0210 	orr.w	r2, r3, #16
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	f043 0201 	orr.w	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e007      	b.n	800458e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d1cf      	bne.n	800452c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	8000003f 	.word	0x8000003f
 800459c:	50040300 	.word	0x50040300
 80045a0:	2000002c 	.word	0x2000002c
 80045a4:	053e2d63 	.word	0x053e2d63

080045a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b8:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045c4:	4013      	ands	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045da:	4a04      	ldr	r2, [pc, #16]	; (80045ec <__NVIC_SetPriorityGrouping+0x44>)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	60d3      	str	r3, [r2, #12]
}
 80045e0:	bf00      	nop
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	e000ed00 	.word	0xe000ed00

080045f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <__NVIC_GetPriorityGrouping+0x18>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	0a1b      	lsrs	r3, r3, #8
 80045fa:	f003 0307 	and.w	r3, r3, #7
}
 80045fe:	4618      	mov	r0, r3
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000ed00 	.word	0xe000ed00

0800460c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	2b00      	cmp	r3, #0
 800461c:	db0b      	blt.n	8004636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	f003 021f 	and.w	r2, r3, #31
 8004624:	4907      	ldr	r1, [pc, #28]	; (8004644 <__NVIC_EnableIRQ+0x38>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	2001      	movs	r0, #1
 800462e:	fa00 f202 	lsl.w	r2, r0, r2
 8004632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	e000e100 	.word	0xe000e100

08004648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004658:	2b00      	cmp	r3, #0
 800465a:	db0a      	blt.n	8004672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	b2da      	uxtb	r2, r3
 8004660:	490c      	ldr	r1, [pc, #48]	; (8004694 <__NVIC_SetPriority+0x4c>)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	0112      	lsls	r2, r2, #4
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	440b      	add	r3, r1
 800466c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004670:	e00a      	b.n	8004688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	4908      	ldr	r1, [pc, #32]	; (8004698 <__NVIC_SetPriority+0x50>)
 8004678:	79fb      	ldrb	r3, [r7, #7]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	3b04      	subs	r3, #4
 8004680:	0112      	lsls	r2, r2, #4
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	440b      	add	r3, r1
 8004686:	761a      	strb	r2, [r3, #24]
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	e000e100 	.word	0xe000e100
 8004698:	e000ed00 	.word	0xe000ed00

0800469c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800469c:	b480      	push	{r7}
 800469e:	b089      	sub	sp, #36	; 0x24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f1c3 0307 	rsb	r3, r3, #7
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	bf28      	it	cs
 80046ba:	2304      	movcs	r3, #4
 80046bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2b06      	cmp	r3, #6
 80046c4:	d902      	bls.n	80046cc <NVIC_EncodePriority+0x30>
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3b03      	subs	r3, #3
 80046ca:	e000      	b.n	80046ce <NVIC_EncodePriority+0x32>
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43da      	mvns	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	401a      	ands	r2, r3
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	fa01 f303 	lsl.w	r3, r1, r3
 80046ee:	43d9      	mvns	r1, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f4:	4313      	orrs	r3, r2
         );
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3724      	adds	r7, #36	; 0x24
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3b01      	subs	r3, #1
 8004710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004714:	d301      	bcc.n	800471a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004716:	2301      	movs	r3, #1
 8004718:	e00f      	b.n	800473a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800471a:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <SysTick_Config+0x40>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3b01      	subs	r3, #1
 8004720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004722:	210f      	movs	r1, #15
 8004724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004728:	f7ff ff8e 	bl	8004648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <SysTick_Config+0x40>)
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004732:	4b04      	ldr	r3, [pc, #16]	; (8004744 <SysTick_Config+0x40>)
 8004734:	2207      	movs	r2, #7
 8004736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	e000e010 	.word	0xe000e010

08004748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff ff29 	bl	80045a8 <__NVIC_SetPriorityGrouping>
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b086      	sub	sp, #24
 8004762:	af00      	add	r7, sp, #0
 8004764:	4603      	mov	r3, r0
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004770:	f7ff ff3e 	bl	80045f0 <__NVIC_GetPriorityGrouping>
 8004774:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	6978      	ldr	r0, [r7, #20]
 800477c:	f7ff ff8e 	bl	800469c <NVIC_EncodePriority>
 8004780:	4602      	mov	r2, r0
 8004782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff ff5d 	bl	8004648 <__NVIC_SetPriority>
}
 800478e:	bf00      	nop
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	4603      	mov	r3, r0
 800479e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff ff31 	bl	800460c <__NVIC_EnableIRQ>
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff ffa2 	bl	8004704 <SysTick_Config>
 80047c0:	4603      	mov	r3, r0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b086      	sub	sp, #24
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_DMA_Start_IT+0x20>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e04b      	b.n	8004882 <HAL_DMA_Start_IT+0xb8>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d13a      	bne.n	8004874 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2202      	movs	r2, #2
 8004802:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0201 	bic.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f831 	bl	800488a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 020e 	orr.w	r2, r2, #14
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e00f      	b.n	8004862 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0204 	bic.w	r2, r2, #4
 8004850:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 020a 	orr.w	r2, r2, #10
 8004860:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f042 0201 	orr.w	r2, r2, #1
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e005      	b.n	8004880 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800487c:	2302      	movs	r3, #2
 800487e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004880:	7dfb      	ldrb	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	60f8      	str	r0, [r7, #12]
 8004892:	60b9      	str	r1, [r7, #8]
 8004894:	607a      	str	r2, [r7, #4]
 8004896:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	f003 021c 	and.w	r2, r3, #28
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	2101      	movs	r1, #1
 80048a6:	fa01 f202 	lsl.w	r2, r1, r2
 80048aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b10      	cmp	r3, #16
 80048ba:	d108      	bne.n	80048ce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048cc:	e007      	b.n	80048de <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	60da      	str	r2, [r3, #12]
}
 80048de:	bf00      	nop
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
	...

080048ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048fa:	e148      	b.n	8004b8e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2101      	movs	r1, #1
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	4013      	ands	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 813a 	beq.w	8004b88 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	2b01      	cmp	r3, #1
 800491e:	d005      	beq.n	800492c <HAL_GPIO_Init+0x40>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d130      	bne.n	800498e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	2203      	movs	r2, #3
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	43db      	mvns	r3, r3
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4013      	ands	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004962:	2201      	movs	r2, #1
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	091b      	lsrs	r3, r3, #4
 8004978:	f003 0201 	and.w	r2, r3, #1
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b03      	cmp	r3, #3
 8004998:	d017      	beq.n	80049ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2203      	movs	r2, #3
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43db      	mvns	r3, r3
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4013      	ands	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	005b      	lsls	r3, r3, #1
 80049ba:	fa02 f303 	lsl.w	r3, r2, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d123      	bne.n	8004a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	08da      	lsrs	r2, r3, #3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3208      	adds	r2, #8
 80049de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	220f      	movs	r2, #15
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43db      	mvns	r3, r3
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4013      	ands	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	08da      	lsrs	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3208      	adds	r2, #8
 8004a18:	6939      	ldr	r1, [r7, #16]
 8004a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	2203      	movs	r2, #3
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 0203 	and.w	r2, r3, #3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8094 	beq.w	8004b88 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a60:	4b52      	ldr	r3, [pc, #328]	; (8004bac <HAL_GPIO_Init+0x2c0>)
 8004a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a64:	4a51      	ldr	r2, [pc, #324]	; (8004bac <HAL_GPIO_Init+0x2c0>)
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	6613      	str	r3, [r2, #96]	; 0x60
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_GPIO_Init+0x2c0>)
 8004a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	60bb      	str	r3, [r7, #8]
 8004a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a78:	4a4d      	ldr	r2, [pc, #308]	; (8004bb0 <HAL_GPIO_Init+0x2c4>)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	089b      	lsrs	r3, r3, #2
 8004a7e:	3302      	adds	r3, #2
 8004a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	220f      	movs	r2, #15
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43db      	mvns	r3, r3
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004aa2:	d00d      	beq.n	8004ac0 <HAL_GPIO_Init+0x1d4>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a43      	ldr	r2, [pc, #268]	; (8004bb4 <HAL_GPIO_Init+0x2c8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d007      	beq.n	8004abc <HAL_GPIO_Init+0x1d0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a42      	ldr	r2, [pc, #264]	; (8004bb8 <HAL_GPIO_Init+0x2cc>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_GPIO_Init+0x1cc>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e004      	b.n	8004ac2 <HAL_GPIO_Init+0x1d6>
 8004ab8:	2307      	movs	r3, #7
 8004aba:	e002      	b.n	8004ac2 <HAL_GPIO_Init+0x1d6>
 8004abc:	2301      	movs	r3, #1
 8004abe:	e000      	b.n	8004ac2 <HAL_GPIO_Init+0x1d6>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	f002 0203 	and.w	r2, r2, #3
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	4093      	lsls	r3, r2
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ad2:	4937      	ldr	r1, [pc, #220]	; (8004bb0 <HAL_GPIO_Init+0x2c4>)
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	089b      	lsrs	r3, r3, #2
 8004ad8:	3302      	adds	r3, #2
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ae0:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_GPIO_Init+0x2d0>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4013      	ands	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d003      	beq.n	8004b04 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b04:	4a2d      	ldr	r2, [pc, #180]	; (8004bbc <HAL_GPIO_Init+0x2d0>)
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b0a:	4b2c      	ldr	r3, [pc, #176]	; (8004bbc <HAL_GPIO_Init+0x2d0>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	43db      	mvns	r3, r3
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4013      	ands	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004b26:	693a      	ldr	r2, [r7, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b2e:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <HAL_GPIO_Init+0x2d0>)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b34:	4b21      	ldr	r3, [pc, #132]	; (8004bbc <HAL_GPIO_Init+0x2d0>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	4013      	ands	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_GPIO_Init+0x2d0>)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004b5e:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <HAL_GPIO_Init+0x2d0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	43db      	mvns	r3, r3
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b82:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <HAL_GPIO_Init+0x2d0>)
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f47f aeaf 	bne.w	80048fc <HAL_GPIO_Init+0x10>
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40021000 	.word	0x40021000
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	48000400 	.word	0x48000400
 8004bb8:	48000800 	.word	0x48000800
 8004bbc:	40010400 	.word	0x40010400

08004bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	807b      	strh	r3, [r7, #2]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bd0:	787b      	ldrb	r3, [r7, #1]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bd6:	887a      	ldrh	r2, [r7, #2]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bdc:	e002      	b.n	8004be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bde:	887a      	ldrh	r2, [r7, #2]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e08d      	b.n	8004d1e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d106      	bne.n	8004c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7fe f890 	bl	8002d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2224      	movs	r2, #36	; 0x24
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0201 	bic.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d107      	bne.n	8004c6a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	e006      	b.n	8004c78 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d108      	bne.n	8004c92 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c8e:	605a      	str	r2, [r3, #4]
 8004c90:	e007      	b.n	8004ca2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6812      	ldr	r2, [r2, #0]
 8004cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69d9      	ldr	r1, [r3, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1a      	ldr	r2, [r3, #32]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2220      	movs	r2, #32
 8004d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	607a      	str	r2, [r7, #4]
 8004d32:	461a      	mov	r2, r3
 8004d34:	460b      	mov	r3, r1
 8004d36:	817b      	strh	r3, [r7, #10]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	f040 80fd 	bne.w	8004f44 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d101      	bne.n	8004d58 <HAL_I2C_Master_Transmit+0x30>
 8004d54:	2302      	movs	r3, #2
 8004d56:	e0f6      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x21e>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d60:	f7fe fba4 	bl	80034ac <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	2319      	movs	r3, #25
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 fa0a 	bl	800518c <I2C_WaitOnFlagUntilTimeout>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d001      	beq.n	8004d82 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0e1      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2221      	movs	r2, #33	; 0x21
 8004d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	893a      	ldrh	r2, [r7, #8]
 8004da2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2bff      	cmp	r3, #255	; 0xff
 8004db2:	d906      	bls.n	8004dc2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	22ff      	movs	r2, #255	; 0xff
 8004db8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e007      	b.n	8004dd2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004dd0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d024      	beq.n	8004e24 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	781a      	ldrb	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	3301      	adds	r3, #1
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	8979      	ldrh	r1, [r7, #10]
 8004e16:	4b4e      	ldr	r3, [pc, #312]	; (8004f50 <HAL_I2C_Master_Transmit+0x228>)
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 fbf1 	bl	8005604 <I2C_TransferConfig>
 8004e22:	e066      	b.n	8004ef2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	8979      	ldrh	r1, [r7, #10]
 8004e2c:	4b48      	ldr	r3, [pc, #288]	; (8004f50 <HAL_I2C_Master_Transmit+0x228>)
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fbe6 	bl	8005604 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004e38:	e05b      	b.n	8004ef2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	6a39      	ldr	r1, [r7, #32]
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f000 f9f3 	bl	800522a <I2C_WaitOnTXISFlagUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d001      	beq.n	8004e4e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e07b      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	781a      	ldrb	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29a      	uxth	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d034      	beq.n	8004ef2 <HAL_I2C_Master_Transmit+0x1ca>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d130      	bne.n	8004ef2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	2200      	movs	r2, #0
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f976 	bl	800518c <I2C_WaitOnFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e04d      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2bff      	cmp	r3, #255	; 0xff
 8004eb2:	d90e      	bls.n	8004ed2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	22ff      	movs	r2, #255	; 0xff
 8004eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	8979      	ldrh	r1, [r7, #10]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fb9a 	bl	8005604 <I2C_TransferConfig>
 8004ed0:	e00f      	b.n	8004ef2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	8979      	ldrh	r1, [r7, #10]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 fb89 	bl	8005604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d19e      	bne.n	8004e3a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	6a39      	ldr	r1, [r7, #32]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f9d9 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e01a      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2220      	movs	r2, #32
 8004f16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b0c      	ldr	r3, [pc, #48]	; (8004f54 <HAL_I2C_Master_Transmit+0x22c>)
 8004f24:	400b      	ands	r3, r1
 8004f26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3718      	adds	r7, #24
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	80002000 	.word	0x80002000
 8004f54:	fe00e800 	.word	0xfe00e800

08004f58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	461a      	mov	r2, r3
 8004f64:	460b      	mov	r3, r1
 8004f66:	817b      	strh	r3, [r7, #10]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b20      	cmp	r3, #32
 8004f76:	f040 80db 	bne.w	8005130 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_I2C_Master_Receive+0x30>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e0d4      	b.n	8005132 <HAL_I2C_Master_Receive+0x1da>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f90:	f7fe fa8c 	bl	80034ac <HAL_GetTick>
 8004f94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	2319      	movs	r3, #25
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f8f2 	bl	800518c <I2C_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e0bf      	b.n	8005132 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2222      	movs	r2, #34	; 0x22
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2210      	movs	r2, #16
 8004fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	893a      	ldrh	r2, [r7, #8]
 8004fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2bff      	cmp	r3, #255	; 0xff
 8004fe2:	d90e      	bls.n	8005002 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	22ff      	movs	r2, #255	; 0xff
 8004fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	b2da      	uxtb	r2, r3
 8004ff0:	8979      	ldrh	r1, [r7, #10]
 8004ff2:	4b52      	ldr	r3, [pc, #328]	; (800513c <HAL_I2C_Master_Receive+0x1e4>)
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f000 fb02 	bl	8005604 <I2C_TransferConfig>
 8005000:	e06d      	b.n	80050de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005010:	b2da      	uxtb	r2, r3
 8005012:	8979      	ldrh	r1, [r7, #10]
 8005014:	4b49      	ldr	r3, [pc, #292]	; (800513c <HAL_I2C_Master_Receive+0x1e4>)
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 faf1 	bl	8005604 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005022:	e05c      	b.n	80050de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	6a39      	ldr	r1, [r7, #32]
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f989 	bl	8005340 <I2C_WaitOnRXNEFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e07c      	b.n	8005132 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005054:	3b01      	subs	r3, #1
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005060:	b29b      	uxth	r3, r3
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d034      	beq.n	80050de <HAL_I2C_Master_Receive+0x186>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	2b00      	cmp	r3, #0
 800507a:	d130      	bne.n	80050de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	6a3b      	ldr	r3, [r7, #32]
 8005082:	2200      	movs	r2, #0
 8005084:	2180      	movs	r1, #128	; 0x80
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f880 	bl	800518c <I2C_WaitOnFlagUntilTimeout>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e04d      	b.n	8005132 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	2bff      	cmp	r3, #255	; 0xff
 800509e:	d90e      	bls.n	80050be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	22ff      	movs	r2, #255	; 0xff
 80050a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	8979      	ldrh	r1, [r7, #10]
 80050ae:	2300      	movs	r3, #0
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 faa4 	bl	8005604 <I2C_TransferConfig>
 80050bc:	e00f      	b.n	80050de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050cc:	b2da      	uxtb	r2, r3
 80050ce:	8979      	ldrh	r1, [r7, #10]
 80050d0:	2300      	movs	r3, #0
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f000 fa93 	bl	8005604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d19d      	bne.n	8005024 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	6a39      	ldr	r1, [r7, #32]
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 f8e3 	bl	80052b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e01a      	b.n	8005132 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2220      	movs	r2, #32
 8005102:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <HAL_I2C_Master_Receive+0x1e8>)
 8005110:	400b      	ands	r3, r1
 8005112:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	e000      	b.n	8005132 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005130:	2302      	movs	r3, #2
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	3718      	adds	r7, #24
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	80002400 	.word	0x80002400
 8005140:	fe00e800 	.word	0xfe00e800

08005144 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005144:	b480      	push	{r7}
 8005146:	b083      	sub	sp, #12
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b02      	cmp	r3, #2
 8005158:	d103      	bne.n	8005162 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2200      	movs	r2, #0
 8005160:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b01      	cmp	r3, #1
 800516e:	d007      	beq.n	8005180 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	619a      	str	r2, [r3, #24]
  }
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800519c:	e031      	b.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051a4:	d02d      	beq.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a6:	f7fe f981 	bl	80034ac <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d122      	bne.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d113      	bne.n	8005202 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051de:	f043 0220 	orr.w	r2, r3, #32
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e00f      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	429a      	cmp	r2, r3
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0be      	beq.n	800519e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005236:	e033      	b.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f901 	bl	8005444 <I2C_IsErrorOccurred>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e031      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005252:	d025      	beq.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005254:	f7fe f92a 	bl	80034ac <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	d302      	bcc.n	800526a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11a      	bne.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b02      	cmp	r3, #2
 8005276:	d013      	beq.n	80052a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	f043 0220 	orr.w	r2, r3, #32
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e007      	b.n	80052b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d1c4      	bne.n	8005238 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c4:	e02f      	b.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f8ba 	bl	8005444 <I2C_IsErrorOccurred>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e02d      	b.n	8005336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052da:	f7fe f8e7 	bl	80034ac <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d302      	bcc.n	80052f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11a      	bne.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d013      	beq.n	8005326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	f043 0220 	orr.w	r2, r3, #32
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2220      	movs	r2, #32
 800530e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e007      	b.n	8005336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	f003 0320 	and.w	r3, r3, #32
 8005330:	2b20      	cmp	r3, #32
 8005332:	d1c8      	bne.n	80052c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800534c:	e06b      	b.n	8005426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	68b9      	ldr	r1, [r7, #8]
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f876 	bl	8005444 <I2C_IsErrorOccurred>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e069      	b.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b20      	cmp	r3, #32
 800536e:	d138      	bne.n	80053e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	2b04      	cmp	r3, #4
 800537c:	d105      	bne.n	800538a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005386:	2300      	movs	r3, #0
 8005388:	e055      	b.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b10      	cmp	r3, #16
 8005396:	d107      	bne.n	80053a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2210      	movs	r2, #16
 800539e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2204      	movs	r2, #4
 80053a4:	645a      	str	r2, [r3, #68]	; 0x44
 80053a6:	e002      	b.n	80053ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2220      	movs	r2, #32
 80053b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6859      	ldr	r1, [r3, #4]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2220      	movs	r2, #32
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e029      	b.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053e2:	f7fe f863 	bl	80034ac <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d302      	bcc.n	80053f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d116      	bne.n	8005426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b04      	cmp	r3, #4
 8005404:	d00f      	beq.n	8005426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2220      	movs	r2, #32
 8005416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e007      	b.n	8005436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b04      	cmp	r3, #4
 8005432:	d18c      	bne.n	800534e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	fe00e800 	.word	0xfe00e800

08005444 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b08a      	sub	sp, #40	; 0x28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b00      	cmp	r3, #0
 800546e:	d068      	beq.n	8005542 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2210      	movs	r2, #16
 8005476:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005478:	e049      	b.n	800550e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005480:	d045      	beq.n	800550e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fe f813 	bl	80034ac <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	d302      	bcc.n	8005498 <I2C_IsErrorOccurred+0x54>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d13a      	bne.n	800550e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ba:	d121      	bne.n	8005500 <I2C_IsErrorOccurred+0xbc>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054c2:	d01d      	beq.n	8005500 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d01a      	beq.n	8005500 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054da:	f7fd ffe7 	bl	80034ac <HAL_GetTick>
 80054de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e0:	e00e      	b.n	8005500 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054e2:	f7fd ffe3 	bl	80034ac <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b19      	cmp	r3, #25
 80054ee:	d907      	bls.n	8005500 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	f043 0320 	orr.w	r3, r3, #32
 80054f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80054fe:	e006      	b.n	800550e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b20      	cmp	r3, #32
 800550c:	d1e9      	bne.n	80054e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b20      	cmp	r3, #32
 800551a:	d003      	beq.n	8005524 <I2C_IsErrorOccurred+0xe0>
 800551c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0aa      	beq.n	800547a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005528:	2b00      	cmp	r3, #0
 800552a:	d103      	bne.n	8005534 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2220      	movs	r2, #32
 8005532:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	f043 0304 	orr.w	r3, r3, #4
 800553a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00b      	beq.n	800556c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005564:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	f043 0308 	orr.w	r3, r3, #8
 800557c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005586:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	f043 0302 	orr.w	r3, r3, #2
 800559e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80055b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01c      	beq.n	80055f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff fdc3 	bl	8005144 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <I2C_IsErrorOccurred+0x1bc>)
 80055ca:	400b      	ands	r3, r1
 80055cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80055f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3728      	adds	r7, #40	; 0x28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	fe00e800 	.word	0xfe00e800

08005604 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	817b      	strh	r3, [r7, #10]
 8005612:	4613      	mov	r3, r2
 8005614:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800561c:	7a7b      	ldrb	r3, [r7, #9]
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005624:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	4313      	orrs	r3, r2
 800562e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005632:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	0d5b      	lsrs	r3, r3, #21
 800563e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005642:	4b08      	ldr	r3, [pc, #32]	; (8005664 <I2C_TransferConfig+0x60>)
 8005644:	430b      	orrs	r3, r1
 8005646:	43db      	mvns	r3, r3
 8005648:	ea02 0103 	and.w	r1, r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	03ff63ff 	.word	0x03ff63ff

08005668 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b20      	cmp	r3, #32
 800567c:	d138      	bne.n	80056f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005688:	2302      	movs	r3, #2
 800568a:	e032      	b.n	80056f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2224      	movs	r2, #36	; 0x24
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6819      	ldr	r1, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b20      	cmp	r3, #32
 8005712:	d139      	bne.n	8005788 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800571e:	2302      	movs	r3, #2
 8005720:	e033      	b.n	800578a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2224      	movs	r2, #36	; 0x24
 800572e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005750:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	e000      	b.n	800578a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
  }
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800579c:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40007000 	.word	0x40007000

080057b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c2:	d130      	bne.n	8005826 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80057c4:	4b23      	ldr	r3, [pc, #140]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d0:	d038      	beq.n	8005844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80057d2:	4b20      	ldr	r3, [pc, #128]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057da:	4a1e      	ldr	r2, [pc, #120]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80057e2:	4b1d      	ldr	r3, [pc, #116]	; (8005858 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2232      	movs	r2, #50	; 0x32
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	4a1b      	ldr	r2, [pc, #108]	; (800585c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	0c9b      	lsrs	r3, r3, #18
 80057f4:	3301      	adds	r3, #1
 80057f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80057f8:	e002      	b.n	8005800 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005800:	4b14      	ldr	r3, [pc, #80]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580c:	d102      	bne.n	8005814 <HAL_PWREx_ControlVoltageScaling+0x60>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f2      	bne.n	80057fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005814:	4b0f      	ldr	r3, [pc, #60]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005820:	d110      	bne.n	8005844 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e00f      	b.n	8005846 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005826:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800582e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005832:	d007      	beq.n	8005844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005834:	4b07      	ldr	r3, [pc, #28]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800583c:	4a05      	ldr	r2, [pc, #20]	; (8005854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800583e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005842:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40007000 	.word	0x40007000
 8005858:	2000002c 	.word	0x2000002c
 800585c:	431bde83 	.word	0x431bde83

08005860 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f000 bc02 	b.w	8006078 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005874:	4b96      	ldr	r3, [pc, #600]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800587e:	4b94      	ldr	r3, [pc, #592]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0303 	and.w	r3, r3, #3
 8005886:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80e4 	beq.w	8005a5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <HAL_RCC_OscConfig+0x4c>
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	f040 808b 	bne.w	80059ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	f040 8087 	bne.w	80059ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058ac:	4b88      	ldr	r3, [pc, #544]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_OscConfig+0x64>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e3d9      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1a      	ldr	r2, [r3, #32]
 80058c8:	4b81      	ldr	r3, [pc, #516]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0308 	and.w	r3, r3, #8
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <HAL_RCC_OscConfig+0x7e>
 80058d4:	4b7e      	ldr	r3, [pc, #504]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058dc:	e005      	b.n	80058ea <HAL_RCC_OscConfig+0x8a>
 80058de:	4b7c      	ldr	r3, [pc, #496]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80058e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058e4:	091b      	lsrs	r3, r3, #4
 80058e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d223      	bcs.n	8005936 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 fd8c 	bl	8006410 <RCC_SetFlashLatencyFromMSIRange>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d001      	beq.n	8005902 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e3ba      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005902:	4b73      	ldr	r3, [pc, #460]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a72      	ldr	r2, [pc, #456]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005908:	f043 0308 	orr.w	r3, r3, #8
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	4b70      	ldr	r3, [pc, #448]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	496d      	ldr	r1, [pc, #436]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 800591c:	4313      	orrs	r3, r2
 800591e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005920:	4b6b      	ldr	r3, [pc, #428]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	021b      	lsls	r3, r3, #8
 800592e:	4968      	ldr	r1, [pc, #416]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005930:	4313      	orrs	r3, r2
 8005932:	604b      	str	r3, [r1, #4]
 8005934:	e025      	b.n	8005982 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005936:	4b66      	ldr	r3, [pc, #408]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a65      	ldr	r2, [pc, #404]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 800593c:	f043 0308 	orr.w	r3, r3, #8
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	4b63      	ldr	r3, [pc, #396]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	4960      	ldr	r1, [pc, #384]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005950:	4313      	orrs	r3, r2
 8005952:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005954:	4b5e      	ldr	r3, [pc, #376]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	021b      	lsls	r3, r3, #8
 8005962:	495b      	ldr	r1, [pc, #364]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005964:	4313      	orrs	r3, r2
 8005966:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fd4c 	bl	8006410 <RCC_SetFlashLatencyFromMSIRange>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e37a      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005982:	f000 fc81 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 8005986:	4602      	mov	r2, r0
 8005988:	4b51      	ldr	r3, [pc, #324]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	091b      	lsrs	r3, r3, #4
 800598e:	f003 030f 	and.w	r3, r3, #15
 8005992:	4950      	ldr	r1, [pc, #320]	; (8005ad4 <HAL_RCC_OscConfig+0x274>)
 8005994:	5ccb      	ldrb	r3, [r1, r3]
 8005996:	f003 031f 	and.w	r3, r3, #31
 800599a:	fa22 f303 	lsr.w	r3, r2, r3
 800599e:	4a4e      	ldr	r2, [pc, #312]	; (8005ad8 <HAL_RCC_OscConfig+0x278>)
 80059a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80059a2:	4b4e      	ldr	r3, [pc, #312]	; (8005adc <HAL_RCC_OscConfig+0x27c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fd fd30 	bl	800340c <HAL_InitTick>
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d052      	beq.n	8005a5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	e35e      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d032      	beq.n	8005a28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80059c2:	4b43      	ldr	r3, [pc, #268]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a42      	ldr	r2, [pc, #264]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059c8:	f043 0301 	orr.w	r3, r3, #1
 80059cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059ce:	f7fd fd6d 	bl	80034ac <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059d6:	f7fd fd69 	bl	80034ac <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e347      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059e8:	4b39      	ldr	r3, [pc, #228]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059f4:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a35      	ldr	r2, [pc, #212]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 80059fa:	f043 0308 	orr.w	r3, r3, #8
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	4b33      	ldr	r3, [pc, #204]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	4930      	ldr	r1, [pc, #192]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a12:	4b2f      	ldr	r3, [pc, #188]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	492b      	ldr	r1, [pc, #172]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	604b      	str	r3, [r1, #4]
 8005a26:	e01a      	b.n	8005a5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005a28:	4b29      	ldr	r3, [pc, #164]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a28      	ldr	r2, [pc, #160]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a34:	f7fd fd3a 	bl	80034ac <HAL_GetTick>
 8005a38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a3c:	f7fd fd36 	bl	80034ac <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e314      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005a4e:	4b20      	ldr	r3, [pc, #128]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f0      	bne.n	8005a3c <HAL_RCC_OscConfig+0x1dc>
 8005a5a:	e000      	b.n	8005a5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d073      	beq.n	8005b52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d005      	beq.n	8005a7c <HAL_RCC_OscConfig+0x21c>
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b0c      	cmp	r3, #12
 8005a74:	d10e      	bne.n	8005a94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d10b      	bne.n	8005a94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a7c:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d063      	beq.n	8005b50 <HAL_RCC_OscConfig+0x2f0>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d15f      	bne.n	8005b50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e2f1      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9c:	d106      	bne.n	8005aac <HAL_RCC_OscConfig+0x24c>
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e025      	b.n	8005af8 <HAL_RCC_OscConfig+0x298>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab4:	d114      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x280>
 8005ab6:	4b06      	ldr	r3, [pc, #24]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a05      	ldr	r2, [pc, #20]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	4b03      	ldr	r3, [pc, #12]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a02      	ldr	r2, [pc, #8]	; (8005ad0 <HAL_RCC_OscConfig+0x270>)
 8005ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	e013      	b.n	8005af8 <HAL_RCC_OscConfig+0x298>
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	0800f4fc 	.word	0x0800f4fc
 8005ad8:	2000002c 	.word	0x2000002c
 8005adc:	20000030 	.word	0x20000030
 8005ae0:	4ba0      	ldr	r3, [pc, #640]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a9f      	ldr	r2, [pc, #636]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	4b9d      	ldr	r3, [pc, #628]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a9c      	ldr	r2, [pc, #624]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b00:	f7fd fcd4 	bl	80034ac <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b08:	f7fd fcd0 	bl	80034ac <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	; 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e2ae      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b1a:	4b92      	ldr	r3, [pc, #584]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x2a8>
 8005b26:	e014      	b.n	8005b52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b28:	f7fd fcc0 	bl	80034ac <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b30:	f7fd fcbc 	bl	80034ac <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b64      	cmp	r3, #100	; 0x64
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e29a      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b42:	4b88      	ldr	r3, [pc, #544]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0x2d0>
 8005b4e:	e000      	b.n	8005b52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d060      	beq.n	8005c20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d005      	beq.n	8005b70 <HAL_RCC_OscConfig+0x310>
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d119      	bne.n	8005b9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d116      	bne.n	8005b9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b70:	4b7c      	ldr	r3, [pc, #496]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d005      	beq.n	8005b88 <HAL_RCC_OscConfig+0x328>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e277      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b88:	4b76      	ldr	r3, [pc, #472]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	061b      	lsls	r3, r3, #24
 8005b96:	4973      	ldr	r1, [pc, #460]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b9c:	e040      	b.n	8005c20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d023      	beq.n	8005bee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ba6:	4b6f      	ldr	r3, [pc, #444]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a6e      	ldr	r2, [pc, #440]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb2:	f7fd fc7b 	bl	80034ac <HAL_GetTick>
 8005bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bb8:	e008      	b.n	8005bcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bba:	f7fd fc77 	bl	80034ac <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e255      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bcc:	4b65      	ldr	r3, [pc, #404]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d0f0      	beq.n	8005bba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd8:	4b62      	ldr	r3, [pc, #392]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	061b      	lsls	r3, r3, #24
 8005be6:	495f      	ldr	r1, [pc, #380]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	604b      	str	r3, [r1, #4]
 8005bec:	e018      	b.n	8005c20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bee:	4b5d      	ldr	r3, [pc, #372]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a5c      	ldr	r2, [pc, #368]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005bf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfa:	f7fd fc57 	bl	80034ac <HAL_GetTick>
 8005bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c02:	f7fd fc53 	bl	80034ac <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e231      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c14:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1f0      	bne.n	8005c02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0308 	and.w	r3, r3, #8
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d03c      	beq.n	8005ca6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01c      	beq.n	8005c6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c34:	4b4b      	ldr	r3, [pc, #300]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3a:	4a4a      	ldr	r2, [pc, #296]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c3c:	f043 0301 	orr.w	r3, r3, #1
 8005c40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fd fc32 	bl	80034ac <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4c:	f7fd fc2e 	bl	80034ac <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e20c      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c5e:	4b41      	ldr	r3, [pc, #260]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c64:	f003 0302 	and.w	r3, r3, #2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d0ef      	beq.n	8005c4c <HAL_RCC_OscConfig+0x3ec>
 8005c6c:	e01b      	b.n	8005ca6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c6e:	4b3d      	ldr	r3, [pc, #244]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c74:	4a3b      	ldr	r2, [pc, #236]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c7e:	f7fd fc15 	bl	80034ac <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c86:	f7fd fc11 	bl	80034ac <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e1ef      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c98:	4b32      	ldr	r3, [pc, #200]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1ef      	bne.n	8005c86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0304 	and.w	r3, r3, #4
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80a6 	beq.w	8005e00 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005cb8:	4b2a      	ldr	r3, [pc, #168]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10d      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cc4:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc8:	4a26      	ldr	r2, [pc, #152]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cce:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd0:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	60bb      	str	r3, [r7, #8]
 8005cda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ce0:	4b21      	ldr	r3, [pc, #132]	; (8005d68 <HAL_RCC_OscConfig+0x508>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d118      	bne.n	8005d1e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cec:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <HAL_RCC_OscConfig+0x508>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <HAL_RCC_OscConfig+0x508>)
 8005cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cf8:	f7fd fbd8 	bl	80034ac <HAL_GetTick>
 8005cfc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cfe:	e008      	b.n	8005d12 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d00:	f7fd fbd4 	bl	80034ac <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	2b02      	cmp	r3, #2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e1b2      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <HAL_RCC_OscConfig+0x508>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d0f0      	beq.n	8005d00 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d108      	bne.n	8005d38 <HAL_RCC_OscConfig+0x4d8>
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2c:	4a0d      	ldr	r2, [pc, #52]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d2e:	f043 0301 	orr.w	r3, r3, #1
 8005d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d36:	e029      	b.n	8005d8c <HAL_RCC_OscConfig+0x52c>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b05      	cmp	r3, #5
 8005d3e:	d115      	bne.n	8005d6c <HAL_RCC_OscConfig+0x50c>
 8005d40:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d46:	4a07      	ldr	r2, [pc, #28]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d48:	f043 0304 	orr.w	r3, r3, #4
 8005d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d50:	4b04      	ldr	r3, [pc, #16]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	4a03      	ldr	r2, [pc, #12]	; (8005d64 <HAL_RCC_OscConfig+0x504>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d60:	e014      	b.n	8005d8c <HAL_RCC_OscConfig+0x52c>
 8005d62:	bf00      	nop
 8005d64:	40021000 	.word	0x40021000
 8005d68:	40007000 	.word	0x40007000
 8005d6c:	4b9a      	ldr	r3, [pc, #616]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d72:	4a99      	ldr	r2, [pc, #612]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d7c:	4b96      	ldr	r3, [pc, #600]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d82:	4a95      	ldr	r2, [pc, #596]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005d84:	f023 0304 	bic.w	r3, r3, #4
 8005d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d016      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fd fb8a 	bl	80034ac <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d9a:	e00a      	b.n	8005db2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9c:	f7fd fb86 	bl	80034ac <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e162      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005db2:	4b89      	ldr	r3, [pc, #548]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db8:	f003 0302 	and.w	r3, r3, #2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0ed      	beq.n	8005d9c <HAL_RCC_OscConfig+0x53c>
 8005dc0:	e015      	b.n	8005dee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc2:	f7fd fb73 	bl	80034ac <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dc8:	e00a      	b.n	8005de0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dca:	f7fd fb6f 	bl	80034ac <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d901      	bls.n	8005de0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e14b      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005de0:	4b7d      	ldr	r3, [pc, #500]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ed      	bne.n	8005dca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dee:	7ffb      	ldrb	r3, [r7, #31]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d105      	bne.n	8005e00 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df4:	4b78      	ldr	r3, [pc, #480]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df8:	4a77      	ldr	r2, [pc, #476]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dfe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0320 	and.w	r3, r3, #32
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d03c      	beq.n	8005e86 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01c      	beq.n	8005e4e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e14:	4b70      	ldr	r3, [pc, #448]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e1a:	4a6f      	ldr	r2, [pc, #444]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005e1c:	f043 0301 	orr.w	r3, r3, #1
 8005e20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e24:	f7fd fb42 	bl	80034ac <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e2c:	f7fd fb3e 	bl	80034ac <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e11c      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e3e:	4b66      	ldr	r3, [pc, #408]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005e40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0ef      	beq.n	8005e2c <HAL_RCC_OscConfig+0x5cc>
 8005e4c:	e01b      	b.n	8005e86 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e4e:	4b62      	ldr	r3, [pc, #392]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e54:	4a60      	ldr	r2, [pc, #384]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005e56:	f023 0301 	bic.w	r3, r3, #1
 8005e5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5e:	f7fd fb25 	bl	80034ac <HAL_GetTick>
 8005e62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e64:	e008      	b.n	8005e78 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e66:	f7fd fb21 	bl	80034ac <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e0ff      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e78:	4b57      	ldr	r3, [pc, #348]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1ef      	bne.n	8005e66 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80f3 	beq.w	8006076 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	f040 80c9 	bne.w	800602c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005e9a:	4b4f      	ldr	r3, [pc, #316]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f003 0203 	and.w	r2, r3, #3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d12c      	bne.n	8005f08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d123      	bne.n	8005f08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d11b      	bne.n	8005f08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eda:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d113      	bne.n	8005f08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	3b01      	subs	r3, #1
 8005eee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d109      	bne.n	8005f08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	3b01      	subs	r3, #1
 8005f02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d06b      	beq.n	8005fe0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d062      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f0e:	4b32      	ldr	r3, [pc, #200]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e0ac      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f1e:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a2d      	ldr	r2, [pc, #180]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005f24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f28:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f2a:	f7fd fabf 	bl	80034ac <HAL_GetTick>
 8005f2e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f30:	e008      	b.n	8005f44 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f32:	f7fd fabb 	bl	80034ac <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e099      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f44:	4b24      	ldr	r3, [pc, #144]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f0      	bne.n	8005f32 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f50:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	4b21      	ldr	r3, [pc, #132]	; (8005fdc <HAL_RCC_OscConfig+0x77c>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f60:	3a01      	subs	r2, #1
 8005f62:	0112      	lsls	r2, r2, #4
 8005f64:	4311      	orrs	r1, r2
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f6a:	0212      	lsls	r2, r2, #8
 8005f6c:	4311      	orrs	r1, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f72:	0852      	lsrs	r2, r2, #1
 8005f74:	3a01      	subs	r2, #1
 8005f76:	0552      	lsls	r2, r2, #21
 8005f78:	4311      	orrs	r1, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f7e:	0852      	lsrs	r2, r2, #1
 8005f80:	3a01      	subs	r2, #1
 8005f82:	0652      	lsls	r2, r2, #25
 8005f84:	4311      	orrs	r1, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f8a:	06d2      	lsls	r2, r2, #27
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	4912      	ldr	r1, [pc, #72]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f94:	4b10      	ldr	r3, [pc, #64]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a0f      	ldr	r2, [pc, #60]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fa0:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	4a0c      	ldr	r2, [pc, #48]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005faa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fac:	f7fd fa7e 	bl	80034ac <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fb4:	f7fd fa7a 	bl	80034ac <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e058      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc6:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <HAL_RCC_OscConfig+0x778>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fd2:	e050      	b.n	8006076 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e04f      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fe0:	4b27      	ldr	r3, [pc, #156]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d144      	bne.n	8006076 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005fec:	4b24      	ldr	r3, [pc, #144]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a23      	ldr	r2, [pc, #140]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 8005ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ff6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ff8:	4b21      	ldr	r3, [pc, #132]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	4a20      	ldr	r2, [pc, #128]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 8005ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006002:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006004:	f7fd fa52 	bl	80034ac <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600c:	f7fd fa4e 	bl	80034ac <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e02c      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800601e:	4b18      	ldr	r3, [pc, #96]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x7ac>
 800602a:	e024      	b.n	8006076 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b0c      	cmp	r3, #12
 8006030:	d01f      	beq.n	8006072 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006032:	4b13      	ldr	r3, [pc, #76]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a12      	ldr	r2, [pc, #72]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 8006038:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800603c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603e:	f7fd fa35 	bl	80034ac <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006046:	f7fd fa31 	bl	80034ac <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e00f      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006058:	4b09      	ldr	r3, [pc, #36]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f0      	bne.n	8006046 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	4905      	ldr	r1, [pc, #20]	; (8006080 <HAL_RCC_OscConfig+0x820>)
 800606a:	4b06      	ldr	r3, [pc, #24]	; (8006084 <HAL_RCC_OscConfig+0x824>)
 800606c:	4013      	ands	r3, r2
 800606e:	60cb      	str	r3, [r1, #12]
 8006070:	e001      	b.n	8006076 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e000      	b.n	8006078 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3720      	adds	r7, #32
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40021000 	.word	0x40021000
 8006084:	feeefffc 	.word	0xfeeefffc

08006088 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d101      	bne.n	800609c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0e7      	b.n	800626c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800609c:	4b75      	ldr	r3, [pc, #468]	; (8006274 <HAL_RCC_ClockConfig+0x1ec>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0307 	and.w	r3, r3, #7
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d910      	bls.n	80060cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060aa:	4b72      	ldr	r3, [pc, #456]	; (8006274 <HAL_RCC_ClockConfig+0x1ec>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f023 0207 	bic.w	r2, r3, #7
 80060b2:	4970      	ldr	r1, [pc, #448]	; (8006274 <HAL_RCC_ClockConfig+0x1ec>)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ba:	4b6e      	ldr	r3, [pc, #440]	; (8006274 <HAL_RCC_ClockConfig+0x1ec>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d001      	beq.n	80060cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0cf      	b.n	800626c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d010      	beq.n	80060fa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	4b66      	ldr	r3, [pc, #408]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d908      	bls.n	80060fa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060e8:	4b63      	ldr	r3, [pc, #396]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	4960      	ldr	r1, [pc, #384]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d04c      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2b03      	cmp	r3, #3
 800610c:	d107      	bne.n	800611e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800610e:	4b5a      	ldr	r3, [pc, #360]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d121      	bne.n	800615e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e0a6      	b.n	800626c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2b02      	cmp	r3, #2
 8006124:	d107      	bne.n	8006136 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006126:	4b54      	ldr	r3, [pc, #336]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d115      	bne.n	800615e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e09a      	b.n	800626c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d107      	bne.n	800614e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800613e:	4b4e      	ldr	r3, [pc, #312]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e08e      	b.n	800626c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800614e:	4b4a      	ldr	r3, [pc, #296]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e086      	b.n	800626c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800615e:	4b46      	ldr	r3, [pc, #280]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f023 0203 	bic.w	r2, r3, #3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	4943      	ldr	r1, [pc, #268]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 800616c:	4313      	orrs	r3, r2
 800616e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006170:	f7fd f99c 	bl	80034ac <HAL_GetTick>
 8006174:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006176:	e00a      	b.n	800618e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006178:	f7fd f998 	bl	80034ac <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	f241 3288 	movw	r2, #5000	; 0x1388
 8006186:	4293      	cmp	r3, r2
 8006188:	d901      	bls.n	800618e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800618a:	2303      	movs	r3, #3
 800618c:	e06e      	b.n	800626c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800618e:	4b3a      	ldr	r3, [pc, #232]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 020c 	and.w	r2, r3, #12
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	429a      	cmp	r2, r3
 800619e:	d1eb      	bne.n	8006178 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d010      	beq.n	80061ce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	4b31      	ldr	r3, [pc, #196]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d208      	bcs.n	80061ce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061bc:	4b2e      	ldr	r3, [pc, #184]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	492b      	ldr	r1, [pc, #172]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 80061ca:	4313      	orrs	r3, r2
 80061cc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061ce:	4b29      	ldr	r3, [pc, #164]	; (8006274 <HAL_RCC_ClockConfig+0x1ec>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0307 	and.w	r3, r3, #7
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d210      	bcs.n	80061fe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061dc:	4b25      	ldr	r3, [pc, #148]	; (8006274 <HAL_RCC_ClockConfig+0x1ec>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f023 0207 	bic.w	r2, r3, #7
 80061e4:	4923      	ldr	r1, [pc, #140]	; (8006274 <HAL_RCC_ClockConfig+0x1ec>)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ec:	4b21      	ldr	r3, [pc, #132]	; (8006274 <HAL_RCC_ClockConfig+0x1ec>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d001      	beq.n	80061fe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e036      	b.n	800626c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0304 	and.w	r3, r3, #4
 8006206:	2b00      	cmp	r3, #0
 8006208:	d008      	beq.n	800621c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	4918      	ldr	r1, [pc, #96]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 8006218:	4313      	orrs	r3, r2
 800621a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0308 	and.w	r3, r3, #8
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006228:	4b13      	ldr	r3, [pc, #76]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	4910      	ldr	r1, [pc, #64]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 8006238:	4313      	orrs	r3, r2
 800623a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800623c:	f000 f824 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <HAL_RCC_ClockConfig+0x1f0>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	091b      	lsrs	r3, r3, #4
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	490b      	ldr	r1, [pc, #44]	; (800627c <HAL_RCC_ClockConfig+0x1f4>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	fa22 f303 	lsr.w	r3, r2, r3
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <HAL_RCC_ClockConfig+0x1f8>)
 800625a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <HAL_RCC_ClockConfig+0x1fc>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4618      	mov	r0, r3
 8006262:	f7fd f8d3 	bl	800340c <HAL_InitTick>
 8006266:	4603      	mov	r3, r0
 8006268:	72fb      	strb	r3, [r7, #11]

  return status;
 800626a:	7afb      	ldrb	r3, [r7, #11]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40022000 	.word	0x40022000
 8006278:	40021000 	.word	0x40021000
 800627c:	0800f4fc 	.word	0x0800f4fc
 8006280:	2000002c 	.word	0x2000002c
 8006284:	20000030 	.word	0x20000030

08006288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006288:	b480      	push	{r7}
 800628a:	b089      	sub	sp, #36	; 0x24
 800628c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	61fb      	str	r3, [r7, #28]
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006296:	4b3e      	ldr	r3, [pc, #248]	; (8006390 <HAL_RCC_GetSysClockFreq+0x108>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062a0:	4b3b      	ldr	r3, [pc, #236]	; (8006390 <HAL_RCC_GetSysClockFreq+0x108>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <HAL_RCC_GetSysClockFreq+0x34>
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2b0c      	cmp	r3, #12
 80062b4:	d121      	bne.n	80062fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d11e      	bne.n	80062fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062bc:	4b34      	ldr	r3, [pc, #208]	; (8006390 <HAL_RCC_GetSysClockFreq+0x108>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0308 	and.w	r3, r3, #8
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d107      	bne.n	80062d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062c8:	4b31      	ldr	r3, [pc, #196]	; (8006390 <HAL_RCC_GetSysClockFreq+0x108>)
 80062ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062ce:	0a1b      	lsrs	r3, r3, #8
 80062d0:	f003 030f 	and.w	r3, r3, #15
 80062d4:	61fb      	str	r3, [r7, #28]
 80062d6:	e005      	b.n	80062e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80062d8:	4b2d      	ldr	r3, [pc, #180]	; (8006390 <HAL_RCC_GetSysClockFreq+0x108>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	f003 030f 	and.w	r3, r3, #15
 80062e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80062e4:	4a2b      	ldr	r2, [pc, #172]	; (8006394 <HAL_RCC_GetSysClockFreq+0x10c>)
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10d      	bne.n	8006310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80062f8:	e00a      	b.n	8006310 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d102      	bne.n	8006306 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006300:	4b25      	ldr	r3, [pc, #148]	; (8006398 <HAL_RCC_GetSysClockFreq+0x110>)
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	e004      	b.n	8006310 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	2b08      	cmp	r3, #8
 800630a:	d101      	bne.n	8006310 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800630c:	4b23      	ldr	r3, [pc, #140]	; (800639c <HAL_RCC_GetSysClockFreq+0x114>)
 800630e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	2b0c      	cmp	r3, #12
 8006314:	d134      	bne.n	8006380 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006316:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <HAL_RCC_GetSysClockFreq+0x108>)
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d003      	beq.n	800632e <HAL_RCC_GetSysClockFreq+0xa6>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b03      	cmp	r3, #3
 800632a:	d003      	beq.n	8006334 <HAL_RCC_GetSysClockFreq+0xac>
 800632c:	e005      	b.n	800633a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800632e:	4b1a      	ldr	r3, [pc, #104]	; (8006398 <HAL_RCC_GetSysClockFreq+0x110>)
 8006330:	617b      	str	r3, [r7, #20]
      break;
 8006332:	e005      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006334:	4b19      	ldr	r3, [pc, #100]	; (800639c <HAL_RCC_GetSysClockFreq+0x114>)
 8006336:	617b      	str	r3, [r7, #20]
      break;
 8006338:	e002      	b.n	8006340 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	617b      	str	r3, [r7, #20]
      break;
 800633e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006340:	4b13      	ldr	r3, [pc, #76]	; (8006390 <HAL_RCC_GetSysClockFreq+0x108>)
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	091b      	lsrs	r3, r3, #4
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	3301      	adds	r3, #1
 800634c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800634e:	4b10      	ldr	r3, [pc, #64]	; (8006390 <HAL_RCC_GetSysClockFreq+0x108>)
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	0a1b      	lsrs	r3, r3, #8
 8006354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	fb03 f202 	mul.w	r2, r3, r2
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006366:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <HAL_RCC_GetSysClockFreq+0x108>)
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	0e5b      	lsrs	r3, r3, #25
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	3301      	adds	r3, #1
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006380:	69bb      	ldr	r3, [r7, #24]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3724      	adds	r7, #36	; 0x24
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40021000 	.word	0x40021000
 8006394:	0800f514 	.word	0x0800f514
 8006398:	00f42400 	.word	0x00f42400
 800639c:	007a1200 	.word	0x007a1200

080063a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063a4:	4b03      	ldr	r3, [pc, #12]	; (80063b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80063a6:	681b      	ldr	r3, [r3, #0]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	2000002c 	.word	0x2000002c

080063b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063bc:	f7ff fff0 	bl	80063a0 <HAL_RCC_GetHCLKFreq>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4b06      	ldr	r3, [pc, #24]	; (80063dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	0a1b      	lsrs	r3, r3, #8
 80063c8:	f003 0307 	and.w	r3, r3, #7
 80063cc:	4904      	ldr	r1, [pc, #16]	; (80063e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063ce:	5ccb      	ldrb	r3, [r1, r3]
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d8:	4618      	mov	r0, r3
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	40021000 	.word	0x40021000
 80063e0:	0800f50c 	.word	0x0800f50c

080063e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063e8:	f7ff ffda 	bl	80063a0 <HAL_RCC_GetHCLKFreq>
 80063ec:	4602      	mov	r2, r0
 80063ee:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	0adb      	lsrs	r3, r3, #11
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	4904      	ldr	r1, [pc, #16]	; (800640c <HAL_RCC_GetPCLK2Freq+0x28>)
 80063fa:	5ccb      	ldrb	r3, [r1, r3]
 80063fc:	f003 031f 	and.w	r3, r3, #31
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006404:	4618      	mov	r0, r3
 8006406:	bd80      	pop	{r7, pc}
 8006408:	40021000 	.word	0x40021000
 800640c:	0800f50c 	.word	0x0800f50c

08006410 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006418:	2300      	movs	r3, #0
 800641a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800641c:	4b2a      	ldr	r3, [pc, #168]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800641e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006428:	f7ff f9b6 	bl	8005798 <HAL_PWREx_GetVoltageRange>
 800642c:	6178      	str	r0, [r7, #20]
 800642e:	e014      	b.n	800645a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006430:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006434:	4a24      	ldr	r2, [pc, #144]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643a:	6593      	str	r3, [r2, #88]	; 0x58
 800643c:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800643e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006448:	f7ff f9a6 	bl	8005798 <HAL_PWREx_GetVoltageRange>
 800644c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800644e:	4b1e      	ldr	r3, [pc, #120]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006452:	4a1d      	ldr	r2, [pc, #116]	; (80064c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006458:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006460:	d10b      	bne.n	800647a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b80      	cmp	r3, #128	; 0x80
 8006466:	d919      	bls.n	800649c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2ba0      	cmp	r3, #160	; 0xa0
 800646c:	d902      	bls.n	8006474 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800646e:	2302      	movs	r3, #2
 8006470:	613b      	str	r3, [r7, #16]
 8006472:	e013      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006474:	2301      	movs	r3, #1
 8006476:	613b      	str	r3, [r7, #16]
 8006478:	e010      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b80      	cmp	r3, #128	; 0x80
 800647e:	d902      	bls.n	8006486 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006480:	2303      	movs	r3, #3
 8006482:	613b      	str	r3, [r7, #16]
 8006484:	e00a      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b80      	cmp	r3, #128	; 0x80
 800648a:	d102      	bne.n	8006492 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800648c:	2302      	movs	r3, #2
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	e004      	b.n	800649c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b70      	cmp	r3, #112	; 0x70
 8006496:	d101      	bne.n	800649c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006498:	2301      	movs	r3, #1
 800649a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800649c:	4b0b      	ldr	r3, [pc, #44]	; (80064cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f023 0207 	bic.w	r2, r3, #7
 80064a4:	4909      	ldr	r1, [pc, #36]	; (80064cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80064ac:	4b07      	ldr	r3, [pc, #28]	; (80064cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d001      	beq.n	80064be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	40021000 	.word	0x40021000
 80064cc:	40022000 	.word	0x40022000

080064d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80064d8:	2300      	movs	r3, #0
 80064da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064dc:	2300      	movs	r3, #0
 80064de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d031      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064f4:	d01a      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80064f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064fa:	d814      	bhi.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006500:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006504:	d10f      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006506:	4b5d      	ldr	r3, [pc, #372]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	4a5c      	ldr	r2, [pc, #368]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006510:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006512:	e00c      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	2100      	movs	r1, #0
 800651a:	4618      	mov	r0, r3
 800651c:	f000 f9ce 	bl	80068bc <RCCEx_PLLSAI1_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	74fb      	strb	r3, [r7, #19]
      break;
 800652a:	e000      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800652c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800652e:	7cfb      	ldrb	r3, [r7, #19]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d10b      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006534:	4b51      	ldr	r3, [pc, #324]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	494e      	ldr	r1, [pc, #312]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800654a:	e001      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 809e 	beq.w	800669a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800655e:	2300      	movs	r3, #0
 8006560:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006562:	4b46      	ldr	r3, [pc, #280]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006572:	2300      	movs	r3, #0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00d      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006578:	4b40      	ldr	r3, [pc, #256]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800657a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657c:	4a3f      	ldr	r2, [pc, #252]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800657e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006582:	6593      	str	r3, [r2, #88]	; 0x58
 8006584:	4b3d      	ldr	r3, [pc, #244]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658c:	60bb      	str	r3, [r7, #8]
 800658e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006590:	2301      	movs	r3, #1
 8006592:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006594:	4b3a      	ldr	r3, [pc, #232]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a39      	ldr	r2, [pc, #228]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800659a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065a0:	f7fc ff84 	bl	80034ac <HAL_GetTick>
 80065a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065a6:	e009      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065a8:	f7fc ff80 	bl	80034ac <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d902      	bls.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	74fb      	strb	r3, [r7, #19]
        break;
 80065ba:	e005      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80065bc:	4b30      	ldr	r3, [pc, #192]	; (8006680 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d0ef      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80065c8:	7cfb      	ldrb	r3, [r7, #19]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d15a      	bne.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065ce:	4b2b      	ldr	r3, [pc, #172]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01e      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d019      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065ea:	4b24      	ldr	r3, [pc, #144]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065f6:	4b21      	ldr	r3, [pc, #132]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fc:	4a1f      	ldr	r2, [pc, #124]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80065fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006606:	4b1d      	ldr	r3, [pc, #116]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660c:	4a1b      	ldr	r2, [pc, #108]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800660e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006616:	4a19      	ldr	r2, [pc, #100]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b00      	cmp	r3, #0
 8006626:	d016      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fc ff40 	bl	80034ac <HAL_GetTick>
 800662c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800662e:	e00b      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006630:	f7fc ff3c 	bl	80034ac <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	f241 3288 	movw	r2, #5000	; 0x1388
 800663e:	4293      	cmp	r3, r2
 8006640:	d902      	bls.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006642:	2303      	movs	r3, #3
 8006644:	74fb      	strb	r3, [r7, #19]
            break;
 8006646:	e006      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0ec      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006656:	7cfb      	ldrb	r3, [r7, #19]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10b      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800665c:	4b07      	ldr	r3, [pc, #28]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006662:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666a:	4904      	ldr	r1, [pc, #16]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006672:	e009      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006674:	7cfb      	ldrb	r3, [r7, #19]
 8006676:	74bb      	strb	r3, [r7, #18]
 8006678:	e006      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800667a:	bf00      	nop
 800667c:	40021000 	.word	0x40021000
 8006680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006684:	7cfb      	ldrb	r3, [r7, #19]
 8006686:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006688:	7c7b      	ldrb	r3, [r7, #17]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d105      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800668e:	4b8a      	ldr	r3, [pc, #552]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006692:	4a89      	ldr	r2, [pc, #548]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006698:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066a6:	4b84      	ldr	r3, [pc, #528]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ac:	f023 0203 	bic.w	r2, r3, #3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	4980      	ldr	r1, [pc, #512]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0302 	and.w	r3, r3, #2
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066c8:	4b7b      	ldr	r3, [pc, #492]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ce:	f023 020c 	bic.w	r2, r3, #12
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	4978      	ldr	r1, [pc, #480]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066ea:	4b73      	ldr	r3, [pc, #460]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	496f      	ldr	r1, [pc, #444]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800670c:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006712:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671a:	4967      	ldr	r1, [pc, #412]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800672e:	4b62      	ldr	r3, [pc, #392]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006734:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673c:	495e      	ldr	r1, [pc, #376]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006750:	4b59      	ldr	r3, [pc, #356]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006756:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	4956      	ldr	r1, [pc, #344]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006772:	4b51      	ldr	r3, [pc, #324]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	494d      	ldr	r1, [pc, #308]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d028      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006794:	4b48      	ldr	r3, [pc, #288]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	4945      	ldr	r1, [pc, #276]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067b2:	d106      	bne.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b4:	4b40      	ldr	r3, [pc, #256]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4a3f      	ldr	r2, [pc, #252]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067be:	60d3      	str	r3, [r2, #12]
 80067c0:	e011      	b.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067ca:	d10c      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	3304      	adds	r3, #4
 80067d0:	2101      	movs	r1, #1
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f872 	bl	80068bc <RCCEx_PLLSAI1_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80067dc:	7cfb      	ldrb	r3, [r7, #19]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80067e2:	7cfb      	ldrb	r3, [r7, #19]
 80067e4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d028      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067f2:	4b31      	ldr	r3, [pc, #196]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006800:	492d      	ldr	r1, [pc, #180]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006802:	4313      	orrs	r3, r2
 8006804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006810:	d106      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006812:	4b29      	ldr	r3, [pc, #164]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	4a28      	ldr	r2, [pc, #160]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800681c:	60d3      	str	r3, [r2, #12]
 800681e:	e011      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006824:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006828:	d10c      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3304      	adds	r3, #4
 800682e:	2101      	movs	r1, #1
 8006830:	4618      	mov	r0, r3
 8006832:	f000 f843 	bl	80068bc <RCCEx_PLLSAI1_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800683a:	7cfb      	ldrb	r3, [r7, #19]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d001      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006840:	7cfb      	ldrb	r3, [r7, #19]
 8006842:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01c      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006850:	4b19      	ldr	r3, [pc, #100]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800685e:	4916      	ldr	r1, [pc, #88]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800686e:	d10c      	bne.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	2102      	movs	r1, #2
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f820 	bl	80068bc <RCCEx_PLLSAI1_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006880:	7cfb      	ldrb	r3, [r7, #19]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006886:	7cfb      	ldrb	r3, [r7, #19]
 8006888:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006896:	4b08      	ldr	r3, [pc, #32]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068a4:	4904      	ldr	r1, [pc, #16]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80068ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	40021000 	.word	0x40021000

080068bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068ca:	4b74      	ldr	r3, [pc, #464]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d018      	beq.n	8006908 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80068d6:	4b71      	ldr	r3, [pc, #452]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f003 0203 	and.w	r2, r3, #3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d10d      	bne.n	8006902 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
       ||
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d009      	beq.n	8006902 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80068ee:	4b6b      	ldr	r3, [pc, #428]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	091b      	lsrs	r3, r3, #4
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
       ||
 80068fe:	429a      	cmp	r2, r3
 8006900:	d047      	beq.n	8006992 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	73fb      	strb	r3, [r7, #15]
 8006906:	e044      	b.n	8006992 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b03      	cmp	r3, #3
 800690e:	d018      	beq.n	8006942 <RCCEx_PLLSAI1_Config+0x86>
 8006910:	2b03      	cmp	r3, #3
 8006912:	d825      	bhi.n	8006960 <RCCEx_PLLSAI1_Config+0xa4>
 8006914:	2b01      	cmp	r3, #1
 8006916:	d002      	beq.n	800691e <RCCEx_PLLSAI1_Config+0x62>
 8006918:	2b02      	cmp	r3, #2
 800691a:	d009      	beq.n	8006930 <RCCEx_PLLSAI1_Config+0x74>
 800691c:	e020      	b.n	8006960 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800691e:	4b5f      	ldr	r3, [pc, #380]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11d      	bne.n	8006966 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800692e:	e01a      	b.n	8006966 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006930:	4b5a      	ldr	r3, [pc, #360]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006938:	2b00      	cmp	r3, #0
 800693a:	d116      	bne.n	800696a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006940:	e013      	b.n	800696a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006942:	4b56      	ldr	r3, [pc, #344]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10f      	bne.n	800696e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800694e:	4b53      	ldr	r3, [pc, #332]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d109      	bne.n	800696e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800695e:	e006      	b.n	800696e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
      break;
 8006964:	e004      	b.n	8006970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006966:	bf00      	nop
 8006968:	e002      	b.n	8006970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800696a:	bf00      	nop
 800696c:	e000      	b.n	8006970 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800696e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006970:	7bfb      	ldrb	r3, [r7, #15]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10d      	bne.n	8006992 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006976:	4b49      	ldr	r3, [pc, #292]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6819      	ldr	r1, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	3b01      	subs	r3, #1
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	430b      	orrs	r3, r1
 800698c:	4943      	ldr	r1, [pc, #268]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 800698e:	4313      	orrs	r3, r2
 8006990:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006992:	7bfb      	ldrb	r3, [r7, #15]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d17c      	bne.n	8006a92 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006998:	4b40      	ldr	r3, [pc, #256]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a3f      	ldr	r2, [pc, #252]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 800699e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a4:	f7fc fd82 	bl	80034ac <HAL_GetTick>
 80069a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069aa:	e009      	b.n	80069c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069ac:	f7fc fd7e 	bl	80034ac <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d902      	bls.n	80069c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	73fb      	strb	r3, [r7, #15]
        break;
 80069be:	e005      	b.n	80069cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069c0:	4b36      	ldr	r3, [pc, #216]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d1ef      	bne.n	80069ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80069cc:	7bfb      	ldrb	r3, [r7, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d15f      	bne.n	8006a92 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d110      	bne.n	80069fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80069d8:	4b30      	ldr	r3, [pc, #192]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80069e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6892      	ldr	r2, [r2, #8]
 80069e8:	0211      	lsls	r1, r2, #8
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	68d2      	ldr	r2, [r2, #12]
 80069ee:	06d2      	lsls	r2, r2, #27
 80069f0:	430a      	orrs	r2, r1
 80069f2:	492a      	ldr	r1, [pc, #168]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	610b      	str	r3, [r1, #16]
 80069f8:	e027      	b.n	8006a4a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d112      	bne.n	8006a26 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a00:	4b26      	ldr	r3, [pc, #152]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006a08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6892      	ldr	r2, [r2, #8]
 8006a10:	0211      	lsls	r1, r2, #8
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6912      	ldr	r2, [r2, #16]
 8006a16:	0852      	lsrs	r2, r2, #1
 8006a18:	3a01      	subs	r2, #1
 8006a1a:	0552      	lsls	r2, r2, #21
 8006a1c:	430a      	orrs	r2, r1
 8006a1e:	491f      	ldr	r1, [pc, #124]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	610b      	str	r3, [r1, #16]
 8006a24:	e011      	b.n	8006a4a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a26:	4b1d      	ldr	r3, [pc, #116]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006a2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6892      	ldr	r2, [r2, #8]
 8006a36:	0211      	lsls	r1, r2, #8
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6952      	ldr	r2, [r2, #20]
 8006a3c:	0852      	lsrs	r2, r2, #1
 8006a3e:	3a01      	subs	r2, #1
 8006a40:	0652      	lsls	r2, r2, #25
 8006a42:	430a      	orrs	r2, r1
 8006a44:	4915      	ldr	r1, [pc, #84]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a4a:	4b14      	ldr	r3, [pc, #80]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a13      	ldr	r2, [pc, #76]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a54:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a56:	f7fc fd29 	bl	80034ac <HAL_GetTick>
 8006a5a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a5c:	e009      	b.n	8006a72 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a5e:	f7fc fd25 	bl	80034ac <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d902      	bls.n	8006a72 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	73fb      	strb	r3, [r7, #15]
          break;
 8006a70:	e005      	b.n	8006a7e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ef      	beq.n	8006a5e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	4903      	ldr	r1, [pc, #12]	; (8006a9c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	40021000 	.word	0x40021000

08006aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e095      	b.n	8006bde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d108      	bne.n	8006acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ac2:	d009      	beq.n	8006ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	61da      	str	r2, [r3, #28]
 8006aca:	e005      	b.n	8006ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fc fa54 	bl	8002fa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b18:	d902      	bls.n	8006b20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
 8006b1e:	e002      	b.n	8006b26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006b2e:	d007      	beq.n	8006b40 <HAL_SPI_Init+0xa0>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b38:	d002      	beq.n	8006b40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b50:	431a      	orrs	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	431a      	orrs	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b82:	ea42 0103 	orr.w	r1, r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	0c1b      	lsrs	r3, r3, #16
 8006b9c:	f003 0204 	and.w	r2, r3, #4
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006bbc:	ea42 0103 	orr.w	r1, r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b088      	sub	sp, #32
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	60f8      	str	r0, [r7, #12]
 8006bee:	60b9      	str	r1, [r7, #8]
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_SPI_Transmit+0x22>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e15f      	b.n	8006ec8 <HAL_SPI_Transmit+0x2e2>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c10:	f7fc fc4c 	bl	80034ac <HAL_GetTick>
 8006c14:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c16:	88fb      	ldrh	r3, [r7, #6]
 8006c18:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d002      	beq.n	8006c2c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c26:	2302      	movs	r3, #2
 8006c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c2a:	e148      	b.n	8006ebe <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_SPI_Transmit+0x52>
 8006c32:	88fb      	ldrh	r3, [r7, #6]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c3c:	e13f      	b.n	8006ebe <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2203      	movs	r2, #3
 8006c42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	88fa      	ldrh	r2, [r7, #6]
 8006c56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	88fa      	ldrh	r2, [r7, #6]
 8006c5c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c88:	d10f      	bne.n	8006caa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ca8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb4:	2b40      	cmp	r3, #64	; 0x40
 8006cb6:	d007      	beq.n	8006cc8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cc6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006cd0:	d94f      	bls.n	8006d72 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HAL_SPI_Transmit+0xfa>
 8006cda:	8afb      	ldrh	r3, [r7, #22]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d142      	bne.n	8006d66 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	881a      	ldrh	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	1c9a      	adds	r2, r3, #2
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d04:	e02f      	b.n	8006d66 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d112      	bne.n	8006d3a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	881a      	ldrh	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	1c9a      	adds	r2, r3, #2
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	3b01      	subs	r3, #1
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d38:	e015      	b.n	8006d66 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d3a:	f7fc fbb7 	bl	80034ac <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d803      	bhi.n	8006d52 <HAL_SPI_Transmit+0x16c>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d50:	d102      	bne.n	8006d58 <HAL_SPI_Transmit+0x172>
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d106      	bne.n	8006d66 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006d64:	e0ab      	b.n	8006ebe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1ca      	bne.n	8006d06 <HAL_SPI_Transmit+0x120>
 8006d70:	e080      	b.n	8006e74 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <HAL_SPI_Transmit+0x19a>
 8006d7a:	8afb      	ldrh	r3, [r7, #22]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d174      	bne.n	8006e6a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d912      	bls.n	8006db0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	881a      	ldrh	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	1c9a      	adds	r2, r3, #2
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b02      	subs	r3, #2
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dae:	e05c      	b.n	8006e6a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	330c      	adds	r3, #12
 8006dba:	7812      	ldrb	r2, [r2, #0]
 8006dbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006dd6:	e048      	b.n	8006e6a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d12b      	bne.n	8006e3e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d912      	bls.n	8006e16 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	881a      	ldrh	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e00:	1c9a      	adds	r2, r3, #2
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b02      	subs	r3, #2
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e14:	e029      	b.n	8006e6a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	330c      	adds	r3, #12
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	3b01      	subs	r3, #1
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e3c:	e015      	b.n	8006e6a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e3e:	f7fc fb35 	bl	80034ac <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d803      	bhi.n	8006e56 <HAL_SPI_Transmit+0x270>
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e54:	d102      	bne.n	8006e5c <HAL_SPI_Transmit+0x276>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d106      	bne.n	8006e6a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006e68:	e029      	b.n	8006ebe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1b1      	bne.n	8006dd8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	6839      	ldr	r1, [r7, #0]
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f000 fe89 	bl	8007b90 <SPI_EndRxTxTransaction>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10a      	bne.n	8006ea8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e92:	2300      	movs	r3, #0
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	613b      	str	r3, [r7, #16]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	613b      	str	r3, [r7, #16]
 8006ea6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	77fb      	strb	r3, [r7, #31]
 8006eb4:	e003      	b.n	8006ebe <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ec6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	4613      	mov	r3, r2
 8006ede:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d002      	beq.n	8006ef6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ef4:	e11a      	b.n	800712c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006efe:	d112      	bne.n	8006f26 <HAL_SPI_Receive+0x56>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10e      	bne.n	8006f26 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f10:	88fa      	ldrh	r2, [r7, #6]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	4613      	mov	r3, r2
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f90e 	bl	800713e <HAL_SPI_TransmitReceive>
 8006f22:	4603      	mov	r3, r0
 8006f24:	e107      	b.n	8007136 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d101      	bne.n	8006f34 <HAL_SPI_Receive+0x64>
 8006f30:	2302      	movs	r3, #2
 8006f32:	e100      	b.n	8007136 <HAL_SPI_Receive+0x266>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f3c:	f7fc fab6 	bl	80034ac <HAL_GetTick>
 8006f40:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_SPI_Receive+0x7e>
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d102      	bne.n	8006f54 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f52:	e0eb      	b.n	800712c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2204      	movs	r2, #4
 8006f58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	88fa      	ldrh	r2, [r7, #6]
 8006f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	88fa      	ldrh	r2, [r7, #6]
 8006f74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f9e:	d908      	bls.n	8006fb2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006fae:	605a      	str	r2, [r3, #4]
 8006fb0:	e007      	b.n	8006fc2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fc0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fca:	d10f      	bne.n	8006fec <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d007      	beq.n	800700a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007008:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007012:	d86f      	bhi.n	80070f4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007014:	e034      	b.n	8007080 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f003 0301 	and.w	r3, r3, #1
 8007020:	2b01      	cmp	r3, #1
 8007022:	d117      	bne.n	8007054 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f103 020c 	add.w	r2, r3, #12
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007046:	b29b      	uxth	r3, r3
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007052:	e015      	b.n	8007080 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007054:	f7fc fa2a 	bl	80034ac <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d803      	bhi.n	800706c <HAL_SPI_Receive+0x19c>
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800706a:	d102      	bne.n	8007072 <HAL_SPI_Receive+0x1a2>
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800707e:	e055      	b.n	800712c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1c4      	bne.n	8007016 <HAL_SPI_Receive+0x146>
 800708c:	e038      	b.n	8007100 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b01      	cmp	r3, #1
 800709a:	d115      	bne.n	80070c8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	b292      	uxth	r2, r2
 80070a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ae:	1c9a      	adds	r2, r3, #2
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80070c6:	e015      	b.n	80070f4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070c8:	f7fc f9f0 	bl	80034ac <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d803      	bhi.n	80070e0 <HAL_SPI_Receive+0x210>
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070de:	d102      	bne.n	80070e6 <HAL_SPI_Receive+0x216>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80070f2:	e01b      	b.n	800712c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1c6      	bne.n	800708e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007100:	693a      	ldr	r2, [r7, #16]
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 fceb 	bl	8007ae0 <SPI_EndRxTransaction>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2220      	movs	r2, #32
 8007114:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800711a:	2b00      	cmp	r3, #0
 800711c:	d002      	beq.n	8007124 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
 8007122:	e003      	b.n	800712c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b08a      	sub	sp, #40	; 0x28
 8007142:	af00      	add	r7, sp, #0
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800714c:	2301      	movs	r3, #1
 800714e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_SPI_TransmitReceive+0x26>
 8007160:	2302      	movs	r3, #2
 8007162:	e20a      	b.n	800757a <HAL_SPI_TransmitReceive+0x43c>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800716c:	f7fc f99e 	bl	80034ac <HAL_GetTick>
 8007170:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007178:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007180:	887b      	ldrh	r3, [r7, #2]
 8007182:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007184:	887b      	ldrh	r3, [r7, #2]
 8007186:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007188:	7efb      	ldrb	r3, [r7, #27]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d00e      	beq.n	80071ac <HAL_SPI_TransmitReceive+0x6e>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007194:	d106      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d102      	bne.n	80071a4 <HAL_SPI_TransmitReceive+0x66>
 800719e:	7efb      	ldrb	r3, [r7, #27]
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d003      	beq.n	80071ac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80071a4:	2302      	movs	r3, #2
 80071a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80071aa:	e1e0      	b.n	800756e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_SPI_TransmitReceive+0x80>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d002      	beq.n	80071be <HAL_SPI_TransmitReceive+0x80>
 80071b8:	887b      	ldrh	r3, [r7, #2]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d103      	bne.n	80071c6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80071c4:	e1d3      	b.n	800756e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d003      	beq.n	80071da <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2205      	movs	r2, #5
 80071d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	887a      	ldrh	r2, [r7, #2]
 80071ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	887a      	ldrh	r2, [r7, #2]
 80071f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	68ba      	ldr	r2, [r7, #8]
 80071fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	887a      	ldrh	r2, [r7, #2]
 8007200:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	887a      	ldrh	r2, [r7, #2]
 8007206:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2200      	movs	r2, #0
 800720c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2200      	movs	r2, #0
 8007212:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800721c:	d802      	bhi.n	8007224 <HAL_SPI_TransmitReceive+0xe6>
 800721e:	8a3b      	ldrh	r3, [r7, #16]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d908      	bls.n	8007236 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007232:	605a      	str	r2, [r3, #4]
 8007234:	e007      	b.n	8007246 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007244:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b40      	cmp	r3, #64	; 0x40
 8007252:	d007      	beq.n	8007264 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007262:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800726c:	f240 8081 	bls.w	8007372 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_SPI_TransmitReceive+0x140>
 8007278:	8a7b      	ldrh	r3, [r7, #18]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d16d      	bne.n	800735a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728e:	1c9a      	adds	r2, r3, #2
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072a2:	e05a      	b.n	800735a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d11b      	bne.n	80072ea <HAL_SPI_TransmitReceive+0x1ac>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d016      	beq.n	80072ea <HAL_SPI_TransmitReceive+0x1ac>
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d113      	bne.n	80072ea <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	881a      	ldrh	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	1c9a      	adds	r2, r3, #2
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d11c      	bne.n	8007332 <HAL_SPI_TransmitReceive+0x1f4>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d016      	beq.n	8007332 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	b292      	uxth	r2, r2
 8007310:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	1c9a      	adds	r2, r3, #2
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29a      	uxth	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800732e:	2301      	movs	r3, #1
 8007330:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007332:	f7fc f8bb 	bl	80034ac <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800733e:	429a      	cmp	r2, r3
 8007340:	d80b      	bhi.n	800735a <HAL_SPI_TransmitReceive+0x21c>
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007348:	d007      	beq.n	800735a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007358:	e109      	b.n	800756e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d19f      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x166>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800736a:	b29b      	uxth	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d199      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x166>
 8007370:	e0e3      	b.n	800753a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_SPI_TransmitReceive+0x244>
 800737a:	8a7b      	ldrh	r3, [r7, #18]
 800737c:	2b01      	cmp	r3, #1
 800737e:	f040 80cf 	bne.w	8007520 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b01      	cmp	r3, #1
 800738a:	d912      	bls.n	80073b2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	881a      	ldrh	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	1c9a      	adds	r2, r3, #2
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3b02      	subs	r3, #2
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073b0:	e0b6      	b.n	8007520 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	330c      	adds	r3, #12
 80073bc:	7812      	ldrb	r2, [r2, #0]
 80073be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	1c5a      	adds	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d8:	e0a2      	b.n	8007520 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f003 0302 	and.w	r3, r3, #2
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d134      	bne.n	8007452 <HAL_SPI_TransmitReceive+0x314>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d02f      	beq.n	8007452 <HAL_SPI_TransmitReceive+0x314>
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d12c      	bne.n	8007452 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d912      	bls.n	8007428 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	881a      	ldrh	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	1c9a      	adds	r2, r3, #2
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b02      	subs	r3, #2
 8007420:	b29a      	uxth	r2, r3
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007426:	e012      	b.n	800744e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	330c      	adds	r3, #12
 8007432:	7812      	ldrb	r2, [r2, #0]
 8007434:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007444:	b29b      	uxth	r3, r3
 8007446:	3b01      	subs	r3, #1
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b01      	cmp	r3, #1
 800745e:	d148      	bne.n	80074f2 <HAL_SPI_TransmitReceive+0x3b4>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007466:	b29b      	uxth	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d042      	beq.n	80074f2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	d923      	bls.n	80074c0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007482:	b292      	uxth	r2, r2
 8007484:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748a:	1c9a      	adds	r2, r3, #2
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007496:	b29b      	uxth	r3, r3
 8007498:	3b02      	subs	r3, #2
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d81f      	bhi.n	80074ee <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685a      	ldr	r2, [r3, #4]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80074bc:	605a      	str	r2, [r3, #4]
 80074be:	e016      	b.n	80074ee <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f103 020c 	add.w	r2, r3, #12
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074cc:	7812      	ldrb	r2, [r2, #0]
 80074ce:	b2d2      	uxtb	r2, r2
 80074d0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	1c5a      	adds	r2, r3, #1
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	3b01      	subs	r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074ee:	2301      	movs	r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074f2:	f7fb ffdb 	bl	80034ac <HAL_GetTick>
 80074f6:	4602      	mov	r2, r0
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fe:	429a      	cmp	r2, r3
 8007500:	d803      	bhi.n	800750a <HAL_SPI_TransmitReceive+0x3cc>
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007508:	d102      	bne.n	8007510 <HAL_SPI_TransmitReceive+0x3d2>
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	2b00      	cmp	r3, #0
 800750e:	d107      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800751e:	e026      	b.n	800756e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007524:	b29b      	uxth	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	f47f af57 	bne.w	80073da <HAL_SPI_TransmitReceive+0x29c>
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007532:	b29b      	uxth	r3, r3
 8007534:	2b00      	cmp	r3, #0
 8007536:	f47f af50 	bne.w	80073da <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800753a:	69fa      	ldr	r2, [r7, #28]
 800753c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fb26 	bl	8007b90 <SPI_EndRxTxTransaction>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d005      	beq.n	8007556 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755a:	2b00      	cmp	r3, #0
 800755c:	d003      	beq.n	8007566 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007564:	e003      	b.n	800756e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800757a:	4618      	mov	r0, r3
 800757c:	3728      	adds	r7, #40	; 0x28
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	4613      	mov	r3, r2
 8007590:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007592:	2300      	movs	r3, #0
 8007594:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800759c:	2b01      	cmp	r3, #1
 800759e:	d101      	bne.n	80075a4 <HAL_SPI_Transmit_DMA+0x20>
 80075a0:	2302      	movs	r3, #2
 80075a2:	e0d4      	b.n	800774e <HAL_SPI_Transmit_DMA+0x1ca>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d002      	beq.n	80075be <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80075b8:	2302      	movs	r3, #2
 80075ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075bc:	e0c2      	b.n	8007744 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <HAL_SPI_Transmit_DMA+0x46>
 80075c4:	88fb      	ldrh	r3, [r7, #6]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075ce:	e0b9      	b.n	8007744 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2203      	movs	r2, #3
 80075d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	88fa      	ldrh	r2, [r7, #6]
 80075e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	88fa      	ldrh	r2, [r7, #6]
 80075ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800761a:	d10f      	bne.n	800763c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800762a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800763a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007640:	4a45      	ldr	r2, [pc, #276]	; (8007758 <HAL_SPI_Transmit_DMA+0x1d4>)
 8007642:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007648:	4a44      	ldr	r2, [pc, #272]	; (800775c <HAL_SPI_Transmit_DMA+0x1d8>)
 800764a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007650:	4a43      	ldr	r2, [pc, #268]	; (8007760 <HAL_SPI_Transmit_DMA+0x1dc>)
 8007652:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007658:	2200      	movs	r2, #0
 800765a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800766a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007674:	d82d      	bhi.n	80076d2 <HAL_SPI_Transmit_DMA+0x14e>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007680:	d127      	bne.n	80076d2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007686:	b29b      	uxth	r3, r3
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10f      	bne.n	80076b0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685a      	ldr	r2, [r3, #4]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800769e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	085b      	lsrs	r3, r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076ae:	e010      	b.n	80076d2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076be:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	085b      	lsrs	r3, r3, #1
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3301      	adds	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076da:	4619      	mov	r1, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	330c      	adds	r3, #12
 80076e2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80076ea:	f7fd f86e 	bl	80047ca <HAL_DMA_Start_IT>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d008      	beq.n	8007706 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f8:	f043 0210 	orr.w	r2, r3, #16
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007704:	e01e      	b.n	8007744 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	d007      	beq.n	8007724 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007722:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0220 	orr.w	r2, r2, #32
 8007732:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0202 	orr.w	r2, r2, #2
 8007742:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800774c:	7dfb      	ldrb	r3, [r7, #23]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	08007847 	.word	0x08007847
 800775c:	080077a1 	.word	0x080077a1
 8007760:	08007863 	.word	0x08007863

08007764 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077ae:	f7fb fe7d 	bl	80034ac <HAL_GetTick>
 80077b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d03b      	beq.n	800783a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f022 0220 	bic.w	r2, r2, #32
 80077d0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 0202 	bic.w	r2, r2, #2
 80077e0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	2164      	movs	r1, #100	; 0x64
 80077e6:	6978      	ldr	r0, [r7, #20]
 80077e8:	f000 f9d2 	bl	8007b90 <SPI_EndRxTxTransaction>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d005      	beq.n	80077fe <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077f6:	f043 0220 	orr.w	r2, r3, #32
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10a      	bne.n	800781c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	60fb      	str	r3, [r7, #12]
 800781a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	2200      	movs	r2, #0
 8007820:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007832:	6978      	ldr	r0, [r7, #20]
 8007834:	f7ff ffaa 	bl	800778c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007838:	e002      	b.n	8007840 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800783a:	6978      	ldr	r0, [r7, #20]
 800783c:	f7ff ff92 	bl	8007764 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007840:	3718      	adds	r7, #24
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007852:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007854:	68f8      	ldr	r0, [r7, #12]
 8007856:	f7ff ff8f 	bl	8007778 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800785a:	bf00      	nop
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b084      	sub	sp, #16
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f022 0203 	bic.w	r2, r2, #3
 800787e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007884:	f043 0210 	orr.w	r2, r3, #16
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff ff79 	bl	800778c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	4613      	mov	r3, r2
 80078b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80078b4:	f7fb fdfa 	bl	80034ac <HAL_GetTick>
 80078b8:	4602      	mov	r2, r0
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	1a9b      	subs	r3, r3, r2
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	4413      	add	r3, r2
 80078c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80078c4:	f7fb fdf2 	bl	80034ac <HAL_GetTick>
 80078c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80078ca:	4b39      	ldr	r3, [pc, #228]	; (80079b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	015b      	lsls	r3, r3, #5
 80078d0:	0d1b      	lsrs	r3, r3, #20
 80078d2:	69fa      	ldr	r2, [r7, #28]
 80078d4:	fb02 f303 	mul.w	r3, r2, r3
 80078d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078da:	e054      	b.n	8007986 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078e2:	d050      	beq.n	8007986 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80078e4:	f7fb fde2 	bl	80034ac <HAL_GetTick>
 80078e8:	4602      	mov	r2, r0
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d902      	bls.n	80078fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d13d      	bne.n	8007976 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007908:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007912:	d111      	bne.n	8007938 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800791c:	d004      	beq.n	8007928 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007926:	d107      	bne.n	8007938 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007936:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007940:	d10f      	bne.n	8007962 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e017      	b.n	80079a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	3b01      	subs	r3, #1
 8007984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	689a      	ldr	r2, [r3, #8]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4013      	ands	r3, r2
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	429a      	cmp	r2, r3
 8007994:	bf0c      	ite	eq
 8007996:	2301      	moveq	r3, #1
 8007998:	2300      	movne	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	461a      	mov	r2, r3
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d19b      	bne.n	80078dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	2000002c 	.word	0x2000002c

080079b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	; 0x28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80079c6:	f7fb fd71 	bl	80034ac <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	4413      	add	r3, r2
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80079d6:	f7fb fd69 	bl	80034ac <HAL_GetTick>
 80079da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	330c      	adds	r3, #12
 80079e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80079e4:	4b3d      	ldr	r3, [pc, #244]	; (8007adc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	00da      	lsls	r2, r3, #3
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	0d1b      	lsrs	r3, r3, #20
 80079f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80079fc:	e060      	b.n	8007ac0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007a04:	d107      	bne.n	8007a16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d104      	bne.n	8007a16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a1c:	d050      	beq.n	8007ac0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a1e:	f7fb fd45 	bl	80034ac <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d902      	bls.n	8007a34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d13d      	bne.n	8007ab0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a4c:	d111      	bne.n	8007a72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a56:	d004      	beq.n	8007a62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a60:	d107      	bne.n	8007a72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a7a:	d10f      	bne.n	8007a9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e010      	b.n	8007ad2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	3b01      	subs	r3, #1
 8007abe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689a      	ldr	r2, [r3, #8]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d196      	bne.n	80079fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3728      	adds	r7, #40	; 0x28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	2000002c 	.word	0x2000002c

08007ae0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007af4:	d111      	bne.n	8007b1a <SPI_EndRxTransaction+0x3a>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007afe:	d004      	beq.n	8007b0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b08:	d107      	bne.n	8007b1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b18:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	2180      	movs	r1, #128	; 0x80
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff febd 	bl	80078a4 <SPI_WaitFlagStateUntilTimeout>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d007      	beq.n	8007b40 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b34:	f043 0220 	orr.w	r2, r3, #32
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	e023      	b.n	8007b88 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b48:	d11d      	bne.n	8007b86 <SPI_EndRxTransaction+0xa6>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b52:	d004      	beq.n	8007b5e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b5c:	d113      	bne.n	8007b86 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f7ff ff22 	bl	80079b4 <SPI_WaitFifoStateUntilTimeout>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d007      	beq.n	8007b86 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b7a:	f043 0220 	orr.w	r2, r3, #32
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e000      	b.n	8007b88 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff ff03 	bl	80079b4 <SPI_WaitFifoStateUntilTimeout>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d007      	beq.n	8007bc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bb8:	f043 0220 	orr.w	r2, r3, #32
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e027      	b.n	8007c14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2180      	movs	r1, #128	; 0x80
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f7ff fe68 	bl	80078a4 <SPI_WaitFlagStateUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bde:	f043 0220 	orr.w	r2, r3, #32
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e014      	b.n	8007c14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fedc 	bl	80079b4 <SPI_WaitFifoStateUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	e000      	b.n	8007c14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e049      	b.n	8007cc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d106      	bne.n	8007c48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7fb fa10 	bl	8003068 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2202      	movs	r2, #2
 8007c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	3304      	adds	r3, #4
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f000 fbfe 	bl	800845c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d001      	beq.n	8007ce4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e03b      	b.n	8007d5c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68da      	ldr	r2, [r3, #12]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0201 	orr.w	r2, r2, #1
 8007cfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a19      	ldr	r2, [pc, #100]	; (8007d68 <HAL_TIM_Base_Start_IT+0x9c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d009      	beq.n	8007d1a <HAL_TIM_Base_Start_IT+0x4e>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d0e:	d004      	beq.n	8007d1a <HAL_TIM_Base_Start_IT+0x4e>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a15      	ldr	r2, [pc, #84]	; (8007d6c <HAL_TIM_Base_Start_IT+0xa0>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d115      	bne.n	8007d46 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	4b13      	ldr	r3, [pc, #76]	; (8007d70 <HAL_TIM_Base_Start_IT+0xa4>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2b06      	cmp	r3, #6
 8007d2a:	d015      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0x8c>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d32:	d011      	beq.n	8007d58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d44:	e008      	b.n	8007d58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f042 0201 	orr.w	r2, r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	e000      	b.n	8007d5a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	40012c00 	.word	0x40012c00
 8007d6c:	40014000 	.word	0x40014000
 8007d70:	00010007 	.word	0x00010007

08007d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	e049      	b.n	8007e1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7fb f944 	bl	8003028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3304      	adds	r3, #4
 8007db0:	4619      	mov	r1, r3
 8007db2:	4610      	mov	r0, r2
 8007db4:	f000 fb52 	bl	800845c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d109      	bne.n	8007e48 <HAL_TIM_PWM_Start+0x24>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	bf14      	ite	ne
 8007e40:	2301      	movne	r3, #1
 8007e42:	2300      	moveq	r3, #0
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	e03c      	b.n	8007ec2 <HAL_TIM_PWM_Start+0x9e>
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d109      	bne.n	8007e62 <HAL_TIM_PWM_Start+0x3e>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	bf14      	ite	ne
 8007e5a:	2301      	movne	r3, #1
 8007e5c:	2300      	moveq	r3, #0
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	e02f      	b.n	8007ec2 <HAL_TIM_PWM_Start+0x9e>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d109      	bne.n	8007e7c <HAL_TIM_PWM_Start+0x58>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	bf14      	ite	ne
 8007e74:	2301      	movne	r3, #1
 8007e76:	2300      	moveq	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	e022      	b.n	8007ec2 <HAL_TIM_PWM_Start+0x9e>
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b0c      	cmp	r3, #12
 8007e80:	d109      	bne.n	8007e96 <HAL_TIM_PWM_Start+0x72>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	bf14      	ite	ne
 8007e8e:	2301      	movne	r3, #1
 8007e90:	2300      	moveq	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	e015      	b.n	8007ec2 <HAL_TIM_PWM_Start+0x9e>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b10      	cmp	r3, #16
 8007e9a:	d109      	bne.n	8007eb0 <HAL_TIM_PWM_Start+0x8c>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	bf14      	ite	ne
 8007ea8:	2301      	movne	r3, #1
 8007eaa:	2300      	moveq	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	e008      	b.n	8007ec2 <HAL_TIM_PWM_Start+0x9e>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	bf14      	ite	ne
 8007ebc:	2301      	movne	r3, #1
 8007ebe:	2300      	moveq	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e07e      	b.n	8007fc8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d104      	bne.n	8007eda <HAL_TIM_PWM_Start+0xb6>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ed8:	e023      	b.n	8007f22 <HAL_TIM_PWM_Start+0xfe>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b04      	cmp	r3, #4
 8007ede:	d104      	bne.n	8007eea <HAL_TIM_PWM_Start+0xc6>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ee8:	e01b      	b.n	8007f22 <HAL_TIM_PWM_Start+0xfe>
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b08      	cmp	r3, #8
 8007eee:	d104      	bne.n	8007efa <HAL_TIM_PWM_Start+0xd6>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ef8:	e013      	b.n	8007f22 <HAL_TIM_PWM_Start+0xfe>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b0c      	cmp	r3, #12
 8007efe:	d104      	bne.n	8007f0a <HAL_TIM_PWM_Start+0xe6>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f08:	e00b      	b.n	8007f22 <HAL_TIM_PWM_Start+0xfe>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d104      	bne.n	8007f1a <HAL_TIM_PWM_Start+0xf6>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f18:	e003      	b.n	8007f22 <HAL_TIM_PWM_Start+0xfe>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2202      	movs	r2, #2
 8007f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2201      	movs	r2, #1
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fd78 	bl	8008a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a26      	ldr	r2, [pc, #152]	; (8007fd0 <HAL_TIM_PWM_Start+0x1ac>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d009      	beq.n	8007f4e <HAL_TIM_PWM_Start+0x12a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a25      	ldr	r2, [pc, #148]	; (8007fd4 <HAL_TIM_PWM_Start+0x1b0>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d004      	beq.n	8007f4e <HAL_TIM_PWM_Start+0x12a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a23      	ldr	r2, [pc, #140]	; (8007fd8 <HAL_TIM_PWM_Start+0x1b4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d101      	bne.n	8007f52 <HAL_TIM_PWM_Start+0x12e>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e000      	b.n	8007f54 <HAL_TIM_PWM_Start+0x130>
 8007f52:	2300      	movs	r3, #0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a18      	ldr	r2, [pc, #96]	; (8007fd0 <HAL_TIM_PWM_Start+0x1ac>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d009      	beq.n	8007f86 <HAL_TIM_PWM_Start+0x162>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7a:	d004      	beq.n	8007f86 <HAL_TIM_PWM_Start+0x162>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a14      	ldr	r2, [pc, #80]	; (8007fd4 <HAL_TIM_PWM_Start+0x1b0>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d115      	bne.n	8007fb2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <HAL_TIM_PWM_Start+0x1b8>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2b06      	cmp	r3, #6
 8007f96:	d015      	beq.n	8007fc4 <HAL_TIM_PWM_Start+0x1a0>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f9e:	d011      	beq.n	8007fc4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f042 0201 	orr.w	r2, r2, #1
 8007fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fb0:	e008      	b.n	8007fc4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f042 0201 	orr.w	r2, r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	e000      	b.n	8007fc6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40012c00 	.word	0x40012c00
 8007fd4:	40014000 	.word	0x40014000
 8007fd8:	40014400 	.word	0x40014400
 8007fdc:	00010007 	.word	0x00010007

08007fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d020      	beq.n	8008044 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f003 0302 	and.w	r3, r3, #2
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01b      	beq.n	8008044 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f06f 0202 	mvn.w	r2, #2
 8008014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	f003 0303 	and.w	r3, r3, #3
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f9f8 	bl	8008420 <HAL_TIM_IC_CaptureCallback>
 8008030:	e005      	b.n	800803e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f9ea 	bl	800840c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f9fb 	bl	8008434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d020      	beq.n	8008090 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01b      	beq.n	8008090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f06f 0204 	mvn.w	r2, #4
 8008060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	699b      	ldr	r3, [r3, #24]
 800806e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008072:	2b00      	cmp	r3, #0
 8008074:	d003      	beq.n	800807e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f9d2 	bl	8008420 <HAL_TIM_IC_CaptureCallback>
 800807c:	e005      	b.n	800808a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f9c4 	bl	800840c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f9d5 	bl	8008434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d020      	beq.n	80080dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f003 0308 	and.w	r3, r3, #8
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01b      	beq.n	80080dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f06f 0208 	mvn.w	r2, #8
 80080ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2204      	movs	r2, #4
 80080b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	f003 0303 	and.w	r3, r3, #3
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f9ac 	bl	8008420 <HAL_TIM_IC_CaptureCallback>
 80080c8:	e005      	b.n	80080d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f99e 	bl	800840c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f9af 	bl	8008434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f003 0310 	and.w	r3, r3, #16
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d020      	beq.n	8008128 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f003 0310 	and.w	r3, r3, #16
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01b      	beq.n	8008128 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f06f 0210 	mvn.w	r2, #16
 80080f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2208      	movs	r2, #8
 80080fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f986 	bl	8008420 <HAL_TIM_IC_CaptureCallback>
 8008114:	e005      	b.n	8008122 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f978 	bl	800840c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f989 	bl	8008434 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00c      	beq.n	800814c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d007      	beq.n	800814c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0201 	mvn.w	r2, #1
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7fa f8b4 	bl	80022b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 fd66 	bl	8008c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00c      	beq.n	8008194 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008180:	2b00      	cmp	r3, #0
 8008182:	d007      	beq.n	8008194 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800818c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fd5e 	bl	8008c50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00c      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d007      	beq.n	80081b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f948 	bl	8008448 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00c      	beq.n	80081dc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f003 0320 	and.w	r3, r3, #32
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d007      	beq.n	80081dc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f06f 0220 	mvn.w	r2, #32
 80081d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fd26 	bl	8008c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081dc:	bf00      	nop
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d101      	bne.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80081fe:	2302      	movs	r3, #2
 8008200:	e0ff      	b.n	8008402 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b14      	cmp	r3, #20
 800820e:	f200 80f0 	bhi.w	80083f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008212:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008218:	0800826d 	.word	0x0800826d
 800821c:	080083f3 	.word	0x080083f3
 8008220:	080083f3 	.word	0x080083f3
 8008224:	080083f3 	.word	0x080083f3
 8008228:	080082ad 	.word	0x080082ad
 800822c:	080083f3 	.word	0x080083f3
 8008230:	080083f3 	.word	0x080083f3
 8008234:	080083f3 	.word	0x080083f3
 8008238:	080082ef 	.word	0x080082ef
 800823c:	080083f3 	.word	0x080083f3
 8008240:	080083f3 	.word	0x080083f3
 8008244:	080083f3 	.word	0x080083f3
 8008248:	0800832f 	.word	0x0800832f
 800824c:	080083f3 	.word	0x080083f3
 8008250:	080083f3 	.word	0x080083f3
 8008254:	080083f3 	.word	0x080083f3
 8008258:	08008371 	.word	0x08008371
 800825c:	080083f3 	.word	0x080083f3
 8008260:	080083f3 	.word	0x080083f3
 8008264:	080083f3 	.word	0x080083f3
 8008268:	080083b1 	.word	0x080083b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68b9      	ldr	r1, [r7, #8]
 8008272:	4618      	mov	r0, r3
 8008274:	f000 f956 	bl	8008524 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0208 	orr.w	r2, r2, #8
 8008286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0204 	bic.w	r2, r2, #4
 8008296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6999      	ldr	r1, [r3, #24]
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	691a      	ldr	r2, [r3, #16]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	430a      	orrs	r2, r1
 80082a8:	619a      	str	r2, [r3, #24]
      break;
 80082aa:	e0a5      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68b9      	ldr	r1, [r7, #8]
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 f9b2 	bl	800861c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	6999      	ldr	r1, [r3, #24]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	021a      	lsls	r2, r3, #8
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	619a      	str	r2, [r3, #24]
      break;
 80082ec:	e084      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68b9      	ldr	r1, [r7, #8]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f000 fa0b 	bl	8008710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69da      	ldr	r2, [r3, #28]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f042 0208 	orr.w	r2, r2, #8
 8008308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69da      	ldr	r2, [r3, #28]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0204 	bic.w	r2, r2, #4
 8008318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	69d9      	ldr	r1, [r3, #28]
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	61da      	str	r2, [r3, #28]
      break;
 800832c:	e064      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fa63 	bl	8008800 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69d9      	ldr	r1, [r3, #28]
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	021a      	lsls	r2, r3, #8
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	61da      	str	r2, [r3, #28]
      break;
 800836e:	e043      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68b9      	ldr	r1, [r7, #8]
 8008376:	4618      	mov	r0, r3
 8008378:	f000 faa0 	bl	80088bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f042 0208 	orr.w	r2, r2, #8
 800838a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f022 0204 	bic.w	r2, r2, #4
 800839a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	691a      	ldr	r2, [r3, #16]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	430a      	orrs	r2, r1
 80083ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083ae:	e023      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68b9      	ldr	r1, [r7, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 fad8 	bl	800896c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	021a      	lsls	r2, r3, #8
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	430a      	orrs	r2, r1
 80083ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083f0:	e002      	b.n	80083f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80083f2:	2301      	movs	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
      break;
 80083f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008400:	7dfb      	ldrb	r3, [r7, #23]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3718      	adds	r7, #24
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop

0800840c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a2a      	ldr	r2, [pc, #168]	; (8008518 <TIM_Base_SetConfig+0xbc>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d003      	beq.n	800847c <TIM_Base_SetConfig+0x20>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847a:	d108      	bne.n	800848e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	68fa      	ldr	r2, [r7, #12]
 800848a:	4313      	orrs	r3, r2
 800848c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a21      	ldr	r2, [pc, #132]	; (8008518 <TIM_Base_SetConfig+0xbc>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d00b      	beq.n	80084ae <TIM_Base_SetConfig+0x52>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800849c:	d007      	beq.n	80084ae <TIM_Base_SetConfig+0x52>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a1e      	ldr	r2, [pc, #120]	; (800851c <TIM_Base_SetConfig+0xc0>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d003      	beq.n	80084ae <TIM_Base_SetConfig+0x52>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a1d      	ldr	r2, [pc, #116]	; (8008520 <TIM_Base_SetConfig+0xc4>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d108      	bne.n	80084c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	4313      	orrs	r3, r2
 80084be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a0c      	ldr	r2, [pc, #48]	; (8008518 <TIM_Base_SetConfig+0xbc>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d007      	beq.n	80084fc <TIM_Base_SetConfig+0xa0>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a0b      	ldr	r2, [pc, #44]	; (800851c <TIM_Base_SetConfig+0xc0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d003      	beq.n	80084fc <TIM_Base_SetConfig+0xa0>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <TIM_Base_SetConfig+0xc4>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d103      	bne.n	8008504 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	691a      	ldr	r2, [r3, #16]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	615a      	str	r2, [r3, #20]
}
 800850a:	bf00      	nop
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	40012c00 	.word	0x40012c00
 800851c:	40014000 	.word	0x40014000
 8008520:	40014400 	.word	0x40014400

08008524 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f023 0201 	bic.w	r2, r3, #1
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f023 0303 	bic.w	r3, r3, #3
 800855e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4313      	orrs	r3, r2
 8008568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f023 0302 	bic.w	r3, r3, #2
 8008570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a24      	ldr	r2, [pc, #144]	; (8008610 <TIM_OC1_SetConfig+0xec>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d007      	beq.n	8008594 <TIM_OC1_SetConfig+0x70>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a23      	ldr	r2, [pc, #140]	; (8008614 <TIM_OC1_SetConfig+0xf0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d003      	beq.n	8008594 <TIM_OC1_SetConfig+0x70>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a22      	ldr	r2, [pc, #136]	; (8008618 <TIM_OC1_SetConfig+0xf4>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d10c      	bne.n	80085ae <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	f023 0308 	bic.w	r3, r3, #8
 800859a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f023 0304 	bic.w	r3, r3, #4
 80085ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a17      	ldr	r2, [pc, #92]	; (8008610 <TIM_OC1_SetConfig+0xec>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d007      	beq.n	80085c6 <TIM_OC1_SetConfig+0xa2>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a16      	ldr	r2, [pc, #88]	; (8008614 <TIM_OC1_SetConfig+0xf0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d003      	beq.n	80085c6 <TIM_OC1_SetConfig+0xa2>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a15      	ldr	r2, [pc, #84]	; (8008618 <TIM_OC1_SetConfig+0xf4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d111      	bne.n	80085ea <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80085d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	4313      	orrs	r3, r2
 80085de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	621a      	str	r2, [r3, #32]
}
 8008604:	bf00      	nop
 8008606:	371c      	adds	r7, #28
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	40012c00 	.word	0x40012c00
 8008614:	40014000 	.word	0x40014000
 8008618:	40014400 	.word	0x40014400

0800861c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a1b      	ldr	r3, [r3, #32]
 8008630:	f023 0210 	bic.w	r2, r3, #16
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	699b      	ldr	r3, [r3, #24]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800864a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800864e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	f023 0320 	bic.w	r3, r3, #32
 800866a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	011b      	lsls	r3, r3, #4
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a22      	ldr	r2, [pc, #136]	; (8008704 <TIM_OC2_SetConfig+0xe8>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d10d      	bne.n	800869c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	011b      	lsls	r3, r3, #4
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	4313      	orrs	r3, r2
 8008692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a19      	ldr	r2, [pc, #100]	; (8008704 <TIM_OC2_SetConfig+0xe8>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d007      	beq.n	80086b4 <TIM_OC2_SetConfig+0x98>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	4a18      	ldr	r2, [pc, #96]	; (8008708 <TIM_OC2_SetConfig+0xec>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d003      	beq.n	80086b4 <TIM_OC2_SetConfig+0x98>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a17      	ldr	r2, [pc, #92]	; (800870c <TIM_OC2_SetConfig+0xf0>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d113      	bne.n	80086dc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80086ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80086c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	695b      	ldr	r3, [r3, #20]
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	693a      	ldr	r2, [r7, #16]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	699b      	ldr	r3, [r3, #24]
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	621a      	str	r2, [r3, #32]
}
 80086f6:	bf00      	nop
 80086f8:	371c      	adds	r7, #28
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	40012c00 	.word	0x40012c00
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400

08008710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008710:	b480      	push	{r7}
 8008712:	b087      	sub	sp, #28
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6a1b      	ldr	r3, [r3, #32]
 800871e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800873e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f023 0303 	bic.w	r3, r3, #3
 800874a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4313      	orrs	r3, r2
 8008754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800875c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a21      	ldr	r2, [pc, #132]	; (80087f4 <TIM_OC3_SetConfig+0xe4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d10d      	bne.n	800878e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	021b      	lsls	r3, r3, #8
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	4313      	orrs	r3, r2
 8008784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800878c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a18      	ldr	r2, [pc, #96]	; (80087f4 <TIM_OC3_SetConfig+0xe4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d007      	beq.n	80087a6 <TIM_OC3_SetConfig+0x96>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a17      	ldr	r2, [pc, #92]	; (80087f8 <TIM_OC3_SetConfig+0xe8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d003      	beq.n	80087a6 <TIM_OC3_SetConfig+0x96>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a16      	ldr	r2, [pc, #88]	; (80087fc <TIM_OC3_SetConfig+0xec>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d113      	bne.n	80087ce <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80087b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	4313      	orrs	r3, r2
 80087c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	699b      	ldr	r3, [r3, #24]
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	621a      	str	r2, [r3, #32]
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	40012c00 	.word	0x40012c00
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40014400 	.word	0x40014400

08008800 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	69db      	ldr	r3, [r3, #28]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800882e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800884e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	031b      	lsls	r3, r3, #12
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a14      	ldr	r2, [pc, #80]	; (80088b0 <TIM_OC4_SetConfig+0xb0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d007      	beq.n	8008874 <TIM_OC4_SetConfig+0x74>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a13      	ldr	r2, [pc, #76]	; (80088b4 <TIM_OC4_SetConfig+0xb4>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d003      	beq.n	8008874 <TIM_OC4_SetConfig+0x74>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a12      	ldr	r2, [pc, #72]	; (80088b8 <TIM_OC4_SetConfig+0xb8>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d109      	bne.n	8008888 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800887a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	019b      	lsls	r3, r3, #6
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	4313      	orrs	r3, r2
 8008886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	697a      	ldr	r2, [r7, #20]
 800888c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	621a      	str	r2, [r3, #32]
}
 80088a2:	bf00      	nop
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	40012c00 	.word	0x40012c00
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40014400 	.word	0x40014400

080088bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68fa      	ldr	r2, [r7, #12]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008900:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	041b      	lsls	r3, r3, #16
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	4313      	orrs	r3, r2
 800890c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a13      	ldr	r2, [pc, #76]	; (8008960 <TIM_OC5_SetConfig+0xa4>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d007      	beq.n	8008926 <TIM_OC5_SetConfig+0x6a>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a12      	ldr	r2, [pc, #72]	; (8008964 <TIM_OC5_SetConfig+0xa8>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d003      	beq.n	8008926 <TIM_OC5_SetConfig+0x6a>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a11      	ldr	r2, [pc, #68]	; (8008968 <TIM_OC5_SetConfig+0xac>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d109      	bne.n	800893a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800892c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	021b      	lsls	r3, r3, #8
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	685a      	ldr	r2, [r3, #4]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	621a      	str	r2, [r3, #32]
}
 8008954:	bf00      	nop
 8008956:	371c      	adds	r7, #28
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	40012c00 	.word	0x40012c00
 8008964:	40014000 	.word	0x40014000
 8008968:	40014400 	.word	0x40014400

0800896c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a1b      	ldr	r3, [r3, #32]
 8008980:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	051b      	lsls	r3, r3, #20
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a14      	ldr	r2, [pc, #80]	; (8008a14 <TIM_OC6_SetConfig+0xa8>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d007      	beq.n	80089d8 <TIM_OC6_SetConfig+0x6c>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a13      	ldr	r2, [pc, #76]	; (8008a18 <TIM_OC6_SetConfig+0xac>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d003      	beq.n	80089d8 <TIM_OC6_SetConfig+0x6c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a12      	ldr	r2, [pc, #72]	; (8008a1c <TIM_OC6_SetConfig+0xb0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d109      	bne.n	80089ec <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	029b      	lsls	r3, r3, #10
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	40012c00 	.word	0x40012c00
 8008a18:	40014000 	.word	0x40014000
 8008a1c:	40014400 	.word	0x40014400

08008a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f003 031f 	and.w	r3, r3, #31
 8008a32:	2201      	movs	r2, #1
 8008a34:	fa02 f303 	lsl.w	r3, r2, r3
 8008a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a1a      	ldr	r2, [r3, #32]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	43db      	mvns	r3, r3
 8008a42:	401a      	ands	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a1a      	ldr	r2, [r3, #32]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	f003 031f 	and.w	r3, r3, #31
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	fa01 f303 	lsl.w	r3, r1, r3
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	621a      	str	r2, [r3, #32]
}
 8008a5e:	bf00      	nop
 8008a60:	371c      	adds	r7, #28
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
	...

08008a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b085      	sub	sp, #20
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d101      	bne.n	8008a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a80:	2302      	movs	r3, #2
 8008a82:	e04f      	b.n	8008b24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a21      	ldr	r2, [pc, #132]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d108      	bne.n	8008ac0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ab4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a14      	ldr	r2, [pc, #80]	; (8008b30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d009      	beq.n	8008af8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aec:	d004      	beq.n	8008af8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a10      	ldr	r2, [pc, #64]	; (8008b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d10c      	bne.n	8008b12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008afe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	68ba      	ldr	r2, [r7, #8]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2201      	movs	r2, #1
 8008b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3714      	adds	r7, #20
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	40012c00 	.word	0x40012c00
 8008b34:	40014000 	.word	0x40014000

08008b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e060      	b.n	8008c16 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	041b      	lsls	r3, r3, #16
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a14      	ldr	r2, [pc, #80]	; (8008c24 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d115      	bne.n	8008c04 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be2:	051b      	lsls	r3, r3, #20
 8008be4:	4313      	orrs	r3, r2
 8008be6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68fa      	ldr	r2, [r7, #12]
 8008c0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3714      	adds	r7, #20
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	40012c00 	.word	0x40012c00

08008c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c58:	bf00      	nop
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d101      	bne.n	8008c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e040      	b.n	8008cf8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d106      	bne.n	8008c8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7fa f8ce 	bl	8002e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2224      	movs	r2, #36	; 0x24
 8008c90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f022 0201 	bic.w	r2, r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fba8 	bl	8009400 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f979 	bl	8008fa8 <UART_SetConfig>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	e01b      	b.n	8008cf8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685a      	ldr	r2, [r3, #4]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008cce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f042 0201 	orr.w	r2, r2, #1
 8008cee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fc27 	bl	8009544 <UART_CheckIdleState>
 8008cf6:	4603      	mov	r3, r0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b08a      	sub	sp, #40	; 0x28
 8008d04:	af02      	add	r7, sp, #8
 8008d06:	60f8      	str	r0, [r7, #12]
 8008d08:	60b9      	str	r1, [r7, #8]
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d14:	2b20      	cmp	r3, #32
 8008d16:	d178      	bne.n	8008e0a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <HAL_UART_Transmit+0x24>
 8008d1e:	88fb      	ldrh	r3, [r7, #6]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e071      	b.n	8008e0c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2221      	movs	r2, #33	; 0x21
 8008d34:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d36:	f7fa fbb9 	bl	80034ac <HAL_GetTick>
 8008d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	88fa      	ldrh	r2, [r7, #6]
 8008d40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	88fa      	ldrh	r2, [r7, #6]
 8008d48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d54:	d108      	bne.n	8008d68 <HAL_UART_Transmit+0x68>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	61bb      	str	r3, [r7, #24]
 8008d66:	e003      	b.n	8008d70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d70:	e030      	b.n	8008dd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2180      	movs	r1, #128	; 0x80
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 fc89 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d004      	beq.n	8008d92 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2220      	movs	r2, #32
 8008d8c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e03c      	b.n	8008e0c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10b      	bne.n	8008db0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	881a      	ldrh	r2, [r3, #0]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008da4:	b292      	uxth	r2, r2
 8008da6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	3302      	adds	r3, #2
 8008dac:	61bb      	str	r3, [r7, #24]
 8008dae:	e008      	b.n	8008dc2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	781a      	ldrb	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	b292      	uxth	r2, r2
 8008dba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	b29a      	uxth	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1c8      	bne.n	8008d72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2200      	movs	r2, #0
 8008de8:	2140      	movs	r1, #64	; 0x40
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 fc52 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d004      	beq.n	8008e00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e005      	b.n	8008e0c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2220      	movs	r2, #32
 8008e04:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e000      	b.n	8008e0c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008e0a:	2302      	movs	r3, #2
  }
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3720      	adds	r7, #32
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b08a      	sub	sp, #40	; 0x28
 8008e18:	af02      	add	r7, sp, #8
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	603b      	str	r3, [r7, #0]
 8008e20:	4613      	mov	r3, r2
 8008e22:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e2a:	2b20      	cmp	r3, #32
 8008e2c:	f040 80b6 	bne.w	8008f9c <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <HAL_UART_Receive+0x28>
 8008e36:	88fb      	ldrh	r3, [r7, #6]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d101      	bne.n	8008e40 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e0ae      	b.n	8008f9e <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2222      	movs	r2, #34	; 0x22
 8008e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e56:	f7fa fb29 	bl	80034ac <HAL_GetTick>
 8008e5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	88fa      	ldrh	r2, [r7, #6]
 8008e60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e74:	d10e      	bne.n	8008e94 <HAL_UART_Receive+0x80>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	691b      	ldr	r3, [r3, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d105      	bne.n	8008e8a <HAL_UART_Receive+0x76>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e88:	e02d      	b.n	8008ee6 <HAL_UART_Receive+0xd2>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	22ff      	movs	r2, #255	; 0xff
 8008e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008e92:	e028      	b.n	8008ee6 <HAL_UART_Receive+0xd2>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10d      	bne.n	8008eb8 <HAL_UART_Receive+0xa4>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <HAL_UART_Receive+0x9a>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	22ff      	movs	r2, #255	; 0xff
 8008ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008eac:	e01b      	b.n	8008ee6 <HAL_UART_Receive+0xd2>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	227f      	movs	r2, #127	; 0x7f
 8008eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008eb6:	e016      	b.n	8008ee6 <HAL_UART_Receive+0xd2>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ec0:	d10d      	bne.n	8008ede <HAL_UART_Receive+0xca>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d104      	bne.n	8008ed4 <HAL_UART_Receive+0xc0>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	227f      	movs	r2, #127	; 0x7f
 8008ece:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008ed2:	e008      	b.n	8008ee6 <HAL_UART_Receive+0xd2>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	223f      	movs	r2, #63	; 0x3f
 8008ed8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008edc:	e003      	b.n	8008ee6 <HAL_UART_Receive+0xd2>
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008eec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ef6:	d108      	bne.n	8008f0a <HAL_UART_Receive+0xf6>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d104      	bne.n	8008f0a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	61bb      	str	r3, [r7, #24]
 8008f08:	e003      	b.n	8008f12 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008f12:	e037      	b.n	8008f84 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2120      	movs	r1, #32
 8008f1e:	68f8      	ldr	r0, [r7, #12]
 8008f20:	f000 fbb8 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e033      	b.n	8008f9e <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10c      	bne.n	8008f56 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	8a7b      	ldrh	r3, [r7, #18]
 8008f46:	4013      	ands	r3, r2
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	3302      	adds	r3, #2
 8008f52:	61bb      	str	r3, [r7, #24]
 8008f54:	e00d      	b.n	8008f72 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	b2da      	uxtb	r2, r3
 8008f60:	8a7b      	ldrh	r3, [r7, #18]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	4013      	ands	r3, r2
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d1c1      	bne.n	8008f14 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e000      	b.n	8008f9e <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8008f9c:	2302      	movs	r3, #2
  }
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fac:	b08a      	sub	sp, #40	; 0x28
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	431a      	orrs	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	695b      	ldr	r3, [r3, #20]
 8008fc6:	431a      	orrs	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	4bb4      	ldr	r3, [pc, #720]	; (80092a8 <UART_SetConfig+0x300>)
 8008fd8:	4013      	ands	r3, r2
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	6812      	ldr	r2, [r2, #0]
 8008fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4aa9      	ldr	r2, [pc, #676]	; (80092ac <UART_SetConfig+0x304>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d004      	beq.n	8009014 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a1b      	ldr	r3, [r3, #32]
 800900e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009010:	4313      	orrs	r3, r2
 8009012:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009024:	430a      	orrs	r2, r1
 8009026:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4aa0      	ldr	r2, [pc, #640]	; (80092b0 <UART_SetConfig+0x308>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d126      	bne.n	8009080 <UART_SetConfig+0xd8>
 8009032:	4ba0      	ldr	r3, [pc, #640]	; (80092b4 <UART_SetConfig+0x30c>)
 8009034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	2b03      	cmp	r3, #3
 800903e:	d81b      	bhi.n	8009078 <UART_SetConfig+0xd0>
 8009040:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <UART_SetConfig+0xa0>)
 8009042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009046:	bf00      	nop
 8009048:	08009059 	.word	0x08009059
 800904c:	08009069 	.word	0x08009069
 8009050:	08009061 	.word	0x08009061
 8009054:	08009071 	.word	0x08009071
 8009058:	2301      	movs	r3, #1
 800905a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800905e:	e080      	b.n	8009162 <UART_SetConfig+0x1ba>
 8009060:	2302      	movs	r3, #2
 8009062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009066:	e07c      	b.n	8009162 <UART_SetConfig+0x1ba>
 8009068:	2304      	movs	r3, #4
 800906a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800906e:	e078      	b.n	8009162 <UART_SetConfig+0x1ba>
 8009070:	2308      	movs	r3, #8
 8009072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009076:	e074      	b.n	8009162 <UART_SetConfig+0x1ba>
 8009078:	2310      	movs	r3, #16
 800907a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800907e:	e070      	b.n	8009162 <UART_SetConfig+0x1ba>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a8c      	ldr	r2, [pc, #560]	; (80092b8 <UART_SetConfig+0x310>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d138      	bne.n	80090fc <UART_SetConfig+0x154>
 800908a:	4b8a      	ldr	r3, [pc, #552]	; (80092b4 <UART_SetConfig+0x30c>)
 800908c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009090:	f003 030c 	and.w	r3, r3, #12
 8009094:	2b0c      	cmp	r3, #12
 8009096:	d82d      	bhi.n	80090f4 <UART_SetConfig+0x14c>
 8009098:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <UART_SetConfig+0xf8>)
 800909a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909e:	bf00      	nop
 80090a0:	080090d5 	.word	0x080090d5
 80090a4:	080090f5 	.word	0x080090f5
 80090a8:	080090f5 	.word	0x080090f5
 80090ac:	080090f5 	.word	0x080090f5
 80090b0:	080090e5 	.word	0x080090e5
 80090b4:	080090f5 	.word	0x080090f5
 80090b8:	080090f5 	.word	0x080090f5
 80090bc:	080090f5 	.word	0x080090f5
 80090c0:	080090dd 	.word	0x080090dd
 80090c4:	080090f5 	.word	0x080090f5
 80090c8:	080090f5 	.word	0x080090f5
 80090cc:	080090f5 	.word	0x080090f5
 80090d0:	080090ed 	.word	0x080090ed
 80090d4:	2300      	movs	r3, #0
 80090d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090da:	e042      	b.n	8009162 <UART_SetConfig+0x1ba>
 80090dc:	2302      	movs	r3, #2
 80090de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090e2:	e03e      	b.n	8009162 <UART_SetConfig+0x1ba>
 80090e4:	2304      	movs	r3, #4
 80090e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090ea:	e03a      	b.n	8009162 <UART_SetConfig+0x1ba>
 80090ec:	2308      	movs	r3, #8
 80090ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090f2:	e036      	b.n	8009162 <UART_SetConfig+0x1ba>
 80090f4:	2310      	movs	r3, #16
 80090f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80090fa:	e032      	b.n	8009162 <UART_SetConfig+0x1ba>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a6a      	ldr	r2, [pc, #424]	; (80092ac <UART_SetConfig+0x304>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d12a      	bne.n	800915c <UART_SetConfig+0x1b4>
 8009106:	4b6b      	ldr	r3, [pc, #428]	; (80092b4 <UART_SetConfig+0x30c>)
 8009108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800910c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009114:	d01a      	beq.n	800914c <UART_SetConfig+0x1a4>
 8009116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800911a:	d81b      	bhi.n	8009154 <UART_SetConfig+0x1ac>
 800911c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009120:	d00c      	beq.n	800913c <UART_SetConfig+0x194>
 8009122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009126:	d815      	bhi.n	8009154 <UART_SetConfig+0x1ac>
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <UART_SetConfig+0x18c>
 800912c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009130:	d008      	beq.n	8009144 <UART_SetConfig+0x19c>
 8009132:	e00f      	b.n	8009154 <UART_SetConfig+0x1ac>
 8009134:	2300      	movs	r3, #0
 8009136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800913a:	e012      	b.n	8009162 <UART_SetConfig+0x1ba>
 800913c:	2302      	movs	r3, #2
 800913e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009142:	e00e      	b.n	8009162 <UART_SetConfig+0x1ba>
 8009144:	2304      	movs	r3, #4
 8009146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800914a:	e00a      	b.n	8009162 <UART_SetConfig+0x1ba>
 800914c:	2308      	movs	r3, #8
 800914e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009152:	e006      	b.n	8009162 <UART_SetConfig+0x1ba>
 8009154:	2310      	movs	r3, #16
 8009156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800915a:	e002      	b.n	8009162 <UART_SetConfig+0x1ba>
 800915c:	2310      	movs	r3, #16
 800915e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a51      	ldr	r2, [pc, #324]	; (80092ac <UART_SetConfig+0x304>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d17a      	bne.n	8009262 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800916c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009170:	2b08      	cmp	r3, #8
 8009172:	d824      	bhi.n	80091be <UART_SetConfig+0x216>
 8009174:	a201      	add	r2, pc, #4	; (adr r2, 800917c <UART_SetConfig+0x1d4>)
 8009176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917a:	bf00      	nop
 800917c:	080091a1 	.word	0x080091a1
 8009180:	080091bf 	.word	0x080091bf
 8009184:	080091a9 	.word	0x080091a9
 8009188:	080091bf 	.word	0x080091bf
 800918c:	080091af 	.word	0x080091af
 8009190:	080091bf 	.word	0x080091bf
 8009194:	080091bf 	.word	0x080091bf
 8009198:	080091bf 	.word	0x080091bf
 800919c:	080091b7 	.word	0x080091b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091a0:	f7fd f90a 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 80091a4:	61f8      	str	r0, [r7, #28]
        break;
 80091a6:	e010      	b.n	80091ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091a8:	4b44      	ldr	r3, [pc, #272]	; (80092bc <UART_SetConfig+0x314>)
 80091aa:	61fb      	str	r3, [r7, #28]
        break;
 80091ac:	e00d      	b.n	80091ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ae:	f7fd f86b 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 80091b2:	61f8      	str	r0, [r7, #28]
        break;
 80091b4:	e009      	b.n	80091ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ba:	61fb      	str	r3, [r7, #28]
        break;
 80091bc:	e005      	b.n	80091ca <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80091c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	f000 8107 	beq.w	80093e0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	4413      	add	r3, r2
 80091dc:	69fa      	ldr	r2, [r7, #28]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d305      	bcc.n	80091ee <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80091e8:	69fa      	ldr	r2, [r7, #28]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d903      	bls.n	80091f6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80091f4:	e0f4      	b.n	80093e0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	2200      	movs	r2, #0
 80091fa:	461c      	mov	r4, r3
 80091fc:	4615      	mov	r5, r2
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	022b      	lsls	r3, r5, #8
 8009208:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800920c:	0222      	lsls	r2, r4, #8
 800920e:	68f9      	ldr	r1, [r7, #12]
 8009210:	6849      	ldr	r1, [r1, #4]
 8009212:	0849      	lsrs	r1, r1, #1
 8009214:	2000      	movs	r0, #0
 8009216:	4688      	mov	r8, r1
 8009218:	4681      	mov	r9, r0
 800921a:	eb12 0a08 	adds.w	sl, r2, r8
 800921e:	eb43 0b09 	adc.w	fp, r3, r9
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	603b      	str	r3, [r7, #0]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009230:	4650      	mov	r0, sl
 8009232:	4659      	mov	r1, fp
 8009234:	f7f7 fd28 	bl	8000c88 <__aeabi_uldivmod>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4613      	mov	r3, r2
 800923e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009246:	d308      	bcc.n	800925a <UART_SetConfig+0x2b2>
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800924e:	d204      	bcs.n	800925a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	69ba      	ldr	r2, [r7, #24]
 8009256:	60da      	str	r2, [r3, #12]
 8009258:	e0c2      	b.n	80093e0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009260:	e0be      	b.n	80093e0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	69db      	ldr	r3, [r3, #28]
 8009266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800926a:	d16a      	bne.n	8009342 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800926c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009270:	2b08      	cmp	r3, #8
 8009272:	d834      	bhi.n	80092de <UART_SetConfig+0x336>
 8009274:	a201      	add	r2, pc, #4	; (adr r2, 800927c <UART_SetConfig+0x2d4>)
 8009276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800927a:	bf00      	nop
 800927c:	080092a1 	.word	0x080092a1
 8009280:	080092c1 	.word	0x080092c1
 8009284:	080092c9 	.word	0x080092c9
 8009288:	080092df 	.word	0x080092df
 800928c:	080092cf 	.word	0x080092cf
 8009290:	080092df 	.word	0x080092df
 8009294:	080092df 	.word	0x080092df
 8009298:	080092df 	.word	0x080092df
 800929c:	080092d7 	.word	0x080092d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092a0:	f7fd f88a 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 80092a4:	61f8      	str	r0, [r7, #28]
        break;
 80092a6:	e020      	b.n	80092ea <UART_SetConfig+0x342>
 80092a8:	efff69f3 	.word	0xefff69f3
 80092ac:	40008000 	.word	0x40008000
 80092b0:	40013800 	.word	0x40013800
 80092b4:	40021000 	.word	0x40021000
 80092b8:	40004400 	.word	0x40004400
 80092bc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092c0:	f7fd f890 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
 80092c4:	61f8      	str	r0, [r7, #28]
        break;
 80092c6:	e010      	b.n	80092ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092c8:	4b4c      	ldr	r3, [pc, #304]	; (80093fc <UART_SetConfig+0x454>)
 80092ca:	61fb      	str	r3, [r7, #28]
        break;
 80092cc:	e00d      	b.n	80092ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ce:	f7fc ffdb 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 80092d2:	61f8      	str	r0, [r7, #28]
        break;
 80092d4:	e009      	b.n	80092ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092da:	61fb      	str	r3, [r7, #28]
        break;
 80092dc:	e005      	b.n	80092ea <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80092e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d077      	beq.n	80093e0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	005a      	lsls	r2, r3, #1
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	441a      	add	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	fbb2 f3f3 	udiv	r3, r2, r3
 8009304:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	2b0f      	cmp	r3, #15
 800930a:	d916      	bls.n	800933a <UART_SetConfig+0x392>
 800930c:	69bb      	ldr	r3, [r7, #24]
 800930e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009312:	d212      	bcs.n	800933a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	b29b      	uxth	r3, r3
 8009318:	f023 030f 	bic.w	r3, r3, #15
 800931c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800931e:	69bb      	ldr	r3, [r7, #24]
 8009320:	085b      	lsrs	r3, r3, #1
 8009322:	b29b      	uxth	r3, r3
 8009324:	f003 0307 	and.w	r3, r3, #7
 8009328:	b29a      	uxth	r2, r3
 800932a:	8afb      	ldrh	r3, [r7, #22]
 800932c:	4313      	orrs	r3, r2
 800932e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	8afa      	ldrh	r2, [r7, #22]
 8009336:	60da      	str	r2, [r3, #12]
 8009338:	e052      	b.n	80093e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009340:	e04e      	b.n	80093e0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009342:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009346:	2b08      	cmp	r3, #8
 8009348:	d827      	bhi.n	800939a <UART_SetConfig+0x3f2>
 800934a:	a201      	add	r2, pc, #4	; (adr r2, 8009350 <UART_SetConfig+0x3a8>)
 800934c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009350:	08009375 	.word	0x08009375
 8009354:	0800937d 	.word	0x0800937d
 8009358:	08009385 	.word	0x08009385
 800935c:	0800939b 	.word	0x0800939b
 8009360:	0800938b 	.word	0x0800938b
 8009364:	0800939b 	.word	0x0800939b
 8009368:	0800939b 	.word	0x0800939b
 800936c:	0800939b 	.word	0x0800939b
 8009370:	08009393 	.word	0x08009393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009374:	f7fd f820 	bl	80063b8 <HAL_RCC_GetPCLK1Freq>
 8009378:	61f8      	str	r0, [r7, #28]
        break;
 800937a:	e014      	b.n	80093a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800937c:	f7fd f832 	bl	80063e4 <HAL_RCC_GetPCLK2Freq>
 8009380:	61f8      	str	r0, [r7, #28]
        break;
 8009382:	e010      	b.n	80093a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009384:	4b1d      	ldr	r3, [pc, #116]	; (80093fc <UART_SetConfig+0x454>)
 8009386:	61fb      	str	r3, [r7, #28]
        break;
 8009388:	e00d      	b.n	80093a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800938a:	f7fc ff7d 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 800938e:	61f8      	str	r0, [r7, #28]
        break;
 8009390:	e009      	b.n	80093a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009396:	61fb      	str	r3, [r7, #28]
        break;
 8009398:	e005      	b.n	80093a6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800939a:	2300      	movs	r3, #0
 800939c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80093a4:	bf00      	nop
    }

    if (pclk != 0U)
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d019      	beq.n	80093e0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	085a      	lsrs	r2, r3, #1
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	441a      	add	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80093be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	2b0f      	cmp	r3, #15
 80093c4:	d909      	bls.n	80093da <UART_SetConfig+0x432>
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093cc:	d205      	bcs.n	80093da <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	60da      	str	r2, [r3, #12]
 80093d8:	e002      	b.n	80093e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80093ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3728      	adds	r7, #40	; 0x28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093fa:	bf00      	nop
 80093fc:	00f42400 	.word	0x00f42400

08009400 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940c:	f003 0308 	and.w	r3, r3, #8
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00a      	beq.n	800942a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	430a      	orrs	r2, r1
 800944a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00a      	beq.n	800946e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	430a      	orrs	r2, r1
 800946c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	f003 0304 	and.w	r3, r3, #4
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	430a      	orrs	r2, r1
 80094d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d01a      	beq.n	8009516 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094fe:	d10a      	bne.n	8009516 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00a      	beq.n	8009538 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	430a      	orrs	r2, r1
 8009536:	605a      	str	r2, [r3, #4]
  }
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b098      	sub	sp, #96	; 0x60
 8009548:	af02      	add	r7, sp, #8
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009554:	f7f9 ffaa 	bl	80034ac <HAL_GetTick>
 8009558:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0308 	and.w	r3, r3, #8
 8009564:	2b08      	cmp	r3, #8
 8009566:	d12e      	bne.n	80095c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009568:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009570:	2200      	movs	r2, #0
 8009572:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f88c 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d021      	beq.n	80095c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009596:	653b      	str	r3, [r7, #80]	; 0x50
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095a0:	647b      	str	r3, [r7, #68]	; 0x44
 80095a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80095a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80095ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e6      	bne.n	8009582 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2220      	movs	r2, #32
 80095b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e062      	b.n	800968c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0304 	and.w	r3, r3, #4
 80095d0:	2b04      	cmp	r3, #4
 80095d2:	d149      	bne.n	8009668 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095dc:	2200      	movs	r2, #0
 80095de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f856 	bl	8009694 <UART_WaitOnFlagUntilTimeout>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d03c      	beq.n	8009668 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	623b      	str	r3, [r7, #32]
   return(result);
 80095fc:	6a3b      	ldr	r3, [r7, #32]
 80095fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	461a      	mov	r2, r3
 800960a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800960c:	633b      	str	r3, [r7, #48]	; 0x30
 800960e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009610:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009614:	e841 2300 	strex	r3, r2, [r1]
 8009618:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800961a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e6      	bne.n	80095ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3308      	adds	r3, #8
 8009626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 0301 	bic.w	r3, r3, #1
 8009636:	64bb      	str	r3, [r7, #72]	; 0x48
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3308      	adds	r3, #8
 800963e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009640:	61fa      	str	r2, [r7, #28]
 8009642:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	69b9      	ldr	r1, [r7, #24]
 8009646:	69fa      	ldr	r2, [r7, #28]
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	617b      	str	r3, [r7, #20]
   return(result);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e5      	bne.n	8009620 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2220      	movs	r2, #32
 8009658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e011      	b.n	800968c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2220      	movs	r2, #32
 8009672:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3758      	adds	r7, #88	; 0x58
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	603b      	str	r3, [r7, #0]
 80096a0:	4613      	mov	r3, r2
 80096a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096a4:	e049      	b.n	800973a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096ac:	d045      	beq.n	800973a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ae:	f7f9 fefd 	bl	80034ac <HAL_GetTick>
 80096b2:	4602      	mov	r2, r0
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	1ad3      	subs	r3, r2, r3
 80096b8:	69ba      	ldr	r2, [r7, #24]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d302      	bcc.n	80096c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096c4:	2303      	movs	r3, #3
 80096c6:	e048      	b.n	800975a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0304 	and.w	r3, r3, #4
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d031      	beq.n	800973a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	2b08      	cmp	r3, #8
 80096e2:	d110      	bne.n	8009706 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2208      	movs	r2, #8
 80096ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 f838 	bl	8009762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2208      	movs	r2, #8
 80096f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e029      	b.n	800975a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009714:	d111      	bne.n	800973a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800971e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f81e 	bl	8009762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2220      	movs	r2, #32
 800972a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009736:	2303      	movs	r3, #3
 8009738:	e00f      	b.n	800975a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69da      	ldr	r2, [r3, #28]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	4013      	ands	r3, r2
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	429a      	cmp	r2, r3
 8009748:	bf0c      	ite	eq
 800974a:	2301      	moveq	r3, #1
 800974c:	2300      	movne	r3, #0
 800974e:	b2db      	uxtb	r3, r3
 8009750:	461a      	mov	r2, r3
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	429a      	cmp	r2, r3
 8009756:	d0a6      	beq.n	80096a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009762:	b480      	push	{r7}
 8009764:	b095      	sub	sp, #84	; 0x54
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009772:	e853 3f00 	ldrex	r3, [r3]
 8009776:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800977e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009788:	643b      	str	r3, [r7, #64]	; 0x40
 800978a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800978e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e6      	bne.n	800976a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3308      	adds	r3, #8
 80097a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	f023 0301 	bic.w	r3, r3, #1
 80097b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3308      	adds	r3, #8
 80097ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e5      	bne.n	800979c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d118      	bne.n	800980a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	e853 3f00 	ldrex	r3, [r3]
 80097e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f023 0310 	bic.w	r3, r3, #16
 80097ec:	647b      	str	r3, [r7, #68]	; 0x44
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097f6:	61bb      	str	r3, [r7, #24]
 80097f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	6979      	ldr	r1, [r7, #20]
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	613b      	str	r3, [r7, #16]
   return(result);
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e6      	bne.n	80097d8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2220      	movs	r2, #32
 800980e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800981e:	bf00      	nop
 8009820:	3754      	adds	r7, #84	; 0x54
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <__cvt>:
 800982a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800982e:	ec55 4b10 	vmov	r4, r5, d0
 8009832:	2d00      	cmp	r5, #0
 8009834:	460e      	mov	r6, r1
 8009836:	4619      	mov	r1, r3
 8009838:	462b      	mov	r3, r5
 800983a:	bfbb      	ittet	lt
 800983c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009840:	461d      	movlt	r5, r3
 8009842:	2300      	movge	r3, #0
 8009844:	232d      	movlt	r3, #45	; 0x2d
 8009846:	700b      	strb	r3, [r1, #0]
 8009848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800984a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800984e:	4691      	mov	r9, r2
 8009850:	f023 0820 	bic.w	r8, r3, #32
 8009854:	bfbc      	itt	lt
 8009856:	4622      	movlt	r2, r4
 8009858:	4614      	movlt	r4, r2
 800985a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800985e:	d005      	beq.n	800986c <__cvt+0x42>
 8009860:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009864:	d100      	bne.n	8009868 <__cvt+0x3e>
 8009866:	3601      	adds	r6, #1
 8009868:	2102      	movs	r1, #2
 800986a:	e000      	b.n	800986e <__cvt+0x44>
 800986c:	2103      	movs	r1, #3
 800986e:	ab03      	add	r3, sp, #12
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	ab02      	add	r3, sp, #8
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	ec45 4b10 	vmov	d0, r4, r5
 800987a:	4653      	mov	r3, sl
 800987c:	4632      	mov	r2, r6
 800987e:	f001 ffbf 	bl	800b800 <_dtoa_r>
 8009882:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009886:	4607      	mov	r7, r0
 8009888:	d102      	bne.n	8009890 <__cvt+0x66>
 800988a:	f019 0f01 	tst.w	r9, #1
 800988e:	d022      	beq.n	80098d6 <__cvt+0xac>
 8009890:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009894:	eb07 0906 	add.w	r9, r7, r6
 8009898:	d110      	bne.n	80098bc <__cvt+0x92>
 800989a:	783b      	ldrb	r3, [r7, #0]
 800989c:	2b30      	cmp	r3, #48	; 0x30
 800989e:	d10a      	bne.n	80098b6 <__cvt+0x8c>
 80098a0:	2200      	movs	r2, #0
 80098a2:	2300      	movs	r3, #0
 80098a4:	4620      	mov	r0, r4
 80098a6:	4629      	mov	r1, r5
 80098a8:	f7f7 f90e 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ac:	b918      	cbnz	r0, 80098b6 <__cvt+0x8c>
 80098ae:	f1c6 0601 	rsb	r6, r6, #1
 80098b2:	f8ca 6000 	str.w	r6, [sl]
 80098b6:	f8da 3000 	ldr.w	r3, [sl]
 80098ba:	4499      	add	r9, r3
 80098bc:	2200      	movs	r2, #0
 80098be:	2300      	movs	r3, #0
 80098c0:	4620      	mov	r0, r4
 80098c2:	4629      	mov	r1, r5
 80098c4:	f7f7 f900 	bl	8000ac8 <__aeabi_dcmpeq>
 80098c8:	b108      	cbz	r0, 80098ce <__cvt+0xa4>
 80098ca:	f8cd 900c 	str.w	r9, [sp, #12]
 80098ce:	2230      	movs	r2, #48	; 0x30
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	454b      	cmp	r3, r9
 80098d4:	d307      	bcc.n	80098e6 <__cvt+0xbc>
 80098d6:	9b03      	ldr	r3, [sp, #12]
 80098d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098da:	1bdb      	subs	r3, r3, r7
 80098dc:	4638      	mov	r0, r7
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	b004      	add	sp, #16
 80098e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	9103      	str	r1, [sp, #12]
 80098ea:	701a      	strb	r2, [r3, #0]
 80098ec:	e7f0      	b.n	80098d0 <__cvt+0xa6>

080098ee <__exponent>:
 80098ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098f0:	4603      	mov	r3, r0
 80098f2:	2900      	cmp	r1, #0
 80098f4:	bfb8      	it	lt
 80098f6:	4249      	neglt	r1, r1
 80098f8:	f803 2b02 	strb.w	r2, [r3], #2
 80098fc:	bfb4      	ite	lt
 80098fe:	222d      	movlt	r2, #45	; 0x2d
 8009900:	222b      	movge	r2, #43	; 0x2b
 8009902:	2909      	cmp	r1, #9
 8009904:	7042      	strb	r2, [r0, #1]
 8009906:	dd2a      	ble.n	800995e <__exponent+0x70>
 8009908:	f10d 0207 	add.w	r2, sp, #7
 800990c:	4617      	mov	r7, r2
 800990e:	260a      	movs	r6, #10
 8009910:	4694      	mov	ip, r2
 8009912:	fb91 f5f6 	sdiv	r5, r1, r6
 8009916:	fb06 1415 	mls	r4, r6, r5, r1
 800991a:	3430      	adds	r4, #48	; 0x30
 800991c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009920:	460c      	mov	r4, r1
 8009922:	2c63      	cmp	r4, #99	; 0x63
 8009924:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009928:	4629      	mov	r1, r5
 800992a:	dcf1      	bgt.n	8009910 <__exponent+0x22>
 800992c:	3130      	adds	r1, #48	; 0x30
 800992e:	f1ac 0402 	sub.w	r4, ip, #2
 8009932:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009936:	1c41      	adds	r1, r0, #1
 8009938:	4622      	mov	r2, r4
 800993a:	42ba      	cmp	r2, r7
 800993c:	d30a      	bcc.n	8009954 <__exponent+0x66>
 800993e:	f10d 0209 	add.w	r2, sp, #9
 8009942:	eba2 020c 	sub.w	r2, r2, ip
 8009946:	42bc      	cmp	r4, r7
 8009948:	bf88      	it	hi
 800994a:	2200      	movhi	r2, #0
 800994c:	4413      	add	r3, r2
 800994e:	1a18      	subs	r0, r3, r0
 8009950:	b003      	add	sp, #12
 8009952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009954:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009958:	f801 5f01 	strb.w	r5, [r1, #1]!
 800995c:	e7ed      	b.n	800993a <__exponent+0x4c>
 800995e:	2330      	movs	r3, #48	; 0x30
 8009960:	3130      	adds	r1, #48	; 0x30
 8009962:	7083      	strb	r3, [r0, #2]
 8009964:	70c1      	strb	r1, [r0, #3]
 8009966:	1d03      	adds	r3, r0, #4
 8009968:	e7f1      	b.n	800994e <__exponent+0x60>
	...

0800996c <_printf_float>:
 800996c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	ed2d 8b02 	vpush	{d8}
 8009974:	b08d      	sub	sp, #52	; 0x34
 8009976:	460c      	mov	r4, r1
 8009978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800997c:	4616      	mov	r6, r2
 800997e:	461f      	mov	r7, r3
 8009980:	4605      	mov	r5, r0
 8009982:	f001 fe1f 	bl	800b5c4 <_localeconv_r>
 8009986:	f8d0 a000 	ldr.w	sl, [r0]
 800998a:	4650      	mov	r0, sl
 800998c:	f7f6 fc70 	bl	8000270 <strlen>
 8009990:	2300      	movs	r3, #0
 8009992:	930a      	str	r3, [sp, #40]	; 0x28
 8009994:	6823      	ldr	r3, [r4, #0]
 8009996:	9305      	str	r3, [sp, #20]
 8009998:	f8d8 3000 	ldr.w	r3, [r8]
 800999c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80099a0:	3307      	adds	r3, #7
 80099a2:	f023 0307 	bic.w	r3, r3, #7
 80099a6:	f103 0208 	add.w	r2, r3, #8
 80099aa:	f8c8 2000 	str.w	r2, [r8]
 80099ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099b6:	9307      	str	r3, [sp, #28]
 80099b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80099bc:	ee08 0a10 	vmov	s16, r0
 80099c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80099c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099c8:	4b9e      	ldr	r3, [pc, #632]	; (8009c44 <_printf_float+0x2d8>)
 80099ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099ce:	f7f7 f8ad 	bl	8000b2c <__aeabi_dcmpun>
 80099d2:	bb88      	cbnz	r0, 8009a38 <_printf_float+0xcc>
 80099d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099d8:	4b9a      	ldr	r3, [pc, #616]	; (8009c44 <_printf_float+0x2d8>)
 80099da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099de:	f7f7 f887 	bl	8000af0 <__aeabi_dcmple>
 80099e2:	bb48      	cbnz	r0, 8009a38 <_printf_float+0xcc>
 80099e4:	2200      	movs	r2, #0
 80099e6:	2300      	movs	r3, #0
 80099e8:	4640      	mov	r0, r8
 80099ea:	4649      	mov	r1, r9
 80099ec:	f7f7 f876 	bl	8000adc <__aeabi_dcmplt>
 80099f0:	b110      	cbz	r0, 80099f8 <_printf_float+0x8c>
 80099f2:	232d      	movs	r3, #45	; 0x2d
 80099f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099f8:	4a93      	ldr	r2, [pc, #588]	; (8009c48 <_printf_float+0x2dc>)
 80099fa:	4b94      	ldr	r3, [pc, #592]	; (8009c4c <_printf_float+0x2e0>)
 80099fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a00:	bf94      	ite	ls
 8009a02:	4690      	movls	r8, r2
 8009a04:	4698      	movhi	r8, r3
 8009a06:	2303      	movs	r3, #3
 8009a08:	6123      	str	r3, [r4, #16]
 8009a0a:	9b05      	ldr	r3, [sp, #20]
 8009a0c:	f023 0304 	bic.w	r3, r3, #4
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	f04f 0900 	mov.w	r9, #0
 8009a16:	9700      	str	r7, [sp, #0]
 8009a18:	4633      	mov	r3, r6
 8009a1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4628      	mov	r0, r5
 8009a20:	f000 f9da 	bl	8009dd8 <_printf_common>
 8009a24:	3001      	adds	r0, #1
 8009a26:	f040 8090 	bne.w	8009b4a <_printf_float+0x1de>
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a2e:	b00d      	add	sp, #52	; 0x34
 8009a30:	ecbd 8b02 	vpop	{d8}
 8009a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a38:	4642      	mov	r2, r8
 8009a3a:	464b      	mov	r3, r9
 8009a3c:	4640      	mov	r0, r8
 8009a3e:	4649      	mov	r1, r9
 8009a40:	f7f7 f874 	bl	8000b2c <__aeabi_dcmpun>
 8009a44:	b140      	cbz	r0, 8009a58 <_printf_float+0xec>
 8009a46:	464b      	mov	r3, r9
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	bfbc      	itt	lt
 8009a4c:	232d      	movlt	r3, #45	; 0x2d
 8009a4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a52:	4a7f      	ldr	r2, [pc, #508]	; (8009c50 <_printf_float+0x2e4>)
 8009a54:	4b7f      	ldr	r3, [pc, #508]	; (8009c54 <_printf_float+0x2e8>)
 8009a56:	e7d1      	b.n	80099fc <_printf_float+0x90>
 8009a58:	6863      	ldr	r3, [r4, #4]
 8009a5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a5e:	9206      	str	r2, [sp, #24]
 8009a60:	1c5a      	adds	r2, r3, #1
 8009a62:	d13f      	bne.n	8009ae4 <_printf_float+0x178>
 8009a64:	2306      	movs	r3, #6
 8009a66:	6063      	str	r3, [r4, #4]
 8009a68:	9b05      	ldr	r3, [sp, #20]
 8009a6a:	6861      	ldr	r1, [r4, #4]
 8009a6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a70:	2300      	movs	r3, #0
 8009a72:	9303      	str	r3, [sp, #12]
 8009a74:	ab0a      	add	r3, sp, #40	; 0x28
 8009a76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a7a:	ab09      	add	r3, sp, #36	; 0x24
 8009a7c:	ec49 8b10 	vmov	d0, r8, r9
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	6022      	str	r2, [r4, #0]
 8009a84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f7ff fece 	bl	800982a <__cvt>
 8009a8e:	9b06      	ldr	r3, [sp, #24]
 8009a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a92:	2b47      	cmp	r3, #71	; 0x47
 8009a94:	4680      	mov	r8, r0
 8009a96:	d108      	bne.n	8009aaa <_printf_float+0x13e>
 8009a98:	1cc8      	adds	r0, r1, #3
 8009a9a:	db02      	blt.n	8009aa2 <_printf_float+0x136>
 8009a9c:	6863      	ldr	r3, [r4, #4]
 8009a9e:	4299      	cmp	r1, r3
 8009aa0:	dd41      	ble.n	8009b26 <_printf_float+0x1ba>
 8009aa2:	f1ab 0302 	sub.w	r3, fp, #2
 8009aa6:	fa5f fb83 	uxtb.w	fp, r3
 8009aaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009aae:	d820      	bhi.n	8009af2 <_printf_float+0x186>
 8009ab0:	3901      	subs	r1, #1
 8009ab2:	465a      	mov	r2, fp
 8009ab4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ab8:	9109      	str	r1, [sp, #36]	; 0x24
 8009aba:	f7ff ff18 	bl	80098ee <__exponent>
 8009abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ac0:	1813      	adds	r3, r2, r0
 8009ac2:	2a01      	cmp	r2, #1
 8009ac4:	4681      	mov	r9, r0
 8009ac6:	6123      	str	r3, [r4, #16]
 8009ac8:	dc02      	bgt.n	8009ad0 <_printf_float+0x164>
 8009aca:	6822      	ldr	r2, [r4, #0]
 8009acc:	07d2      	lsls	r2, r2, #31
 8009ace:	d501      	bpl.n	8009ad4 <_printf_float+0x168>
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	6123      	str	r3, [r4, #16]
 8009ad4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d09c      	beq.n	8009a16 <_printf_float+0xaa>
 8009adc:	232d      	movs	r3, #45	; 0x2d
 8009ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ae2:	e798      	b.n	8009a16 <_printf_float+0xaa>
 8009ae4:	9a06      	ldr	r2, [sp, #24]
 8009ae6:	2a47      	cmp	r2, #71	; 0x47
 8009ae8:	d1be      	bne.n	8009a68 <_printf_float+0xfc>
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1bc      	bne.n	8009a68 <_printf_float+0xfc>
 8009aee:	2301      	movs	r3, #1
 8009af0:	e7b9      	b.n	8009a66 <_printf_float+0xfa>
 8009af2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009af6:	d118      	bne.n	8009b2a <_printf_float+0x1be>
 8009af8:	2900      	cmp	r1, #0
 8009afa:	6863      	ldr	r3, [r4, #4]
 8009afc:	dd0b      	ble.n	8009b16 <_printf_float+0x1aa>
 8009afe:	6121      	str	r1, [r4, #16]
 8009b00:	b913      	cbnz	r3, 8009b08 <_printf_float+0x19c>
 8009b02:	6822      	ldr	r2, [r4, #0]
 8009b04:	07d0      	lsls	r0, r2, #31
 8009b06:	d502      	bpl.n	8009b0e <_printf_float+0x1a2>
 8009b08:	3301      	adds	r3, #1
 8009b0a:	440b      	add	r3, r1
 8009b0c:	6123      	str	r3, [r4, #16]
 8009b0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b10:	f04f 0900 	mov.w	r9, #0
 8009b14:	e7de      	b.n	8009ad4 <_printf_float+0x168>
 8009b16:	b913      	cbnz	r3, 8009b1e <_printf_float+0x1b2>
 8009b18:	6822      	ldr	r2, [r4, #0]
 8009b1a:	07d2      	lsls	r2, r2, #31
 8009b1c:	d501      	bpl.n	8009b22 <_printf_float+0x1b6>
 8009b1e:	3302      	adds	r3, #2
 8009b20:	e7f4      	b.n	8009b0c <_printf_float+0x1a0>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e7f2      	b.n	8009b0c <_printf_float+0x1a0>
 8009b26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b2c:	4299      	cmp	r1, r3
 8009b2e:	db05      	blt.n	8009b3c <_printf_float+0x1d0>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	6121      	str	r1, [r4, #16]
 8009b34:	07d8      	lsls	r0, r3, #31
 8009b36:	d5ea      	bpl.n	8009b0e <_printf_float+0x1a2>
 8009b38:	1c4b      	adds	r3, r1, #1
 8009b3a:	e7e7      	b.n	8009b0c <_printf_float+0x1a0>
 8009b3c:	2900      	cmp	r1, #0
 8009b3e:	bfd4      	ite	le
 8009b40:	f1c1 0202 	rsble	r2, r1, #2
 8009b44:	2201      	movgt	r2, #1
 8009b46:	4413      	add	r3, r2
 8009b48:	e7e0      	b.n	8009b0c <_printf_float+0x1a0>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	055a      	lsls	r2, r3, #21
 8009b4e:	d407      	bmi.n	8009b60 <_printf_float+0x1f4>
 8009b50:	6923      	ldr	r3, [r4, #16]
 8009b52:	4642      	mov	r2, r8
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	47b8      	blx	r7
 8009b5a:	3001      	adds	r0, #1
 8009b5c:	d12c      	bne.n	8009bb8 <_printf_float+0x24c>
 8009b5e:	e764      	b.n	8009a2a <_printf_float+0xbe>
 8009b60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b64:	f240 80e0 	bls.w	8009d28 <_printf_float+0x3bc>
 8009b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2300      	movs	r3, #0
 8009b70:	f7f6 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d034      	beq.n	8009be2 <_printf_float+0x276>
 8009b78:	4a37      	ldr	r2, [pc, #220]	; (8009c58 <_printf_float+0x2ec>)
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	4631      	mov	r1, r6
 8009b7e:	4628      	mov	r0, r5
 8009b80:	47b8      	blx	r7
 8009b82:	3001      	adds	r0, #1
 8009b84:	f43f af51 	beq.w	8009a2a <_printf_float+0xbe>
 8009b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	db02      	blt.n	8009b96 <_printf_float+0x22a>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	07d8      	lsls	r0, r3, #31
 8009b94:	d510      	bpl.n	8009bb8 <_printf_float+0x24c>
 8009b96:	ee18 3a10 	vmov	r3, s16
 8009b9a:	4652      	mov	r2, sl
 8009b9c:	4631      	mov	r1, r6
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	47b8      	blx	r7
 8009ba2:	3001      	adds	r0, #1
 8009ba4:	f43f af41 	beq.w	8009a2a <_printf_float+0xbe>
 8009ba8:	f04f 0800 	mov.w	r8, #0
 8009bac:	f104 091a 	add.w	r9, r4, #26
 8009bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	4543      	cmp	r3, r8
 8009bb6:	dc09      	bgt.n	8009bcc <_printf_float+0x260>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	079b      	lsls	r3, r3, #30
 8009bbc:	f100 8107 	bmi.w	8009dce <_printf_float+0x462>
 8009bc0:	68e0      	ldr	r0, [r4, #12]
 8009bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bc4:	4298      	cmp	r0, r3
 8009bc6:	bfb8      	it	lt
 8009bc8:	4618      	movlt	r0, r3
 8009bca:	e730      	b.n	8009a2e <_printf_float+0xc2>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	464a      	mov	r2, r9
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b8      	blx	r7
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	f43f af27 	beq.w	8009a2a <_printf_float+0xbe>
 8009bdc:	f108 0801 	add.w	r8, r8, #1
 8009be0:	e7e6      	b.n	8009bb0 <_printf_float+0x244>
 8009be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dc39      	bgt.n	8009c5c <_printf_float+0x2f0>
 8009be8:	4a1b      	ldr	r2, [pc, #108]	; (8009c58 <_printf_float+0x2ec>)
 8009bea:	2301      	movs	r3, #1
 8009bec:	4631      	mov	r1, r6
 8009bee:	4628      	mov	r0, r5
 8009bf0:	47b8      	blx	r7
 8009bf2:	3001      	adds	r0, #1
 8009bf4:	f43f af19 	beq.w	8009a2a <_printf_float+0xbe>
 8009bf8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	d102      	bne.n	8009c06 <_printf_float+0x29a>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	07d9      	lsls	r1, r3, #31
 8009c04:	d5d8      	bpl.n	8009bb8 <_printf_float+0x24c>
 8009c06:	ee18 3a10 	vmov	r3, s16
 8009c0a:	4652      	mov	r2, sl
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4628      	mov	r0, r5
 8009c10:	47b8      	blx	r7
 8009c12:	3001      	adds	r0, #1
 8009c14:	f43f af09 	beq.w	8009a2a <_printf_float+0xbe>
 8009c18:	f04f 0900 	mov.w	r9, #0
 8009c1c:	f104 0a1a 	add.w	sl, r4, #26
 8009c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c22:	425b      	negs	r3, r3
 8009c24:	454b      	cmp	r3, r9
 8009c26:	dc01      	bgt.n	8009c2c <_printf_float+0x2c0>
 8009c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c2a:	e792      	b.n	8009b52 <_printf_float+0x1e6>
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	4652      	mov	r2, sl
 8009c30:	4631      	mov	r1, r6
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b8      	blx	r7
 8009c36:	3001      	adds	r0, #1
 8009c38:	f43f aef7 	beq.w	8009a2a <_printf_float+0xbe>
 8009c3c:	f109 0901 	add.w	r9, r9, #1
 8009c40:	e7ee      	b.n	8009c20 <_printf_float+0x2b4>
 8009c42:	bf00      	nop
 8009c44:	7fefffff 	.word	0x7fefffff
 8009c48:	0800f544 	.word	0x0800f544
 8009c4c:	0800f548 	.word	0x0800f548
 8009c50:	0800f54c 	.word	0x0800f54c
 8009c54:	0800f550 	.word	0x0800f550
 8009c58:	0800f554 	.word	0x0800f554
 8009c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c60:	429a      	cmp	r2, r3
 8009c62:	bfa8      	it	ge
 8009c64:	461a      	movge	r2, r3
 8009c66:	2a00      	cmp	r2, #0
 8009c68:	4691      	mov	r9, r2
 8009c6a:	dc37      	bgt.n	8009cdc <_printf_float+0x370>
 8009c6c:	f04f 0b00 	mov.w	fp, #0
 8009c70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c74:	f104 021a 	add.w	r2, r4, #26
 8009c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c7a:	9305      	str	r3, [sp, #20]
 8009c7c:	eba3 0309 	sub.w	r3, r3, r9
 8009c80:	455b      	cmp	r3, fp
 8009c82:	dc33      	bgt.n	8009cec <_printf_float+0x380>
 8009c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	db3b      	blt.n	8009d04 <_printf_float+0x398>
 8009c8c:	6823      	ldr	r3, [r4, #0]
 8009c8e:	07da      	lsls	r2, r3, #31
 8009c90:	d438      	bmi.n	8009d04 <_printf_float+0x398>
 8009c92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c96:	eba2 0903 	sub.w	r9, r2, r3
 8009c9a:	9b05      	ldr	r3, [sp, #20]
 8009c9c:	1ad2      	subs	r2, r2, r3
 8009c9e:	4591      	cmp	r9, r2
 8009ca0:	bfa8      	it	ge
 8009ca2:	4691      	movge	r9, r2
 8009ca4:	f1b9 0f00 	cmp.w	r9, #0
 8009ca8:	dc35      	bgt.n	8009d16 <_printf_float+0x3aa>
 8009caa:	f04f 0800 	mov.w	r8, #0
 8009cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cb2:	f104 0a1a 	add.w	sl, r4, #26
 8009cb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cba:	1a9b      	subs	r3, r3, r2
 8009cbc:	eba3 0309 	sub.w	r3, r3, r9
 8009cc0:	4543      	cmp	r3, r8
 8009cc2:	f77f af79 	ble.w	8009bb8 <_printf_float+0x24c>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4652      	mov	r2, sl
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	47b8      	blx	r7
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	f43f aeaa 	beq.w	8009a2a <_printf_float+0xbe>
 8009cd6:	f108 0801 	add.w	r8, r8, #1
 8009cda:	e7ec      	b.n	8009cb6 <_printf_float+0x34a>
 8009cdc:	4613      	mov	r3, r2
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	47b8      	blx	r7
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	d1c0      	bne.n	8009c6c <_printf_float+0x300>
 8009cea:	e69e      	b.n	8009a2a <_printf_float+0xbe>
 8009cec:	2301      	movs	r3, #1
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	9205      	str	r2, [sp, #20]
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f ae97 	beq.w	8009a2a <_printf_float+0xbe>
 8009cfc:	9a05      	ldr	r2, [sp, #20]
 8009cfe:	f10b 0b01 	add.w	fp, fp, #1
 8009d02:	e7b9      	b.n	8009c78 <_printf_float+0x30c>
 8009d04:	ee18 3a10 	vmov	r3, s16
 8009d08:	4652      	mov	r2, sl
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	d1be      	bne.n	8009c92 <_printf_float+0x326>
 8009d14:	e689      	b.n	8009a2a <_printf_float+0xbe>
 8009d16:	9a05      	ldr	r2, [sp, #20]
 8009d18:	464b      	mov	r3, r9
 8009d1a:	4442      	add	r2, r8
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4628      	mov	r0, r5
 8009d20:	47b8      	blx	r7
 8009d22:	3001      	adds	r0, #1
 8009d24:	d1c1      	bne.n	8009caa <_printf_float+0x33e>
 8009d26:	e680      	b.n	8009a2a <_printf_float+0xbe>
 8009d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d2a:	2a01      	cmp	r2, #1
 8009d2c:	dc01      	bgt.n	8009d32 <_printf_float+0x3c6>
 8009d2e:	07db      	lsls	r3, r3, #31
 8009d30:	d53a      	bpl.n	8009da8 <_printf_float+0x43c>
 8009d32:	2301      	movs	r3, #1
 8009d34:	4642      	mov	r2, r8
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	f43f ae74 	beq.w	8009a2a <_printf_float+0xbe>
 8009d42:	ee18 3a10 	vmov	r3, s16
 8009d46:	4652      	mov	r2, sl
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f43f ae6b 	beq.w	8009a2a <_printf_float+0xbe>
 8009d54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009d60:	f7f6 feb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d64:	b9d8      	cbnz	r0, 8009d9e <_printf_float+0x432>
 8009d66:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009d6a:	f108 0201 	add.w	r2, r8, #1
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	d10e      	bne.n	8009d96 <_printf_float+0x42a>
 8009d78:	e657      	b.n	8009a2a <_printf_float+0xbe>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	4652      	mov	r2, sl
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f ae50 	beq.w	8009a2a <_printf_float+0xbe>
 8009d8a:	f108 0801 	add.w	r8, r8, #1
 8009d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d90:	3b01      	subs	r3, #1
 8009d92:	4543      	cmp	r3, r8
 8009d94:	dcf1      	bgt.n	8009d7a <_printf_float+0x40e>
 8009d96:	464b      	mov	r3, r9
 8009d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d9c:	e6da      	b.n	8009b54 <_printf_float+0x1e8>
 8009d9e:	f04f 0800 	mov.w	r8, #0
 8009da2:	f104 0a1a 	add.w	sl, r4, #26
 8009da6:	e7f2      	b.n	8009d8e <_printf_float+0x422>
 8009da8:	2301      	movs	r3, #1
 8009daa:	4642      	mov	r2, r8
 8009dac:	e7df      	b.n	8009d6e <_printf_float+0x402>
 8009dae:	2301      	movs	r3, #1
 8009db0:	464a      	mov	r2, r9
 8009db2:	4631      	mov	r1, r6
 8009db4:	4628      	mov	r0, r5
 8009db6:	47b8      	blx	r7
 8009db8:	3001      	adds	r0, #1
 8009dba:	f43f ae36 	beq.w	8009a2a <_printf_float+0xbe>
 8009dbe:	f108 0801 	add.w	r8, r8, #1
 8009dc2:	68e3      	ldr	r3, [r4, #12]
 8009dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dc6:	1a5b      	subs	r3, r3, r1
 8009dc8:	4543      	cmp	r3, r8
 8009dca:	dcf0      	bgt.n	8009dae <_printf_float+0x442>
 8009dcc:	e6f8      	b.n	8009bc0 <_printf_float+0x254>
 8009dce:	f04f 0800 	mov.w	r8, #0
 8009dd2:	f104 0919 	add.w	r9, r4, #25
 8009dd6:	e7f4      	b.n	8009dc2 <_printf_float+0x456>

08009dd8 <_printf_common>:
 8009dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ddc:	4616      	mov	r6, r2
 8009dde:	4699      	mov	r9, r3
 8009de0:	688a      	ldr	r2, [r1, #8]
 8009de2:	690b      	ldr	r3, [r1, #16]
 8009de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009de8:	4293      	cmp	r3, r2
 8009dea:	bfb8      	it	lt
 8009dec:	4613      	movlt	r3, r2
 8009dee:	6033      	str	r3, [r6, #0]
 8009df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009df4:	4607      	mov	r7, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	b10a      	cbz	r2, 8009dfe <_printf_common+0x26>
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	6033      	str	r3, [r6, #0]
 8009dfe:	6823      	ldr	r3, [r4, #0]
 8009e00:	0699      	lsls	r1, r3, #26
 8009e02:	bf42      	ittt	mi
 8009e04:	6833      	ldrmi	r3, [r6, #0]
 8009e06:	3302      	addmi	r3, #2
 8009e08:	6033      	strmi	r3, [r6, #0]
 8009e0a:	6825      	ldr	r5, [r4, #0]
 8009e0c:	f015 0506 	ands.w	r5, r5, #6
 8009e10:	d106      	bne.n	8009e20 <_printf_common+0x48>
 8009e12:	f104 0a19 	add.w	sl, r4, #25
 8009e16:	68e3      	ldr	r3, [r4, #12]
 8009e18:	6832      	ldr	r2, [r6, #0]
 8009e1a:	1a9b      	subs	r3, r3, r2
 8009e1c:	42ab      	cmp	r3, r5
 8009e1e:	dc26      	bgt.n	8009e6e <_printf_common+0x96>
 8009e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e24:	1e13      	subs	r3, r2, #0
 8009e26:	6822      	ldr	r2, [r4, #0]
 8009e28:	bf18      	it	ne
 8009e2a:	2301      	movne	r3, #1
 8009e2c:	0692      	lsls	r2, r2, #26
 8009e2e:	d42b      	bmi.n	8009e88 <_printf_common+0xb0>
 8009e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e34:	4649      	mov	r1, r9
 8009e36:	4638      	mov	r0, r7
 8009e38:	47c0      	blx	r8
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	d01e      	beq.n	8009e7c <_printf_common+0xa4>
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	6922      	ldr	r2, [r4, #16]
 8009e42:	f003 0306 	and.w	r3, r3, #6
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	bf02      	ittt	eq
 8009e4a:	68e5      	ldreq	r5, [r4, #12]
 8009e4c:	6833      	ldreq	r3, [r6, #0]
 8009e4e:	1aed      	subeq	r5, r5, r3
 8009e50:	68a3      	ldr	r3, [r4, #8]
 8009e52:	bf0c      	ite	eq
 8009e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e58:	2500      	movne	r5, #0
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	bfc4      	itt	gt
 8009e5e:	1a9b      	subgt	r3, r3, r2
 8009e60:	18ed      	addgt	r5, r5, r3
 8009e62:	2600      	movs	r6, #0
 8009e64:	341a      	adds	r4, #26
 8009e66:	42b5      	cmp	r5, r6
 8009e68:	d11a      	bne.n	8009ea0 <_printf_common+0xc8>
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	e008      	b.n	8009e80 <_printf_common+0xa8>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4652      	mov	r2, sl
 8009e72:	4649      	mov	r1, r9
 8009e74:	4638      	mov	r0, r7
 8009e76:	47c0      	blx	r8
 8009e78:	3001      	adds	r0, #1
 8009e7a:	d103      	bne.n	8009e84 <_printf_common+0xac>
 8009e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e84:	3501      	adds	r5, #1
 8009e86:	e7c6      	b.n	8009e16 <_printf_common+0x3e>
 8009e88:	18e1      	adds	r1, r4, r3
 8009e8a:	1c5a      	adds	r2, r3, #1
 8009e8c:	2030      	movs	r0, #48	; 0x30
 8009e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e92:	4422      	add	r2, r4
 8009e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e9c:	3302      	adds	r3, #2
 8009e9e:	e7c7      	b.n	8009e30 <_printf_common+0x58>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4622      	mov	r2, r4
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	47c0      	blx	r8
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d0e6      	beq.n	8009e7c <_printf_common+0xa4>
 8009eae:	3601      	adds	r6, #1
 8009eb0:	e7d9      	b.n	8009e66 <_printf_common+0x8e>
	...

08009eb4 <_printf_i>:
 8009eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eb8:	7e0f      	ldrb	r7, [r1, #24]
 8009eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ebc:	2f78      	cmp	r7, #120	; 0x78
 8009ebe:	4691      	mov	r9, r2
 8009ec0:	4680      	mov	r8, r0
 8009ec2:	460c      	mov	r4, r1
 8009ec4:	469a      	mov	sl, r3
 8009ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009eca:	d807      	bhi.n	8009edc <_printf_i+0x28>
 8009ecc:	2f62      	cmp	r7, #98	; 0x62
 8009ece:	d80a      	bhi.n	8009ee6 <_printf_i+0x32>
 8009ed0:	2f00      	cmp	r7, #0
 8009ed2:	f000 80d4 	beq.w	800a07e <_printf_i+0x1ca>
 8009ed6:	2f58      	cmp	r7, #88	; 0x58
 8009ed8:	f000 80c0 	beq.w	800a05c <_printf_i+0x1a8>
 8009edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ee4:	e03a      	b.n	8009f5c <_printf_i+0xa8>
 8009ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009eea:	2b15      	cmp	r3, #21
 8009eec:	d8f6      	bhi.n	8009edc <_printf_i+0x28>
 8009eee:	a101      	add	r1, pc, #4	; (adr r1, 8009ef4 <_printf_i+0x40>)
 8009ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ef4:	08009f4d 	.word	0x08009f4d
 8009ef8:	08009f61 	.word	0x08009f61
 8009efc:	08009edd 	.word	0x08009edd
 8009f00:	08009edd 	.word	0x08009edd
 8009f04:	08009edd 	.word	0x08009edd
 8009f08:	08009edd 	.word	0x08009edd
 8009f0c:	08009f61 	.word	0x08009f61
 8009f10:	08009edd 	.word	0x08009edd
 8009f14:	08009edd 	.word	0x08009edd
 8009f18:	08009edd 	.word	0x08009edd
 8009f1c:	08009edd 	.word	0x08009edd
 8009f20:	0800a065 	.word	0x0800a065
 8009f24:	08009f8d 	.word	0x08009f8d
 8009f28:	0800a01f 	.word	0x0800a01f
 8009f2c:	08009edd 	.word	0x08009edd
 8009f30:	08009edd 	.word	0x08009edd
 8009f34:	0800a087 	.word	0x0800a087
 8009f38:	08009edd 	.word	0x08009edd
 8009f3c:	08009f8d 	.word	0x08009f8d
 8009f40:	08009edd 	.word	0x08009edd
 8009f44:	08009edd 	.word	0x08009edd
 8009f48:	0800a027 	.word	0x0800a027
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	1d1a      	adds	r2, r3, #4
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	602a      	str	r2, [r5, #0]
 8009f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e09f      	b.n	800a0a0 <_printf_i+0x1ec>
 8009f60:	6820      	ldr	r0, [r4, #0]
 8009f62:	682b      	ldr	r3, [r5, #0]
 8009f64:	0607      	lsls	r7, r0, #24
 8009f66:	f103 0104 	add.w	r1, r3, #4
 8009f6a:	6029      	str	r1, [r5, #0]
 8009f6c:	d501      	bpl.n	8009f72 <_printf_i+0xbe>
 8009f6e:	681e      	ldr	r6, [r3, #0]
 8009f70:	e003      	b.n	8009f7a <_printf_i+0xc6>
 8009f72:	0646      	lsls	r6, r0, #25
 8009f74:	d5fb      	bpl.n	8009f6e <_printf_i+0xba>
 8009f76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f7a:	2e00      	cmp	r6, #0
 8009f7c:	da03      	bge.n	8009f86 <_printf_i+0xd2>
 8009f7e:	232d      	movs	r3, #45	; 0x2d
 8009f80:	4276      	negs	r6, r6
 8009f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f86:	485a      	ldr	r0, [pc, #360]	; (800a0f0 <_printf_i+0x23c>)
 8009f88:	230a      	movs	r3, #10
 8009f8a:	e012      	b.n	8009fb2 <_printf_i+0xfe>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	6820      	ldr	r0, [r4, #0]
 8009f90:	1d19      	adds	r1, r3, #4
 8009f92:	6029      	str	r1, [r5, #0]
 8009f94:	0605      	lsls	r5, r0, #24
 8009f96:	d501      	bpl.n	8009f9c <_printf_i+0xe8>
 8009f98:	681e      	ldr	r6, [r3, #0]
 8009f9a:	e002      	b.n	8009fa2 <_printf_i+0xee>
 8009f9c:	0641      	lsls	r1, r0, #25
 8009f9e:	d5fb      	bpl.n	8009f98 <_printf_i+0xe4>
 8009fa0:	881e      	ldrh	r6, [r3, #0]
 8009fa2:	4853      	ldr	r0, [pc, #332]	; (800a0f0 <_printf_i+0x23c>)
 8009fa4:	2f6f      	cmp	r7, #111	; 0x6f
 8009fa6:	bf0c      	ite	eq
 8009fa8:	2308      	moveq	r3, #8
 8009faa:	230a      	movne	r3, #10
 8009fac:	2100      	movs	r1, #0
 8009fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fb2:	6865      	ldr	r5, [r4, #4]
 8009fb4:	60a5      	str	r5, [r4, #8]
 8009fb6:	2d00      	cmp	r5, #0
 8009fb8:	bfa2      	ittt	ge
 8009fba:	6821      	ldrge	r1, [r4, #0]
 8009fbc:	f021 0104 	bicge.w	r1, r1, #4
 8009fc0:	6021      	strge	r1, [r4, #0]
 8009fc2:	b90e      	cbnz	r6, 8009fc8 <_printf_i+0x114>
 8009fc4:	2d00      	cmp	r5, #0
 8009fc6:	d04b      	beq.n	800a060 <_printf_i+0x1ac>
 8009fc8:	4615      	mov	r5, r2
 8009fca:	fbb6 f1f3 	udiv	r1, r6, r3
 8009fce:	fb03 6711 	mls	r7, r3, r1, r6
 8009fd2:	5dc7      	ldrb	r7, [r0, r7]
 8009fd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fd8:	4637      	mov	r7, r6
 8009fda:	42bb      	cmp	r3, r7
 8009fdc:	460e      	mov	r6, r1
 8009fde:	d9f4      	bls.n	8009fca <_printf_i+0x116>
 8009fe0:	2b08      	cmp	r3, #8
 8009fe2:	d10b      	bne.n	8009ffc <_printf_i+0x148>
 8009fe4:	6823      	ldr	r3, [r4, #0]
 8009fe6:	07de      	lsls	r6, r3, #31
 8009fe8:	d508      	bpl.n	8009ffc <_printf_i+0x148>
 8009fea:	6923      	ldr	r3, [r4, #16]
 8009fec:	6861      	ldr	r1, [r4, #4]
 8009fee:	4299      	cmp	r1, r3
 8009ff0:	bfde      	ittt	le
 8009ff2:	2330      	movle	r3, #48	; 0x30
 8009ff4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ff8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ffc:	1b52      	subs	r2, r2, r5
 8009ffe:	6122      	str	r2, [r4, #16]
 800a000:	f8cd a000 	str.w	sl, [sp]
 800a004:	464b      	mov	r3, r9
 800a006:	aa03      	add	r2, sp, #12
 800a008:	4621      	mov	r1, r4
 800a00a:	4640      	mov	r0, r8
 800a00c:	f7ff fee4 	bl	8009dd8 <_printf_common>
 800a010:	3001      	adds	r0, #1
 800a012:	d14a      	bne.n	800a0aa <_printf_i+0x1f6>
 800a014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a018:	b004      	add	sp, #16
 800a01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	f043 0320 	orr.w	r3, r3, #32
 800a024:	6023      	str	r3, [r4, #0]
 800a026:	4833      	ldr	r0, [pc, #204]	; (800a0f4 <_printf_i+0x240>)
 800a028:	2778      	movs	r7, #120	; 0x78
 800a02a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	6829      	ldr	r1, [r5, #0]
 800a032:	061f      	lsls	r7, r3, #24
 800a034:	f851 6b04 	ldr.w	r6, [r1], #4
 800a038:	d402      	bmi.n	800a040 <_printf_i+0x18c>
 800a03a:	065f      	lsls	r7, r3, #25
 800a03c:	bf48      	it	mi
 800a03e:	b2b6      	uxthmi	r6, r6
 800a040:	07df      	lsls	r7, r3, #31
 800a042:	bf48      	it	mi
 800a044:	f043 0320 	orrmi.w	r3, r3, #32
 800a048:	6029      	str	r1, [r5, #0]
 800a04a:	bf48      	it	mi
 800a04c:	6023      	strmi	r3, [r4, #0]
 800a04e:	b91e      	cbnz	r6, 800a058 <_printf_i+0x1a4>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	f023 0320 	bic.w	r3, r3, #32
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	2310      	movs	r3, #16
 800a05a:	e7a7      	b.n	8009fac <_printf_i+0xf8>
 800a05c:	4824      	ldr	r0, [pc, #144]	; (800a0f0 <_printf_i+0x23c>)
 800a05e:	e7e4      	b.n	800a02a <_printf_i+0x176>
 800a060:	4615      	mov	r5, r2
 800a062:	e7bd      	b.n	8009fe0 <_printf_i+0x12c>
 800a064:	682b      	ldr	r3, [r5, #0]
 800a066:	6826      	ldr	r6, [r4, #0]
 800a068:	6961      	ldr	r1, [r4, #20]
 800a06a:	1d18      	adds	r0, r3, #4
 800a06c:	6028      	str	r0, [r5, #0]
 800a06e:	0635      	lsls	r5, r6, #24
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	d501      	bpl.n	800a078 <_printf_i+0x1c4>
 800a074:	6019      	str	r1, [r3, #0]
 800a076:	e002      	b.n	800a07e <_printf_i+0x1ca>
 800a078:	0670      	lsls	r0, r6, #25
 800a07a:	d5fb      	bpl.n	800a074 <_printf_i+0x1c0>
 800a07c:	8019      	strh	r1, [r3, #0]
 800a07e:	2300      	movs	r3, #0
 800a080:	6123      	str	r3, [r4, #16]
 800a082:	4615      	mov	r5, r2
 800a084:	e7bc      	b.n	800a000 <_printf_i+0x14c>
 800a086:	682b      	ldr	r3, [r5, #0]
 800a088:	1d1a      	adds	r2, r3, #4
 800a08a:	602a      	str	r2, [r5, #0]
 800a08c:	681d      	ldr	r5, [r3, #0]
 800a08e:	6862      	ldr	r2, [r4, #4]
 800a090:	2100      	movs	r1, #0
 800a092:	4628      	mov	r0, r5
 800a094:	f7f6 f89c 	bl	80001d0 <memchr>
 800a098:	b108      	cbz	r0, 800a09e <_printf_i+0x1ea>
 800a09a:	1b40      	subs	r0, r0, r5
 800a09c:	6060      	str	r0, [r4, #4]
 800a09e:	6863      	ldr	r3, [r4, #4]
 800a0a0:	6123      	str	r3, [r4, #16]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0a8:	e7aa      	b.n	800a000 <_printf_i+0x14c>
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	462a      	mov	r2, r5
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	47d0      	blx	sl
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d0ad      	beq.n	800a014 <_printf_i+0x160>
 800a0b8:	6823      	ldr	r3, [r4, #0]
 800a0ba:	079b      	lsls	r3, r3, #30
 800a0bc:	d413      	bmi.n	800a0e6 <_printf_i+0x232>
 800a0be:	68e0      	ldr	r0, [r4, #12]
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	4298      	cmp	r0, r3
 800a0c4:	bfb8      	it	lt
 800a0c6:	4618      	movlt	r0, r3
 800a0c8:	e7a6      	b.n	800a018 <_printf_i+0x164>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	4632      	mov	r2, r6
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	4640      	mov	r0, r8
 800a0d2:	47d0      	blx	sl
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d09d      	beq.n	800a014 <_printf_i+0x160>
 800a0d8:	3501      	adds	r5, #1
 800a0da:	68e3      	ldr	r3, [r4, #12]
 800a0dc:	9903      	ldr	r1, [sp, #12]
 800a0de:	1a5b      	subs	r3, r3, r1
 800a0e0:	42ab      	cmp	r3, r5
 800a0e2:	dcf2      	bgt.n	800a0ca <_printf_i+0x216>
 800a0e4:	e7eb      	b.n	800a0be <_printf_i+0x20a>
 800a0e6:	2500      	movs	r5, #0
 800a0e8:	f104 0619 	add.w	r6, r4, #25
 800a0ec:	e7f5      	b.n	800a0da <_printf_i+0x226>
 800a0ee:	bf00      	nop
 800a0f0:	0800f556 	.word	0x0800f556
 800a0f4:	0800f567 	.word	0x0800f567

0800a0f8 <_scanf_float>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	b087      	sub	sp, #28
 800a0fe:	4617      	mov	r7, r2
 800a100:	9303      	str	r3, [sp, #12]
 800a102:	688b      	ldr	r3, [r1, #8]
 800a104:	1e5a      	subs	r2, r3, #1
 800a106:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a10a:	bf83      	ittte	hi
 800a10c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a110:	195b      	addhi	r3, r3, r5
 800a112:	9302      	strhi	r3, [sp, #8]
 800a114:	2300      	movls	r3, #0
 800a116:	bf86      	itte	hi
 800a118:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a11c:	608b      	strhi	r3, [r1, #8]
 800a11e:	9302      	strls	r3, [sp, #8]
 800a120:	680b      	ldr	r3, [r1, #0]
 800a122:	468b      	mov	fp, r1
 800a124:	2500      	movs	r5, #0
 800a126:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a12a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a12e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a132:	4680      	mov	r8, r0
 800a134:	460c      	mov	r4, r1
 800a136:	465e      	mov	r6, fp
 800a138:	46aa      	mov	sl, r5
 800a13a:	46a9      	mov	r9, r5
 800a13c:	9501      	str	r5, [sp, #4]
 800a13e:	68a2      	ldr	r2, [r4, #8]
 800a140:	b152      	cbz	r2, 800a158 <_scanf_float+0x60>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b4e      	cmp	r3, #78	; 0x4e
 800a148:	d864      	bhi.n	800a214 <_scanf_float+0x11c>
 800a14a:	2b40      	cmp	r3, #64	; 0x40
 800a14c:	d83c      	bhi.n	800a1c8 <_scanf_float+0xd0>
 800a14e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a152:	b2c8      	uxtb	r0, r1
 800a154:	280e      	cmp	r0, #14
 800a156:	d93a      	bls.n	800a1ce <_scanf_float+0xd6>
 800a158:	f1b9 0f00 	cmp.w	r9, #0
 800a15c:	d003      	beq.n	800a166 <_scanf_float+0x6e>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a16a:	f1ba 0f01 	cmp.w	sl, #1
 800a16e:	f200 8113 	bhi.w	800a398 <_scanf_float+0x2a0>
 800a172:	455e      	cmp	r6, fp
 800a174:	f200 8105 	bhi.w	800a382 <_scanf_float+0x28a>
 800a178:	2501      	movs	r5, #1
 800a17a:	4628      	mov	r0, r5
 800a17c:	b007      	add	sp, #28
 800a17e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a182:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a186:	2a0d      	cmp	r2, #13
 800a188:	d8e6      	bhi.n	800a158 <_scanf_float+0x60>
 800a18a:	a101      	add	r1, pc, #4	; (adr r1, 800a190 <_scanf_float+0x98>)
 800a18c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a190:	0800a2cf 	.word	0x0800a2cf
 800a194:	0800a159 	.word	0x0800a159
 800a198:	0800a159 	.word	0x0800a159
 800a19c:	0800a159 	.word	0x0800a159
 800a1a0:	0800a32f 	.word	0x0800a32f
 800a1a4:	0800a307 	.word	0x0800a307
 800a1a8:	0800a159 	.word	0x0800a159
 800a1ac:	0800a159 	.word	0x0800a159
 800a1b0:	0800a2dd 	.word	0x0800a2dd
 800a1b4:	0800a159 	.word	0x0800a159
 800a1b8:	0800a159 	.word	0x0800a159
 800a1bc:	0800a159 	.word	0x0800a159
 800a1c0:	0800a159 	.word	0x0800a159
 800a1c4:	0800a295 	.word	0x0800a295
 800a1c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a1cc:	e7db      	b.n	800a186 <_scanf_float+0x8e>
 800a1ce:	290e      	cmp	r1, #14
 800a1d0:	d8c2      	bhi.n	800a158 <_scanf_float+0x60>
 800a1d2:	a001      	add	r0, pc, #4	; (adr r0, 800a1d8 <_scanf_float+0xe0>)
 800a1d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a1d8:	0800a287 	.word	0x0800a287
 800a1dc:	0800a159 	.word	0x0800a159
 800a1e0:	0800a287 	.word	0x0800a287
 800a1e4:	0800a31b 	.word	0x0800a31b
 800a1e8:	0800a159 	.word	0x0800a159
 800a1ec:	0800a235 	.word	0x0800a235
 800a1f0:	0800a271 	.word	0x0800a271
 800a1f4:	0800a271 	.word	0x0800a271
 800a1f8:	0800a271 	.word	0x0800a271
 800a1fc:	0800a271 	.word	0x0800a271
 800a200:	0800a271 	.word	0x0800a271
 800a204:	0800a271 	.word	0x0800a271
 800a208:	0800a271 	.word	0x0800a271
 800a20c:	0800a271 	.word	0x0800a271
 800a210:	0800a271 	.word	0x0800a271
 800a214:	2b6e      	cmp	r3, #110	; 0x6e
 800a216:	d809      	bhi.n	800a22c <_scanf_float+0x134>
 800a218:	2b60      	cmp	r3, #96	; 0x60
 800a21a:	d8b2      	bhi.n	800a182 <_scanf_float+0x8a>
 800a21c:	2b54      	cmp	r3, #84	; 0x54
 800a21e:	d077      	beq.n	800a310 <_scanf_float+0x218>
 800a220:	2b59      	cmp	r3, #89	; 0x59
 800a222:	d199      	bne.n	800a158 <_scanf_float+0x60>
 800a224:	2d07      	cmp	r5, #7
 800a226:	d197      	bne.n	800a158 <_scanf_float+0x60>
 800a228:	2508      	movs	r5, #8
 800a22a:	e029      	b.n	800a280 <_scanf_float+0x188>
 800a22c:	2b74      	cmp	r3, #116	; 0x74
 800a22e:	d06f      	beq.n	800a310 <_scanf_float+0x218>
 800a230:	2b79      	cmp	r3, #121	; 0x79
 800a232:	e7f6      	b.n	800a222 <_scanf_float+0x12a>
 800a234:	6821      	ldr	r1, [r4, #0]
 800a236:	05c8      	lsls	r0, r1, #23
 800a238:	d51a      	bpl.n	800a270 <_scanf_float+0x178>
 800a23a:	9b02      	ldr	r3, [sp, #8]
 800a23c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a240:	6021      	str	r1, [r4, #0]
 800a242:	f109 0901 	add.w	r9, r9, #1
 800a246:	b11b      	cbz	r3, 800a250 <_scanf_float+0x158>
 800a248:	3b01      	subs	r3, #1
 800a24a:	3201      	adds	r2, #1
 800a24c:	9302      	str	r3, [sp, #8]
 800a24e:	60a2      	str	r2, [r4, #8]
 800a250:	68a3      	ldr	r3, [r4, #8]
 800a252:	3b01      	subs	r3, #1
 800a254:	60a3      	str	r3, [r4, #8]
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	3301      	adds	r3, #1
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	3b01      	subs	r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	f340 8084 	ble.w	800a370 <_scanf_float+0x278>
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	603b      	str	r3, [r7, #0]
 800a26e:	e766      	b.n	800a13e <_scanf_float+0x46>
 800a270:	eb1a 0f05 	cmn.w	sl, r5
 800a274:	f47f af70 	bne.w	800a158 <_scanf_float+0x60>
 800a278:	6822      	ldr	r2, [r4, #0]
 800a27a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a27e:	6022      	str	r2, [r4, #0]
 800a280:	f806 3b01 	strb.w	r3, [r6], #1
 800a284:	e7e4      	b.n	800a250 <_scanf_float+0x158>
 800a286:	6822      	ldr	r2, [r4, #0]
 800a288:	0610      	lsls	r0, r2, #24
 800a28a:	f57f af65 	bpl.w	800a158 <_scanf_float+0x60>
 800a28e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a292:	e7f4      	b.n	800a27e <_scanf_float+0x186>
 800a294:	f1ba 0f00 	cmp.w	sl, #0
 800a298:	d10e      	bne.n	800a2b8 <_scanf_float+0x1c0>
 800a29a:	f1b9 0f00 	cmp.w	r9, #0
 800a29e:	d10e      	bne.n	800a2be <_scanf_float+0x1c6>
 800a2a0:	6822      	ldr	r2, [r4, #0]
 800a2a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a2a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a2aa:	d108      	bne.n	800a2be <_scanf_float+0x1c6>
 800a2ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2b0:	6022      	str	r2, [r4, #0]
 800a2b2:	f04f 0a01 	mov.w	sl, #1
 800a2b6:	e7e3      	b.n	800a280 <_scanf_float+0x188>
 800a2b8:	f1ba 0f02 	cmp.w	sl, #2
 800a2bc:	d055      	beq.n	800a36a <_scanf_float+0x272>
 800a2be:	2d01      	cmp	r5, #1
 800a2c0:	d002      	beq.n	800a2c8 <_scanf_float+0x1d0>
 800a2c2:	2d04      	cmp	r5, #4
 800a2c4:	f47f af48 	bne.w	800a158 <_scanf_float+0x60>
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	b2ed      	uxtb	r5, r5
 800a2cc:	e7d8      	b.n	800a280 <_scanf_float+0x188>
 800a2ce:	f1ba 0f01 	cmp.w	sl, #1
 800a2d2:	f47f af41 	bne.w	800a158 <_scanf_float+0x60>
 800a2d6:	f04f 0a02 	mov.w	sl, #2
 800a2da:	e7d1      	b.n	800a280 <_scanf_float+0x188>
 800a2dc:	b97d      	cbnz	r5, 800a2fe <_scanf_float+0x206>
 800a2de:	f1b9 0f00 	cmp.w	r9, #0
 800a2e2:	f47f af3c 	bne.w	800a15e <_scanf_float+0x66>
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a2ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a2f0:	f47f af39 	bne.w	800a166 <_scanf_float+0x6e>
 800a2f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2f8:	6022      	str	r2, [r4, #0]
 800a2fa:	2501      	movs	r5, #1
 800a2fc:	e7c0      	b.n	800a280 <_scanf_float+0x188>
 800a2fe:	2d03      	cmp	r5, #3
 800a300:	d0e2      	beq.n	800a2c8 <_scanf_float+0x1d0>
 800a302:	2d05      	cmp	r5, #5
 800a304:	e7de      	b.n	800a2c4 <_scanf_float+0x1cc>
 800a306:	2d02      	cmp	r5, #2
 800a308:	f47f af26 	bne.w	800a158 <_scanf_float+0x60>
 800a30c:	2503      	movs	r5, #3
 800a30e:	e7b7      	b.n	800a280 <_scanf_float+0x188>
 800a310:	2d06      	cmp	r5, #6
 800a312:	f47f af21 	bne.w	800a158 <_scanf_float+0x60>
 800a316:	2507      	movs	r5, #7
 800a318:	e7b2      	b.n	800a280 <_scanf_float+0x188>
 800a31a:	6822      	ldr	r2, [r4, #0]
 800a31c:	0591      	lsls	r1, r2, #22
 800a31e:	f57f af1b 	bpl.w	800a158 <_scanf_float+0x60>
 800a322:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a326:	6022      	str	r2, [r4, #0]
 800a328:	f8cd 9004 	str.w	r9, [sp, #4]
 800a32c:	e7a8      	b.n	800a280 <_scanf_float+0x188>
 800a32e:	6822      	ldr	r2, [r4, #0]
 800a330:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a334:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a338:	d006      	beq.n	800a348 <_scanf_float+0x250>
 800a33a:	0550      	lsls	r0, r2, #21
 800a33c:	f57f af0c 	bpl.w	800a158 <_scanf_float+0x60>
 800a340:	f1b9 0f00 	cmp.w	r9, #0
 800a344:	f43f af0f 	beq.w	800a166 <_scanf_float+0x6e>
 800a348:	0591      	lsls	r1, r2, #22
 800a34a:	bf58      	it	pl
 800a34c:	9901      	ldrpl	r1, [sp, #4]
 800a34e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a352:	bf58      	it	pl
 800a354:	eba9 0101 	subpl.w	r1, r9, r1
 800a358:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a35c:	bf58      	it	pl
 800a35e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a362:	6022      	str	r2, [r4, #0]
 800a364:	f04f 0900 	mov.w	r9, #0
 800a368:	e78a      	b.n	800a280 <_scanf_float+0x188>
 800a36a:	f04f 0a03 	mov.w	sl, #3
 800a36e:	e787      	b.n	800a280 <_scanf_float+0x188>
 800a370:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a374:	4639      	mov	r1, r7
 800a376:	4640      	mov	r0, r8
 800a378:	4798      	blx	r3
 800a37a:	2800      	cmp	r0, #0
 800a37c:	f43f aedf 	beq.w	800a13e <_scanf_float+0x46>
 800a380:	e6ea      	b.n	800a158 <_scanf_float+0x60>
 800a382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a386:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a38a:	463a      	mov	r2, r7
 800a38c:	4640      	mov	r0, r8
 800a38e:	4798      	blx	r3
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	3b01      	subs	r3, #1
 800a394:	6123      	str	r3, [r4, #16]
 800a396:	e6ec      	b.n	800a172 <_scanf_float+0x7a>
 800a398:	1e6b      	subs	r3, r5, #1
 800a39a:	2b06      	cmp	r3, #6
 800a39c:	d825      	bhi.n	800a3ea <_scanf_float+0x2f2>
 800a39e:	2d02      	cmp	r5, #2
 800a3a0:	d836      	bhi.n	800a410 <_scanf_float+0x318>
 800a3a2:	455e      	cmp	r6, fp
 800a3a4:	f67f aee8 	bls.w	800a178 <_scanf_float+0x80>
 800a3a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3b0:	463a      	mov	r2, r7
 800a3b2:	4640      	mov	r0, r8
 800a3b4:	4798      	blx	r3
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	e7f1      	b.n	800a3a2 <_scanf_float+0x2aa>
 800a3be:	9802      	ldr	r0, [sp, #8]
 800a3c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a3c8:	9002      	str	r0, [sp, #8]
 800a3ca:	463a      	mov	r2, r7
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	4798      	blx	r3
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	6123      	str	r3, [r4, #16]
 800a3d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a3da:	fa5f fa8a 	uxtb.w	sl, sl
 800a3de:	f1ba 0f02 	cmp.w	sl, #2
 800a3e2:	d1ec      	bne.n	800a3be <_scanf_float+0x2c6>
 800a3e4:	3d03      	subs	r5, #3
 800a3e6:	b2ed      	uxtb	r5, r5
 800a3e8:	1b76      	subs	r6, r6, r5
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	05da      	lsls	r2, r3, #23
 800a3ee:	d52f      	bpl.n	800a450 <_scanf_float+0x358>
 800a3f0:	055b      	lsls	r3, r3, #21
 800a3f2:	d510      	bpl.n	800a416 <_scanf_float+0x31e>
 800a3f4:	455e      	cmp	r6, fp
 800a3f6:	f67f aebf 	bls.w	800a178 <_scanf_float+0x80>
 800a3fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a402:	463a      	mov	r2, r7
 800a404:	4640      	mov	r0, r8
 800a406:	4798      	blx	r3
 800a408:	6923      	ldr	r3, [r4, #16]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	e7f1      	b.n	800a3f4 <_scanf_float+0x2fc>
 800a410:	46aa      	mov	sl, r5
 800a412:	9602      	str	r6, [sp, #8]
 800a414:	e7df      	b.n	800a3d6 <_scanf_float+0x2de>
 800a416:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a41a:	6923      	ldr	r3, [r4, #16]
 800a41c:	2965      	cmp	r1, #101	; 0x65
 800a41e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a422:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800a426:	6123      	str	r3, [r4, #16]
 800a428:	d00c      	beq.n	800a444 <_scanf_float+0x34c>
 800a42a:	2945      	cmp	r1, #69	; 0x45
 800a42c:	d00a      	beq.n	800a444 <_scanf_float+0x34c>
 800a42e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a432:	463a      	mov	r2, r7
 800a434:	4640      	mov	r0, r8
 800a436:	4798      	blx	r3
 800a438:	6923      	ldr	r3, [r4, #16]
 800a43a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a43e:	3b01      	subs	r3, #1
 800a440:	1eb5      	subs	r5, r6, #2
 800a442:	6123      	str	r3, [r4, #16]
 800a444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a448:	463a      	mov	r2, r7
 800a44a:	4640      	mov	r0, r8
 800a44c:	4798      	blx	r3
 800a44e:	462e      	mov	r6, r5
 800a450:	6825      	ldr	r5, [r4, #0]
 800a452:	f015 0510 	ands.w	r5, r5, #16
 800a456:	d158      	bne.n	800a50a <_scanf_float+0x412>
 800a458:	7035      	strb	r5, [r6, #0]
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a464:	d11c      	bne.n	800a4a0 <_scanf_float+0x3a8>
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	454b      	cmp	r3, r9
 800a46a:	eba3 0209 	sub.w	r2, r3, r9
 800a46e:	d124      	bne.n	800a4ba <_scanf_float+0x3c2>
 800a470:	2200      	movs	r2, #0
 800a472:	4659      	mov	r1, fp
 800a474:	4640      	mov	r0, r8
 800a476:	f000 ff63 	bl	800b340 <_strtod_r>
 800a47a:	9b03      	ldr	r3, [sp, #12]
 800a47c:	6821      	ldr	r1, [r4, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f011 0f02 	tst.w	r1, #2
 800a484:	ec57 6b10 	vmov	r6, r7, d0
 800a488:	f103 0204 	add.w	r2, r3, #4
 800a48c:	d020      	beq.n	800a4d0 <_scanf_float+0x3d8>
 800a48e:	9903      	ldr	r1, [sp, #12]
 800a490:	600a      	str	r2, [r1, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	e9c3 6700 	strd	r6, r7, [r3]
 800a498:	68e3      	ldr	r3, [r4, #12]
 800a49a:	3301      	adds	r3, #1
 800a49c:	60e3      	str	r3, [r4, #12]
 800a49e:	e66c      	b.n	800a17a <_scanf_float+0x82>
 800a4a0:	9b04      	ldr	r3, [sp, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0e4      	beq.n	800a470 <_scanf_float+0x378>
 800a4a6:	9905      	ldr	r1, [sp, #20]
 800a4a8:	230a      	movs	r3, #10
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	3101      	adds	r1, #1
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	f001 f834 	bl	800b51c <_strtol_r>
 800a4b4:	9b04      	ldr	r3, [sp, #16]
 800a4b6:	9e05      	ldr	r6, [sp, #20]
 800a4b8:	1ac2      	subs	r2, r0, r3
 800a4ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a4be:	429e      	cmp	r6, r3
 800a4c0:	bf28      	it	cs
 800a4c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a4c6:	4912      	ldr	r1, [pc, #72]	; (800a510 <_scanf_float+0x418>)
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	f000 f825 	bl	800a518 <siprintf>
 800a4ce:	e7cf      	b.n	800a470 <_scanf_float+0x378>
 800a4d0:	f011 0f04 	tst.w	r1, #4
 800a4d4:	9903      	ldr	r1, [sp, #12]
 800a4d6:	600a      	str	r2, [r1, #0]
 800a4d8:	d1db      	bne.n	800a492 <_scanf_float+0x39a>
 800a4da:	f8d3 8000 	ldr.w	r8, [r3]
 800a4de:	ee10 2a10 	vmov	r2, s0
 800a4e2:	ee10 0a10 	vmov	r0, s0
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	f7f6 fb1f 	bl	8000b2c <__aeabi_dcmpun>
 800a4ee:	b128      	cbz	r0, 800a4fc <_scanf_float+0x404>
 800a4f0:	4808      	ldr	r0, [pc, #32]	; (800a514 <_scanf_float+0x41c>)
 800a4f2:	f001 f8f5 	bl	800b6e0 <nanf>
 800a4f6:	ed88 0a00 	vstr	s0, [r8]
 800a4fa:	e7cd      	b.n	800a498 <_scanf_float+0x3a0>
 800a4fc:	4630      	mov	r0, r6
 800a4fe:	4639      	mov	r1, r7
 800a500:	f7f6 fb72 	bl	8000be8 <__aeabi_d2f>
 800a504:	f8c8 0000 	str.w	r0, [r8]
 800a508:	e7c6      	b.n	800a498 <_scanf_float+0x3a0>
 800a50a:	2500      	movs	r5, #0
 800a50c:	e635      	b.n	800a17a <_scanf_float+0x82>
 800a50e:	bf00      	nop
 800a510:	0800f578 	.word	0x0800f578
 800a514:	0800f967 	.word	0x0800f967

0800a518 <siprintf>:
 800a518:	b40e      	push	{r1, r2, r3}
 800a51a:	b500      	push	{lr}
 800a51c:	b09c      	sub	sp, #112	; 0x70
 800a51e:	ab1d      	add	r3, sp, #116	; 0x74
 800a520:	9002      	str	r0, [sp, #8]
 800a522:	9006      	str	r0, [sp, #24]
 800a524:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a528:	4809      	ldr	r0, [pc, #36]	; (800a550 <siprintf+0x38>)
 800a52a:	9107      	str	r1, [sp, #28]
 800a52c:	9104      	str	r1, [sp, #16]
 800a52e:	4909      	ldr	r1, [pc, #36]	; (800a554 <siprintf+0x3c>)
 800a530:	f853 2b04 	ldr.w	r2, [r3], #4
 800a534:	9105      	str	r1, [sp, #20]
 800a536:	6800      	ldr	r0, [r0, #0]
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	a902      	add	r1, sp, #8
 800a53c:	f002 fb50 	bl	800cbe0 <_svfiprintf_r>
 800a540:	9b02      	ldr	r3, [sp, #8]
 800a542:	2200      	movs	r2, #0
 800a544:	701a      	strb	r2, [r3, #0]
 800a546:	b01c      	add	sp, #112	; 0x70
 800a548:	f85d eb04 	ldr.w	lr, [sp], #4
 800a54c:	b003      	add	sp, #12
 800a54e:	4770      	bx	lr
 800a550:	200001fc 	.word	0x200001fc
 800a554:	ffff0208 	.word	0xffff0208

0800a558 <__sread>:
 800a558:	b510      	push	{r4, lr}
 800a55a:	460c      	mov	r4, r1
 800a55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a560:	f001 f856 	bl	800b610 <_read_r>
 800a564:	2800      	cmp	r0, #0
 800a566:	bfab      	itete	ge
 800a568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a56a:	89a3      	ldrhlt	r3, [r4, #12]
 800a56c:	181b      	addge	r3, r3, r0
 800a56e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a572:	bfac      	ite	ge
 800a574:	6563      	strge	r3, [r4, #84]	; 0x54
 800a576:	81a3      	strhlt	r3, [r4, #12]
 800a578:	bd10      	pop	{r4, pc}

0800a57a <__swrite>:
 800a57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a57e:	461f      	mov	r7, r3
 800a580:	898b      	ldrh	r3, [r1, #12]
 800a582:	05db      	lsls	r3, r3, #23
 800a584:	4605      	mov	r5, r0
 800a586:	460c      	mov	r4, r1
 800a588:	4616      	mov	r6, r2
 800a58a:	d505      	bpl.n	800a598 <__swrite+0x1e>
 800a58c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a590:	2302      	movs	r3, #2
 800a592:	2200      	movs	r2, #0
 800a594:	f001 f82a 	bl	800b5ec <_lseek_r>
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a59e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	4632      	mov	r2, r6
 800a5a6:	463b      	mov	r3, r7
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ae:	f001 b841 	b.w	800b634 <_write_r>

0800a5b2 <__sseek>:
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	460c      	mov	r4, r1
 800a5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ba:	f001 f817 	bl	800b5ec <_lseek_r>
 800a5be:	1c43      	adds	r3, r0, #1
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	bf15      	itete	ne
 800a5c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5ce:	81a3      	strheq	r3, [r4, #12]
 800a5d0:	bf18      	it	ne
 800a5d2:	81a3      	strhne	r3, [r4, #12]
 800a5d4:	bd10      	pop	{r4, pc}

0800a5d6 <__sclose>:
 800a5d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5da:	f000 bff7 	b.w	800b5cc <_close_r>
	...

0800a5e0 <std>:
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	b510      	push	{r4, lr}
 800a5e4:	4604      	mov	r4, r0
 800a5e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a5ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5ee:	6083      	str	r3, [r0, #8]
 800a5f0:	8181      	strh	r1, [r0, #12]
 800a5f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a5f4:	81c2      	strh	r2, [r0, #14]
 800a5f6:	6183      	str	r3, [r0, #24]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	2208      	movs	r2, #8
 800a5fc:	305c      	adds	r0, #92	; 0x5c
 800a5fe:	f000 ffd9 	bl	800b5b4 <memset>
 800a602:	4b0d      	ldr	r3, [pc, #52]	; (800a638 <std+0x58>)
 800a604:	6263      	str	r3, [r4, #36]	; 0x24
 800a606:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <std+0x5c>)
 800a608:	62a3      	str	r3, [r4, #40]	; 0x28
 800a60a:	4b0d      	ldr	r3, [pc, #52]	; (800a640 <std+0x60>)
 800a60c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a60e:	4b0d      	ldr	r3, [pc, #52]	; (800a644 <std+0x64>)
 800a610:	6323      	str	r3, [r4, #48]	; 0x30
 800a612:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <std+0x68>)
 800a614:	6224      	str	r4, [r4, #32]
 800a616:	429c      	cmp	r4, r3
 800a618:	d006      	beq.n	800a628 <std+0x48>
 800a61a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a61e:	4294      	cmp	r4, r2
 800a620:	d002      	beq.n	800a628 <std+0x48>
 800a622:	33d0      	adds	r3, #208	; 0xd0
 800a624:	429c      	cmp	r4, r3
 800a626:	d105      	bne.n	800a634 <std+0x54>
 800a628:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a62c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a630:	f001 b83c 	b.w	800b6ac <__retarget_lock_init_recursive>
 800a634:	bd10      	pop	{r4, pc}
 800a636:	bf00      	nop
 800a638:	0800a559 	.word	0x0800a559
 800a63c:	0800a57b 	.word	0x0800a57b
 800a640:	0800a5b3 	.word	0x0800a5b3
 800a644:	0800a5d7 	.word	0x0800a5d7
 800a648:	200006d4 	.word	0x200006d4

0800a64c <stdio_exit_handler>:
 800a64c:	4a02      	ldr	r2, [pc, #8]	; (800a658 <stdio_exit_handler+0xc>)
 800a64e:	4903      	ldr	r1, [pc, #12]	; (800a65c <stdio_exit_handler+0x10>)
 800a650:	4803      	ldr	r0, [pc, #12]	; (800a660 <stdio_exit_handler+0x14>)
 800a652:	f000 bf65 	b.w	800b520 <_fwalk_sglue>
 800a656:	bf00      	nop
 800a658:	20000038 	.word	0x20000038
 800a65c:	0800d2e5 	.word	0x0800d2e5
 800a660:	200001b0 	.word	0x200001b0

0800a664 <cleanup_stdio>:
 800a664:	6841      	ldr	r1, [r0, #4]
 800a666:	4b0c      	ldr	r3, [pc, #48]	; (800a698 <cleanup_stdio+0x34>)
 800a668:	4299      	cmp	r1, r3
 800a66a:	b510      	push	{r4, lr}
 800a66c:	4604      	mov	r4, r0
 800a66e:	d001      	beq.n	800a674 <cleanup_stdio+0x10>
 800a670:	f002 fe38 	bl	800d2e4 <_fflush_r>
 800a674:	68a1      	ldr	r1, [r4, #8]
 800a676:	4b09      	ldr	r3, [pc, #36]	; (800a69c <cleanup_stdio+0x38>)
 800a678:	4299      	cmp	r1, r3
 800a67a:	d002      	beq.n	800a682 <cleanup_stdio+0x1e>
 800a67c:	4620      	mov	r0, r4
 800a67e:	f002 fe31 	bl	800d2e4 <_fflush_r>
 800a682:	68e1      	ldr	r1, [r4, #12]
 800a684:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <cleanup_stdio+0x3c>)
 800a686:	4299      	cmp	r1, r3
 800a688:	d004      	beq.n	800a694 <cleanup_stdio+0x30>
 800a68a:	4620      	mov	r0, r4
 800a68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a690:	f002 be28 	b.w	800d2e4 <_fflush_r>
 800a694:	bd10      	pop	{r4, pc}
 800a696:	bf00      	nop
 800a698:	200006d4 	.word	0x200006d4
 800a69c:	2000073c 	.word	0x2000073c
 800a6a0:	200007a4 	.word	0x200007a4

0800a6a4 <global_stdio_init.part.0>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	; (800a6d4 <global_stdio_init.part.0+0x30>)
 800a6a8:	4c0b      	ldr	r4, [pc, #44]	; (800a6d8 <global_stdio_init.part.0+0x34>)
 800a6aa:	4a0c      	ldr	r2, [pc, #48]	; (800a6dc <global_stdio_init.part.0+0x38>)
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	2104      	movs	r1, #4
 800a6b4:	f7ff ff94 	bl	800a5e0 <std>
 800a6b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a6bc:	2201      	movs	r2, #1
 800a6be:	2109      	movs	r1, #9
 800a6c0:	f7ff ff8e 	bl	800a5e0 <std>
 800a6c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a6c8:	2202      	movs	r2, #2
 800a6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6ce:	2112      	movs	r1, #18
 800a6d0:	f7ff bf86 	b.w	800a5e0 <std>
 800a6d4:	2000080c 	.word	0x2000080c
 800a6d8:	200006d4 	.word	0x200006d4
 800a6dc:	0800a64d 	.word	0x0800a64d

0800a6e0 <__sfp_lock_acquire>:
 800a6e0:	4801      	ldr	r0, [pc, #4]	; (800a6e8 <__sfp_lock_acquire+0x8>)
 800a6e2:	f000 bfe4 	b.w	800b6ae <__retarget_lock_acquire_recursive>
 800a6e6:	bf00      	nop
 800a6e8:	20000815 	.word	0x20000815

0800a6ec <__sfp_lock_release>:
 800a6ec:	4801      	ldr	r0, [pc, #4]	; (800a6f4 <__sfp_lock_release+0x8>)
 800a6ee:	f000 bfdf 	b.w	800b6b0 <__retarget_lock_release_recursive>
 800a6f2:	bf00      	nop
 800a6f4:	20000815 	.word	0x20000815

0800a6f8 <__sinit>:
 800a6f8:	b510      	push	{r4, lr}
 800a6fa:	4604      	mov	r4, r0
 800a6fc:	f7ff fff0 	bl	800a6e0 <__sfp_lock_acquire>
 800a700:	6a23      	ldr	r3, [r4, #32]
 800a702:	b11b      	cbz	r3, 800a70c <__sinit+0x14>
 800a704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a708:	f7ff bff0 	b.w	800a6ec <__sfp_lock_release>
 800a70c:	4b04      	ldr	r3, [pc, #16]	; (800a720 <__sinit+0x28>)
 800a70e:	6223      	str	r3, [r4, #32]
 800a710:	4b04      	ldr	r3, [pc, #16]	; (800a724 <__sinit+0x2c>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1f5      	bne.n	800a704 <__sinit+0xc>
 800a718:	f7ff ffc4 	bl	800a6a4 <global_stdio_init.part.0>
 800a71c:	e7f2      	b.n	800a704 <__sinit+0xc>
 800a71e:	bf00      	nop
 800a720:	0800a665 	.word	0x0800a665
 800a724:	2000080c 	.word	0x2000080c

0800a728 <sulp>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	4604      	mov	r4, r0
 800a72c:	460d      	mov	r5, r1
 800a72e:	ec45 4b10 	vmov	d0, r4, r5
 800a732:	4616      	mov	r6, r2
 800a734:	f003 f976 	bl	800da24 <__ulp>
 800a738:	ec51 0b10 	vmov	r0, r1, d0
 800a73c:	b17e      	cbz	r6, 800a75e <sulp+0x36>
 800a73e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a742:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a746:	2b00      	cmp	r3, #0
 800a748:	dd09      	ble.n	800a75e <sulp+0x36>
 800a74a:	051b      	lsls	r3, r3, #20
 800a74c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a750:	2400      	movs	r4, #0
 800a752:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a756:	4622      	mov	r2, r4
 800a758:	462b      	mov	r3, r5
 800a75a:	f7f5 ff4d 	bl	80005f8 <__aeabi_dmul>
 800a75e:	bd70      	pop	{r4, r5, r6, pc}

0800a760 <_strtod_l>:
 800a760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a764:	ed2d 8b02 	vpush	{d8}
 800a768:	b09b      	sub	sp, #108	; 0x6c
 800a76a:	4604      	mov	r4, r0
 800a76c:	9213      	str	r2, [sp, #76]	; 0x4c
 800a76e:	2200      	movs	r2, #0
 800a770:	9216      	str	r2, [sp, #88]	; 0x58
 800a772:	460d      	mov	r5, r1
 800a774:	f04f 0800 	mov.w	r8, #0
 800a778:	f04f 0900 	mov.w	r9, #0
 800a77c:	460a      	mov	r2, r1
 800a77e:	9215      	str	r2, [sp, #84]	; 0x54
 800a780:	7811      	ldrb	r1, [r2, #0]
 800a782:	292b      	cmp	r1, #43	; 0x2b
 800a784:	d04c      	beq.n	800a820 <_strtod_l+0xc0>
 800a786:	d83a      	bhi.n	800a7fe <_strtod_l+0x9e>
 800a788:	290d      	cmp	r1, #13
 800a78a:	d834      	bhi.n	800a7f6 <_strtod_l+0x96>
 800a78c:	2908      	cmp	r1, #8
 800a78e:	d834      	bhi.n	800a7fa <_strtod_l+0x9a>
 800a790:	2900      	cmp	r1, #0
 800a792:	d03d      	beq.n	800a810 <_strtod_l+0xb0>
 800a794:	2200      	movs	r2, #0
 800a796:	920a      	str	r2, [sp, #40]	; 0x28
 800a798:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a79a:	7832      	ldrb	r2, [r6, #0]
 800a79c:	2a30      	cmp	r2, #48	; 0x30
 800a79e:	f040 80b4 	bne.w	800a90a <_strtod_l+0x1aa>
 800a7a2:	7872      	ldrb	r2, [r6, #1]
 800a7a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a7a8:	2a58      	cmp	r2, #88	; 0x58
 800a7aa:	d170      	bne.n	800a88e <_strtod_l+0x12e>
 800a7ac:	9302      	str	r3, [sp, #8]
 800a7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7b0:	9301      	str	r3, [sp, #4]
 800a7b2:	ab16      	add	r3, sp, #88	; 0x58
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	4a8e      	ldr	r2, [pc, #568]	; (800a9f0 <_strtod_l+0x290>)
 800a7b8:	ab17      	add	r3, sp, #92	; 0x5c
 800a7ba:	a915      	add	r1, sp, #84	; 0x54
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f001 fec5 	bl	800c54c <__gethex>
 800a7c2:	f010 070f 	ands.w	r7, r0, #15
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	d005      	beq.n	800a7d6 <_strtod_l+0x76>
 800a7ca:	2f06      	cmp	r7, #6
 800a7cc:	d12a      	bne.n	800a824 <_strtod_l+0xc4>
 800a7ce:	3601      	adds	r6, #1
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	9615      	str	r6, [sp, #84]	; 0x54
 800a7d4:	930a      	str	r3, [sp, #40]	; 0x28
 800a7d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f040 857f 	bne.w	800b2dc <_strtod_l+0xb7c>
 800a7de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7e0:	b1db      	cbz	r3, 800a81a <_strtod_l+0xba>
 800a7e2:	4642      	mov	r2, r8
 800a7e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a7e8:	ec43 2b10 	vmov	d0, r2, r3
 800a7ec:	b01b      	add	sp, #108	; 0x6c
 800a7ee:	ecbd 8b02 	vpop	{d8}
 800a7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f6:	2920      	cmp	r1, #32
 800a7f8:	d1cc      	bne.n	800a794 <_strtod_l+0x34>
 800a7fa:	3201      	adds	r2, #1
 800a7fc:	e7bf      	b.n	800a77e <_strtod_l+0x1e>
 800a7fe:	292d      	cmp	r1, #45	; 0x2d
 800a800:	d1c8      	bne.n	800a794 <_strtod_l+0x34>
 800a802:	2101      	movs	r1, #1
 800a804:	910a      	str	r1, [sp, #40]	; 0x28
 800a806:	1c51      	adds	r1, r2, #1
 800a808:	9115      	str	r1, [sp, #84]	; 0x54
 800a80a:	7852      	ldrb	r2, [r2, #1]
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	d1c3      	bne.n	800a798 <_strtod_l+0x38>
 800a810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a812:	9515      	str	r5, [sp, #84]	; 0x54
 800a814:	2b00      	cmp	r3, #0
 800a816:	f040 855f 	bne.w	800b2d8 <_strtod_l+0xb78>
 800a81a:	4642      	mov	r2, r8
 800a81c:	464b      	mov	r3, r9
 800a81e:	e7e3      	b.n	800a7e8 <_strtod_l+0x88>
 800a820:	2100      	movs	r1, #0
 800a822:	e7ef      	b.n	800a804 <_strtod_l+0xa4>
 800a824:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a826:	b13a      	cbz	r2, 800a838 <_strtod_l+0xd8>
 800a828:	2135      	movs	r1, #53	; 0x35
 800a82a:	a818      	add	r0, sp, #96	; 0x60
 800a82c:	f003 f9f7 	bl	800dc1e <__copybits>
 800a830:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a832:	4620      	mov	r0, r4
 800a834:	f002 fdca 	bl	800d3cc <_Bfree>
 800a838:	3f01      	subs	r7, #1
 800a83a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a83c:	2f04      	cmp	r7, #4
 800a83e:	d806      	bhi.n	800a84e <_strtod_l+0xee>
 800a840:	e8df f007 	tbb	[pc, r7]
 800a844:	201d0314 	.word	0x201d0314
 800a848:	14          	.byte	0x14
 800a849:	00          	.byte	0x00
 800a84a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a84e:	05e9      	lsls	r1, r5, #23
 800a850:	bf48      	it	mi
 800a852:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a856:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a85a:	0d1b      	lsrs	r3, r3, #20
 800a85c:	051b      	lsls	r3, r3, #20
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1b9      	bne.n	800a7d6 <_strtod_l+0x76>
 800a862:	f000 fef9 	bl	800b658 <__errno>
 800a866:	2322      	movs	r3, #34	; 0x22
 800a868:	6003      	str	r3, [r0, #0]
 800a86a:	e7b4      	b.n	800a7d6 <_strtod_l+0x76>
 800a86c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a870:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a874:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a878:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a87c:	e7e7      	b.n	800a84e <_strtod_l+0xee>
 800a87e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a9f8 <_strtod_l+0x298>
 800a882:	e7e4      	b.n	800a84e <_strtod_l+0xee>
 800a884:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a888:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a88c:	e7df      	b.n	800a84e <_strtod_l+0xee>
 800a88e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a890:	1c5a      	adds	r2, r3, #1
 800a892:	9215      	str	r2, [sp, #84]	; 0x54
 800a894:	785b      	ldrb	r3, [r3, #1]
 800a896:	2b30      	cmp	r3, #48	; 0x30
 800a898:	d0f9      	beq.n	800a88e <_strtod_l+0x12e>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d09b      	beq.n	800a7d6 <_strtod_l+0x76>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	f04f 0a00 	mov.w	sl, #0
 800a8a4:	9304      	str	r3, [sp, #16]
 800a8a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a8ae:	46d3      	mov	fp, sl
 800a8b0:	220a      	movs	r2, #10
 800a8b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a8b4:	7806      	ldrb	r6, [r0, #0]
 800a8b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a8ba:	b2d9      	uxtb	r1, r3
 800a8bc:	2909      	cmp	r1, #9
 800a8be:	d926      	bls.n	800a90e <_strtod_l+0x1ae>
 800a8c0:	494c      	ldr	r1, [pc, #304]	; (800a9f4 <_strtod_l+0x294>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f000 fe64 	bl	800b590 <strncmp>
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d030      	beq.n	800a92e <_strtod_l+0x1ce>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	4632      	mov	r2, r6
 800a8d0:	9005      	str	r0, [sp, #20]
 800a8d2:	465e      	mov	r6, fp
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2a65      	cmp	r2, #101	; 0x65
 800a8d8:	d001      	beq.n	800a8de <_strtod_l+0x17e>
 800a8da:	2a45      	cmp	r2, #69	; 0x45
 800a8dc:	d113      	bne.n	800a906 <_strtod_l+0x1a6>
 800a8de:	b91e      	cbnz	r6, 800a8e8 <_strtod_l+0x188>
 800a8e0:	9a04      	ldr	r2, [sp, #16]
 800a8e2:	4302      	orrs	r2, r0
 800a8e4:	d094      	beq.n	800a810 <_strtod_l+0xb0>
 800a8e6:	2600      	movs	r6, #0
 800a8e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a8ea:	1c6a      	adds	r2, r5, #1
 800a8ec:	9215      	str	r2, [sp, #84]	; 0x54
 800a8ee:	786a      	ldrb	r2, [r5, #1]
 800a8f0:	2a2b      	cmp	r2, #43	; 0x2b
 800a8f2:	d074      	beq.n	800a9de <_strtod_l+0x27e>
 800a8f4:	2a2d      	cmp	r2, #45	; 0x2d
 800a8f6:	d078      	beq.n	800a9ea <_strtod_l+0x28a>
 800a8f8:	f04f 0c00 	mov.w	ip, #0
 800a8fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a900:	2909      	cmp	r1, #9
 800a902:	d97f      	bls.n	800aa04 <_strtod_l+0x2a4>
 800a904:	9515      	str	r5, [sp, #84]	; 0x54
 800a906:	2700      	movs	r7, #0
 800a908:	e09e      	b.n	800aa48 <_strtod_l+0x2e8>
 800a90a:	2300      	movs	r3, #0
 800a90c:	e7c8      	b.n	800a8a0 <_strtod_l+0x140>
 800a90e:	f1bb 0f08 	cmp.w	fp, #8
 800a912:	bfd8      	it	le
 800a914:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a916:	f100 0001 	add.w	r0, r0, #1
 800a91a:	bfda      	itte	le
 800a91c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a920:	9309      	strle	r3, [sp, #36]	; 0x24
 800a922:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a926:	f10b 0b01 	add.w	fp, fp, #1
 800a92a:	9015      	str	r0, [sp, #84]	; 0x54
 800a92c:	e7c1      	b.n	800a8b2 <_strtod_l+0x152>
 800a92e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a930:	1c5a      	adds	r2, r3, #1
 800a932:	9215      	str	r2, [sp, #84]	; 0x54
 800a934:	785a      	ldrb	r2, [r3, #1]
 800a936:	f1bb 0f00 	cmp.w	fp, #0
 800a93a:	d037      	beq.n	800a9ac <_strtod_l+0x24c>
 800a93c:	9005      	str	r0, [sp, #20]
 800a93e:	465e      	mov	r6, fp
 800a940:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a944:	2b09      	cmp	r3, #9
 800a946:	d912      	bls.n	800a96e <_strtod_l+0x20e>
 800a948:	2301      	movs	r3, #1
 800a94a:	e7c4      	b.n	800a8d6 <_strtod_l+0x176>
 800a94c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	9215      	str	r2, [sp, #84]	; 0x54
 800a952:	785a      	ldrb	r2, [r3, #1]
 800a954:	3001      	adds	r0, #1
 800a956:	2a30      	cmp	r2, #48	; 0x30
 800a958:	d0f8      	beq.n	800a94c <_strtod_l+0x1ec>
 800a95a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a95e:	2b08      	cmp	r3, #8
 800a960:	f200 84c1 	bhi.w	800b2e6 <_strtod_l+0xb86>
 800a964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a966:	9005      	str	r0, [sp, #20]
 800a968:	2000      	movs	r0, #0
 800a96a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a96c:	4606      	mov	r6, r0
 800a96e:	3a30      	subs	r2, #48	; 0x30
 800a970:	f100 0301 	add.w	r3, r0, #1
 800a974:	d014      	beq.n	800a9a0 <_strtod_l+0x240>
 800a976:	9905      	ldr	r1, [sp, #20]
 800a978:	4419      	add	r1, r3
 800a97a:	9105      	str	r1, [sp, #20]
 800a97c:	4633      	mov	r3, r6
 800a97e:	eb00 0c06 	add.w	ip, r0, r6
 800a982:	210a      	movs	r1, #10
 800a984:	4563      	cmp	r3, ip
 800a986:	d113      	bne.n	800a9b0 <_strtod_l+0x250>
 800a988:	1833      	adds	r3, r6, r0
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	f106 0601 	add.w	r6, r6, #1
 800a990:	4406      	add	r6, r0
 800a992:	dc1a      	bgt.n	800a9ca <_strtod_l+0x26a>
 800a994:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a996:	230a      	movs	r3, #10
 800a998:	fb03 2301 	mla	r3, r3, r1, r2
 800a99c:	9309      	str	r3, [sp, #36]	; 0x24
 800a99e:	2300      	movs	r3, #0
 800a9a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a9a2:	1c51      	adds	r1, r2, #1
 800a9a4:	9115      	str	r1, [sp, #84]	; 0x54
 800a9a6:	7852      	ldrb	r2, [r2, #1]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	e7c9      	b.n	800a940 <_strtod_l+0x1e0>
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	e7d2      	b.n	800a956 <_strtod_l+0x1f6>
 800a9b0:	2b08      	cmp	r3, #8
 800a9b2:	f103 0301 	add.w	r3, r3, #1
 800a9b6:	dc03      	bgt.n	800a9c0 <_strtod_l+0x260>
 800a9b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a9ba:	434f      	muls	r7, r1
 800a9bc:	9709      	str	r7, [sp, #36]	; 0x24
 800a9be:	e7e1      	b.n	800a984 <_strtod_l+0x224>
 800a9c0:	2b10      	cmp	r3, #16
 800a9c2:	bfd8      	it	le
 800a9c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a9c8:	e7dc      	b.n	800a984 <_strtod_l+0x224>
 800a9ca:	2e10      	cmp	r6, #16
 800a9cc:	bfdc      	itt	le
 800a9ce:	230a      	movle	r3, #10
 800a9d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a9d4:	e7e3      	b.n	800a99e <_strtod_l+0x23e>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9305      	str	r3, [sp, #20]
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e780      	b.n	800a8e0 <_strtod_l+0x180>
 800a9de:	f04f 0c00 	mov.w	ip, #0
 800a9e2:	1caa      	adds	r2, r5, #2
 800a9e4:	9215      	str	r2, [sp, #84]	; 0x54
 800a9e6:	78aa      	ldrb	r2, [r5, #2]
 800a9e8:	e788      	b.n	800a8fc <_strtod_l+0x19c>
 800a9ea:	f04f 0c01 	mov.w	ip, #1
 800a9ee:	e7f8      	b.n	800a9e2 <_strtod_l+0x282>
 800a9f0:	0800f580 	.word	0x0800f580
 800a9f4:	0800f57d 	.word	0x0800f57d
 800a9f8:	7ff00000 	.word	0x7ff00000
 800a9fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a9fe:	1c51      	adds	r1, r2, #1
 800aa00:	9115      	str	r1, [sp, #84]	; 0x54
 800aa02:	7852      	ldrb	r2, [r2, #1]
 800aa04:	2a30      	cmp	r2, #48	; 0x30
 800aa06:	d0f9      	beq.n	800a9fc <_strtod_l+0x29c>
 800aa08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800aa0c:	2908      	cmp	r1, #8
 800aa0e:	f63f af7a 	bhi.w	800a906 <_strtod_l+0x1a6>
 800aa12:	3a30      	subs	r2, #48	; 0x30
 800aa14:	9208      	str	r2, [sp, #32]
 800aa16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa18:	920c      	str	r2, [sp, #48]	; 0x30
 800aa1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aa1c:	1c57      	adds	r7, r2, #1
 800aa1e:	9715      	str	r7, [sp, #84]	; 0x54
 800aa20:	7852      	ldrb	r2, [r2, #1]
 800aa22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800aa26:	f1be 0f09 	cmp.w	lr, #9
 800aa2a:	d938      	bls.n	800aa9e <_strtod_l+0x33e>
 800aa2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa2e:	1a7f      	subs	r7, r7, r1
 800aa30:	2f08      	cmp	r7, #8
 800aa32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800aa36:	dc03      	bgt.n	800aa40 <_strtod_l+0x2e0>
 800aa38:	9908      	ldr	r1, [sp, #32]
 800aa3a:	428f      	cmp	r7, r1
 800aa3c:	bfa8      	it	ge
 800aa3e:	460f      	movge	r7, r1
 800aa40:	f1bc 0f00 	cmp.w	ip, #0
 800aa44:	d000      	beq.n	800aa48 <_strtod_l+0x2e8>
 800aa46:	427f      	negs	r7, r7
 800aa48:	2e00      	cmp	r6, #0
 800aa4a:	d14f      	bne.n	800aaec <_strtod_l+0x38c>
 800aa4c:	9904      	ldr	r1, [sp, #16]
 800aa4e:	4301      	orrs	r1, r0
 800aa50:	f47f aec1 	bne.w	800a7d6 <_strtod_l+0x76>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f47f aedb 	bne.w	800a810 <_strtod_l+0xb0>
 800aa5a:	2a69      	cmp	r2, #105	; 0x69
 800aa5c:	d029      	beq.n	800aab2 <_strtod_l+0x352>
 800aa5e:	dc26      	bgt.n	800aaae <_strtod_l+0x34e>
 800aa60:	2a49      	cmp	r2, #73	; 0x49
 800aa62:	d026      	beq.n	800aab2 <_strtod_l+0x352>
 800aa64:	2a4e      	cmp	r2, #78	; 0x4e
 800aa66:	f47f aed3 	bne.w	800a810 <_strtod_l+0xb0>
 800aa6a:	499b      	ldr	r1, [pc, #620]	; (800acd8 <_strtod_l+0x578>)
 800aa6c:	a815      	add	r0, sp, #84	; 0x54
 800aa6e:	f001 ffad 	bl	800c9cc <__match>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f43f aecc 	beq.w	800a810 <_strtod_l+0xb0>
 800aa78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b28      	cmp	r3, #40	; 0x28
 800aa7e:	d12f      	bne.n	800aae0 <_strtod_l+0x380>
 800aa80:	4996      	ldr	r1, [pc, #600]	; (800acdc <_strtod_l+0x57c>)
 800aa82:	aa18      	add	r2, sp, #96	; 0x60
 800aa84:	a815      	add	r0, sp, #84	; 0x54
 800aa86:	f001 ffb5 	bl	800c9f4 <__hexnan>
 800aa8a:	2805      	cmp	r0, #5
 800aa8c:	d128      	bne.n	800aae0 <_strtod_l+0x380>
 800aa8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aa90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aa94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800aa98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800aa9c:	e69b      	b.n	800a7d6 <_strtod_l+0x76>
 800aa9e:	9f08      	ldr	r7, [sp, #32]
 800aaa0:	210a      	movs	r1, #10
 800aaa2:	fb01 2107 	mla	r1, r1, r7, r2
 800aaa6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800aaaa:	9208      	str	r2, [sp, #32]
 800aaac:	e7b5      	b.n	800aa1a <_strtod_l+0x2ba>
 800aaae:	2a6e      	cmp	r2, #110	; 0x6e
 800aab0:	e7d9      	b.n	800aa66 <_strtod_l+0x306>
 800aab2:	498b      	ldr	r1, [pc, #556]	; (800ace0 <_strtod_l+0x580>)
 800aab4:	a815      	add	r0, sp, #84	; 0x54
 800aab6:	f001 ff89 	bl	800c9cc <__match>
 800aaba:	2800      	cmp	r0, #0
 800aabc:	f43f aea8 	beq.w	800a810 <_strtod_l+0xb0>
 800aac0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aac2:	4988      	ldr	r1, [pc, #544]	; (800ace4 <_strtod_l+0x584>)
 800aac4:	3b01      	subs	r3, #1
 800aac6:	a815      	add	r0, sp, #84	; 0x54
 800aac8:	9315      	str	r3, [sp, #84]	; 0x54
 800aaca:	f001 ff7f 	bl	800c9cc <__match>
 800aace:	b910      	cbnz	r0, 800aad6 <_strtod_l+0x376>
 800aad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aad2:	3301      	adds	r3, #1
 800aad4:	9315      	str	r3, [sp, #84]	; 0x54
 800aad6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800acf4 <_strtod_l+0x594>
 800aada:	f04f 0800 	mov.w	r8, #0
 800aade:	e67a      	b.n	800a7d6 <_strtod_l+0x76>
 800aae0:	4881      	ldr	r0, [pc, #516]	; (800ace8 <_strtod_l+0x588>)
 800aae2:	f000 fdf5 	bl	800b6d0 <nan>
 800aae6:	ec59 8b10 	vmov	r8, r9, d0
 800aaea:	e674      	b.n	800a7d6 <_strtod_l+0x76>
 800aaec:	9b05      	ldr	r3, [sp, #20]
 800aaee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaf0:	1afb      	subs	r3, r7, r3
 800aaf2:	f1bb 0f00 	cmp.w	fp, #0
 800aaf6:	bf08      	it	eq
 800aaf8:	46b3      	moveq	fp, r6
 800aafa:	2e10      	cmp	r6, #16
 800aafc:	9308      	str	r3, [sp, #32]
 800aafe:	4635      	mov	r5, r6
 800ab00:	bfa8      	it	ge
 800ab02:	2510      	movge	r5, #16
 800ab04:	f7f5 fcfe 	bl	8000504 <__aeabi_ui2d>
 800ab08:	2e09      	cmp	r6, #9
 800ab0a:	4680      	mov	r8, r0
 800ab0c:	4689      	mov	r9, r1
 800ab0e:	dd13      	ble.n	800ab38 <_strtod_l+0x3d8>
 800ab10:	4b76      	ldr	r3, [pc, #472]	; (800acec <_strtod_l+0x58c>)
 800ab12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ab16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ab1a:	f7f5 fd6d 	bl	80005f8 <__aeabi_dmul>
 800ab1e:	4680      	mov	r8, r0
 800ab20:	4650      	mov	r0, sl
 800ab22:	4689      	mov	r9, r1
 800ab24:	f7f5 fcee 	bl	8000504 <__aeabi_ui2d>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	4640      	mov	r0, r8
 800ab2e:	4649      	mov	r1, r9
 800ab30:	f7f5 fbac 	bl	800028c <__adddf3>
 800ab34:	4680      	mov	r8, r0
 800ab36:	4689      	mov	r9, r1
 800ab38:	2e0f      	cmp	r6, #15
 800ab3a:	dc38      	bgt.n	800abae <_strtod_l+0x44e>
 800ab3c:	9b08      	ldr	r3, [sp, #32]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f43f ae49 	beq.w	800a7d6 <_strtod_l+0x76>
 800ab44:	dd24      	ble.n	800ab90 <_strtod_l+0x430>
 800ab46:	2b16      	cmp	r3, #22
 800ab48:	dc0b      	bgt.n	800ab62 <_strtod_l+0x402>
 800ab4a:	4968      	ldr	r1, [pc, #416]	; (800acec <_strtod_l+0x58c>)
 800ab4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab54:	4642      	mov	r2, r8
 800ab56:	464b      	mov	r3, r9
 800ab58:	f7f5 fd4e 	bl	80005f8 <__aeabi_dmul>
 800ab5c:	4680      	mov	r8, r0
 800ab5e:	4689      	mov	r9, r1
 800ab60:	e639      	b.n	800a7d6 <_strtod_l+0x76>
 800ab62:	9a08      	ldr	r2, [sp, #32]
 800ab64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	db20      	blt.n	800abae <_strtod_l+0x44e>
 800ab6c:	4c5f      	ldr	r4, [pc, #380]	; (800acec <_strtod_l+0x58c>)
 800ab6e:	f1c6 060f 	rsb	r6, r6, #15
 800ab72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ab76:	4642      	mov	r2, r8
 800ab78:	464b      	mov	r3, r9
 800ab7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab7e:	f7f5 fd3b 	bl	80005f8 <__aeabi_dmul>
 800ab82:	9b08      	ldr	r3, [sp, #32]
 800ab84:	1b9e      	subs	r6, r3, r6
 800ab86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ab8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab8e:	e7e3      	b.n	800ab58 <_strtod_l+0x3f8>
 800ab90:	9b08      	ldr	r3, [sp, #32]
 800ab92:	3316      	adds	r3, #22
 800ab94:	db0b      	blt.n	800abae <_strtod_l+0x44e>
 800ab96:	9b05      	ldr	r3, [sp, #20]
 800ab98:	1bdf      	subs	r7, r3, r7
 800ab9a:	4b54      	ldr	r3, [pc, #336]	; (800acec <_strtod_l+0x58c>)
 800ab9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aba4:	4640      	mov	r0, r8
 800aba6:	4649      	mov	r1, r9
 800aba8:	f7f5 fe50 	bl	800084c <__aeabi_ddiv>
 800abac:	e7d6      	b.n	800ab5c <_strtod_l+0x3fc>
 800abae:	9b08      	ldr	r3, [sp, #32]
 800abb0:	1b75      	subs	r5, r6, r5
 800abb2:	441d      	add	r5, r3
 800abb4:	2d00      	cmp	r5, #0
 800abb6:	dd70      	ble.n	800ac9a <_strtod_l+0x53a>
 800abb8:	f015 030f 	ands.w	r3, r5, #15
 800abbc:	d00a      	beq.n	800abd4 <_strtod_l+0x474>
 800abbe:	494b      	ldr	r1, [pc, #300]	; (800acec <_strtod_l+0x58c>)
 800abc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800abc4:	4642      	mov	r2, r8
 800abc6:	464b      	mov	r3, r9
 800abc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abcc:	f7f5 fd14 	bl	80005f8 <__aeabi_dmul>
 800abd0:	4680      	mov	r8, r0
 800abd2:	4689      	mov	r9, r1
 800abd4:	f035 050f 	bics.w	r5, r5, #15
 800abd8:	d04d      	beq.n	800ac76 <_strtod_l+0x516>
 800abda:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800abde:	dd22      	ble.n	800ac26 <_strtod_l+0x4c6>
 800abe0:	2500      	movs	r5, #0
 800abe2:	46ab      	mov	fp, r5
 800abe4:	9509      	str	r5, [sp, #36]	; 0x24
 800abe6:	9505      	str	r5, [sp, #20]
 800abe8:	2322      	movs	r3, #34	; 0x22
 800abea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800acf4 <_strtod_l+0x594>
 800abee:	6023      	str	r3, [r4, #0]
 800abf0:	f04f 0800 	mov.w	r8, #0
 800abf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	f43f aded 	beq.w	800a7d6 <_strtod_l+0x76>
 800abfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800abfe:	4620      	mov	r0, r4
 800ac00:	f002 fbe4 	bl	800d3cc <_Bfree>
 800ac04:	9905      	ldr	r1, [sp, #20]
 800ac06:	4620      	mov	r0, r4
 800ac08:	f002 fbe0 	bl	800d3cc <_Bfree>
 800ac0c:	4659      	mov	r1, fp
 800ac0e:	4620      	mov	r0, r4
 800ac10:	f002 fbdc 	bl	800d3cc <_Bfree>
 800ac14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac16:	4620      	mov	r0, r4
 800ac18:	f002 fbd8 	bl	800d3cc <_Bfree>
 800ac1c:	4629      	mov	r1, r5
 800ac1e:	4620      	mov	r0, r4
 800ac20:	f002 fbd4 	bl	800d3cc <_Bfree>
 800ac24:	e5d7      	b.n	800a7d6 <_strtod_l+0x76>
 800ac26:	4b32      	ldr	r3, [pc, #200]	; (800acf0 <_strtod_l+0x590>)
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	112d      	asrs	r5, r5, #4
 800ac2e:	4640      	mov	r0, r8
 800ac30:	4649      	mov	r1, r9
 800ac32:	469a      	mov	sl, r3
 800ac34:	2d01      	cmp	r5, #1
 800ac36:	dc21      	bgt.n	800ac7c <_strtod_l+0x51c>
 800ac38:	b10b      	cbz	r3, 800ac3e <_strtod_l+0x4de>
 800ac3a:	4680      	mov	r8, r0
 800ac3c:	4689      	mov	r9, r1
 800ac3e:	492c      	ldr	r1, [pc, #176]	; (800acf0 <_strtod_l+0x590>)
 800ac40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ac44:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ac48:	4642      	mov	r2, r8
 800ac4a:	464b      	mov	r3, r9
 800ac4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac50:	f7f5 fcd2 	bl	80005f8 <__aeabi_dmul>
 800ac54:	4b27      	ldr	r3, [pc, #156]	; (800acf4 <_strtod_l+0x594>)
 800ac56:	460a      	mov	r2, r1
 800ac58:	400b      	ands	r3, r1
 800ac5a:	4927      	ldr	r1, [pc, #156]	; (800acf8 <_strtod_l+0x598>)
 800ac5c:	428b      	cmp	r3, r1
 800ac5e:	4680      	mov	r8, r0
 800ac60:	d8be      	bhi.n	800abe0 <_strtod_l+0x480>
 800ac62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ac66:	428b      	cmp	r3, r1
 800ac68:	bf86      	itte	hi
 800ac6a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800acfc <_strtod_l+0x59c>
 800ac6e:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800ac72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800ac76:	2300      	movs	r3, #0
 800ac78:	9304      	str	r3, [sp, #16]
 800ac7a:	e07b      	b.n	800ad74 <_strtod_l+0x614>
 800ac7c:	07ea      	lsls	r2, r5, #31
 800ac7e:	d505      	bpl.n	800ac8c <_strtod_l+0x52c>
 800ac80:	9b04      	ldr	r3, [sp, #16]
 800ac82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac86:	f7f5 fcb7 	bl	80005f8 <__aeabi_dmul>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	9a04      	ldr	r2, [sp, #16]
 800ac8e:	3208      	adds	r2, #8
 800ac90:	f10a 0a01 	add.w	sl, sl, #1
 800ac94:	106d      	asrs	r5, r5, #1
 800ac96:	9204      	str	r2, [sp, #16]
 800ac98:	e7cc      	b.n	800ac34 <_strtod_l+0x4d4>
 800ac9a:	d0ec      	beq.n	800ac76 <_strtod_l+0x516>
 800ac9c:	426d      	negs	r5, r5
 800ac9e:	f015 020f 	ands.w	r2, r5, #15
 800aca2:	d00a      	beq.n	800acba <_strtod_l+0x55a>
 800aca4:	4b11      	ldr	r3, [pc, #68]	; (800acec <_strtod_l+0x58c>)
 800aca6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acaa:	4640      	mov	r0, r8
 800acac:	4649      	mov	r1, r9
 800acae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb2:	f7f5 fdcb 	bl	800084c <__aeabi_ddiv>
 800acb6:	4680      	mov	r8, r0
 800acb8:	4689      	mov	r9, r1
 800acba:	112d      	asrs	r5, r5, #4
 800acbc:	d0db      	beq.n	800ac76 <_strtod_l+0x516>
 800acbe:	2d1f      	cmp	r5, #31
 800acc0:	dd1e      	ble.n	800ad00 <_strtod_l+0x5a0>
 800acc2:	2500      	movs	r5, #0
 800acc4:	46ab      	mov	fp, r5
 800acc6:	9509      	str	r5, [sp, #36]	; 0x24
 800acc8:	9505      	str	r5, [sp, #20]
 800acca:	2322      	movs	r3, #34	; 0x22
 800accc:	f04f 0800 	mov.w	r8, #0
 800acd0:	f04f 0900 	mov.w	r9, #0
 800acd4:	6023      	str	r3, [r4, #0]
 800acd6:	e78d      	b.n	800abf4 <_strtod_l+0x494>
 800acd8:	0800f551 	.word	0x0800f551
 800acdc:	0800f594 	.word	0x0800f594
 800ace0:	0800f549 	.word	0x0800f549
 800ace4:	0800f6dc 	.word	0x0800f6dc
 800ace8:	0800f967 	.word	0x0800f967
 800acec:	0800f858 	.word	0x0800f858
 800acf0:	0800f830 	.word	0x0800f830
 800acf4:	7ff00000 	.word	0x7ff00000
 800acf8:	7ca00000 	.word	0x7ca00000
 800acfc:	7fefffff 	.word	0x7fefffff
 800ad00:	f015 0310 	ands.w	r3, r5, #16
 800ad04:	bf18      	it	ne
 800ad06:	236a      	movne	r3, #106	; 0x6a
 800ad08:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b0ac <_strtod_l+0x94c>
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	4640      	mov	r0, r8
 800ad10:	4649      	mov	r1, r9
 800ad12:	2300      	movs	r3, #0
 800ad14:	07ea      	lsls	r2, r5, #31
 800ad16:	d504      	bpl.n	800ad22 <_strtod_l+0x5c2>
 800ad18:	e9da 2300 	ldrd	r2, r3, [sl]
 800ad1c:	f7f5 fc6c 	bl	80005f8 <__aeabi_dmul>
 800ad20:	2301      	movs	r3, #1
 800ad22:	106d      	asrs	r5, r5, #1
 800ad24:	f10a 0a08 	add.w	sl, sl, #8
 800ad28:	d1f4      	bne.n	800ad14 <_strtod_l+0x5b4>
 800ad2a:	b10b      	cbz	r3, 800ad30 <_strtod_l+0x5d0>
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	4689      	mov	r9, r1
 800ad30:	9b04      	ldr	r3, [sp, #16]
 800ad32:	b1bb      	cbz	r3, 800ad64 <_strtod_l+0x604>
 800ad34:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ad38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	4649      	mov	r1, r9
 800ad40:	dd10      	ble.n	800ad64 <_strtod_l+0x604>
 800ad42:	2b1f      	cmp	r3, #31
 800ad44:	f340 811e 	ble.w	800af84 <_strtod_l+0x824>
 800ad48:	2b34      	cmp	r3, #52	; 0x34
 800ad4a:	bfde      	ittt	le
 800ad4c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800ad50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ad54:	4093      	lslle	r3, r2
 800ad56:	f04f 0800 	mov.w	r8, #0
 800ad5a:	bfcc      	ite	gt
 800ad5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800ad60:	ea03 0901 	andle.w	r9, r3, r1
 800ad64:	2200      	movs	r2, #0
 800ad66:	2300      	movs	r3, #0
 800ad68:	4640      	mov	r0, r8
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	f7f5 feac 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d1a6      	bne.n	800acc2 <_strtod_l+0x562>
 800ad74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad7a:	4633      	mov	r3, r6
 800ad7c:	465a      	mov	r2, fp
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f002 fb8c 	bl	800d49c <__s2b>
 800ad84:	9009      	str	r0, [sp, #36]	; 0x24
 800ad86:	2800      	cmp	r0, #0
 800ad88:	f43f af2a 	beq.w	800abe0 <_strtod_l+0x480>
 800ad8c:	9a08      	ldr	r2, [sp, #32]
 800ad8e:	9b05      	ldr	r3, [sp, #20]
 800ad90:	2a00      	cmp	r2, #0
 800ad92:	eba3 0307 	sub.w	r3, r3, r7
 800ad96:	bfa8      	it	ge
 800ad98:	2300      	movge	r3, #0
 800ad9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ad9c:	2500      	movs	r5, #0
 800ad9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ada2:	9312      	str	r3, [sp, #72]	; 0x48
 800ada4:	46ab      	mov	fp, r5
 800ada6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ada8:	4620      	mov	r0, r4
 800adaa:	6859      	ldr	r1, [r3, #4]
 800adac:	f002 face 	bl	800d34c <_Balloc>
 800adb0:	9005      	str	r0, [sp, #20]
 800adb2:	2800      	cmp	r0, #0
 800adb4:	f43f af18 	beq.w	800abe8 <_strtod_l+0x488>
 800adb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adba:	691a      	ldr	r2, [r3, #16]
 800adbc:	3202      	adds	r2, #2
 800adbe:	f103 010c 	add.w	r1, r3, #12
 800adc2:	0092      	lsls	r2, r2, #2
 800adc4:	300c      	adds	r0, #12
 800adc6:	f000 fc74 	bl	800b6b2 <memcpy>
 800adca:	ec49 8b10 	vmov	d0, r8, r9
 800adce:	aa18      	add	r2, sp, #96	; 0x60
 800add0:	a917      	add	r1, sp, #92	; 0x5c
 800add2:	4620      	mov	r0, r4
 800add4:	f002 fe96 	bl	800db04 <__d2b>
 800add8:	ec49 8b18 	vmov	d8, r8, r9
 800addc:	9016      	str	r0, [sp, #88]	; 0x58
 800adde:	2800      	cmp	r0, #0
 800ade0:	f43f af02 	beq.w	800abe8 <_strtod_l+0x488>
 800ade4:	2101      	movs	r1, #1
 800ade6:	4620      	mov	r0, r4
 800ade8:	f002 fbf0 	bl	800d5cc <__i2b>
 800adec:	4683      	mov	fp, r0
 800adee:	2800      	cmp	r0, #0
 800adf0:	f43f aefa 	beq.w	800abe8 <_strtod_l+0x488>
 800adf4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800adf6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800adf8:	2e00      	cmp	r6, #0
 800adfa:	bfab      	itete	ge
 800adfc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800adfe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ae00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ae02:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ae06:	bfac      	ite	ge
 800ae08:	eb06 0a03 	addge.w	sl, r6, r3
 800ae0c:	1b9f      	sublt	r7, r3, r6
 800ae0e:	9b04      	ldr	r3, [sp, #16]
 800ae10:	1af6      	subs	r6, r6, r3
 800ae12:	4416      	add	r6, r2
 800ae14:	4ba0      	ldr	r3, [pc, #640]	; (800b098 <_strtod_l+0x938>)
 800ae16:	3e01      	subs	r6, #1
 800ae18:	429e      	cmp	r6, r3
 800ae1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ae1e:	f280 80c4 	bge.w	800afaa <_strtod_l+0x84a>
 800ae22:	1b9b      	subs	r3, r3, r6
 800ae24:	2b1f      	cmp	r3, #31
 800ae26:	eba2 0203 	sub.w	r2, r2, r3
 800ae2a:	f04f 0101 	mov.w	r1, #1
 800ae2e:	f300 80b0 	bgt.w	800af92 <_strtod_l+0x832>
 800ae32:	fa01 f303 	lsl.w	r3, r1, r3
 800ae36:	930e      	str	r3, [sp, #56]	; 0x38
 800ae38:	2300      	movs	r3, #0
 800ae3a:	930d      	str	r3, [sp, #52]	; 0x34
 800ae3c:	eb0a 0602 	add.w	r6, sl, r2
 800ae40:	9b04      	ldr	r3, [sp, #16]
 800ae42:	45b2      	cmp	sl, r6
 800ae44:	4417      	add	r7, r2
 800ae46:	441f      	add	r7, r3
 800ae48:	4653      	mov	r3, sl
 800ae4a:	bfa8      	it	ge
 800ae4c:	4633      	movge	r3, r6
 800ae4e:	42bb      	cmp	r3, r7
 800ae50:	bfa8      	it	ge
 800ae52:	463b      	movge	r3, r7
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	bfc2      	ittt	gt
 800ae58:	1af6      	subgt	r6, r6, r3
 800ae5a:	1aff      	subgt	r7, r7, r3
 800ae5c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ae60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	dd17      	ble.n	800ae96 <_strtod_l+0x736>
 800ae66:	4659      	mov	r1, fp
 800ae68:	461a      	mov	r2, r3
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f002 fc6e 	bl	800d74c <__pow5mult>
 800ae70:	4683      	mov	fp, r0
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f43f aeb8 	beq.w	800abe8 <_strtod_l+0x488>
 800ae78:	4601      	mov	r1, r0
 800ae7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f002 fbbb 	bl	800d5f8 <__multiply>
 800ae82:	900b      	str	r0, [sp, #44]	; 0x2c
 800ae84:	2800      	cmp	r0, #0
 800ae86:	f43f aeaf 	beq.w	800abe8 <_strtod_l+0x488>
 800ae8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f002 fa9d 	bl	800d3cc <_Bfree>
 800ae92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae94:	9316      	str	r3, [sp, #88]	; 0x58
 800ae96:	2e00      	cmp	r6, #0
 800ae98:	f300 808c 	bgt.w	800afb4 <_strtod_l+0x854>
 800ae9c:	9b08      	ldr	r3, [sp, #32]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dd08      	ble.n	800aeb4 <_strtod_l+0x754>
 800aea2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aea4:	9905      	ldr	r1, [sp, #20]
 800aea6:	4620      	mov	r0, r4
 800aea8:	f002 fc50 	bl	800d74c <__pow5mult>
 800aeac:	9005      	str	r0, [sp, #20]
 800aeae:	2800      	cmp	r0, #0
 800aeb0:	f43f ae9a 	beq.w	800abe8 <_strtod_l+0x488>
 800aeb4:	2f00      	cmp	r7, #0
 800aeb6:	dd08      	ble.n	800aeca <_strtod_l+0x76a>
 800aeb8:	9905      	ldr	r1, [sp, #20]
 800aeba:	463a      	mov	r2, r7
 800aebc:	4620      	mov	r0, r4
 800aebe:	f002 fc9f 	bl	800d800 <__lshift>
 800aec2:	9005      	str	r0, [sp, #20]
 800aec4:	2800      	cmp	r0, #0
 800aec6:	f43f ae8f 	beq.w	800abe8 <_strtod_l+0x488>
 800aeca:	f1ba 0f00 	cmp.w	sl, #0
 800aece:	dd08      	ble.n	800aee2 <_strtod_l+0x782>
 800aed0:	4659      	mov	r1, fp
 800aed2:	4652      	mov	r2, sl
 800aed4:	4620      	mov	r0, r4
 800aed6:	f002 fc93 	bl	800d800 <__lshift>
 800aeda:	4683      	mov	fp, r0
 800aedc:	2800      	cmp	r0, #0
 800aede:	f43f ae83 	beq.w	800abe8 <_strtod_l+0x488>
 800aee2:	9a05      	ldr	r2, [sp, #20]
 800aee4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aee6:	4620      	mov	r0, r4
 800aee8:	f002 fd12 	bl	800d910 <__mdiff>
 800aeec:	4605      	mov	r5, r0
 800aeee:	2800      	cmp	r0, #0
 800aef0:	f43f ae7a 	beq.w	800abe8 <_strtod_l+0x488>
 800aef4:	68c3      	ldr	r3, [r0, #12]
 800aef6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aef8:	2300      	movs	r3, #0
 800aefa:	60c3      	str	r3, [r0, #12]
 800aefc:	4659      	mov	r1, fp
 800aefe:	f002 fceb 	bl	800d8d8 <__mcmp>
 800af02:	2800      	cmp	r0, #0
 800af04:	da60      	bge.n	800afc8 <_strtod_l+0x868>
 800af06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af08:	ea53 0308 	orrs.w	r3, r3, r8
 800af0c:	f040 8084 	bne.w	800b018 <_strtod_l+0x8b8>
 800af10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af14:	2b00      	cmp	r3, #0
 800af16:	d17f      	bne.n	800b018 <_strtod_l+0x8b8>
 800af18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af1c:	0d1b      	lsrs	r3, r3, #20
 800af1e:	051b      	lsls	r3, r3, #20
 800af20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800af24:	d978      	bls.n	800b018 <_strtod_l+0x8b8>
 800af26:	696b      	ldr	r3, [r5, #20]
 800af28:	b913      	cbnz	r3, 800af30 <_strtod_l+0x7d0>
 800af2a:	692b      	ldr	r3, [r5, #16]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	dd73      	ble.n	800b018 <_strtod_l+0x8b8>
 800af30:	4629      	mov	r1, r5
 800af32:	2201      	movs	r2, #1
 800af34:	4620      	mov	r0, r4
 800af36:	f002 fc63 	bl	800d800 <__lshift>
 800af3a:	4659      	mov	r1, fp
 800af3c:	4605      	mov	r5, r0
 800af3e:	f002 fccb 	bl	800d8d8 <__mcmp>
 800af42:	2800      	cmp	r0, #0
 800af44:	dd68      	ble.n	800b018 <_strtod_l+0x8b8>
 800af46:	9904      	ldr	r1, [sp, #16]
 800af48:	4a54      	ldr	r2, [pc, #336]	; (800b09c <_strtod_l+0x93c>)
 800af4a:	464b      	mov	r3, r9
 800af4c:	2900      	cmp	r1, #0
 800af4e:	f000 8084 	beq.w	800b05a <_strtod_l+0x8fa>
 800af52:	ea02 0109 	and.w	r1, r2, r9
 800af56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800af5a:	dc7e      	bgt.n	800b05a <_strtod_l+0x8fa>
 800af5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800af60:	f77f aeb3 	ble.w	800acca <_strtod_l+0x56a>
 800af64:	4b4e      	ldr	r3, [pc, #312]	; (800b0a0 <_strtod_l+0x940>)
 800af66:	4640      	mov	r0, r8
 800af68:	4649      	mov	r1, r9
 800af6a:	2200      	movs	r2, #0
 800af6c:	f7f5 fb44 	bl	80005f8 <__aeabi_dmul>
 800af70:	4b4a      	ldr	r3, [pc, #296]	; (800b09c <_strtod_l+0x93c>)
 800af72:	400b      	ands	r3, r1
 800af74:	4680      	mov	r8, r0
 800af76:	4689      	mov	r9, r1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f47f ae3f 	bne.w	800abfc <_strtod_l+0x49c>
 800af7e:	2322      	movs	r3, #34	; 0x22
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	e63b      	b.n	800abfc <_strtod_l+0x49c>
 800af84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af88:	fa02 f303 	lsl.w	r3, r2, r3
 800af8c:	ea03 0808 	and.w	r8, r3, r8
 800af90:	e6e8      	b.n	800ad64 <_strtod_l+0x604>
 800af92:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800af96:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800af9a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800af9e:	36e2      	adds	r6, #226	; 0xe2
 800afa0:	fa01 f306 	lsl.w	r3, r1, r6
 800afa4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800afa8:	e748      	b.n	800ae3c <_strtod_l+0x6dc>
 800afaa:	2100      	movs	r1, #0
 800afac:	2301      	movs	r3, #1
 800afae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800afb2:	e743      	b.n	800ae3c <_strtod_l+0x6dc>
 800afb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800afb6:	4632      	mov	r2, r6
 800afb8:	4620      	mov	r0, r4
 800afba:	f002 fc21 	bl	800d800 <__lshift>
 800afbe:	9016      	str	r0, [sp, #88]	; 0x58
 800afc0:	2800      	cmp	r0, #0
 800afc2:	f47f af6b 	bne.w	800ae9c <_strtod_l+0x73c>
 800afc6:	e60f      	b.n	800abe8 <_strtod_l+0x488>
 800afc8:	46ca      	mov	sl, r9
 800afca:	d171      	bne.n	800b0b0 <_strtod_l+0x950>
 800afcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afd2:	b352      	cbz	r2, 800b02a <_strtod_l+0x8ca>
 800afd4:	4a33      	ldr	r2, [pc, #204]	; (800b0a4 <_strtod_l+0x944>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d12a      	bne.n	800b030 <_strtod_l+0x8d0>
 800afda:	9b04      	ldr	r3, [sp, #16]
 800afdc:	4641      	mov	r1, r8
 800afde:	b1fb      	cbz	r3, 800b020 <_strtod_l+0x8c0>
 800afe0:	4b2e      	ldr	r3, [pc, #184]	; (800b09c <_strtod_l+0x93c>)
 800afe2:	ea09 0303 	and.w	r3, r9, r3
 800afe6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800afea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afee:	d81a      	bhi.n	800b026 <_strtod_l+0x8c6>
 800aff0:	0d1b      	lsrs	r3, r3, #20
 800aff2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aff6:	fa02 f303 	lsl.w	r3, r2, r3
 800affa:	4299      	cmp	r1, r3
 800affc:	d118      	bne.n	800b030 <_strtod_l+0x8d0>
 800affe:	4b2a      	ldr	r3, [pc, #168]	; (800b0a8 <_strtod_l+0x948>)
 800b000:	459a      	cmp	sl, r3
 800b002:	d102      	bne.n	800b00a <_strtod_l+0x8aa>
 800b004:	3101      	adds	r1, #1
 800b006:	f43f adef 	beq.w	800abe8 <_strtod_l+0x488>
 800b00a:	4b24      	ldr	r3, [pc, #144]	; (800b09c <_strtod_l+0x93c>)
 800b00c:	ea0a 0303 	and.w	r3, sl, r3
 800b010:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b014:	f04f 0800 	mov.w	r8, #0
 800b018:	9b04      	ldr	r3, [sp, #16]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1a2      	bne.n	800af64 <_strtod_l+0x804>
 800b01e:	e5ed      	b.n	800abfc <_strtod_l+0x49c>
 800b020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b024:	e7e9      	b.n	800affa <_strtod_l+0x89a>
 800b026:	4613      	mov	r3, r2
 800b028:	e7e7      	b.n	800affa <_strtod_l+0x89a>
 800b02a:	ea53 0308 	orrs.w	r3, r3, r8
 800b02e:	d08a      	beq.n	800af46 <_strtod_l+0x7e6>
 800b030:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b032:	b1e3      	cbz	r3, 800b06e <_strtod_l+0x90e>
 800b034:	ea13 0f0a 	tst.w	r3, sl
 800b038:	d0ee      	beq.n	800b018 <_strtod_l+0x8b8>
 800b03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b03c:	9a04      	ldr	r2, [sp, #16]
 800b03e:	4640      	mov	r0, r8
 800b040:	4649      	mov	r1, r9
 800b042:	b1c3      	cbz	r3, 800b076 <_strtod_l+0x916>
 800b044:	f7ff fb70 	bl	800a728 <sulp>
 800b048:	4602      	mov	r2, r0
 800b04a:	460b      	mov	r3, r1
 800b04c:	ec51 0b18 	vmov	r0, r1, d8
 800b050:	f7f5 f91c 	bl	800028c <__adddf3>
 800b054:	4680      	mov	r8, r0
 800b056:	4689      	mov	r9, r1
 800b058:	e7de      	b.n	800b018 <_strtod_l+0x8b8>
 800b05a:	4013      	ands	r3, r2
 800b05c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b060:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b064:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b068:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b06c:	e7d4      	b.n	800b018 <_strtod_l+0x8b8>
 800b06e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b070:	ea13 0f08 	tst.w	r3, r8
 800b074:	e7e0      	b.n	800b038 <_strtod_l+0x8d8>
 800b076:	f7ff fb57 	bl	800a728 <sulp>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	ec51 0b18 	vmov	r0, r1, d8
 800b082:	f7f5 f901 	bl	8000288 <__aeabi_dsub>
 800b086:	2200      	movs	r2, #0
 800b088:	2300      	movs	r3, #0
 800b08a:	4680      	mov	r8, r0
 800b08c:	4689      	mov	r9, r1
 800b08e:	f7f5 fd1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b092:	2800      	cmp	r0, #0
 800b094:	d0c0      	beq.n	800b018 <_strtod_l+0x8b8>
 800b096:	e618      	b.n	800acca <_strtod_l+0x56a>
 800b098:	fffffc02 	.word	0xfffffc02
 800b09c:	7ff00000 	.word	0x7ff00000
 800b0a0:	39500000 	.word	0x39500000
 800b0a4:	000fffff 	.word	0x000fffff
 800b0a8:	7fefffff 	.word	0x7fefffff
 800b0ac:	0800f5a8 	.word	0x0800f5a8
 800b0b0:	4659      	mov	r1, fp
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	f002 fd80 	bl	800dbb8 <__ratio>
 800b0b8:	ec57 6b10 	vmov	r6, r7, d0
 800b0bc:	ee10 0a10 	vmov	r0, s0
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0c6:	4639      	mov	r1, r7
 800b0c8:	f7f5 fd12 	bl	8000af0 <__aeabi_dcmple>
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d071      	beq.n	800b1b4 <_strtod_l+0xa54>
 800b0d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d17c      	bne.n	800b1d0 <_strtod_l+0xa70>
 800b0d6:	f1b8 0f00 	cmp.w	r8, #0
 800b0da:	d15a      	bne.n	800b192 <_strtod_l+0xa32>
 800b0dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d15d      	bne.n	800b1a0 <_strtod_l+0xa40>
 800b0e4:	4b90      	ldr	r3, [pc, #576]	; (800b328 <_strtod_l+0xbc8>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	4630      	mov	r0, r6
 800b0ea:	4639      	mov	r1, r7
 800b0ec:	f7f5 fcf6 	bl	8000adc <__aeabi_dcmplt>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d15c      	bne.n	800b1ae <_strtod_l+0xa4e>
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	4639      	mov	r1, r7
 800b0f8:	4b8c      	ldr	r3, [pc, #560]	; (800b32c <_strtod_l+0xbcc>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f7f5 fa7c 	bl	80005f8 <__aeabi_dmul>
 800b100:	4606      	mov	r6, r0
 800b102:	460f      	mov	r7, r1
 800b104:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b108:	9606      	str	r6, [sp, #24]
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b110:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b114:	4b86      	ldr	r3, [pc, #536]	; (800b330 <_strtod_l+0xbd0>)
 800b116:	ea0a 0303 	and.w	r3, sl, r3
 800b11a:	930d      	str	r3, [sp, #52]	; 0x34
 800b11c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b11e:	4b85      	ldr	r3, [pc, #532]	; (800b334 <_strtod_l+0xbd4>)
 800b120:	429a      	cmp	r2, r3
 800b122:	f040 8090 	bne.w	800b246 <_strtod_l+0xae6>
 800b126:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b12a:	ec49 8b10 	vmov	d0, r8, r9
 800b12e:	f002 fc79 	bl	800da24 <__ulp>
 800b132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b136:	ec51 0b10 	vmov	r0, r1, d0
 800b13a:	f7f5 fa5d 	bl	80005f8 <__aeabi_dmul>
 800b13e:	4642      	mov	r2, r8
 800b140:	464b      	mov	r3, r9
 800b142:	f7f5 f8a3 	bl	800028c <__adddf3>
 800b146:	460b      	mov	r3, r1
 800b148:	4979      	ldr	r1, [pc, #484]	; (800b330 <_strtod_l+0xbd0>)
 800b14a:	4a7b      	ldr	r2, [pc, #492]	; (800b338 <_strtod_l+0xbd8>)
 800b14c:	4019      	ands	r1, r3
 800b14e:	4291      	cmp	r1, r2
 800b150:	4680      	mov	r8, r0
 800b152:	d944      	bls.n	800b1de <_strtod_l+0xa7e>
 800b154:	ee18 2a90 	vmov	r2, s17
 800b158:	4b78      	ldr	r3, [pc, #480]	; (800b33c <_strtod_l+0xbdc>)
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d104      	bne.n	800b168 <_strtod_l+0xa08>
 800b15e:	ee18 3a10 	vmov	r3, s16
 800b162:	3301      	adds	r3, #1
 800b164:	f43f ad40 	beq.w	800abe8 <_strtod_l+0x488>
 800b168:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b33c <_strtod_l+0xbdc>
 800b16c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b170:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b172:	4620      	mov	r0, r4
 800b174:	f002 f92a 	bl	800d3cc <_Bfree>
 800b178:	9905      	ldr	r1, [sp, #20]
 800b17a:	4620      	mov	r0, r4
 800b17c:	f002 f926 	bl	800d3cc <_Bfree>
 800b180:	4659      	mov	r1, fp
 800b182:	4620      	mov	r0, r4
 800b184:	f002 f922 	bl	800d3cc <_Bfree>
 800b188:	4629      	mov	r1, r5
 800b18a:	4620      	mov	r0, r4
 800b18c:	f002 f91e 	bl	800d3cc <_Bfree>
 800b190:	e609      	b.n	800ada6 <_strtod_l+0x646>
 800b192:	f1b8 0f01 	cmp.w	r8, #1
 800b196:	d103      	bne.n	800b1a0 <_strtod_l+0xa40>
 800b198:	f1b9 0f00 	cmp.w	r9, #0
 800b19c:	f43f ad95 	beq.w	800acca <_strtod_l+0x56a>
 800b1a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b2f8 <_strtod_l+0xb98>
 800b1a4:	4f60      	ldr	r7, [pc, #384]	; (800b328 <_strtod_l+0xbc8>)
 800b1a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1aa:	2600      	movs	r6, #0
 800b1ac:	e7ae      	b.n	800b10c <_strtod_l+0x9ac>
 800b1ae:	4f5f      	ldr	r7, [pc, #380]	; (800b32c <_strtod_l+0xbcc>)
 800b1b0:	2600      	movs	r6, #0
 800b1b2:	e7a7      	b.n	800b104 <_strtod_l+0x9a4>
 800b1b4:	4b5d      	ldr	r3, [pc, #372]	; (800b32c <_strtod_l+0xbcc>)
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	4639      	mov	r1, r7
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f7f5 fa1c 	bl	80005f8 <__aeabi_dmul>
 800b1c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	460f      	mov	r7, r1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d09c      	beq.n	800b104 <_strtod_l+0x9a4>
 800b1ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b1ce:	e79d      	b.n	800b10c <_strtod_l+0x9ac>
 800b1d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b300 <_strtod_l+0xba0>
 800b1d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b1d8:	ec57 6b17 	vmov	r6, r7, d7
 800b1dc:	e796      	b.n	800b10c <_strtod_l+0x9ac>
 800b1de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b1e2:	9b04      	ldr	r3, [sp, #16]
 800b1e4:	46ca      	mov	sl, r9
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d1c2      	bne.n	800b170 <_strtod_l+0xa10>
 800b1ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1f0:	0d1b      	lsrs	r3, r3, #20
 800b1f2:	051b      	lsls	r3, r3, #20
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d1bb      	bne.n	800b170 <_strtod_l+0xa10>
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	f7f5 fd5c 	bl	8000cb8 <__aeabi_d2lz>
 800b200:	f7f5 f9cc 	bl	800059c <__aeabi_l2d>
 800b204:	4602      	mov	r2, r0
 800b206:	460b      	mov	r3, r1
 800b208:	4630      	mov	r0, r6
 800b20a:	4639      	mov	r1, r7
 800b20c:	f7f5 f83c 	bl	8000288 <__aeabi_dsub>
 800b210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b212:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b216:	ea43 0308 	orr.w	r3, r3, r8
 800b21a:	4313      	orrs	r3, r2
 800b21c:	4606      	mov	r6, r0
 800b21e:	460f      	mov	r7, r1
 800b220:	d054      	beq.n	800b2cc <_strtod_l+0xb6c>
 800b222:	a339      	add	r3, pc, #228	; (adr r3, 800b308 <_strtod_l+0xba8>)
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f7f5 fc58 	bl	8000adc <__aeabi_dcmplt>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	f47f ace5 	bne.w	800abfc <_strtod_l+0x49c>
 800b232:	a337      	add	r3, pc, #220	; (adr r3, 800b310 <_strtod_l+0xbb0>)
 800b234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b238:	4630      	mov	r0, r6
 800b23a:	4639      	mov	r1, r7
 800b23c:	f7f5 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 800b240:	2800      	cmp	r0, #0
 800b242:	d095      	beq.n	800b170 <_strtod_l+0xa10>
 800b244:	e4da      	b.n	800abfc <_strtod_l+0x49c>
 800b246:	9b04      	ldr	r3, [sp, #16]
 800b248:	b333      	cbz	r3, 800b298 <_strtod_l+0xb38>
 800b24a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b24c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b250:	d822      	bhi.n	800b298 <_strtod_l+0xb38>
 800b252:	a331      	add	r3, pc, #196	; (adr r3, 800b318 <_strtod_l+0xbb8>)
 800b254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f5 fc48 	bl	8000af0 <__aeabi_dcmple>
 800b260:	b1a0      	cbz	r0, 800b28c <_strtod_l+0xb2c>
 800b262:	4639      	mov	r1, r7
 800b264:	4630      	mov	r0, r6
 800b266:	f7f5 fc9f 	bl	8000ba8 <__aeabi_d2uiz>
 800b26a:	2801      	cmp	r0, #1
 800b26c:	bf38      	it	cc
 800b26e:	2001      	movcc	r0, #1
 800b270:	f7f5 f948 	bl	8000504 <__aeabi_ui2d>
 800b274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b276:	4606      	mov	r6, r0
 800b278:	460f      	mov	r7, r1
 800b27a:	bb23      	cbnz	r3, 800b2c6 <_strtod_l+0xb66>
 800b27c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b280:	9010      	str	r0, [sp, #64]	; 0x40
 800b282:	9311      	str	r3, [sp, #68]	; 0x44
 800b284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b288:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b28c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b28e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b290:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b294:	1a9b      	subs	r3, r3, r2
 800b296:	930f      	str	r3, [sp, #60]	; 0x3c
 800b298:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b29c:	eeb0 0a48 	vmov.f32	s0, s16
 800b2a0:	eef0 0a68 	vmov.f32	s1, s17
 800b2a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b2a8:	f002 fbbc 	bl	800da24 <__ulp>
 800b2ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b2b0:	ec53 2b10 	vmov	r2, r3, d0
 800b2b4:	f7f5 f9a0 	bl	80005f8 <__aeabi_dmul>
 800b2b8:	ec53 2b18 	vmov	r2, r3, d8
 800b2bc:	f7f4 ffe6 	bl	800028c <__adddf3>
 800b2c0:	4680      	mov	r8, r0
 800b2c2:	4689      	mov	r9, r1
 800b2c4:	e78d      	b.n	800b1e2 <_strtod_l+0xa82>
 800b2c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b2ca:	e7db      	b.n	800b284 <_strtod_l+0xb24>
 800b2cc:	a314      	add	r3, pc, #80	; (adr r3, 800b320 <_strtod_l+0xbc0>)
 800b2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d2:	f7f5 fc03 	bl	8000adc <__aeabi_dcmplt>
 800b2d6:	e7b3      	b.n	800b240 <_strtod_l+0xae0>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	930a      	str	r3, [sp, #40]	; 0x28
 800b2dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	f7ff ba7c 	b.w	800a7de <_strtod_l+0x7e>
 800b2e6:	2a65      	cmp	r2, #101	; 0x65
 800b2e8:	f43f ab75 	beq.w	800a9d6 <_strtod_l+0x276>
 800b2ec:	2a45      	cmp	r2, #69	; 0x45
 800b2ee:	f43f ab72 	beq.w	800a9d6 <_strtod_l+0x276>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	f7ff bbaa 	b.w	800aa4c <_strtod_l+0x2ec>
 800b2f8:	00000000 	.word	0x00000000
 800b2fc:	bff00000 	.word	0xbff00000
 800b300:	00000000 	.word	0x00000000
 800b304:	3ff00000 	.word	0x3ff00000
 800b308:	94a03595 	.word	0x94a03595
 800b30c:	3fdfffff 	.word	0x3fdfffff
 800b310:	35afe535 	.word	0x35afe535
 800b314:	3fe00000 	.word	0x3fe00000
 800b318:	ffc00000 	.word	0xffc00000
 800b31c:	41dfffff 	.word	0x41dfffff
 800b320:	94a03595 	.word	0x94a03595
 800b324:	3fcfffff 	.word	0x3fcfffff
 800b328:	3ff00000 	.word	0x3ff00000
 800b32c:	3fe00000 	.word	0x3fe00000
 800b330:	7ff00000 	.word	0x7ff00000
 800b334:	7fe00000 	.word	0x7fe00000
 800b338:	7c9fffff 	.word	0x7c9fffff
 800b33c:	7fefffff 	.word	0x7fefffff

0800b340 <_strtod_r>:
 800b340:	4b01      	ldr	r3, [pc, #4]	; (800b348 <_strtod_r+0x8>)
 800b342:	f7ff ba0d 	b.w	800a760 <_strtod_l>
 800b346:	bf00      	nop
 800b348:	20000044 	.word	0x20000044

0800b34c <strtof>:
 800b34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b350:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800b414 <strtof+0xc8>
 800b354:	4b2a      	ldr	r3, [pc, #168]	; (800b400 <strtof+0xb4>)
 800b356:	460a      	mov	r2, r1
 800b358:	ed2d 8b02 	vpush	{d8}
 800b35c:	4601      	mov	r1, r0
 800b35e:	f8d8 0000 	ldr.w	r0, [r8]
 800b362:	f7ff f9fd 	bl	800a760 <_strtod_l>
 800b366:	ec55 4b10 	vmov	r4, r5, d0
 800b36a:	ee10 2a10 	vmov	r2, s0
 800b36e:	ee10 0a10 	vmov	r0, s0
 800b372:	462b      	mov	r3, r5
 800b374:	4629      	mov	r1, r5
 800b376:	f7f5 fbd9 	bl	8000b2c <__aeabi_dcmpun>
 800b37a:	b190      	cbz	r0, 800b3a2 <strtof+0x56>
 800b37c:	2d00      	cmp	r5, #0
 800b37e:	4821      	ldr	r0, [pc, #132]	; (800b404 <strtof+0xb8>)
 800b380:	da09      	bge.n	800b396 <strtof+0x4a>
 800b382:	f000 f9ad 	bl	800b6e0 <nanf>
 800b386:	eeb1 8a40 	vneg.f32	s16, s0
 800b38a:	eeb0 0a48 	vmov.f32	s0, s16
 800b38e:	ecbd 8b02 	vpop	{d8}
 800b392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b396:	ecbd 8b02 	vpop	{d8}
 800b39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b39e:	f000 b99f 	b.w	800b6e0 <nanf>
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	f7f5 fc1f 	bl	8000be8 <__aeabi_d2f>
 800b3aa:	ee08 0a10 	vmov	s16, r0
 800b3ae:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b408 <strtof+0xbc>
 800b3b2:	eeb0 7ac8 	vabs.f32	s14, s16
 800b3b6:	eeb4 7a67 	vcmp.f32	s14, s15
 800b3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3be:	dd11      	ble.n	800b3e4 <strtof+0x98>
 800b3c0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b3c4:	4b11      	ldr	r3, [pc, #68]	; (800b40c <strtof+0xc0>)
 800b3c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	f7f5 fbad 	bl	8000b2c <__aeabi_dcmpun>
 800b3d2:	b980      	cbnz	r0, 800b3f6 <strtof+0xaa>
 800b3d4:	4b0d      	ldr	r3, [pc, #52]	; (800b40c <strtof+0xc0>)
 800b3d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3da:	4620      	mov	r0, r4
 800b3dc:	4639      	mov	r1, r7
 800b3de:	f7f5 fb87 	bl	8000af0 <__aeabi_dcmple>
 800b3e2:	b940      	cbnz	r0, 800b3f6 <strtof+0xaa>
 800b3e4:	ee18 3a10 	vmov	r3, s16
 800b3e8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b3ec:	d1cd      	bne.n	800b38a <strtof+0x3e>
 800b3ee:	4b08      	ldr	r3, [pc, #32]	; (800b410 <strtof+0xc4>)
 800b3f0:	402b      	ands	r3, r5
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0c9      	beq.n	800b38a <strtof+0x3e>
 800b3f6:	f8d8 3000 	ldr.w	r3, [r8]
 800b3fa:	2222      	movs	r2, #34	; 0x22
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	e7c4      	b.n	800b38a <strtof+0x3e>
 800b400:	20000044 	.word	0x20000044
 800b404:	0800f967 	.word	0x0800f967
 800b408:	7f7fffff 	.word	0x7f7fffff
 800b40c:	7fefffff 	.word	0x7fefffff
 800b410:	7ff00000 	.word	0x7ff00000
 800b414:	200001fc 	.word	0x200001fc

0800b418 <_strtol_l.constprop.0>:
 800b418:	2b01      	cmp	r3, #1
 800b41a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b41e:	d001      	beq.n	800b424 <_strtol_l.constprop.0+0xc>
 800b420:	2b24      	cmp	r3, #36	; 0x24
 800b422:	d906      	bls.n	800b432 <_strtol_l.constprop.0+0x1a>
 800b424:	f000 f918 	bl	800b658 <__errno>
 800b428:	2316      	movs	r3, #22
 800b42a:	6003      	str	r3, [r0, #0]
 800b42c:	2000      	movs	r0, #0
 800b42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b432:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b518 <_strtol_l.constprop.0+0x100>
 800b436:	460d      	mov	r5, r1
 800b438:	462e      	mov	r6, r5
 800b43a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b43e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b442:	f017 0708 	ands.w	r7, r7, #8
 800b446:	d1f7      	bne.n	800b438 <_strtol_l.constprop.0+0x20>
 800b448:	2c2d      	cmp	r4, #45	; 0x2d
 800b44a:	d132      	bne.n	800b4b2 <_strtol_l.constprop.0+0x9a>
 800b44c:	782c      	ldrb	r4, [r5, #0]
 800b44e:	2701      	movs	r7, #1
 800b450:	1cb5      	adds	r5, r6, #2
 800b452:	2b00      	cmp	r3, #0
 800b454:	d05b      	beq.n	800b50e <_strtol_l.constprop.0+0xf6>
 800b456:	2b10      	cmp	r3, #16
 800b458:	d109      	bne.n	800b46e <_strtol_l.constprop.0+0x56>
 800b45a:	2c30      	cmp	r4, #48	; 0x30
 800b45c:	d107      	bne.n	800b46e <_strtol_l.constprop.0+0x56>
 800b45e:	782c      	ldrb	r4, [r5, #0]
 800b460:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b464:	2c58      	cmp	r4, #88	; 0x58
 800b466:	d14d      	bne.n	800b504 <_strtol_l.constprop.0+0xec>
 800b468:	786c      	ldrb	r4, [r5, #1]
 800b46a:	2310      	movs	r3, #16
 800b46c:	3502      	adds	r5, #2
 800b46e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b472:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b476:	f04f 0e00 	mov.w	lr, #0
 800b47a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b47e:	4676      	mov	r6, lr
 800b480:	fb03 8a19 	mls	sl, r3, r9, r8
 800b484:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b488:	f1bc 0f09 	cmp.w	ip, #9
 800b48c:	d816      	bhi.n	800b4bc <_strtol_l.constprop.0+0xa4>
 800b48e:	4664      	mov	r4, ip
 800b490:	42a3      	cmp	r3, r4
 800b492:	dd24      	ble.n	800b4de <_strtol_l.constprop.0+0xc6>
 800b494:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b498:	d008      	beq.n	800b4ac <_strtol_l.constprop.0+0x94>
 800b49a:	45b1      	cmp	r9, r6
 800b49c:	d31c      	bcc.n	800b4d8 <_strtol_l.constprop.0+0xc0>
 800b49e:	d101      	bne.n	800b4a4 <_strtol_l.constprop.0+0x8c>
 800b4a0:	45a2      	cmp	sl, r4
 800b4a2:	db19      	blt.n	800b4d8 <_strtol_l.constprop.0+0xc0>
 800b4a4:	fb06 4603 	mla	r6, r6, r3, r4
 800b4a8:	f04f 0e01 	mov.w	lr, #1
 800b4ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4b0:	e7e8      	b.n	800b484 <_strtol_l.constprop.0+0x6c>
 800b4b2:	2c2b      	cmp	r4, #43	; 0x2b
 800b4b4:	bf04      	itt	eq
 800b4b6:	782c      	ldrbeq	r4, [r5, #0]
 800b4b8:	1cb5      	addeq	r5, r6, #2
 800b4ba:	e7ca      	b.n	800b452 <_strtol_l.constprop.0+0x3a>
 800b4bc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b4c0:	f1bc 0f19 	cmp.w	ip, #25
 800b4c4:	d801      	bhi.n	800b4ca <_strtol_l.constprop.0+0xb2>
 800b4c6:	3c37      	subs	r4, #55	; 0x37
 800b4c8:	e7e2      	b.n	800b490 <_strtol_l.constprop.0+0x78>
 800b4ca:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b4ce:	f1bc 0f19 	cmp.w	ip, #25
 800b4d2:	d804      	bhi.n	800b4de <_strtol_l.constprop.0+0xc6>
 800b4d4:	3c57      	subs	r4, #87	; 0x57
 800b4d6:	e7db      	b.n	800b490 <_strtol_l.constprop.0+0x78>
 800b4d8:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800b4dc:	e7e6      	b.n	800b4ac <_strtol_l.constprop.0+0x94>
 800b4de:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800b4e2:	d105      	bne.n	800b4f0 <_strtol_l.constprop.0+0xd8>
 800b4e4:	2322      	movs	r3, #34	; 0x22
 800b4e6:	6003      	str	r3, [r0, #0]
 800b4e8:	4646      	mov	r6, r8
 800b4ea:	b942      	cbnz	r2, 800b4fe <_strtol_l.constprop.0+0xe6>
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	e79e      	b.n	800b42e <_strtol_l.constprop.0+0x16>
 800b4f0:	b107      	cbz	r7, 800b4f4 <_strtol_l.constprop.0+0xdc>
 800b4f2:	4276      	negs	r6, r6
 800b4f4:	2a00      	cmp	r2, #0
 800b4f6:	d0f9      	beq.n	800b4ec <_strtol_l.constprop.0+0xd4>
 800b4f8:	f1be 0f00 	cmp.w	lr, #0
 800b4fc:	d000      	beq.n	800b500 <_strtol_l.constprop.0+0xe8>
 800b4fe:	1e69      	subs	r1, r5, #1
 800b500:	6011      	str	r1, [r2, #0]
 800b502:	e7f3      	b.n	800b4ec <_strtol_l.constprop.0+0xd4>
 800b504:	2430      	movs	r4, #48	; 0x30
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1b1      	bne.n	800b46e <_strtol_l.constprop.0+0x56>
 800b50a:	2308      	movs	r3, #8
 800b50c:	e7af      	b.n	800b46e <_strtol_l.constprop.0+0x56>
 800b50e:	2c30      	cmp	r4, #48	; 0x30
 800b510:	d0a5      	beq.n	800b45e <_strtol_l.constprop.0+0x46>
 800b512:	230a      	movs	r3, #10
 800b514:	e7ab      	b.n	800b46e <_strtol_l.constprop.0+0x56>
 800b516:	bf00      	nop
 800b518:	0800f5d9 	.word	0x0800f5d9

0800b51c <_strtol_r>:
 800b51c:	f7ff bf7c 	b.w	800b418 <_strtol_l.constprop.0>

0800b520 <_fwalk_sglue>:
 800b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b524:	4607      	mov	r7, r0
 800b526:	4688      	mov	r8, r1
 800b528:	4614      	mov	r4, r2
 800b52a:	2600      	movs	r6, #0
 800b52c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b530:	f1b9 0901 	subs.w	r9, r9, #1
 800b534:	d505      	bpl.n	800b542 <_fwalk_sglue+0x22>
 800b536:	6824      	ldr	r4, [r4, #0]
 800b538:	2c00      	cmp	r4, #0
 800b53a:	d1f7      	bne.n	800b52c <_fwalk_sglue+0xc>
 800b53c:	4630      	mov	r0, r6
 800b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b542:	89ab      	ldrh	r3, [r5, #12]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d907      	bls.n	800b558 <_fwalk_sglue+0x38>
 800b548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b54c:	3301      	adds	r3, #1
 800b54e:	d003      	beq.n	800b558 <_fwalk_sglue+0x38>
 800b550:	4629      	mov	r1, r5
 800b552:	4638      	mov	r0, r7
 800b554:	47c0      	blx	r8
 800b556:	4306      	orrs	r6, r0
 800b558:	3568      	adds	r5, #104	; 0x68
 800b55a:	e7e9      	b.n	800b530 <_fwalk_sglue+0x10>

0800b55c <iprintf>:
 800b55c:	b40f      	push	{r0, r1, r2, r3}
 800b55e:	b507      	push	{r0, r1, r2, lr}
 800b560:	4906      	ldr	r1, [pc, #24]	; (800b57c <iprintf+0x20>)
 800b562:	ab04      	add	r3, sp, #16
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	f853 2b04 	ldr.w	r2, [r3], #4
 800b56a:	6881      	ldr	r1, [r0, #8]
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	f001 fc5f 	bl	800ce30 <_vfiprintf_r>
 800b572:	b003      	add	sp, #12
 800b574:	f85d eb04 	ldr.w	lr, [sp], #4
 800b578:	b004      	add	sp, #16
 800b57a:	4770      	bx	lr
 800b57c:	200001fc 	.word	0x200001fc

0800b580 <putchar>:
 800b580:	4b02      	ldr	r3, [pc, #8]	; (800b58c <putchar+0xc>)
 800b582:	4601      	mov	r1, r0
 800b584:	6818      	ldr	r0, [r3, #0]
 800b586:	6882      	ldr	r2, [r0, #8]
 800b588:	f002 bcc1 	b.w	800df0e <_putc_r>
 800b58c:	200001fc 	.word	0x200001fc

0800b590 <strncmp>:
 800b590:	b510      	push	{r4, lr}
 800b592:	b16a      	cbz	r2, 800b5b0 <strncmp+0x20>
 800b594:	3901      	subs	r1, #1
 800b596:	1884      	adds	r4, r0, r2
 800b598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b59c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d103      	bne.n	800b5ac <strncmp+0x1c>
 800b5a4:	42a0      	cmp	r0, r4
 800b5a6:	d001      	beq.n	800b5ac <strncmp+0x1c>
 800b5a8:	2a00      	cmp	r2, #0
 800b5aa:	d1f5      	bne.n	800b598 <strncmp+0x8>
 800b5ac:	1ad0      	subs	r0, r2, r3
 800b5ae:	bd10      	pop	{r4, pc}
 800b5b0:	4610      	mov	r0, r2
 800b5b2:	e7fc      	b.n	800b5ae <strncmp+0x1e>

0800b5b4 <memset>:
 800b5b4:	4402      	add	r2, r0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d100      	bne.n	800b5be <memset+0xa>
 800b5bc:	4770      	bx	lr
 800b5be:	f803 1b01 	strb.w	r1, [r3], #1
 800b5c2:	e7f9      	b.n	800b5b8 <memset+0x4>

0800b5c4 <_localeconv_r>:
 800b5c4:	4800      	ldr	r0, [pc, #0]	; (800b5c8 <_localeconv_r+0x4>)
 800b5c6:	4770      	bx	lr
 800b5c8:	20000134 	.word	0x20000134

0800b5cc <_close_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d06      	ldr	r5, [pc, #24]	; (800b5e8 <_close_r+0x1c>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f7 fe59 	bl	800328e <_close>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_close_r+0x1a>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_close_r+0x1a>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	20000810 	.word	0x20000810

0800b5ec <_lseek_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d07      	ldr	r5, [pc, #28]	; (800b60c <_lseek_r+0x20>)
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	4608      	mov	r0, r1
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	602a      	str	r2, [r5, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f7f7 fe6e 	bl	80032dc <_lseek>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_lseek_r+0x1e>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_lseek_r+0x1e>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	20000810 	.word	0x20000810

0800b610 <_read_r>:
 800b610:	b538      	push	{r3, r4, r5, lr}
 800b612:	4d07      	ldr	r5, [pc, #28]	; (800b630 <_read_r+0x20>)
 800b614:	4604      	mov	r4, r0
 800b616:	4608      	mov	r0, r1
 800b618:	4611      	mov	r1, r2
 800b61a:	2200      	movs	r2, #0
 800b61c:	602a      	str	r2, [r5, #0]
 800b61e:	461a      	mov	r2, r3
 800b620:	f7f7 fdfc 	bl	800321c <_read>
 800b624:	1c43      	adds	r3, r0, #1
 800b626:	d102      	bne.n	800b62e <_read_r+0x1e>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	b103      	cbz	r3, 800b62e <_read_r+0x1e>
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	20000810 	.word	0x20000810

0800b634 <_write_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	; (800b654 <_write_r+0x20>)
 800b638:	4604      	mov	r4, r0
 800b63a:	4608      	mov	r0, r1
 800b63c:	4611      	mov	r1, r2
 800b63e:	2200      	movs	r2, #0
 800b640:	602a      	str	r2, [r5, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	f7f7 fe07 	bl	8003256 <_write>
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	d102      	bne.n	800b652 <_write_r+0x1e>
 800b64c:	682b      	ldr	r3, [r5, #0]
 800b64e:	b103      	cbz	r3, 800b652 <_write_r+0x1e>
 800b650:	6023      	str	r3, [r4, #0]
 800b652:	bd38      	pop	{r3, r4, r5, pc}
 800b654:	20000810 	.word	0x20000810

0800b658 <__errno>:
 800b658:	4b01      	ldr	r3, [pc, #4]	; (800b660 <__errno+0x8>)
 800b65a:	6818      	ldr	r0, [r3, #0]
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	200001fc 	.word	0x200001fc

0800b664 <__libc_init_array>:
 800b664:	b570      	push	{r4, r5, r6, lr}
 800b666:	4d0d      	ldr	r5, [pc, #52]	; (800b69c <__libc_init_array+0x38>)
 800b668:	4c0d      	ldr	r4, [pc, #52]	; (800b6a0 <__libc_init_array+0x3c>)
 800b66a:	1b64      	subs	r4, r4, r5
 800b66c:	10a4      	asrs	r4, r4, #2
 800b66e:	2600      	movs	r6, #0
 800b670:	42a6      	cmp	r6, r4
 800b672:	d109      	bne.n	800b688 <__libc_init_array+0x24>
 800b674:	4d0b      	ldr	r5, [pc, #44]	; (800b6a4 <__libc_init_array+0x40>)
 800b676:	4c0c      	ldr	r4, [pc, #48]	; (800b6a8 <__libc_init_array+0x44>)
 800b678:	f003 feaa 	bl	800f3d0 <_init>
 800b67c:	1b64      	subs	r4, r4, r5
 800b67e:	10a4      	asrs	r4, r4, #2
 800b680:	2600      	movs	r6, #0
 800b682:	42a6      	cmp	r6, r4
 800b684:	d105      	bne.n	800b692 <__libc_init_array+0x2e>
 800b686:	bd70      	pop	{r4, r5, r6, pc}
 800b688:	f855 3b04 	ldr.w	r3, [r5], #4
 800b68c:	4798      	blx	r3
 800b68e:	3601      	adds	r6, #1
 800b690:	e7ee      	b.n	800b670 <__libc_init_array+0xc>
 800b692:	f855 3b04 	ldr.w	r3, [r5], #4
 800b696:	4798      	blx	r3
 800b698:	3601      	adds	r6, #1
 800b69a:	e7f2      	b.n	800b682 <__libc_init_array+0x1e>
 800b69c:	0800fb48 	.word	0x0800fb48
 800b6a0:	0800fb48 	.word	0x0800fb48
 800b6a4:	0800fb48 	.word	0x0800fb48
 800b6a8:	0800fb4c 	.word	0x0800fb4c

0800b6ac <__retarget_lock_init_recursive>:
 800b6ac:	4770      	bx	lr

0800b6ae <__retarget_lock_acquire_recursive>:
 800b6ae:	4770      	bx	lr

0800b6b0 <__retarget_lock_release_recursive>:
 800b6b0:	4770      	bx	lr

0800b6b2 <memcpy>:
 800b6b2:	440a      	add	r2, r1
 800b6b4:	4291      	cmp	r1, r2
 800b6b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b6ba:	d100      	bne.n	800b6be <memcpy+0xc>
 800b6bc:	4770      	bx	lr
 800b6be:	b510      	push	{r4, lr}
 800b6c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6c8:	4291      	cmp	r1, r2
 800b6ca:	d1f9      	bne.n	800b6c0 <memcpy+0xe>
 800b6cc:	bd10      	pop	{r4, pc}
	...

0800b6d0 <nan>:
 800b6d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b6d8 <nan+0x8>
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	00000000 	.word	0x00000000
 800b6dc:	7ff80000 	.word	0x7ff80000

0800b6e0 <nanf>:
 800b6e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b6e8 <nanf+0x8>
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	7fc00000 	.word	0x7fc00000

0800b6ec <quorem>:
 800b6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	6903      	ldr	r3, [r0, #16]
 800b6f2:	690c      	ldr	r4, [r1, #16]
 800b6f4:	42a3      	cmp	r3, r4
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	db7e      	blt.n	800b7f8 <quorem+0x10c>
 800b6fa:	3c01      	subs	r4, #1
 800b6fc:	f101 0814 	add.w	r8, r1, #20
 800b700:	f100 0514 	add.w	r5, r0, #20
 800b704:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b70e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b712:	3301      	adds	r3, #1
 800b714:	429a      	cmp	r2, r3
 800b716:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b71a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b71e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b722:	d331      	bcc.n	800b788 <quorem+0x9c>
 800b724:	f04f 0e00 	mov.w	lr, #0
 800b728:	4640      	mov	r0, r8
 800b72a:	46ac      	mov	ip, r5
 800b72c:	46f2      	mov	sl, lr
 800b72e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b732:	b293      	uxth	r3, r2
 800b734:	fb06 e303 	mla	r3, r6, r3, lr
 800b738:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b73c:	0c1a      	lsrs	r2, r3, #16
 800b73e:	b29b      	uxth	r3, r3
 800b740:	ebaa 0303 	sub.w	r3, sl, r3
 800b744:	f8dc a000 	ldr.w	sl, [ip]
 800b748:	fa13 f38a 	uxtah	r3, r3, sl
 800b74c:	fb06 220e 	mla	r2, r6, lr, r2
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	9b00      	ldr	r3, [sp, #0]
 800b754:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b758:	b292      	uxth	r2, r2
 800b75a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b75e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b762:	f8bd 3000 	ldrh.w	r3, [sp]
 800b766:	4581      	cmp	r9, r0
 800b768:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b76c:	f84c 3b04 	str.w	r3, [ip], #4
 800b770:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b774:	d2db      	bcs.n	800b72e <quorem+0x42>
 800b776:	f855 300b 	ldr.w	r3, [r5, fp]
 800b77a:	b92b      	cbnz	r3, 800b788 <quorem+0x9c>
 800b77c:	9b01      	ldr	r3, [sp, #4]
 800b77e:	3b04      	subs	r3, #4
 800b780:	429d      	cmp	r5, r3
 800b782:	461a      	mov	r2, r3
 800b784:	d32c      	bcc.n	800b7e0 <quorem+0xf4>
 800b786:	613c      	str	r4, [r7, #16]
 800b788:	4638      	mov	r0, r7
 800b78a:	f002 f8a5 	bl	800d8d8 <__mcmp>
 800b78e:	2800      	cmp	r0, #0
 800b790:	db22      	blt.n	800b7d8 <quorem+0xec>
 800b792:	3601      	adds	r6, #1
 800b794:	4629      	mov	r1, r5
 800b796:	2000      	movs	r0, #0
 800b798:	f858 2b04 	ldr.w	r2, [r8], #4
 800b79c:	f8d1 c000 	ldr.w	ip, [r1]
 800b7a0:	b293      	uxth	r3, r2
 800b7a2:	1ac3      	subs	r3, r0, r3
 800b7a4:	0c12      	lsrs	r2, r2, #16
 800b7a6:	fa13 f38c 	uxtah	r3, r3, ip
 800b7aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b7ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7b8:	45c1      	cmp	r9, r8
 800b7ba:	f841 3b04 	str.w	r3, [r1], #4
 800b7be:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b7c2:	d2e9      	bcs.n	800b798 <quorem+0xac>
 800b7c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7cc:	b922      	cbnz	r2, 800b7d8 <quorem+0xec>
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	429d      	cmp	r5, r3
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	d30a      	bcc.n	800b7ec <quorem+0x100>
 800b7d6:	613c      	str	r4, [r7, #16]
 800b7d8:	4630      	mov	r0, r6
 800b7da:	b003      	add	sp, #12
 800b7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e0:	6812      	ldr	r2, [r2, #0]
 800b7e2:	3b04      	subs	r3, #4
 800b7e4:	2a00      	cmp	r2, #0
 800b7e6:	d1ce      	bne.n	800b786 <quorem+0x9a>
 800b7e8:	3c01      	subs	r4, #1
 800b7ea:	e7c9      	b.n	800b780 <quorem+0x94>
 800b7ec:	6812      	ldr	r2, [r2, #0]
 800b7ee:	3b04      	subs	r3, #4
 800b7f0:	2a00      	cmp	r2, #0
 800b7f2:	d1f0      	bne.n	800b7d6 <quorem+0xea>
 800b7f4:	3c01      	subs	r4, #1
 800b7f6:	e7eb      	b.n	800b7d0 <quorem+0xe4>
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	e7ee      	b.n	800b7da <quorem+0xee>
 800b7fc:	0000      	movs	r0, r0
	...

0800b800 <_dtoa_r>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	ed2d 8b04 	vpush	{d8-d9}
 800b808:	69c5      	ldr	r5, [r0, #28]
 800b80a:	b093      	sub	sp, #76	; 0x4c
 800b80c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b810:	ec57 6b10 	vmov	r6, r7, d0
 800b814:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b818:	9107      	str	r1, [sp, #28]
 800b81a:	4604      	mov	r4, r0
 800b81c:	920a      	str	r2, [sp, #40]	; 0x28
 800b81e:	930d      	str	r3, [sp, #52]	; 0x34
 800b820:	b975      	cbnz	r5, 800b840 <_dtoa_r+0x40>
 800b822:	2010      	movs	r0, #16
 800b824:	f001 fc1e 	bl	800d064 <malloc>
 800b828:	4602      	mov	r2, r0
 800b82a:	61e0      	str	r0, [r4, #28]
 800b82c:	b920      	cbnz	r0, 800b838 <_dtoa_r+0x38>
 800b82e:	4bae      	ldr	r3, [pc, #696]	; (800bae8 <_dtoa_r+0x2e8>)
 800b830:	21ef      	movs	r1, #239	; 0xef
 800b832:	48ae      	ldr	r0, [pc, #696]	; (800baec <_dtoa_r+0x2ec>)
 800b834:	f002 fbec 	bl	800e010 <__assert_func>
 800b838:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b83c:	6005      	str	r5, [r0, #0]
 800b83e:	60c5      	str	r5, [r0, #12]
 800b840:	69e3      	ldr	r3, [r4, #28]
 800b842:	6819      	ldr	r1, [r3, #0]
 800b844:	b151      	cbz	r1, 800b85c <_dtoa_r+0x5c>
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	604a      	str	r2, [r1, #4]
 800b84a:	2301      	movs	r3, #1
 800b84c:	4093      	lsls	r3, r2
 800b84e:	608b      	str	r3, [r1, #8]
 800b850:	4620      	mov	r0, r4
 800b852:	f001 fdbb 	bl	800d3cc <_Bfree>
 800b856:	69e3      	ldr	r3, [r4, #28]
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]
 800b85c:	1e3b      	subs	r3, r7, #0
 800b85e:	bfbb      	ittet	lt
 800b860:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b864:	9303      	strlt	r3, [sp, #12]
 800b866:	2300      	movge	r3, #0
 800b868:	2201      	movlt	r2, #1
 800b86a:	bfac      	ite	ge
 800b86c:	f8c8 3000 	strge.w	r3, [r8]
 800b870:	f8c8 2000 	strlt.w	r2, [r8]
 800b874:	4b9e      	ldr	r3, [pc, #632]	; (800baf0 <_dtoa_r+0x2f0>)
 800b876:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b87a:	ea33 0308 	bics.w	r3, r3, r8
 800b87e:	d11b      	bne.n	800b8b8 <_dtoa_r+0xb8>
 800b880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b882:	f242 730f 	movw	r3, #9999	; 0x270f
 800b886:	6013      	str	r3, [r2, #0]
 800b888:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b88c:	4333      	orrs	r3, r6
 800b88e:	f000 8593 	beq.w	800c3b8 <_dtoa_r+0xbb8>
 800b892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b894:	b963      	cbnz	r3, 800b8b0 <_dtoa_r+0xb0>
 800b896:	4b97      	ldr	r3, [pc, #604]	; (800baf4 <_dtoa_r+0x2f4>)
 800b898:	e027      	b.n	800b8ea <_dtoa_r+0xea>
 800b89a:	4b97      	ldr	r3, [pc, #604]	; (800baf8 <_dtoa_r+0x2f8>)
 800b89c:	9300      	str	r3, [sp, #0]
 800b89e:	3308      	adds	r3, #8
 800b8a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8a2:	6013      	str	r3, [r2, #0]
 800b8a4:	9800      	ldr	r0, [sp, #0]
 800b8a6:	b013      	add	sp, #76	; 0x4c
 800b8a8:	ecbd 8b04 	vpop	{d8-d9}
 800b8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b0:	4b90      	ldr	r3, [pc, #576]	; (800baf4 <_dtoa_r+0x2f4>)
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	3303      	adds	r3, #3
 800b8b6:	e7f3      	b.n	800b8a0 <_dtoa_r+0xa0>
 800b8b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	ec51 0b17 	vmov	r0, r1, d7
 800b8c2:	eeb0 8a47 	vmov.f32	s16, s14
 800b8c6:	eef0 8a67 	vmov.f32	s17, s15
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f7f5 f8fc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8d0:	4681      	mov	r9, r0
 800b8d2:	b160      	cbz	r0, 800b8ee <_dtoa_r+0xee>
 800b8d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f000 8568 	beq.w	800c3b2 <_dtoa_r+0xbb2>
 800b8e2:	4b86      	ldr	r3, [pc, #536]	; (800bafc <_dtoa_r+0x2fc>)
 800b8e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	e7da      	b.n	800b8a4 <_dtoa_r+0xa4>
 800b8ee:	aa10      	add	r2, sp, #64	; 0x40
 800b8f0:	a911      	add	r1, sp, #68	; 0x44
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	eeb0 0a48 	vmov.f32	s0, s16
 800b8f8:	eef0 0a68 	vmov.f32	s1, s17
 800b8fc:	f002 f902 	bl	800db04 <__d2b>
 800b900:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b904:	4682      	mov	sl, r0
 800b906:	2d00      	cmp	r5, #0
 800b908:	d07f      	beq.n	800ba0a <_dtoa_r+0x20a>
 800b90a:	ee18 3a90 	vmov	r3, s17
 800b90e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b912:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b916:	ec51 0b18 	vmov	r0, r1, d8
 800b91a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b91e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b922:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b926:	4619      	mov	r1, r3
 800b928:	2200      	movs	r2, #0
 800b92a:	4b75      	ldr	r3, [pc, #468]	; (800bb00 <_dtoa_r+0x300>)
 800b92c:	f7f4 fcac 	bl	8000288 <__aeabi_dsub>
 800b930:	a367      	add	r3, pc, #412	; (adr r3, 800bad0 <_dtoa_r+0x2d0>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fe5f 	bl	80005f8 <__aeabi_dmul>
 800b93a:	a367      	add	r3, pc, #412	; (adr r3, 800bad8 <_dtoa_r+0x2d8>)
 800b93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b940:	f7f4 fca4 	bl	800028c <__adddf3>
 800b944:	4606      	mov	r6, r0
 800b946:	4628      	mov	r0, r5
 800b948:	460f      	mov	r7, r1
 800b94a:	f7f4 fdeb 	bl	8000524 <__aeabi_i2d>
 800b94e:	a364      	add	r3, pc, #400	; (adr r3, 800bae0 <_dtoa_r+0x2e0>)
 800b950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b954:	f7f4 fe50 	bl	80005f8 <__aeabi_dmul>
 800b958:	4602      	mov	r2, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	4630      	mov	r0, r6
 800b95e:	4639      	mov	r1, r7
 800b960:	f7f4 fc94 	bl	800028c <__adddf3>
 800b964:	4606      	mov	r6, r0
 800b966:	460f      	mov	r7, r1
 800b968:	f7f5 f8f6 	bl	8000b58 <__aeabi_d2iz>
 800b96c:	2200      	movs	r2, #0
 800b96e:	4683      	mov	fp, r0
 800b970:	2300      	movs	r3, #0
 800b972:	4630      	mov	r0, r6
 800b974:	4639      	mov	r1, r7
 800b976:	f7f5 f8b1 	bl	8000adc <__aeabi_dcmplt>
 800b97a:	b148      	cbz	r0, 800b990 <_dtoa_r+0x190>
 800b97c:	4658      	mov	r0, fp
 800b97e:	f7f4 fdd1 	bl	8000524 <__aeabi_i2d>
 800b982:	4632      	mov	r2, r6
 800b984:	463b      	mov	r3, r7
 800b986:	f7f5 f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b98a:	b908      	cbnz	r0, 800b990 <_dtoa_r+0x190>
 800b98c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b990:	f1bb 0f16 	cmp.w	fp, #22
 800b994:	d857      	bhi.n	800ba46 <_dtoa_r+0x246>
 800b996:	4b5b      	ldr	r3, [pc, #364]	; (800bb04 <_dtoa_r+0x304>)
 800b998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	ec51 0b18 	vmov	r0, r1, d8
 800b9a4:	f7f5 f89a 	bl	8000adc <__aeabi_dcmplt>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d04e      	beq.n	800ba4a <_dtoa_r+0x24a>
 800b9ac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	930c      	str	r3, [sp, #48]	; 0x30
 800b9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9b6:	1b5b      	subs	r3, r3, r5
 800b9b8:	1e5a      	subs	r2, r3, #1
 800b9ba:	bf45      	ittet	mi
 800b9bc:	f1c3 0301 	rsbmi	r3, r3, #1
 800b9c0:	9305      	strmi	r3, [sp, #20]
 800b9c2:	2300      	movpl	r3, #0
 800b9c4:	2300      	movmi	r3, #0
 800b9c6:	9206      	str	r2, [sp, #24]
 800b9c8:	bf54      	ite	pl
 800b9ca:	9305      	strpl	r3, [sp, #20]
 800b9cc:	9306      	strmi	r3, [sp, #24]
 800b9ce:	f1bb 0f00 	cmp.w	fp, #0
 800b9d2:	db3c      	blt.n	800ba4e <_dtoa_r+0x24e>
 800b9d4:	9b06      	ldr	r3, [sp, #24]
 800b9d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b9da:	445b      	add	r3, fp
 800b9dc:	9306      	str	r3, [sp, #24]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	9308      	str	r3, [sp, #32]
 800b9e2:	9b07      	ldr	r3, [sp, #28]
 800b9e4:	2b09      	cmp	r3, #9
 800b9e6:	d868      	bhi.n	800baba <_dtoa_r+0x2ba>
 800b9e8:	2b05      	cmp	r3, #5
 800b9ea:	bfc4      	itt	gt
 800b9ec:	3b04      	subgt	r3, #4
 800b9ee:	9307      	strgt	r3, [sp, #28]
 800b9f0:	9b07      	ldr	r3, [sp, #28]
 800b9f2:	f1a3 0302 	sub.w	r3, r3, #2
 800b9f6:	bfcc      	ite	gt
 800b9f8:	2500      	movgt	r5, #0
 800b9fa:	2501      	movle	r5, #1
 800b9fc:	2b03      	cmp	r3, #3
 800b9fe:	f200 8085 	bhi.w	800bb0c <_dtoa_r+0x30c>
 800ba02:	e8df f003 	tbb	[pc, r3]
 800ba06:	3b2e      	.short	0x3b2e
 800ba08:	5839      	.short	0x5839
 800ba0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba0e:	441d      	add	r5, r3
 800ba10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba14:	2b20      	cmp	r3, #32
 800ba16:	bfc1      	itttt	gt
 800ba18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba1c:	fa08 f803 	lslgt.w	r8, r8, r3
 800ba20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ba24:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ba28:	bfd6      	itet	le
 800ba2a:	f1c3 0320 	rsble	r3, r3, #32
 800ba2e:	ea48 0003 	orrgt.w	r0, r8, r3
 800ba32:	fa06 f003 	lslle.w	r0, r6, r3
 800ba36:	f7f4 fd65 	bl	8000504 <__aeabi_ui2d>
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ba40:	3d01      	subs	r5, #1
 800ba42:	920e      	str	r2, [sp, #56]	; 0x38
 800ba44:	e76f      	b.n	800b926 <_dtoa_r+0x126>
 800ba46:	2301      	movs	r3, #1
 800ba48:	e7b3      	b.n	800b9b2 <_dtoa_r+0x1b2>
 800ba4a:	900c      	str	r0, [sp, #48]	; 0x30
 800ba4c:	e7b2      	b.n	800b9b4 <_dtoa_r+0x1b4>
 800ba4e:	9b05      	ldr	r3, [sp, #20]
 800ba50:	eba3 030b 	sub.w	r3, r3, fp
 800ba54:	9305      	str	r3, [sp, #20]
 800ba56:	f1cb 0300 	rsb	r3, fp, #0
 800ba5a:	9308      	str	r3, [sp, #32]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba60:	e7bf      	b.n	800b9e2 <_dtoa_r+0x1e2>
 800ba62:	2300      	movs	r3, #0
 800ba64:	9309      	str	r3, [sp, #36]	; 0x24
 800ba66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dc52      	bgt.n	800bb12 <_dtoa_r+0x312>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	9301      	str	r3, [sp, #4]
 800ba70:	9304      	str	r3, [sp, #16]
 800ba72:	461a      	mov	r2, r3
 800ba74:	920a      	str	r2, [sp, #40]	; 0x28
 800ba76:	e00b      	b.n	800ba90 <_dtoa_r+0x290>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e7f3      	b.n	800ba64 <_dtoa_r+0x264>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba82:	445b      	add	r3, fp
 800ba84:	9301      	str	r3, [sp, #4]
 800ba86:	3301      	adds	r3, #1
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	9304      	str	r3, [sp, #16]
 800ba8c:	bfb8      	it	lt
 800ba8e:	2301      	movlt	r3, #1
 800ba90:	69e0      	ldr	r0, [r4, #28]
 800ba92:	2100      	movs	r1, #0
 800ba94:	2204      	movs	r2, #4
 800ba96:	f102 0614 	add.w	r6, r2, #20
 800ba9a:	429e      	cmp	r6, r3
 800ba9c:	d93d      	bls.n	800bb1a <_dtoa_r+0x31a>
 800ba9e:	6041      	str	r1, [r0, #4]
 800baa0:	4620      	mov	r0, r4
 800baa2:	f001 fc53 	bl	800d34c <_Balloc>
 800baa6:	9000      	str	r0, [sp, #0]
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d139      	bne.n	800bb20 <_dtoa_r+0x320>
 800baac:	4b16      	ldr	r3, [pc, #88]	; (800bb08 <_dtoa_r+0x308>)
 800baae:	4602      	mov	r2, r0
 800bab0:	f240 11af 	movw	r1, #431	; 0x1af
 800bab4:	e6bd      	b.n	800b832 <_dtoa_r+0x32>
 800bab6:	2301      	movs	r3, #1
 800bab8:	e7e1      	b.n	800ba7e <_dtoa_r+0x27e>
 800baba:	2501      	movs	r5, #1
 800babc:	2300      	movs	r3, #0
 800babe:	9307      	str	r3, [sp, #28]
 800bac0:	9509      	str	r5, [sp, #36]	; 0x24
 800bac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	9304      	str	r3, [sp, #16]
 800baca:	2200      	movs	r2, #0
 800bacc:	2312      	movs	r3, #18
 800bace:	e7d1      	b.n	800ba74 <_dtoa_r+0x274>
 800bad0:	636f4361 	.word	0x636f4361
 800bad4:	3fd287a7 	.word	0x3fd287a7
 800bad8:	8b60c8b3 	.word	0x8b60c8b3
 800badc:	3fc68a28 	.word	0x3fc68a28
 800bae0:	509f79fb 	.word	0x509f79fb
 800bae4:	3fd34413 	.word	0x3fd34413
 800bae8:	0800f6e6 	.word	0x0800f6e6
 800baec:	0800f6fd 	.word	0x0800f6fd
 800baf0:	7ff00000 	.word	0x7ff00000
 800baf4:	0800f6e2 	.word	0x0800f6e2
 800baf8:	0800f6d9 	.word	0x0800f6d9
 800bafc:	0800f555 	.word	0x0800f555
 800bb00:	3ff80000 	.word	0x3ff80000
 800bb04:	0800f858 	.word	0x0800f858
 800bb08:	0800f755 	.word	0x0800f755
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb10:	e7d7      	b.n	800bac2 <_dtoa_r+0x2c2>
 800bb12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb14:	9301      	str	r3, [sp, #4]
 800bb16:	9304      	str	r3, [sp, #16]
 800bb18:	e7ba      	b.n	800ba90 <_dtoa_r+0x290>
 800bb1a:	3101      	adds	r1, #1
 800bb1c:	0052      	lsls	r2, r2, #1
 800bb1e:	e7ba      	b.n	800ba96 <_dtoa_r+0x296>
 800bb20:	69e3      	ldr	r3, [r4, #28]
 800bb22:	9a00      	ldr	r2, [sp, #0]
 800bb24:	601a      	str	r2, [r3, #0]
 800bb26:	9b04      	ldr	r3, [sp, #16]
 800bb28:	2b0e      	cmp	r3, #14
 800bb2a:	f200 80a8 	bhi.w	800bc7e <_dtoa_r+0x47e>
 800bb2e:	2d00      	cmp	r5, #0
 800bb30:	f000 80a5 	beq.w	800bc7e <_dtoa_r+0x47e>
 800bb34:	f1bb 0f00 	cmp.w	fp, #0
 800bb38:	dd38      	ble.n	800bbac <_dtoa_r+0x3ac>
 800bb3a:	4bc0      	ldr	r3, [pc, #768]	; (800be3c <_dtoa_r+0x63c>)
 800bb3c:	f00b 020f 	and.w	r2, fp, #15
 800bb40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bb48:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bb4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bb50:	d019      	beq.n	800bb86 <_dtoa_r+0x386>
 800bb52:	4bbb      	ldr	r3, [pc, #748]	; (800be40 <_dtoa_r+0x640>)
 800bb54:	ec51 0b18 	vmov	r0, r1, d8
 800bb58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb5c:	f7f4 fe76 	bl	800084c <__aeabi_ddiv>
 800bb60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb64:	f008 080f 	and.w	r8, r8, #15
 800bb68:	2503      	movs	r5, #3
 800bb6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800be40 <_dtoa_r+0x640>
 800bb6e:	f1b8 0f00 	cmp.w	r8, #0
 800bb72:	d10a      	bne.n	800bb8a <_dtoa_r+0x38a>
 800bb74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb78:	4632      	mov	r2, r6
 800bb7a:	463b      	mov	r3, r7
 800bb7c:	f7f4 fe66 	bl	800084c <__aeabi_ddiv>
 800bb80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb84:	e02b      	b.n	800bbde <_dtoa_r+0x3de>
 800bb86:	2502      	movs	r5, #2
 800bb88:	e7ef      	b.n	800bb6a <_dtoa_r+0x36a>
 800bb8a:	f018 0f01 	tst.w	r8, #1
 800bb8e:	d008      	beq.n	800bba2 <_dtoa_r+0x3a2>
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb98:	f7f4 fd2e 	bl	80005f8 <__aeabi_dmul>
 800bb9c:	3501      	adds	r5, #1
 800bb9e:	4606      	mov	r6, r0
 800bba0:	460f      	mov	r7, r1
 800bba2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bba6:	f109 0908 	add.w	r9, r9, #8
 800bbaa:	e7e0      	b.n	800bb6e <_dtoa_r+0x36e>
 800bbac:	f000 809f 	beq.w	800bcee <_dtoa_r+0x4ee>
 800bbb0:	f1cb 0600 	rsb	r6, fp, #0
 800bbb4:	4ba1      	ldr	r3, [pc, #644]	; (800be3c <_dtoa_r+0x63c>)
 800bbb6:	4fa2      	ldr	r7, [pc, #648]	; (800be40 <_dtoa_r+0x640>)
 800bbb8:	f006 020f 	and.w	r2, r6, #15
 800bbbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	ec51 0b18 	vmov	r0, r1, d8
 800bbc8:	f7f4 fd16 	bl	80005f8 <__aeabi_dmul>
 800bbcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbd0:	1136      	asrs	r6, r6, #4
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	2502      	movs	r5, #2
 800bbd6:	2e00      	cmp	r6, #0
 800bbd8:	d17e      	bne.n	800bcd8 <_dtoa_r+0x4d8>
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1d0      	bne.n	800bb80 <_dtoa_r+0x380>
 800bbde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bbe0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f000 8084 	beq.w	800bcf2 <_dtoa_r+0x4f2>
 800bbea:	4b96      	ldr	r3, [pc, #600]	; (800be44 <_dtoa_r+0x644>)
 800bbec:	2200      	movs	r2, #0
 800bbee:	4640      	mov	r0, r8
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	f7f4 ff73 	bl	8000adc <__aeabi_dcmplt>
 800bbf6:	2800      	cmp	r0, #0
 800bbf8:	d07b      	beq.n	800bcf2 <_dtoa_r+0x4f2>
 800bbfa:	9b04      	ldr	r3, [sp, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d078      	beq.n	800bcf2 <_dtoa_r+0x4f2>
 800bc00:	9b01      	ldr	r3, [sp, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	dd39      	ble.n	800bc7a <_dtoa_r+0x47a>
 800bc06:	4b90      	ldr	r3, [pc, #576]	; (800be48 <_dtoa_r+0x648>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	4640      	mov	r0, r8
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	f7f4 fcf3 	bl	80005f8 <__aeabi_dmul>
 800bc12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc16:	9e01      	ldr	r6, [sp, #4]
 800bc18:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800bc1c:	3501      	adds	r5, #1
 800bc1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc22:	4628      	mov	r0, r5
 800bc24:	f7f4 fc7e 	bl	8000524 <__aeabi_i2d>
 800bc28:	4642      	mov	r2, r8
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	f7f4 fce4 	bl	80005f8 <__aeabi_dmul>
 800bc30:	4b86      	ldr	r3, [pc, #536]	; (800be4c <_dtoa_r+0x64c>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	f7f4 fb2a 	bl	800028c <__adddf3>
 800bc38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bc3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc40:	9303      	str	r3, [sp, #12]
 800bc42:	2e00      	cmp	r6, #0
 800bc44:	d158      	bne.n	800bcf8 <_dtoa_r+0x4f8>
 800bc46:	4b82      	ldr	r3, [pc, #520]	; (800be50 <_dtoa_r+0x650>)
 800bc48:	2200      	movs	r2, #0
 800bc4a:	4640      	mov	r0, r8
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	f7f4 fb1b 	bl	8000288 <__aeabi_dsub>
 800bc52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc56:	4680      	mov	r8, r0
 800bc58:	4689      	mov	r9, r1
 800bc5a:	f7f4 ff5d 	bl	8000b18 <__aeabi_dcmpgt>
 800bc5e:	2800      	cmp	r0, #0
 800bc60:	f040 8296 	bne.w	800c190 <_dtoa_r+0x990>
 800bc64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bc68:	4640      	mov	r0, r8
 800bc6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc6e:	4649      	mov	r1, r9
 800bc70:	f7f4 ff34 	bl	8000adc <__aeabi_dcmplt>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	f040 8289 	bne.w	800c18c <_dtoa_r+0x98c>
 800bc7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f2c0 814e 	blt.w	800bf22 <_dtoa_r+0x722>
 800bc86:	f1bb 0f0e 	cmp.w	fp, #14
 800bc8a:	f300 814a 	bgt.w	800bf22 <_dtoa_r+0x722>
 800bc8e:	4b6b      	ldr	r3, [pc, #428]	; (800be3c <_dtoa_r+0x63c>)
 800bc90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	f280 80dc 	bge.w	800be58 <_dtoa_r+0x658>
 800bca0:	9b04      	ldr	r3, [sp, #16]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f300 80d8 	bgt.w	800be58 <_dtoa_r+0x658>
 800bca8:	f040 826f 	bne.w	800c18a <_dtoa_r+0x98a>
 800bcac:	4b68      	ldr	r3, [pc, #416]	; (800be50 <_dtoa_r+0x650>)
 800bcae:	2200      	movs	r2, #0
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	4649      	mov	r1, r9
 800bcb4:	f7f4 fca0 	bl	80005f8 <__aeabi_dmul>
 800bcb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcbc:	f7f4 ff22 	bl	8000b04 <__aeabi_dcmpge>
 800bcc0:	9e04      	ldr	r6, [sp, #16]
 800bcc2:	4637      	mov	r7, r6
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	f040 8245 	bne.w	800c154 <_dtoa_r+0x954>
 800bcca:	9d00      	ldr	r5, [sp, #0]
 800bccc:	2331      	movs	r3, #49	; 0x31
 800bcce:	f805 3b01 	strb.w	r3, [r5], #1
 800bcd2:	f10b 0b01 	add.w	fp, fp, #1
 800bcd6:	e241      	b.n	800c15c <_dtoa_r+0x95c>
 800bcd8:	07f2      	lsls	r2, r6, #31
 800bcda:	d505      	bpl.n	800bce8 <_dtoa_r+0x4e8>
 800bcdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce0:	f7f4 fc8a 	bl	80005f8 <__aeabi_dmul>
 800bce4:	3501      	adds	r5, #1
 800bce6:	2301      	movs	r3, #1
 800bce8:	1076      	asrs	r6, r6, #1
 800bcea:	3708      	adds	r7, #8
 800bcec:	e773      	b.n	800bbd6 <_dtoa_r+0x3d6>
 800bcee:	2502      	movs	r5, #2
 800bcf0:	e775      	b.n	800bbde <_dtoa_r+0x3de>
 800bcf2:	9e04      	ldr	r6, [sp, #16]
 800bcf4:	465f      	mov	r7, fp
 800bcf6:	e792      	b.n	800bc1e <_dtoa_r+0x41e>
 800bcf8:	9900      	ldr	r1, [sp, #0]
 800bcfa:	4b50      	ldr	r3, [pc, #320]	; (800be3c <_dtoa_r+0x63c>)
 800bcfc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd00:	4431      	add	r1, r6
 800bd02:	9102      	str	r1, [sp, #8]
 800bd04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd06:	eeb0 9a47 	vmov.f32	s18, s14
 800bd0a:	eef0 9a67 	vmov.f32	s19, s15
 800bd0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bd12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd16:	2900      	cmp	r1, #0
 800bd18:	d044      	beq.n	800bda4 <_dtoa_r+0x5a4>
 800bd1a:	494e      	ldr	r1, [pc, #312]	; (800be54 <_dtoa_r+0x654>)
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	f7f4 fd95 	bl	800084c <__aeabi_ddiv>
 800bd22:	ec53 2b19 	vmov	r2, r3, d9
 800bd26:	f7f4 faaf 	bl	8000288 <__aeabi_dsub>
 800bd2a:	9d00      	ldr	r5, [sp, #0]
 800bd2c:	ec41 0b19 	vmov	d9, r0, r1
 800bd30:	4649      	mov	r1, r9
 800bd32:	4640      	mov	r0, r8
 800bd34:	f7f4 ff10 	bl	8000b58 <__aeabi_d2iz>
 800bd38:	4606      	mov	r6, r0
 800bd3a:	f7f4 fbf3 	bl	8000524 <__aeabi_i2d>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	4640      	mov	r0, r8
 800bd44:	4649      	mov	r1, r9
 800bd46:	f7f4 fa9f 	bl	8000288 <__aeabi_dsub>
 800bd4a:	3630      	adds	r6, #48	; 0x30
 800bd4c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd50:	ec53 2b19 	vmov	r2, r3, d9
 800bd54:	4680      	mov	r8, r0
 800bd56:	4689      	mov	r9, r1
 800bd58:	f7f4 fec0 	bl	8000adc <__aeabi_dcmplt>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	d164      	bne.n	800be2a <_dtoa_r+0x62a>
 800bd60:	4642      	mov	r2, r8
 800bd62:	464b      	mov	r3, r9
 800bd64:	4937      	ldr	r1, [pc, #220]	; (800be44 <_dtoa_r+0x644>)
 800bd66:	2000      	movs	r0, #0
 800bd68:	f7f4 fa8e 	bl	8000288 <__aeabi_dsub>
 800bd6c:	ec53 2b19 	vmov	r2, r3, d9
 800bd70:	f7f4 feb4 	bl	8000adc <__aeabi_dcmplt>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	f040 80b6 	bne.w	800bee6 <_dtoa_r+0x6e6>
 800bd7a:	9b02      	ldr	r3, [sp, #8]
 800bd7c:	429d      	cmp	r5, r3
 800bd7e:	f43f af7c 	beq.w	800bc7a <_dtoa_r+0x47a>
 800bd82:	4b31      	ldr	r3, [pc, #196]	; (800be48 <_dtoa_r+0x648>)
 800bd84:	ec51 0b19 	vmov	r0, r1, d9
 800bd88:	2200      	movs	r2, #0
 800bd8a:	f7f4 fc35 	bl	80005f8 <__aeabi_dmul>
 800bd8e:	4b2e      	ldr	r3, [pc, #184]	; (800be48 <_dtoa_r+0x648>)
 800bd90:	ec41 0b19 	vmov	d9, r0, r1
 800bd94:	2200      	movs	r2, #0
 800bd96:	4640      	mov	r0, r8
 800bd98:	4649      	mov	r1, r9
 800bd9a:	f7f4 fc2d 	bl	80005f8 <__aeabi_dmul>
 800bd9e:	4680      	mov	r8, r0
 800bda0:	4689      	mov	r9, r1
 800bda2:	e7c5      	b.n	800bd30 <_dtoa_r+0x530>
 800bda4:	ec51 0b17 	vmov	r0, r1, d7
 800bda8:	f7f4 fc26 	bl	80005f8 <__aeabi_dmul>
 800bdac:	9b02      	ldr	r3, [sp, #8]
 800bdae:	9d00      	ldr	r5, [sp, #0]
 800bdb0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdb2:	ec41 0b19 	vmov	d9, r0, r1
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	4640      	mov	r0, r8
 800bdba:	f7f4 fecd 	bl	8000b58 <__aeabi_d2iz>
 800bdbe:	4606      	mov	r6, r0
 800bdc0:	f7f4 fbb0 	bl	8000524 <__aeabi_i2d>
 800bdc4:	3630      	adds	r6, #48	; 0x30
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4640      	mov	r0, r8
 800bdcc:	4649      	mov	r1, r9
 800bdce:	f7f4 fa5b 	bl	8000288 <__aeabi_dsub>
 800bdd2:	f805 6b01 	strb.w	r6, [r5], #1
 800bdd6:	9b02      	ldr	r3, [sp, #8]
 800bdd8:	429d      	cmp	r5, r3
 800bdda:	4680      	mov	r8, r0
 800bddc:	4689      	mov	r9, r1
 800bdde:	f04f 0200 	mov.w	r2, #0
 800bde2:	d124      	bne.n	800be2e <_dtoa_r+0x62e>
 800bde4:	4b1b      	ldr	r3, [pc, #108]	; (800be54 <_dtoa_r+0x654>)
 800bde6:	ec51 0b19 	vmov	r0, r1, d9
 800bdea:	f7f4 fa4f 	bl	800028c <__adddf3>
 800bdee:	4602      	mov	r2, r0
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4640      	mov	r0, r8
 800bdf4:	4649      	mov	r1, r9
 800bdf6:	f7f4 fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d173      	bne.n	800bee6 <_dtoa_r+0x6e6>
 800bdfe:	ec53 2b19 	vmov	r2, r3, d9
 800be02:	4914      	ldr	r1, [pc, #80]	; (800be54 <_dtoa_r+0x654>)
 800be04:	2000      	movs	r0, #0
 800be06:	f7f4 fa3f 	bl	8000288 <__aeabi_dsub>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4640      	mov	r0, r8
 800be10:	4649      	mov	r1, r9
 800be12:	f7f4 fe63 	bl	8000adc <__aeabi_dcmplt>
 800be16:	2800      	cmp	r0, #0
 800be18:	f43f af2f 	beq.w	800bc7a <_dtoa_r+0x47a>
 800be1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be1e:	1e6b      	subs	r3, r5, #1
 800be20:	930f      	str	r3, [sp, #60]	; 0x3c
 800be22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be26:	2b30      	cmp	r3, #48	; 0x30
 800be28:	d0f8      	beq.n	800be1c <_dtoa_r+0x61c>
 800be2a:	46bb      	mov	fp, r7
 800be2c:	e04a      	b.n	800bec4 <_dtoa_r+0x6c4>
 800be2e:	4b06      	ldr	r3, [pc, #24]	; (800be48 <_dtoa_r+0x648>)
 800be30:	f7f4 fbe2 	bl	80005f8 <__aeabi_dmul>
 800be34:	4680      	mov	r8, r0
 800be36:	4689      	mov	r9, r1
 800be38:	e7bd      	b.n	800bdb6 <_dtoa_r+0x5b6>
 800be3a:	bf00      	nop
 800be3c:	0800f858 	.word	0x0800f858
 800be40:	0800f830 	.word	0x0800f830
 800be44:	3ff00000 	.word	0x3ff00000
 800be48:	40240000 	.word	0x40240000
 800be4c:	401c0000 	.word	0x401c0000
 800be50:	40140000 	.word	0x40140000
 800be54:	3fe00000 	.word	0x3fe00000
 800be58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be5c:	9d00      	ldr	r5, [sp, #0]
 800be5e:	4642      	mov	r2, r8
 800be60:	464b      	mov	r3, r9
 800be62:	4630      	mov	r0, r6
 800be64:	4639      	mov	r1, r7
 800be66:	f7f4 fcf1 	bl	800084c <__aeabi_ddiv>
 800be6a:	f7f4 fe75 	bl	8000b58 <__aeabi_d2iz>
 800be6e:	9001      	str	r0, [sp, #4]
 800be70:	f7f4 fb58 	bl	8000524 <__aeabi_i2d>
 800be74:	4642      	mov	r2, r8
 800be76:	464b      	mov	r3, r9
 800be78:	f7f4 fbbe 	bl	80005f8 <__aeabi_dmul>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4630      	mov	r0, r6
 800be82:	4639      	mov	r1, r7
 800be84:	f7f4 fa00 	bl	8000288 <__aeabi_dsub>
 800be88:	9e01      	ldr	r6, [sp, #4]
 800be8a:	9f04      	ldr	r7, [sp, #16]
 800be8c:	3630      	adds	r6, #48	; 0x30
 800be8e:	f805 6b01 	strb.w	r6, [r5], #1
 800be92:	9e00      	ldr	r6, [sp, #0]
 800be94:	1bae      	subs	r6, r5, r6
 800be96:	42b7      	cmp	r7, r6
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	d134      	bne.n	800bf08 <_dtoa_r+0x708>
 800be9e:	f7f4 f9f5 	bl	800028c <__adddf3>
 800bea2:	4642      	mov	r2, r8
 800bea4:	464b      	mov	r3, r9
 800bea6:	4606      	mov	r6, r0
 800bea8:	460f      	mov	r7, r1
 800beaa:	f7f4 fe35 	bl	8000b18 <__aeabi_dcmpgt>
 800beae:	b9c8      	cbnz	r0, 800bee4 <_dtoa_r+0x6e4>
 800beb0:	4642      	mov	r2, r8
 800beb2:	464b      	mov	r3, r9
 800beb4:	4630      	mov	r0, r6
 800beb6:	4639      	mov	r1, r7
 800beb8:	f7f4 fe06 	bl	8000ac8 <__aeabi_dcmpeq>
 800bebc:	b110      	cbz	r0, 800bec4 <_dtoa_r+0x6c4>
 800bebe:	9b01      	ldr	r3, [sp, #4]
 800bec0:	07db      	lsls	r3, r3, #31
 800bec2:	d40f      	bmi.n	800bee4 <_dtoa_r+0x6e4>
 800bec4:	4651      	mov	r1, sl
 800bec6:	4620      	mov	r0, r4
 800bec8:	f001 fa80 	bl	800d3cc <_Bfree>
 800becc:	2300      	movs	r3, #0
 800bece:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bed0:	702b      	strb	r3, [r5, #0]
 800bed2:	f10b 0301 	add.w	r3, fp, #1
 800bed6:	6013      	str	r3, [r2, #0]
 800bed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beda:	2b00      	cmp	r3, #0
 800bedc:	f43f ace2 	beq.w	800b8a4 <_dtoa_r+0xa4>
 800bee0:	601d      	str	r5, [r3, #0]
 800bee2:	e4df      	b.n	800b8a4 <_dtoa_r+0xa4>
 800bee4:	465f      	mov	r7, fp
 800bee6:	462b      	mov	r3, r5
 800bee8:	461d      	mov	r5, r3
 800beea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800beee:	2a39      	cmp	r2, #57	; 0x39
 800bef0:	d106      	bne.n	800bf00 <_dtoa_r+0x700>
 800bef2:	9a00      	ldr	r2, [sp, #0]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d1f7      	bne.n	800bee8 <_dtoa_r+0x6e8>
 800bef8:	9900      	ldr	r1, [sp, #0]
 800befa:	2230      	movs	r2, #48	; 0x30
 800befc:	3701      	adds	r7, #1
 800befe:	700a      	strb	r2, [r1, #0]
 800bf00:	781a      	ldrb	r2, [r3, #0]
 800bf02:	3201      	adds	r2, #1
 800bf04:	701a      	strb	r2, [r3, #0]
 800bf06:	e790      	b.n	800be2a <_dtoa_r+0x62a>
 800bf08:	4ba3      	ldr	r3, [pc, #652]	; (800c198 <_dtoa_r+0x998>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f7f4 fb74 	bl	80005f8 <__aeabi_dmul>
 800bf10:	2200      	movs	r2, #0
 800bf12:	2300      	movs	r3, #0
 800bf14:	4606      	mov	r6, r0
 800bf16:	460f      	mov	r7, r1
 800bf18:	f7f4 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d09e      	beq.n	800be5e <_dtoa_r+0x65e>
 800bf20:	e7d0      	b.n	800bec4 <_dtoa_r+0x6c4>
 800bf22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf24:	2a00      	cmp	r2, #0
 800bf26:	f000 80ca 	beq.w	800c0be <_dtoa_r+0x8be>
 800bf2a:	9a07      	ldr	r2, [sp, #28]
 800bf2c:	2a01      	cmp	r2, #1
 800bf2e:	f300 80ad 	bgt.w	800c08c <_dtoa_r+0x88c>
 800bf32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf34:	2a00      	cmp	r2, #0
 800bf36:	f000 80a5 	beq.w	800c084 <_dtoa_r+0x884>
 800bf3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf3e:	9e08      	ldr	r6, [sp, #32]
 800bf40:	9d05      	ldr	r5, [sp, #20]
 800bf42:	9a05      	ldr	r2, [sp, #20]
 800bf44:	441a      	add	r2, r3
 800bf46:	9205      	str	r2, [sp, #20]
 800bf48:	9a06      	ldr	r2, [sp, #24]
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	441a      	add	r2, r3
 800bf4e:	4620      	mov	r0, r4
 800bf50:	9206      	str	r2, [sp, #24]
 800bf52:	f001 fb3b 	bl	800d5cc <__i2b>
 800bf56:	4607      	mov	r7, r0
 800bf58:	b165      	cbz	r5, 800bf74 <_dtoa_r+0x774>
 800bf5a:	9b06      	ldr	r3, [sp, #24]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	dd09      	ble.n	800bf74 <_dtoa_r+0x774>
 800bf60:	42ab      	cmp	r3, r5
 800bf62:	9a05      	ldr	r2, [sp, #20]
 800bf64:	bfa8      	it	ge
 800bf66:	462b      	movge	r3, r5
 800bf68:	1ad2      	subs	r2, r2, r3
 800bf6a:	9205      	str	r2, [sp, #20]
 800bf6c:	9a06      	ldr	r2, [sp, #24]
 800bf6e:	1aed      	subs	r5, r5, r3
 800bf70:	1ad3      	subs	r3, r2, r3
 800bf72:	9306      	str	r3, [sp, #24]
 800bf74:	9b08      	ldr	r3, [sp, #32]
 800bf76:	b1f3      	cbz	r3, 800bfb6 <_dtoa_r+0x7b6>
 800bf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 80a3 	beq.w	800c0c6 <_dtoa_r+0x8c6>
 800bf80:	2e00      	cmp	r6, #0
 800bf82:	dd10      	ble.n	800bfa6 <_dtoa_r+0x7a6>
 800bf84:	4639      	mov	r1, r7
 800bf86:	4632      	mov	r2, r6
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f001 fbdf 	bl	800d74c <__pow5mult>
 800bf8e:	4652      	mov	r2, sl
 800bf90:	4601      	mov	r1, r0
 800bf92:	4607      	mov	r7, r0
 800bf94:	4620      	mov	r0, r4
 800bf96:	f001 fb2f 	bl	800d5f8 <__multiply>
 800bf9a:	4651      	mov	r1, sl
 800bf9c:	4680      	mov	r8, r0
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f001 fa14 	bl	800d3cc <_Bfree>
 800bfa4:	46c2      	mov	sl, r8
 800bfa6:	9b08      	ldr	r3, [sp, #32]
 800bfa8:	1b9a      	subs	r2, r3, r6
 800bfaa:	d004      	beq.n	800bfb6 <_dtoa_r+0x7b6>
 800bfac:	4651      	mov	r1, sl
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f001 fbcc 	bl	800d74c <__pow5mult>
 800bfb4:	4682      	mov	sl, r0
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f001 fb07 	bl	800d5cc <__i2b>
 800bfbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	f340 8081 	ble.w	800c0ca <_dtoa_r+0x8ca>
 800bfc8:	461a      	mov	r2, r3
 800bfca:	4601      	mov	r1, r0
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f001 fbbd 	bl	800d74c <__pow5mult>
 800bfd2:	9b07      	ldr	r3, [sp, #28]
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	dd7a      	ble.n	800c0d0 <_dtoa_r+0x8d0>
 800bfda:	f04f 0800 	mov.w	r8, #0
 800bfde:	6933      	ldr	r3, [r6, #16]
 800bfe0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfe4:	6918      	ldr	r0, [r3, #16]
 800bfe6:	f001 faa3 	bl	800d530 <__hi0bits>
 800bfea:	f1c0 0020 	rsb	r0, r0, #32
 800bfee:	9b06      	ldr	r3, [sp, #24]
 800bff0:	4418      	add	r0, r3
 800bff2:	f010 001f 	ands.w	r0, r0, #31
 800bff6:	f000 8094 	beq.w	800c122 <_dtoa_r+0x922>
 800bffa:	f1c0 0320 	rsb	r3, r0, #32
 800bffe:	2b04      	cmp	r3, #4
 800c000:	f340 8085 	ble.w	800c10e <_dtoa_r+0x90e>
 800c004:	9b05      	ldr	r3, [sp, #20]
 800c006:	f1c0 001c 	rsb	r0, r0, #28
 800c00a:	4403      	add	r3, r0
 800c00c:	9305      	str	r3, [sp, #20]
 800c00e:	9b06      	ldr	r3, [sp, #24]
 800c010:	4403      	add	r3, r0
 800c012:	4405      	add	r5, r0
 800c014:	9306      	str	r3, [sp, #24]
 800c016:	9b05      	ldr	r3, [sp, #20]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	dd05      	ble.n	800c028 <_dtoa_r+0x828>
 800c01c:	4651      	mov	r1, sl
 800c01e:	461a      	mov	r2, r3
 800c020:	4620      	mov	r0, r4
 800c022:	f001 fbed 	bl	800d800 <__lshift>
 800c026:	4682      	mov	sl, r0
 800c028:	9b06      	ldr	r3, [sp, #24]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	dd05      	ble.n	800c03a <_dtoa_r+0x83a>
 800c02e:	4631      	mov	r1, r6
 800c030:	461a      	mov	r2, r3
 800c032:	4620      	mov	r0, r4
 800c034:	f001 fbe4 	bl	800d800 <__lshift>
 800c038:	4606      	mov	r6, r0
 800c03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d072      	beq.n	800c126 <_dtoa_r+0x926>
 800c040:	4631      	mov	r1, r6
 800c042:	4650      	mov	r0, sl
 800c044:	f001 fc48 	bl	800d8d8 <__mcmp>
 800c048:	2800      	cmp	r0, #0
 800c04a:	da6c      	bge.n	800c126 <_dtoa_r+0x926>
 800c04c:	2300      	movs	r3, #0
 800c04e:	4651      	mov	r1, sl
 800c050:	220a      	movs	r2, #10
 800c052:	4620      	mov	r0, r4
 800c054:	f001 f9dc 	bl	800d410 <__multadd>
 800c058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c05a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c05e:	4682      	mov	sl, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 81b0 	beq.w	800c3c6 <_dtoa_r+0xbc6>
 800c066:	2300      	movs	r3, #0
 800c068:	4639      	mov	r1, r7
 800c06a:	220a      	movs	r2, #10
 800c06c:	4620      	mov	r0, r4
 800c06e:	f001 f9cf 	bl	800d410 <__multadd>
 800c072:	9b01      	ldr	r3, [sp, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	4607      	mov	r7, r0
 800c078:	f300 8096 	bgt.w	800c1a8 <_dtoa_r+0x9a8>
 800c07c:	9b07      	ldr	r3, [sp, #28]
 800c07e:	2b02      	cmp	r3, #2
 800c080:	dc59      	bgt.n	800c136 <_dtoa_r+0x936>
 800c082:	e091      	b.n	800c1a8 <_dtoa_r+0x9a8>
 800c084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c086:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c08a:	e758      	b.n	800bf3e <_dtoa_r+0x73e>
 800c08c:	9b04      	ldr	r3, [sp, #16]
 800c08e:	1e5e      	subs	r6, r3, #1
 800c090:	9b08      	ldr	r3, [sp, #32]
 800c092:	42b3      	cmp	r3, r6
 800c094:	bfbf      	itttt	lt
 800c096:	9b08      	ldrlt	r3, [sp, #32]
 800c098:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c09a:	9608      	strlt	r6, [sp, #32]
 800c09c:	1af3      	sublt	r3, r6, r3
 800c09e:	bfb4      	ite	lt
 800c0a0:	18d2      	addlt	r2, r2, r3
 800c0a2:	1b9e      	subge	r6, r3, r6
 800c0a4:	9b04      	ldr	r3, [sp, #16]
 800c0a6:	bfbc      	itt	lt
 800c0a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c0aa:	2600      	movlt	r6, #0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	bfb7      	itett	lt
 800c0b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c0b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c0b8:	1a9d      	sublt	r5, r3, r2
 800c0ba:	2300      	movlt	r3, #0
 800c0bc:	e741      	b.n	800bf42 <_dtoa_r+0x742>
 800c0be:	9e08      	ldr	r6, [sp, #32]
 800c0c0:	9d05      	ldr	r5, [sp, #20]
 800c0c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c0c4:	e748      	b.n	800bf58 <_dtoa_r+0x758>
 800c0c6:	9a08      	ldr	r2, [sp, #32]
 800c0c8:	e770      	b.n	800bfac <_dtoa_r+0x7ac>
 800c0ca:	9b07      	ldr	r3, [sp, #28]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	dc19      	bgt.n	800c104 <_dtoa_r+0x904>
 800c0d0:	9b02      	ldr	r3, [sp, #8]
 800c0d2:	b9bb      	cbnz	r3, 800c104 <_dtoa_r+0x904>
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c0da:	b99b      	cbnz	r3, 800c104 <_dtoa_r+0x904>
 800c0dc:	9b03      	ldr	r3, [sp, #12]
 800c0de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0e2:	0d1b      	lsrs	r3, r3, #20
 800c0e4:	051b      	lsls	r3, r3, #20
 800c0e6:	b183      	cbz	r3, 800c10a <_dtoa_r+0x90a>
 800c0e8:	9b05      	ldr	r3, [sp, #20]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	9305      	str	r3, [sp, #20]
 800c0ee:	9b06      	ldr	r3, [sp, #24]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	9306      	str	r3, [sp, #24]
 800c0f4:	f04f 0801 	mov.w	r8, #1
 800c0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f47f af6f 	bne.w	800bfde <_dtoa_r+0x7de>
 800c100:	2001      	movs	r0, #1
 800c102:	e774      	b.n	800bfee <_dtoa_r+0x7ee>
 800c104:	f04f 0800 	mov.w	r8, #0
 800c108:	e7f6      	b.n	800c0f8 <_dtoa_r+0x8f8>
 800c10a:	4698      	mov	r8, r3
 800c10c:	e7f4      	b.n	800c0f8 <_dtoa_r+0x8f8>
 800c10e:	d082      	beq.n	800c016 <_dtoa_r+0x816>
 800c110:	9a05      	ldr	r2, [sp, #20]
 800c112:	331c      	adds	r3, #28
 800c114:	441a      	add	r2, r3
 800c116:	9205      	str	r2, [sp, #20]
 800c118:	9a06      	ldr	r2, [sp, #24]
 800c11a:	441a      	add	r2, r3
 800c11c:	441d      	add	r5, r3
 800c11e:	9206      	str	r2, [sp, #24]
 800c120:	e779      	b.n	800c016 <_dtoa_r+0x816>
 800c122:	4603      	mov	r3, r0
 800c124:	e7f4      	b.n	800c110 <_dtoa_r+0x910>
 800c126:	9b04      	ldr	r3, [sp, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	dc37      	bgt.n	800c19c <_dtoa_r+0x99c>
 800c12c:	9b07      	ldr	r3, [sp, #28]
 800c12e:	2b02      	cmp	r3, #2
 800c130:	dd34      	ble.n	800c19c <_dtoa_r+0x99c>
 800c132:	9b04      	ldr	r3, [sp, #16]
 800c134:	9301      	str	r3, [sp, #4]
 800c136:	9b01      	ldr	r3, [sp, #4]
 800c138:	b963      	cbnz	r3, 800c154 <_dtoa_r+0x954>
 800c13a:	4631      	mov	r1, r6
 800c13c:	2205      	movs	r2, #5
 800c13e:	4620      	mov	r0, r4
 800c140:	f001 f966 	bl	800d410 <__multadd>
 800c144:	4601      	mov	r1, r0
 800c146:	4606      	mov	r6, r0
 800c148:	4650      	mov	r0, sl
 800c14a:	f001 fbc5 	bl	800d8d8 <__mcmp>
 800c14e:	2800      	cmp	r0, #0
 800c150:	f73f adbb 	bgt.w	800bcca <_dtoa_r+0x4ca>
 800c154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c156:	9d00      	ldr	r5, [sp, #0]
 800c158:	ea6f 0b03 	mvn.w	fp, r3
 800c15c:	f04f 0800 	mov.w	r8, #0
 800c160:	4631      	mov	r1, r6
 800c162:	4620      	mov	r0, r4
 800c164:	f001 f932 	bl	800d3cc <_Bfree>
 800c168:	2f00      	cmp	r7, #0
 800c16a:	f43f aeab 	beq.w	800bec4 <_dtoa_r+0x6c4>
 800c16e:	f1b8 0f00 	cmp.w	r8, #0
 800c172:	d005      	beq.n	800c180 <_dtoa_r+0x980>
 800c174:	45b8      	cmp	r8, r7
 800c176:	d003      	beq.n	800c180 <_dtoa_r+0x980>
 800c178:	4641      	mov	r1, r8
 800c17a:	4620      	mov	r0, r4
 800c17c:	f001 f926 	bl	800d3cc <_Bfree>
 800c180:	4639      	mov	r1, r7
 800c182:	4620      	mov	r0, r4
 800c184:	f001 f922 	bl	800d3cc <_Bfree>
 800c188:	e69c      	b.n	800bec4 <_dtoa_r+0x6c4>
 800c18a:	2600      	movs	r6, #0
 800c18c:	4637      	mov	r7, r6
 800c18e:	e7e1      	b.n	800c154 <_dtoa_r+0x954>
 800c190:	46bb      	mov	fp, r7
 800c192:	4637      	mov	r7, r6
 800c194:	e599      	b.n	800bcca <_dtoa_r+0x4ca>
 800c196:	bf00      	nop
 800c198:	40240000 	.word	0x40240000
 800c19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 80c8 	beq.w	800c334 <_dtoa_r+0xb34>
 800c1a4:	9b04      	ldr	r3, [sp, #16]
 800c1a6:	9301      	str	r3, [sp, #4]
 800c1a8:	2d00      	cmp	r5, #0
 800c1aa:	dd05      	ble.n	800c1b8 <_dtoa_r+0x9b8>
 800c1ac:	4639      	mov	r1, r7
 800c1ae:	462a      	mov	r2, r5
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f001 fb25 	bl	800d800 <__lshift>
 800c1b6:	4607      	mov	r7, r0
 800c1b8:	f1b8 0f00 	cmp.w	r8, #0
 800c1bc:	d05b      	beq.n	800c276 <_dtoa_r+0xa76>
 800c1be:	6879      	ldr	r1, [r7, #4]
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f001 f8c3 	bl	800d34c <_Balloc>
 800c1c6:	4605      	mov	r5, r0
 800c1c8:	b928      	cbnz	r0, 800c1d6 <_dtoa_r+0x9d6>
 800c1ca:	4b83      	ldr	r3, [pc, #524]	; (800c3d8 <_dtoa_r+0xbd8>)
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c1d2:	f7ff bb2e 	b.w	800b832 <_dtoa_r+0x32>
 800c1d6:	693a      	ldr	r2, [r7, #16]
 800c1d8:	3202      	adds	r2, #2
 800c1da:	0092      	lsls	r2, r2, #2
 800c1dc:	f107 010c 	add.w	r1, r7, #12
 800c1e0:	300c      	adds	r0, #12
 800c1e2:	f7ff fa66 	bl	800b6b2 <memcpy>
 800c1e6:	2201      	movs	r2, #1
 800c1e8:	4629      	mov	r1, r5
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f001 fb08 	bl	800d800 <__lshift>
 800c1f0:	9b00      	ldr	r3, [sp, #0]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	9304      	str	r3, [sp, #16]
 800c1f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	9308      	str	r3, [sp, #32]
 800c1fe:	9b02      	ldr	r3, [sp, #8]
 800c200:	f003 0301 	and.w	r3, r3, #1
 800c204:	46b8      	mov	r8, r7
 800c206:	9306      	str	r3, [sp, #24]
 800c208:	4607      	mov	r7, r0
 800c20a:	9b04      	ldr	r3, [sp, #16]
 800c20c:	4631      	mov	r1, r6
 800c20e:	3b01      	subs	r3, #1
 800c210:	4650      	mov	r0, sl
 800c212:	9301      	str	r3, [sp, #4]
 800c214:	f7ff fa6a 	bl	800b6ec <quorem>
 800c218:	4641      	mov	r1, r8
 800c21a:	9002      	str	r0, [sp, #8]
 800c21c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c220:	4650      	mov	r0, sl
 800c222:	f001 fb59 	bl	800d8d8 <__mcmp>
 800c226:	463a      	mov	r2, r7
 800c228:	9005      	str	r0, [sp, #20]
 800c22a:	4631      	mov	r1, r6
 800c22c:	4620      	mov	r0, r4
 800c22e:	f001 fb6f 	bl	800d910 <__mdiff>
 800c232:	68c2      	ldr	r2, [r0, #12]
 800c234:	4605      	mov	r5, r0
 800c236:	bb02      	cbnz	r2, 800c27a <_dtoa_r+0xa7a>
 800c238:	4601      	mov	r1, r0
 800c23a:	4650      	mov	r0, sl
 800c23c:	f001 fb4c 	bl	800d8d8 <__mcmp>
 800c240:	4602      	mov	r2, r0
 800c242:	4629      	mov	r1, r5
 800c244:	4620      	mov	r0, r4
 800c246:	9209      	str	r2, [sp, #36]	; 0x24
 800c248:	f001 f8c0 	bl	800d3cc <_Bfree>
 800c24c:	9b07      	ldr	r3, [sp, #28]
 800c24e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c250:	9d04      	ldr	r5, [sp, #16]
 800c252:	ea43 0102 	orr.w	r1, r3, r2
 800c256:	9b06      	ldr	r3, [sp, #24]
 800c258:	4319      	orrs	r1, r3
 800c25a:	d110      	bne.n	800c27e <_dtoa_r+0xa7e>
 800c25c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c260:	d029      	beq.n	800c2b6 <_dtoa_r+0xab6>
 800c262:	9b05      	ldr	r3, [sp, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	dd02      	ble.n	800c26e <_dtoa_r+0xa6e>
 800c268:	9b02      	ldr	r3, [sp, #8]
 800c26a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c26e:	9b01      	ldr	r3, [sp, #4]
 800c270:	f883 9000 	strb.w	r9, [r3]
 800c274:	e774      	b.n	800c160 <_dtoa_r+0x960>
 800c276:	4638      	mov	r0, r7
 800c278:	e7ba      	b.n	800c1f0 <_dtoa_r+0x9f0>
 800c27a:	2201      	movs	r2, #1
 800c27c:	e7e1      	b.n	800c242 <_dtoa_r+0xa42>
 800c27e:	9b05      	ldr	r3, [sp, #20]
 800c280:	2b00      	cmp	r3, #0
 800c282:	db04      	blt.n	800c28e <_dtoa_r+0xa8e>
 800c284:	9907      	ldr	r1, [sp, #28]
 800c286:	430b      	orrs	r3, r1
 800c288:	9906      	ldr	r1, [sp, #24]
 800c28a:	430b      	orrs	r3, r1
 800c28c:	d120      	bne.n	800c2d0 <_dtoa_r+0xad0>
 800c28e:	2a00      	cmp	r2, #0
 800c290:	dded      	ble.n	800c26e <_dtoa_r+0xa6e>
 800c292:	4651      	mov	r1, sl
 800c294:	2201      	movs	r2, #1
 800c296:	4620      	mov	r0, r4
 800c298:	f001 fab2 	bl	800d800 <__lshift>
 800c29c:	4631      	mov	r1, r6
 800c29e:	4682      	mov	sl, r0
 800c2a0:	f001 fb1a 	bl	800d8d8 <__mcmp>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	dc03      	bgt.n	800c2b0 <_dtoa_r+0xab0>
 800c2a8:	d1e1      	bne.n	800c26e <_dtoa_r+0xa6e>
 800c2aa:	f019 0f01 	tst.w	r9, #1
 800c2ae:	d0de      	beq.n	800c26e <_dtoa_r+0xa6e>
 800c2b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2b4:	d1d8      	bne.n	800c268 <_dtoa_r+0xa68>
 800c2b6:	9a01      	ldr	r2, [sp, #4]
 800c2b8:	2339      	movs	r3, #57	; 0x39
 800c2ba:	7013      	strb	r3, [r2, #0]
 800c2bc:	462b      	mov	r3, r5
 800c2be:	461d      	mov	r5, r3
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2c6:	2a39      	cmp	r2, #57	; 0x39
 800c2c8:	d06c      	beq.n	800c3a4 <_dtoa_r+0xba4>
 800c2ca:	3201      	adds	r2, #1
 800c2cc:	701a      	strb	r2, [r3, #0]
 800c2ce:	e747      	b.n	800c160 <_dtoa_r+0x960>
 800c2d0:	2a00      	cmp	r2, #0
 800c2d2:	dd07      	ble.n	800c2e4 <_dtoa_r+0xae4>
 800c2d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c2d8:	d0ed      	beq.n	800c2b6 <_dtoa_r+0xab6>
 800c2da:	9a01      	ldr	r2, [sp, #4]
 800c2dc:	f109 0301 	add.w	r3, r9, #1
 800c2e0:	7013      	strb	r3, [r2, #0]
 800c2e2:	e73d      	b.n	800c160 <_dtoa_r+0x960>
 800c2e4:	9b04      	ldr	r3, [sp, #16]
 800c2e6:	9a08      	ldr	r2, [sp, #32]
 800c2e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d043      	beq.n	800c378 <_dtoa_r+0xb78>
 800c2f0:	4651      	mov	r1, sl
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	220a      	movs	r2, #10
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	f001 f88a 	bl	800d410 <__multadd>
 800c2fc:	45b8      	cmp	r8, r7
 800c2fe:	4682      	mov	sl, r0
 800c300:	f04f 0300 	mov.w	r3, #0
 800c304:	f04f 020a 	mov.w	r2, #10
 800c308:	4641      	mov	r1, r8
 800c30a:	4620      	mov	r0, r4
 800c30c:	d107      	bne.n	800c31e <_dtoa_r+0xb1e>
 800c30e:	f001 f87f 	bl	800d410 <__multadd>
 800c312:	4680      	mov	r8, r0
 800c314:	4607      	mov	r7, r0
 800c316:	9b04      	ldr	r3, [sp, #16]
 800c318:	3301      	adds	r3, #1
 800c31a:	9304      	str	r3, [sp, #16]
 800c31c:	e775      	b.n	800c20a <_dtoa_r+0xa0a>
 800c31e:	f001 f877 	bl	800d410 <__multadd>
 800c322:	4639      	mov	r1, r7
 800c324:	4680      	mov	r8, r0
 800c326:	2300      	movs	r3, #0
 800c328:	220a      	movs	r2, #10
 800c32a:	4620      	mov	r0, r4
 800c32c:	f001 f870 	bl	800d410 <__multadd>
 800c330:	4607      	mov	r7, r0
 800c332:	e7f0      	b.n	800c316 <_dtoa_r+0xb16>
 800c334:	9b04      	ldr	r3, [sp, #16]
 800c336:	9301      	str	r3, [sp, #4]
 800c338:	9d00      	ldr	r5, [sp, #0]
 800c33a:	4631      	mov	r1, r6
 800c33c:	4650      	mov	r0, sl
 800c33e:	f7ff f9d5 	bl	800b6ec <quorem>
 800c342:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c346:	9b00      	ldr	r3, [sp, #0]
 800c348:	f805 9b01 	strb.w	r9, [r5], #1
 800c34c:	1aea      	subs	r2, r5, r3
 800c34e:	9b01      	ldr	r3, [sp, #4]
 800c350:	4293      	cmp	r3, r2
 800c352:	dd07      	ble.n	800c364 <_dtoa_r+0xb64>
 800c354:	4651      	mov	r1, sl
 800c356:	2300      	movs	r3, #0
 800c358:	220a      	movs	r2, #10
 800c35a:	4620      	mov	r0, r4
 800c35c:	f001 f858 	bl	800d410 <__multadd>
 800c360:	4682      	mov	sl, r0
 800c362:	e7ea      	b.n	800c33a <_dtoa_r+0xb3a>
 800c364:	9b01      	ldr	r3, [sp, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	bfc8      	it	gt
 800c36a:	461d      	movgt	r5, r3
 800c36c:	9b00      	ldr	r3, [sp, #0]
 800c36e:	bfd8      	it	le
 800c370:	2501      	movle	r5, #1
 800c372:	441d      	add	r5, r3
 800c374:	f04f 0800 	mov.w	r8, #0
 800c378:	4651      	mov	r1, sl
 800c37a:	2201      	movs	r2, #1
 800c37c:	4620      	mov	r0, r4
 800c37e:	f001 fa3f 	bl	800d800 <__lshift>
 800c382:	4631      	mov	r1, r6
 800c384:	4682      	mov	sl, r0
 800c386:	f001 faa7 	bl	800d8d8 <__mcmp>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	dc96      	bgt.n	800c2bc <_dtoa_r+0xabc>
 800c38e:	d102      	bne.n	800c396 <_dtoa_r+0xb96>
 800c390:	f019 0f01 	tst.w	r9, #1
 800c394:	d192      	bne.n	800c2bc <_dtoa_r+0xabc>
 800c396:	462b      	mov	r3, r5
 800c398:	461d      	mov	r5, r3
 800c39a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c39e:	2a30      	cmp	r2, #48	; 0x30
 800c3a0:	d0fa      	beq.n	800c398 <_dtoa_r+0xb98>
 800c3a2:	e6dd      	b.n	800c160 <_dtoa_r+0x960>
 800c3a4:	9a00      	ldr	r2, [sp, #0]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d189      	bne.n	800c2be <_dtoa_r+0xabe>
 800c3aa:	f10b 0b01 	add.w	fp, fp, #1
 800c3ae:	2331      	movs	r3, #49	; 0x31
 800c3b0:	e796      	b.n	800c2e0 <_dtoa_r+0xae0>
 800c3b2:	4b0a      	ldr	r3, [pc, #40]	; (800c3dc <_dtoa_r+0xbdc>)
 800c3b4:	f7ff ba99 	b.w	800b8ea <_dtoa_r+0xea>
 800c3b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f47f aa6d 	bne.w	800b89a <_dtoa_r+0x9a>
 800c3c0:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <_dtoa_r+0xbe0>)
 800c3c2:	f7ff ba92 	b.w	800b8ea <_dtoa_r+0xea>
 800c3c6:	9b01      	ldr	r3, [sp, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	dcb5      	bgt.n	800c338 <_dtoa_r+0xb38>
 800c3cc:	9b07      	ldr	r3, [sp, #28]
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	f73f aeb1 	bgt.w	800c136 <_dtoa_r+0x936>
 800c3d4:	e7b0      	b.n	800c338 <_dtoa_r+0xb38>
 800c3d6:	bf00      	nop
 800c3d8:	0800f755 	.word	0x0800f755
 800c3dc:	0800f554 	.word	0x0800f554
 800c3e0:	0800f6d9 	.word	0x0800f6d9

0800c3e4 <_free_r>:
 800c3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3e6:	2900      	cmp	r1, #0
 800c3e8:	d044      	beq.n	800c474 <_free_r+0x90>
 800c3ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ee:	9001      	str	r0, [sp, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f1a1 0404 	sub.w	r4, r1, #4
 800c3f6:	bfb8      	it	lt
 800c3f8:	18e4      	addlt	r4, r4, r3
 800c3fa:	f000 ff9b 	bl	800d334 <__malloc_lock>
 800c3fe:	4a1e      	ldr	r2, [pc, #120]	; (800c478 <_free_r+0x94>)
 800c400:	9801      	ldr	r0, [sp, #4]
 800c402:	6813      	ldr	r3, [r2, #0]
 800c404:	b933      	cbnz	r3, 800c414 <_free_r+0x30>
 800c406:	6063      	str	r3, [r4, #4]
 800c408:	6014      	str	r4, [r2, #0]
 800c40a:	b003      	add	sp, #12
 800c40c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c410:	f000 bf96 	b.w	800d340 <__malloc_unlock>
 800c414:	42a3      	cmp	r3, r4
 800c416:	d908      	bls.n	800c42a <_free_r+0x46>
 800c418:	6825      	ldr	r5, [r4, #0]
 800c41a:	1961      	adds	r1, r4, r5
 800c41c:	428b      	cmp	r3, r1
 800c41e:	bf01      	itttt	eq
 800c420:	6819      	ldreq	r1, [r3, #0]
 800c422:	685b      	ldreq	r3, [r3, #4]
 800c424:	1949      	addeq	r1, r1, r5
 800c426:	6021      	streq	r1, [r4, #0]
 800c428:	e7ed      	b.n	800c406 <_free_r+0x22>
 800c42a:	461a      	mov	r2, r3
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	b10b      	cbz	r3, 800c434 <_free_r+0x50>
 800c430:	42a3      	cmp	r3, r4
 800c432:	d9fa      	bls.n	800c42a <_free_r+0x46>
 800c434:	6811      	ldr	r1, [r2, #0]
 800c436:	1855      	adds	r5, r2, r1
 800c438:	42a5      	cmp	r5, r4
 800c43a:	d10b      	bne.n	800c454 <_free_r+0x70>
 800c43c:	6824      	ldr	r4, [r4, #0]
 800c43e:	4421      	add	r1, r4
 800c440:	1854      	adds	r4, r2, r1
 800c442:	42a3      	cmp	r3, r4
 800c444:	6011      	str	r1, [r2, #0]
 800c446:	d1e0      	bne.n	800c40a <_free_r+0x26>
 800c448:	681c      	ldr	r4, [r3, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	6053      	str	r3, [r2, #4]
 800c44e:	440c      	add	r4, r1
 800c450:	6014      	str	r4, [r2, #0]
 800c452:	e7da      	b.n	800c40a <_free_r+0x26>
 800c454:	d902      	bls.n	800c45c <_free_r+0x78>
 800c456:	230c      	movs	r3, #12
 800c458:	6003      	str	r3, [r0, #0]
 800c45a:	e7d6      	b.n	800c40a <_free_r+0x26>
 800c45c:	6825      	ldr	r5, [r4, #0]
 800c45e:	1961      	adds	r1, r4, r5
 800c460:	428b      	cmp	r3, r1
 800c462:	bf04      	itt	eq
 800c464:	6819      	ldreq	r1, [r3, #0]
 800c466:	685b      	ldreq	r3, [r3, #4]
 800c468:	6063      	str	r3, [r4, #4]
 800c46a:	bf04      	itt	eq
 800c46c:	1949      	addeq	r1, r1, r5
 800c46e:	6021      	streq	r1, [r4, #0]
 800c470:	6054      	str	r4, [r2, #4]
 800c472:	e7ca      	b.n	800c40a <_free_r+0x26>
 800c474:	b003      	add	sp, #12
 800c476:	bd30      	pop	{r4, r5, pc}
 800c478:	20000818 	.word	0x20000818

0800c47c <rshift>:
 800c47c:	6903      	ldr	r3, [r0, #16]
 800c47e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c486:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c48a:	f100 0414 	add.w	r4, r0, #20
 800c48e:	dd45      	ble.n	800c51c <rshift+0xa0>
 800c490:	f011 011f 	ands.w	r1, r1, #31
 800c494:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c498:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c49c:	d10c      	bne.n	800c4b8 <rshift+0x3c>
 800c49e:	f100 0710 	add.w	r7, r0, #16
 800c4a2:	4629      	mov	r1, r5
 800c4a4:	42b1      	cmp	r1, r6
 800c4a6:	d334      	bcc.n	800c512 <rshift+0x96>
 800c4a8:	1a9b      	subs	r3, r3, r2
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	1eea      	subs	r2, r5, #3
 800c4ae:	4296      	cmp	r6, r2
 800c4b0:	bf38      	it	cc
 800c4b2:	2300      	movcc	r3, #0
 800c4b4:	4423      	add	r3, r4
 800c4b6:	e015      	b.n	800c4e4 <rshift+0x68>
 800c4b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4bc:	f1c1 0820 	rsb	r8, r1, #32
 800c4c0:	40cf      	lsrs	r7, r1
 800c4c2:	f105 0e04 	add.w	lr, r5, #4
 800c4c6:	46a1      	mov	r9, r4
 800c4c8:	4576      	cmp	r6, lr
 800c4ca:	46f4      	mov	ip, lr
 800c4cc:	d815      	bhi.n	800c4fa <rshift+0x7e>
 800c4ce:	1a9a      	subs	r2, r3, r2
 800c4d0:	0092      	lsls	r2, r2, #2
 800c4d2:	3a04      	subs	r2, #4
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	42ae      	cmp	r6, r5
 800c4d8:	bf38      	it	cc
 800c4da:	2200      	movcc	r2, #0
 800c4dc:	18a3      	adds	r3, r4, r2
 800c4de:	50a7      	str	r7, [r4, r2]
 800c4e0:	b107      	cbz	r7, 800c4e4 <rshift+0x68>
 800c4e2:	3304      	adds	r3, #4
 800c4e4:	1b1a      	subs	r2, r3, r4
 800c4e6:	42a3      	cmp	r3, r4
 800c4e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4ec:	bf08      	it	eq
 800c4ee:	2300      	moveq	r3, #0
 800c4f0:	6102      	str	r2, [r0, #16]
 800c4f2:	bf08      	it	eq
 800c4f4:	6143      	streq	r3, [r0, #20]
 800c4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4fa:	f8dc c000 	ldr.w	ip, [ip]
 800c4fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800c502:	ea4c 0707 	orr.w	r7, ip, r7
 800c506:	f849 7b04 	str.w	r7, [r9], #4
 800c50a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c50e:	40cf      	lsrs	r7, r1
 800c510:	e7da      	b.n	800c4c8 <rshift+0x4c>
 800c512:	f851 cb04 	ldr.w	ip, [r1], #4
 800c516:	f847 cf04 	str.w	ip, [r7, #4]!
 800c51a:	e7c3      	b.n	800c4a4 <rshift+0x28>
 800c51c:	4623      	mov	r3, r4
 800c51e:	e7e1      	b.n	800c4e4 <rshift+0x68>

0800c520 <__hexdig_fun>:
 800c520:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c524:	2b09      	cmp	r3, #9
 800c526:	d802      	bhi.n	800c52e <__hexdig_fun+0xe>
 800c528:	3820      	subs	r0, #32
 800c52a:	b2c0      	uxtb	r0, r0
 800c52c:	4770      	bx	lr
 800c52e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c532:	2b05      	cmp	r3, #5
 800c534:	d801      	bhi.n	800c53a <__hexdig_fun+0x1a>
 800c536:	3847      	subs	r0, #71	; 0x47
 800c538:	e7f7      	b.n	800c52a <__hexdig_fun+0xa>
 800c53a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c53e:	2b05      	cmp	r3, #5
 800c540:	d801      	bhi.n	800c546 <__hexdig_fun+0x26>
 800c542:	3827      	subs	r0, #39	; 0x27
 800c544:	e7f1      	b.n	800c52a <__hexdig_fun+0xa>
 800c546:	2000      	movs	r0, #0
 800c548:	4770      	bx	lr
	...

0800c54c <__gethex>:
 800c54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c550:	4617      	mov	r7, r2
 800c552:	680a      	ldr	r2, [r1, #0]
 800c554:	b085      	sub	sp, #20
 800c556:	f102 0b02 	add.w	fp, r2, #2
 800c55a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c55e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c562:	4681      	mov	r9, r0
 800c564:	468a      	mov	sl, r1
 800c566:	9302      	str	r3, [sp, #8]
 800c568:	32fe      	adds	r2, #254	; 0xfe
 800c56a:	eb02 030b 	add.w	r3, r2, fp
 800c56e:	46d8      	mov	r8, fp
 800c570:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c574:	9301      	str	r3, [sp, #4]
 800c576:	2830      	cmp	r0, #48	; 0x30
 800c578:	d0f7      	beq.n	800c56a <__gethex+0x1e>
 800c57a:	f7ff ffd1 	bl	800c520 <__hexdig_fun>
 800c57e:	4604      	mov	r4, r0
 800c580:	2800      	cmp	r0, #0
 800c582:	d138      	bne.n	800c5f6 <__gethex+0xaa>
 800c584:	49a7      	ldr	r1, [pc, #668]	; (800c824 <__gethex+0x2d8>)
 800c586:	2201      	movs	r2, #1
 800c588:	4640      	mov	r0, r8
 800c58a:	f7ff f801 	bl	800b590 <strncmp>
 800c58e:	4606      	mov	r6, r0
 800c590:	2800      	cmp	r0, #0
 800c592:	d169      	bne.n	800c668 <__gethex+0x11c>
 800c594:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c598:	465d      	mov	r5, fp
 800c59a:	f7ff ffc1 	bl	800c520 <__hexdig_fun>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d064      	beq.n	800c66c <__gethex+0x120>
 800c5a2:	465a      	mov	r2, fp
 800c5a4:	7810      	ldrb	r0, [r2, #0]
 800c5a6:	2830      	cmp	r0, #48	; 0x30
 800c5a8:	4690      	mov	r8, r2
 800c5aa:	f102 0201 	add.w	r2, r2, #1
 800c5ae:	d0f9      	beq.n	800c5a4 <__gethex+0x58>
 800c5b0:	f7ff ffb6 	bl	800c520 <__hexdig_fun>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	fab0 f480 	clz	r4, r0
 800c5ba:	0964      	lsrs	r4, r4, #5
 800c5bc:	465e      	mov	r6, fp
 800c5be:	9301      	str	r3, [sp, #4]
 800c5c0:	4642      	mov	r2, r8
 800c5c2:	4615      	mov	r5, r2
 800c5c4:	3201      	adds	r2, #1
 800c5c6:	7828      	ldrb	r0, [r5, #0]
 800c5c8:	f7ff ffaa 	bl	800c520 <__hexdig_fun>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d1f8      	bne.n	800c5c2 <__gethex+0x76>
 800c5d0:	4994      	ldr	r1, [pc, #592]	; (800c824 <__gethex+0x2d8>)
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f7fe ffdb 	bl	800b590 <strncmp>
 800c5da:	b978      	cbnz	r0, 800c5fc <__gethex+0xb0>
 800c5dc:	b946      	cbnz	r6, 800c5f0 <__gethex+0xa4>
 800c5de:	1c6e      	adds	r6, r5, #1
 800c5e0:	4632      	mov	r2, r6
 800c5e2:	4615      	mov	r5, r2
 800c5e4:	3201      	adds	r2, #1
 800c5e6:	7828      	ldrb	r0, [r5, #0]
 800c5e8:	f7ff ff9a 	bl	800c520 <__hexdig_fun>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d1f8      	bne.n	800c5e2 <__gethex+0x96>
 800c5f0:	1b73      	subs	r3, r6, r5
 800c5f2:	009e      	lsls	r6, r3, #2
 800c5f4:	e004      	b.n	800c600 <__gethex+0xb4>
 800c5f6:	2400      	movs	r4, #0
 800c5f8:	4626      	mov	r6, r4
 800c5fa:	e7e1      	b.n	800c5c0 <__gethex+0x74>
 800c5fc:	2e00      	cmp	r6, #0
 800c5fe:	d1f7      	bne.n	800c5f0 <__gethex+0xa4>
 800c600:	782b      	ldrb	r3, [r5, #0]
 800c602:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c606:	2b50      	cmp	r3, #80	; 0x50
 800c608:	d13d      	bne.n	800c686 <__gethex+0x13a>
 800c60a:	786b      	ldrb	r3, [r5, #1]
 800c60c:	2b2b      	cmp	r3, #43	; 0x2b
 800c60e:	d02f      	beq.n	800c670 <__gethex+0x124>
 800c610:	2b2d      	cmp	r3, #45	; 0x2d
 800c612:	d031      	beq.n	800c678 <__gethex+0x12c>
 800c614:	1c69      	adds	r1, r5, #1
 800c616:	f04f 0b00 	mov.w	fp, #0
 800c61a:	7808      	ldrb	r0, [r1, #0]
 800c61c:	f7ff ff80 	bl	800c520 <__hexdig_fun>
 800c620:	1e42      	subs	r2, r0, #1
 800c622:	b2d2      	uxtb	r2, r2
 800c624:	2a18      	cmp	r2, #24
 800c626:	d82e      	bhi.n	800c686 <__gethex+0x13a>
 800c628:	f1a0 0210 	sub.w	r2, r0, #16
 800c62c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c630:	f7ff ff76 	bl	800c520 <__hexdig_fun>
 800c634:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800c638:	fa5f fc8c 	uxtb.w	ip, ip
 800c63c:	f1bc 0f18 	cmp.w	ip, #24
 800c640:	d91d      	bls.n	800c67e <__gethex+0x132>
 800c642:	f1bb 0f00 	cmp.w	fp, #0
 800c646:	d000      	beq.n	800c64a <__gethex+0xfe>
 800c648:	4252      	negs	r2, r2
 800c64a:	4416      	add	r6, r2
 800c64c:	f8ca 1000 	str.w	r1, [sl]
 800c650:	b1dc      	cbz	r4, 800c68a <__gethex+0x13e>
 800c652:	9b01      	ldr	r3, [sp, #4]
 800c654:	2b00      	cmp	r3, #0
 800c656:	bf14      	ite	ne
 800c658:	f04f 0800 	movne.w	r8, #0
 800c65c:	f04f 0806 	moveq.w	r8, #6
 800c660:	4640      	mov	r0, r8
 800c662:	b005      	add	sp, #20
 800c664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c668:	4645      	mov	r5, r8
 800c66a:	4626      	mov	r6, r4
 800c66c:	2401      	movs	r4, #1
 800c66e:	e7c7      	b.n	800c600 <__gethex+0xb4>
 800c670:	f04f 0b00 	mov.w	fp, #0
 800c674:	1ca9      	adds	r1, r5, #2
 800c676:	e7d0      	b.n	800c61a <__gethex+0xce>
 800c678:	f04f 0b01 	mov.w	fp, #1
 800c67c:	e7fa      	b.n	800c674 <__gethex+0x128>
 800c67e:	230a      	movs	r3, #10
 800c680:	fb03 0002 	mla	r0, r3, r2, r0
 800c684:	e7d0      	b.n	800c628 <__gethex+0xdc>
 800c686:	4629      	mov	r1, r5
 800c688:	e7e0      	b.n	800c64c <__gethex+0x100>
 800c68a:	eba5 0308 	sub.w	r3, r5, r8
 800c68e:	3b01      	subs	r3, #1
 800c690:	4621      	mov	r1, r4
 800c692:	2b07      	cmp	r3, #7
 800c694:	dc0a      	bgt.n	800c6ac <__gethex+0x160>
 800c696:	4648      	mov	r0, r9
 800c698:	f000 fe58 	bl	800d34c <_Balloc>
 800c69c:	4604      	mov	r4, r0
 800c69e:	b940      	cbnz	r0, 800c6b2 <__gethex+0x166>
 800c6a0:	4b61      	ldr	r3, [pc, #388]	; (800c828 <__gethex+0x2dc>)
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	21e4      	movs	r1, #228	; 0xe4
 800c6a6:	4861      	ldr	r0, [pc, #388]	; (800c82c <__gethex+0x2e0>)
 800c6a8:	f001 fcb2 	bl	800e010 <__assert_func>
 800c6ac:	3101      	adds	r1, #1
 800c6ae:	105b      	asrs	r3, r3, #1
 800c6b0:	e7ef      	b.n	800c692 <__gethex+0x146>
 800c6b2:	f100 0a14 	add.w	sl, r0, #20
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	495a      	ldr	r1, [pc, #360]	; (800c824 <__gethex+0x2d8>)
 800c6ba:	f8cd a004 	str.w	sl, [sp, #4]
 800c6be:	469b      	mov	fp, r3
 800c6c0:	45a8      	cmp	r8, r5
 800c6c2:	d342      	bcc.n	800c74a <__gethex+0x1fe>
 800c6c4:	9801      	ldr	r0, [sp, #4]
 800c6c6:	f840 bb04 	str.w	fp, [r0], #4
 800c6ca:	eba0 000a 	sub.w	r0, r0, sl
 800c6ce:	1080      	asrs	r0, r0, #2
 800c6d0:	6120      	str	r0, [r4, #16]
 800c6d2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c6d6:	4658      	mov	r0, fp
 800c6d8:	f000 ff2a 	bl	800d530 <__hi0bits>
 800c6dc:	683d      	ldr	r5, [r7, #0]
 800c6de:	eba8 0000 	sub.w	r0, r8, r0
 800c6e2:	42a8      	cmp	r0, r5
 800c6e4:	dd59      	ble.n	800c79a <__gethex+0x24e>
 800c6e6:	eba0 0805 	sub.w	r8, r0, r5
 800c6ea:	4641      	mov	r1, r8
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f001 fab9 	bl	800dc64 <__any_on>
 800c6f2:	4683      	mov	fp, r0
 800c6f4:	b1b8      	cbz	r0, 800c726 <__gethex+0x1da>
 800c6f6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800c6fa:	1159      	asrs	r1, r3, #5
 800c6fc:	f003 021f 	and.w	r2, r3, #31
 800c700:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c704:	f04f 0b01 	mov.w	fp, #1
 800c708:	fa0b f202 	lsl.w	r2, fp, r2
 800c70c:	420a      	tst	r2, r1
 800c70e:	d00a      	beq.n	800c726 <__gethex+0x1da>
 800c710:	455b      	cmp	r3, fp
 800c712:	dd06      	ble.n	800c722 <__gethex+0x1d6>
 800c714:	f1a8 0102 	sub.w	r1, r8, #2
 800c718:	4620      	mov	r0, r4
 800c71a:	f001 faa3 	bl	800dc64 <__any_on>
 800c71e:	2800      	cmp	r0, #0
 800c720:	d138      	bne.n	800c794 <__gethex+0x248>
 800c722:	f04f 0b02 	mov.w	fp, #2
 800c726:	4641      	mov	r1, r8
 800c728:	4620      	mov	r0, r4
 800c72a:	f7ff fea7 	bl	800c47c <rshift>
 800c72e:	4446      	add	r6, r8
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	42b3      	cmp	r3, r6
 800c734:	da41      	bge.n	800c7ba <__gethex+0x26e>
 800c736:	4621      	mov	r1, r4
 800c738:	4648      	mov	r0, r9
 800c73a:	f000 fe47 	bl	800d3cc <_Bfree>
 800c73e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c740:	2300      	movs	r3, #0
 800c742:	6013      	str	r3, [r2, #0]
 800c744:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c748:	e78a      	b.n	800c660 <__gethex+0x114>
 800c74a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c74e:	2a2e      	cmp	r2, #46	; 0x2e
 800c750:	d014      	beq.n	800c77c <__gethex+0x230>
 800c752:	2b20      	cmp	r3, #32
 800c754:	d106      	bne.n	800c764 <__gethex+0x218>
 800c756:	9b01      	ldr	r3, [sp, #4]
 800c758:	f843 bb04 	str.w	fp, [r3], #4
 800c75c:	f04f 0b00 	mov.w	fp, #0
 800c760:	9301      	str	r3, [sp, #4]
 800c762:	465b      	mov	r3, fp
 800c764:	7828      	ldrb	r0, [r5, #0]
 800c766:	9303      	str	r3, [sp, #12]
 800c768:	f7ff feda 	bl	800c520 <__hexdig_fun>
 800c76c:	9b03      	ldr	r3, [sp, #12]
 800c76e:	f000 000f 	and.w	r0, r0, #15
 800c772:	4098      	lsls	r0, r3
 800c774:	ea4b 0b00 	orr.w	fp, fp, r0
 800c778:	3304      	adds	r3, #4
 800c77a:	e7a1      	b.n	800c6c0 <__gethex+0x174>
 800c77c:	45a8      	cmp	r8, r5
 800c77e:	d8e8      	bhi.n	800c752 <__gethex+0x206>
 800c780:	2201      	movs	r2, #1
 800c782:	4628      	mov	r0, r5
 800c784:	9303      	str	r3, [sp, #12]
 800c786:	f7fe ff03 	bl	800b590 <strncmp>
 800c78a:	4926      	ldr	r1, [pc, #152]	; (800c824 <__gethex+0x2d8>)
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	2800      	cmp	r0, #0
 800c790:	d1df      	bne.n	800c752 <__gethex+0x206>
 800c792:	e795      	b.n	800c6c0 <__gethex+0x174>
 800c794:	f04f 0b03 	mov.w	fp, #3
 800c798:	e7c5      	b.n	800c726 <__gethex+0x1da>
 800c79a:	da0b      	bge.n	800c7b4 <__gethex+0x268>
 800c79c:	eba5 0800 	sub.w	r8, r5, r0
 800c7a0:	4621      	mov	r1, r4
 800c7a2:	4642      	mov	r2, r8
 800c7a4:	4648      	mov	r0, r9
 800c7a6:	f001 f82b 	bl	800d800 <__lshift>
 800c7aa:	eba6 0608 	sub.w	r6, r6, r8
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	f100 0a14 	add.w	sl, r0, #20
 800c7b4:	f04f 0b00 	mov.w	fp, #0
 800c7b8:	e7ba      	b.n	800c730 <__gethex+0x1e4>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	42b3      	cmp	r3, r6
 800c7be:	dd73      	ble.n	800c8a8 <__gethex+0x35c>
 800c7c0:	1b9e      	subs	r6, r3, r6
 800c7c2:	42b5      	cmp	r5, r6
 800c7c4:	dc34      	bgt.n	800c830 <__gethex+0x2e4>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d023      	beq.n	800c814 <__gethex+0x2c8>
 800c7cc:	2b03      	cmp	r3, #3
 800c7ce:	d025      	beq.n	800c81c <__gethex+0x2d0>
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d115      	bne.n	800c800 <__gethex+0x2b4>
 800c7d4:	42b5      	cmp	r5, r6
 800c7d6:	d113      	bne.n	800c800 <__gethex+0x2b4>
 800c7d8:	2d01      	cmp	r5, #1
 800c7da:	d10b      	bne.n	800c7f4 <__gethex+0x2a8>
 800c7dc:	9a02      	ldr	r2, [sp, #8]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6013      	str	r3, [r2, #0]
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	6123      	str	r3, [r4, #16]
 800c7e6:	f8ca 3000 	str.w	r3, [sl]
 800c7ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7ec:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c7f0:	601c      	str	r4, [r3, #0]
 800c7f2:	e735      	b.n	800c660 <__gethex+0x114>
 800c7f4:	1e69      	subs	r1, r5, #1
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f001 fa34 	bl	800dc64 <__any_on>
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	d1ed      	bne.n	800c7dc <__gethex+0x290>
 800c800:	4621      	mov	r1, r4
 800c802:	4648      	mov	r0, r9
 800c804:	f000 fde2 	bl	800d3cc <_Bfree>
 800c808:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c80a:	2300      	movs	r3, #0
 800c80c:	6013      	str	r3, [r2, #0]
 800c80e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c812:	e725      	b.n	800c660 <__gethex+0x114>
 800c814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1f2      	bne.n	800c800 <__gethex+0x2b4>
 800c81a:	e7df      	b.n	800c7dc <__gethex+0x290>
 800c81c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d1dc      	bne.n	800c7dc <__gethex+0x290>
 800c822:	e7ed      	b.n	800c800 <__gethex+0x2b4>
 800c824:	0800f57d 	.word	0x0800f57d
 800c828:	0800f755 	.word	0x0800f755
 800c82c:	0800f766 	.word	0x0800f766
 800c830:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800c834:	f1bb 0f00 	cmp.w	fp, #0
 800c838:	d133      	bne.n	800c8a2 <__gethex+0x356>
 800c83a:	f1b8 0f00 	cmp.w	r8, #0
 800c83e:	d004      	beq.n	800c84a <__gethex+0x2fe>
 800c840:	4641      	mov	r1, r8
 800c842:	4620      	mov	r0, r4
 800c844:	f001 fa0e 	bl	800dc64 <__any_on>
 800c848:	4683      	mov	fp, r0
 800c84a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c84e:	2301      	movs	r3, #1
 800c850:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c854:	f008 081f 	and.w	r8, r8, #31
 800c858:	fa03 f308 	lsl.w	r3, r3, r8
 800c85c:	4213      	tst	r3, r2
 800c85e:	4631      	mov	r1, r6
 800c860:	4620      	mov	r0, r4
 800c862:	bf18      	it	ne
 800c864:	f04b 0b02 	orrne.w	fp, fp, #2
 800c868:	1bad      	subs	r5, r5, r6
 800c86a:	f7ff fe07 	bl	800c47c <rshift>
 800c86e:	687e      	ldr	r6, [r7, #4]
 800c870:	f04f 0802 	mov.w	r8, #2
 800c874:	f1bb 0f00 	cmp.w	fp, #0
 800c878:	d04a      	beq.n	800c910 <__gethex+0x3c4>
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2b02      	cmp	r3, #2
 800c87e:	d016      	beq.n	800c8ae <__gethex+0x362>
 800c880:	2b03      	cmp	r3, #3
 800c882:	d018      	beq.n	800c8b6 <__gethex+0x36a>
 800c884:	2b01      	cmp	r3, #1
 800c886:	d109      	bne.n	800c89c <__gethex+0x350>
 800c888:	f01b 0f02 	tst.w	fp, #2
 800c88c:	d006      	beq.n	800c89c <__gethex+0x350>
 800c88e:	f8da 3000 	ldr.w	r3, [sl]
 800c892:	ea4b 0b03 	orr.w	fp, fp, r3
 800c896:	f01b 0f01 	tst.w	fp, #1
 800c89a:	d10f      	bne.n	800c8bc <__gethex+0x370>
 800c89c:	f048 0810 	orr.w	r8, r8, #16
 800c8a0:	e036      	b.n	800c910 <__gethex+0x3c4>
 800c8a2:	f04f 0b01 	mov.w	fp, #1
 800c8a6:	e7d0      	b.n	800c84a <__gethex+0x2fe>
 800c8a8:	f04f 0801 	mov.w	r8, #1
 800c8ac:	e7e2      	b.n	800c874 <__gethex+0x328>
 800c8ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8b0:	f1c3 0301 	rsb	r3, r3, #1
 800c8b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d0ef      	beq.n	800c89c <__gethex+0x350>
 800c8bc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c8c0:	f104 0214 	add.w	r2, r4, #20
 800c8c4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	4694      	mov	ip, r2
 800c8d2:	f852 1b04 	ldr.w	r1, [r2], #4
 800c8d6:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800c8da:	d01e      	beq.n	800c91a <__gethex+0x3ce>
 800c8dc:	3101      	adds	r1, #1
 800c8de:	f8cc 1000 	str.w	r1, [ip]
 800c8e2:	f1b8 0f02 	cmp.w	r8, #2
 800c8e6:	f104 0214 	add.w	r2, r4, #20
 800c8ea:	d13d      	bne.n	800c968 <__gethex+0x41c>
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	42ab      	cmp	r3, r5
 800c8f2:	d10b      	bne.n	800c90c <__gethex+0x3c0>
 800c8f4:	1169      	asrs	r1, r5, #5
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	f005 051f 	and.w	r5, r5, #31
 800c8fc:	fa03 f505 	lsl.w	r5, r3, r5
 800c900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c904:	421d      	tst	r5, r3
 800c906:	bf18      	it	ne
 800c908:	f04f 0801 	movne.w	r8, #1
 800c90c:	f048 0820 	orr.w	r8, r8, #32
 800c910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c912:	601c      	str	r4, [r3, #0]
 800c914:	9b02      	ldr	r3, [sp, #8]
 800c916:	601e      	str	r6, [r3, #0]
 800c918:	e6a2      	b.n	800c660 <__gethex+0x114>
 800c91a:	4290      	cmp	r0, r2
 800c91c:	f842 3c04 	str.w	r3, [r2, #-4]
 800c920:	d8d6      	bhi.n	800c8d0 <__gethex+0x384>
 800c922:	68a2      	ldr	r2, [r4, #8]
 800c924:	4593      	cmp	fp, r2
 800c926:	db17      	blt.n	800c958 <__gethex+0x40c>
 800c928:	6861      	ldr	r1, [r4, #4]
 800c92a:	4648      	mov	r0, r9
 800c92c:	3101      	adds	r1, #1
 800c92e:	f000 fd0d 	bl	800d34c <_Balloc>
 800c932:	4682      	mov	sl, r0
 800c934:	b918      	cbnz	r0, 800c93e <__gethex+0x3f2>
 800c936:	4b1b      	ldr	r3, [pc, #108]	; (800c9a4 <__gethex+0x458>)
 800c938:	4602      	mov	r2, r0
 800c93a:	2184      	movs	r1, #132	; 0x84
 800c93c:	e6b3      	b.n	800c6a6 <__gethex+0x15a>
 800c93e:	6922      	ldr	r2, [r4, #16]
 800c940:	3202      	adds	r2, #2
 800c942:	f104 010c 	add.w	r1, r4, #12
 800c946:	0092      	lsls	r2, r2, #2
 800c948:	300c      	adds	r0, #12
 800c94a:	f7fe feb2 	bl	800b6b2 <memcpy>
 800c94e:	4621      	mov	r1, r4
 800c950:	4648      	mov	r0, r9
 800c952:	f000 fd3b 	bl	800d3cc <_Bfree>
 800c956:	4654      	mov	r4, sl
 800c958:	6922      	ldr	r2, [r4, #16]
 800c95a:	1c51      	adds	r1, r2, #1
 800c95c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c960:	6121      	str	r1, [r4, #16]
 800c962:	2101      	movs	r1, #1
 800c964:	6151      	str	r1, [r2, #20]
 800c966:	e7bc      	b.n	800c8e2 <__gethex+0x396>
 800c968:	6921      	ldr	r1, [r4, #16]
 800c96a:	4559      	cmp	r1, fp
 800c96c:	dd0b      	ble.n	800c986 <__gethex+0x43a>
 800c96e:	2101      	movs	r1, #1
 800c970:	4620      	mov	r0, r4
 800c972:	f7ff fd83 	bl	800c47c <rshift>
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	3601      	adds	r6, #1
 800c97a:	42b3      	cmp	r3, r6
 800c97c:	f6ff aedb 	blt.w	800c736 <__gethex+0x1ea>
 800c980:	f04f 0801 	mov.w	r8, #1
 800c984:	e7c2      	b.n	800c90c <__gethex+0x3c0>
 800c986:	f015 051f 	ands.w	r5, r5, #31
 800c98a:	d0f9      	beq.n	800c980 <__gethex+0x434>
 800c98c:	9b01      	ldr	r3, [sp, #4]
 800c98e:	441a      	add	r2, r3
 800c990:	f1c5 0520 	rsb	r5, r5, #32
 800c994:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c998:	f000 fdca 	bl	800d530 <__hi0bits>
 800c99c:	42a8      	cmp	r0, r5
 800c99e:	dbe6      	blt.n	800c96e <__gethex+0x422>
 800c9a0:	e7ee      	b.n	800c980 <__gethex+0x434>
 800c9a2:	bf00      	nop
 800c9a4:	0800f755 	.word	0x0800f755

0800c9a8 <L_shift>:
 800c9a8:	f1c2 0208 	rsb	r2, r2, #8
 800c9ac:	0092      	lsls	r2, r2, #2
 800c9ae:	b570      	push	{r4, r5, r6, lr}
 800c9b0:	f1c2 0620 	rsb	r6, r2, #32
 800c9b4:	6843      	ldr	r3, [r0, #4]
 800c9b6:	6804      	ldr	r4, [r0, #0]
 800c9b8:	fa03 f506 	lsl.w	r5, r3, r6
 800c9bc:	432c      	orrs	r4, r5
 800c9be:	40d3      	lsrs	r3, r2
 800c9c0:	6004      	str	r4, [r0, #0]
 800c9c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800c9c6:	4288      	cmp	r0, r1
 800c9c8:	d3f4      	bcc.n	800c9b4 <L_shift+0xc>
 800c9ca:	bd70      	pop	{r4, r5, r6, pc}

0800c9cc <__match>:
 800c9cc:	b530      	push	{r4, r5, lr}
 800c9ce:	6803      	ldr	r3, [r0, #0]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9d6:	b914      	cbnz	r4, 800c9de <__match+0x12>
 800c9d8:	6003      	str	r3, [r0, #0]
 800c9da:	2001      	movs	r0, #1
 800c9dc:	bd30      	pop	{r4, r5, pc}
 800c9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c9e6:	2d19      	cmp	r5, #25
 800c9e8:	bf98      	it	ls
 800c9ea:	3220      	addls	r2, #32
 800c9ec:	42a2      	cmp	r2, r4
 800c9ee:	d0f0      	beq.n	800c9d2 <__match+0x6>
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	e7f3      	b.n	800c9dc <__match+0x10>

0800c9f4 <__hexnan>:
 800c9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9f8:	680b      	ldr	r3, [r1, #0]
 800c9fa:	6801      	ldr	r1, [r0, #0]
 800c9fc:	115e      	asrs	r6, r3, #5
 800c9fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ca02:	f013 031f 	ands.w	r3, r3, #31
 800ca06:	b087      	sub	sp, #28
 800ca08:	bf18      	it	ne
 800ca0a:	3604      	addne	r6, #4
 800ca0c:	2500      	movs	r5, #0
 800ca0e:	1f37      	subs	r7, r6, #4
 800ca10:	4682      	mov	sl, r0
 800ca12:	4690      	mov	r8, r2
 800ca14:	9301      	str	r3, [sp, #4]
 800ca16:	f846 5c04 	str.w	r5, [r6, #-4]
 800ca1a:	46b9      	mov	r9, r7
 800ca1c:	463c      	mov	r4, r7
 800ca1e:	9502      	str	r5, [sp, #8]
 800ca20:	46ab      	mov	fp, r5
 800ca22:	784a      	ldrb	r2, [r1, #1]
 800ca24:	1c4b      	adds	r3, r1, #1
 800ca26:	9303      	str	r3, [sp, #12]
 800ca28:	b342      	cbz	r2, 800ca7c <__hexnan+0x88>
 800ca2a:	4610      	mov	r0, r2
 800ca2c:	9105      	str	r1, [sp, #20]
 800ca2e:	9204      	str	r2, [sp, #16]
 800ca30:	f7ff fd76 	bl	800c520 <__hexdig_fun>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d14f      	bne.n	800cad8 <__hexnan+0xe4>
 800ca38:	9a04      	ldr	r2, [sp, #16]
 800ca3a:	9905      	ldr	r1, [sp, #20]
 800ca3c:	2a20      	cmp	r2, #32
 800ca3e:	d818      	bhi.n	800ca72 <__hexnan+0x7e>
 800ca40:	9b02      	ldr	r3, [sp, #8]
 800ca42:	459b      	cmp	fp, r3
 800ca44:	dd13      	ble.n	800ca6e <__hexnan+0x7a>
 800ca46:	454c      	cmp	r4, r9
 800ca48:	d206      	bcs.n	800ca58 <__hexnan+0x64>
 800ca4a:	2d07      	cmp	r5, #7
 800ca4c:	dc04      	bgt.n	800ca58 <__hexnan+0x64>
 800ca4e:	462a      	mov	r2, r5
 800ca50:	4649      	mov	r1, r9
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7ff ffa8 	bl	800c9a8 <L_shift>
 800ca58:	4544      	cmp	r4, r8
 800ca5a:	d950      	bls.n	800cafe <__hexnan+0x10a>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	f1a4 0904 	sub.w	r9, r4, #4
 800ca62:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca66:	f8cd b008 	str.w	fp, [sp, #8]
 800ca6a:	464c      	mov	r4, r9
 800ca6c:	461d      	mov	r5, r3
 800ca6e:	9903      	ldr	r1, [sp, #12]
 800ca70:	e7d7      	b.n	800ca22 <__hexnan+0x2e>
 800ca72:	2a29      	cmp	r2, #41	; 0x29
 800ca74:	d155      	bne.n	800cb22 <__hexnan+0x12e>
 800ca76:	3102      	adds	r1, #2
 800ca78:	f8ca 1000 	str.w	r1, [sl]
 800ca7c:	f1bb 0f00 	cmp.w	fp, #0
 800ca80:	d04f      	beq.n	800cb22 <__hexnan+0x12e>
 800ca82:	454c      	cmp	r4, r9
 800ca84:	d206      	bcs.n	800ca94 <__hexnan+0xa0>
 800ca86:	2d07      	cmp	r5, #7
 800ca88:	dc04      	bgt.n	800ca94 <__hexnan+0xa0>
 800ca8a:	462a      	mov	r2, r5
 800ca8c:	4649      	mov	r1, r9
 800ca8e:	4620      	mov	r0, r4
 800ca90:	f7ff ff8a 	bl	800c9a8 <L_shift>
 800ca94:	4544      	cmp	r4, r8
 800ca96:	d934      	bls.n	800cb02 <__hexnan+0x10e>
 800ca98:	f1a8 0204 	sub.w	r2, r8, #4
 800ca9c:	4623      	mov	r3, r4
 800ca9e:	f853 1b04 	ldr.w	r1, [r3], #4
 800caa2:	f842 1f04 	str.w	r1, [r2, #4]!
 800caa6:	429f      	cmp	r7, r3
 800caa8:	d2f9      	bcs.n	800ca9e <__hexnan+0xaa>
 800caaa:	1b3b      	subs	r3, r7, r4
 800caac:	f023 0303 	bic.w	r3, r3, #3
 800cab0:	3304      	adds	r3, #4
 800cab2:	3e03      	subs	r6, #3
 800cab4:	3401      	adds	r4, #1
 800cab6:	42a6      	cmp	r6, r4
 800cab8:	bf38      	it	cc
 800caba:	2304      	movcc	r3, #4
 800cabc:	4443      	add	r3, r8
 800cabe:	2200      	movs	r2, #0
 800cac0:	f843 2b04 	str.w	r2, [r3], #4
 800cac4:	429f      	cmp	r7, r3
 800cac6:	d2fb      	bcs.n	800cac0 <__hexnan+0xcc>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	b91b      	cbnz	r3, 800cad4 <__hexnan+0xe0>
 800cacc:	4547      	cmp	r7, r8
 800cace:	d126      	bne.n	800cb1e <__hexnan+0x12a>
 800cad0:	2301      	movs	r3, #1
 800cad2:	603b      	str	r3, [r7, #0]
 800cad4:	2005      	movs	r0, #5
 800cad6:	e025      	b.n	800cb24 <__hexnan+0x130>
 800cad8:	3501      	adds	r5, #1
 800cada:	2d08      	cmp	r5, #8
 800cadc:	f10b 0b01 	add.w	fp, fp, #1
 800cae0:	dd06      	ble.n	800caf0 <__hexnan+0xfc>
 800cae2:	4544      	cmp	r4, r8
 800cae4:	d9c3      	bls.n	800ca6e <__hexnan+0x7a>
 800cae6:	2300      	movs	r3, #0
 800cae8:	f844 3c04 	str.w	r3, [r4, #-4]
 800caec:	2501      	movs	r5, #1
 800caee:	3c04      	subs	r4, #4
 800caf0:	6822      	ldr	r2, [r4, #0]
 800caf2:	f000 000f 	and.w	r0, r0, #15
 800caf6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cafa:	6020      	str	r0, [r4, #0]
 800cafc:	e7b7      	b.n	800ca6e <__hexnan+0x7a>
 800cafe:	2508      	movs	r5, #8
 800cb00:	e7b5      	b.n	800ca6e <__hexnan+0x7a>
 800cb02:	9b01      	ldr	r3, [sp, #4]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d0df      	beq.n	800cac8 <__hexnan+0xd4>
 800cb08:	f1c3 0320 	rsb	r3, r3, #32
 800cb0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb10:	40da      	lsrs	r2, r3
 800cb12:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cb16:	4013      	ands	r3, r2
 800cb18:	f846 3c04 	str.w	r3, [r6, #-4]
 800cb1c:	e7d4      	b.n	800cac8 <__hexnan+0xd4>
 800cb1e:	3f04      	subs	r7, #4
 800cb20:	e7d2      	b.n	800cac8 <__hexnan+0xd4>
 800cb22:	2004      	movs	r0, #4
 800cb24:	b007      	add	sp, #28
 800cb26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb2a <__ssputs_r>:
 800cb2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb2e:	688e      	ldr	r6, [r1, #8]
 800cb30:	461f      	mov	r7, r3
 800cb32:	42be      	cmp	r6, r7
 800cb34:	680b      	ldr	r3, [r1, #0]
 800cb36:	4682      	mov	sl, r0
 800cb38:	460c      	mov	r4, r1
 800cb3a:	4690      	mov	r8, r2
 800cb3c:	d82c      	bhi.n	800cb98 <__ssputs_r+0x6e>
 800cb3e:	898a      	ldrh	r2, [r1, #12]
 800cb40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb44:	d026      	beq.n	800cb94 <__ssputs_r+0x6a>
 800cb46:	6965      	ldr	r5, [r4, #20]
 800cb48:	6909      	ldr	r1, [r1, #16]
 800cb4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb4e:	eba3 0901 	sub.w	r9, r3, r1
 800cb52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb56:	1c7b      	adds	r3, r7, #1
 800cb58:	444b      	add	r3, r9
 800cb5a:	106d      	asrs	r5, r5, #1
 800cb5c:	429d      	cmp	r5, r3
 800cb5e:	bf38      	it	cc
 800cb60:	461d      	movcc	r5, r3
 800cb62:	0553      	lsls	r3, r2, #21
 800cb64:	d527      	bpl.n	800cbb6 <__ssputs_r+0x8c>
 800cb66:	4629      	mov	r1, r5
 800cb68:	f000 faa4 	bl	800d0b4 <_malloc_r>
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	b360      	cbz	r0, 800cbca <__ssputs_r+0xa0>
 800cb70:	6921      	ldr	r1, [r4, #16]
 800cb72:	464a      	mov	r2, r9
 800cb74:	f7fe fd9d 	bl	800b6b2 <memcpy>
 800cb78:	89a3      	ldrh	r3, [r4, #12]
 800cb7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb82:	81a3      	strh	r3, [r4, #12]
 800cb84:	6126      	str	r6, [r4, #16]
 800cb86:	6165      	str	r5, [r4, #20]
 800cb88:	444e      	add	r6, r9
 800cb8a:	eba5 0509 	sub.w	r5, r5, r9
 800cb8e:	6026      	str	r6, [r4, #0]
 800cb90:	60a5      	str	r5, [r4, #8]
 800cb92:	463e      	mov	r6, r7
 800cb94:	42be      	cmp	r6, r7
 800cb96:	d900      	bls.n	800cb9a <__ssputs_r+0x70>
 800cb98:	463e      	mov	r6, r7
 800cb9a:	6820      	ldr	r0, [r4, #0]
 800cb9c:	4632      	mov	r2, r6
 800cb9e:	4641      	mov	r1, r8
 800cba0:	f001 f9e9 	bl	800df76 <memmove>
 800cba4:	68a3      	ldr	r3, [r4, #8]
 800cba6:	1b9b      	subs	r3, r3, r6
 800cba8:	60a3      	str	r3, [r4, #8]
 800cbaa:	6823      	ldr	r3, [r4, #0]
 800cbac:	4433      	add	r3, r6
 800cbae:	6023      	str	r3, [r4, #0]
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb6:	462a      	mov	r2, r5
 800cbb8:	f001 f875 	bl	800dca6 <_realloc_r>
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d1e0      	bne.n	800cb84 <__ssputs_r+0x5a>
 800cbc2:	6921      	ldr	r1, [r4, #16]
 800cbc4:	4650      	mov	r0, sl
 800cbc6:	f7ff fc0d 	bl	800c3e4 <_free_r>
 800cbca:	230c      	movs	r3, #12
 800cbcc:	f8ca 3000 	str.w	r3, [sl]
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbd6:	81a3      	strh	r3, [r4, #12]
 800cbd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbdc:	e7e9      	b.n	800cbb2 <__ssputs_r+0x88>
	...

0800cbe0 <_svfiprintf_r>:
 800cbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe4:	4698      	mov	r8, r3
 800cbe6:	898b      	ldrh	r3, [r1, #12]
 800cbe8:	061b      	lsls	r3, r3, #24
 800cbea:	b09d      	sub	sp, #116	; 0x74
 800cbec:	4607      	mov	r7, r0
 800cbee:	460d      	mov	r5, r1
 800cbf0:	4614      	mov	r4, r2
 800cbf2:	d50e      	bpl.n	800cc12 <_svfiprintf_r+0x32>
 800cbf4:	690b      	ldr	r3, [r1, #16]
 800cbf6:	b963      	cbnz	r3, 800cc12 <_svfiprintf_r+0x32>
 800cbf8:	2140      	movs	r1, #64	; 0x40
 800cbfa:	f000 fa5b 	bl	800d0b4 <_malloc_r>
 800cbfe:	6028      	str	r0, [r5, #0]
 800cc00:	6128      	str	r0, [r5, #16]
 800cc02:	b920      	cbnz	r0, 800cc0e <_svfiprintf_r+0x2e>
 800cc04:	230c      	movs	r3, #12
 800cc06:	603b      	str	r3, [r7, #0]
 800cc08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc0c:	e0d0      	b.n	800cdb0 <_svfiprintf_r+0x1d0>
 800cc0e:	2340      	movs	r3, #64	; 0x40
 800cc10:	616b      	str	r3, [r5, #20]
 800cc12:	2300      	movs	r3, #0
 800cc14:	9309      	str	r3, [sp, #36]	; 0x24
 800cc16:	2320      	movs	r3, #32
 800cc18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc20:	2330      	movs	r3, #48	; 0x30
 800cc22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cdc8 <_svfiprintf_r+0x1e8>
 800cc26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc2a:	f04f 0901 	mov.w	r9, #1
 800cc2e:	4623      	mov	r3, r4
 800cc30:	469a      	mov	sl, r3
 800cc32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc36:	b10a      	cbz	r2, 800cc3c <_svfiprintf_r+0x5c>
 800cc38:	2a25      	cmp	r2, #37	; 0x25
 800cc3a:	d1f9      	bne.n	800cc30 <_svfiprintf_r+0x50>
 800cc3c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc40:	d00b      	beq.n	800cc5a <_svfiprintf_r+0x7a>
 800cc42:	465b      	mov	r3, fp
 800cc44:	4622      	mov	r2, r4
 800cc46:	4629      	mov	r1, r5
 800cc48:	4638      	mov	r0, r7
 800cc4a:	f7ff ff6e 	bl	800cb2a <__ssputs_r>
 800cc4e:	3001      	adds	r0, #1
 800cc50:	f000 80a9 	beq.w	800cda6 <_svfiprintf_r+0x1c6>
 800cc54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc56:	445a      	add	r2, fp
 800cc58:	9209      	str	r2, [sp, #36]	; 0x24
 800cc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f000 80a1 	beq.w	800cda6 <_svfiprintf_r+0x1c6>
 800cc64:	2300      	movs	r3, #0
 800cc66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc6e:	f10a 0a01 	add.w	sl, sl, #1
 800cc72:	9304      	str	r3, [sp, #16]
 800cc74:	9307      	str	r3, [sp, #28]
 800cc76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc7a:	931a      	str	r3, [sp, #104]	; 0x68
 800cc7c:	4654      	mov	r4, sl
 800cc7e:	2205      	movs	r2, #5
 800cc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc84:	4850      	ldr	r0, [pc, #320]	; (800cdc8 <_svfiprintf_r+0x1e8>)
 800cc86:	f7f3 faa3 	bl	80001d0 <memchr>
 800cc8a:	9a04      	ldr	r2, [sp, #16]
 800cc8c:	b9d8      	cbnz	r0, 800ccc6 <_svfiprintf_r+0xe6>
 800cc8e:	06d0      	lsls	r0, r2, #27
 800cc90:	bf44      	itt	mi
 800cc92:	2320      	movmi	r3, #32
 800cc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc98:	0711      	lsls	r1, r2, #28
 800cc9a:	bf44      	itt	mi
 800cc9c:	232b      	movmi	r3, #43	; 0x2b
 800cc9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cca2:	f89a 3000 	ldrb.w	r3, [sl]
 800cca6:	2b2a      	cmp	r3, #42	; 0x2a
 800cca8:	d015      	beq.n	800ccd6 <_svfiprintf_r+0xf6>
 800ccaa:	9a07      	ldr	r2, [sp, #28]
 800ccac:	4654      	mov	r4, sl
 800ccae:	2000      	movs	r0, #0
 800ccb0:	f04f 0c0a 	mov.w	ip, #10
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccba:	3b30      	subs	r3, #48	; 0x30
 800ccbc:	2b09      	cmp	r3, #9
 800ccbe:	d94d      	bls.n	800cd5c <_svfiprintf_r+0x17c>
 800ccc0:	b1b0      	cbz	r0, 800ccf0 <_svfiprintf_r+0x110>
 800ccc2:	9207      	str	r2, [sp, #28]
 800ccc4:	e014      	b.n	800ccf0 <_svfiprintf_r+0x110>
 800ccc6:	eba0 0308 	sub.w	r3, r0, r8
 800ccca:	fa09 f303 	lsl.w	r3, r9, r3
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	9304      	str	r3, [sp, #16]
 800ccd2:	46a2      	mov	sl, r4
 800ccd4:	e7d2      	b.n	800cc7c <_svfiprintf_r+0x9c>
 800ccd6:	9b03      	ldr	r3, [sp, #12]
 800ccd8:	1d19      	adds	r1, r3, #4
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	9103      	str	r1, [sp, #12]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	bfbb      	ittet	lt
 800cce2:	425b      	neglt	r3, r3
 800cce4:	f042 0202 	orrlt.w	r2, r2, #2
 800cce8:	9307      	strge	r3, [sp, #28]
 800ccea:	9307      	strlt	r3, [sp, #28]
 800ccec:	bfb8      	it	lt
 800ccee:	9204      	strlt	r2, [sp, #16]
 800ccf0:	7823      	ldrb	r3, [r4, #0]
 800ccf2:	2b2e      	cmp	r3, #46	; 0x2e
 800ccf4:	d10c      	bne.n	800cd10 <_svfiprintf_r+0x130>
 800ccf6:	7863      	ldrb	r3, [r4, #1]
 800ccf8:	2b2a      	cmp	r3, #42	; 0x2a
 800ccfa:	d134      	bne.n	800cd66 <_svfiprintf_r+0x186>
 800ccfc:	9b03      	ldr	r3, [sp, #12]
 800ccfe:	1d1a      	adds	r2, r3, #4
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	9203      	str	r2, [sp, #12]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	bfb8      	it	lt
 800cd08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cd0c:	3402      	adds	r4, #2
 800cd0e:	9305      	str	r3, [sp, #20]
 800cd10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cdd8 <_svfiprintf_r+0x1f8>
 800cd14:	7821      	ldrb	r1, [r4, #0]
 800cd16:	2203      	movs	r2, #3
 800cd18:	4650      	mov	r0, sl
 800cd1a:	f7f3 fa59 	bl	80001d0 <memchr>
 800cd1e:	b138      	cbz	r0, 800cd30 <_svfiprintf_r+0x150>
 800cd20:	9b04      	ldr	r3, [sp, #16]
 800cd22:	eba0 000a 	sub.w	r0, r0, sl
 800cd26:	2240      	movs	r2, #64	; 0x40
 800cd28:	4082      	lsls	r2, r0
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	3401      	adds	r4, #1
 800cd2e:	9304      	str	r3, [sp, #16]
 800cd30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd34:	4825      	ldr	r0, [pc, #148]	; (800cdcc <_svfiprintf_r+0x1ec>)
 800cd36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd3a:	2206      	movs	r2, #6
 800cd3c:	f7f3 fa48 	bl	80001d0 <memchr>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d038      	beq.n	800cdb6 <_svfiprintf_r+0x1d6>
 800cd44:	4b22      	ldr	r3, [pc, #136]	; (800cdd0 <_svfiprintf_r+0x1f0>)
 800cd46:	bb1b      	cbnz	r3, 800cd90 <_svfiprintf_r+0x1b0>
 800cd48:	9b03      	ldr	r3, [sp, #12]
 800cd4a:	3307      	adds	r3, #7
 800cd4c:	f023 0307 	bic.w	r3, r3, #7
 800cd50:	3308      	adds	r3, #8
 800cd52:	9303      	str	r3, [sp, #12]
 800cd54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd56:	4433      	add	r3, r6
 800cd58:	9309      	str	r3, [sp, #36]	; 0x24
 800cd5a:	e768      	b.n	800cc2e <_svfiprintf_r+0x4e>
 800cd5c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd60:	460c      	mov	r4, r1
 800cd62:	2001      	movs	r0, #1
 800cd64:	e7a6      	b.n	800ccb4 <_svfiprintf_r+0xd4>
 800cd66:	2300      	movs	r3, #0
 800cd68:	3401      	adds	r4, #1
 800cd6a:	9305      	str	r3, [sp, #20]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	f04f 0c0a 	mov.w	ip, #10
 800cd72:	4620      	mov	r0, r4
 800cd74:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd78:	3a30      	subs	r2, #48	; 0x30
 800cd7a:	2a09      	cmp	r2, #9
 800cd7c:	d903      	bls.n	800cd86 <_svfiprintf_r+0x1a6>
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d0c6      	beq.n	800cd10 <_svfiprintf_r+0x130>
 800cd82:	9105      	str	r1, [sp, #20]
 800cd84:	e7c4      	b.n	800cd10 <_svfiprintf_r+0x130>
 800cd86:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e7f0      	b.n	800cd72 <_svfiprintf_r+0x192>
 800cd90:	ab03      	add	r3, sp, #12
 800cd92:	9300      	str	r3, [sp, #0]
 800cd94:	462a      	mov	r2, r5
 800cd96:	4b0f      	ldr	r3, [pc, #60]	; (800cdd4 <_svfiprintf_r+0x1f4>)
 800cd98:	a904      	add	r1, sp, #16
 800cd9a:	4638      	mov	r0, r7
 800cd9c:	f7fc fde6 	bl	800996c <_printf_float>
 800cda0:	1c42      	adds	r2, r0, #1
 800cda2:	4606      	mov	r6, r0
 800cda4:	d1d6      	bne.n	800cd54 <_svfiprintf_r+0x174>
 800cda6:	89ab      	ldrh	r3, [r5, #12]
 800cda8:	065b      	lsls	r3, r3, #25
 800cdaa:	f53f af2d 	bmi.w	800cc08 <_svfiprintf_r+0x28>
 800cdae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdb0:	b01d      	add	sp, #116	; 0x74
 800cdb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb6:	ab03      	add	r3, sp, #12
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	462a      	mov	r2, r5
 800cdbc:	4b05      	ldr	r3, [pc, #20]	; (800cdd4 <_svfiprintf_r+0x1f4>)
 800cdbe:	a904      	add	r1, sp, #16
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	f7fd f877 	bl	8009eb4 <_printf_i>
 800cdc6:	e7eb      	b.n	800cda0 <_svfiprintf_r+0x1c0>
 800cdc8:	0800f7c6 	.word	0x0800f7c6
 800cdcc:	0800f7d0 	.word	0x0800f7d0
 800cdd0:	0800996d 	.word	0x0800996d
 800cdd4:	0800cb2b 	.word	0x0800cb2b
 800cdd8:	0800f7cc 	.word	0x0800f7cc

0800cddc <__sfputc_r>:
 800cddc:	6893      	ldr	r3, [r2, #8]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	b410      	push	{r4}
 800cde4:	6093      	str	r3, [r2, #8]
 800cde6:	da08      	bge.n	800cdfa <__sfputc_r+0x1e>
 800cde8:	6994      	ldr	r4, [r2, #24]
 800cdea:	42a3      	cmp	r3, r4
 800cdec:	db01      	blt.n	800cdf2 <__sfputc_r+0x16>
 800cdee:	290a      	cmp	r1, #10
 800cdf0:	d103      	bne.n	800cdfa <__sfputc_r+0x1e>
 800cdf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cdf6:	f000 bf85 	b.w	800dd04 <__swbuf_r>
 800cdfa:	6813      	ldr	r3, [r2, #0]
 800cdfc:	1c58      	adds	r0, r3, #1
 800cdfe:	6010      	str	r0, [r2, #0]
 800ce00:	7019      	strb	r1, [r3, #0]
 800ce02:	4608      	mov	r0, r1
 800ce04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <__sfputs_r>:
 800ce0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0c:	4606      	mov	r6, r0
 800ce0e:	460f      	mov	r7, r1
 800ce10:	4614      	mov	r4, r2
 800ce12:	18d5      	adds	r5, r2, r3
 800ce14:	42ac      	cmp	r4, r5
 800ce16:	d101      	bne.n	800ce1c <__sfputs_r+0x12>
 800ce18:	2000      	movs	r0, #0
 800ce1a:	e007      	b.n	800ce2c <__sfputs_r+0x22>
 800ce1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce20:	463a      	mov	r2, r7
 800ce22:	4630      	mov	r0, r6
 800ce24:	f7ff ffda 	bl	800cddc <__sfputc_r>
 800ce28:	1c43      	adds	r3, r0, #1
 800ce2a:	d1f3      	bne.n	800ce14 <__sfputs_r+0xa>
 800ce2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce30 <_vfiprintf_r>:
 800ce30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce34:	460d      	mov	r5, r1
 800ce36:	b09d      	sub	sp, #116	; 0x74
 800ce38:	4614      	mov	r4, r2
 800ce3a:	4698      	mov	r8, r3
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	b118      	cbz	r0, 800ce48 <_vfiprintf_r+0x18>
 800ce40:	6a03      	ldr	r3, [r0, #32]
 800ce42:	b90b      	cbnz	r3, 800ce48 <_vfiprintf_r+0x18>
 800ce44:	f7fd fc58 	bl	800a6f8 <__sinit>
 800ce48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce4a:	07d9      	lsls	r1, r3, #31
 800ce4c:	d405      	bmi.n	800ce5a <_vfiprintf_r+0x2a>
 800ce4e:	89ab      	ldrh	r3, [r5, #12]
 800ce50:	059a      	lsls	r2, r3, #22
 800ce52:	d402      	bmi.n	800ce5a <_vfiprintf_r+0x2a>
 800ce54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce56:	f7fe fc2a 	bl	800b6ae <__retarget_lock_acquire_recursive>
 800ce5a:	89ab      	ldrh	r3, [r5, #12]
 800ce5c:	071b      	lsls	r3, r3, #28
 800ce5e:	d501      	bpl.n	800ce64 <_vfiprintf_r+0x34>
 800ce60:	692b      	ldr	r3, [r5, #16]
 800ce62:	b99b      	cbnz	r3, 800ce8c <_vfiprintf_r+0x5c>
 800ce64:	4629      	mov	r1, r5
 800ce66:	4630      	mov	r0, r6
 800ce68:	f000 ff8a 	bl	800dd80 <__swsetup_r>
 800ce6c:	b170      	cbz	r0, 800ce8c <_vfiprintf_r+0x5c>
 800ce6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce70:	07dc      	lsls	r4, r3, #31
 800ce72:	d504      	bpl.n	800ce7e <_vfiprintf_r+0x4e>
 800ce74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce78:	b01d      	add	sp, #116	; 0x74
 800ce7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce7e:	89ab      	ldrh	r3, [r5, #12]
 800ce80:	0598      	lsls	r0, r3, #22
 800ce82:	d4f7      	bmi.n	800ce74 <_vfiprintf_r+0x44>
 800ce84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce86:	f7fe fc13 	bl	800b6b0 <__retarget_lock_release_recursive>
 800ce8a:	e7f3      	b.n	800ce74 <_vfiprintf_r+0x44>
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce90:	2320      	movs	r3, #32
 800ce92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce9a:	2330      	movs	r3, #48	; 0x30
 800ce9c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d050 <_vfiprintf_r+0x220>
 800cea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cea4:	f04f 0901 	mov.w	r9, #1
 800cea8:	4623      	mov	r3, r4
 800ceaa:	469a      	mov	sl, r3
 800ceac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ceb0:	b10a      	cbz	r2, 800ceb6 <_vfiprintf_r+0x86>
 800ceb2:	2a25      	cmp	r2, #37	; 0x25
 800ceb4:	d1f9      	bne.n	800ceaa <_vfiprintf_r+0x7a>
 800ceb6:	ebba 0b04 	subs.w	fp, sl, r4
 800ceba:	d00b      	beq.n	800ced4 <_vfiprintf_r+0xa4>
 800cebc:	465b      	mov	r3, fp
 800cebe:	4622      	mov	r2, r4
 800cec0:	4629      	mov	r1, r5
 800cec2:	4630      	mov	r0, r6
 800cec4:	f7ff ffa1 	bl	800ce0a <__sfputs_r>
 800cec8:	3001      	adds	r0, #1
 800ceca:	f000 80a9 	beq.w	800d020 <_vfiprintf_r+0x1f0>
 800cece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ced0:	445a      	add	r2, fp
 800ced2:	9209      	str	r2, [sp, #36]	; 0x24
 800ced4:	f89a 3000 	ldrb.w	r3, [sl]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	f000 80a1 	beq.w	800d020 <_vfiprintf_r+0x1f0>
 800cede:	2300      	movs	r3, #0
 800cee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cee8:	f10a 0a01 	add.w	sl, sl, #1
 800ceec:	9304      	str	r3, [sp, #16]
 800ceee:	9307      	str	r3, [sp, #28]
 800cef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cef4:	931a      	str	r3, [sp, #104]	; 0x68
 800cef6:	4654      	mov	r4, sl
 800cef8:	2205      	movs	r2, #5
 800cefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cefe:	4854      	ldr	r0, [pc, #336]	; (800d050 <_vfiprintf_r+0x220>)
 800cf00:	f7f3 f966 	bl	80001d0 <memchr>
 800cf04:	9a04      	ldr	r2, [sp, #16]
 800cf06:	b9d8      	cbnz	r0, 800cf40 <_vfiprintf_r+0x110>
 800cf08:	06d1      	lsls	r1, r2, #27
 800cf0a:	bf44      	itt	mi
 800cf0c:	2320      	movmi	r3, #32
 800cf0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf12:	0713      	lsls	r3, r2, #28
 800cf14:	bf44      	itt	mi
 800cf16:	232b      	movmi	r3, #43	; 0x2b
 800cf18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf20:	2b2a      	cmp	r3, #42	; 0x2a
 800cf22:	d015      	beq.n	800cf50 <_vfiprintf_r+0x120>
 800cf24:	9a07      	ldr	r2, [sp, #28]
 800cf26:	4654      	mov	r4, sl
 800cf28:	2000      	movs	r0, #0
 800cf2a:	f04f 0c0a 	mov.w	ip, #10
 800cf2e:	4621      	mov	r1, r4
 800cf30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf34:	3b30      	subs	r3, #48	; 0x30
 800cf36:	2b09      	cmp	r3, #9
 800cf38:	d94d      	bls.n	800cfd6 <_vfiprintf_r+0x1a6>
 800cf3a:	b1b0      	cbz	r0, 800cf6a <_vfiprintf_r+0x13a>
 800cf3c:	9207      	str	r2, [sp, #28]
 800cf3e:	e014      	b.n	800cf6a <_vfiprintf_r+0x13a>
 800cf40:	eba0 0308 	sub.w	r3, r0, r8
 800cf44:	fa09 f303 	lsl.w	r3, r9, r3
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	9304      	str	r3, [sp, #16]
 800cf4c:	46a2      	mov	sl, r4
 800cf4e:	e7d2      	b.n	800cef6 <_vfiprintf_r+0xc6>
 800cf50:	9b03      	ldr	r3, [sp, #12]
 800cf52:	1d19      	adds	r1, r3, #4
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	9103      	str	r1, [sp, #12]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	bfbb      	ittet	lt
 800cf5c:	425b      	neglt	r3, r3
 800cf5e:	f042 0202 	orrlt.w	r2, r2, #2
 800cf62:	9307      	strge	r3, [sp, #28]
 800cf64:	9307      	strlt	r3, [sp, #28]
 800cf66:	bfb8      	it	lt
 800cf68:	9204      	strlt	r2, [sp, #16]
 800cf6a:	7823      	ldrb	r3, [r4, #0]
 800cf6c:	2b2e      	cmp	r3, #46	; 0x2e
 800cf6e:	d10c      	bne.n	800cf8a <_vfiprintf_r+0x15a>
 800cf70:	7863      	ldrb	r3, [r4, #1]
 800cf72:	2b2a      	cmp	r3, #42	; 0x2a
 800cf74:	d134      	bne.n	800cfe0 <_vfiprintf_r+0x1b0>
 800cf76:	9b03      	ldr	r3, [sp, #12]
 800cf78:	1d1a      	adds	r2, r3, #4
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	9203      	str	r2, [sp, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	bfb8      	it	lt
 800cf82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf86:	3402      	adds	r4, #2
 800cf88:	9305      	str	r3, [sp, #20]
 800cf8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d060 <_vfiprintf_r+0x230>
 800cf8e:	7821      	ldrb	r1, [r4, #0]
 800cf90:	2203      	movs	r2, #3
 800cf92:	4650      	mov	r0, sl
 800cf94:	f7f3 f91c 	bl	80001d0 <memchr>
 800cf98:	b138      	cbz	r0, 800cfaa <_vfiprintf_r+0x17a>
 800cf9a:	9b04      	ldr	r3, [sp, #16]
 800cf9c:	eba0 000a 	sub.w	r0, r0, sl
 800cfa0:	2240      	movs	r2, #64	; 0x40
 800cfa2:	4082      	lsls	r2, r0
 800cfa4:	4313      	orrs	r3, r2
 800cfa6:	3401      	adds	r4, #1
 800cfa8:	9304      	str	r3, [sp, #16]
 800cfaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfae:	4829      	ldr	r0, [pc, #164]	; (800d054 <_vfiprintf_r+0x224>)
 800cfb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfb4:	2206      	movs	r2, #6
 800cfb6:	f7f3 f90b 	bl	80001d0 <memchr>
 800cfba:	2800      	cmp	r0, #0
 800cfbc:	d03f      	beq.n	800d03e <_vfiprintf_r+0x20e>
 800cfbe:	4b26      	ldr	r3, [pc, #152]	; (800d058 <_vfiprintf_r+0x228>)
 800cfc0:	bb1b      	cbnz	r3, 800d00a <_vfiprintf_r+0x1da>
 800cfc2:	9b03      	ldr	r3, [sp, #12]
 800cfc4:	3307      	adds	r3, #7
 800cfc6:	f023 0307 	bic.w	r3, r3, #7
 800cfca:	3308      	adds	r3, #8
 800cfcc:	9303      	str	r3, [sp, #12]
 800cfce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd0:	443b      	add	r3, r7
 800cfd2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfd4:	e768      	b.n	800cea8 <_vfiprintf_r+0x78>
 800cfd6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfda:	460c      	mov	r4, r1
 800cfdc:	2001      	movs	r0, #1
 800cfde:	e7a6      	b.n	800cf2e <_vfiprintf_r+0xfe>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	3401      	adds	r4, #1
 800cfe4:	9305      	str	r3, [sp, #20]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	f04f 0c0a 	mov.w	ip, #10
 800cfec:	4620      	mov	r0, r4
 800cfee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cff2:	3a30      	subs	r2, #48	; 0x30
 800cff4:	2a09      	cmp	r2, #9
 800cff6:	d903      	bls.n	800d000 <_vfiprintf_r+0x1d0>
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d0c6      	beq.n	800cf8a <_vfiprintf_r+0x15a>
 800cffc:	9105      	str	r1, [sp, #20]
 800cffe:	e7c4      	b.n	800cf8a <_vfiprintf_r+0x15a>
 800d000:	fb0c 2101 	mla	r1, ip, r1, r2
 800d004:	4604      	mov	r4, r0
 800d006:	2301      	movs	r3, #1
 800d008:	e7f0      	b.n	800cfec <_vfiprintf_r+0x1bc>
 800d00a:	ab03      	add	r3, sp, #12
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	462a      	mov	r2, r5
 800d010:	4b12      	ldr	r3, [pc, #72]	; (800d05c <_vfiprintf_r+0x22c>)
 800d012:	a904      	add	r1, sp, #16
 800d014:	4630      	mov	r0, r6
 800d016:	f7fc fca9 	bl	800996c <_printf_float>
 800d01a:	4607      	mov	r7, r0
 800d01c:	1c78      	adds	r0, r7, #1
 800d01e:	d1d6      	bne.n	800cfce <_vfiprintf_r+0x19e>
 800d020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d022:	07d9      	lsls	r1, r3, #31
 800d024:	d405      	bmi.n	800d032 <_vfiprintf_r+0x202>
 800d026:	89ab      	ldrh	r3, [r5, #12]
 800d028:	059a      	lsls	r2, r3, #22
 800d02a:	d402      	bmi.n	800d032 <_vfiprintf_r+0x202>
 800d02c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d02e:	f7fe fb3f 	bl	800b6b0 <__retarget_lock_release_recursive>
 800d032:	89ab      	ldrh	r3, [r5, #12]
 800d034:	065b      	lsls	r3, r3, #25
 800d036:	f53f af1d 	bmi.w	800ce74 <_vfiprintf_r+0x44>
 800d03a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d03c:	e71c      	b.n	800ce78 <_vfiprintf_r+0x48>
 800d03e:	ab03      	add	r3, sp, #12
 800d040:	9300      	str	r3, [sp, #0]
 800d042:	462a      	mov	r2, r5
 800d044:	4b05      	ldr	r3, [pc, #20]	; (800d05c <_vfiprintf_r+0x22c>)
 800d046:	a904      	add	r1, sp, #16
 800d048:	4630      	mov	r0, r6
 800d04a:	f7fc ff33 	bl	8009eb4 <_printf_i>
 800d04e:	e7e4      	b.n	800d01a <_vfiprintf_r+0x1ea>
 800d050:	0800f7c6 	.word	0x0800f7c6
 800d054:	0800f7d0 	.word	0x0800f7d0
 800d058:	0800996d 	.word	0x0800996d
 800d05c:	0800ce0b 	.word	0x0800ce0b
 800d060:	0800f7cc 	.word	0x0800f7cc

0800d064 <malloc>:
 800d064:	4b02      	ldr	r3, [pc, #8]	; (800d070 <malloc+0xc>)
 800d066:	4601      	mov	r1, r0
 800d068:	6818      	ldr	r0, [r3, #0]
 800d06a:	f000 b823 	b.w	800d0b4 <_malloc_r>
 800d06e:	bf00      	nop
 800d070:	200001fc 	.word	0x200001fc

0800d074 <sbrk_aligned>:
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	4e0e      	ldr	r6, [pc, #56]	; (800d0b0 <sbrk_aligned+0x3c>)
 800d078:	460c      	mov	r4, r1
 800d07a:	6831      	ldr	r1, [r6, #0]
 800d07c:	4605      	mov	r5, r0
 800d07e:	b911      	cbnz	r1, 800d086 <sbrk_aligned+0x12>
 800d080:	f000 ffb6 	bl	800dff0 <_sbrk_r>
 800d084:	6030      	str	r0, [r6, #0]
 800d086:	4621      	mov	r1, r4
 800d088:	4628      	mov	r0, r5
 800d08a:	f000 ffb1 	bl	800dff0 <_sbrk_r>
 800d08e:	1c43      	adds	r3, r0, #1
 800d090:	d00a      	beq.n	800d0a8 <sbrk_aligned+0x34>
 800d092:	1cc4      	adds	r4, r0, #3
 800d094:	f024 0403 	bic.w	r4, r4, #3
 800d098:	42a0      	cmp	r0, r4
 800d09a:	d007      	beq.n	800d0ac <sbrk_aligned+0x38>
 800d09c:	1a21      	subs	r1, r4, r0
 800d09e:	4628      	mov	r0, r5
 800d0a0:	f000 ffa6 	bl	800dff0 <_sbrk_r>
 800d0a4:	3001      	adds	r0, #1
 800d0a6:	d101      	bne.n	800d0ac <sbrk_aligned+0x38>
 800d0a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d0ac:	4620      	mov	r0, r4
 800d0ae:	bd70      	pop	{r4, r5, r6, pc}
 800d0b0:	2000081c 	.word	0x2000081c

0800d0b4 <_malloc_r>:
 800d0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0b8:	1ccd      	adds	r5, r1, #3
 800d0ba:	f025 0503 	bic.w	r5, r5, #3
 800d0be:	3508      	adds	r5, #8
 800d0c0:	2d0c      	cmp	r5, #12
 800d0c2:	bf38      	it	cc
 800d0c4:	250c      	movcc	r5, #12
 800d0c6:	2d00      	cmp	r5, #0
 800d0c8:	4607      	mov	r7, r0
 800d0ca:	db01      	blt.n	800d0d0 <_malloc_r+0x1c>
 800d0cc:	42a9      	cmp	r1, r5
 800d0ce:	d905      	bls.n	800d0dc <_malloc_r+0x28>
 800d0d0:	230c      	movs	r3, #12
 800d0d2:	603b      	str	r3, [r7, #0]
 800d0d4:	2600      	movs	r6, #0
 800d0d6:	4630      	mov	r0, r6
 800d0d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d1b0 <_malloc_r+0xfc>
 800d0e0:	f000 f928 	bl	800d334 <__malloc_lock>
 800d0e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d0e8:	461c      	mov	r4, r3
 800d0ea:	bb5c      	cbnz	r4, 800d144 <_malloc_r+0x90>
 800d0ec:	4629      	mov	r1, r5
 800d0ee:	4638      	mov	r0, r7
 800d0f0:	f7ff ffc0 	bl	800d074 <sbrk_aligned>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	4604      	mov	r4, r0
 800d0f8:	d155      	bne.n	800d1a6 <_malloc_r+0xf2>
 800d0fa:	f8d8 4000 	ldr.w	r4, [r8]
 800d0fe:	4626      	mov	r6, r4
 800d100:	2e00      	cmp	r6, #0
 800d102:	d145      	bne.n	800d190 <_malloc_r+0xdc>
 800d104:	2c00      	cmp	r4, #0
 800d106:	d048      	beq.n	800d19a <_malloc_r+0xe6>
 800d108:	6823      	ldr	r3, [r4, #0]
 800d10a:	4631      	mov	r1, r6
 800d10c:	4638      	mov	r0, r7
 800d10e:	eb04 0903 	add.w	r9, r4, r3
 800d112:	f000 ff6d 	bl	800dff0 <_sbrk_r>
 800d116:	4581      	cmp	r9, r0
 800d118:	d13f      	bne.n	800d19a <_malloc_r+0xe6>
 800d11a:	6821      	ldr	r1, [r4, #0]
 800d11c:	1a6d      	subs	r5, r5, r1
 800d11e:	4629      	mov	r1, r5
 800d120:	4638      	mov	r0, r7
 800d122:	f7ff ffa7 	bl	800d074 <sbrk_aligned>
 800d126:	3001      	adds	r0, #1
 800d128:	d037      	beq.n	800d19a <_malloc_r+0xe6>
 800d12a:	6823      	ldr	r3, [r4, #0]
 800d12c:	442b      	add	r3, r5
 800d12e:	6023      	str	r3, [r4, #0]
 800d130:	f8d8 3000 	ldr.w	r3, [r8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d038      	beq.n	800d1aa <_malloc_r+0xf6>
 800d138:	685a      	ldr	r2, [r3, #4]
 800d13a:	42a2      	cmp	r2, r4
 800d13c:	d12b      	bne.n	800d196 <_malloc_r+0xe2>
 800d13e:	2200      	movs	r2, #0
 800d140:	605a      	str	r2, [r3, #4]
 800d142:	e00f      	b.n	800d164 <_malloc_r+0xb0>
 800d144:	6822      	ldr	r2, [r4, #0]
 800d146:	1b52      	subs	r2, r2, r5
 800d148:	d41f      	bmi.n	800d18a <_malloc_r+0xd6>
 800d14a:	2a0b      	cmp	r2, #11
 800d14c:	d917      	bls.n	800d17e <_malloc_r+0xca>
 800d14e:	1961      	adds	r1, r4, r5
 800d150:	42a3      	cmp	r3, r4
 800d152:	6025      	str	r5, [r4, #0]
 800d154:	bf18      	it	ne
 800d156:	6059      	strne	r1, [r3, #4]
 800d158:	6863      	ldr	r3, [r4, #4]
 800d15a:	bf08      	it	eq
 800d15c:	f8c8 1000 	streq.w	r1, [r8]
 800d160:	5162      	str	r2, [r4, r5]
 800d162:	604b      	str	r3, [r1, #4]
 800d164:	4638      	mov	r0, r7
 800d166:	f104 060b 	add.w	r6, r4, #11
 800d16a:	f000 f8e9 	bl	800d340 <__malloc_unlock>
 800d16e:	f026 0607 	bic.w	r6, r6, #7
 800d172:	1d23      	adds	r3, r4, #4
 800d174:	1af2      	subs	r2, r6, r3
 800d176:	d0ae      	beq.n	800d0d6 <_malloc_r+0x22>
 800d178:	1b9b      	subs	r3, r3, r6
 800d17a:	50a3      	str	r3, [r4, r2]
 800d17c:	e7ab      	b.n	800d0d6 <_malloc_r+0x22>
 800d17e:	42a3      	cmp	r3, r4
 800d180:	6862      	ldr	r2, [r4, #4]
 800d182:	d1dd      	bne.n	800d140 <_malloc_r+0x8c>
 800d184:	f8c8 2000 	str.w	r2, [r8]
 800d188:	e7ec      	b.n	800d164 <_malloc_r+0xb0>
 800d18a:	4623      	mov	r3, r4
 800d18c:	6864      	ldr	r4, [r4, #4]
 800d18e:	e7ac      	b.n	800d0ea <_malloc_r+0x36>
 800d190:	4634      	mov	r4, r6
 800d192:	6876      	ldr	r6, [r6, #4]
 800d194:	e7b4      	b.n	800d100 <_malloc_r+0x4c>
 800d196:	4613      	mov	r3, r2
 800d198:	e7cc      	b.n	800d134 <_malloc_r+0x80>
 800d19a:	230c      	movs	r3, #12
 800d19c:	603b      	str	r3, [r7, #0]
 800d19e:	4638      	mov	r0, r7
 800d1a0:	f000 f8ce 	bl	800d340 <__malloc_unlock>
 800d1a4:	e797      	b.n	800d0d6 <_malloc_r+0x22>
 800d1a6:	6025      	str	r5, [r4, #0]
 800d1a8:	e7dc      	b.n	800d164 <_malloc_r+0xb0>
 800d1aa:	605b      	str	r3, [r3, #4]
 800d1ac:	deff      	udf	#255	; 0xff
 800d1ae:	bf00      	nop
 800d1b0:	20000818 	.word	0x20000818

0800d1b4 <__ascii_mbtowc>:
 800d1b4:	b082      	sub	sp, #8
 800d1b6:	b901      	cbnz	r1, 800d1ba <__ascii_mbtowc+0x6>
 800d1b8:	a901      	add	r1, sp, #4
 800d1ba:	b142      	cbz	r2, 800d1ce <__ascii_mbtowc+0x1a>
 800d1bc:	b14b      	cbz	r3, 800d1d2 <__ascii_mbtowc+0x1e>
 800d1be:	7813      	ldrb	r3, [r2, #0]
 800d1c0:	600b      	str	r3, [r1, #0]
 800d1c2:	7812      	ldrb	r2, [r2, #0]
 800d1c4:	1e10      	subs	r0, r2, #0
 800d1c6:	bf18      	it	ne
 800d1c8:	2001      	movne	r0, #1
 800d1ca:	b002      	add	sp, #8
 800d1cc:	4770      	bx	lr
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	e7fb      	b.n	800d1ca <__ascii_mbtowc+0x16>
 800d1d2:	f06f 0001 	mvn.w	r0, #1
 800d1d6:	e7f8      	b.n	800d1ca <__ascii_mbtowc+0x16>

0800d1d8 <__sflush_r>:
 800d1d8:	898a      	ldrh	r2, [r1, #12]
 800d1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1de:	4605      	mov	r5, r0
 800d1e0:	0710      	lsls	r0, r2, #28
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	d458      	bmi.n	800d298 <__sflush_r+0xc0>
 800d1e6:	684b      	ldr	r3, [r1, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	dc05      	bgt.n	800d1f8 <__sflush_r+0x20>
 800d1ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	dc02      	bgt.n	800d1f8 <__sflush_r+0x20>
 800d1f2:	2000      	movs	r0, #0
 800d1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1fa:	2e00      	cmp	r6, #0
 800d1fc:	d0f9      	beq.n	800d1f2 <__sflush_r+0x1a>
 800d1fe:	2300      	movs	r3, #0
 800d200:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d204:	682f      	ldr	r7, [r5, #0]
 800d206:	6a21      	ldr	r1, [r4, #32]
 800d208:	602b      	str	r3, [r5, #0]
 800d20a:	d032      	beq.n	800d272 <__sflush_r+0x9a>
 800d20c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d20e:	89a3      	ldrh	r3, [r4, #12]
 800d210:	075a      	lsls	r2, r3, #29
 800d212:	d505      	bpl.n	800d220 <__sflush_r+0x48>
 800d214:	6863      	ldr	r3, [r4, #4]
 800d216:	1ac0      	subs	r0, r0, r3
 800d218:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d21a:	b10b      	cbz	r3, 800d220 <__sflush_r+0x48>
 800d21c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d21e:	1ac0      	subs	r0, r0, r3
 800d220:	2300      	movs	r3, #0
 800d222:	4602      	mov	r2, r0
 800d224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d226:	6a21      	ldr	r1, [r4, #32]
 800d228:	4628      	mov	r0, r5
 800d22a:	47b0      	blx	r6
 800d22c:	1c43      	adds	r3, r0, #1
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	d106      	bne.n	800d240 <__sflush_r+0x68>
 800d232:	6829      	ldr	r1, [r5, #0]
 800d234:	291d      	cmp	r1, #29
 800d236:	d82b      	bhi.n	800d290 <__sflush_r+0xb8>
 800d238:	4a29      	ldr	r2, [pc, #164]	; (800d2e0 <__sflush_r+0x108>)
 800d23a:	410a      	asrs	r2, r1
 800d23c:	07d6      	lsls	r6, r2, #31
 800d23e:	d427      	bmi.n	800d290 <__sflush_r+0xb8>
 800d240:	2200      	movs	r2, #0
 800d242:	6062      	str	r2, [r4, #4]
 800d244:	04d9      	lsls	r1, r3, #19
 800d246:	6922      	ldr	r2, [r4, #16]
 800d248:	6022      	str	r2, [r4, #0]
 800d24a:	d504      	bpl.n	800d256 <__sflush_r+0x7e>
 800d24c:	1c42      	adds	r2, r0, #1
 800d24e:	d101      	bne.n	800d254 <__sflush_r+0x7c>
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	b903      	cbnz	r3, 800d256 <__sflush_r+0x7e>
 800d254:	6560      	str	r0, [r4, #84]	; 0x54
 800d256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d258:	602f      	str	r7, [r5, #0]
 800d25a:	2900      	cmp	r1, #0
 800d25c:	d0c9      	beq.n	800d1f2 <__sflush_r+0x1a>
 800d25e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d262:	4299      	cmp	r1, r3
 800d264:	d002      	beq.n	800d26c <__sflush_r+0x94>
 800d266:	4628      	mov	r0, r5
 800d268:	f7ff f8bc 	bl	800c3e4 <_free_r>
 800d26c:	2000      	movs	r0, #0
 800d26e:	6360      	str	r0, [r4, #52]	; 0x34
 800d270:	e7c0      	b.n	800d1f4 <__sflush_r+0x1c>
 800d272:	2301      	movs	r3, #1
 800d274:	4628      	mov	r0, r5
 800d276:	47b0      	blx	r6
 800d278:	1c41      	adds	r1, r0, #1
 800d27a:	d1c8      	bne.n	800d20e <__sflush_r+0x36>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0c5      	beq.n	800d20e <__sflush_r+0x36>
 800d282:	2b1d      	cmp	r3, #29
 800d284:	d001      	beq.n	800d28a <__sflush_r+0xb2>
 800d286:	2b16      	cmp	r3, #22
 800d288:	d101      	bne.n	800d28e <__sflush_r+0xb6>
 800d28a:	602f      	str	r7, [r5, #0]
 800d28c:	e7b1      	b.n	800d1f2 <__sflush_r+0x1a>
 800d28e:	89a3      	ldrh	r3, [r4, #12]
 800d290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d294:	81a3      	strh	r3, [r4, #12]
 800d296:	e7ad      	b.n	800d1f4 <__sflush_r+0x1c>
 800d298:	690f      	ldr	r7, [r1, #16]
 800d29a:	2f00      	cmp	r7, #0
 800d29c:	d0a9      	beq.n	800d1f2 <__sflush_r+0x1a>
 800d29e:	0793      	lsls	r3, r2, #30
 800d2a0:	680e      	ldr	r6, [r1, #0]
 800d2a2:	bf08      	it	eq
 800d2a4:	694b      	ldreq	r3, [r1, #20]
 800d2a6:	600f      	str	r7, [r1, #0]
 800d2a8:	bf18      	it	ne
 800d2aa:	2300      	movne	r3, #0
 800d2ac:	eba6 0807 	sub.w	r8, r6, r7
 800d2b0:	608b      	str	r3, [r1, #8]
 800d2b2:	f1b8 0f00 	cmp.w	r8, #0
 800d2b6:	dd9c      	ble.n	800d1f2 <__sflush_r+0x1a>
 800d2b8:	6a21      	ldr	r1, [r4, #32]
 800d2ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2bc:	4643      	mov	r3, r8
 800d2be:	463a      	mov	r2, r7
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	47b0      	blx	r6
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	dc06      	bgt.n	800d2d6 <__sflush_r+0xfe>
 800d2c8:	89a3      	ldrh	r3, [r4, #12]
 800d2ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2ce:	81a3      	strh	r3, [r4, #12]
 800d2d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2d4:	e78e      	b.n	800d1f4 <__sflush_r+0x1c>
 800d2d6:	4407      	add	r7, r0
 800d2d8:	eba8 0800 	sub.w	r8, r8, r0
 800d2dc:	e7e9      	b.n	800d2b2 <__sflush_r+0xda>
 800d2de:	bf00      	nop
 800d2e0:	dfbffffe 	.word	0xdfbffffe

0800d2e4 <_fflush_r>:
 800d2e4:	b538      	push	{r3, r4, r5, lr}
 800d2e6:	690b      	ldr	r3, [r1, #16]
 800d2e8:	4605      	mov	r5, r0
 800d2ea:	460c      	mov	r4, r1
 800d2ec:	b913      	cbnz	r3, 800d2f4 <_fflush_r+0x10>
 800d2ee:	2500      	movs	r5, #0
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	b118      	cbz	r0, 800d2fe <_fflush_r+0x1a>
 800d2f6:	6a03      	ldr	r3, [r0, #32]
 800d2f8:	b90b      	cbnz	r3, 800d2fe <_fflush_r+0x1a>
 800d2fa:	f7fd f9fd 	bl	800a6f8 <__sinit>
 800d2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0f3      	beq.n	800d2ee <_fflush_r+0xa>
 800d306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d308:	07d0      	lsls	r0, r2, #31
 800d30a:	d404      	bmi.n	800d316 <_fflush_r+0x32>
 800d30c:	0599      	lsls	r1, r3, #22
 800d30e:	d402      	bmi.n	800d316 <_fflush_r+0x32>
 800d310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d312:	f7fe f9cc 	bl	800b6ae <__retarget_lock_acquire_recursive>
 800d316:	4628      	mov	r0, r5
 800d318:	4621      	mov	r1, r4
 800d31a:	f7ff ff5d 	bl	800d1d8 <__sflush_r>
 800d31e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d320:	07da      	lsls	r2, r3, #31
 800d322:	4605      	mov	r5, r0
 800d324:	d4e4      	bmi.n	800d2f0 <_fflush_r+0xc>
 800d326:	89a3      	ldrh	r3, [r4, #12]
 800d328:	059b      	lsls	r3, r3, #22
 800d32a:	d4e1      	bmi.n	800d2f0 <_fflush_r+0xc>
 800d32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d32e:	f7fe f9bf 	bl	800b6b0 <__retarget_lock_release_recursive>
 800d332:	e7dd      	b.n	800d2f0 <_fflush_r+0xc>

0800d334 <__malloc_lock>:
 800d334:	4801      	ldr	r0, [pc, #4]	; (800d33c <__malloc_lock+0x8>)
 800d336:	f7fe b9ba 	b.w	800b6ae <__retarget_lock_acquire_recursive>
 800d33a:	bf00      	nop
 800d33c:	20000814 	.word	0x20000814

0800d340 <__malloc_unlock>:
 800d340:	4801      	ldr	r0, [pc, #4]	; (800d348 <__malloc_unlock+0x8>)
 800d342:	f7fe b9b5 	b.w	800b6b0 <__retarget_lock_release_recursive>
 800d346:	bf00      	nop
 800d348:	20000814 	.word	0x20000814

0800d34c <_Balloc>:
 800d34c:	b570      	push	{r4, r5, r6, lr}
 800d34e:	69c6      	ldr	r6, [r0, #28]
 800d350:	4604      	mov	r4, r0
 800d352:	460d      	mov	r5, r1
 800d354:	b976      	cbnz	r6, 800d374 <_Balloc+0x28>
 800d356:	2010      	movs	r0, #16
 800d358:	f7ff fe84 	bl	800d064 <malloc>
 800d35c:	4602      	mov	r2, r0
 800d35e:	61e0      	str	r0, [r4, #28]
 800d360:	b920      	cbnz	r0, 800d36c <_Balloc+0x20>
 800d362:	4b18      	ldr	r3, [pc, #96]	; (800d3c4 <_Balloc+0x78>)
 800d364:	4818      	ldr	r0, [pc, #96]	; (800d3c8 <_Balloc+0x7c>)
 800d366:	216b      	movs	r1, #107	; 0x6b
 800d368:	f000 fe52 	bl	800e010 <__assert_func>
 800d36c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d370:	6006      	str	r6, [r0, #0]
 800d372:	60c6      	str	r6, [r0, #12]
 800d374:	69e6      	ldr	r6, [r4, #28]
 800d376:	68f3      	ldr	r3, [r6, #12]
 800d378:	b183      	cbz	r3, 800d39c <_Balloc+0x50>
 800d37a:	69e3      	ldr	r3, [r4, #28]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d382:	b9b8      	cbnz	r0, 800d3b4 <_Balloc+0x68>
 800d384:	2101      	movs	r1, #1
 800d386:	fa01 f605 	lsl.w	r6, r1, r5
 800d38a:	1d72      	adds	r2, r6, #5
 800d38c:	0092      	lsls	r2, r2, #2
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 fe5c 	bl	800e04c <_calloc_r>
 800d394:	b160      	cbz	r0, 800d3b0 <_Balloc+0x64>
 800d396:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d39a:	e00e      	b.n	800d3ba <_Balloc+0x6e>
 800d39c:	2221      	movs	r2, #33	; 0x21
 800d39e:	2104      	movs	r1, #4
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	f000 fe53 	bl	800e04c <_calloc_r>
 800d3a6:	69e3      	ldr	r3, [r4, #28]
 800d3a8:	60f0      	str	r0, [r6, #12]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1e4      	bne.n	800d37a <_Balloc+0x2e>
 800d3b0:	2000      	movs	r0, #0
 800d3b2:	bd70      	pop	{r4, r5, r6, pc}
 800d3b4:	6802      	ldr	r2, [r0, #0]
 800d3b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3c0:	e7f7      	b.n	800d3b2 <_Balloc+0x66>
 800d3c2:	bf00      	nop
 800d3c4:	0800f6e6 	.word	0x0800f6e6
 800d3c8:	0800f7d7 	.word	0x0800f7d7

0800d3cc <_Bfree>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	69c6      	ldr	r6, [r0, #28]
 800d3d0:	4605      	mov	r5, r0
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	b976      	cbnz	r6, 800d3f4 <_Bfree+0x28>
 800d3d6:	2010      	movs	r0, #16
 800d3d8:	f7ff fe44 	bl	800d064 <malloc>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	61e8      	str	r0, [r5, #28]
 800d3e0:	b920      	cbnz	r0, 800d3ec <_Bfree+0x20>
 800d3e2:	4b09      	ldr	r3, [pc, #36]	; (800d408 <_Bfree+0x3c>)
 800d3e4:	4809      	ldr	r0, [pc, #36]	; (800d40c <_Bfree+0x40>)
 800d3e6:	218f      	movs	r1, #143	; 0x8f
 800d3e8:	f000 fe12 	bl	800e010 <__assert_func>
 800d3ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3f0:	6006      	str	r6, [r0, #0]
 800d3f2:	60c6      	str	r6, [r0, #12]
 800d3f4:	b13c      	cbz	r4, 800d406 <_Bfree+0x3a>
 800d3f6:	69eb      	ldr	r3, [r5, #28]
 800d3f8:	6862      	ldr	r2, [r4, #4]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d400:	6021      	str	r1, [r4, #0]
 800d402:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d406:	bd70      	pop	{r4, r5, r6, pc}
 800d408:	0800f6e6 	.word	0x0800f6e6
 800d40c:	0800f7d7 	.word	0x0800f7d7

0800d410 <__multadd>:
 800d410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d414:	690d      	ldr	r5, [r1, #16]
 800d416:	4607      	mov	r7, r0
 800d418:	460c      	mov	r4, r1
 800d41a:	461e      	mov	r6, r3
 800d41c:	f101 0c14 	add.w	ip, r1, #20
 800d420:	2000      	movs	r0, #0
 800d422:	f8dc 3000 	ldr.w	r3, [ip]
 800d426:	b299      	uxth	r1, r3
 800d428:	fb02 6101 	mla	r1, r2, r1, r6
 800d42c:	0c1e      	lsrs	r6, r3, #16
 800d42e:	0c0b      	lsrs	r3, r1, #16
 800d430:	fb02 3306 	mla	r3, r2, r6, r3
 800d434:	b289      	uxth	r1, r1
 800d436:	3001      	adds	r0, #1
 800d438:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d43c:	4285      	cmp	r5, r0
 800d43e:	f84c 1b04 	str.w	r1, [ip], #4
 800d442:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d446:	dcec      	bgt.n	800d422 <__multadd+0x12>
 800d448:	b30e      	cbz	r6, 800d48e <__multadd+0x7e>
 800d44a:	68a3      	ldr	r3, [r4, #8]
 800d44c:	42ab      	cmp	r3, r5
 800d44e:	dc19      	bgt.n	800d484 <__multadd+0x74>
 800d450:	6861      	ldr	r1, [r4, #4]
 800d452:	4638      	mov	r0, r7
 800d454:	3101      	adds	r1, #1
 800d456:	f7ff ff79 	bl	800d34c <_Balloc>
 800d45a:	4680      	mov	r8, r0
 800d45c:	b928      	cbnz	r0, 800d46a <__multadd+0x5a>
 800d45e:	4602      	mov	r2, r0
 800d460:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <__multadd+0x84>)
 800d462:	480d      	ldr	r0, [pc, #52]	; (800d498 <__multadd+0x88>)
 800d464:	21ba      	movs	r1, #186	; 0xba
 800d466:	f000 fdd3 	bl	800e010 <__assert_func>
 800d46a:	6922      	ldr	r2, [r4, #16]
 800d46c:	3202      	adds	r2, #2
 800d46e:	f104 010c 	add.w	r1, r4, #12
 800d472:	0092      	lsls	r2, r2, #2
 800d474:	300c      	adds	r0, #12
 800d476:	f7fe f91c 	bl	800b6b2 <memcpy>
 800d47a:	4621      	mov	r1, r4
 800d47c:	4638      	mov	r0, r7
 800d47e:	f7ff ffa5 	bl	800d3cc <_Bfree>
 800d482:	4644      	mov	r4, r8
 800d484:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d488:	3501      	adds	r5, #1
 800d48a:	615e      	str	r6, [r3, #20]
 800d48c:	6125      	str	r5, [r4, #16]
 800d48e:	4620      	mov	r0, r4
 800d490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d494:	0800f755 	.word	0x0800f755
 800d498:	0800f7d7 	.word	0x0800f7d7

0800d49c <__s2b>:
 800d49c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a0:	460c      	mov	r4, r1
 800d4a2:	4615      	mov	r5, r2
 800d4a4:	461f      	mov	r7, r3
 800d4a6:	2209      	movs	r2, #9
 800d4a8:	3308      	adds	r3, #8
 800d4aa:	4606      	mov	r6, r0
 800d4ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4b0:	2100      	movs	r1, #0
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	db09      	blt.n	800d4cc <__s2b+0x30>
 800d4b8:	4630      	mov	r0, r6
 800d4ba:	f7ff ff47 	bl	800d34c <_Balloc>
 800d4be:	b940      	cbnz	r0, 800d4d2 <__s2b+0x36>
 800d4c0:	4602      	mov	r2, r0
 800d4c2:	4b19      	ldr	r3, [pc, #100]	; (800d528 <__s2b+0x8c>)
 800d4c4:	4819      	ldr	r0, [pc, #100]	; (800d52c <__s2b+0x90>)
 800d4c6:	21d3      	movs	r1, #211	; 0xd3
 800d4c8:	f000 fda2 	bl	800e010 <__assert_func>
 800d4cc:	0052      	lsls	r2, r2, #1
 800d4ce:	3101      	adds	r1, #1
 800d4d0:	e7f0      	b.n	800d4b4 <__s2b+0x18>
 800d4d2:	9b08      	ldr	r3, [sp, #32]
 800d4d4:	6143      	str	r3, [r0, #20]
 800d4d6:	2d09      	cmp	r5, #9
 800d4d8:	f04f 0301 	mov.w	r3, #1
 800d4dc:	6103      	str	r3, [r0, #16]
 800d4de:	dd16      	ble.n	800d50e <__s2b+0x72>
 800d4e0:	f104 0909 	add.w	r9, r4, #9
 800d4e4:	46c8      	mov	r8, r9
 800d4e6:	442c      	add	r4, r5
 800d4e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d4ec:	4601      	mov	r1, r0
 800d4ee:	3b30      	subs	r3, #48	; 0x30
 800d4f0:	220a      	movs	r2, #10
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	f7ff ff8c 	bl	800d410 <__multadd>
 800d4f8:	45a0      	cmp	r8, r4
 800d4fa:	d1f5      	bne.n	800d4e8 <__s2b+0x4c>
 800d4fc:	f1a5 0408 	sub.w	r4, r5, #8
 800d500:	444c      	add	r4, r9
 800d502:	1b2d      	subs	r5, r5, r4
 800d504:	1963      	adds	r3, r4, r5
 800d506:	42bb      	cmp	r3, r7
 800d508:	db04      	blt.n	800d514 <__s2b+0x78>
 800d50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d50e:	340a      	adds	r4, #10
 800d510:	2509      	movs	r5, #9
 800d512:	e7f6      	b.n	800d502 <__s2b+0x66>
 800d514:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d518:	4601      	mov	r1, r0
 800d51a:	3b30      	subs	r3, #48	; 0x30
 800d51c:	220a      	movs	r2, #10
 800d51e:	4630      	mov	r0, r6
 800d520:	f7ff ff76 	bl	800d410 <__multadd>
 800d524:	e7ee      	b.n	800d504 <__s2b+0x68>
 800d526:	bf00      	nop
 800d528:	0800f755 	.word	0x0800f755
 800d52c:	0800f7d7 	.word	0x0800f7d7

0800d530 <__hi0bits>:
 800d530:	0c03      	lsrs	r3, r0, #16
 800d532:	041b      	lsls	r3, r3, #16
 800d534:	b9d3      	cbnz	r3, 800d56c <__hi0bits+0x3c>
 800d536:	0400      	lsls	r0, r0, #16
 800d538:	2310      	movs	r3, #16
 800d53a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d53e:	bf04      	itt	eq
 800d540:	0200      	lsleq	r0, r0, #8
 800d542:	3308      	addeq	r3, #8
 800d544:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d548:	bf04      	itt	eq
 800d54a:	0100      	lsleq	r0, r0, #4
 800d54c:	3304      	addeq	r3, #4
 800d54e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d552:	bf04      	itt	eq
 800d554:	0080      	lsleq	r0, r0, #2
 800d556:	3302      	addeq	r3, #2
 800d558:	2800      	cmp	r0, #0
 800d55a:	db05      	blt.n	800d568 <__hi0bits+0x38>
 800d55c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d560:	f103 0301 	add.w	r3, r3, #1
 800d564:	bf08      	it	eq
 800d566:	2320      	moveq	r3, #32
 800d568:	4618      	mov	r0, r3
 800d56a:	4770      	bx	lr
 800d56c:	2300      	movs	r3, #0
 800d56e:	e7e4      	b.n	800d53a <__hi0bits+0xa>

0800d570 <__lo0bits>:
 800d570:	6803      	ldr	r3, [r0, #0]
 800d572:	f013 0207 	ands.w	r2, r3, #7
 800d576:	d00c      	beq.n	800d592 <__lo0bits+0x22>
 800d578:	07d9      	lsls	r1, r3, #31
 800d57a:	d422      	bmi.n	800d5c2 <__lo0bits+0x52>
 800d57c:	079a      	lsls	r2, r3, #30
 800d57e:	bf49      	itett	mi
 800d580:	085b      	lsrmi	r3, r3, #1
 800d582:	089b      	lsrpl	r3, r3, #2
 800d584:	6003      	strmi	r3, [r0, #0]
 800d586:	2201      	movmi	r2, #1
 800d588:	bf5c      	itt	pl
 800d58a:	6003      	strpl	r3, [r0, #0]
 800d58c:	2202      	movpl	r2, #2
 800d58e:	4610      	mov	r0, r2
 800d590:	4770      	bx	lr
 800d592:	b299      	uxth	r1, r3
 800d594:	b909      	cbnz	r1, 800d59a <__lo0bits+0x2a>
 800d596:	0c1b      	lsrs	r3, r3, #16
 800d598:	2210      	movs	r2, #16
 800d59a:	b2d9      	uxtb	r1, r3
 800d59c:	b909      	cbnz	r1, 800d5a2 <__lo0bits+0x32>
 800d59e:	3208      	adds	r2, #8
 800d5a0:	0a1b      	lsrs	r3, r3, #8
 800d5a2:	0719      	lsls	r1, r3, #28
 800d5a4:	bf04      	itt	eq
 800d5a6:	091b      	lsreq	r3, r3, #4
 800d5a8:	3204      	addeq	r2, #4
 800d5aa:	0799      	lsls	r1, r3, #30
 800d5ac:	bf04      	itt	eq
 800d5ae:	089b      	lsreq	r3, r3, #2
 800d5b0:	3202      	addeq	r2, #2
 800d5b2:	07d9      	lsls	r1, r3, #31
 800d5b4:	d403      	bmi.n	800d5be <__lo0bits+0x4e>
 800d5b6:	085b      	lsrs	r3, r3, #1
 800d5b8:	f102 0201 	add.w	r2, r2, #1
 800d5bc:	d003      	beq.n	800d5c6 <__lo0bits+0x56>
 800d5be:	6003      	str	r3, [r0, #0]
 800d5c0:	e7e5      	b.n	800d58e <__lo0bits+0x1e>
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	e7e3      	b.n	800d58e <__lo0bits+0x1e>
 800d5c6:	2220      	movs	r2, #32
 800d5c8:	e7e1      	b.n	800d58e <__lo0bits+0x1e>
	...

0800d5cc <__i2b>:
 800d5cc:	b510      	push	{r4, lr}
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	f7ff febb 	bl	800d34c <_Balloc>
 800d5d6:	4602      	mov	r2, r0
 800d5d8:	b928      	cbnz	r0, 800d5e6 <__i2b+0x1a>
 800d5da:	4b05      	ldr	r3, [pc, #20]	; (800d5f0 <__i2b+0x24>)
 800d5dc:	4805      	ldr	r0, [pc, #20]	; (800d5f4 <__i2b+0x28>)
 800d5de:	f240 1145 	movw	r1, #325	; 0x145
 800d5e2:	f000 fd15 	bl	800e010 <__assert_func>
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	6144      	str	r4, [r0, #20]
 800d5ea:	6103      	str	r3, [r0, #16]
 800d5ec:	bd10      	pop	{r4, pc}
 800d5ee:	bf00      	nop
 800d5f0:	0800f755 	.word	0x0800f755
 800d5f4:	0800f7d7 	.word	0x0800f7d7

0800d5f8 <__multiply>:
 800d5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fc:	4691      	mov	r9, r2
 800d5fe:	690a      	ldr	r2, [r1, #16]
 800d600:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d604:	429a      	cmp	r2, r3
 800d606:	bfb8      	it	lt
 800d608:	460b      	movlt	r3, r1
 800d60a:	460c      	mov	r4, r1
 800d60c:	bfbc      	itt	lt
 800d60e:	464c      	movlt	r4, r9
 800d610:	4699      	movlt	r9, r3
 800d612:	6927      	ldr	r7, [r4, #16]
 800d614:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d618:	68a3      	ldr	r3, [r4, #8]
 800d61a:	6861      	ldr	r1, [r4, #4]
 800d61c:	eb07 060a 	add.w	r6, r7, sl
 800d620:	42b3      	cmp	r3, r6
 800d622:	b085      	sub	sp, #20
 800d624:	bfb8      	it	lt
 800d626:	3101      	addlt	r1, #1
 800d628:	f7ff fe90 	bl	800d34c <_Balloc>
 800d62c:	b930      	cbnz	r0, 800d63c <__multiply+0x44>
 800d62e:	4602      	mov	r2, r0
 800d630:	4b44      	ldr	r3, [pc, #272]	; (800d744 <__multiply+0x14c>)
 800d632:	4845      	ldr	r0, [pc, #276]	; (800d748 <__multiply+0x150>)
 800d634:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d638:	f000 fcea 	bl	800e010 <__assert_func>
 800d63c:	f100 0514 	add.w	r5, r0, #20
 800d640:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d644:	462b      	mov	r3, r5
 800d646:	2200      	movs	r2, #0
 800d648:	4543      	cmp	r3, r8
 800d64a:	d321      	bcc.n	800d690 <__multiply+0x98>
 800d64c:	f104 0314 	add.w	r3, r4, #20
 800d650:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d654:	f109 0314 	add.w	r3, r9, #20
 800d658:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d65c:	9202      	str	r2, [sp, #8]
 800d65e:	1b3a      	subs	r2, r7, r4
 800d660:	3a15      	subs	r2, #21
 800d662:	f022 0203 	bic.w	r2, r2, #3
 800d666:	3204      	adds	r2, #4
 800d668:	f104 0115 	add.w	r1, r4, #21
 800d66c:	428f      	cmp	r7, r1
 800d66e:	bf38      	it	cc
 800d670:	2204      	movcc	r2, #4
 800d672:	9201      	str	r2, [sp, #4]
 800d674:	9a02      	ldr	r2, [sp, #8]
 800d676:	9303      	str	r3, [sp, #12]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d80c      	bhi.n	800d696 <__multiply+0x9e>
 800d67c:	2e00      	cmp	r6, #0
 800d67e:	dd03      	ble.n	800d688 <__multiply+0x90>
 800d680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d684:	2b00      	cmp	r3, #0
 800d686:	d05b      	beq.n	800d740 <__multiply+0x148>
 800d688:	6106      	str	r6, [r0, #16]
 800d68a:	b005      	add	sp, #20
 800d68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d690:	f843 2b04 	str.w	r2, [r3], #4
 800d694:	e7d8      	b.n	800d648 <__multiply+0x50>
 800d696:	f8b3 a000 	ldrh.w	sl, [r3]
 800d69a:	f1ba 0f00 	cmp.w	sl, #0
 800d69e:	d024      	beq.n	800d6ea <__multiply+0xf2>
 800d6a0:	f104 0e14 	add.w	lr, r4, #20
 800d6a4:	46a9      	mov	r9, r5
 800d6a6:	f04f 0c00 	mov.w	ip, #0
 800d6aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d6ae:	f8d9 1000 	ldr.w	r1, [r9]
 800d6b2:	fa1f fb82 	uxth.w	fp, r2
 800d6b6:	b289      	uxth	r1, r1
 800d6b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d6bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6c0:	f8d9 2000 	ldr.w	r2, [r9]
 800d6c4:	4461      	add	r1, ip
 800d6c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800d6ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d6d2:	b289      	uxth	r1, r1
 800d6d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d6d8:	4577      	cmp	r7, lr
 800d6da:	f849 1b04 	str.w	r1, [r9], #4
 800d6de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d6e2:	d8e2      	bhi.n	800d6aa <__multiply+0xb2>
 800d6e4:	9a01      	ldr	r2, [sp, #4]
 800d6e6:	f845 c002 	str.w	ip, [r5, r2]
 800d6ea:	9a03      	ldr	r2, [sp, #12]
 800d6ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	f1b9 0f00 	cmp.w	r9, #0
 800d6f6:	d021      	beq.n	800d73c <__multiply+0x144>
 800d6f8:	6829      	ldr	r1, [r5, #0]
 800d6fa:	f104 0c14 	add.w	ip, r4, #20
 800d6fe:	46ae      	mov	lr, r5
 800d700:	f04f 0a00 	mov.w	sl, #0
 800d704:	f8bc b000 	ldrh.w	fp, [ip]
 800d708:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d70c:	fb09 220b 	mla	r2, r9, fp, r2
 800d710:	4452      	add	r2, sl
 800d712:	b289      	uxth	r1, r1
 800d714:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d718:	f84e 1b04 	str.w	r1, [lr], #4
 800d71c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d720:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d724:	f8be 1000 	ldrh.w	r1, [lr]
 800d728:	fb09 110a 	mla	r1, r9, sl, r1
 800d72c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d730:	4567      	cmp	r7, ip
 800d732:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d736:	d8e5      	bhi.n	800d704 <__multiply+0x10c>
 800d738:	9a01      	ldr	r2, [sp, #4]
 800d73a:	50a9      	str	r1, [r5, r2]
 800d73c:	3504      	adds	r5, #4
 800d73e:	e799      	b.n	800d674 <__multiply+0x7c>
 800d740:	3e01      	subs	r6, #1
 800d742:	e79b      	b.n	800d67c <__multiply+0x84>
 800d744:	0800f755 	.word	0x0800f755
 800d748:	0800f7d7 	.word	0x0800f7d7

0800d74c <__pow5mult>:
 800d74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d750:	4615      	mov	r5, r2
 800d752:	f012 0203 	ands.w	r2, r2, #3
 800d756:	4606      	mov	r6, r0
 800d758:	460f      	mov	r7, r1
 800d75a:	d007      	beq.n	800d76c <__pow5mult+0x20>
 800d75c:	4c25      	ldr	r4, [pc, #148]	; (800d7f4 <__pow5mult+0xa8>)
 800d75e:	3a01      	subs	r2, #1
 800d760:	2300      	movs	r3, #0
 800d762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d766:	f7ff fe53 	bl	800d410 <__multadd>
 800d76a:	4607      	mov	r7, r0
 800d76c:	10ad      	asrs	r5, r5, #2
 800d76e:	d03d      	beq.n	800d7ec <__pow5mult+0xa0>
 800d770:	69f4      	ldr	r4, [r6, #28]
 800d772:	b97c      	cbnz	r4, 800d794 <__pow5mult+0x48>
 800d774:	2010      	movs	r0, #16
 800d776:	f7ff fc75 	bl	800d064 <malloc>
 800d77a:	4602      	mov	r2, r0
 800d77c:	61f0      	str	r0, [r6, #28]
 800d77e:	b928      	cbnz	r0, 800d78c <__pow5mult+0x40>
 800d780:	4b1d      	ldr	r3, [pc, #116]	; (800d7f8 <__pow5mult+0xac>)
 800d782:	481e      	ldr	r0, [pc, #120]	; (800d7fc <__pow5mult+0xb0>)
 800d784:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d788:	f000 fc42 	bl	800e010 <__assert_func>
 800d78c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d790:	6004      	str	r4, [r0, #0]
 800d792:	60c4      	str	r4, [r0, #12]
 800d794:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d79c:	b94c      	cbnz	r4, 800d7b2 <__pow5mult+0x66>
 800d79e:	f240 2171 	movw	r1, #625	; 0x271
 800d7a2:	4630      	mov	r0, r6
 800d7a4:	f7ff ff12 	bl	800d5cc <__i2b>
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	6003      	str	r3, [r0, #0]
 800d7b2:	f04f 0900 	mov.w	r9, #0
 800d7b6:	07eb      	lsls	r3, r5, #31
 800d7b8:	d50a      	bpl.n	800d7d0 <__pow5mult+0x84>
 800d7ba:	4639      	mov	r1, r7
 800d7bc:	4622      	mov	r2, r4
 800d7be:	4630      	mov	r0, r6
 800d7c0:	f7ff ff1a 	bl	800d5f8 <__multiply>
 800d7c4:	4639      	mov	r1, r7
 800d7c6:	4680      	mov	r8, r0
 800d7c8:	4630      	mov	r0, r6
 800d7ca:	f7ff fdff 	bl	800d3cc <_Bfree>
 800d7ce:	4647      	mov	r7, r8
 800d7d0:	106d      	asrs	r5, r5, #1
 800d7d2:	d00b      	beq.n	800d7ec <__pow5mult+0xa0>
 800d7d4:	6820      	ldr	r0, [r4, #0]
 800d7d6:	b938      	cbnz	r0, 800d7e8 <__pow5mult+0x9c>
 800d7d8:	4622      	mov	r2, r4
 800d7da:	4621      	mov	r1, r4
 800d7dc:	4630      	mov	r0, r6
 800d7de:	f7ff ff0b 	bl	800d5f8 <__multiply>
 800d7e2:	6020      	str	r0, [r4, #0]
 800d7e4:	f8c0 9000 	str.w	r9, [r0]
 800d7e8:	4604      	mov	r4, r0
 800d7ea:	e7e4      	b.n	800d7b6 <__pow5mult+0x6a>
 800d7ec:	4638      	mov	r0, r7
 800d7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7f2:	bf00      	nop
 800d7f4:	0800f920 	.word	0x0800f920
 800d7f8:	0800f6e6 	.word	0x0800f6e6
 800d7fc:	0800f7d7 	.word	0x0800f7d7

0800d800 <__lshift>:
 800d800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d804:	460c      	mov	r4, r1
 800d806:	6849      	ldr	r1, [r1, #4]
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d80e:	68a3      	ldr	r3, [r4, #8]
 800d810:	4607      	mov	r7, r0
 800d812:	4691      	mov	r9, r2
 800d814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d818:	f108 0601 	add.w	r6, r8, #1
 800d81c:	42b3      	cmp	r3, r6
 800d81e:	db0b      	blt.n	800d838 <__lshift+0x38>
 800d820:	4638      	mov	r0, r7
 800d822:	f7ff fd93 	bl	800d34c <_Balloc>
 800d826:	4605      	mov	r5, r0
 800d828:	b948      	cbnz	r0, 800d83e <__lshift+0x3e>
 800d82a:	4602      	mov	r2, r0
 800d82c:	4b28      	ldr	r3, [pc, #160]	; (800d8d0 <__lshift+0xd0>)
 800d82e:	4829      	ldr	r0, [pc, #164]	; (800d8d4 <__lshift+0xd4>)
 800d830:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d834:	f000 fbec 	bl	800e010 <__assert_func>
 800d838:	3101      	adds	r1, #1
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	e7ee      	b.n	800d81c <__lshift+0x1c>
 800d83e:	2300      	movs	r3, #0
 800d840:	f100 0114 	add.w	r1, r0, #20
 800d844:	f100 0210 	add.w	r2, r0, #16
 800d848:	4618      	mov	r0, r3
 800d84a:	4553      	cmp	r3, sl
 800d84c:	db33      	blt.n	800d8b6 <__lshift+0xb6>
 800d84e:	6920      	ldr	r0, [r4, #16]
 800d850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d854:	f104 0314 	add.w	r3, r4, #20
 800d858:	f019 091f 	ands.w	r9, r9, #31
 800d85c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d864:	d02b      	beq.n	800d8be <__lshift+0xbe>
 800d866:	f1c9 0e20 	rsb	lr, r9, #32
 800d86a:	468a      	mov	sl, r1
 800d86c:	2200      	movs	r2, #0
 800d86e:	6818      	ldr	r0, [r3, #0]
 800d870:	fa00 f009 	lsl.w	r0, r0, r9
 800d874:	4310      	orrs	r0, r2
 800d876:	f84a 0b04 	str.w	r0, [sl], #4
 800d87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d87e:	459c      	cmp	ip, r3
 800d880:	fa22 f20e 	lsr.w	r2, r2, lr
 800d884:	d8f3      	bhi.n	800d86e <__lshift+0x6e>
 800d886:	ebac 0304 	sub.w	r3, ip, r4
 800d88a:	3b15      	subs	r3, #21
 800d88c:	f023 0303 	bic.w	r3, r3, #3
 800d890:	3304      	adds	r3, #4
 800d892:	f104 0015 	add.w	r0, r4, #21
 800d896:	4584      	cmp	ip, r0
 800d898:	bf38      	it	cc
 800d89a:	2304      	movcc	r3, #4
 800d89c:	50ca      	str	r2, [r1, r3]
 800d89e:	b10a      	cbz	r2, 800d8a4 <__lshift+0xa4>
 800d8a0:	f108 0602 	add.w	r6, r8, #2
 800d8a4:	3e01      	subs	r6, #1
 800d8a6:	4638      	mov	r0, r7
 800d8a8:	612e      	str	r6, [r5, #16]
 800d8aa:	4621      	mov	r1, r4
 800d8ac:	f7ff fd8e 	bl	800d3cc <_Bfree>
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	e7c5      	b.n	800d84a <__lshift+0x4a>
 800d8be:	3904      	subs	r1, #4
 800d8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8c8:	459c      	cmp	ip, r3
 800d8ca:	d8f9      	bhi.n	800d8c0 <__lshift+0xc0>
 800d8cc:	e7ea      	b.n	800d8a4 <__lshift+0xa4>
 800d8ce:	bf00      	nop
 800d8d0:	0800f755 	.word	0x0800f755
 800d8d4:	0800f7d7 	.word	0x0800f7d7

0800d8d8 <__mcmp>:
 800d8d8:	b530      	push	{r4, r5, lr}
 800d8da:	6902      	ldr	r2, [r0, #16]
 800d8dc:	690c      	ldr	r4, [r1, #16]
 800d8de:	1b12      	subs	r2, r2, r4
 800d8e0:	d10e      	bne.n	800d900 <__mcmp+0x28>
 800d8e2:	f100 0314 	add.w	r3, r0, #20
 800d8e6:	3114      	adds	r1, #20
 800d8e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d8ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d8f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d8f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d8f8:	42a5      	cmp	r5, r4
 800d8fa:	d003      	beq.n	800d904 <__mcmp+0x2c>
 800d8fc:	d305      	bcc.n	800d90a <__mcmp+0x32>
 800d8fe:	2201      	movs	r2, #1
 800d900:	4610      	mov	r0, r2
 800d902:	bd30      	pop	{r4, r5, pc}
 800d904:	4283      	cmp	r3, r0
 800d906:	d3f3      	bcc.n	800d8f0 <__mcmp+0x18>
 800d908:	e7fa      	b.n	800d900 <__mcmp+0x28>
 800d90a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d90e:	e7f7      	b.n	800d900 <__mcmp+0x28>

0800d910 <__mdiff>:
 800d910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d914:	460c      	mov	r4, r1
 800d916:	4606      	mov	r6, r0
 800d918:	4611      	mov	r1, r2
 800d91a:	4620      	mov	r0, r4
 800d91c:	4690      	mov	r8, r2
 800d91e:	f7ff ffdb 	bl	800d8d8 <__mcmp>
 800d922:	1e05      	subs	r5, r0, #0
 800d924:	d110      	bne.n	800d948 <__mdiff+0x38>
 800d926:	4629      	mov	r1, r5
 800d928:	4630      	mov	r0, r6
 800d92a:	f7ff fd0f 	bl	800d34c <_Balloc>
 800d92e:	b930      	cbnz	r0, 800d93e <__mdiff+0x2e>
 800d930:	4b3a      	ldr	r3, [pc, #232]	; (800da1c <__mdiff+0x10c>)
 800d932:	4602      	mov	r2, r0
 800d934:	f240 2137 	movw	r1, #567	; 0x237
 800d938:	4839      	ldr	r0, [pc, #228]	; (800da20 <__mdiff+0x110>)
 800d93a:	f000 fb69 	bl	800e010 <__assert_func>
 800d93e:	2301      	movs	r3, #1
 800d940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d948:	bfa4      	itt	ge
 800d94a:	4643      	movge	r3, r8
 800d94c:	46a0      	movge	r8, r4
 800d94e:	4630      	mov	r0, r6
 800d950:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d954:	bfa6      	itte	ge
 800d956:	461c      	movge	r4, r3
 800d958:	2500      	movge	r5, #0
 800d95a:	2501      	movlt	r5, #1
 800d95c:	f7ff fcf6 	bl	800d34c <_Balloc>
 800d960:	b920      	cbnz	r0, 800d96c <__mdiff+0x5c>
 800d962:	4b2e      	ldr	r3, [pc, #184]	; (800da1c <__mdiff+0x10c>)
 800d964:	4602      	mov	r2, r0
 800d966:	f240 2145 	movw	r1, #581	; 0x245
 800d96a:	e7e5      	b.n	800d938 <__mdiff+0x28>
 800d96c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d970:	6926      	ldr	r6, [r4, #16]
 800d972:	60c5      	str	r5, [r0, #12]
 800d974:	f104 0914 	add.w	r9, r4, #20
 800d978:	f108 0514 	add.w	r5, r8, #20
 800d97c:	f100 0e14 	add.w	lr, r0, #20
 800d980:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d984:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d988:	f108 0210 	add.w	r2, r8, #16
 800d98c:	46f2      	mov	sl, lr
 800d98e:	2100      	movs	r1, #0
 800d990:	f859 3b04 	ldr.w	r3, [r9], #4
 800d994:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d998:	fa11 f88b 	uxtah	r8, r1, fp
 800d99c:	b299      	uxth	r1, r3
 800d99e:	0c1b      	lsrs	r3, r3, #16
 800d9a0:	eba8 0801 	sub.w	r8, r8, r1
 800d9a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9ac:	fa1f f888 	uxth.w	r8, r8
 800d9b0:	1419      	asrs	r1, r3, #16
 800d9b2:	454e      	cmp	r6, r9
 800d9b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9b8:	f84a 3b04 	str.w	r3, [sl], #4
 800d9bc:	d8e8      	bhi.n	800d990 <__mdiff+0x80>
 800d9be:	1b33      	subs	r3, r6, r4
 800d9c0:	3b15      	subs	r3, #21
 800d9c2:	f023 0303 	bic.w	r3, r3, #3
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	3415      	adds	r4, #21
 800d9ca:	42a6      	cmp	r6, r4
 800d9cc:	bf38      	it	cc
 800d9ce:	2304      	movcc	r3, #4
 800d9d0:	441d      	add	r5, r3
 800d9d2:	4473      	add	r3, lr
 800d9d4:	469e      	mov	lr, r3
 800d9d6:	462e      	mov	r6, r5
 800d9d8:	4566      	cmp	r6, ip
 800d9da:	d30e      	bcc.n	800d9fa <__mdiff+0xea>
 800d9dc:	f10c 0203 	add.w	r2, ip, #3
 800d9e0:	1b52      	subs	r2, r2, r5
 800d9e2:	f022 0203 	bic.w	r2, r2, #3
 800d9e6:	3d03      	subs	r5, #3
 800d9e8:	45ac      	cmp	ip, r5
 800d9ea:	bf38      	it	cc
 800d9ec:	2200      	movcc	r2, #0
 800d9ee:	4413      	add	r3, r2
 800d9f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d9f4:	b17a      	cbz	r2, 800da16 <__mdiff+0x106>
 800d9f6:	6107      	str	r7, [r0, #16]
 800d9f8:	e7a4      	b.n	800d944 <__mdiff+0x34>
 800d9fa:	f856 8b04 	ldr.w	r8, [r6], #4
 800d9fe:	fa11 f288 	uxtah	r2, r1, r8
 800da02:	1414      	asrs	r4, r2, #16
 800da04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da08:	b292      	uxth	r2, r2
 800da0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da0e:	f84e 2b04 	str.w	r2, [lr], #4
 800da12:	1421      	asrs	r1, r4, #16
 800da14:	e7e0      	b.n	800d9d8 <__mdiff+0xc8>
 800da16:	3f01      	subs	r7, #1
 800da18:	e7ea      	b.n	800d9f0 <__mdiff+0xe0>
 800da1a:	bf00      	nop
 800da1c:	0800f755 	.word	0x0800f755
 800da20:	0800f7d7 	.word	0x0800f7d7

0800da24 <__ulp>:
 800da24:	b082      	sub	sp, #8
 800da26:	ed8d 0b00 	vstr	d0, [sp]
 800da2a:	9a01      	ldr	r2, [sp, #4]
 800da2c:	4b0f      	ldr	r3, [pc, #60]	; (800da6c <__ulp+0x48>)
 800da2e:	4013      	ands	r3, r2
 800da30:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800da34:	2b00      	cmp	r3, #0
 800da36:	dc08      	bgt.n	800da4a <__ulp+0x26>
 800da38:	425b      	negs	r3, r3
 800da3a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800da3e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da42:	da04      	bge.n	800da4e <__ulp+0x2a>
 800da44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800da48:	4113      	asrs	r3, r2
 800da4a:	2200      	movs	r2, #0
 800da4c:	e008      	b.n	800da60 <__ulp+0x3c>
 800da4e:	f1a2 0314 	sub.w	r3, r2, #20
 800da52:	2b1e      	cmp	r3, #30
 800da54:	bfda      	itte	le
 800da56:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800da5a:	40da      	lsrle	r2, r3
 800da5c:	2201      	movgt	r2, #1
 800da5e:	2300      	movs	r3, #0
 800da60:	4619      	mov	r1, r3
 800da62:	4610      	mov	r0, r2
 800da64:	ec41 0b10 	vmov	d0, r0, r1
 800da68:	b002      	add	sp, #8
 800da6a:	4770      	bx	lr
 800da6c:	7ff00000 	.word	0x7ff00000

0800da70 <__b2d>:
 800da70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da74:	6906      	ldr	r6, [r0, #16]
 800da76:	f100 0814 	add.w	r8, r0, #20
 800da7a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800da7e:	1f37      	subs	r7, r6, #4
 800da80:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800da84:	4610      	mov	r0, r2
 800da86:	f7ff fd53 	bl	800d530 <__hi0bits>
 800da8a:	f1c0 0320 	rsb	r3, r0, #32
 800da8e:	280a      	cmp	r0, #10
 800da90:	600b      	str	r3, [r1, #0]
 800da92:	491b      	ldr	r1, [pc, #108]	; (800db00 <__b2d+0x90>)
 800da94:	dc15      	bgt.n	800dac2 <__b2d+0x52>
 800da96:	f1c0 0c0b 	rsb	ip, r0, #11
 800da9a:	fa22 f30c 	lsr.w	r3, r2, ip
 800da9e:	45b8      	cmp	r8, r7
 800daa0:	ea43 0501 	orr.w	r5, r3, r1
 800daa4:	bf34      	ite	cc
 800daa6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800daaa:	2300      	movcs	r3, #0
 800daac:	3015      	adds	r0, #21
 800daae:	fa02 f000 	lsl.w	r0, r2, r0
 800dab2:	fa23 f30c 	lsr.w	r3, r3, ip
 800dab6:	4303      	orrs	r3, r0
 800dab8:	461c      	mov	r4, r3
 800daba:	ec45 4b10 	vmov	d0, r4, r5
 800dabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac2:	45b8      	cmp	r8, r7
 800dac4:	bf3a      	itte	cc
 800dac6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800daca:	f1a6 0708 	subcc.w	r7, r6, #8
 800dace:	2300      	movcs	r3, #0
 800dad0:	380b      	subs	r0, #11
 800dad2:	d012      	beq.n	800dafa <__b2d+0x8a>
 800dad4:	f1c0 0120 	rsb	r1, r0, #32
 800dad8:	fa23 f401 	lsr.w	r4, r3, r1
 800dadc:	4082      	lsls	r2, r0
 800dade:	4322      	orrs	r2, r4
 800dae0:	4547      	cmp	r7, r8
 800dae2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800dae6:	bf8c      	ite	hi
 800dae8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800daec:	2200      	movls	r2, #0
 800daee:	4083      	lsls	r3, r0
 800daf0:	40ca      	lsrs	r2, r1
 800daf2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800daf6:	4313      	orrs	r3, r2
 800daf8:	e7de      	b.n	800dab8 <__b2d+0x48>
 800dafa:	ea42 0501 	orr.w	r5, r2, r1
 800dafe:	e7db      	b.n	800dab8 <__b2d+0x48>
 800db00:	3ff00000 	.word	0x3ff00000

0800db04 <__d2b>:
 800db04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db08:	460f      	mov	r7, r1
 800db0a:	2101      	movs	r1, #1
 800db0c:	ec59 8b10 	vmov	r8, r9, d0
 800db10:	4616      	mov	r6, r2
 800db12:	f7ff fc1b 	bl	800d34c <_Balloc>
 800db16:	4604      	mov	r4, r0
 800db18:	b930      	cbnz	r0, 800db28 <__d2b+0x24>
 800db1a:	4602      	mov	r2, r0
 800db1c:	4b24      	ldr	r3, [pc, #144]	; (800dbb0 <__d2b+0xac>)
 800db1e:	4825      	ldr	r0, [pc, #148]	; (800dbb4 <__d2b+0xb0>)
 800db20:	f240 310f 	movw	r1, #783	; 0x30f
 800db24:	f000 fa74 	bl	800e010 <__assert_func>
 800db28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db30:	bb2d      	cbnz	r5, 800db7e <__d2b+0x7a>
 800db32:	9301      	str	r3, [sp, #4]
 800db34:	f1b8 0300 	subs.w	r3, r8, #0
 800db38:	d026      	beq.n	800db88 <__d2b+0x84>
 800db3a:	4668      	mov	r0, sp
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	f7ff fd17 	bl	800d570 <__lo0bits>
 800db42:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db46:	b1e8      	cbz	r0, 800db84 <__d2b+0x80>
 800db48:	f1c0 0320 	rsb	r3, r0, #32
 800db4c:	fa02 f303 	lsl.w	r3, r2, r3
 800db50:	430b      	orrs	r3, r1
 800db52:	40c2      	lsrs	r2, r0
 800db54:	6163      	str	r3, [r4, #20]
 800db56:	9201      	str	r2, [sp, #4]
 800db58:	9b01      	ldr	r3, [sp, #4]
 800db5a:	61a3      	str	r3, [r4, #24]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	bf14      	ite	ne
 800db60:	2202      	movne	r2, #2
 800db62:	2201      	moveq	r2, #1
 800db64:	6122      	str	r2, [r4, #16]
 800db66:	b1bd      	cbz	r5, 800db98 <__d2b+0x94>
 800db68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db6c:	4405      	add	r5, r0
 800db6e:	603d      	str	r5, [r7, #0]
 800db70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db74:	6030      	str	r0, [r6, #0]
 800db76:	4620      	mov	r0, r4
 800db78:	b003      	add	sp, #12
 800db7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db82:	e7d6      	b.n	800db32 <__d2b+0x2e>
 800db84:	6161      	str	r1, [r4, #20]
 800db86:	e7e7      	b.n	800db58 <__d2b+0x54>
 800db88:	a801      	add	r0, sp, #4
 800db8a:	f7ff fcf1 	bl	800d570 <__lo0bits>
 800db8e:	9b01      	ldr	r3, [sp, #4]
 800db90:	6163      	str	r3, [r4, #20]
 800db92:	3020      	adds	r0, #32
 800db94:	2201      	movs	r2, #1
 800db96:	e7e5      	b.n	800db64 <__d2b+0x60>
 800db98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dba0:	6038      	str	r0, [r7, #0]
 800dba2:	6918      	ldr	r0, [r3, #16]
 800dba4:	f7ff fcc4 	bl	800d530 <__hi0bits>
 800dba8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbac:	e7e2      	b.n	800db74 <__d2b+0x70>
 800dbae:	bf00      	nop
 800dbb0:	0800f755 	.word	0x0800f755
 800dbb4:	0800f7d7 	.word	0x0800f7d7

0800dbb8 <__ratio>:
 800dbb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbc:	4688      	mov	r8, r1
 800dbbe:	4669      	mov	r1, sp
 800dbc0:	4681      	mov	r9, r0
 800dbc2:	f7ff ff55 	bl	800da70 <__b2d>
 800dbc6:	a901      	add	r1, sp, #4
 800dbc8:	4640      	mov	r0, r8
 800dbca:	ec55 4b10 	vmov	r4, r5, d0
 800dbce:	f7ff ff4f 	bl	800da70 <__b2d>
 800dbd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dbd6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dbda:	eba3 0c02 	sub.w	ip, r3, r2
 800dbde:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dbe2:	1a9b      	subs	r3, r3, r2
 800dbe4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dbe8:	ec51 0b10 	vmov	r0, r1, d0
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	bfd6      	itet	le
 800dbf0:	460a      	movle	r2, r1
 800dbf2:	462a      	movgt	r2, r5
 800dbf4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dbf8:	468b      	mov	fp, r1
 800dbfa:	462f      	mov	r7, r5
 800dbfc:	bfd4      	ite	le
 800dbfe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dc02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dc06:	4620      	mov	r0, r4
 800dc08:	ee10 2a10 	vmov	r2, s0
 800dc0c:	465b      	mov	r3, fp
 800dc0e:	4639      	mov	r1, r7
 800dc10:	f7f2 fe1c 	bl	800084c <__aeabi_ddiv>
 800dc14:	ec41 0b10 	vmov	d0, r0, r1
 800dc18:	b003      	add	sp, #12
 800dc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc1e <__copybits>:
 800dc1e:	3901      	subs	r1, #1
 800dc20:	b570      	push	{r4, r5, r6, lr}
 800dc22:	1149      	asrs	r1, r1, #5
 800dc24:	6914      	ldr	r4, [r2, #16]
 800dc26:	3101      	adds	r1, #1
 800dc28:	f102 0314 	add.w	r3, r2, #20
 800dc2c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc34:	1f05      	subs	r5, r0, #4
 800dc36:	42a3      	cmp	r3, r4
 800dc38:	d30c      	bcc.n	800dc54 <__copybits+0x36>
 800dc3a:	1aa3      	subs	r3, r4, r2
 800dc3c:	3b11      	subs	r3, #17
 800dc3e:	f023 0303 	bic.w	r3, r3, #3
 800dc42:	3211      	adds	r2, #17
 800dc44:	42a2      	cmp	r2, r4
 800dc46:	bf88      	it	hi
 800dc48:	2300      	movhi	r3, #0
 800dc4a:	4418      	add	r0, r3
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4288      	cmp	r0, r1
 800dc50:	d305      	bcc.n	800dc5e <__copybits+0x40>
 800dc52:	bd70      	pop	{r4, r5, r6, pc}
 800dc54:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc58:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc5c:	e7eb      	b.n	800dc36 <__copybits+0x18>
 800dc5e:	f840 3b04 	str.w	r3, [r0], #4
 800dc62:	e7f4      	b.n	800dc4e <__copybits+0x30>

0800dc64 <__any_on>:
 800dc64:	f100 0214 	add.w	r2, r0, #20
 800dc68:	6900      	ldr	r0, [r0, #16]
 800dc6a:	114b      	asrs	r3, r1, #5
 800dc6c:	4298      	cmp	r0, r3
 800dc6e:	b510      	push	{r4, lr}
 800dc70:	db11      	blt.n	800dc96 <__any_on+0x32>
 800dc72:	dd0a      	ble.n	800dc8a <__any_on+0x26>
 800dc74:	f011 011f 	ands.w	r1, r1, #31
 800dc78:	d007      	beq.n	800dc8a <__any_on+0x26>
 800dc7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc7e:	fa24 f001 	lsr.w	r0, r4, r1
 800dc82:	fa00 f101 	lsl.w	r1, r0, r1
 800dc86:	428c      	cmp	r4, r1
 800dc88:	d10b      	bne.n	800dca2 <__any_on+0x3e>
 800dc8a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc8e:	4293      	cmp	r3, r2
 800dc90:	d803      	bhi.n	800dc9a <__any_on+0x36>
 800dc92:	2000      	movs	r0, #0
 800dc94:	bd10      	pop	{r4, pc}
 800dc96:	4603      	mov	r3, r0
 800dc98:	e7f7      	b.n	800dc8a <__any_on+0x26>
 800dc9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc9e:	2900      	cmp	r1, #0
 800dca0:	d0f5      	beq.n	800dc8e <__any_on+0x2a>
 800dca2:	2001      	movs	r0, #1
 800dca4:	e7f6      	b.n	800dc94 <__any_on+0x30>

0800dca6 <_realloc_r>:
 800dca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcaa:	4680      	mov	r8, r0
 800dcac:	4614      	mov	r4, r2
 800dcae:	460e      	mov	r6, r1
 800dcb0:	b921      	cbnz	r1, 800dcbc <_realloc_r+0x16>
 800dcb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	f7ff b9fc 	b.w	800d0b4 <_malloc_r>
 800dcbc:	b92a      	cbnz	r2, 800dcca <_realloc_r+0x24>
 800dcbe:	f7fe fb91 	bl	800c3e4 <_free_r>
 800dcc2:	4625      	mov	r5, r4
 800dcc4:	4628      	mov	r0, r5
 800dcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcca:	f000 f9d5 	bl	800e078 <_malloc_usable_size_r>
 800dcce:	4284      	cmp	r4, r0
 800dcd0:	4607      	mov	r7, r0
 800dcd2:	d802      	bhi.n	800dcda <_realloc_r+0x34>
 800dcd4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcd8:	d812      	bhi.n	800dd00 <_realloc_r+0x5a>
 800dcda:	4621      	mov	r1, r4
 800dcdc:	4640      	mov	r0, r8
 800dcde:	f7ff f9e9 	bl	800d0b4 <_malloc_r>
 800dce2:	4605      	mov	r5, r0
 800dce4:	2800      	cmp	r0, #0
 800dce6:	d0ed      	beq.n	800dcc4 <_realloc_r+0x1e>
 800dce8:	42bc      	cmp	r4, r7
 800dcea:	4622      	mov	r2, r4
 800dcec:	4631      	mov	r1, r6
 800dcee:	bf28      	it	cs
 800dcf0:	463a      	movcs	r2, r7
 800dcf2:	f7fd fcde 	bl	800b6b2 <memcpy>
 800dcf6:	4631      	mov	r1, r6
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	f7fe fb73 	bl	800c3e4 <_free_r>
 800dcfe:	e7e1      	b.n	800dcc4 <_realloc_r+0x1e>
 800dd00:	4635      	mov	r5, r6
 800dd02:	e7df      	b.n	800dcc4 <_realloc_r+0x1e>

0800dd04 <__swbuf_r>:
 800dd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd06:	460e      	mov	r6, r1
 800dd08:	4614      	mov	r4, r2
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	b118      	cbz	r0, 800dd16 <__swbuf_r+0x12>
 800dd0e:	6a03      	ldr	r3, [r0, #32]
 800dd10:	b90b      	cbnz	r3, 800dd16 <__swbuf_r+0x12>
 800dd12:	f7fc fcf1 	bl	800a6f8 <__sinit>
 800dd16:	69a3      	ldr	r3, [r4, #24]
 800dd18:	60a3      	str	r3, [r4, #8]
 800dd1a:	89a3      	ldrh	r3, [r4, #12]
 800dd1c:	071a      	lsls	r2, r3, #28
 800dd1e:	d525      	bpl.n	800dd6c <__swbuf_r+0x68>
 800dd20:	6923      	ldr	r3, [r4, #16]
 800dd22:	b31b      	cbz	r3, 800dd6c <__swbuf_r+0x68>
 800dd24:	6823      	ldr	r3, [r4, #0]
 800dd26:	6922      	ldr	r2, [r4, #16]
 800dd28:	1a98      	subs	r0, r3, r2
 800dd2a:	6963      	ldr	r3, [r4, #20]
 800dd2c:	b2f6      	uxtb	r6, r6
 800dd2e:	4283      	cmp	r3, r0
 800dd30:	4637      	mov	r7, r6
 800dd32:	dc04      	bgt.n	800dd3e <__swbuf_r+0x3a>
 800dd34:	4621      	mov	r1, r4
 800dd36:	4628      	mov	r0, r5
 800dd38:	f7ff fad4 	bl	800d2e4 <_fflush_r>
 800dd3c:	b9e0      	cbnz	r0, 800dd78 <__swbuf_r+0x74>
 800dd3e:	68a3      	ldr	r3, [r4, #8]
 800dd40:	3b01      	subs	r3, #1
 800dd42:	60a3      	str	r3, [r4, #8]
 800dd44:	6823      	ldr	r3, [r4, #0]
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	6022      	str	r2, [r4, #0]
 800dd4a:	701e      	strb	r6, [r3, #0]
 800dd4c:	6962      	ldr	r2, [r4, #20]
 800dd4e:	1c43      	adds	r3, r0, #1
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d004      	beq.n	800dd5e <__swbuf_r+0x5a>
 800dd54:	89a3      	ldrh	r3, [r4, #12]
 800dd56:	07db      	lsls	r3, r3, #31
 800dd58:	d506      	bpl.n	800dd68 <__swbuf_r+0x64>
 800dd5a:	2e0a      	cmp	r6, #10
 800dd5c:	d104      	bne.n	800dd68 <__swbuf_r+0x64>
 800dd5e:	4621      	mov	r1, r4
 800dd60:	4628      	mov	r0, r5
 800dd62:	f7ff fabf 	bl	800d2e4 <_fflush_r>
 800dd66:	b938      	cbnz	r0, 800dd78 <__swbuf_r+0x74>
 800dd68:	4638      	mov	r0, r7
 800dd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd6c:	4621      	mov	r1, r4
 800dd6e:	4628      	mov	r0, r5
 800dd70:	f000 f806 	bl	800dd80 <__swsetup_r>
 800dd74:	2800      	cmp	r0, #0
 800dd76:	d0d5      	beq.n	800dd24 <__swbuf_r+0x20>
 800dd78:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dd7c:	e7f4      	b.n	800dd68 <__swbuf_r+0x64>
	...

0800dd80 <__swsetup_r>:
 800dd80:	b538      	push	{r3, r4, r5, lr}
 800dd82:	4b2a      	ldr	r3, [pc, #168]	; (800de2c <__swsetup_r+0xac>)
 800dd84:	4605      	mov	r5, r0
 800dd86:	6818      	ldr	r0, [r3, #0]
 800dd88:	460c      	mov	r4, r1
 800dd8a:	b118      	cbz	r0, 800dd94 <__swsetup_r+0x14>
 800dd8c:	6a03      	ldr	r3, [r0, #32]
 800dd8e:	b90b      	cbnz	r3, 800dd94 <__swsetup_r+0x14>
 800dd90:	f7fc fcb2 	bl	800a6f8 <__sinit>
 800dd94:	89a3      	ldrh	r3, [r4, #12]
 800dd96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd9a:	0718      	lsls	r0, r3, #28
 800dd9c:	d422      	bmi.n	800dde4 <__swsetup_r+0x64>
 800dd9e:	06d9      	lsls	r1, r3, #27
 800dda0:	d407      	bmi.n	800ddb2 <__swsetup_r+0x32>
 800dda2:	2309      	movs	r3, #9
 800dda4:	602b      	str	r3, [r5, #0]
 800dda6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddaa:	81a3      	strh	r3, [r4, #12]
 800ddac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddb0:	e034      	b.n	800de1c <__swsetup_r+0x9c>
 800ddb2:	0758      	lsls	r0, r3, #29
 800ddb4:	d512      	bpl.n	800dddc <__swsetup_r+0x5c>
 800ddb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddb8:	b141      	cbz	r1, 800ddcc <__swsetup_r+0x4c>
 800ddba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddbe:	4299      	cmp	r1, r3
 800ddc0:	d002      	beq.n	800ddc8 <__swsetup_r+0x48>
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f7fe fb0e 	bl	800c3e4 <_free_r>
 800ddc8:	2300      	movs	r3, #0
 800ddca:	6363      	str	r3, [r4, #52]	; 0x34
 800ddcc:	89a3      	ldrh	r3, [r4, #12]
 800ddce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ddd2:	81a3      	strh	r3, [r4, #12]
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	6063      	str	r3, [r4, #4]
 800ddd8:	6923      	ldr	r3, [r4, #16]
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	89a3      	ldrh	r3, [r4, #12]
 800ddde:	f043 0308 	orr.w	r3, r3, #8
 800dde2:	81a3      	strh	r3, [r4, #12]
 800dde4:	6923      	ldr	r3, [r4, #16]
 800dde6:	b94b      	cbnz	r3, 800ddfc <__swsetup_r+0x7c>
 800dde8:	89a3      	ldrh	r3, [r4, #12]
 800ddea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddf2:	d003      	beq.n	800ddfc <__swsetup_r+0x7c>
 800ddf4:	4621      	mov	r1, r4
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f000 f84d 	bl	800de96 <__smakebuf_r>
 800ddfc:	89a0      	ldrh	r0, [r4, #12]
 800ddfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de02:	f010 0301 	ands.w	r3, r0, #1
 800de06:	d00a      	beq.n	800de1e <__swsetup_r+0x9e>
 800de08:	2300      	movs	r3, #0
 800de0a:	60a3      	str	r3, [r4, #8]
 800de0c:	6963      	ldr	r3, [r4, #20]
 800de0e:	425b      	negs	r3, r3
 800de10:	61a3      	str	r3, [r4, #24]
 800de12:	6923      	ldr	r3, [r4, #16]
 800de14:	b943      	cbnz	r3, 800de28 <__swsetup_r+0xa8>
 800de16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de1a:	d1c4      	bne.n	800dda6 <__swsetup_r+0x26>
 800de1c:	bd38      	pop	{r3, r4, r5, pc}
 800de1e:	0781      	lsls	r1, r0, #30
 800de20:	bf58      	it	pl
 800de22:	6963      	ldrpl	r3, [r4, #20]
 800de24:	60a3      	str	r3, [r4, #8]
 800de26:	e7f4      	b.n	800de12 <__swsetup_r+0x92>
 800de28:	2000      	movs	r0, #0
 800de2a:	e7f7      	b.n	800de1c <__swsetup_r+0x9c>
 800de2c:	200001fc 	.word	0x200001fc

0800de30 <__ascii_wctomb>:
 800de30:	b149      	cbz	r1, 800de46 <__ascii_wctomb+0x16>
 800de32:	2aff      	cmp	r2, #255	; 0xff
 800de34:	bf85      	ittet	hi
 800de36:	238a      	movhi	r3, #138	; 0x8a
 800de38:	6003      	strhi	r3, [r0, #0]
 800de3a:	700a      	strbls	r2, [r1, #0]
 800de3c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800de40:	bf98      	it	ls
 800de42:	2001      	movls	r0, #1
 800de44:	4770      	bx	lr
 800de46:	4608      	mov	r0, r1
 800de48:	4770      	bx	lr

0800de4a <__swhatbuf_r>:
 800de4a:	b570      	push	{r4, r5, r6, lr}
 800de4c:	460c      	mov	r4, r1
 800de4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de52:	2900      	cmp	r1, #0
 800de54:	b096      	sub	sp, #88	; 0x58
 800de56:	4615      	mov	r5, r2
 800de58:	461e      	mov	r6, r3
 800de5a:	da0d      	bge.n	800de78 <__swhatbuf_r+0x2e>
 800de5c:	89a3      	ldrh	r3, [r4, #12]
 800de5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de62:	f04f 0100 	mov.w	r1, #0
 800de66:	bf0c      	ite	eq
 800de68:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de6c:	2340      	movne	r3, #64	; 0x40
 800de6e:	2000      	movs	r0, #0
 800de70:	6031      	str	r1, [r6, #0]
 800de72:	602b      	str	r3, [r5, #0]
 800de74:	b016      	add	sp, #88	; 0x58
 800de76:	bd70      	pop	{r4, r5, r6, pc}
 800de78:	466a      	mov	r2, sp
 800de7a:	f000 f897 	bl	800dfac <_fstat_r>
 800de7e:	2800      	cmp	r0, #0
 800de80:	dbec      	blt.n	800de5c <__swhatbuf_r+0x12>
 800de82:	9901      	ldr	r1, [sp, #4]
 800de84:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de88:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de8c:	4259      	negs	r1, r3
 800de8e:	4159      	adcs	r1, r3
 800de90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de94:	e7eb      	b.n	800de6e <__swhatbuf_r+0x24>

0800de96 <__smakebuf_r>:
 800de96:	898b      	ldrh	r3, [r1, #12]
 800de98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de9a:	079d      	lsls	r5, r3, #30
 800de9c:	4606      	mov	r6, r0
 800de9e:	460c      	mov	r4, r1
 800dea0:	d507      	bpl.n	800deb2 <__smakebuf_r+0x1c>
 800dea2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dea6:	6023      	str	r3, [r4, #0]
 800dea8:	6123      	str	r3, [r4, #16]
 800deaa:	2301      	movs	r3, #1
 800deac:	6163      	str	r3, [r4, #20]
 800deae:	b002      	add	sp, #8
 800deb0:	bd70      	pop	{r4, r5, r6, pc}
 800deb2:	ab01      	add	r3, sp, #4
 800deb4:	466a      	mov	r2, sp
 800deb6:	f7ff ffc8 	bl	800de4a <__swhatbuf_r>
 800deba:	9900      	ldr	r1, [sp, #0]
 800debc:	4605      	mov	r5, r0
 800debe:	4630      	mov	r0, r6
 800dec0:	f7ff f8f8 	bl	800d0b4 <_malloc_r>
 800dec4:	b948      	cbnz	r0, 800deda <__smakebuf_r+0x44>
 800dec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800deca:	059a      	lsls	r2, r3, #22
 800decc:	d4ef      	bmi.n	800deae <__smakebuf_r+0x18>
 800dece:	f023 0303 	bic.w	r3, r3, #3
 800ded2:	f043 0302 	orr.w	r3, r3, #2
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	e7e3      	b.n	800dea2 <__smakebuf_r+0xc>
 800deda:	89a3      	ldrh	r3, [r4, #12]
 800dedc:	6020      	str	r0, [r4, #0]
 800dede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dee2:	81a3      	strh	r3, [r4, #12]
 800dee4:	9b00      	ldr	r3, [sp, #0]
 800dee6:	6163      	str	r3, [r4, #20]
 800dee8:	9b01      	ldr	r3, [sp, #4]
 800deea:	6120      	str	r0, [r4, #16]
 800deec:	b15b      	cbz	r3, 800df06 <__smakebuf_r+0x70>
 800deee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800def2:	4630      	mov	r0, r6
 800def4:	f000 f86c 	bl	800dfd0 <_isatty_r>
 800def8:	b128      	cbz	r0, 800df06 <__smakebuf_r+0x70>
 800defa:	89a3      	ldrh	r3, [r4, #12]
 800defc:	f023 0303 	bic.w	r3, r3, #3
 800df00:	f043 0301 	orr.w	r3, r3, #1
 800df04:	81a3      	strh	r3, [r4, #12]
 800df06:	89a3      	ldrh	r3, [r4, #12]
 800df08:	431d      	orrs	r5, r3
 800df0a:	81a5      	strh	r5, [r4, #12]
 800df0c:	e7cf      	b.n	800deae <__smakebuf_r+0x18>

0800df0e <_putc_r>:
 800df0e:	b570      	push	{r4, r5, r6, lr}
 800df10:	460d      	mov	r5, r1
 800df12:	4614      	mov	r4, r2
 800df14:	4606      	mov	r6, r0
 800df16:	b118      	cbz	r0, 800df20 <_putc_r+0x12>
 800df18:	6a03      	ldr	r3, [r0, #32]
 800df1a:	b90b      	cbnz	r3, 800df20 <_putc_r+0x12>
 800df1c:	f7fc fbec 	bl	800a6f8 <__sinit>
 800df20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df22:	07d8      	lsls	r0, r3, #31
 800df24:	d405      	bmi.n	800df32 <_putc_r+0x24>
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	0599      	lsls	r1, r3, #22
 800df2a:	d402      	bmi.n	800df32 <_putc_r+0x24>
 800df2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df2e:	f7fd fbbe 	bl	800b6ae <__retarget_lock_acquire_recursive>
 800df32:	68a3      	ldr	r3, [r4, #8]
 800df34:	3b01      	subs	r3, #1
 800df36:	2b00      	cmp	r3, #0
 800df38:	60a3      	str	r3, [r4, #8]
 800df3a:	da05      	bge.n	800df48 <_putc_r+0x3a>
 800df3c:	69a2      	ldr	r2, [r4, #24]
 800df3e:	4293      	cmp	r3, r2
 800df40:	db12      	blt.n	800df68 <_putc_r+0x5a>
 800df42:	b2eb      	uxtb	r3, r5
 800df44:	2b0a      	cmp	r3, #10
 800df46:	d00f      	beq.n	800df68 <_putc_r+0x5a>
 800df48:	6823      	ldr	r3, [r4, #0]
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	6022      	str	r2, [r4, #0]
 800df4e:	701d      	strb	r5, [r3, #0]
 800df50:	b2ed      	uxtb	r5, r5
 800df52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df54:	07da      	lsls	r2, r3, #31
 800df56:	d405      	bmi.n	800df64 <_putc_r+0x56>
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	059b      	lsls	r3, r3, #22
 800df5c:	d402      	bmi.n	800df64 <_putc_r+0x56>
 800df5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df60:	f7fd fba6 	bl	800b6b0 <__retarget_lock_release_recursive>
 800df64:	4628      	mov	r0, r5
 800df66:	bd70      	pop	{r4, r5, r6, pc}
 800df68:	4629      	mov	r1, r5
 800df6a:	4622      	mov	r2, r4
 800df6c:	4630      	mov	r0, r6
 800df6e:	f7ff fec9 	bl	800dd04 <__swbuf_r>
 800df72:	4605      	mov	r5, r0
 800df74:	e7ed      	b.n	800df52 <_putc_r+0x44>

0800df76 <memmove>:
 800df76:	4288      	cmp	r0, r1
 800df78:	b510      	push	{r4, lr}
 800df7a:	eb01 0402 	add.w	r4, r1, r2
 800df7e:	d902      	bls.n	800df86 <memmove+0x10>
 800df80:	4284      	cmp	r4, r0
 800df82:	4623      	mov	r3, r4
 800df84:	d807      	bhi.n	800df96 <memmove+0x20>
 800df86:	1e43      	subs	r3, r0, #1
 800df88:	42a1      	cmp	r1, r4
 800df8a:	d008      	beq.n	800df9e <memmove+0x28>
 800df8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df90:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df94:	e7f8      	b.n	800df88 <memmove+0x12>
 800df96:	4402      	add	r2, r0
 800df98:	4601      	mov	r1, r0
 800df9a:	428a      	cmp	r2, r1
 800df9c:	d100      	bne.n	800dfa0 <memmove+0x2a>
 800df9e:	bd10      	pop	{r4, pc}
 800dfa0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfa4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dfa8:	e7f7      	b.n	800df9a <memmove+0x24>
	...

0800dfac <_fstat_r>:
 800dfac:	b538      	push	{r3, r4, r5, lr}
 800dfae:	4d07      	ldr	r5, [pc, #28]	; (800dfcc <_fstat_r+0x20>)
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	4604      	mov	r4, r0
 800dfb4:	4608      	mov	r0, r1
 800dfb6:	4611      	mov	r1, r2
 800dfb8:	602b      	str	r3, [r5, #0]
 800dfba:	f7f5 f974 	bl	80032a6 <_fstat>
 800dfbe:	1c43      	adds	r3, r0, #1
 800dfc0:	d102      	bne.n	800dfc8 <_fstat_r+0x1c>
 800dfc2:	682b      	ldr	r3, [r5, #0]
 800dfc4:	b103      	cbz	r3, 800dfc8 <_fstat_r+0x1c>
 800dfc6:	6023      	str	r3, [r4, #0]
 800dfc8:	bd38      	pop	{r3, r4, r5, pc}
 800dfca:	bf00      	nop
 800dfcc:	20000810 	.word	0x20000810

0800dfd0 <_isatty_r>:
 800dfd0:	b538      	push	{r3, r4, r5, lr}
 800dfd2:	4d06      	ldr	r5, [pc, #24]	; (800dfec <_isatty_r+0x1c>)
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	4604      	mov	r4, r0
 800dfd8:	4608      	mov	r0, r1
 800dfda:	602b      	str	r3, [r5, #0]
 800dfdc:	f7f5 f973 	bl	80032c6 <_isatty>
 800dfe0:	1c43      	adds	r3, r0, #1
 800dfe2:	d102      	bne.n	800dfea <_isatty_r+0x1a>
 800dfe4:	682b      	ldr	r3, [r5, #0]
 800dfe6:	b103      	cbz	r3, 800dfea <_isatty_r+0x1a>
 800dfe8:	6023      	str	r3, [r4, #0]
 800dfea:	bd38      	pop	{r3, r4, r5, pc}
 800dfec:	20000810 	.word	0x20000810

0800dff0 <_sbrk_r>:
 800dff0:	b538      	push	{r3, r4, r5, lr}
 800dff2:	4d06      	ldr	r5, [pc, #24]	; (800e00c <_sbrk_r+0x1c>)
 800dff4:	2300      	movs	r3, #0
 800dff6:	4604      	mov	r4, r0
 800dff8:	4608      	mov	r0, r1
 800dffa:	602b      	str	r3, [r5, #0]
 800dffc:	f7f5 f97c 	bl	80032f8 <_sbrk>
 800e000:	1c43      	adds	r3, r0, #1
 800e002:	d102      	bne.n	800e00a <_sbrk_r+0x1a>
 800e004:	682b      	ldr	r3, [r5, #0]
 800e006:	b103      	cbz	r3, 800e00a <_sbrk_r+0x1a>
 800e008:	6023      	str	r3, [r4, #0]
 800e00a:	bd38      	pop	{r3, r4, r5, pc}
 800e00c:	20000810 	.word	0x20000810

0800e010 <__assert_func>:
 800e010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e012:	4614      	mov	r4, r2
 800e014:	461a      	mov	r2, r3
 800e016:	4b09      	ldr	r3, [pc, #36]	; (800e03c <__assert_func+0x2c>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4605      	mov	r5, r0
 800e01c:	68d8      	ldr	r0, [r3, #12]
 800e01e:	b14c      	cbz	r4, 800e034 <__assert_func+0x24>
 800e020:	4b07      	ldr	r3, [pc, #28]	; (800e040 <__assert_func+0x30>)
 800e022:	9100      	str	r1, [sp, #0]
 800e024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e028:	4906      	ldr	r1, [pc, #24]	; (800e044 <__assert_func+0x34>)
 800e02a:	462b      	mov	r3, r5
 800e02c:	f000 f82c 	bl	800e088 <fiprintf>
 800e030:	f000 f83c 	bl	800e0ac <abort>
 800e034:	4b04      	ldr	r3, [pc, #16]	; (800e048 <__assert_func+0x38>)
 800e036:	461c      	mov	r4, r3
 800e038:	e7f3      	b.n	800e022 <__assert_func+0x12>
 800e03a:	bf00      	nop
 800e03c:	200001fc 	.word	0x200001fc
 800e040:	0800f92c 	.word	0x0800f92c
 800e044:	0800f939 	.word	0x0800f939
 800e048:	0800f967 	.word	0x0800f967

0800e04c <_calloc_r>:
 800e04c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e04e:	fba1 2402 	umull	r2, r4, r1, r2
 800e052:	b94c      	cbnz	r4, 800e068 <_calloc_r+0x1c>
 800e054:	4611      	mov	r1, r2
 800e056:	9201      	str	r2, [sp, #4]
 800e058:	f7ff f82c 	bl	800d0b4 <_malloc_r>
 800e05c:	9a01      	ldr	r2, [sp, #4]
 800e05e:	4605      	mov	r5, r0
 800e060:	b930      	cbnz	r0, 800e070 <_calloc_r+0x24>
 800e062:	4628      	mov	r0, r5
 800e064:	b003      	add	sp, #12
 800e066:	bd30      	pop	{r4, r5, pc}
 800e068:	220c      	movs	r2, #12
 800e06a:	6002      	str	r2, [r0, #0]
 800e06c:	2500      	movs	r5, #0
 800e06e:	e7f8      	b.n	800e062 <_calloc_r+0x16>
 800e070:	4621      	mov	r1, r4
 800e072:	f7fd fa9f 	bl	800b5b4 <memset>
 800e076:	e7f4      	b.n	800e062 <_calloc_r+0x16>

0800e078 <_malloc_usable_size_r>:
 800e078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e07c:	1f18      	subs	r0, r3, #4
 800e07e:	2b00      	cmp	r3, #0
 800e080:	bfbc      	itt	lt
 800e082:	580b      	ldrlt	r3, [r1, r0]
 800e084:	18c0      	addlt	r0, r0, r3
 800e086:	4770      	bx	lr

0800e088 <fiprintf>:
 800e088:	b40e      	push	{r1, r2, r3}
 800e08a:	b503      	push	{r0, r1, lr}
 800e08c:	4601      	mov	r1, r0
 800e08e:	ab03      	add	r3, sp, #12
 800e090:	4805      	ldr	r0, [pc, #20]	; (800e0a8 <fiprintf+0x20>)
 800e092:	f853 2b04 	ldr.w	r2, [r3], #4
 800e096:	6800      	ldr	r0, [r0, #0]
 800e098:	9301      	str	r3, [sp, #4]
 800e09a:	f7fe fec9 	bl	800ce30 <_vfiprintf_r>
 800e09e:	b002      	add	sp, #8
 800e0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0a4:	b003      	add	sp, #12
 800e0a6:	4770      	bx	lr
 800e0a8:	200001fc 	.word	0x200001fc

0800e0ac <abort>:
 800e0ac:	b508      	push	{r3, lr}
 800e0ae:	2006      	movs	r0, #6
 800e0b0:	f000 f82c 	bl	800e10c <raise>
 800e0b4:	2001      	movs	r0, #1
 800e0b6:	f7f5 f8a7 	bl	8003208 <_exit>

0800e0ba <_raise_r>:
 800e0ba:	291f      	cmp	r1, #31
 800e0bc:	b538      	push	{r3, r4, r5, lr}
 800e0be:	4604      	mov	r4, r0
 800e0c0:	460d      	mov	r5, r1
 800e0c2:	d904      	bls.n	800e0ce <_raise_r+0x14>
 800e0c4:	2316      	movs	r3, #22
 800e0c6:	6003      	str	r3, [r0, #0]
 800e0c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0cc:	bd38      	pop	{r3, r4, r5, pc}
 800e0ce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e0d0:	b112      	cbz	r2, 800e0d8 <_raise_r+0x1e>
 800e0d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e0d6:	b94b      	cbnz	r3, 800e0ec <_raise_r+0x32>
 800e0d8:	4620      	mov	r0, r4
 800e0da:	f000 f831 	bl	800e140 <_getpid_r>
 800e0de:	462a      	mov	r2, r5
 800e0e0:	4601      	mov	r1, r0
 800e0e2:	4620      	mov	r0, r4
 800e0e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0e8:	f000 b818 	b.w	800e11c <_kill_r>
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d00a      	beq.n	800e106 <_raise_r+0x4c>
 800e0f0:	1c59      	adds	r1, r3, #1
 800e0f2:	d103      	bne.n	800e0fc <_raise_r+0x42>
 800e0f4:	2316      	movs	r3, #22
 800e0f6:	6003      	str	r3, [r0, #0]
 800e0f8:	2001      	movs	r0, #1
 800e0fa:	e7e7      	b.n	800e0cc <_raise_r+0x12>
 800e0fc:	2400      	movs	r4, #0
 800e0fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e102:	4628      	mov	r0, r5
 800e104:	4798      	blx	r3
 800e106:	2000      	movs	r0, #0
 800e108:	e7e0      	b.n	800e0cc <_raise_r+0x12>
	...

0800e10c <raise>:
 800e10c:	4b02      	ldr	r3, [pc, #8]	; (800e118 <raise+0xc>)
 800e10e:	4601      	mov	r1, r0
 800e110:	6818      	ldr	r0, [r3, #0]
 800e112:	f7ff bfd2 	b.w	800e0ba <_raise_r>
 800e116:	bf00      	nop
 800e118:	200001fc 	.word	0x200001fc

0800e11c <_kill_r>:
 800e11c:	b538      	push	{r3, r4, r5, lr}
 800e11e:	4d07      	ldr	r5, [pc, #28]	; (800e13c <_kill_r+0x20>)
 800e120:	2300      	movs	r3, #0
 800e122:	4604      	mov	r4, r0
 800e124:	4608      	mov	r0, r1
 800e126:	4611      	mov	r1, r2
 800e128:	602b      	str	r3, [r5, #0]
 800e12a:	f7f5 f85d 	bl	80031e8 <_kill>
 800e12e:	1c43      	adds	r3, r0, #1
 800e130:	d102      	bne.n	800e138 <_kill_r+0x1c>
 800e132:	682b      	ldr	r3, [r5, #0]
 800e134:	b103      	cbz	r3, 800e138 <_kill_r+0x1c>
 800e136:	6023      	str	r3, [r4, #0]
 800e138:	bd38      	pop	{r3, r4, r5, pc}
 800e13a:	bf00      	nop
 800e13c:	20000810 	.word	0x20000810

0800e140 <_getpid_r>:
 800e140:	f7f5 b84a 	b.w	80031d8 <_getpid>

0800e144 <sqrt>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	ed2d 8b02 	vpush	{d8}
 800e14a:	ec55 4b10 	vmov	r4, r5, d0
 800e14e:	f000 f87b 	bl	800e248 <__ieee754_sqrt>
 800e152:	4622      	mov	r2, r4
 800e154:	462b      	mov	r3, r5
 800e156:	4620      	mov	r0, r4
 800e158:	4629      	mov	r1, r5
 800e15a:	eeb0 8a40 	vmov.f32	s16, s0
 800e15e:	eef0 8a60 	vmov.f32	s17, s1
 800e162:	f7f2 fce3 	bl	8000b2c <__aeabi_dcmpun>
 800e166:	b990      	cbnz	r0, 800e18e <sqrt+0x4a>
 800e168:	2200      	movs	r2, #0
 800e16a:	2300      	movs	r3, #0
 800e16c:	4620      	mov	r0, r4
 800e16e:	4629      	mov	r1, r5
 800e170:	f7f2 fcb4 	bl	8000adc <__aeabi_dcmplt>
 800e174:	b158      	cbz	r0, 800e18e <sqrt+0x4a>
 800e176:	f7fd fa6f 	bl	800b658 <__errno>
 800e17a:	2321      	movs	r3, #33	; 0x21
 800e17c:	6003      	str	r3, [r0, #0]
 800e17e:	2200      	movs	r2, #0
 800e180:	2300      	movs	r3, #0
 800e182:	4610      	mov	r0, r2
 800e184:	4619      	mov	r1, r3
 800e186:	f7f2 fb61 	bl	800084c <__aeabi_ddiv>
 800e18a:	ec41 0b18 	vmov	d8, r0, r1
 800e18e:	eeb0 0a48 	vmov.f32	s0, s16
 800e192:	eef0 0a68 	vmov.f32	s1, s17
 800e196:	ecbd 8b02 	vpop	{d8}
 800e19a:	bd38      	pop	{r3, r4, r5, pc}
 800e19c:	0000      	movs	r0, r0
	...

0800e1a0 <cos>:
 800e1a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1a2:	ec53 2b10 	vmov	r2, r3, d0
 800e1a6:	4826      	ldr	r0, [pc, #152]	; (800e240 <cos+0xa0>)
 800e1a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e1ac:	4281      	cmp	r1, r0
 800e1ae:	dc06      	bgt.n	800e1be <cos+0x1e>
 800e1b0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e238 <cos+0x98>
 800e1b4:	b005      	add	sp, #20
 800e1b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1ba:	f000 be79 	b.w	800eeb0 <__kernel_cos>
 800e1be:	4821      	ldr	r0, [pc, #132]	; (800e244 <cos+0xa4>)
 800e1c0:	4281      	cmp	r1, r0
 800e1c2:	dd09      	ble.n	800e1d8 <cos+0x38>
 800e1c4:	ee10 0a10 	vmov	r0, s0
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	f7f2 f85d 	bl	8000288 <__aeabi_dsub>
 800e1ce:	ec41 0b10 	vmov	d0, r0, r1
 800e1d2:	b005      	add	sp, #20
 800e1d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800e1d8:	4668      	mov	r0, sp
 800e1da:	f000 f911 	bl	800e400 <__ieee754_rem_pio2>
 800e1de:	f000 0003 	and.w	r0, r0, #3
 800e1e2:	2801      	cmp	r0, #1
 800e1e4:	d00b      	beq.n	800e1fe <cos+0x5e>
 800e1e6:	2802      	cmp	r0, #2
 800e1e8:	d016      	beq.n	800e218 <cos+0x78>
 800e1ea:	b9e0      	cbnz	r0, 800e226 <cos+0x86>
 800e1ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e1f0:	ed9d 0b00 	vldr	d0, [sp]
 800e1f4:	f000 fe5c 	bl	800eeb0 <__kernel_cos>
 800e1f8:	ec51 0b10 	vmov	r0, r1, d0
 800e1fc:	e7e7      	b.n	800e1ce <cos+0x2e>
 800e1fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e202:	ed9d 0b00 	vldr	d0, [sp]
 800e206:	f000 ff1b 	bl	800f040 <__kernel_sin>
 800e20a:	ec53 2b10 	vmov	r2, r3, d0
 800e20e:	ee10 0a10 	vmov	r0, s0
 800e212:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e216:	e7da      	b.n	800e1ce <cos+0x2e>
 800e218:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e21c:	ed9d 0b00 	vldr	d0, [sp]
 800e220:	f000 fe46 	bl	800eeb0 <__kernel_cos>
 800e224:	e7f1      	b.n	800e20a <cos+0x6a>
 800e226:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e22a:	ed9d 0b00 	vldr	d0, [sp]
 800e22e:	2001      	movs	r0, #1
 800e230:	f000 ff06 	bl	800f040 <__kernel_sin>
 800e234:	e7e0      	b.n	800e1f8 <cos+0x58>
 800e236:	bf00      	nop
	...
 800e240:	3fe921fb 	.word	0x3fe921fb
 800e244:	7fefffff 	.word	0x7fefffff

0800e248 <__ieee754_sqrt>:
 800e248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	ec55 4b10 	vmov	r4, r5, d0
 800e250:	4e67      	ldr	r6, [pc, #412]	; (800e3f0 <__ieee754_sqrt+0x1a8>)
 800e252:	43ae      	bics	r6, r5
 800e254:	ee10 0a10 	vmov	r0, s0
 800e258:	ee10 2a10 	vmov	r2, s0
 800e25c:	4629      	mov	r1, r5
 800e25e:	462b      	mov	r3, r5
 800e260:	d10d      	bne.n	800e27e <__ieee754_sqrt+0x36>
 800e262:	f7f2 f9c9 	bl	80005f8 <__aeabi_dmul>
 800e266:	4602      	mov	r2, r0
 800e268:	460b      	mov	r3, r1
 800e26a:	4620      	mov	r0, r4
 800e26c:	4629      	mov	r1, r5
 800e26e:	f7f2 f80d 	bl	800028c <__adddf3>
 800e272:	4604      	mov	r4, r0
 800e274:	460d      	mov	r5, r1
 800e276:	ec45 4b10 	vmov	d0, r4, r5
 800e27a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e27e:	2d00      	cmp	r5, #0
 800e280:	dc0b      	bgt.n	800e29a <__ieee754_sqrt+0x52>
 800e282:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e286:	4326      	orrs	r6, r4
 800e288:	d0f5      	beq.n	800e276 <__ieee754_sqrt+0x2e>
 800e28a:	b135      	cbz	r5, 800e29a <__ieee754_sqrt+0x52>
 800e28c:	f7f1 fffc 	bl	8000288 <__aeabi_dsub>
 800e290:	4602      	mov	r2, r0
 800e292:	460b      	mov	r3, r1
 800e294:	f7f2 fada 	bl	800084c <__aeabi_ddiv>
 800e298:	e7eb      	b.n	800e272 <__ieee754_sqrt+0x2a>
 800e29a:	1509      	asrs	r1, r1, #20
 800e29c:	f000 808d 	beq.w	800e3ba <__ieee754_sqrt+0x172>
 800e2a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2a4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e2a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2ac:	07c9      	lsls	r1, r1, #31
 800e2ae:	bf5c      	itt	pl
 800e2b0:	005b      	lslpl	r3, r3, #1
 800e2b2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e2b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e2ba:	bf58      	it	pl
 800e2bc:	0052      	lslpl	r2, r2, #1
 800e2be:	2500      	movs	r5, #0
 800e2c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e2c4:	1076      	asrs	r6, r6, #1
 800e2c6:	0052      	lsls	r2, r2, #1
 800e2c8:	f04f 0e16 	mov.w	lr, #22
 800e2cc:	46ac      	mov	ip, r5
 800e2ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e2d2:	eb0c 0001 	add.w	r0, ip, r1
 800e2d6:	4298      	cmp	r0, r3
 800e2d8:	bfde      	ittt	le
 800e2da:	1a1b      	suble	r3, r3, r0
 800e2dc:	eb00 0c01 	addle.w	ip, r0, r1
 800e2e0:	186d      	addle	r5, r5, r1
 800e2e2:	005b      	lsls	r3, r3, #1
 800e2e4:	f1be 0e01 	subs.w	lr, lr, #1
 800e2e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e2ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e2f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e2f4:	d1ed      	bne.n	800e2d2 <__ieee754_sqrt+0x8a>
 800e2f6:	4674      	mov	r4, lr
 800e2f8:	2720      	movs	r7, #32
 800e2fa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e2fe:	4563      	cmp	r3, ip
 800e300:	eb01 000e 	add.w	r0, r1, lr
 800e304:	dc02      	bgt.n	800e30c <__ieee754_sqrt+0xc4>
 800e306:	d113      	bne.n	800e330 <__ieee754_sqrt+0xe8>
 800e308:	4290      	cmp	r0, r2
 800e30a:	d811      	bhi.n	800e330 <__ieee754_sqrt+0xe8>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	eb00 0e01 	add.w	lr, r0, r1
 800e312:	da57      	bge.n	800e3c4 <__ieee754_sqrt+0x17c>
 800e314:	f1be 0f00 	cmp.w	lr, #0
 800e318:	db54      	blt.n	800e3c4 <__ieee754_sqrt+0x17c>
 800e31a:	f10c 0801 	add.w	r8, ip, #1
 800e31e:	eba3 030c 	sub.w	r3, r3, ip
 800e322:	4290      	cmp	r0, r2
 800e324:	bf88      	it	hi
 800e326:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800e32a:	1a12      	subs	r2, r2, r0
 800e32c:	440c      	add	r4, r1
 800e32e:	46c4      	mov	ip, r8
 800e330:	005b      	lsls	r3, r3, #1
 800e332:	3f01      	subs	r7, #1
 800e334:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e338:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e33c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e340:	d1dd      	bne.n	800e2fe <__ieee754_sqrt+0xb6>
 800e342:	4313      	orrs	r3, r2
 800e344:	d01b      	beq.n	800e37e <__ieee754_sqrt+0x136>
 800e346:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e3f4 <__ieee754_sqrt+0x1ac>
 800e34a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e3f8 <__ieee754_sqrt+0x1b0>
 800e34e:	e9da 0100 	ldrd	r0, r1, [sl]
 800e352:	e9db 2300 	ldrd	r2, r3, [fp]
 800e356:	f7f1 ff97 	bl	8000288 <__aeabi_dsub>
 800e35a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e35e:	4602      	mov	r2, r0
 800e360:	460b      	mov	r3, r1
 800e362:	4640      	mov	r0, r8
 800e364:	4649      	mov	r1, r9
 800e366:	f7f2 fbc3 	bl	8000af0 <__aeabi_dcmple>
 800e36a:	b140      	cbz	r0, 800e37e <__ieee754_sqrt+0x136>
 800e36c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800e370:	e9da 0100 	ldrd	r0, r1, [sl]
 800e374:	e9db 2300 	ldrd	r2, r3, [fp]
 800e378:	d126      	bne.n	800e3c8 <__ieee754_sqrt+0x180>
 800e37a:	3501      	adds	r5, #1
 800e37c:	463c      	mov	r4, r7
 800e37e:	106a      	asrs	r2, r5, #1
 800e380:	0863      	lsrs	r3, r4, #1
 800e382:	07e9      	lsls	r1, r5, #31
 800e384:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e388:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e38c:	bf48      	it	mi
 800e38e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e392:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e396:	461c      	mov	r4, r3
 800e398:	e76d      	b.n	800e276 <__ieee754_sqrt+0x2e>
 800e39a:	0ad3      	lsrs	r3, r2, #11
 800e39c:	3815      	subs	r0, #21
 800e39e:	0552      	lsls	r2, r2, #21
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d0fa      	beq.n	800e39a <__ieee754_sqrt+0x152>
 800e3a4:	02dc      	lsls	r4, r3, #11
 800e3a6:	d50a      	bpl.n	800e3be <__ieee754_sqrt+0x176>
 800e3a8:	f1c1 0420 	rsb	r4, r1, #32
 800e3ac:	fa22 f404 	lsr.w	r4, r2, r4
 800e3b0:	1e4d      	subs	r5, r1, #1
 800e3b2:	408a      	lsls	r2, r1
 800e3b4:	4323      	orrs	r3, r4
 800e3b6:	1b41      	subs	r1, r0, r5
 800e3b8:	e772      	b.n	800e2a0 <__ieee754_sqrt+0x58>
 800e3ba:	4608      	mov	r0, r1
 800e3bc:	e7f0      	b.n	800e3a0 <__ieee754_sqrt+0x158>
 800e3be:	005b      	lsls	r3, r3, #1
 800e3c0:	3101      	adds	r1, #1
 800e3c2:	e7ef      	b.n	800e3a4 <__ieee754_sqrt+0x15c>
 800e3c4:	46e0      	mov	r8, ip
 800e3c6:	e7aa      	b.n	800e31e <__ieee754_sqrt+0xd6>
 800e3c8:	f7f1 ff60 	bl	800028c <__adddf3>
 800e3cc:	e9da 8900 	ldrd	r8, r9, [sl]
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	4649      	mov	r1, r9
 800e3d8:	f7f2 fb80 	bl	8000adc <__aeabi_dcmplt>
 800e3dc:	b120      	cbz	r0, 800e3e8 <__ieee754_sqrt+0x1a0>
 800e3de:	1ca0      	adds	r0, r4, #2
 800e3e0:	bf08      	it	eq
 800e3e2:	3501      	addeq	r5, #1
 800e3e4:	3402      	adds	r4, #2
 800e3e6:	e7ca      	b.n	800e37e <__ieee754_sqrt+0x136>
 800e3e8:	3401      	adds	r4, #1
 800e3ea:	f024 0401 	bic.w	r4, r4, #1
 800e3ee:	e7c6      	b.n	800e37e <__ieee754_sqrt+0x136>
 800e3f0:	7ff00000 	.word	0x7ff00000
 800e3f4:	20000200 	.word	0x20000200
 800e3f8:	20000208 	.word	0x20000208
 800e3fc:	00000000 	.word	0x00000000

0800e400 <__ieee754_rem_pio2>:
 800e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e404:	ed2d 8b02 	vpush	{d8}
 800e408:	ec55 4b10 	vmov	r4, r5, d0
 800e40c:	4bca      	ldr	r3, [pc, #808]	; (800e738 <__ieee754_rem_pio2+0x338>)
 800e40e:	b08b      	sub	sp, #44	; 0x2c
 800e410:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e414:	4598      	cmp	r8, r3
 800e416:	4682      	mov	sl, r0
 800e418:	9502      	str	r5, [sp, #8]
 800e41a:	dc08      	bgt.n	800e42e <__ieee754_rem_pio2+0x2e>
 800e41c:	2200      	movs	r2, #0
 800e41e:	2300      	movs	r3, #0
 800e420:	ed80 0b00 	vstr	d0, [r0]
 800e424:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e428:	f04f 0b00 	mov.w	fp, #0
 800e42c:	e028      	b.n	800e480 <__ieee754_rem_pio2+0x80>
 800e42e:	4bc3      	ldr	r3, [pc, #780]	; (800e73c <__ieee754_rem_pio2+0x33c>)
 800e430:	4598      	cmp	r8, r3
 800e432:	dc78      	bgt.n	800e526 <__ieee754_rem_pio2+0x126>
 800e434:	9b02      	ldr	r3, [sp, #8]
 800e436:	4ec2      	ldr	r6, [pc, #776]	; (800e740 <__ieee754_rem_pio2+0x340>)
 800e438:	2b00      	cmp	r3, #0
 800e43a:	ee10 0a10 	vmov	r0, s0
 800e43e:	a3b0      	add	r3, pc, #704	; (adr r3, 800e700 <__ieee754_rem_pio2+0x300>)
 800e440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e444:	4629      	mov	r1, r5
 800e446:	dd39      	ble.n	800e4bc <__ieee754_rem_pio2+0xbc>
 800e448:	f7f1 ff1e 	bl	8000288 <__aeabi_dsub>
 800e44c:	45b0      	cmp	r8, r6
 800e44e:	4604      	mov	r4, r0
 800e450:	460d      	mov	r5, r1
 800e452:	d01b      	beq.n	800e48c <__ieee754_rem_pio2+0x8c>
 800e454:	a3ac      	add	r3, pc, #688	; (adr r3, 800e708 <__ieee754_rem_pio2+0x308>)
 800e456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45a:	f7f1 ff15 	bl	8000288 <__aeabi_dsub>
 800e45e:	4602      	mov	r2, r0
 800e460:	460b      	mov	r3, r1
 800e462:	e9ca 2300 	strd	r2, r3, [sl]
 800e466:	4620      	mov	r0, r4
 800e468:	4629      	mov	r1, r5
 800e46a:	f7f1 ff0d 	bl	8000288 <__aeabi_dsub>
 800e46e:	a3a6      	add	r3, pc, #664	; (adr r3, 800e708 <__ieee754_rem_pio2+0x308>)
 800e470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e474:	f7f1 ff08 	bl	8000288 <__aeabi_dsub>
 800e478:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e47c:	f04f 0b01 	mov.w	fp, #1
 800e480:	4658      	mov	r0, fp
 800e482:	b00b      	add	sp, #44	; 0x2c
 800e484:	ecbd 8b02 	vpop	{d8}
 800e488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48c:	a3a0      	add	r3, pc, #640	; (adr r3, 800e710 <__ieee754_rem_pio2+0x310>)
 800e48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e492:	f7f1 fef9 	bl	8000288 <__aeabi_dsub>
 800e496:	a3a0      	add	r3, pc, #640	; (adr r3, 800e718 <__ieee754_rem_pio2+0x318>)
 800e498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49c:	4604      	mov	r4, r0
 800e49e:	460d      	mov	r5, r1
 800e4a0:	f7f1 fef2 	bl	8000288 <__aeabi_dsub>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	e9ca 2300 	strd	r2, r3, [sl]
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	f7f1 feea 	bl	8000288 <__aeabi_dsub>
 800e4b4:	a398      	add	r3, pc, #608	; (adr r3, 800e718 <__ieee754_rem_pio2+0x318>)
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	e7db      	b.n	800e474 <__ieee754_rem_pio2+0x74>
 800e4bc:	f7f1 fee6 	bl	800028c <__adddf3>
 800e4c0:	45b0      	cmp	r8, r6
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	460d      	mov	r5, r1
 800e4c6:	d016      	beq.n	800e4f6 <__ieee754_rem_pio2+0xf6>
 800e4c8:	a38f      	add	r3, pc, #572	; (adr r3, 800e708 <__ieee754_rem_pio2+0x308>)
 800e4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ce:	f7f1 fedd 	bl	800028c <__adddf3>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	e9ca 2300 	strd	r2, r3, [sl]
 800e4da:	4620      	mov	r0, r4
 800e4dc:	4629      	mov	r1, r5
 800e4de:	f7f1 fed3 	bl	8000288 <__aeabi_dsub>
 800e4e2:	a389      	add	r3, pc, #548	; (adr r3, 800e708 <__ieee754_rem_pio2+0x308>)
 800e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e8:	f7f1 fed0 	bl	800028c <__adddf3>
 800e4ec:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800e4f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e4f4:	e7c4      	b.n	800e480 <__ieee754_rem_pio2+0x80>
 800e4f6:	a386      	add	r3, pc, #536	; (adr r3, 800e710 <__ieee754_rem_pio2+0x310>)
 800e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fc:	f7f1 fec6 	bl	800028c <__adddf3>
 800e500:	a385      	add	r3, pc, #532	; (adr r3, 800e718 <__ieee754_rem_pio2+0x318>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	4604      	mov	r4, r0
 800e508:	460d      	mov	r5, r1
 800e50a:	f7f1 febf 	bl	800028c <__adddf3>
 800e50e:	4602      	mov	r2, r0
 800e510:	460b      	mov	r3, r1
 800e512:	e9ca 2300 	strd	r2, r3, [sl]
 800e516:	4620      	mov	r0, r4
 800e518:	4629      	mov	r1, r5
 800e51a:	f7f1 feb5 	bl	8000288 <__aeabi_dsub>
 800e51e:	a37e      	add	r3, pc, #504	; (adr r3, 800e718 <__ieee754_rem_pio2+0x318>)
 800e520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e524:	e7e0      	b.n	800e4e8 <__ieee754_rem_pio2+0xe8>
 800e526:	4b87      	ldr	r3, [pc, #540]	; (800e744 <__ieee754_rem_pio2+0x344>)
 800e528:	4598      	cmp	r8, r3
 800e52a:	f300 80d8 	bgt.w	800e6de <__ieee754_rem_pio2+0x2de>
 800e52e:	f000 fe45 	bl	800f1bc <fabs>
 800e532:	ec55 4b10 	vmov	r4, r5, d0
 800e536:	ee10 0a10 	vmov	r0, s0
 800e53a:	a379      	add	r3, pc, #484	; (adr r3, 800e720 <__ieee754_rem_pio2+0x320>)
 800e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e540:	4629      	mov	r1, r5
 800e542:	f7f2 f859 	bl	80005f8 <__aeabi_dmul>
 800e546:	4b80      	ldr	r3, [pc, #512]	; (800e748 <__ieee754_rem_pio2+0x348>)
 800e548:	2200      	movs	r2, #0
 800e54a:	f7f1 fe9f 	bl	800028c <__adddf3>
 800e54e:	f7f2 fb03 	bl	8000b58 <__aeabi_d2iz>
 800e552:	4683      	mov	fp, r0
 800e554:	f7f1 ffe6 	bl	8000524 <__aeabi_i2d>
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	ec43 2b18 	vmov	d8, r2, r3
 800e560:	a367      	add	r3, pc, #412	; (adr r3, 800e700 <__ieee754_rem_pio2+0x300>)
 800e562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e566:	f7f2 f847 	bl	80005f8 <__aeabi_dmul>
 800e56a:	4602      	mov	r2, r0
 800e56c:	460b      	mov	r3, r1
 800e56e:	4620      	mov	r0, r4
 800e570:	4629      	mov	r1, r5
 800e572:	f7f1 fe89 	bl	8000288 <__aeabi_dsub>
 800e576:	a364      	add	r3, pc, #400	; (adr r3, 800e708 <__ieee754_rem_pio2+0x308>)
 800e578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57c:	4606      	mov	r6, r0
 800e57e:	460f      	mov	r7, r1
 800e580:	ec51 0b18 	vmov	r0, r1, d8
 800e584:	f7f2 f838 	bl	80005f8 <__aeabi_dmul>
 800e588:	f1bb 0f1f 	cmp.w	fp, #31
 800e58c:	4604      	mov	r4, r0
 800e58e:	460d      	mov	r5, r1
 800e590:	dc0d      	bgt.n	800e5ae <__ieee754_rem_pio2+0x1ae>
 800e592:	4b6e      	ldr	r3, [pc, #440]	; (800e74c <__ieee754_rem_pio2+0x34c>)
 800e594:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800e598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e59c:	4543      	cmp	r3, r8
 800e59e:	d006      	beq.n	800e5ae <__ieee754_rem_pio2+0x1ae>
 800e5a0:	4622      	mov	r2, r4
 800e5a2:	462b      	mov	r3, r5
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	4639      	mov	r1, r7
 800e5a8:	f7f1 fe6e 	bl	8000288 <__aeabi_dsub>
 800e5ac:	e00e      	b.n	800e5cc <__ieee754_rem_pio2+0x1cc>
 800e5ae:	462b      	mov	r3, r5
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	4630      	mov	r0, r6
 800e5b4:	4639      	mov	r1, r7
 800e5b6:	f7f1 fe67 	bl	8000288 <__aeabi_dsub>
 800e5ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e5be:	9303      	str	r3, [sp, #12]
 800e5c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5c4:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e5c8:	2b10      	cmp	r3, #16
 800e5ca:	dc02      	bgt.n	800e5d2 <__ieee754_rem_pio2+0x1d2>
 800e5cc:	e9ca 0100 	strd	r0, r1, [sl]
 800e5d0:	e039      	b.n	800e646 <__ieee754_rem_pio2+0x246>
 800e5d2:	a34f      	add	r3, pc, #316	; (adr r3, 800e710 <__ieee754_rem_pio2+0x310>)
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	ec51 0b18 	vmov	r0, r1, d8
 800e5dc:	f7f2 f80c 	bl	80005f8 <__aeabi_dmul>
 800e5e0:	4604      	mov	r4, r0
 800e5e2:	460d      	mov	r5, r1
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	4639      	mov	r1, r7
 800e5ec:	f7f1 fe4c 	bl	8000288 <__aeabi_dsub>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	4680      	mov	r8, r0
 800e5f6:	4689      	mov	r9, r1
 800e5f8:	4630      	mov	r0, r6
 800e5fa:	4639      	mov	r1, r7
 800e5fc:	f7f1 fe44 	bl	8000288 <__aeabi_dsub>
 800e600:	4622      	mov	r2, r4
 800e602:	462b      	mov	r3, r5
 800e604:	f7f1 fe40 	bl	8000288 <__aeabi_dsub>
 800e608:	a343      	add	r3, pc, #268	; (adr r3, 800e718 <__ieee754_rem_pio2+0x318>)
 800e60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60e:	4604      	mov	r4, r0
 800e610:	460d      	mov	r5, r1
 800e612:	ec51 0b18 	vmov	r0, r1, d8
 800e616:	f7f1 ffef 	bl	80005f8 <__aeabi_dmul>
 800e61a:	4622      	mov	r2, r4
 800e61c:	462b      	mov	r3, r5
 800e61e:	f7f1 fe33 	bl	8000288 <__aeabi_dsub>
 800e622:	4602      	mov	r2, r0
 800e624:	460b      	mov	r3, r1
 800e626:	4604      	mov	r4, r0
 800e628:	460d      	mov	r5, r1
 800e62a:	4640      	mov	r0, r8
 800e62c:	4649      	mov	r1, r9
 800e62e:	f7f1 fe2b 	bl	8000288 <__aeabi_dsub>
 800e632:	9a03      	ldr	r2, [sp, #12]
 800e634:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	2b31      	cmp	r3, #49	; 0x31
 800e63c:	dc24      	bgt.n	800e688 <__ieee754_rem_pio2+0x288>
 800e63e:	e9ca 0100 	strd	r0, r1, [sl]
 800e642:	4646      	mov	r6, r8
 800e644:	464f      	mov	r7, r9
 800e646:	e9da 8900 	ldrd	r8, r9, [sl]
 800e64a:	4630      	mov	r0, r6
 800e64c:	4642      	mov	r2, r8
 800e64e:	464b      	mov	r3, r9
 800e650:	4639      	mov	r1, r7
 800e652:	f7f1 fe19 	bl	8000288 <__aeabi_dsub>
 800e656:	462b      	mov	r3, r5
 800e658:	4622      	mov	r2, r4
 800e65a:	f7f1 fe15 	bl	8000288 <__aeabi_dsub>
 800e65e:	9b02      	ldr	r3, [sp, #8]
 800e660:	2b00      	cmp	r3, #0
 800e662:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e666:	f6bf af0b 	bge.w	800e480 <__ieee754_rem_pio2+0x80>
 800e66a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e66e:	f8ca 3004 	str.w	r3, [sl, #4]
 800e672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e676:	f8ca 8000 	str.w	r8, [sl]
 800e67a:	f8ca 0008 	str.w	r0, [sl, #8]
 800e67e:	f8ca 300c 	str.w	r3, [sl, #12]
 800e682:	f1cb 0b00 	rsb	fp, fp, #0
 800e686:	e6fb      	b.n	800e480 <__ieee754_rem_pio2+0x80>
 800e688:	a327      	add	r3, pc, #156	; (adr r3, 800e728 <__ieee754_rem_pio2+0x328>)
 800e68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68e:	ec51 0b18 	vmov	r0, r1, d8
 800e692:	f7f1 ffb1 	bl	80005f8 <__aeabi_dmul>
 800e696:	4604      	mov	r4, r0
 800e698:	460d      	mov	r5, r1
 800e69a:	4602      	mov	r2, r0
 800e69c:	460b      	mov	r3, r1
 800e69e:	4640      	mov	r0, r8
 800e6a0:	4649      	mov	r1, r9
 800e6a2:	f7f1 fdf1 	bl	8000288 <__aeabi_dsub>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	4606      	mov	r6, r0
 800e6ac:	460f      	mov	r7, r1
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	4649      	mov	r1, r9
 800e6b2:	f7f1 fde9 	bl	8000288 <__aeabi_dsub>
 800e6b6:	4622      	mov	r2, r4
 800e6b8:	462b      	mov	r3, r5
 800e6ba:	f7f1 fde5 	bl	8000288 <__aeabi_dsub>
 800e6be:	a31c      	add	r3, pc, #112	; (adr r3, 800e730 <__ieee754_rem_pio2+0x330>)
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	4604      	mov	r4, r0
 800e6c6:	460d      	mov	r5, r1
 800e6c8:	ec51 0b18 	vmov	r0, r1, d8
 800e6cc:	f7f1 ff94 	bl	80005f8 <__aeabi_dmul>
 800e6d0:	4622      	mov	r2, r4
 800e6d2:	462b      	mov	r3, r5
 800e6d4:	f7f1 fdd8 	bl	8000288 <__aeabi_dsub>
 800e6d8:	4604      	mov	r4, r0
 800e6da:	460d      	mov	r5, r1
 800e6dc:	e760      	b.n	800e5a0 <__ieee754_rem_pio2+0x1a0>
 800e6de:	4b1c      	ldr	r3, [pc, #112]	; (800e750 <__ieee754_rem_pio2+0x350>)
 800e6e0:	4598      	cmp	r8, r3
 800e6e2:	dd37      	ble.n	800e754 <__ieee754_rem_pio2+0x354>
 800e6e4:	ee10 2a10 	vmov	r2, s0
 800e6e8:	462b      	mov	r3, r5
 800e6ea:	4620      	mov	r0, r4
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	f7f1 fdcb 	bl	8000288 <__aeabi_dsub>
 800e6f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e6f6:	e9ca 0100 	strd	r0, r1, [sl]
 800e6fa:	e695      	b.n	800e428 <__ieee754_rem_pio2+0x28>
 800e6fc:	f3af 8000 	nop.w
 800e700:	54400000 	.word	0x54400000
 800e704:	3ff921fb 	.word	0x3ff921fb
 800e708:	1a626331 	.word	0x1a626331
 800e70c:	3dd0b461 	.word	0x3dd0b461
 800e710:	1a600000 	.word	0x1a600000
 800e714:	3dd0b461 	.word	0x3dd0b461
 800e718:	2e037073 	.word	0x2e037073
 800e71c:	3ba3198a 	.word	0x3ba3198a
 800e720:	6dc9c883 	.word	0x6dc9c883
 800e724:	3fe45f30 	.word	0x3fe45f30
 800e728:	2e000000 	.word	0x2e000000
 800e72c:	3ba3198a 	.word	0x3ba3198a
 800e730:	252049c1 	.word	0x252049c1
 800e734:	397b839a 	.word	0x397b839a
 800e738:	3fe921fb 	.word	0x3fe921fb
 800e73c:	4002d97b 	.word	0x4002d97b
 800e740:	3ff921fb 	.word	0x3ff921fb
 800e744:	413921fb 	.word	0x413921fb
 800e748:	3fe00000 	.word	0x3fe00000
 800e74c:	0800f968 	.word	0x0800f968
 800e750:	7fefffff 	.word	0x7fefffff
 800e754:	ea4f 5628 	mov.w	r6, r8, asr #20
 800e758:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e75c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800e760:	4620      	mov	r0, r4
 800e762:	460d      	mov	r5, r1
 800e764:	f7f2 f9f8 	bl	8000b58 <__aeabi_d2iz>
 800e768:	f7f1 fedc 	bl	8000524 <__aeabi_i2d>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4620      	mov	r0, r4
 800e772:	4629      	mov	r1, r5
 800e774:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e778:	f7f1 fd86 	bl	8000288 <__aeabi_dsub>
 800e77c:	4b21      	ldr	r3, [pc, #132]	; (800e804 <__ieee754_rem_pio2+0x404>)
 800e77e:	2200      	movs	r2, #0
 800e780:	f7f1 ff3a 	bl	80005f8 <__aeabi_dmul>
 800e784:	460d      	mov	r5, r1
 800e786:	4604      	mov	r4, r0
 800e788:	f7f2 f9e6 	bl	8000b58 <__aeabi_d2iz>
 800e78c:	f7f1 feca 	bl	8000524 <__aeabi_i2d>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	4620      	mov	r0, r4
 800e796:	4629      	mov	r1, r5
 800e798:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e79c:	f7f1 fd74 	bl	8000288 <__aeabi_dsub>
 800e7a0:	4b18      	ldr	r3, [pc, #96]	; (800e804 <__ieee754_rem_pio2+0x404>)
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f7f1 ff28 	bl	80005f8 <__aeabi_dmul>
 800e7a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e7ac:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800e7b0:	2703      	movs	r7, #3
 800e7b2:	2400      	movs	r4, #0
 800e7b4:	2500      	movs	r5, #0
 800e7b6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800e7ba:	4622      	mov	r2, r4
 800e7bc:	462b      	mov	r3, r5
 800e7be:	46b9      	mov	r9, r7
 800e7c0:	3f01      	subs	r7, #1
 800e7c2:	f7f2 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	d1f5      	bne.n	800e7b6 <__ieee754_rem_pio2+0x3b6>
 800e7ca:	4b0f      	ldr	r3, [pc, #60]	; (800e808 <__ieee754_rem_pio2+0x408>)
 800e7cc:	9301      	str	r3, [sp, #4]
 800e7ce:	2302      	movs	r3, #2
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	4632      	mov	r2, r6
 800e7d4:	464b      	mov	r3, r9
 800e7d6:	4651      	mov	r1, sl
 800e7d8:	a804      	add	r0, sp, #16
 800e7da:	f000 f819 	bl	800e810 <__kernel_rem_pio2>
 800e7de:	9b02      	ldr	r3, [sp, #8]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	4683      	mov	fp, r0
 800e7e4:	f6bf ae4c 	bge.w	800e480 <__ieee754_rem_pio2+0x80>
 800e7e8:	e9da 2100 	ldrd	r2, r1, [sl]
 800e7ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7f0:	e9ca 2300 	strd	r2, r3, [sl]
 800e7f4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800e7f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7fc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800e800:	e73f      	b.n	800e682 <__ieee754_rem_pio2+0x282>
 800e802:	bf00      	nop
 800e804:	41700000 	.word	0x41700000
 800e808:	0800f9e8 	.word	0x0800f9e8
 800e80c:	00000000 	.word	0x00000000

0800e810 <__kernel_rem_pio2>:
 800e810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e814:	ed2d 8b02 	vpush	{d8}
 800e818:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e81c:	f112 0f14 	cmn.w	r2, #20
 800e820:	9306      	str	r3, [sp, #24]
 800e822:	9104      	str	r1, [sp, #16]
 800e824:	4bc2      	ldr	r3, [pc, #776]	; (800eb30 <__kernel_rem_pio2+0x320>)
 800e826:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e828:	9009      	str	r0, [sp, #36]	; 0x24
 800e82a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e82e:	9300      	str	r3, [sp, #0]
 800e830:	9b06      	ldr	r3, [sp, #24]
 800e832:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e836:	bfa8      	it	ge
 800e838:	1ed4      	subge	r4, r2, #3
 800e83a:	9305      	str	r3, [sp, #20]
 800e83c:	bfb2      	itee	lt
 800e83e:	2400      	movlt	r4, #0
 800e840:	2318      	movge	r3, #24
 800e842:	fb94 f4f3 	sdivge	r4, r4, r3
 800e846:	f06f 0317 	mvn.w	r3, #23
 800e84a:	fb04 3303 	mla	r3, r4, r3, r3
 800e84e:	eb03 0a02 	add.w	sl, r3, r2
 800e852:	9b00      	ldr	r3, [sp, #0]
 800e854:	9a05      	ldr	r2, [sp, #20]
 800e856:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800eb20 <__kernel_rem_pio2+0x310>
 800e85a:	eb03 0802 	add.w	r8, r3, r2
 800e85e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e860:	1aa7      	subs	r7, r4, r2
 800e862:	ae20      	add	r6, sp, #128	; 0x80
 800e864:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e868:	2500      	movs	r5, #0
 800e86a:	4545      	cmp	r5, r8
 800e86c:	dd13      	ble.n	800e896 <__kernel_rem_pio2+0x86>
 800e86e:	9b06      	ldr	r3, [sp, #24]
 800e870:	aa20      	add	r2, sp, #128	; 0x80
 800e872:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e876:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e87a:	f04f 0800 	mov.w	r8, #0
 800e87e:	9b00      	ldr	r3, [sp, #0]
 800e880:	4598      	cmp	r8, r3
 800e882:	dc31      	bgt.n	800e8e8 <__kernel_rem_pio2+0xd8>
 800e884:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800eb20 <__kernel_rem_pio2+0x310>
 800e888:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e88c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e890:	462f      	mov	r7, r5
 800e892:	2600      	movs	r6, #0
 800e894:	e01b      	b.n	800e8ce <__kernel_rem_pio2+0xbe>
 800e896:	42ef      	cmn	r7, r5
 800e898:	d407      	bmi.n	800e8aa <__kernel_rem_pio2+0x9a>
 800e89a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e89e:	f7f1 fe41 	bl	8000524 <__aeabi_i2d>
 800e8a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e8a6:	3501      	adds	r5, #1
 800e8a8:	e7df      	b.n	800e86a <__kernel_rem_pio2+0x5a>
 800e8aa:	ec51 0b18 	vmov	r0, r1, d8
 800e8ae:	e7f8      	b.n	800e8a2 <__kernel_rem_pio2+0x92>
 800e8b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e8b8:	f7f1 fe9e 	bl	80005f8 <__aeabi_dmul>
 800e8bc:	4602      	mov	r2, r0
 800e8be:	460b      	mov	r3, r1
 800e8c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8c4:	f7f1 fce2 	bl	800028c <__adddf3>
 800e8c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8cc:	3601      	adds	r6, #1
 800e8ce:	9b05      	ldr	r3, [sp, #20]
 800e8d0:	429e      	cmp	r6, r3
 800e8d2:	f1a7 0708 	sub.w	r7, r7, #8
 800e8d6:	ddeb      	ble.n	800e8b0 <__kernel_rem_pio2+0xa0>
 800e8d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e8dc:	f108 0801 	add.w	r8, r8, #1
 800e8e0:	ecab 7b02 	vstmia	fp!, {d7}
 800e8e4:	3508      	adds	r5, #8
 800e8e6:	e7ca      	b.n	800e87e <__kernel_rem_pio2+0x6e>
 800e8e8:	9b00      	ldr	r3, [sp, #0]
 800e8ea:	aa0c      	add	r2, sp, #48	; 0x30
 800e8ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e8f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8f2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e8f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e8f8:	9c00      	ldr	r4, [sp, #0]
 800e8fa:	930a      	str	r3, [sp, #40]	; 0x28
 800e8fc:	00e3      	lsls	r3, r4, #3
 800e8fe:	9308      	str	r3, [sp, #32]
 800e900:	ab98      	add	r3, sp, #608	; 0x260
 800e902:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e906:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e90a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800e90e:	ab70      	add	r3, sp, #448	; 0x1c0
 800e910:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e914:	46c3      	mov	fp, r8
 800e916:	46a1      	mov	r9, r4
 800e918:	f1b9 0f00 	cmp.w	r9, #0
 800e91c:	f1a5 0508 	sub.w	r5, r5, #8
 800e920:	dc77      	bgt.n	800ea12 <__kernel_rem_pio2+0x202>
 800e922:	ec47 6b10 	vmov	d0, r6, r7
 800e926:	4650      	mov	r0, sl
 800e928:	f000 fc52 	bl	800f1d0 <scalbn>
 800e92c:	ec57 6b10 	vmov	r6, r7, d0
 800e930:	2200      	movs	r2, #0
 800e932:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e936:	ee10 0a10 	vmov	r0, s0
 800e93a:	4639      	mov	r1, r7
 800e93c:	f7f1 fe5c 	bl	80005f8 <__aeabi_dmul>
 800e940:	ec41 0b10 	vmov	d0, r0, r1
 800e944:	f000 fcc4 	bl	800f2d0 <floor>
 800e948:	4b7a      	ldr	r3, [pc, #488]	; (800eb34 <__kernel_rem_pio2+0x324>)
 800e94a:	ec51 0b10 	vmov	r0, r1, d0
 800e94e:	2200      	movs	r2, #0
 800e950:	f7f1 fe52 	bl	80005f8 <__aeabi_dmul>
 800e954:	4602      	mov	r2, r0
 800e956:	460b      	mov	r3, r1
 800e958:	4630      	mov	r0, r6
 800e95a:	4639      	mov	r1, r7
 800e95c:	f7f1 fc94 	bl	8000288 <__aeabi_dsub>
 800e960:	460f      	mov	r7, r1
 800e962:	4606      	mov	r6, r0
 800e964:	f7f2 f8f8 	bl	8000b58 <__aeabi_d2iz>
 800e968:	9002      	str	r0, [sp, #8]
 800e96a:	f7f1 fddb 	bl	8000524 <__aeabi_i2d>
 800e96e:	4602      	mov	r2, r0
 800e970:	460b      	mov	r3, r1
 800e972:	4630      	mov	r0, r6
 800e974:	4639      	mov	r1, r7
 800e976:	f7f1 fc87 	bl	8000288 <__aeabi_dsub>
 800e97a:	f1ba 0f00 	cmp.w	sl, #0
 800e97e:	4606      	mov	r6, r0
 800e980:	460f      	mov	r7, r1
 800e982:	dd6d      	ble.n	800ea60 <__kernel_rem_pio2+0x250>
 800e984:	1e61      	subs	r1, r4, #1
 800e986:	ab0c      	add	r3, sp, #48	; 0x30
 800e988:	9d02      	ldr	r5, [sp, #8]
 800e98a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e98e:	f1ca 0018 	rsb	r0, sl, #24
 800e992:	fa43 f200 	asr.w	r2, r3, r0
 800e996:	4415      	add	r5, r2
 800e998:	4082      	lsls	r2, r0
 800e99a:	1a9b      	subs	r3, r3, r2
 800e99c:	aa0c      	add	r2, sp, #48	; 0x30
 800e99e:	9502      	str	r5, [sp, #8]
 800e9a0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e9a4:	f1ca 0217 	rsb	r2, sl, #23
 800e9a8:	fa43 fb02 	asr.w	fp, r3, r2
 800e9ac:	f1bb 0f00 	cmp.w	fp, #0
 800e9b0:	dd65      	ble.n	800ea7e <__kernel_rem_pio2+0x26e>
 800e9b2:	9b02      	ldr	r3, [sp, #8]
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	9302      	str	r3, [sp, #8]
 800e9ba:	4615      	mov	r5, r2
 800e9bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e9c0:	4294      	cmp	r4, r2
 800e9c2:	f300 809f 	bgt.w	800eb04 <__kernel_rem_pio2+0x2f4>
 800e9c6:	f1ba 0f00 	cmp.w	sl, #0
 800e9ca:	dd07      	ble.n	800e9dc <__kernel_rem_pio2+0x1cc>
 800e9cc:	f1ba 0f01 	cmp.w	sl, #1
 800e9d0:	f000 80c1 	beq.w	800eb56 <__kernel_rem_pio2+0x346>
 800e9d4:	f1ba 0f02 	cmp.w	sl, #2
 800e9d8:	f000 80c7 	beq.w	800eb6a <__kernel_rem_pio2+0x35a>
 800e9dc:	f1bb 0f02 	cmp.w	fp, #2
 800e9e0:	d14d      	bne.n	800ea7e <__kernel_rem_pio2+0x26e>
 800e9e2:	4632      	mov	r2, r6
 800e9e4:	463b      	mov	r3, r7
 800e9e6:	4954      	ldr	r1, [pc, #336]	; (800eb38 <__kernel_rem_pio2+0x328>)
 800e9e8:	2000      	movs	r0, #0
 800e9ea:	f7f1 fc4d 	bl	8000288 <__aeabi_dsub>
 800e9ee:	4606      	mov	r6, r0
 800e9f0:	460f      	mov	r7, r1
 800e9f2:	2d00      	cmp	r5, #0
 800e9f4:	d043      	beq.n	800ea7e <__kernel_rem_pio2+0x26e>
 800e9f6:	4650      	mov	r0, sl
 800e9f8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800eb28 <__kernel_rem_pio2+0x318>
 800e9fc:	f000 fbe8 	bl	800f1d0 <scalbn>
 800ea00:	4630      	mov	r0, r6
 800ea02:	4639      	mov	r1, r7
 800ea04:	ec53 2b10 	vmov	r2, r3, d0
 800ea08:	f7f1 fc3e 	bl	8000288 <__aeabi_dsub>
 800ea0c:	4606      	mov	r6, r0
 800ea0e:	460f      	mov	r7, r1
 800ea10:	e035      	b.n	800ea7e <__kernel_rem_pio2+0x26e>
 800ea12:	4b4a      	ldr	r3, [pc, #296]	; (800eb3c <__kernel_rem_pio2+0x32c>)
 800ea14:	2200      	movs	r2, #0
 800ea16:	4630      	mov	r0, r6
 800ea18:	4639      	mov	r1, r7
 800ea1a:	f7f1 fded 	bl	80005f8 <__aeabi_dmul>
 800ea1e:	f7f2 f89b 	bl	8000b58 <__aeabi_d2iz>
 800ea22:	f7f1 fd7f 	bl	8000524 <__aeabi_i2d>
 800ea26:	4602      	mov	r2, r0
 800ea28:	460b      	mov	r3, r1
 800ea2a:	ec43 2b18 	vmov	d8, r2, r3
 800ea2e:	4b44      	ldr	r3, [pc, #272]	; (800eb40 <__kernel_rem_pio2+0x330>)
 800ea30:	2200      	movs	r2, #0
 800ea32:	f7f1 fde1 	bl	80005f8 <__aeabi_dmul>
 800ea36:	4602      	mov	r2, r0
 800ea38:	460b      	mov	r3, r1
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	4639      	mov	r1, r7
 800ea3e:	f7f1 fc23 	bl	8000288 <__aeabi_dsub>
 800ea42:	f7f2 f889 	bl	8000b58 <__aeabi_d2iz>
 800ea46:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea4a:	f84b 0b04 	str.w	r0, [fp], #4
 800ea4e:	ec51 0b18 	vmov	r0, r1, d8
 800ea52:	f7f1 fc1b 	bl	800028c <__adddf3>
 800ea56:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800ea5a:	4606      	mov	r6, r0
 800ea5c:	460f      	mov	r7, r1
 800ea5e:	e75b      	b.n	800e918 <__kernel_rem_pio2+0x108>
 800ea60:	d106      	bne.n	800ea70 <__kernel_rem_pio2+0x260>
 800ea62:	1e63      	subs	r3, r4, #1
 800ea64:	aa0c      	add	r2, sp, #48	; 0x30
 800ea66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea6a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800ea6e:	e79d      	b.n	800e9ac <__kernel_rem_pio2+0x19c>
 800ea70:	4b34      	ldr	r3, [pc, #208]	; (800eb44 <__kernel_rem_pio2+0x334>)
 800ea72:	2200      	movs	r2, #0
 800ea74:	f7f2 f846 	bl	8000b04 <__aeabi_dcmpge>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	d140      	bne.n	800eafe <__kernel_rem_pio2+0x2ee>
 800ea7c:	4683      	mov	fp, r0
 800ea7e:	2200      	movs	r2, #0
 800ea80:	2300      	movs	r3, #0
 800ea82:	4630      	mov	r0, r6
 800ea84:	4639      	mov	r1, r7
 800ea86:	f7f2 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea8a:	2800      	cmp	r0, #0
 800ea8c:	f000 80c1 	beq.w	800ec12 <__kernel_rem_pio2+0x402>
 800ea90:	1e65      	subs	r5, r4, #1
 800ea92:	462b      	mov	r3, r5
 800ea94:	2200      	movs	r2, #0
 800ea96:	9900      	ldr	r1, [sp, #0]
 800ea98:	428b      	cmp	r3, r1
 800ea9a:	da6d      	bge.n	800eb78 <__kernel_rem_pio2+0x368>
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	f000 808a 	beq.w	800ebb6 <__kernel_rem_pio2+0x3a6>
 800eaa2:	ab0c      	add	r3, sp, #48	; 0x30
 800eaa4:	f1aa 0a18 	sub.w	sl, sl, #24
 800eaa8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	f000 80ae 	beq.w	800ec0e <__kernel_rem_pio2+0x3fe>
 800eab2:	4650      	mov	r0, sl
 800eab4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800eb28 <__kernel_rem_pio2+0x318>
 800eab8:	f000 fb8a 	bl	800f1d0 <scalbn>
 800eabc:	1c6b      	adds	r3, r5, #1
 800eabe:	00da      	lsls	r2, r3, #3
 800eac0:	9205      	str	r2, [sp, #20]
 800eac2:	ec57 6b10 	vmov	r6, r7, d0
 800eac6:	aa70      	add	r2, sp, #448	; 0x1c0
 800eac8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800eb3c <__kernel_rem_pio2+0x32c>
 800eacc:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800ead0:	462c      	mov	r4, r5
 800ead2:	f04f 0800 	mov.w	r8, #0
 800ead6:	2c00      	cmp	r4, #0
 800ead8:	f280 80d4 	bge.w	800ec84 <__kernel_rem_pio2+0x474>
 800eadc:	462c      	mov	r4, r5
 800eade:	2c00      	cmp	r4, #0
 800eae0:	f2c0 8102 	blt.w	800ece8 <__kernel_rem_pio2+0x4d8>
 800eae4:	4b18      	ldr	r3, [pc, #96]	; (800eb48 <__kernel_rem_pio2+0x338>)
 800eae6:	461e      	mov	r6, r3
 800eae8:	ab70      	add	r3, sp, #448	; 0x1c0
 800eaea:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800eaee:	1b2b      	subs	r3, r5, r4
 800eaf0:	f04f 0900 	mov.w	r9, #0
 800eaf4:	f04f 0a00 	mov.w	sl, #0
 800eaf8:	2700      	movs	r7, #0
 800eafa:	9306      	str	r3, [sp, #24]
 800eafc:	e0e6      	b.n	800eccc <__kernel_rem_pio2+0x4bc>
 800eafe:	f04f 0b02 	mov.w	fp, #2
 800eb02:	e756      	b.n	800e9b2 <__kernel_rem_pio2+0x1a2>
 800eb04:	f8d8 3000 	ldr.w	r3, [r8]
 800eb08:	bb05      	cbnz	r5, 800eb4c <__kernel_rem_pio2+0x33c>
 800eb0a:	b123      	cbz	r3, 800eb16 <__kernel_rem_pio2+0x306>
 800eb0c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eb10:	f8c8 3000 	str.w	r3, [r8]
 800eb14:	2301      	movs	r3, #1
 800eb16:	3201      	adds	r2, #1
 800eb18:	f108 0804 	add.w	r8, r8, #4
 800eb1c:	461d      	mov	r5, r3
 800eb1e:	e74f      	b.n	800e9c0 <__kernel_rem_pio2+0x1b0>
	...
 800eb2c:	3ff00000 	.word	0x3ff00000
 800eb30:	0800fb30 	.word	0x0800fb30
 800eb34:	40200000 	.word	0x40200000
 800eb38:	3ff00000 	.word	0x3ff00000
 800eb3c:	3e700000 	.word	0x3e700000
 800eb40:	41700000 	.word	0x41700000
 800eb44:	3fe00000 	.word	0x3fe00000
 800eb48:	0800faf0 	.word	0x0800faf0
 800eb4c:	1acb      	subs	r3, r1, r3
 800eb4e:	f8c8 3000 	str.w	r3, [r8]
 800eb52:	462b      	mov	r3, r5
 800eb54:	e7df      	b.n	800eb16 <__kernel_rem_pio2+0x306>
 800eb56:	1e62      	subs	r2, r4, #1
 800eb58:	ab0c      	add	r3, sp, #48	; 0x30
 800eb5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb5e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800eb62:	a90c      	add	r1, sp, #48	; 0x30
 800eb64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800eb68:	e738      	b.n	800e9dc <__kernel_rem_pio2+0x1cc>
 800eb6a:	1e62      	subs	r2, r4, #1
 800eb6c:	ab0c      	add	r3, sp, #48	; 0x30
 800eb6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eb76:	e7f4      	b.n	800eb62 <__kernel_rem_pio2+0x352>
 800eb78:	a90c      	add	r1, sp, #48	; 0x30
 800eb7a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eb7e:	3b01      	subs	r3, #1
 800eb80:	430a      	orrs	r2, r1
 800eb82:	e788      	b.n	800ea96 <__kernel_rem_pio2+0x286>
 800eb84:	3301      	adds	r3, #1
 800eb86:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800eb8a:	2900      	cmp	r1, #0
 800eb8c:	d0fa      	beq.n	800eb84 <__kernel_rem_pio2+0x374>
 800eb8e:	9a08      	ldr	r2, [sp, #32]
 800eb90:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800eb94:	446a      	add	r2, sp
 800eb96:	3a98      	subs	r2, #152	; 0x98
 800eb98:	9208      	str	r2, [sp, #32]
 800eb9a:	9a06      	ldr	r2, [sp, #24]
 800eb9c:	a920      	add	r1, sp, #128	; 0x80
 800eb9e:	18a2      	adds	r2, r4, r2
 800eba0:	18e3      	adds	r3, r4, r3
 800eba2:	f104 0801 	add.w	r8, r4, #1
 800eba6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ebaa:	9302      	str	r3, [sp, #8]
 800ebac:	9b02      	ldr	r3, [sp, #8]
 800ebae:	4543      	cmp	r3, r8
 800ebb0:	da04      	bge.n	800ebbc <__kernel_rem_pio2+0x3ac>
 800ebb2:	461c      	mov	r4, r3
 800ebb4:	e6a2      	b.n	800e8fc <__kernel_rem_pio2+0xec>
 800ebb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e7e4      	b.n	800eb86 <__kernel_rem_pio2+0x376>
 800ebbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebbe:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ebc2:	f7f1 fcaf 	bl	8000524 <__aeabi_i2d>
 800ebc6:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ebca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebcc:	46ab      	mov	fp, r5
 800ebce:	461c      	mov	r4, r3
 800ebd0:	f04f 0900 	mov.w	r9, #0
 800ebd4:	2600      	movs	r6, #0
 800ebd6:	2700      	movs	r7, #0
 800ebd8:	9b05      	ldr	r3, [sp, #20]
 800ebda:	4599      	cmp	r9, r3
 800ebdc:	dd06      	ble.n	800ebec <__kernel_rem_pio2+0x3dc>
 800ebde:	9b08      	ldr	r3, [sp, #32]
 800ebe0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ebe4:	f108 0801 	add.w	r8, r8, #1
 800ebe8:	9308      	str	r3, [sp, #32]
 800ebea:	e7df      	b.n	800ebac <__kernel_rem_pio2+0x39c>
 800ebec:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ebf0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ebf4:	f7f1 fd00 	bl	80005f8 <__aeabi_dmul>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	4639      	mov	r1, r7
 800ec00:	f7f1 fb44 	bl	800028c <__adddf3>
 800ec04:	f109 0901 	add.w	r9, r9, #1
 800ec08:	4606      	mov	r6, r0
 800ec0a:	460f      	mov	r7, r1
 800ec0c:	e7e4      	b.n	800ebd8 <__kernel_rem_pio2+0x3c8>
 800ec0e:	3d01      	subs	r5, #1
 800ec10:	e747      	b.n	800eaa2 <__kernel_rem_pio2+0x292>
 800ec12:	ec47 6b10 	vmov	d0, r6, r7
 800ec16:	f1ca 0000 	rsb	r0, sl, #0
 800ec1a:	f000 fad9 	bl	800f1d0 <scalbn>
 800ec1e:	ec57 6b10 	vmov	r6, r7, d0
 800ec22:	4ba0      	ldr	r3, [pc, #640]	; (800eea4 <__kernel_rem_pio2+0x694>)
 800ec24:	ee10 0a10 	vmov	r0, s0
 800ec28:	2200      	movs	r2, #0
 800ec2a:	4639      	mov	r1, r7
 800ec2c:	f7f1 ff6a 	bl	8000b04 <__aeabi_dcmpge>
 800ec30:	b1f8      	cbz	r0, 800ec72 <__kernel_rem_pio2+0x462>
 800ec32:	4b9d      	ldr	r3, [pc, #628]	; (800eea8 <__kernel_rem_pio2+0x698>)
 800ec34:	2200      	movs	r2, #0
 800ec36:	4630      	mov	r0, r6
 800ec38:	4639      	mov	r1, r7
 800ec3a:	f7f1 fcdd 	bl	80005f8 <__aeabi_dmul>
 800ec3e:	f7f1 ff8b 	bl	8000b58 <__aeabi_d2iz>
 800ec42:	4680      	mov	r8, r0
 800ec44:	f7f1 fc6e 	bl	8000524 <__aeabi_i2d>
 800ec48:	4b96      	ldr	r3, [pc, #600]	; (800eea4 <__kernel_rem_pio2+0x694>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f7f1 fcd4 	bl	80005f8 <__aeabi_dmul>
 800ec50:	460b      	mov	r3, r1
 800ec52:	4602      	mov	r2, r0
 800ec54:	4639      	mov	r1, r7
 800ec56:	4630      	mov	r0, r6
 800ec58:	f7f1 fb16 	bl	8000288 <__aeabi_dsub>
 800ec5c:	f7f1 ff7c 	bl	8000b58 <__aeabi_d2iz>
 800ec60:	1c65      	adds	r5, r4, #1
 800ec62:	ab0c      	add	r3, sp, #48	; 0x30
 800ec64:	f10a 0a18 	add.w	sl, sl, #24
 800ec68:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ec6c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ec70:	e71f      	b.n	800eab2 <__kernel_rem_pio2+0x2a2>
 800ec72:	4630      	mov	r0, r6
 800ec74:	4639      	mov	r1, r7
 800ec76:	f7f1 ff6f 	bl	8000b58 <__aeabi_d2iz>
 800ec7a:	ab0c      	add	r3, sp, #48	; 0x30
 800ec7c:	4625      	mov	r5, r4
 800ec7e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ec82:	e716      	b.n	800eab2 <__kernel_rem_pio2+0x2a2>
 800ec84:	ab0c      	add	r3, sp, #48	; 0x30
 800ec86:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ec8a:	f7f1 fc4b 	bl	8000524 <__aeabi_i2d>
 800ec8e:	4632      	mov	r2, r6
 800ec90:	463b      	mov	r3, r7
 800ec92:	f7f1 fcb1 	bl	80005f8 <__aeabi_dmul>
 800ec96:	4642      	mov	r2, r8
 800ec98:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ec9c:	464b      	mov	r3, r9
 800ec9e:	4630      	mov	r0, r6
 800eca0:	4639      	mov	r1, r7
 800eca2:	f7f1 fca9 	bl	80005f8 <__aeabi_dmul>
 800eca6:	3c01      	subs	r4, #1
 800eca8:	4606      	mov	r6, r0
 800ecaa:	460f      	mov	r7, r1
 800ecac:	e713      	b.n	800ead6 <__kernel_rem_pio2+0x2c6>
 800ecae:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800ecb2:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ecb6:	f7f1 fc9f 	bl	80005f8 <__aeabi_dmul>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	4648      	mov	r0, r9
 800ecc0:	4651      	mov	r1, sl
 800ecc2:	f7f1 fae3 	bl	800028c <__adddf3>
 800ecc6:	3701      	adds	r7, #1
 800ecc8:	4681      	mov	r9, r0
 800ecca:	468a      	mov	sl, r1
 800eccc:	9b00      	ldr	r3, [sp, #0]
 800ecce:	429f      	cmp	r7, r3
 800ecd0:	dc02      	bgt.n	800ecd8 <__kernel_rem_pio2+0x4c8>
 800ecd2:	9b06      	ldr	r3, [sp, #24]
 800ecd4:	429f      	cmp	r7, r3
 800ecd6:	ddea      	ble.n	800ecae <__kernel_rem_pio2+0x49e>
 800ecd8:	9a06      	ldr	r2, [sp, #24]
 800ecda:	ab48      	add	r3, sp, #288	; 0x120
 800ecdc:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800ece0:	e9c6 9a00 	strd	r9, sl, [r6]
 800ece4:	3c01      	subs	r4, #1
 800ece6:	e6fa      	b.n	800eade <__kernel_rem_pio2+0x2ce>
 800ece8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	dc0b      	bgt.n	800ed06 <__kernel_rem_pio2+0x4f6>
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	dc39      	bgt.n	800ed66 <__kernel_rem_pio2+0x556>
 800ecf2:	d05d      	beq.n	800edb0 <__kernel_rem_pio2+0x5a0>
 800ecf4:	9b02      	ldr	r3, [sp, #8]
 800ecf6:	f003 0007 	and.w	r0, r3, #7
 800ecfa:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ecfe:	ecbd 8b02 	vpop	{d8}
 800ed02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed06:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ed08:	2b03      	cmp	r3, #3
 800ed0a:	d1f3      	bne.n	800ecf4 <__kernel_rem_pio2+0x4e4>
 800ed0c:	9b05      	ldr	r3, [sp, #20]
 800ed0e:	9500      	str	r5, [sp, #0]
 800ed10:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ed14:	eb0d 0403 	add.w	r4, sp, r3
 800ed18:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800ed1c:	46a2      	mov	sl, r4
 800ed1e:	9b00      	ldr	r3, [sp, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f1aa 0a08 	sub.w	sl, sl, #8
 800ed26:	dc69      	bgt.n	800edfc <__kernel_rem_pio2+0x5ec>
 800ed28:	46aa      	mov	sl, r5
 800ed2a:	f1ba 0f01 	cmp.w	sl, #1
 800ed2e:	f1a4 0408 	sub.w	r4, r4, #8
 800ed32:	f300 8083 	bgt.w	800ee3c <__kernel_rem_pio2+0x62c>
 800ed36:	9c05      	ldr	r4, [sp, #20]
 800ed38:	ab48      	add	r3, sp, #288	; 0x120
 800ed3a:	441c      	add	r4, r3
 800ed3c:	2000      	movs	r0, #0
 800ed3e:	2100      	movs	r1, #0
 800ed40:	2d01      	cmp	r5, #1
 800ed42:	f300 809a 	bgt.w	800ee7a <__kernel_rem_pio2+0x66a>
 800ed46:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800ed4a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ed4e:	f1bb 0f00 	cmp.w	fp, #0
 800ed52:	f040 8098 	bne.w	800ee86 <__kernel_rem_pio2+0x676>
 800ed56:	9b04      	ldr	r3, [sp, #16]
 800ed58:	e9c3 7800 	strd	r7, r8, [r3]
 800ed5c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ed60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ed64:	e7c6      	b.n	800ecf4 <__kernel_rem_pio2+0x4e4>
 800ed66:	9e05      	ldr	r6, [sp, #20]
 800ed68:	ab48      	add	r3, sp, #288	; 0x120
 800ed6a:	441e      	add	r6, r3
 800ed6c:	462c      	mov	r4, r5
 800ed6e:	2000      	movs	r0, #0
 800ed70:	2100      	movs	r1, #0
 800ed72:	2c00      	cmp	r4, #0
 800ed74:	da33      	bge.n	800edde <__kernel_rem_pio2+0x5ce>
 800ed76:	f1bb 0f00 	cmp.w	fp, #0
 800ed7a:	d036      	beq.n	800edea <__kernel_rem_pio2+0x5da>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed82:	9c04      	ldr	r4, [sp, #16]
 800ed84:	e9c4 2300 	strd	r2, r3, [r4]
 800ed88:	4602      	mov	r2, r0
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ed90:	f7f1 fa7a 	bl	8000288 <__aeabi_dsub>
 800ed94:	ae4a      	add	r6, sp, #296	; 0x128
 800ed96:	2401      	movs	r4, #1
 800ed98:	42a5      	cmp	r5, r4
 800ed9a:	da29      	bge.n	800edf0 <__kernel_rem_pio2+0x5e0>
 800ed9c:	f1bb 0f00 	cmp.w	fp, #0
 800eda0:	d002      	beq.n	800eda8 <__kernel_rem_pio2+0x598>
 800eda2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eda6:	4619      	mov	r1, r3
 800eda8:	9b04      	ldr	r3, [sp, #16]
 800edaa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800edae:	e7a1      	b.n	800ecf4 <__kernel_rem_pio2+0x4e4>
 800edb0:	9c05      	ldr	r4, [sp, #20]
 800edb2:	ab48      	add	r3, sp, #288	; 0x120
 800edb4:	441c      	add	r4, r3
 800edb6:	2000      	movs	r0, #0
 800edb8:	2100      	movs	r1, #0
 800edba:	2d00      	cmp	r5, #0
 800edbc:	da09      	bge.n	800edd2 <__kernel_rem_pio2+0x5c2>
 800edbe:	f1bb 0f00 	cmp.w	fp, #0
 800edc2:	d002      	beq.n	800edca <__kernel_rem_pio2+0x5ba>
 800edc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edc8:	4619      	mov	r1, r3
 800edca:	9b04      	ldr	r3, [sp, #16]
 800edcc:	e9c3 0100 	strd	r0, r1, [r3]
 800edd0:	e790      	b.n	800ecf4 <__kernel_rem_pio2+0x4e4>
 800edd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800edd6:	f7f1 fa59 	bl	800028c <__adddf3>
 800edda:	3d01      	subs	r5, #1
 800eddc:	e7ed      	b.n	800edba <__kernel_rem_pio2+0x5aa>
 800edde:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800ede2:	f7f1 fa53 	bl	800028c <__adddf3>
 800ede6:	3c01      	subs	r4, #1
 800ede8:	e7c3      	b.n	800ed72 <__kernel_rem_pio2+0x562>
 800edea:	4602      	mov	r2, r0
 800edec:	460b      	mov	r3, r1
 800edee:	e7c8      	b.n	800ed82 <__kernel_rem_pio2+0x572>
 800edf0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800edf4:	f7f1 fa4a 	bl	800028c <__adddf3>
 800edf8:	3401      	adds	r4, #1
 800edfa:	e7cd      	b.n	800ed98 <__kernel_rem_pio2+0x588>
 800edfc:	e9da 8900 	ldrd	r8, r9, [sl]
 800ee00:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ee04:	9b00      	ldr	r3, [sp, #0]
 800ee06:	3b01      	subs	r3, #1
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	4632      	mov	r2, r6
 800ee0c:	463b      	mov	r3, r7
 800ee0e:	4640      	mov	r0, r8
 800ee10:	4649      	mov	r1, r9
 800ee12:	f7f1 fa3b 	bl	800028c <__adddf3>
 800ee16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	460b      	mov	r3, r1
 800ee1e:	4640      	mov	r0, r8
 800ee20:	4649      	mov	r1, r9
 800ee22:	f7f1 fa31 	bl	8000288 <__aeabi_dsub>
 800ee26:	4632      	mov	r2, r6
 800ee28:	463b      	mov	r3, r7
 800ee2a:	f7f1 fa2f 	bl	800028c <__adddf3>
 800ee2e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ee32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee36:	ed8a 7b00 	vstr	d7, [sl]
 800ee3a:	e770      	b.n	800ed1e <__kernel_rem_pio2+0x50e>
 800ee3c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ee40:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ee44:	4640      	mov	r0, r8
 800ee46:	4632      	mov	r2, r6
 800ee48:	463b      	mov	r3, r7
 800ee4a:	4649      	mov	r1, r9
 800ee4c:	f7f1 fa1e 	bl	800028c <__adddf3>
 800ee50:	e9cd 0100 	strd	r0, r1, [sp]
 800ee54:	4602      	mov	r2, r0
 800ee56:	460b      	mov	r3, r1
 800ee58:	4640      	mov	r0, r8
 800ee5a:	4649      	mov	r1, r9
 800ee5c:	f7f1 fa14 	bl	8000288 <__aeabi_dsub>
 800ee60:	4632      	mov	r2, r6
 800ee62:	463b      	mov	r3, r7
 800ee64:	f7f1 fa12 	bl	800028c <__adddf3>
 800ee68:	ed9d 7b00 	vldr	d7, [sp]
 800ee6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ee70:	ed84 7b00 	vstr	d7, [r4]
 800ee74:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ee78:	e757      	b.n	800ed2a <__kernel_rem_pio2+0x51a>
 800ee7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ee7e:	f7f1 fa05 	bl	800028c <__adddf3>
 800ee82:	3d01      	subs	r5, #1
 800ee84:	e75c      	b.n	800ed40 <__kernel_rem_pio2+0x530>
 800ee86:	9b04      	ldr	r3, [sp, #16]
 800ee88:	9a04      	ldr	r2, [sp, #16]
 800ee8a:	601f      	str	r7, [r3, #0]
 800ee8c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ee90:	605c      	str	r4, [r3, #4]
 800ee92:	609d      	str	r5, [r3, #8]
 800ee94:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ee98:	60d3      	str	r3, [r2, #12]
 800ee9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee9e:	6110      	str	r0, [r2, #16]
 800eea0:	6153      	str	r3, [r2, #20]
 800eea2:	e727      	b.n	800ecf4 <__kernel_rem_pio2+0x4e4>
 800eea4:	41700000 	.word	0x41700000
 800eea8:	3e700000 	.word	0x3e700000
 800eeac:	00000000 	.word	0x00000000

0800eeb0 <__kernel_cos>:
 800eeb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb4:	ec57 6b10 	vmov	r6, r7, d0
 800eeb8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800eebc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800eec0:	ed8d 1b00 	vstr	d1, [sp]
 800eec4:	da07      	bge.n	800eed6 <__kernel_cos+0x26>
 800eec6:	ee10 0a10 	vmov	r0, s0
 800eeca:	4639      	mov	r1, r7
 800eecc:	f7f1 fe44 	bl	8000b58 <__aeabi_d2iz>
 800eed0:	2800      	cmp	r0, #0
 800eed2:	f000 8088 	beq.w	800efe6 <__kernel_cos+0x136>
 800eed6:	4632      	mov	r2, r6
 800eed8:	463b      	mov	r3, r7
 800eeda:	4630      	mov	r0, r6
 800eedc:	4639      	mov	r1, r7
 800eede:	f7f1 fb8b 	bl	80005f8 <__aeabi_dmul>
 800eee2:	4b51      	ldr	r3, [pc, #324]	; (800f028 <__kernel_cos+0x178>)
 800eee4:	2200      	movs	r2, #0
 800eee6:	4604      	mov	r4, r0
 800eee8:	460d      	mov	r5, r1
 800eeea:	f7f1 fb85 	bl	80005f8 <__aeabi_dmul>
 800eeee:	a340      	add	r3, pc, #256	; (adr r3, 800eff0 <__kernel_cos+0x140>)
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	4682      	mov	sl, r0
 800eef6:	468b      	mov	fp, r1
 800eef8:	4620      	mov	r0, r4
 800eefa:	4629      	mov	r1, r5
 800eefc:	f7f1 fb7c 	bl	80005f8 <__aeabi_dmul>
 800ef00:	a33d      	add	r3, pc, #244	; (adr r3, 800eff8 <__kernel_cos+0x148>)
 800ef02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef06:	f7f1 f9c1 	bl	800028c <__adddf3>
 800ef0a:	4622      	mov	r2, r4
 800ef0c:	462b      	mov	r3, r5
 800ef0e:	f7f1 fb73 	bl	80005f8 <__aeabi_dmul>
 800ef12:	a33b      	add	r3, pc, #236	; (adr r3, 800f000 <__kernel_cos+0x150>)
 800ef14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef18:	f7f1 f9b6 	bl	8000288 <__aeabi_dsub>
 800ef1c:	4622      	mov	r2, r4
 800ef1e:	462b      	mov	r3, r5
 800ef20:	f7f1 fb6a 	bl	80005f8 <__aeabi_dmul>
 800ef24:	a338      	add	r3, pc, #224	; (adr r3, 800f008 <__kernel_cos+0x158>)
 800ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2a:	f7f1 f9af 	bl	800028c <__adddf3>
 800ef2e:	4622      	mov	r2, r4
 800ef30:	462b      	mov	r3, r5
 800ef32:	f7f1 fb61 	bl	80005f8 <__aeabi_dmul>
 800ef36:	a336      	add	r3, pc, #216	; (adr r3, 800f010 <__kernel_cos+0x160>)
 800ef38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3c:	f7f1 f9a4 	bl	8000288 <__aeabi_dsub>
 800ef40:	4622      	mov	r2, r4
 800ef42:	462b      	mov	r3, r5
 800ef44:	f7f1 fb58 	bl	80005f8 <__aeabi_dmul>
 800ef48:	a333      	add	r3, pc, #204	; (adr r3, 800f018 <__kernel_cos+0x168>)
 800ef4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4e:	f7f1 f99d 	bl	800028c <__adddf3>
 800ef52:	4622      	mov	r2, r4
 800ef54:	462b      	mov	r3, r5
 800ef56:	f7f1 fb4f 	bl	80005f8 <__aeabi_dmul>
 800ef5a:	4622      	mov	r2, r4
 800ef5c:	462b      	mov	r3, r5
 800ef5e:	f7f1 fb4b 	bl	80005f8 <__aeabi_dmul>
 800ef62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef66:	4604      	mov	r4, r0
 800ef68:	460d      	mov	r5, r1
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	4639      	mov	r1, r7
 800ef6e:	f7f1 fb43 	bl	80005f8 <__aeabi_dmul>
 800ef72:	460b      	mov	r3, r1
 800ef74:	4602      	mov	r2, r0
 800ef76:	4629      	mov	r1, r5
 800ef78:	4620      	mov	r0, r4
 800ef7a:	f7f1 f985 	bl	8000288 <__aeabi_dsub>
 800ef7e:	4b2b      	ldr	r3, [pc, #172]	; (800f02c <__kernel_cos+0x17c>)
 800ef80:	4598      	cmp	r8, r3
 800ef82:	4606      	mov	r6, r0
 800ef84:	460f      	mov	r7, r1
 800ef86:	dc10      	bgt.n	800efaa <__kernel_cos+0xfa>
 800ef88:	4602      	mov	r2, r0
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	4650      	mov	r0, sl
 800ef8e:	4659      	mov	r1, fp
 800ef90:	f7f1 f97a 	bl	8000288 <__aeabi_dsub>
 800ef94:	460b      	mov	r3, r1
 800ef96:	4926      	ldr	r1, [pc, #152]	; (800f030 <__kernel_cos+0x180>)
 800ef98:	4602      	mov	r2, r0
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	f7f1 f974 	bl	8000288 <__aeabi_dsub>
 800efa0:	ec41 0b10 	vmov	d0, r0, r1
 800efa4:	b003      	add	sp, #12
 800efa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efaa:	4b22      	ldr	r3, [pc, #136]	; (800f034 <__kernel_cos+0x184>)
 800efac:	4920      	ldr	r1, [pc, #128]	; (800f030 <__kernel_cos+0x180>)
 800efae:	4598      	cmp	r8, r3
 800efb0:	bfcc      	ite	gt
 800efb2:	4d21      	ldrgt	r5, [pc, #132]	; (800f038 <__kernel_cos+0x188>)
 800efb4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800efb8:	2400      	movs	r4, #0
 800efba:	4622      	mov	r2, r4
 800efbc:	462b      	mov	r3, r5
 800efbe:	2000      	movs	r0, #0
 800efc0:	f7f1 f962 	bl	8000288 <__aeabi_dsub>
 800efc4:	4622      	mov	r2, r4
 800efc6:	4680      	mov	r8, r0
 800efc8:	4689      	mov	r9, r1
 800efca:	462b      	mov	r3, r5
 800efcc:	4650      	mov	r0, sl
 800efce:	4659      	mov	r1, fp
 800efd0:	f7f1 f95a 	bl	8000288 <__aeabi_dsub>
 800efd4:	4632      	mov	r2, r6
 800efd6:	463b      	mov	r3, r7
 800efd8:	f7f1 f956 	bl	8000288 <__aeabi_dsub>
 800efdc:	4602      	mov	r2, r0
 800efde:	460b      	mov	r3, r1
 800efe0:	4640      	mov	r0, r8
 800efe2:	4649      	mov	r1, r9
 800efe4:	e7da      	b.n	800ef9c <__kernel_cos+0xec>
 800efe6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f020 <__kernel_cos+0x170>
 800efea:	e7db      	b.n	800efa4 <__kernel_cos+0xf4>
 800efec:	f3af 8000 	nop.w
 800eff0:	be8838d4 	.word	0xbe8838d4
 800eff4:	bda8fae9 	.word	0xbda8fae9
 800eff8:	bdb4b1c4 	.word	0xbdb4b1c4
 800effc:	3e21ee9e 	.word	0x3e21ee9e
 800f000:	809c52ad 	.word	0x809c52ad
 800f004:	3e927e4f 	.word	0x3e927e4f
 800f008:	19cb1590 	.word	0x19cb1590
 800f00c:	3efa01a0 	.word	0x3efa01a0
 800f010:	16c15177 	.word	0x16c15177
 800f014:	3f56c16c 	.word	0x3f56c16c
 800f018:	5555554c 	.word	0x5555554c
 800f01c:	3fa55555 	.word	0x3fa55555
 800f020:	00000000 	.word	0x00000000
 800f024:	3ff00000 	.word	0x3ff00000
 800f028:	3fe00000 	.word	0x3fe00000
 800f02c:	3fd33332 	.word	0x3fd33332
 800f030:	3ff00000 	.word	0x3ff00000
 800f034:	3fe90000 	.word	0x3fe90000
 800f038:	3fd20000 	.word	0x3fd20000
 800f03c:	00000000 	.word	0x00000000

0800f040 <__kernel_sin>:
 800f040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f044:	ed2d 8b04 	vpush	{d8-d9}
 800f048:	eeb0 8a41 	vmov.f32	s16, s2
 800f04c:	eef0 8a61 	vmov.f32	s17, s3
 800f050:	ec55 4b10 	vmov	r4, r5, d0
 800f054:	b083      	sub	sp, #12
 800f056:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f05a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f05e:	9001      	str	r0, [sp, #4]
 800f060:	da06      	bge.n	800f070 <__kernel_sin+0x30>
 800f062:	ee10 0a10 	vmov	r0, s0
 800f066:	4629      	mov	r1, r5
 800f068:	f7f1 fd76 	bl	8000b58 <__aeabi_d2iz>
 800f06c:	2800      	cmp	r0, #0
 800f06e:	d051      	beq.n	800f114 <__kernel_sin+0xd4>
 800f070:	4622      	mov	r2, r4
 800f072:	462b      	mov	r3, r5
 800f074:	4620      	mov	r0, r4
 800f076:	4629      	mov	r1, r5
 800f078:	f7f1 fabe 	bl	80005f8 <__aeabi_dmul>
 800f07c:	4682      	mov	sl, r0
 800f07e:	468b      	mov	fp, r1
 800f080:	4602      	mov	r2, r0
 800f082:	460b      	mov	r3, r1
 800f084:	4620      	mov	r0, r4
 800f086:	4629      	mov	r1, r5
 800f088:	f7f1 fab6 	bl	80005f8 <__aeabi_dmul>
 800f08c:	a341      	add	r3, pc, #260	; (adr r3, 800f194 <__kernel_sin+0x154>)
 800f08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f092:	4680      	mov	r8, r0
 800f094:	4689      	mov	r9, r1
 800f096:	4650      	mov	r0, sl
 800f098:	4659      	mov	r1, fp
 800f09a:	f7f1 faad 	bl	80005f8 <__aeabi_dmul>
 800f09e:	a33f      	add	r3, pc, #252	; (adr r3, 800f19c <__kernel_sin+0x15c>)
 800f0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a4:	f7f1 f8f0 	bl	8000288 <__aeabi_dsub>
 800f0a8:	4652      	mov	r2, sl
 800f0aa:	465b      	mov	r3, fp
 800f0ac:	f7f1 faa4 	bl	80005f8 <__aeabi_dmul>
 800f0b0:	a33c      	add	r3, pc, #240	; (adr r3, 800f1a4 <__kernel_sin+0x164>)
 800f0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b6:	f7f1 f8e9 	bl	800028c <__adddf3>
 800f0ba:	4652      	mov	r2, sl
 800f0bc:	465b      	mov	r3, fp
 800f0be:	f7f1 fa9b 	bl	80005f8 <__aeabi_dmul>
 800f0c2:	a33a      	add	r3, pc, #232	; (adr r3, 800f1ac <__kernel_sin+0x16c>)
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f7f1 f8de 	bl	8000288 <__aeabi_dsub>
 800f0cc:	4652      	mov	r2, sl
 800f0ce:	465b      	mov	r3, fp
 800f0d0:	f7f1 fa92 	bl	80005f8 <__aeabi_dmul>
 800f0d4:	a337      	add	r3, pc, #220	; (adr r3, 800f1b4 <__kernel_sin+0x174>)
 800f0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0da:	f7f1 f8d7 	bl	800028c <__adddf3>
 800f0de:	9b01      	ldr	r3, [sp, #4]
 800f0e0:	4606      	mov	r6, r0
 800f0e2:	460f      	mov	r7, r1
 800f0e4:	b9eb      	cbnz	r3, 800f122 <__kernel_sin+0xe2>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	4650      	mov	r0, sl
 800f0ec:	4659      	mov	r1, fp
 800f0ee:	f7f1 fa83 	bl	80005f8 <__aeabi_dmul>
 800f0f2:	a325      	add	r3, pc, #148	; (adr r3, 800f188 <__kernel_sin+0x148>)
 800f0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f8:	f7f1 f8c6 	bl	8000288 <__aeabi_dsub>
 800f0fc:	4642      	mov	r2, r8
 800f0fe:	464b      	mov	r3, r9
 800f100:	f7f1 fa7a 	bl	80005f8 <__aeabi_dmul>
 800f104:	4602      	mov	r2, r0
 800f106:	460b      	mov	r3, r1
 800f108:	4620      	mov	r0, r4
 800f10a:	4629      	mov	r1, r5
 800f10c:	f7f1 f8be 	bl	800028c <__adddf3>
 800f110:	4604      	mov	r4, r0
 800f112:	460d      	mov	r5, r1
 800f114:	ec45 4b10 	vmov	d0, r4, r5
 800f118:	b003      	add	sp, #12
 800f11a:	ecbd 8b04 	vpop	{d8-d9}
 800f11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f122:	4b1b      	ldr	r3, [pc, #108]	; (800f190 <__kernel_sin+0x150>)
 800f124:	ec51 0b18 	vmov	r0, r1, d8
 800f128:	2200      	movs	r2, #0
 800f12a:	f7f1 fa65 	bl	80005f8 <__aeabi_dmul>
 800f12e:	4632      	mov	r2, r6
 800f130:	ec41 0b19 	vmov	d9, r0, r1
 800f134:	463b      	mov	r3, r7
 800f136:	4640      	mov	r0, r8
 800f138:	4649      	mov	r1, r9
 800f13a:	f7f1 fa5d 	bl	80005f8 <__aeabi_dmul>
 800f13e:	4602      	mov	r2, r0
 800f140:	460b      	mov	r3, r1
 800f142:	ec51 0b19 	vmov	r0, r1, d9
 800f146:	f7f1 f89f 	bl	8000288 <__aeabi_dsub>
 800f14a:	4652      	mov	r2, sl
 800f14c:	465b      	mov	r3, fp
 800f14e:	f7f1 fa53 	bl	80005f8 <__aeabi_dmul>
 800f152:	ec53 2b18 	vmov	r2, r3, d8
 800f156:	f7f1 f897 	bl	8000288 <__aeabi_dsub>
 800f15a:	a30b      	add	r3, pc, #44	; (adr r3, 800f188 <__kernel_sin+0x148>)
 800f15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f160:	4606      	mov	r6, r0
 800f162:	460f      	mov	r7, r1
 800f164:	4640      	mov	r0, r8
 800f166:	4649      	mov	r1, r9
 800f168:	f7f1 fa46 	bl	80005f8 <__aeabi_dmul>
 800f16c:	4602      	mov	r2, r0
 800f16e:	460b      	mov	r3, r1
 800f170:	4630      	mov	r0, r6
 800f172:	4639      	mov	r1, r7
 800f174:	f7f1 f88a 	bl	800028c <__adddf3>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4620      	mov	r0, r4
 800f17e:	4629      	mov	r1, r5
 800f180:	f7f1 f882 	bl	8000288 <__aeabi_dsub>
 800f184:	e7c4      	b.n	800f110 <__kernel_sin+0xd0>
 800f186:	bf00      	nop
 800f188:	55555549 	.word	0x55555549
 800f18c:	3fc55555 	.word	0x3fc55555
 800f190:	3fe00000 	.word	0x3fe00000
 800f194:	5acfd57c 	.word	0x5acfd57c
 800f198:	3de5d93a 	.word	0x3de5d93a
 800f19c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f1a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800f1a4:	57b1fe7d 	.word	0x57b1fe7d
 800f1a8:	3ec71de3 	.word	0x3ec71de3
 800f1ac:	19c161d5 	.word	0x19c161d5
 800f1b0:	3f2a01a0 	.word	0x3f2a01a0
 800f1b4:	1110f8a6 	.word	0x1110f8a6
 800f1b8:	3f811111 	.word	0x3f811111

0800f1bc <fabs>:
 800f1bc:	ec51 0b10 	vmov	r0, r1, d0
 800f1c0:	ee10 2a10 	vmov	r2, s0
 800f1c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f1c8:	ec43 2b10 	vmov	d0, r2, r3
 800f1cc:	4770      	bx	lr
	...

0800f1d0 <scalbn>:
 800f1d0:	b570      	push	{r4, r5, r6, lr}
 800f1d2:	ec55 4b10 	vmov	r4, r5, d0
 800f1d6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f1da:	4606      	mov	r6, r0
 800f1dc:	462b      	mov	r3, r5
 800f1de:	b999      	cbnz	r1, 800f208 <scalbn+0x38>
 800f1e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f1e4:	4323      	orrs	r3, r4
 800f1e6:	d03f      	beq.n	800f268 <scalbn+0x98>
 800f1e8:	4b35      	ldr	r3, [pc, #212]	; (800f2c0 <scalbn+0xf0>)
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	ee10 0a10 	vmov	r0, s0
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f7f1 fa01 	bl	80005f8 <__aeabi_dmul>
 800f1f6:	4b33      	ldr	r3, [pc, #204]	; (800f2c4 <scalbn+0xf4>)
 800f1f8:	429e      	cmp	r6, r3
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	460d      	mov	r5, r1
 800f1fe:	da10      	bge.n	800f222 <scalbn+0x52>
 800f200:	a327      	add	r3, pc, #156	; (adr r3, 800f2a0 <scalbn+0xd0>)
 800f202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f206:	e01f      	b.n	800f248 <scalbn+0x78>
 800f208:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f20c:	4291      	cmp	r1, r2
 800f20e:	d10c      	bne.n	800f22a <scalbn+0x5a>
 800f210:	ee10 2a10 	vmov	r2, s0
 800f214:	4620      	mov	r0, r4
 800f216:	4629      	mov	r1, r5
 800f218:	f7f1 f838 	bl	800028c <__adddf3>
 800f21c:	4604      	mov	r4, r0
 800f21e:	460d      	mov	r5, r1
 800f220:	e022      	b.n	800f268 <scalbn+0x98>
 800f222:	460b      	mov	r3, r1
 800f224:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f228:	3936      	subs	r1, #54	; 0x36
 800f22a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f22e:	4296      	cmp	r6, r2
 800f230:	dd0d      	ble.n	800f24e <scalbn+0x7e>
 800f232:	2d00      	cmp	r5, #0
 800f234:	a11c      	add	r1, pc, #112	; (adr r1, 800f2a8 <scalbn+0xd8>)
 800f236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f23a:	da02      	bge.n	800f242 <scalbn+0x72>
 800f23c:	a11c      	add	r1, pc, #112	; (adr r1, 800f2b0 <scalbn+0xe0>)
 800f23e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f242:	a319      	add	r3, pc, #100	; (adr r3, 800f2a8 <scalbn+0xd8>)
 800f244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f248:	f7f1 f9d6 	bl	80005f8 <__aeabi_dmul>
 800f24c:	e7e6      	b.n	800f21c <scalbn+0x4c>
 800f24e:	1872      	adds	r2, r6, r1
 800f250:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f254:	428a      	cmp	r2, r1
 800f256:	dcec      	bgt.n	800f232 <scalbn+0x62>
 800f258:	2a00      	cmp	r2, #0
 800f25a:	dd08      	ble.n	800f26e <scalbn+0x9e>
 800f25c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f260:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f264:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f268:	ec45 4b10 	vmov	d0, r4, r5
 800f26c:	bd70      	pop	{r4, r5, r6, pc}
 800f26e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f272:	da08      	bge.n	800f286 <scalbn+0xb6>
 800f274:	2d00      	cmp	r5, #0
 800f276:	a10a      	add	r1, pc, #40	; (adr r1, 800f2a0 <scalbn+0xd0>)
 800f278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f27c:	dac0      	bge.n	800f200 <scalbn+0x30>
 800f27e:	a10e      	add	r1, pc, #56	; (adr r1, 800f2b8 <scalbn+0xe8>)
 800f280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f284:	e7bc      	b.n	800f200 <scalbn+0x30>
 800f286:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f28a:	3236      	adds	r2, #54	; 0x36
 800f28c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f290:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f294:	4620      	mov	r0, r4
 800f296:	4b0c      	ldr	r3, [pc, #48]	; (800f2c8 <scalbn+0xf8>)
 800f298:	2200      	movs	r2, #0
 800f29a:	e7d5      	b.n	800f248 <scalbn+0x78>
 800f29c:	f3af 8000 	nop.w
 800f2a0:	c2f8f359 	.word	0xc2f8f359
 800f2a4:	01a56e1f 	.word	0x01a56e1f
 800f2a8:	8800759c 	.word	0x8800759c
 800f2ac:	7e37e43c 	.word	0x7e37e43c
 800f2b0:	8800759c 	.word	0x8800759c
 800f2b4:	fe37e43c 	.word	0xfe37e43c
 800f2b8:	c2f8f359 	.word	0xc2f8f359
 800f2bc:	81a56e1f 	.word	0x81a56e1f
 800f2c0:	43500000 	.word	0x43500000
 800f2c4:	ffff3cb0 	.word	0xffff3cb0
 800f2c8:	3c900000 	.word	0x3c900000
 800f2cc:	00000000 	.word	0x00000000

0800f2d0 <floor>:
 800f2d0:	ec51 0b10 	vmov	r0, r1, d0
 800f2d4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2dc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f2e0:	2e13      	cmp	r6, #19
 800f2e2:	ee10 5a10 	vmov	r5, s0
 800f2e6:	ee10 8a10 	vmov	r8, s0
 800f2ea:	460c      	mov	r4, r1
 800f2ec:	dc31      	bgt.n	800f352 <floor+0x82>
 800f2ee:	2e00      	cmp	r6, #0
 800f2f0:	da14      	bge.n	800f31c <floor+0x4c>
 800f2f2:	a333      	add	r3, pc, #204	; (adr r3, 800f3c0 <floor+0xf0>)
 800f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f8:	f7f0 ffc8 	bl	800028c <__adddf3>
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	2300      	movs	r3, #0
 800f300:	f7f1 fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 800f304:	b138      	cbz	r0, 800f316 <floor+0x46>
 800f306:	2c00      	cmp	r4, #0
 800f308:	da53      	bge.n	800f3b2 <floor+0xe2>
 800f30a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f30e:	4325      	orrs	r5, r4
 800f310:	d052      	beq.n	800f3b8 <floor+0xe8>
 800f312:	4c2d      	ldr	r4, [pc, #180]	; (800f3c8 <floor+0xf8>)
 800f314:	2500      	movs	r5, #0
 800f316:	4621      	mov	r1, r4
 800f318:	4628      	mov	r0, r5
 800f31a:	e024      	b.n	800f366 <floor+0x96>
 800f31c:	4f2b      	ldr	r7, [pc, #172]	; (800f3cc <floor+0xfc>)
 800f31e:	4137      	asrs	r7, r6
 800f320:	ea01 0307 	and.w	r3, r1, r7
 800f324:	4303      	orrs	r3, r0
 800f326:	d01e      	beq.n	800f366 <floor+0x96>
 800f328:	a325      	add	r3, pc, #148	; (adr r3, 800f3c0 <floor+0xf0>)
 800f32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32e:	f7f0 ffad 	bl	800028c <__adddf3>
 800f332:	2200      	movs	r2, #0
 800f334:	2300      	movs	r3, #0
 800f336:	f7f1 fbef 	bl	8000b18 <__aeabi_dcmpgt>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	d0eb      	beq.n	800f316 <floor+0x46>
 800f33e:	2c00      	cmp	r4, #0
 800f340:	bfbe      	ittt	lt
 800f342:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f346:	4133      	asrlt	r3, r6
 800f348:	18e4      	addlt	r4, r4, r3
 800f34a:	ea24 0407 	bic.w	r4, r4, r7
 800f34e:	2500      	movs	r5, #0
 800f350:	e7e1      	b.n	800f316 <floor+0x46>
 800f352:	2e33      	cmp	r6, #51	; 0x33
 800f354:	dd0b      	ble.n	800f36e <floor+0x9e>
 800f356:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f35a:	d104      	bne.n	800f366 <floor+0x96>
 800f35c:	ee10 2a10 	vmov	r2, s0
 800f360:	460b      	mov	r3, r1
 800f362:	f7f0 ff93 	bl	800028c <__adddf3>
 800f366:	ec41 0b10 	vmov	d0, r0, r1
 800f36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f36e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f372:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f376:	40df      	lsrs	r7, r3
 800f378:	4238      	tst	r0, r7
 800f37a:	d0f4      	beq.n	800f366 <floor+0x96>
 800f37c:	a310      	add	r3, pc, #64	; (adr r3, 800f3c0 <floor+0xf0>)
 800f37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f382:	f7f0 ff83 	bl	800028c <__adddf3>
 800f386:	2200      	movs	r2, #0
 800f388:	2300      	movs	r3, #0
 800f38a:	f7f1 fbc5 	bl	8000b18 <__aeabi_dcmpgt>
 800f38e:	2800      	cmp	r0, #0
 800f390:	d0c1      	beq.n	800f316 <floor+0x46>
 800f392:	2c00      	cmp	r4, #0
 800f394:	da0a      	bge.n	800f3ac <floor+0xdc>
 800f396:	2e14      	cmp	r6, #20
 800f398:	d101      	bne.n	800f39e <floor+0xce>
 800f39a:	3401      	adds	r4, #1
 800f39c:	e006      	b.n	800f3ac <floor+0xdc>
 800f39e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	40b3      	lsls	r3, r6
 800f3a6:	441d      	add	r5, r3
 800f3a8:	45a8      	cmp	r8, r5
 800f3aa:	d8f6      	bhi.n	800f39a <floor+0xca>
 800f3ac:	ea25 0507 	bic.w	r5, r5, r7
 800f3b0:	e7b1      	b.n	800f316 <floor+0x46>
 800f3b2:	2500      	movs	r5, #0
 800f3b4:	462c      	mov	r4, r5
 800f3b6:	e7ae      	b.n	800f316 <floor+0x46>
 800f3b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f3bc:	e7ab      	b.n	800f316 <floor+0x46>
 800f3be:	bf00      	nop
 800f3c0:	8800759c 	.word	0x8800759c
 800f3c4:	7e37e43c 	.word	0x7e37e43c
 800f3c8:	bff00000 	.word	0xbff00000
 800f3cc:	000fffff 	.word	0x000fffff

0800f3d0 <_init>:
 800f3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d2:	bf00      	nop
 800f3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3d6:	bc08      	pop	{r3}
 800f3d8:	469e      	mov	lr, r3
 800f3da:	4770      	bx	lr

0800f3dc <_fini>:
 800f3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3de:	bf00      	nop
 800f3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3e2:	bc08      	pop	{r3}
 800f3e4:	469e      	mov	lr, r3
 800f3e6:	4770      	bx	lr

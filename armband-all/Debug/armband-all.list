
armband-all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  0800fdb8  0800fdb8  0001fdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010570  08010570  00030220  2**0
                  CONTENTS
  4 .ARM          00000008  08010570  08010570  00020570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010578  08010578  00030220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010578  08010578  00020578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801057c  0801057c  0002057c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08010580  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000220  080107a0  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bf0  080107a0  00030bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cef4  00000000  00000000  00030293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004233  00000000  00000000  0004d187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba8  00000000  00000000  000513c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000158f  00000000  00000000  00052f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261b0  00000000  00000000  000544f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002065a  00000000  00000000  0007a6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e375a  00000000  00000000  0009ad01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008d18  00000000  00000000  0017e45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00187174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fda0 	.word	0x0800fda0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800fda0 	.word	0x0800fda0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <fix_msb_loss>:
 * exceed 286 m/s2
 * this is 100% fine for gravity vector
 * this is most likely fine for acc vector as no runner is
 * putting out 30g's while running
 */
uint16_t fix_msb_loss(uint16_t val){
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	if ((val & 0xF000) == 0x7000) {
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001000:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001004:	d105      	bne.n	8001012 <fix_msb_loss+0x22>
		val |= 0x8000;
 8001006:	88fb      	ldrh	r3, [r7, #6]
 8001008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800100c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001010:	80fb      	strh	r3, [r7, #6]
	}
	return val;
 8001012:	88fb      	ldrh	r3, [r7, #6]
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <startup_IMU>:

void startup_IMU(I2C_HandleTypeDef *hi2c){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	// verify i2c is working properly by reading chip id
	read_to_buf(hi2c, 0x00, buf, 1);
 8001028:	f107 020c 	add.w	r2, r7, #12
 800102c:	2301      	movs	r3, #1
 800102e:	2100      	movs	r1, #0
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f000 f848 	bl	80010c6 <read_to_buf>
	if(buf[0] != 0xA0) {
 8001036:	7b3b      	ldrb	r3, [r7, #12]
 8001038:	2ba0      	cmp	r3, #160	; 0xa0
 800103a:	d003      	beq.n	8001044 <startup_IMU+0x24>
		printf("chip error, wrong/no chip ID returned\n\r");
 800103c:	4808      	ldr	r0, [pc, #32]	; (8001060 <startup_IMU+0x40>)
 800103e:	f00a ffb1 	bl	800bfa4 <iprintf>
 8001042:	e00a      	b.n	800105a <startup_IMU+0x3a>
		return;
	}

	// put chip in configuration mode
	buf[0] = 0x3D;
 8001044:	233d      	movs	r3, #61	; 0x3d
 8001046:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x00;
 8001048:	2300      	movs	r3, #0
 800104a:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2202      	movs	r2, #2
 8001052:	4619      	mov	r1, r3
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 f81b 	bl	8001090 <transmit_buf>
}
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	0800fdb8 	.word	0x0800fdb8

08001064 <init_IMU>:

void init_IMU(I2C_HandleTypeDef *hi2c){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	startup_IMU(hi2c);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ffd7 	bl	8001020 <startup_IMU>

	// put chip in IMU mode
	buf[0] = 0x3D;
 8001072:	233d      	movs	r3, #61	; 0x3d
 8001074:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x08;
 8001076:	2308      	movs	r3, #8
 8001078:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	2202      	movs	r2, #2
 8001080:	4619      	mov	r1, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f804 	bl	8001090 <transmit_buf>
}
 8001088:	bf00      	nop
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <transmit_buf>:
	buf[1] = buf[0];
	buf[0] = 0x3B;
	transmit_buf(hi2c, buf, 2);
}

uint8_t transmit_buf(I2C_HandleTypeDef *hi2c, uint8_t *buf, uint16_t bytes) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af02      	add	r7, sp, #8
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, bytes, 1000);
 800109e:	88fb      	ldrh	r3, [r7, #6]
 80010a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010a4:	9200      	str	r2, [sp, #0]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	2150      	movs	r1, #80	; 0x50
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f004 fb5e 	bl	800576c <HAL_I2C_Master_Transmit>
 80010b0:	4603      	mov	r3, r0
 80010b2:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f838 	bl	800112c <check_ret>
 80010bc:	4603      	mov	r3, r0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <read_to_buf>:

uint8_t read_to_buf(I2C_HandleTypeDef *hi2c, uint8_t subAddr, uint8_t *buf, uint16_t bytes){
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b088      	sub	sp, #32
 80010ca:	af02      	add	r7, sp, #8
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	607a      	str	r2, [r7, #4]
 80010d0:	461a      	mov	r2, r3
 80010d2:	460b      	mov	r3, r1
 80010d4:	72fb      	strb	r3, [r7, #11]
 80010d6:	4613      	mov	r3, r2
 80010d8:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, &subAddr, 1, 1000);
 80010da:	f107 020b 	add.w	r2, r7, #11
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	2150      	movs	r1, #80	; 0x50
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f004 fb3f 	bl	800576c <HAL_I2C_Master_Transmit>
 80010ee:	4603      	mov	r3, r0
 80010f0:	75fb      	strb	r3, [r7, #23]
	if (!check_ret(ret)) return 0;
 80010f2:	7dfb      	ldrb	r3, [r7, #23]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f000 f819 	bl	800112c <check_ret>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d101      	bne.n	8001104 <read_to_buf+0x3e>
 8001100:	2300      	movs	r3, #0
 8001102:	e00f      	b.n	8001124 <read_to_buf+0x5e>
	ret = HAL_I2C_Master_Receive(hi2c, SAD_R, buf, bytes, 1000);
 8001104:	893b      	ldrh	r3, [r7, #8]
 8001106:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800110a:	9200      	str	r2, [sp, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	2151      	movs	r1, #81	; 0x51
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f004 fc43 	bl	800599c <HAL_I2C_Master_Receive>
 8001116:	4603      	mov	r3, r0
 8001118:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 f805 	bl	800112c <check_ret>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <check_ret>:

uint8_t check_ret(HAL_StatusTypeDef ret) {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK) {
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <check_ret+0x14>
		return 1;
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <check_ret+0x16>
	} else {
		// TODO:
		// add more descriptive error
		//printf("i2c error!\n\r");
		return 0;
 8001140:	2300      	movs	r3, #0
	}
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <lin_acc_vec_raw>:

void lin_acc_vec_raw(I2C_HandleTypeDef *hi2c, int16_t* vec) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];
	read_to_buf(hi2c, 0x28, buf, 6);
 8001158:	f107 0208 	add.w	r2, r7, #8
 800115c:	2306      	movs	r3, #6
 800115e:	2128      	movs	r1, #40	; 0x28
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ffb0 	bl	80010c6 <read_to_buf>
	vec[0] = fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 8001166:	7a3b      	ldrb	r3, [r7, #8]
 8001168:	b21a      	sxth	r2, r3
 800116a:	7a7b      	ldrb	r3, [r7, #9]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21b      	sxth	r3, r3
 8001170:	4313      	orrs	r3, r2
 8001172:	b21b      	sxth	r3, r3
 8001174:	b29b      	uxth	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff3a 	bl	8000ff0 <fix_msb_loss>
 800117c:	4603      	mov	r3, r0
 800117e:	b21a      	sxth	r2, r3
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	801a      	strh	r2, [r3, #0]
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
 8001184:	7abb      	ldrb	r3, [r7, #10]
 8001186:	b21a      	sxth	r2, r3
 8001188:	7afb      	ldrb	r3, [r7, #11]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	b29b      	uxth	r3, r3
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff2b 	bl	8000ff0 <fix_msb_loss>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	3302      	adds	r3, #2
 80011a2:	b212      	sxth	r2, r2
 80011a4:	801a      	strh	r2, [r3, #0]
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
 80011a6:	7b3b      	ldrb	r3, [r7, #12]
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	7b7b      	ldrb	r3, [r7, #13]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	4313      	orrs	r3, r2
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff1a 	bl	8000ff0 <fix_msb_loss>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	3304      	adds	r3, #4
 80011c4:	b212      	sxth	r2, r2
 80011c6:	801a      	strh	r2, [r3, #0]
	return;
 80011c8:	bf00      	nop
}
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <initPulseSensor>:
static bool first_beat = true;		// first beat bool
static bool second_beat = false; 	// second beat bool
static bool pulse = false; 		// pulse recognized bool
static int samples_since_last_beat = 0;

void initPulseSensor(ADC_HandleTypeDef *hadc_in) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	hadc = hadc_in;
 80011d8:	4a04      	ldr	r2, [pc, #16]	; (80011ec <initPulseSensor+0x1c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000023c 	.word	0x2000023c

080011f0 <updatePulseSensor>:

void updatePulseSensor(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	read_ADC();
 80011f4:	f000 f804 	bl	8001200 <read_ADC>
	get_pulse();
 80011f8:	f000 f834 	bl	8001264 <get_pulse>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <read_ADC>:

void read_ADC(void) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
	//uint32_t val;
	unsigned int val;

	HAL_ADC_Start(hadc);
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <read_ADC+0x54>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f964 	bl	80044d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 0xFFFFFFFF);
 8001210:	4b10      	ldr	r3, [pc, #64]	; (8001254 <read_ADC+0x54>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001218:	4618      	mov	r0, r3
 800121a:	f003 f9c0 	bl	800459e <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(hadc);
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <read_ADC+0x54>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f003 fa4a 	bl	80046bc <HAL_ADC_GetValue>
 8001228:	6078      	str	r0, [r7, #4]
	signal = val * 3.3f / 4096.0f;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	ee07 3a90 	vmov	s15, r3
 8001230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001234:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001258 <read_ADC+0x58>
 8001238:	ee27 7a87 	vmul.f32	s14, s15, s14
 800123c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800125c <read_ADC+0x5c>
 8001240:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <read_ADC+0x60>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000023c 	.word	0x2000023c
 8001258:	40533333 	.word	0x40533333
 800125c:	45800000 	.word	0x45800000
 8001260:	200002bc 	.word	0x200002bc

08001264 <get_pulse>:

void get_pulse() {
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
	++samples_since_last_beat;
 800126a:	4b95      	ldr	r3, [pc, #596]	; (80014c0 <get_pulse+0x25c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	4a93      	ldr	r2, [pc, #588]	; (80014c0 <get_pulse+0x25c>)
 8001272:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_beat * SAMPLE_PERIOD;
 8001274:	4b92      	ldr	r3, [pc, #584]	; (80014c0 <get_pulse+0x25c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2232      	movs	r2, #50	; 0x32
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	603b      	str	r3, [r7, #0]
	if (signal < thresh && N > (IBI / 5) * 3) { // avoid dicrotic noise by waiting 3/5 of last IBI
 8001280:	4b90      	ldr	r3, [pc, #576]	; (80014c4 <get_pulse+0x260>)
 8001282:	ed93 7a00 	vldr	s14, [r3]
 8001286:	4b90      	ldr	r3, [pc, #576]	; (80014c8 <get_pulse+0x264>)
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	d51c      	bpl.n	80012d0 <get_pulse+0x6c>
 8001296:	4b8d      	ldr	r3, [pc, #564]	; (80014cc <get_pulse+0x268>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a8d      	ldr	r2, [pc, #564]	; (80014d0 <get_pulse+0x26c>)
 800129c:	fb82 1203 	smull	r1, r2, r2, r3
 80012a0:	1052      	asrs	r2, r2, #1
 80012a2:	17db      	asrs	r3, r3, #31
 80012a4:	1ad2      	subs	r2, r2, r3
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	dd0e      	ble.n	80012d0 <get_pulse+0x6c>
	    if (signal < trough_amp) {                        // T is the trough
 80012b2:	4b84      	ldr	r3, [pc, #528]	; (80014c4 <get_pulse+0x260>)
 80012b4:	ed93 7a00 	vldr	s14, [r3]
 80012b8:	4b86      	ldr	r3, [pc, #536]	; (80014d4 <get_pulse+0x270>)
 80012ba:	edd3 7a00 	vldr	s15, [r3]
 80012be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c6:	d503      	bpl.n	80012d0 <get_pulse+0x6c>
	      trough_amp = signal;                            // keep track of lowest point in pulse wave
 80012c8:	4b7e      	ldr	r3, [pc, #504]	; (80014c4 <get_pulse+0x260>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a81      	ldr	r2, [pc, #516]	; (80014d4 <get_pulse+0x270>)
 80012ce:	6013      	str	r3, [r2, #0]
	    }
	  }

	  if (signal > thresh && signal > peak_amp) {       // thresh condition helps avoid noise
 80012d0:	4b7c      	ldr	r3, [pc, #496]	; (80014c4 <get_pulse+0x260>)
 80012d2:	ed93 7a00 	vldr	s14, [r3]
 80012d6:	4b7c      	ldr	r3, [pc, #496]	; (80014c8 <get_pulse+0x264>)
 80012d8:	edd3 7a00 	vldr	s15, [r3]
 80012dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e4:	dd0e      	ble.n	8001304 <get_pulse+0xa0>
 80012e6:	4b77      	ldr	r3, [pc, #476]	; (80014c4 <get_pulse+0x260>)
 80012e8:	ed93 7a00 	vldr	s14, [r3]
 80012ec:	4b7a      	ldr	r3, [pc, #488]	; (80014d8 <get_pulse+0x274>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fa:	dd03      	ble.n	8001304 <get_pulse+0xa0>
		  peak_amp = signal;                              // P is the peak
 80012fc:	4b71      	ldr	r3, [pc, #452]	; (80014c4 <get_pulse+0x260>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a75      	ldr	r2, [pc, #468]	; (80014d8 <get_pulse+0x274>)
 8001302:	6013      	str	r3, [r2, #0]
	  }                                          // keep track of highest point in pulse wave

	  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	  // signal surges up in value every time there is a pulse
	  if (N > 250) {                             // avoid high frequency noise
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2bfa      	cmp	r3, #250	; 0xfa
 8001308:	dd7d      	ble.n	8001406 <get_pulse+0x1a2>
	    if ( (signal > thresh) && (pulse == false) && (N > ((IBI / 5) * 3)) ) {
 800130a:	4b6e      	ldr	r3, [pc, #440]	; (80014c4 <get_pulse+0x260>)
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <get_pulse+0x264>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131e:	dd72      	ble.n	8001406 <get_pulse+0x1a2>
 8001320:	4b6e      	ldr	r3, [pc, #440]	; (80014dc <get_pulse+0x278>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	f083 0301 	eor.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d06b      	beq.n	8001406 <get_pulse+0x1a2>
 800132e:	4b67      	ldr	r3, [pc, #412]	; (80014cc <get_pulse+0x268>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a67      	ldr	r2, [pc, #412]	; (80014d0 <get_pulse+0x26c>)
 8001334:	fb82 1203 	smull	r1, r2, r2, r3
 8001338:	1052      	asrs	r2, r2, #1
 800133a:	17db      	asrs	r3, r3, #31
 800133c:	1ad2      	subs	r2, r2, r3
 800133e:	4613      	mov	r3, r2
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	4413      	add	r3, r2
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	dd5d      	ble.n	8001406 <get_pulse+0x1a2>
	      pulse = true;                             // set the Pulse flag when we think there is a pulse
 800134a:	4b64      	ldr	r3, [pc, #400]	; (80014dc <get_pulse+0x278>)
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
	      IBI = N;    // measure time between beats in mS
 8001350:	4a5e      	ldr	r2, [pc, #376]	; (80014cc <get_pulse+0x268>)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	6013      	str	r3, [r2, #0]
	      samples_since_last_beat = 0;
 8001356:	4b5a      	ldr	r3, [pc, #360]	; (80014c0 <get_pulse+0x25c>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

	      if (second_beat) {                      // if this is the second beat, if secondBeat == TRUE
 800135c:	4b60      	ldr	r3, [pc, #384]	; (80014e0 <get_pulse+0x27c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d011      	beq.n	8001388 <get_pulse+0x124>
	        second_beat = false;                    // clear secondBeat flag
 8001364:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <get_pulse+0x27c>)
 8001366:	2200      	movs	r2, #0
 8001368:	701a      	strb	r2, [r3, #0]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	e008      	b.n	8001382 <get_pulse+0x11e>
	          rate[i] = IBI;
 8001370:	4b56      	ldr	r3, [pc, #344]	; (80014cc <get_pulse+0x268>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	495b      	ldr	r1, [pc, #364]	; (80014e4 <get_pulse+0x280>)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3301      	adds	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b1d      	cmp	r3, #29
 8001386:	ddf3      	ble.n	8001370 <get_pulse+0x10c>
	        }
	      }

	      if (first_beat) {                       // if it's the first time we found a beat, if firstBeat == TRUE
 8001388:	4b57      	ldr	r3, [pc, #348]	; (80014e8 <get_pulse+0x284>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <get_pulse+0x13a>
	    	first_beat = 0;                       // clear firstBeat flag
 8001390:	4b55      	ldr	r3, [pc, #340]	; (80014e8 <get_pulse+0x284>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
	    	second_beat = 1;                      // set the second beat flag
 8001396:	4b52      	ldr	r3, [pc, #328]	; (80014e0 <get_pulse+0x27c>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
	        // IBI value is unreliable so discard it
	        return;
 800139c:	e08b      	b.n	80014b6 <get_pulse+0x252>
	      }


	      // keep a running total of the last 10 IBI values
	      int runningTotal = 0;                  // clear the runningTotal variable
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]

	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	e012      	b.n	80013ce <get_pulse+0x16a>
	        rate[i] = rate[i + 1];                // and drop the oldest IBI value
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3301      	adds	r3, #1
 80013ac:	4a4d      	ldr	r2, [pc, #308]	; (80014e4 <get_pulse+0x280>)
 80013ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b2:	494c      	ldr	r1, [pc, #304]	; (80014e4 <get_pulse+0x280>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        runningTotal += rate[i];              // add up the 9 oldest IBI values
 80013ba:	4a4a      	ldr	r2, [pc, #296]	; (80014e4 <get_pulse+0x280>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	4413      	add	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3301      	adds	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b1c      	cmp	r3, #28
 80013d2:	dde9      	ble.n	80013a8 <get_pulse+0x144>
	      }

	      rate[BUF_LENGTH - 1] = IBI;                          // add the latest IBI to the rate array
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <get_pulse+0x268>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a42      	ldr	r2, [pc, #264]	; (80014e4 <get_pulse+0x280>)
 80013da:	6753      	str	r3, [r2, #116]	; 0x74
	      runningTotal += rate[BUF_LENGTH - 1];                // add the latest IBI to runningTotal
 80013dc:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <get_pulse+0x280>)
 80013de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	4413      	add	r3, r2
 80013e4:	60bb      	str	r3, [r7, #8]
	      runningTotal /= BUF_LENGTH;                     // average the last 10 IBI values
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	4a40      	ldr	r2, [pc, #256]	; (80014ec <get_pulse+0x288>)
 80013ea:	fb82 1203 	smull	r1, r2, r2, r3
 80013ee:	441a      	add	r2, r3
 80013f0:	1112      	asrs	r2, r2, #4
 80013f2:	17db      	asrs	r3, r3, #31
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	60bb      	str	r3, [r7, #8]
	      BPM = 60000 / runningTotal;             // how many beats can fit into a minute? that's BPM!
 80013f8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001402:	4a3b      	ldr	r2, [pc, #236]	; (80014f0 <get_pulse+0x28c>)
 8001404:	6013      	str	r3, [r2, #0]
	      //fadeLevel = MAX_FADE_LEVEL;             // If we're fading, re-light that LED.
	    }
	  }

	  if (signal < thresh && pulse) {  // when the values are going down, the beat is over
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <get_pulse+0x260>)
 8001408:	ed93 7a00 	vldr	s14, [r3]
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <get_pulse+0x264>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141a:	d528      	bpl.n	800146e <get_pulse+0x20a>
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <get_pulse+0x278>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d024      	beq.n	800146e <get_pulse+0x20a>
	    pulse = false;                         // reset the Pulse flag so we can do it again
 8001424:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <get_pulse+0x278>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
	    amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 800142a:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <get_pulse+0x274>)
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <get_pulse+0x270>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143a:	4b2e      	ldr	r3, [pc, #184]	; (80014f4 <get_pulse+0x290>)
 800143c:	edc3 7a00 	vstr	s15, [r3]
	    thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 8001440:	4b2c      	ldr	r3, [pc, #176]	; (80014f4 <get_pulse+0x290>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800144a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800144e:	4b21      	ldr	r3, [pc, #132]	; (80014d4 <get_pulse+0x270>)
 8001450:	edd3 7a00 	vldr	s15, [r3]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <get_pulse+0x264>)
 800145a:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <get_pulse+0x264>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <get_pulse+0x274>)
 8001464:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <get_pulse+0x264>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1a      	ldr	r2, [pc, #104]	; (80014d4 <get_pulse+0x270>)
 800146c:	6013      	str	r3, [r2, #0]
	  }

	  if (N > 2500) {                          // if 2.5 seconds go by without a beat
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001474:	4293      	cmp	r3, r2
 8001476:	dd1e      	ble.n	80014b6 <get_pulse+0x252>
	    thresh = THRESH_DEFAULT;                // set thresh default
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <get_pulse+0x264>)
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <get_pulse+0x294>)
 800147c:	601a      	str	r2, [r3, #0]
	    peak_amp = THRESH_DEFAULT;                               // set P default
 800147e:	4b16      	ldr	r3, [pc, #88]	; (80014d8 <get_pulse+0x274>)
 8001480:	4a1d      	ldr	r2, [pc, #116]	; (80014f8 <get_pulse+0x294>)
 8001482:	601a      	str	r2, [r3, #0]
	    trough_amp = THRESH_DEFAULT;                               // set T default
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <get_pulse+0x270>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <get_pulse+0x294>)
 8001488:	601a      	str	r2, [r3, #0]
	    samples_since_last_beat = 0;          // bring the lastBeatTime up to date
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <get_pulse+0x25c>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
	    first_beat = true;                      // set these to avoid noise
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <get_pulse+0x284>)
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
	    second_beat = false;                    // when we get the heartbeat back
 8001496:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <get_pulse+0x27c>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
	    BPM = 0;
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <get_pulse+0x28c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
	    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <get_pulse+0x268>)
 80014a4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80014a8:	601a      	str	r2, [r3, #0]
	    pulse = false;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <get_pulse+0x278>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
	    amp = 100;                  // beat amplitude 1/10 of input range.
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <get_pulse+0x290>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <get_pulse+0x298>)
 80014b4:	601a      	str	r2, [r3, #0]

	  }
}
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	200002c4 	.word	0x200002c4
 80014c4:	200002bc 	.word	0x200002bc
 80014c8:	20000008 	.word	0x20000008
 80014cc:	20000000 	.word	0x20000000
 80014d0:	66666667 	.word	0x66666667
 80014d4:	20000010 	.word	0x20000010
 80014d8:	2000000c 	.word	0x2000000c
 80014dc:	200002c1 	.word	0x200002c1
 80014e0:	200002c0 	.word	0x200002c0
 80014e4:	20000244 	.word	0x20000244
 80014e8:	20000014 	.word	0x20000014
 80014ec:	88888889 	.word	0x88888889
 80014f0:	20000240 	.word	0x20000240
 80014f4:	20000004 	.word	0x20000004
 80014f8:	3fcccccd 	.word	0x3fcccccd
 80014fc:	42c80000 	.word	0x42c80000

08001500 <get_BPM>:

int get_BPM(void) {
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return BPM;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <get_BPM+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000240 	.word	0x20000240

08001518 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001522:	4603      	mov	r3, r0
 8001524:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001526:	ed97 7a01 	vldr	s14, [r7, #4]
 800152a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80015ac <GPS_nmea_to_dec+0x94>
 800152e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001536:	ee17 3a90 	vmov	r3, s15
 800153a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2264      	movs	r2, #100	; 0x64
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	ee07 3a90 	vmov	s15, r3
 8001548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001554:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001558:	ed97 7a03 	vldr	s14, [r7, #12]
 800155c:	eddf 6a14 	vldr	s13, [pc, #80]	; 80015b0 <GPS_nmea_to_dec+0x98>
 8001560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001564:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	ee07 3a90 	vmov	s15, r3
 800156e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001572:	ed97 7a02 	vldr	s14, [r7, #8]
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	2b53      	cmp	r3, #83	; 0x53
 8001582:	d002      	beq.n	800158a <GPS_nmea_to_dec+0x72>
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	2b57      	cmp	r3, #87	; 0x57
 8001588:	d105      	bne.n	8001596 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800158a:	edd7 7a05 	vldr	s15, [r7, #20]
 800158e:	eef1 7a67 	vneg.f32	s15, s15
 8001592:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	ee07 3a90 	vmov	s15, r3
}
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	42c80000 	.word	0x42c80000
 80015b0:	42700000 	.word	0x42700000
 80015b4:	00000000 	.word	0x00000000

080015b8 <updateGPS>:

updateGPS(){
 80015b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015bc:	b08e      	sub	sp, #56	; 0x38
 80015be:	af00      	add	r7, sp, #0
	// imu_ctr = 1;
	  int counter = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	637b      	str	r3, [r7, #52]	; 0x34
	  int counter2 = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
	  while(1){
		  HAL_StatusTypeDef ret = HAL_UART_Receive(&huart1, a, 1, 5000);
 80015c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80015cc:	2201      	movs	r2, #1
 80015ce:	497c      	ldr	r1, [pc, #496]	; (80017c0 <updateGPS+0x208>)
 80015d0:	487c      	ldr	r0, [pc, #496]	; (80017c4 <updateGPS+0x20c>)
 80015d2:	f008 f941 	bl	8009858 <HAL_UART_Receive>
 80015d6:	4603      	mov	r3, r0
 80015d8:	75fb      	strb	r3, [r7, #23]
		  if (ret == HAL_TIMEOUT) {
 80015da:	7dfb      	ldrb	r3, [r7, #23]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	f000 81ae 	beq.w	800193e <updateGPS+0x386>
			  break;
		  }
		  if(a[0] == '$'){
 80015e2:	4b77      	ldr	r3, [pc, #476]	; (80017c0 <updateGPS+0x208>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b24      	cmp	r3, #36	; 0x24
 80015e8:	f040 8105 	bne.w	80017f6 <updateGPS+0x23e>
			  gps_buf[gps_idx++] = a[0];
 80015ec:	4b76      	ldr	r3, [pc, #472]	; (80017c8 <updateGPS+0x210>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	b2d1      	uxtb	r1, r2
 80015f4:	4a74      	ldr	r2, [pc, #464]	; (80017c8 <updateGPS+0x210>)
 80015f6:	7011      	strb	r1, [r2, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b71      	ldr	r3, [pc, #452]	; (80017c0 <updateGPS+0x208>)
 80015fc:	7819      	ldrb	r1, [r3, #0]
 80015fe:	4b73      	ldr	r3, [pc, #460]	; (80017cc <updateGPS+0x214>)
 8001600:	5499      	strb	r1, [r3, r2]
			  //printf("%c", a[0]);
			  while (a[0] != 10){
 8001602:	e011      	b.n	8001628 <updateGPS+0x70>
				  HAL_UART_Receive(&huart1, a, 1, 5000);
 8001604:	f241 3388 	movw	r3, #5000	; 0x1388
 8001608:	2201      	movs	r2, #1
 800160a:	496d      	ldr	r1, [pc, #436]	; (80017c0 <updateGPS+0x208>)
 800160c:	486d      	ldr	r0, [pc, #436]	; (80017c4 <updateGPS+0x20c>)
 800160e:	f008 f923 	bl	8009858 <HAL_UART_Receive>
				  gps_buf[gps_idx++] = a[0];
 8001612:	4b6d      	ldr	r3, [pc, #436]	; (80017c8 <updateGPS+0x210>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	b2d1      	uxtb	r1, r2
 800161a:	4a6b      	ldr	r2, [pc, #428]	; (80017c8 <updateGPS+0x210>)
 800161c:	7011      	strb	r1, [r2, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b67      	ldr	r3, [pc, #412]	; (80017c0 <updateGPS+0x208>)
 8001622:	7819      	ldrb	r1, [r3, #0]
 8001624:	4b69      	ldr	r3, [pc, #420]	; (80017cc <updateGPS+0x214>)
 8001626:	5499      	strb	r1, [r3, r2]
			  while (a[0] != 10){
 8001628:	4b65      	ldr	r3, [pc, #404]	; (80017c0 <updateGPS+0x208>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b0a      	cmp	r3, #10
 800162e:	d1e9      	bne.n	8001604 <updateGPS+0x4c>
				  //printf("%c", a[0]);
			  }
			  for (int i = 0; i < 7; ++i){
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001634:	e00b      	b.n	800164e <updateGPS+0x96>
				  temp[i] = gps_buf[i];
 8001636:	4a65      	ldr	r2, [pc, #404]	; (80017cc <updateGPS+0x214>)
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	4413      	add	r3, r2
 800163c:	7819      	ldrb	r1, [r3, #0]
 800163e:	4a64      	ldr	r2, [pc, #400]	; (80017d0 <updateGPS+0x218>)
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	4413      	add	r3, r2
 8001644:	460a      	mov	r2, r1
 8001646:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; ++i){
 8001648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164a:	3301      	adds	r3, #1
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	2b06      	cmp	r3, #6
 8001652:	ddf0      	ble.n	8001636 <updateGPS+0x7e>
			  }
			  temp[6] = '\0';
 8001654:	4b5e      	ldr	r3, [pc, #376]	; (80017d0 <updateGPS+0x218>)
 8001656:	2200      	movs	r2, #0
 8001658:	719a      	strb	r2, [r3, #6]
			  for (int i = 0; i < 128; ++i){
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
 800165e:	e002      	b.n	8001666 <updateGPS+0xae>
 8001660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001662:	3301      	adds	r3, #1
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
 8001666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001668:	2b7f      	cmp	r3, #127	; 0x7f
 800166a:	ddf9      	ble.n	8001660 <updateGPS+0xa8>
				  //printf("%c", gps_buf[i]);////////
			  }


			  //printf("done\n");
			  counter++;
 800166c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800166e:	3301      	adds	r3, #1
 8001670:	637b      	str	r3, [r7, #52]	; 0x34
			  gps_idx = 0;
 8001672:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <updateGPS+0x210>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]


			  if (!strncmp((char*)temp, "$GPGGA", 6)){
 8001678:	2206      	movs	r2, #6
 800167a:	4956      	ldr	r1, [pc, #344]	; (80017d4 <updateGPS+0x21c>)
 800167c:	4854      	ldr	r0, [pc, #336]	; (80017d0 <updateGPS+0x218>)
 800167e:	f00a fca3 	bl	800bfc8 <strncmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	f040 8081 	bne.w	800178c <updateGPS+0x1d4>
				  char lat[9];
				  char lat_ns;
				  char lon[9];
				  char lon_ew;

				  for (int i = 18; i < 27; i++){
 800168a:	2312      	movs	r3, #18
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e00c      	b.n	80016aa <updateGPS+0xf2>
					  lat[i-18] = gps_buf[i];
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3b12      	subs	r3, #18
 8001694:	494d      	ldr	r1, [pc, #308]	; (80017cc <updateGPS+0x214>)
 8001696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001698:	440a      	add	r2, r1
 800169a:	7812      	ldrb	r2, [r2, #0]
 800169c:	3338      	adds	r3, #56	; 0x38
 800169e:	443b      	add	r3, r7
 80016a0:	f803 2c2c 	strb.w	r2, [r3, #-44]
				  for (int i = 18; i < 27; i++){
 80016a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a6:	3301      	adds	r3, #1
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	2b1a      	cmp	r3, #26
 80016ae:	ddef      	ble.n	8001690 <updateGPS+0xd8>

				  }
				  lat_ns = gps_buf[28];
 80016b0:	4b46      	ldr	r3, [pc, #280]	; (80017cc <updateGPS+0x214>)
 80016b2:	7f1b      	ldrb	r3, [r3, #28]
 80016b4:	75bb      	strb	r3, [r7, #22]
				  for (int i = 30; i < 40; i++){
 80016b6:	231e      	movs	r3, #30
 80016b8:	623b      	str	r3, [r7, #32]
 80016ba:	e00c      	b.n	80016d6 <updateGPS+0x11e>
					  lon[i-30] = gps_buf[i];
 80016bc:	6a3b      	ldr	r3, [r7, #32]
 80016be:	3b1e      	subs	r3, #30
 80016c0:	4942      	ldr	r1, [pc, #264]	; (80017cc <updateGPS+0x214>)
 80016c2:	6a3a      	ldr	r2, [r7, #32]
 80016c4:	440a      	add	r2, r1
 80016c6:	7812      	ldrb	r2, [r2, #0]
 80016c8:	3338      	adds	r3, #56	; 0x38
 80016ca:	443b      	add	r3, r7
 80016cc:	f803 2c38 	strb.w	r2, [r3, #-56]
				  for (int i = 30; i < 40; i++){
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	3301      	adds	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	2b27      	cmp	r3, #39	; 0x27
 80016da:	ddef      	ble.n	80016bc <updateGPS+0x104>
				  }
				  lon_ew = gps_buf[41];
 80016dc:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <updateGPS+0x214>)
 80016de:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80016e2:	757b      	strb	r3, [r7, #21]
				  for (int i = 0; i < 128; ++i){
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	e007      	b.n	80016fa <updateGPS+0x142>
					  gps_buf[i] = 0;
 80016ea:	4a38      	ldr	r2, [pc, #224]	; (80017cc <updateGPS+0x214>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 128; ++i){
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	3301      	adds	r3, #1
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	2b7f      	cmp	r3, #127	; 0x7f
 80016fe:	ddf4      	ble.n	80016ea <updateGPS+0x132>
				  }
				  GPS2.dec_latitude = GPS_nmea_to_dec(strtof(lat, NULL), lat_ns)*(PI/180);
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f00a fb44 	bl	800bd94 <strtof>
 800170c:	ee07 0a90 	vmov	s15, r0
 8001710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001714:	7dbb      	ldrb	r3, [r7, #22]
 8001716:	4618      	mov	r0, r3
 8001718:	eeb0 0a67 	vmov.f32	s0, s15
 800171c:	f7ff fefc 	bl	8001518 <GPS_nmea_to_dec>
 8001720:	ee10 3a10 	vmov	r3, s0
 8001724:	4618      	mov	r0, r3
 8001726:	f7fe ff0f 	bl	8000548 <__aeabi_f2d>
 800172a:	a323      	add	r3, pc, #140	; (adr r3, 80017b8 <updateGPS+0x200>)
 800172c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001730:	f7fe ff62 	bl	80005f8 <__aeabi_dmul>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	f7ff fa54 	bl	8000be8 <__aeabi_d2f>
 8001740:	4603      	mov	r3, r0
 8001742:	4a25      	ldr	r2, [pc, #148]	; (80017d8 <updateGPS+0x220>)
 8001744:	6053      	str	r3, [r2, #4]
				  GPS2.dec_longitude = GPS_nmea_to_dec(strtof(lon, NULL), lon_ew)*(PI/180);
 8001746:	463b      	mov	r3, r7
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00a fb22 	bl	800bd94 <strtof>
 8001750:	ee07 0a90 	vmov	s15, r0
 8001754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001758:	7d7b      	ldrb	r3, [r7, #21]
 800175a:	4618      	mov	r0, r3
 800175c:	eeb0 0a67 	vmov.f32	s0, s15
 8001760:	f7ff feda 	bl	8001518 <GPS_nmea_to_dec>
 8001764:	ee10 3a10 	vmov	r3, s0
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe feed 	bl	8000548 <__aeabi_f2d>
 800176e:	a312      	add	r3, pc, #72	; (adr r3, 80017b8 <updateGPS+0x200>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe ff40 	bl	80005f8 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4610      	mov	r0, r2
 800177e:	4619      	mov	r1, r3
 8001780:	f7ff fa32 	bl	8000be8 <__aeabi_d2f>
 8001784:	4603      	mov	r3, r0
 8001786:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <updateGPS+0x220>)
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e011      	b.n	80017b0 <updateGPS+0x1f8>

			  }
			  else if (!strncmp((char*)temp, "$GPRMC", 6)){
 800178c:	2206      	movs	r2, #6
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <updateGPS+0x224>)
 8001790:	480f      	ldr	r0, [pc, #60]	; (80017d0 <updateGPS+0x218>)
 8001792:	f00a fc19 	bl	800bfc8 <strncmp>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <updateGPS+0x1f8>
				//sscanf((char*)gps_buf, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS2.utc_time, &GPS2.nmea_latitude, &GPS2.ns, &GPS2.nmea_longitude, &GPS2.ew, &GPS2.speed_k, &GPS2.course_d, &GPS2.date);
				  GPS2.speed_k++;
 800179c:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <updateGPS+0x220>)
 800179e:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80017a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <updateGPS+0x220>)
 80017ac:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			  }
			  for (int i = 0; i < 128; ++i){
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	e01c      	b.n	80017f0 <updateGPS+0x238>
 80017b6:	bf00      	nop
 80017b8:	a2529d39 	.word	0xa2529d39
 80017bc:	3f91df46 	.word	0x3f91df46
 80017c0:	200002c8 	.word	0x200002c8
 80017c4:	20000520 	.word	0x20000520
 80017c8:	20000354 	.word	0x20000354
 80017cc:	200002d4 	.word	0x200002d4
 80017d0:	200003d0 	.word	0x200003d0
 80017d4:	0800fe18 	.word	0x0800fe18
 80017d8:	20000358 	.word	0x20000358
 80017dc:	0800fe48 	.word	0x0800fe48
				  gps_buf[i] = 0;
 80017e0:	4a5d      	ldr	r2, [pc, #372]	; (8001958 <updateGPS+0x3a0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4413      	add	r3, r2
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 128; ++i){
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	3301      	adds	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	2b7f      	cmp	r3, #127	; 0x7f
 80017f4:	ddf4      	ble.n	80017e0 <updateGPS+0x228>
			  }
		  }

		  if(counter == 6){
 80017f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017f8:	2b06      	cmp	r3, #6
 80017fa:	f47f aee5 	bne.w	80015c8 <updateGPS+0x10>
//				  printf("long: %f, longdec: %f\n\r", GPS2.nmea_latitude, GPS2.dec_longitude);
//				  printf("lat: %f, latdec: %f\n\r", GPS2.nmea_longitude, GPS2.dec_latitude);
//				  printf("speed: %f\n\r", GPS2.speed_k);
//				  printf("date: %f\n\r", GPS2.utc_time);

			  if(counter2 == 1){
 80017fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001800:	2b01      	cmp	r3, #1
 8001802:	f040 8096 	bne.w	8001932 <updateGPS+0x37a>
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 8001806:	4b55      	ldr	r3, [pc, #340]	; (800195c <updateGPS+0x3a4>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <updateGPS+0x3a4>)
 800180e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	ee17 0a90 	vmov	r0, s15
 800181a:	f7fe fe95 	bl	8000548 <__aeabi_f2d>
 800181e:	4604      	mov	r4, r0
 8001820:	460d      	mov	r5, r1
						  (cos(((double)GPS2.dec_longitude+(double)GPS2.dec_longitude_prev)/2));
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <updateGPS+0x3a4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fe8e 	bl	8000548 <__aeabi_f2d>
 800182c:	4680      	mov	r8, r0
 800182e:	4689      	mov	r9, r1
 8001830:	4b4a      	ldr	r3, [pc, #296]	; (800195c <updateGPS+0x3a4>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe fe87 	bl	8000548 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4640      	mov	r0, r8
 8001840:	4649      	mov	r1, r9
 8001842:	f7fe fd23 	bl	800028c <__adddf3>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001856:	f7fe fff9 	bl	800084c <__aeabi_ddiv>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	ec43 2b17 	vmov	d7, r2, r3
 8001862:	eeb0 0a47 	vmov.f32	s0, s14
 8001866:	eef0 0a67 	vmov.f32	s1, s15
 800186a:	f00d f981 	bl	800eb70 <cos>
 800186e:	ec53 2b10 	vmov	r2, r3, d0
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 8001872:	4620      	mov	r0, r4
 8001874:	4629      	mov	r1, r5
 8001876:	f7fe febf 	bl	80005f8 <__aeabi_dmul>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	4938      	ldr	r1, [pc, #224]	; (8001960 <updateGPS+0x3a8>)
 8001880:	e9c1 2300 	strd	r2, r3, [r1]
				  y_cord = (double)(GPS2.dec_latitude - GPS2.dec_latitude_prev);
 8001884:	4b35      	ldr	r3, [pc, #212]	; (800195c <updateGPS+0x3a4>)
 8001886:	ed93 7a01 	vldr	s14, [r3, #4]
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <updateGPS+0x3a4>)
 800188c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001894:	ee17 0a90 	vmov	r0, s15
 8001898:	f7fe fe56 	bl	8000548 <__aeabi_f2d>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4930      	ldr	r1, [pc, #192]	; (8001964 <updateGPS+0x3ac>)
 80018a2:	e9c1 2300 	strd	r2, r3, [r1]
				  p2p_dist = sqrt(x_cord*x_cord + y_cord*y_cord)*6371000;
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <updateGPS+0x3a8>)
 80018a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <updateGPS+0x3a8>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe fea1 	bl	80005f8 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4614      	mov	r4, r2
 80018bc:	461d      	mov	r5, r3
 80018be:	4b29      	ldr	r3, [pc, #164]	; (8001964 <updateGPS+0x3ac>)
 80018c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <updateGPS+0x3ac>)
 80018c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ca:	f7fe fe95 	bl	80005f8 <__aeabi_dmul>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4620      	mov	r0, r4
 80018d4:	4629      	mov	r1, r5
 80018d6:	f7fe fcd9 	bl	800028c <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	ec43 2b17 	vmov	d7, r2, r3
 80018e2:	eeb0 0a47 	vmov.f32	s0, s14
 80018e6:	eef0 0a67 	vmov.f32	s1, s15
 80018ea:	f00d f913 	bl	800eb14 <sqrt>
 80018ee:	ec51 0b10 	vmov	r0, r1, d0
 80018f2:	a317      	add	r3, pc, #92	; (adr r3, 8001950 <updateGPS+0x398>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe7e 	bl	80005f8 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4919      	ldr	r1, [pc, #100]	; (8001968 <updateGPS+0x3b0>)
 8001902:	e9c1 2300 	strd	r2, r3, [r1]
				  velocity = p2p_dist/5;// m/s, timer is set for 5 sec
 8001906:	4b18      	ldr	r3, [pc, #96]	; (8001968 <updateGPS+0x3b0>)
 8001908:	e9d3 0100 	ldrd	r0, r1, [r3]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b16      	ldr	r3, [pc, #88]	; (800196c <updateGPS+0x3b4>)
 8001912:	f7fe ff9b 	bl	800084c <__aeabi_ddiv>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4915      	ldr	r1, [pc, #84]	; (8001970 <updateGPS+0x3b8>)
 800191c:	e9c1 2300 	strd	r2, r3, [r1]
				  //printf("p2p: %f\nmeter/sec: %f\n\r", p2p_dist,velocity);
				  //printf("Minute Per Mile: %f\n\r", .08333/(p2p_dist/1609.3));
				  GPS2.dec_latitude_prev = GPS2.dec_latitude;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <updateGPS+0x3a4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a0d      	ldr	r2, [pc, #52]	; (800195c <updateGPS+0x3a4>)
 8001926:	60d3      	str	r3, [r2, #12]
				  GPS2.dec_longitude_prev = GPS2.dec_longitude;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <updateGPS+0x3a4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <updateGPS+0x3a4>)
 800192e:	6093      	str	r3, [r2, #8]


				  break;
 8001930:	e006      	b.n	8001940 <updateGPS+0x388>
			  }
			  counter2++;
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	3301      	adds	r3, #1
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
			  counter = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
	  while(1){
 800193c:	e644      	b.n	80015c8 <updateGPS+0x10>
			  break;
 800193e:	bf00      	nop


		  }
	  }
}
 8001940:	bf00      	nop
 8001942:	3738      	adds	r7, #56	; 0x38
 8001944:	46bd      	mov	sp, r7
 8001946:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800194a:	bf00      	nop
 800194c:	f3af 8000 	nop.w
 8001950:	00000000 	.word	0x00000000
 8001954:	41584dae 	.word	0x41584dae
 8001958:	200002d4 	.word	0x200002d4
 800195c:	20000358 	.word	0x20000358
 8001960:	200003c0 	.word	0x200003c0
 8001964:	200003c8 	.word	0x200003c8
 8001968:	200003b8 	.word	0x200003b8
 800196c:	40140000 	.word	0x40140000
 8001970:	200003d8 	.word	0x200003d8

08001974 <get_distance>:

double get_distance(){
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	return p2p_dist;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <get_distance+0x20>)
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001982:	eeb0 0a47 	vmov.f32	s0, s14
 8001986:	eef0 0a67 	vmov.f32	s1, s15
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200003b8 	.word	0x200003b8

08001998 <get_velocity>:

double get_velocity(){
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
	return velocity;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <get_velocity+0x20>)
 800199e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a2:	ec43 2b17 	vmov	d7, r2, r3
}
 80019a6:	eeb0 0a47 	vmov.f32	s0, s14
 80019aa:	eef0 0a67 	vmov.f32	s1, s15
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	200003d8 	.word	0x200003d8

080019bc <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6858      	ldr	r0, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	8adb      	ldrh	r3, [r3, #22]
 80019de:	2200      	movs	r2, #0
 80019e0:	4619      	mov	r1, r3
 80019e2:	f003 fded 	bl	80055c0 <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	1cf9      	adds	r1, r7, #3
 80019f0:	2201      	movs	r2, #1
 80019f2:	f005 fe1a 	bl	800762a <HAL_SPI_Transmit>
 80019f6:	4603      	mov	r3, r0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6818      	ldr	r0, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f107 010f 	add.w	r1, r7, #15
 8001a06:	2201      	movs	r2, #1
 8001a08:	f005 ff84 	bl	8007914 <HAL_SPI_Receive>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6858      	ldr	r0, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	8adb      	ldrh	r3, [r3, #22]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f003 fdd0 	bl	80055c0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b084      	sub	sp, #16
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
 8001a32:	460b      	mov	r3, r1
 8001a34:	70fb      	strb	r3, [r7, #3]
 8001a36:	4613      	mov	r3, r2
 8001a38:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001a3a:	78fb      	ldrb	r3, [r7, #3]
 8001a3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a40:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001a42:	78bb      	ldrb	r3, [r7, #2]
 8001a44:	021b      	lsls	r3, r3, #8
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b21b      	sxth	r3, r3
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6858      	ldr	r0, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	8adb      	ldrh	r3, [r3, #22]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f003 fdae 	bl	80055c0 <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6818      	ldr	r0, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f107 010a 	add.w	r1, r7, #10
 8001a70:	2202      	movs	r2, #2
 8001a72:	f005 fdda 	bl	800762a <HAL_SPI_Transmit>
 8001a76:	4603      	mov	r3, r0
 8001a78:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6858      	ldr	r0, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	8adb      	ldrh	r3, [r3, #22]
 8001a82:	2201      	movs	r2, #1
 8001a84:	4619      	mov	r1, r3
 8001a86:	f003 fd9b 	bl	80055c0 <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b088      	sub	sp, #32
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	71fb      	strb	r3, [r7, #7]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6858      	ldr	r0, [r3, #4]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8adb      	ldrh	r3, [r3, #22]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f003 fd82 	bl	80055c0 <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f107 0117 	add.w	r1, r7, #23
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f005 fdae 	bl	800762a <HAL_SPI_Transmit>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001ad2:	79bb      	ldrb	r3, [r7, #6]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d108      	bne.n	8001aea <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	79fa      	ldrb	r2, [r7, #7]
 8001ade:	b292      	uxth	r2, r2
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f006 fa70 	bl	8007fc8 <HAL_SPI_Transmit_DMA>
 8001ae8:	e012      	b.n	8001b10 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6818      	ldr	r0, [r3, #0]
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	68b9      	ldr	r1, [r7, #8]
 8001af8:	f005 fd97 	bl	800762a <HAL_SPI_Transmit>
 8001afc:	4603      	mov	r3, r0
 8001afe:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6858      	ldr	r0, [r3, #4]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8adb      	ldrh	r3, [r3, #22]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f003 fd58 	bl	80055c0 <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff7b 	bl	8001a2a <write_register>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001b48:	78fb      	ldrb	r3, [r7, #3]
 8001b4a:	2b2c      	cmp	r3, #44	; 0x2c
 8001b4c:	d801      	bhi.n	8001b52 <set_OCP+0x16>
    imax = 45;
 8001b4e:	232d      	movs	r3, #45	; 0x2d
 8001b50:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	2bf0      	cmp	r3, #240	; 0xf0
 8001b56:	d901      	bls.n	8001b5c <set_OCP+0x20>
    imax = 240;
 8001b58:	23f0      	movs	r3, #240	; 0xf0
 8001b5a:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	2b81      	cmp	r3, #129	; 0x81
 8001b60:	d809      	bhi.n	8001b76 <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	3b2d      	subs	r3, #45	; 0x2d
 8001b66:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <set_OCP+0x68>)
 8001b68:	fb82 1203 	smull	r1, r2, r2, r3
 8001b6c:	1052      	asrs	r2, r2, #1
 8001b6e:	17db      	asrs	r3, r3, #31
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e008      	b.n	8001b88 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	331e      	adds	r3, #30
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <set_OCP+0x68>)
 8001b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b80:	1092      	asrs	r2, r2, #2
 8001b82:	17db      	asrs	r3, r3, #31
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	f043 0320 	orr.w	r3, r3, #32
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	210b      	movs	r1, #11
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff48 	bl	8001a2a <write_register>
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	66666667 	.word	0x66666667

08001ba8 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001bb0:	211d      	movs	r1, #29
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ff02 	bl	80019bc <read_register>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	461c      	mov	r4, r3
 8001bc4:	4615      	mov	r5, r2
 8001bc6:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001bca:	211e      	movs	r1, #30
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fef5 	bl	80019bc <read_register>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001bd8:	2304      	movs	r3, #4
 8001bda:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b0a      	cmp	r3, #10
 8001be0:	d908      	bls.n	8001bf4 <set_low_data_rate_optimization+0x4c>
 8001be2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001be6:	1fd1      	subs	r1, r2, #7
 8001be8:	430b      	orrs	r3, r1
 8001bea:	d103      	bne.n	8001bf4 <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001bec:	7ffb      	ldrb	r3, [r7, #31]
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001bf4:	7ffb      	ldrb	r3, [r7, #31]
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2126      	movs	r1, #38	; 0x26
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ff15 	bl	8001a2a <write_register>
}
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bdb0      	pop	{r4, r5, r7, pc}

08001c08 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001c10:	2100      	movs	r1, #0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ff7f 	bl	8001b16 <set_mode>
}
 8001c18:	bf00      	nop
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <lora_mode_receive_single>:

  set_mode(lora, OPMODE_RX_CONTINUOUS);
}

void lora_mode_receive_single(lora_sx1276 *lora)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7d5b      	ldrb	r3, [r3, #21]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	210f      	movs	r1, #15
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fefa 	bl	8001a2a <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8001c36:	22f0      	movs	r2, #240	; 0xf0
 8001c38:	2112      	movs	r1, #18
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fef5 	bl	8001a2a <write_register>

  set_mode(lora, OPMODE_RX_SINGLE);
 8001c40:	2106      	movs	r1, #6
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ff67 	bl	8001b16 <set_mode>
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <lora_mode_standby>:

void lora_mode_standby(lora_sx1276 *lora)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001c58:	2101      	movs	r1, #1
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ff5b 	bl	8001b16 <set_mode>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001c70:	211d      	movs	r1, #29
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff fea2 	bl	80019bc <read_register>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	f023 0301 	bic.w	r3, r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	461a      	mov	r2, r3
 8001c88:	211d      	movs	r1, #29
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff fecd 	bl	8001a2a <write_register>
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10e      	bne.n	8001cca <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	d901      	bls.n	8001cb6 <lora_set_tx_power+0x1e>
      level = 15;
 8001cb2:	230f      	movs	r3, #15
 8001cb4:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	2109      	movs	r1, #9
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff feb1 	bl	8001a2a <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001cc8:	e02e      	b.n	8001d28 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	2b14      	cmp	r3, #20
 8001cce:	d901      	bls.n	8001cd4 <lora_set_tx_power+0x3c>
      level = 20;
 8001cd0:	2314      	movs	r3, #20
 8001cd2:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d801      	bhi.n	8001cde <lora_set_tx_power+0x46>
      level = 2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	2b11      	cmp	r3, #17
 8001ce2:	d90c      	bls.n	8001cfe <lora_set_tx_power+0x66>
      level -= 3;
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	3b03      	subs	r3, #3
 8001ce8:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001cea:	2287      	movs	r2, #135	; 0x87
 8001cec:	214d      	movs	r1, #77	; 0x4d
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fe9b 	bl	8001a2a <write_register>
      set_OCP(lora, 140);
 8001cf4:	218c      	movs	r1, #140	; 0x8c
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff20 	bl	8001b3c <set_OCP>
 8001cfc:	e008      	b.n	8001d10 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8001cfe:	2284      	movs	r2, #132	; 0x84
 8001d00:	214d      	movs	r1, #77	; 0x4d
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fe91 	bl	8001a2a <write_register>
      set_OCP(lora, 97);
 8001d08:	2161      	movs	r1, #97	; 0x61
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff16 	bl	8001b3c <set_OCP>
    level -= 2;
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	3b02      	subs	r3, #2
 8001d14:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2109      	movs	r1, #9
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f7ff fe81 	bl	8001a2a <write_register>
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8001d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d40:	f04f 0000 	mov.w	r0, #0
 8001d44:	f04f 0100 	mov.w	r1, #0
 8001d48:	04d9      	lsls	r1, r3, #19
 8001d4a:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001d4e:	04d0      	lsls	r0, r2, #19
 8001d50:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <lora_set_frequency+0x88>)
 8001d52:	f04f 0300 	mov.w	r3, #0
 8001d56:	f7fe ff97 	bl	8000c88 <__aeabi_uldivmod>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001d62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	0c02      	lsrs	r2, r0, #16
 8001d70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001d74:	0c0b      	lsrs	r3, r1, #16
 8001d76:	b2d3      	uxtb	r3, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2106      	movs	r1, #6
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f7ff fe54 	bl	8001a2a <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001d82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	0a02      	lsrs	r2, r0, #8
 8001d90:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001d94:	0a0b      	lsrs	r3, r1, #8
 8001d96:	b2d3      	uxtb	r3, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2107      	movs	r1, #7
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fe44 	bl	8001a2a <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001da2:	7c3b      	ldrb	r3, [r7, #16]
 8001da4:	461a      	mov	r2, r3
 8001da6:	2108      	movs	r1, #8
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f7ff fe3e 	bl	8001a2a <write_register>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	01e84800 	.word	0x01e84800

08001dbc <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	2b05      	cmp	r3, #5
 8001dcc:	d802      	bhi.n	8001dd4 <lora_set_spreading_factor+0x18>
    sf = 6;
 8001dce:	2306      	movs	r3, #6
 8001dd0:	70fb      	strb	r3, [r7, #3]
 8001dd2:	e004      	b.n	8001dde <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d901      	bls.n	8001dde <lora_set_spreading_factor+0x22>
    sf = 12;
 8001dda:	230c      	movs	r3, #12
 8001ddc:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	2b06      	cmp	r3, #6
 8001de2:	d10a      	bne.n	8001dfa <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001de4:	22c5      	movs	r2, #197	; 0xc5
 8001de6:	2131      	movs	r1, #49	; 0x31
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fe1e 	bl	8001a2a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8001dee:	220c      	movs	r2, #12
 8001df0:	2137      	movs	r1, #55	; 0x37
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fe19 	bl	8001a2a <write_register>
 8001df8:	e009      	b.n	8001e0e <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001dfa:	22c3      	movs	r2, #195	; 0xc3
 8001dfc:	2131      	movs	r1, #49	; 0x31
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff fe13 	bl	8001a2a <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001e04:	220a      	movs	r2, #10
 8001e06:	2137      	movs	r1, #55	; 0x37
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fe0e 	bl	8001a2a <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8001e0e:	211e      	movs	r1, #30
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff fdd3 	bl	80019bc <read_register>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8001e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	b25a      	sxtb	r2, r3
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	b25b      	sxtb	r3, r3
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	461a      	mov	r2, r3
 8001e34:	211e      	movs	r1, #30
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fdf7 	bl	8001a2a <write_register>

  set_low_data_rate_optimization(lora);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff feb3 	bl	8001ba8 <set_low_data_rate_optimization>
}
 8001e42:	bf00      	nop
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001e56:	887b      	ldrh	r3, [r7, #2]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2120      	movs	r1, #32
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff fde1 	bl	8001a2a <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	2121      	movs	r1, #33	; 0x21
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fdd7 	bl	8001a2a <write_register>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8001e8c:	2142      	movs	r1, #66	; 0x42
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fd94 	bl	80019bc <read_register>
 8001e94:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fd87 	bl	80019bc <read_register>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d101      	bne.n	8001ec0 <lora_is_transmitting+0x22>
 8001ebc:	2305      	movs	r3, #5
 8001ebe:	e000      	b.n	8001ec2 <lora_is_transmitting+0x24>
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	460b      	mov	r3, r1
 8001eda:	71fb      	strb	r3, [r7, #7]
 8001edc:	4613      	mov	r3, r2
 8001ede:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff ffdc 	bl	8001e9e <lora_is_transmitting>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8001eec:	2305      	movs	r3, #5
 8001eee:	e02a      	b.n	8001f46 <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff fe0f 	bl	8001b16 <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f859 	bl	8001fb0 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	7d1b      	ldrb	r3, [r3, #20]
 8001f02:	461a      	mov	r2, r3
 8001f04:	210d      	movs	r1, #13
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f7ff fd8f 	bl	8001a2a <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	7d1b      	ldrb	r3, [r3, #20]
 8001f10:	461a      	mov	r2, r3
 8001f12:	210e      	movs	r1, #14
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff fd88 	bl	8001a2a <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	2122      	movs	r1, #34	; 0x22
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	f7ff fd82 	bl	8001a2a <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 8001f26:	79bb      	ldrb	r3, [r7, #6]
 8001f28:	79fa      	ldrb	r2, [r7, #7]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f7ff fdb0 	bl	8001a92 <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 8001f32:	79bb      	ldrb	r3, [r7, #6]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d101      	bne.n	8001f3c <lora_send_packet_base+0x72>
    return LORA_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e004      	b.n	8001f46 <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 8001f3c:	2103      	movs	r1, #3
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f7ff fde9 	bl	8001b16 <set_mode>
  return LORA_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b084      	sub	sp, #16
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 8001f5c:	79fa      	ldrb	r2, [r7, #7]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f7ff ffb1 	bl	8001eca <lora_send_packet_base>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 8001f7a:	2112      	movs	r1, #18
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fd1d 	bl	80019bc <read_register>
 8001f82:	4603      	mov	r3, r0
 8001f84:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f8c:	b2db      	uxtb	r3, r3
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <lora_enable_interrupt_rx_done>:

  return lora_receive_packet(lora, buffer, buffer_len, error);
}

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2140      	movs	r1, #64	; 0x40
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fd41 	bl	8001a2a <write_register>
}
 8001fa8:	bf00      	nop
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8001fb8:	2208      	movs	r2, #8
 8001fba:	2112      	movs	r1, #18
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fd34 	bl	8001a2a <write_register>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8001fea:	6a3a      	ldr	r2, [r7, #32]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002008:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f7ff ff3a 	bl	8001e84 <lora_version>
 8002010:	4603      	mov	r3, r0
 8002012:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b12      	cmp	r3, #18
 8002018:	d001      	beq.n	800201e <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 800201a:	2304      	movs	r3, #4
 800201c:	e031      	b.n	8002082 <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff fdf2 	bl	8001c08 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff fdef 	bl	8001c08 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 800202a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f7ff fe7e 	bl	8001d30 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 8002034:	2107      	movs	r1, #7
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7ff fec0 	bl	8001dbc <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 800203c:	210a      	movs	r1, #10
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff ff03 	bl	8001e4a <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff fe0f 	bl	8001c68 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 800204a:	210c      	movs	r1, #12
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff fcb5 	bl	80019bc <read_register>
 8002052:	4603      	mov	r3, r0
 8002054:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 8002056:	7dbb      	ldrb	r3, [r7, #22]
 8002058:	f043 0303 	orr.w	r3, r3, #3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	210c      	movs	r1, #12
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff fce1 	bl	8001a2a <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 8002068:	2204      	movs	r2, #4
 800206a:	2126      	movs	r1, #38	; 0x26
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff fcdc 	bl	8001a2a <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 8002072:	2111      	movs	r1, #17
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff fe0f 	bl	8001c98 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff fde8 	bl	8001c50 <lora_mode_standby>

  return LORA_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	0000      	movs	r0, r0
 800208c:	0000      	movs	r0, r0
	...

08002090 <lora_infINIT>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* lora initiation helper, executes up to 100 times */
uint8_t lora_infINIT(int init_ctr) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	6078      	str	r0, [r7, #4]
	if (init_ctr < 100) {
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b63      	cmp	r3, #99	; 0x63
 800209c:	dc18      	bgt.n	80020d0 <lora_infINIT+0x40>
		uint8_t res = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 800209e:	a313      	add	r3, pc, #76	; (adr r3, 80020ec <lora_infINIT+0x5c>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	e9cd 2300 	strd	r2, r3, [sp]
 80020a8:	2301      	movs	r3, #1
 80020aa:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <lora_infINIT+0x50>)
 80020ac:	490d      	ldr	r1, [pc, #52]	; (80020e4 <lora_infINIT+0x54>)
 80020ae:	480e      	ldr	r0, [pc, #56]	; (80020e8 <lora_infINIT+0x58>)
 80020b0:	f7ff ff8b 	bl	8001fca <lora_init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	73fb      	strb	r3, [r7, #15]
		if (res != LORA_OK) {
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <lora_infINIT+0x3c>
			// Initialization failed
			// retry lol
			return lora_infINIT(init_ctr + 1);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3301      	adds	r3, #1
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ffe4 	bl	8002090 <lora_infINIT>
 80020c8:	4603      	mov	r3, r0
 80020ca:	e002      	b.n	80020d2 <lora_infINIT+0x42>
	  	} else {
	  		return LORA_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e000      	b.n	80020d2 <lora_infINIT+0x42>
	  	}
	} else {
		return LORA_ERROR;
 80020d0:	2304      	movs	r3, #4
	}
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	f3af 8000 	nop.w
 80020e0:	48000400 	.word	0x48000400
 80020e4:	200005a8 	.word	0x200005a8
 80020e8:	200006f4 	.word	0x200006f4
 80020ec:	36e55840 	.word	0x36e55840
 80020f0:	00000000 	.word	0x00000000

080020f4 <IMUcallback>:

/* called @ 200Hz, updates step count based on IMU data */
inline void IMUcallback(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
//	grav_vec(&hi2c3, &gravity_vec.x);
//	input_step_data(gravity_vec, acc_vec);

	/* real good super awesome step count code! */
	vec_raw_t acc_vec;
	lin_acc_vec_raw(&hi2c3, &acc_vec.x);
 80020fa:	463b      	mov	r3, r7
 80020fc:	4619      	mov	r1, r3
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <IMUcallback+0x38>)
 8002100:	f7ff f825 	bl	800114e <lin_acc_vec_raw>
	processSample(prog_time, acc_vec.x, acc_vec.y, acc_vec.z);
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <IMUcallback+0x3c>)
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	f9b7 1000 	ldrsh.w	r1, [r7]
 800210c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002110:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002114:	f001 f832 	bl	800317c <processSample>
	prog_time += STEP_PERIOD;
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <IMUcallback+0x3c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3332      	adds	r3, #50	; 0x32
 800211e:	4a04      	ldr	r2, [pc, #16]	; (8002130 <IMUcallback+0x3c>)
 8002120:	6013      	str	r3, [r2, #0]
//	num_steps = getSteps();
//	printf("steps: %i\n\r", num_steps);
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000444 	.word	0x20000444
 8002130:	20000710 	.word	0x20000710

08002134 <loraCallback>:
	}

}

/* loraCallback(): called after gps is read (5s period) to send relevant data */
inline void loraCallback(void) {
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	// possibly send 5 seconds late
	// before next* gps poll in order
	// to send at a precise times
	// --> 5 second delay should not have large effect

	lora_data.speed = get_velocity();	// speed from gps file
 8002138:	f7ff fc2e 	bl	8001998 <get_velocity>
 800213c:	ec53 2b10 	vmov	r2, r3, d0
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	f7fe fd50 	bl	8000be8 <__aeabi_d2f>
 8002148:	4603      	mov	r3, r0
 800214a:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <loraCallback+0xa0>)
 800214c:	6013      	str	r3, [r2, #0]
	lora_data.distance = get_distance();	// distance from gps file
 800214e:	f7ff fc11 	bl	8001974 <get_distance>
 8002152:	ec53 2b10 	vmov	r2, r3, d0
 8002156:	4610      	mov	r0, r2
 8002158:	4619      	mov	r1, r3
 800215a:	f7fe fd45 	bl	8000be8 <__aeabi_d2f>
 800215e:	4603      	mov	r3, r0
 8002160:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <loraCallback+0xa0>)
 8002162:	6053      	str	r3, [r2, #4]
	lora_data.heart_rate = get_BPM();	// bpm from pulse sensor file
 8002164:	f7ff f9cc 	bl	8001500 <get_BPM>
 8002168:	4603      	mov	r3, r0
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <loraCallback+0xa0>)
 800216c:	6093      	str	r3, [r2, #8]
	lora_data.steps = getSteps();	// step count from steps file
 800216e:	f001 f81f 	bl	80031b0 <getSteps>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <loraCallback+0xa0>)
 8002178:	60da      	str	r2, [r3, #12]
	lora_send_packet(&lora, (uint8_t*)&lora_data, sizeof(lora_data));
 800217a:	2210      	movs	r2, #16
 800217c:	4915      	ldr	r1, [pc, #84]	; (80021d4 <loraCallback+0xa0>)
 800217e:	4816      	ldr	r0, [pc, #88]	; (80021d8 <loraCallback+0xa4>)
 8002180:	f7ff fee5 	bl	8001f4e <lora_send_packet>
	lora_mode_receive_single(&lora);
 8002184:	4814      	ldr	r0, [pc, #80]	; (80021d8 <loraCallback+0xa4>)
 8002186:	f7ff fd4b 	bl	8001c20 <lora_mode_receive_single>

	/* debug code for use without lora */
	printf("sent to Base Station:\n\r");
 800218a:	4814      	ldr	r0, [pc, #80]	; (80021dc <loraCallback+0xa8>)
 800218c:	f009 ff0a 	bl	800bfa4 <iprintf>
	printf("\t\tspeed: \t%f m/s\n\r", lora_data.speed);
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <loraCallback+0xa0>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f9d7 	bl	8000548 <__aeabi_f2d>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4810      	ldr	r0, [pc, #64]	; (80021e0 <loraCallback+0xac>)
 80021a0:	f009 ff00 	bl	800bfa4 <iprintf>
	printf("\tdistance: \t%f meters\n\r", lora_data.distance);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <loraCallback+0xa0>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9cd 	bl	8000548 <__aeabi_f2d>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	480c      	ldr	r0, [pc, #48]	; (80021e4 <loraCallback+0xb0>)
 80021b4:	f009 fef6 	bl	800bfa4 <iprintf>
	printf("\t\tpulse: \t%i bpm\n\r", lora_data.heart_rate);
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <loraCallback+0xa0>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4619      	mov	r1, r3
 80021be:	480a      	ldr	r0, [pc, #40]	; (80021e8 <loraCallback+0xb4>)
 80021c0:	f009 fef0 	bl	800bfa4 <iprintf>
	printf("\t\tsteps: \t%i steps\n\n\r", lora_data.steps);
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <loraCallback+0xa0>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4619      	mov	r1, r3
 80021ca:	4808      	ldr	r0, [pc, #32]	; (80021ec <loraCallback+0xb8>)
 80021cc:	f009 feea 	bl	800bfa4 <iprintf>
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000714 	.word	0x20000714
 80021d8:	200006f4 	.word	0x200006f4
 80021dc:	0800febc 	.word	0x0800febc
 80021e0:	0800fed4 	.word	0x0800fed4
 80021e4:	0800fee8 	.word	0x0800fee8
 80021e8:	0800ff00 	.word	0x0800ff00
 80021ec:	0800ff14 	.word	0x0800ff14

080021f0 <HAL_TIM_PeriodElapsedCallback>:

/* timer checker */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d104      	bne.n	800220a <HAL_TIM_PeriodElapsedCallback+0x1a>
		IMUcallback();
 8002200:	f7ff ff78 	bl	80020f4 <IMUcallback>
		updatePulseSensor();
 8002204:	f7fe fff4 	bl	80011f0 <updatePulseSensor>
	} else if (htim == &htim7) {
		/* timer controlling GPS and LoRa data */
		gps_flag = 1;
		//vibratorCallback();
	}
}
 8002208:	e006      	b.n	8002218 <HAL_TIM_PeriodElapsedCallback+0x28>
	} else if (htim == &htim7) {
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a05      	ldr	r2, [pc, #20]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d102      	bne.n	8002218 <HAL_TIM_PeriodElapsedCallback+0x28>
		gps_flag = 1;
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	20000658 	.word	0x20000658
 8002224:	200006a4 	.word	0x200006a4
 8002228:	2000070c 	.word	0x2000070c

0800222c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b0a2      	sub	sp, #136	; 0x88
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002232:	f001 fdd2 	bl	8003dda <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002236:	f000 f889 	bl	800234c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800223a:	f000 fb09 	bl	8002850 <MX_GPIO_Init>
  MX_TIM6_Init();
 800223e:	f000 fa97 	bl	8002770 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002242:	f000 f997 	bl	8002574 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002246:	f000 f8c7 	bl	80023d8 <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800224a:	f000 f967 	bl	800251c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 800224e:	f000 f9c1 	bl	80025d4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8002252:	f000 f9fd 	bl	8002650 <MX_TIM1_Init>
  MX_TIM7_Init();
 8002256:	f000 fac3 	bl	80027e0 <MX_TIM7_Init>
  MX_I2C3_Init();
 800225a:	f000 f921 	bl	80024a0 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  initPulseSensor(&hadc1);
 800225e:	4832      	ldr	r0, [pc, #200]	; (8002328 <main+0xfc>)
 8002260:	f7fe ffb6 	bl	80011d0 <initPulseSensor>
  init_IMU(&hi2c3);
 8002264:	4831      	ldr	r0, [pc, #196]	; (800232c <main+0x100>)
 8002266:	f7fe fefd 	bl	8001064 <init_IMU>
  uint8_t res = lora_infINIT(0);
 800226a:	2000      	movs	r0, #0
 800226c:	f7ff ff10 	bl	8002090 <lora_infINIT>
 8002270:	4603      	mov	r3, r0
 8002272:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  if (res != LORA_OK) {
	  // restart whole system idk
  }
  initAlgo();
 8002276:	f000 ff35 	bl	80030e4 <initAlgo>

  // start your engines!
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800227a:	2100      	movs	r1, #0
 800227c:	482c      	ldr	r0, [pc, #176]	; (8002330 <main+0x104>)
 800227e:	f006 faf3 	bl	8008868 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8002282:	482c      	ldr	r0, [pc, #176]	; (8002334 <main+0x108>)
 8002284:	f006 fa44 	bl	8008710 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8002288:	482b      	ldr	r0, [pc, #172]	; (8002338 <main+0x10c>)
 800228a:	f006 fa41 	bl	8008710 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buzz = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  // Wait at least 5 seconds before clearing buzzer
  uint8_t wait = 1;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  lora_enable_interrupt_rx_done(&lora);
 800229a:	4828      	ldr	r0, [pc, #160]	; (800233c <main+0x110>)
 800229c:	f7ff fe7b 	bl	8001f96 <lora_enable_interrupt_rx_done>
  char buffer[128];
  lora_mode_receive_single(&lora);
 80022a0:	4826      	ldr	r0, [pc, #152]	; (800233c <main+0x110>)
 80022a2:	f7ff fcbd 	bl	8001c20 <lora_mode_receive_single>

  while (1)
  {

	  /* GPS Polling */
	  if (gps_flag) {
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <main+0x114>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d01f      	beq.n	80022ee <main+0xc2>
		  updateGPS();
 80022ae:	f7ff f983 	bl	80015b8 <updateGPS>
		  gps_flag = 0;
 80022b2:	4b23      	ldr	r3, [pc, #140]	; (8002340 <main+0x114>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	701a      	strb	r2, [r3, #0]
		  loraCallback(); // transmit lora data after GPS bottleneck finishes
 80022b8:	f7ff ff3c 	bl	8002134 <loraCallback>
      if (buzz && !wait) {
 80022bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00d      	beq.n	80022e0 <main+0xb4>
 80022c4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <main+0xb4>
		  	TIM1->CCR1 = 0;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <main+0x118>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	635a      	str	r2, [r3, #52]	; 0x34
        buzz = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        wait = 1;
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80022de:	e006      	b.n	80022ee <main+0xc2>
		  } else if (buzz) {
 80022e0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <main+0xc2>
			  wait = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		  }
    }

    /* poll lora receipt */
    if(LoRaRecieve == 1){
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <main+0x11c>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d10e      	bne.n	8002314 <main+0xe8>
	  		  //Get data
	  //		  	  lora_mode_receive_continuous(&lora);

//	  		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
      if (!lora_is_packet_available(&lora)) {
 80022f6:	4811      	ldr	r0, [pc, #68]	; (800233c <main+0x110>)
 80022f8:	f7ff fe3b 	bl	8001f72 <lora_is_packet_available>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <main+0xe8>
        LoRaRecieve = 0;
 8002302:	4b11      	ldr	r3, [pc, #68]	; (8002348 <main+0x11c>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
        buzz = 1;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        lora_mode_receive_single(&lora);
 800230e:	480b      	ldr	r0, [pc, #44]	; (800233c <main+0x110>)
 8002310:	f7ff fc86 	bl	8001c20 <lora_mode_receive_single>
      }

	  }

    /* poll buzzer */
	  if (buzz) {
 8002314:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0c4      	beq.n	80022a6 <main+0x7a>
		  TIM1->CCR1 = 65534;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <main+0x118>)
 800231e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002322:	635a      	str	r2, [r3, #52]	; 0x34
	  if (gps_flag) {
 8002324:	e7bf      	b.n	80022a6 <main+0x7a>
 8002326:	bf00      	nop
 8002328:	200003e0 	.word	0x200003e0
 800232c:	20000444 	.word	0x20000444
 8002330:	2000060c 	.word	0x2000060c
 8002334:	20000658 	.word	0x20000658
 8002338:	200006a4 	.word	0x200006a4
 800233c:	200006f4 	.word	0x200006f4
 8002340:	2000070c 	.word	0x2000070c
 8002344:	40012c00 	.word	0x40012c00
 8002348:	200006f0 	.word	0x200006f0

0800234c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b096      	sub	sp, #88	; 0x58
 8002350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	2244      	movs	r2, #68	; 0x44
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f009 fe46 	bl	800bfec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002360:	463b      	mov	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	60da      	str	r2, [r3, #12]
 800236c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800236e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002372:	f003 ff41 	bl	80061f8 <HAL_PWREx_ControlVoltageScaling>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800237c:	f000 fae2 	bl	8002944 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002380:	2310      	movs	r3, #16
 8002382:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002384:	2301      	movs	r3, #1
 8002386:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800238c:	2360      	movs	r3, #96	; 0x60
 800238e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002390:	2300      	movs	r3, #0
 8002392:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4618      	mov	r0, r3
 800239a:	f003 ff83 	bl	80062a4 <HAL_RCC_OscConfig>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80023a4:	f000 face 	bl	8002944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023a8:	230f      	movs	r3, #15
 80023aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80023ac:	2300      	movs	r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f004 fb83 	bl	8006acc <HAL_RCC_ClockConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80023cc:	f000 faba 	bl	8002944 <Error_Handler>
  }
}
 80023d0:	bf00      	nop
 80023d2:	3758      	adds	r7, #88	; 0x58
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023de:	463b      	mov	r3, r7
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023ee:	4b29      	ldr	r3, [pc, #164]	; (8002494 <MX_ADC1_Init+0xbc>)
 80023f0:	4a29      	ldr	r2, [pc, #164]	; (8002498 <MX_ADC1_Init+0xc0>)
 80023f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <MX_ADC1_Init+0xbc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023fa:	4b26      	ldr	r3, [pc, #152]	; (8002494 <MX_ADC1_Init+0xbc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <MX_ADC1_Init+0xbc>)
 800240e:	2204      	movs	r2, #4
 8002410:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002414:	2200      	movs	r2, #0
 8002416:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <MX_ADC1_Init+0xbc>)
 800241a:	2200      	movs	r2, #0
 800241c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002420:	2201      	movs	r2, #1
 8002422:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <MX_ADC1_Init+0xbc>)
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002432:	4b18      	ldr	r3, [pc, #96]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002434:	2200      	movs	r2, #0
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002438:	4b16      	ldr	r3, [pc, #88]	; (8002494 <MX_ADC1_Init+0xbc>)
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002440:	4b14      	ldr	r3, [pc, #80]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002442:	2200      	movs	r2, #0
 8002444:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002446:	4b13      	ldr	r3, [pc, #76]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800244e:	4811      	ldr	r0, [pc, #68]	; (8002494 <MX_ADC1_Init+0xbc>)
 8002450:	f001 ff00 	bl	8004254 <HAL_ADC_Init>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800245a:	f000 fa73 	bl	8002944 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800245e:	4b0f      	ldr	r3, [pc, #60]	; (800249c <MX_ADC1_Init+0xc4>)
 8002460:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002462:	2306      	movs	r3, #6
 8002464:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002466:	2300      	movs	r3, #0
 8002468:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800246a:	237f      	movs	r3, #127	; 0x7f
 800246c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800246e:	2304      	movs	r3, #4
 8002470:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002476:	463b      	mov	r3, r7
 8002478:	4619      	mov	r1, r3
 800247a:	4806      	ldr	r0, [pc, #24]	; (8002494 <MX_ADC1_Init+0xbc>)
 800247c:	f002 f92c 	bl	80046d8 <HAL_ADC_ConfigChannel>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002486:	f000 fa5d 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200003e0 	.word	0x200003e0
 8002498:	50040000 	.word	0x50040000
 800249c:	14f00020 	.word	0x14f00020

080024a0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <MX_I2C3_Init+0x74>)
 80024a6:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <MX_I2C3_Init+0x78>)
 80024a8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <MX_I2C3_Init+0x74>)
 80024ac:	f640 6214 	movw	r2, #3604	; 0xe14
 80024b0:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80024b2:	4b18      	ldr	r3, [pc, #96]	; (8002514 <MX_I2C3_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_I2C3_Init+0x74>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <MX_I2C3_Init+0x74>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <MX_I2C3_Init+0x74>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <MX_I2C3_Init+0x74>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024d0:	4b10      	ldr	r3, [pc, #64]	; (8002514 <MX_I2C3_Init+0x74>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_I2C3_Init+0x74>)
 80024d8:	2200      	movs	r2, #0
 80024da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <MX_I2C3_Init+0x74>)
 80024de:	f003 f8aa 	bl	8005636 <HAL_I2C_Init>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80024e8:	f000 fa2c 	bl	8002944 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ec:	2100      	movs	r1, #0
 80024ee:	4809      	ldr	r0, [pc, #36]	; (8002514 <MX_I2C3_Init+0x74>)
 80024f0:	f003 fddc 	bl	80060ac <HAL_I2CEx_ConfigAnalogFilter>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80024fa:	f000 fa23 	bl	8002944 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024fe:	2100      	movs	r1, #0
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <MX_I2C3_Init+0x74>)
 8002502:	f003 fe1e 	bl	8006142 <HAL_I2CEx_ConfigDigitalFilter>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800250c:	f000 fa1a 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000444 	.word	0x20000444
 8002518:	40005c00 	.word	0x40005c00

0800251c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002522:	4a13      	ldr	r2, [pc, #76]	; (8002570 <MX_LPUART1_UART_Init+0x54>)
 8002524:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002528:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800252c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002534:	4b0d      	ldr	r3, [pc, #52]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 800253c:	2200      	movs	r2, #0
 800253e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002542:	220c      	movs	r2, #12
 8002544:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002546:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800254c:	4b07      	ldr	r3, [pc, #28]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 800254e:	2200      	movs	r2, #0
 8002550:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 8002554:	2200      	movs	r2, #0
 8002556:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002558:	4804      	ldr	r0, [pc, #16]	; (800256c <MX_LPUART1_UART_Init+0x50>)
 800255a:	f007 f8a5 	bl	80096a8 <HAL_UART_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002564:	f000 f9ee 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002568:	bf00      	nop
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000498 	.word	0x20000498
 8002570:	40008000 	.word	0x40008000

08002574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002578:	4b14      	ldr	r3, [pc, #80]	; (80025cc <MX_USART1_UART_Init+0x58>)
 800257a:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <MX_USART1_UART_Init+0x5c>)
 800257c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <MX_USART1_UART_Init+0x58>)
 8002580:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <MX_USART1_UART_Init+0x58>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <MX_USART1_UART_Init+0x58>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <MX_USART1_UART_Init+0x58>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002598:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <MX_USART1_UART_Init+0x58>)
 800259a:	220c      	movs	r2, #12
 800259c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025b6:	4805      	ldr	r0, [pc, #20]	; (80025cc <MX_USART1_UART_Init+0x58>)
 80025b8:	f007 f876 	bl	80096a8 <HAL_UART_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025c2:	f000 f9bf 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000520 	.word	0x20000520
 80025d0:	40013800 	.word	0x40013800

080025d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <MX_SPI1_Init+0x74>)
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <MX_SPI1_Init+0x78>)
 80025dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025de:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <MX_SPI1_Init+0x74>)
 80025e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <MX_SPI1_Init+0x74>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <MX_SPI1_Init+0x74>)
 80025ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <MX_SPI1_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025fa:	4b13      	ldr	r3, [pc, #76]	; (8002648 <MX_SPI1_Init+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <MX_SPI1_Init+0x74>)
 8002602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002606:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <MX_SPI1_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <MX_SPI1_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <MX_SPI1_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <MX_SPI1_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <MX_SPI1_Init+0x74>)
 8002622:	2207      	movs	r2, #7
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <MX_SPI1_Init+0x74>)
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <MX_SPI1_Init+0x74>)
 800262e:	2208      	movs	r2, #8
 8002630:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002632:	4805      	ldr	r0, [pc, #20]	; (8002648 <MX_SPI1_Init+0x74>)
 8002634:	f004 ff56 	bl	80074e4 <HAL_SPI_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800263e:	f000 f981 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200005a8 	.word	0x200005a8
 800264c:	40013000 	.word	0x40013000

08002650 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b096      	sub	sp, #88	; 0x58
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002656:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002662:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]
 8002672:	615a      	str	r2, [r3, #20]
 8002674:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002676:	1d3b      	adds	r3, r7, #4
 8002678:	222c      	movs	r2, #44	; 0x2c
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f009 fcb5 	bl	800bfec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002682:	4b39      	ldr	r3, [pc, #228]	; (8002768 <MX_TIM1_Init+0x118>)
 8002684:	4a39      	ldr	r2, [pc, #228]	; (800276c <MX_TIM1_Init+0x11c>)
 8002686:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002688:	4b37      	ldr	r3, [pc, #220]	; (8002768 <MX_TIM1_Init+0x118>)
 800268a:	2200      	movs	r2, #0
 800268c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268e:	4b36      	ldr	r3, [pc, #216]	; (8002768 <MX_TIM1_Init+0x118>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002694:	4b34      	ldr	r3, [pc, #208]	; (8002768 <MX_TIM1_Init+0x118>)
 8002696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800269a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269c:	4b32      	ldr	r3, [pc, #200]	; (8002768 <MX_TIM1_Init+0x118>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <MX_TIM1_Init+0x118>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a8:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <MX_TIM1_Init+0x118>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80026ae:	482e      	ldr	r0, [pc, #184]	; (8002768 <MX_TIM1_Init+0x118>)
 80026b0:	f006 f882 	bl	80087b8 <HAL_TIM_PWM_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80026ba:	f000 f943 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026be:	2300      	movs	r3, #0
 80026c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026ca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ce:	4619      	mov	r1, r3
 80026d0:	4825      	ldr	r0, [pc, #148]	; (8002768 <MX_TIM1_Init+0x118>)
 80026d2:	f006 feed 	bl	80094b0 <HAL_TIMEx_MasterConfigSynchronization>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026dc:	f000 f932 	bl	8002944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026e0:	2360      	movs	r3, #96	; 0x60
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026e8:	2300      	movs	r3, #0
 80026ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026ec:	2300      	movs	r3, #0
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026f8:	2300      	movs	r3, #0
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002700:	2200      	movs	r2, #0
 8002702:	4619      	mov	r1, r3
 8002704:	4818      	ldr	r0, [pc, #96]	; (8002768 <MX_TIM1_Init+0x118>)
 8002706:	f006 fa8f 	bl	8008c28 <HAL_TIM_PWM_ConfigChannel>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002710:	f000 f918 	bl	8002944 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800272c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002736:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002740:	2300      	movs	r3, #0
 8002742:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	4619      	mov	r1, r3
 8002748:	4807      	ldr	r0, [pc, #28]	; (8002768 <MX_TIM1_Init+0x118>)
 800274a:	f006 ff17 	bl	800957c <HAL_TIMEx_ConfigBreakDeadTime>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002754:	f000 f8f6 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002758:	4803      	ldr	r0, [pc, #12]	; (8002768 <MX_TIM1_Init+0x118>)
 800275a:	f000 fb59 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 800275e:	bf00      	nop
 8002760:	3758      	adds	r7, #88	; 0x58
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000060c 	.word	0x2000060c
 800276c:	40012c00 	.word	0x40012c00

08002770 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002780:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <MX_TIM6_Init+0x68>)
 8002782:	4a16      	ldr	r2, [pc, #88]	; (80027dc <MX_TIM6_Init+0x6c>)
 8002784:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 399;
 8002786:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <MX_TIM6_Init+0x68>)
 8002788:	f240 128f 	movw	r2, #399	; 0x18f
 800278c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <MX_TIM6_Init+0x68>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <MX_TIM6_Init+0x68>)
 8002796:	f240 12f3 	movw	r2, #499	; 0x1f3
 800279a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_TIM6_Init+0x68>)
 800279e:	2200      	movs	r2, #0
 80027a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027a2:	480d      	ldr	r0, [pc, #52]	; (80027d8 <MX_TIM6_Init+0x68>)
 80027a4:	f005 ff5c 	bl	8008660 <HAL_TIM_Base_Init>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80027ae:	f000 f8c9 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	4806      	ldr	r0, [pc, #24]	; (80027d8 <MX_TIM6_Init+0x68>)
 80027c0:	f006 fe76 	bl	80094b0 <HAL_TIMEx_MasterConfigSynchronization>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80027ca:	f000 f8bb 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000658 	.word	0x20000658
 80027dc:	40001000 	.word	0x40001000

080027e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80027f0:	4b15      	ldr	r3, [pc, #84]	; (8002848 <MX_TIM7_Init+0x68>)
 80027f2:	4a16      	ldr	r2, [pc, #88]	; (800284c <MX_TIM7_Init+0x6c>)
 80027f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 399;
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <MX_TIM7_Init+0x68>)
 80027f8:	f240 128f 	movw	r2, #399	; 0x18f
 80027fc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <MX_TIM7_Init+0x68>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8002804:	4b10      	ldr	r3, [pc, #64]	; (8002848 <MX_TIM7_Init+0x68>)
 8002806:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800280a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <MX_TIM7_Init+0x68>)
 800280e:	2200      	movs	r2, #0
 8002810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002812:	480d      	ldr	r0, [pc, #52]	; (8002848 <MX_TIM7_Init+0x68>)
 8002814:	f005 ff24 	bl	8008660 <HAL_TIM_Base_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800281e:	f000 f891 	bl	8002944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002822:	2300      	movs	r3, #0
 8002824:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4806      	ldr	r0, [pc, #24]	; (8002848 <MX_TIM7_Init+0x68>)
 8002830:	f006 fe3e 	bl	80094b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800283a:	f000 f883 	bl	8002944 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	200006a4 	.word	0x200006a4
 800284c:	40001400 	.word	0x40001400

08002850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
 8002864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	4b2c      	ldr	r3, [pc, #176]	; (8002918 <MX_GPIO_Init+0xc8>)
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	4a2b      	ldr	r2, [pc, #172]	; (8002918 <MX_GPIO_Init+0xc8>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002872:	4b29      	ldr	r3, [pc, #164]	; (8002918 <MX_GPIO_Init+0xc8>)
 8002874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <MX_GPIO_Init+0xc8>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	4a25      	ldr	r2, [pc, #148]	; (8002918 <MX_GPIO_Init+0xc8>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288a:	4b23      	ldr	r3, [pc, #140]	; (8002918 <MX_GPIO_Init+0xc8>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002896:	2200      	movs	r2, #0
 8002898:	2120      	movs	r1, #32
 800289a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289e:	f002 fe8f 	bl	80055c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80028a2:	2201      	movs	r2, #1
 80028a4:	2101      	movs	r1, #1
 80028a6:	481d      	ldr	r0, [pc, #116]	; (800291c <MX_GPIO_Init+0xcc>)
 80028a8:	f002 fe8a 	bl	80055c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028ac:	2320      	movs	r3, #32
 80028ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	4619      	mov	r1, r3
 80028c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028c6:	f002 fd11 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028ca:	2301      	movs	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ce:	2301      	movs	r3, #1
 80028d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028da:	f107 030c 	add.w	r3, r7, #12
 80028de:	4619      	mov	r1, r3
 80028e0:	480e      	ldr	r0, [pc, #56]	; (800291c <MX_GPIO_Init+0xcc>)
 80028e2:	f002 fd03 	bl	80052ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028e6:	2320      	movs	r3, #32
 80028e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f4:	f107 030c 	add.w	r3, r7, #12
 80028f8:	4619      	mov	r1, r3
 80028fa:	4808      	ldr	r0, [pc, #32]	; (800291c <MX_GPIO_Init+0xcc>)
 80028fc:	f002 fcf6 	bl	80052ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	2017      	movs	r0, #23
 8002906:	f002 fc2a 	bl	800515e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800290a:	2017      	movs	r0, #23
 800290c:	f002 fc43 	bl	8005196 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002910:	bf00      	nop
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	40021000 	.word	0x40021000
 800291c:	48000400 	.word	0x48000400

08002920 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002928:	1d39      	adds	r1, r7, #4
 800292a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800292e:	2201      	movs	r2, #1
 8002930:	4803      	ldr	r0, [pc, #12]	; (8002940 <__io_putchar+0x20>)
 8002932:	f006 ff07 	bl	8009744 <HAL_UART_Transmit>
  return ch;
 8002936:	687b      	ldr	r3, [r7, #4]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3708      	adds	r7, #8
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000498 	.word	0x20000498

08002944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
}
 800294a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800294c:	e7fe      	b.n	800294c <Error_Handler+0x8>
	...

08002950 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_MspInit+0x44>)
 8002958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_MspInit+0x44>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	6613      	str	r3, [r2, #96]	; 0x60
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_MspInit+0x44>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_MspInit+0x44>)
 8002970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_MspInit+0x44>)
 8002974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002978:	6593      	str	r3, [r2, #88]	; 0x58
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_MspInit+0x44>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	603b      	str	r3, [r7, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	40021000 	.word	0x40021000

08002998 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b09e      	sub	sp, #120	; 0x78
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	609a      	str	r2, [r3, #8]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029b0:	f107 0310 	add.w	r3, r7, #16
 80029b4:	2254      	movs	r2, #84	; 0x54
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f009 fb17 	bl	800bfec <memset>
  if(hadc->Instance==ADC1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a25      	ldr	r2, [pc, #148]	; (8002a58 <HAL_ADC_MspInit+0xc0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d143      	bne.n	8002a50 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80029c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80029ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80029d2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80029d4:	2301      	movs	r3, #1
 80029d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80029d8:	2301      	movs	r3, #1
 80029da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80029dc:	2310      	movs	r3, #16
 80029de:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80029e0:	2307      	movs	r3, #7
 80029e2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80029e4:	2302      	movs	r3, #2
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80029e8:	2302      	movs	r3, #2
 80029ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80029ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f2:	f107 0310 	add.w	r3, r7, #16
 80029f6:	4618      	mov	r0, r3
 80029f8:	f004 fa8c 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002a02:	f7ff ff9f 	bl	8002944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_ADC_MspInit+0xc4>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	4a14      	ldr	r2, [pc, #80]	; (8002a5c <HAL_ADC_MspInit+0xc4>)
 8002a0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_ADC_MspInit+0xc4>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_ADC_MspInit+0xc4>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a22:	4a0e      	ldr	r2, [pc, #56]	; (8002a5c <HAL_ADC_MspInit+0xc4>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_ADC_MspInit+0xc4>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a36:	2301      	movs	r3, #1
 8002a38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002a3a:	230b      	movs	r3, #11
 8002a3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f002 fc4e 	bl	80052ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3778      	adds	r7, #120	; 0x78
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	50040000 	.word	0x50040000
 8002a5c:	40021000 	.word	0x40021000

08002a60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b0a0      	sub	sp, #128	; 0x80
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a78:	f107 0318 	add.w	r3, r7, #24
 8002a7c:	2254      	movs	r2, #84	; 0x54
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f009 fab3 	bl	800bfec <memset>
  if(hi2c->Instance==I2C3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2d      	ldr	r2, [pc, #180]	; (8002b40 <HAL_I2C_MspInit+0xe0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d153      	bne.n	8002b38 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002a96:	2300      	movs	r3, #0
 8002a98:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9a:	f107 0318 	add.w	r3, r7, #24
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 fa38 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002aaa:	f7ff ff4b 	bl	8002944 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_I2C_MspInit+0xe4>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	4a24      	ldr	r2, [pc, #144]	; (8002b44 <HAL_I2C_MspInit+0xe4>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_I2C_MspInit+0xe4>)
 8002abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <HAL_I2C_MspInit+0xe4>)
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_I2C_MspInit+0xe4>)
 8002acc:	f043 0302 	orr.w	r3, r3, #2
 8002ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <HAL_I2C_MspInit+0xe4>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ae2:	2312      	movs	r3, #18
 8002ae4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aea:	2303      	movs	r3, #3
 8002aec:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002aee:	2304      	movs	r3, #4
 8002af0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afc:	f002 fbf6 	bl	80052ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b00:	2310      	movs	r3, #16
 8002b02:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b04:	2312      	movs	r3, #18
 8002b06:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b10:	2304      	movs	r3, #4
 8002b12:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b18:	4619      	mov	r1, r3
 8002b1a:	480b      	ldr	r0, [pc, #44]	; (8002b48 <HAL_I2C_MspInit+0xe8>)
 8002b1c:	f002 fbe6 	bl	80052ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_I2C_MspInit+0xe4>)
 8002b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_I2C_MspInit+0xe4>)
 8002b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_I2C_MspInit+0xe4>)
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b38:	bf00      	nop
 8002b3a:	3780      	adds	r7, #128	; 0x80
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40005c00 	.word	0x40005c00
 8002b44:	40021000 	.word	0x40021000
 8002b48:	48000400 	.word	0x48000400

08002b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b0a2      	sub	sp, #136	; 0x88
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b64:	f107 0320 	add.w	r3, r7, #32
 8002b68:	2254      	movs	r2, #84	; 0x54
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f009 fa3d 	bl	800bfec <memset>
  if(huart->Instance==LPUART1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_UART_MspInit+0x168>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d139      	bne.n	8002bf0 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b80:	2300      	movs	r3, #0
 8002b82:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b84:	f107 0320 	add.w	r3, r7, #32
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f004 f9c3 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b94:	f7ff fed6 	bl	8002944 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b98:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	4a46      	ldr	r2, [pc, #280]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002ba4:	4b44      	ldr	r3, [pc, #272]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb0:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bbc:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	61bb      	str	r3, [r7, #24]
 8002bc6:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bc8:	230c      	movs	r3, #12
 8002bca:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002bda:	2308      	movs	r3, #8
 8002bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002be4:	4619      	mov	r1, r3
 8002be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bea:	f002 fb7f 	bl	80052ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bee:	e05c      	b.n	8002caa <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a31      	ldr	r2, [pc, #196]	; (8002cbc <HAL_UART_MspInit+0x170>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d157      	bne.n	8002caa <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c02:	f107 0320 	add.w	r3, r7, #32
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 f984 	bl	8006f14 <HAL_RCCEx_PeriphCLKConfig>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8002c12:	f7ff fe97 	bl	8002944 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c16:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c20:	6613      	str	r3, [r2, #96]	; 0x60
 8002c22:	4b25      	ldr	r3, [pc, #148]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2e:	4b22      	ldr	r3, [pc, #136]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3a:	4b1f      	ldr	r3, [pc, #124]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	4a1b      	ldr	r2, [pc, #108]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c52:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_UART_MspInit+0x16c>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c72:	2307      	movs	r3, #7
 8002c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c82:	f002 fb33 	bl	80052ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c86:	2340      	movs	r3, #64	; 0x40
 8002c88:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4806      	ldr	r0, [pc, #24]	; (8002cc0 <HAL_UART_MspInit+0x174>)
 8002ca6:	f002 fb21 	bl	80052ec <HAL_GPIO_Init>
}
 8002caa:	bf00      	nop
 8002cac:	3788      	adds	r7, #136	; 0x88
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40008000 	.word	0x40008000
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	48000400 	.word	0x48000400

08002cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a18      	ldr	r2, [pc, #96]	; (8002d44 <HAL_SPI_MspInit+0x80>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d129      	bne.n	8002d3a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_SPI_MspInit+0x84>)
 8002ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cea:	4a17      	ldr	r2, [pc, #92]	; (8002d48 <HAL_SPI_MspInit+0x84>)
 8002cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_SPI_MspInit+0x84>)
 8002cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfe:	4b12      	ldr	r3, [pc, #72]	; (8002d48 <HAL_SPI_MspInit+0x84>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	4a11      	ldr	r2, [pc, #68]	; (8002d48 <HAL_SPI_MspInit+0x84>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0a:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_SPI_MspInit+0x84>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8002d16:	f641 0302 	movw	r3, #6146	; 0x1802
 8002d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d24:	2303      	movs	r3, #3
 8002d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d28:	2305      	movs	r3, #5
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2c:	f107 0314 	add.w	r3, r7, #20
 8002d30:	4619      	mov	r1, r3
 8002d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d36:	f002 fad9 	bl	80052ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d3a:	bf00      	nop
 8002d3c:	3728      	adds	r7, #40	; 0x28
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40013000 	.word	0x40013000
 8002d48:	40021000 	.word	0x40021000

08002d4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <HAL_TIM_PWM_MspInit+0x38>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10b      	bne.n	8002d76 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d5e:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d68:	6613      	str	r3, [r2, #96]	; 0x60
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40012c00 	.word	0x40012c00
 8002d88:	40021000 	.word	0x40021000

08002d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_TIM_Base_MspInit+0x78>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d114      	bne.n	8002dc8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HAL_TIM_Base_MspInit+0x7c>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_TIM_Base_MspInit+0x7c>)
 8002da4:	f043 0310 	orr.w	r3, r3, #16
 8002da8:	6593      	str	r3, [r2, #88]	; 0x58
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_TIM_Base_MspInit+0x7c>)
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2036      	movs	r0, #54	; 0x36
 8002dbc:	f002 f9cf 	bl	800515e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002dc0:	2036      	movs	r0, #54	; 0x36
 8002dc2:	f002 f9e8 	bl	8005196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002dc6:	e018      	b.n	8002dfa <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0f      	ldr	r2, [pc, #60]	; (8002e0c <HAL_TIM_Base_MspInit+0x80>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d113      	bne.n	8002dfa <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <HAL_TIM_Base_MspInit+0x7c>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <HAL_TIM_Base_MspInit+0x7c>)
 8002dd8:	f043 0320 	orr.w	r3, r3, #32
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <HAL_TIM_Base_MspInit+0x7c>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2100      	movs	r1, #0
 8002dee:	2037      	movs	r0, #55	; 0x37
 8002df0:	f002 f9b5 	bl	800515e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002df4:	2037      	movs	r0, #55	; 0x37
 8002df6:	f002 f9ce 	bl	8005196 <HAL_NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40001000 	.word	0x40001000
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40001400 	.word	0x40001400

08002e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a12      	ldr	r2, [pc, #72]	; (8002e78 <HAL_TIM_MspPostInit+0x68>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d11d      	bne.n	8002e6e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	4b12      	ldr	r3, [pc, #72]	; (8002e7c <HAL_TIM_MspPostInit+0x6c>)
 8002e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e36:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <HAL_TIM_MspPostInit+0x6c>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_TIM_MspPostInit+0x6c>)
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e50:	2302      	movs	r3, #2
 8002e52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	4619      	mov	r1, r3
 8002e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6a:	f002 fa3f 	bl	80052ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e6e:	bf00      	nop
 8002e70:	3720      	adds	r7, #32
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40021000 	.word	0x40021000

08002e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e84:	e7fe      	b.n	8002e84 <NMI_Handler+0x4>

08002e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <HardFault_Handler+0x4>

08002e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <MemManage_Handler+0x4>

08002e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e96:	e7fe      	b.n	8002e96 <BusFault_Handler+0x4>

08002e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e9c:	e7fe      	b.n	8002e9c <UsageFault_Handler+0x4>

08002e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ecc:	f000 ffda 	bl	8003e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	LoRaRecieve = 1;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <EXTI9_5_IRQHandler+0x14>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8002ede:	2020      	movs	r0, #32
 8002ee0:	f002 fb86 	bl	80055f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	200006f0 	.word	0x200006f0

08002eec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <TIM6_DAC_IRQHandler+0x10>)
 8002ef2:	f005 fd97 	bl	8008a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	20000658 	.word	0x20000658

08002f00 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <TIM7_IRQHandler+0x10>)
 8002f06:	f005 fd8d 	bl	8008a24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200006a4 	.word	0x200006a4

08002f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return 1;
 8002f18:	2301      	movs	r3, #1
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <_kill>:

int _kill(int pid, int sig)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f2e:	f009 f8af 	bl	800c090 <__errno>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2216      	movs	r2, #22
 8002f36:	601a      	str	r2, [r3, #0]
  return -1;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_exit>:

void _exit (int status)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff ffe7 	bl	8002f24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f56:	e7fe      	b.n	8002f56 <_exit+0x12>

08002f58 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
 8002f68:	e00a      	b.n	8002f80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f6a:	f3af 8000 	nop.w
 8002f6e:	4601      	mov	r1, r0
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	1c5a      	adds	r2, r3, #1
 8002f74:	60ba      	str	r2, [r7, #8]
 8002f76:	b2ca      	uxtb	r2, r1
 8002f78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	dbf0      	blt.n	8002f6a <_read+0x12>
  }

  return len;
 8002f88:	687b      	ldr	r3, [r7, #4]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e009      	b.n	8002fb8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	60ba      	str	r2, [r7, #8]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fcb7 	bl	8002920 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbf1      	blt.n	8002fa4 <_write+0x12>
  }
  return len;
 8002fc0:	687b      	ldr	r3, [r7, #4]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_close>:

int _close(int file)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ff2:	605a      	str	r2, [r3, #4]
  return 0;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <_isatty>:

int _isatty(int file)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
	...

08003034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800303c:	4a14      	ldr	r2, [pc, #80]	; (8003090 <_sbrk+0x5c>)
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <_sbrk+0x60>)
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003048:	4b13      	ldr	r3, [pc, #76]	; (8003098 <_sbrk+0x64>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d102      	bne.n	8003056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003050:	4b11      	ldr	r3, [pc, #68]	; (8003098 <_sbrk+0x64>)
 8003052:	4a12      	ldr	r2, [pc, #72]	; (800309c <_sbrk+0x68>)
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <_sbrk+0x64>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d207      	bcs.n	8003074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003064:	f009 f814 	bl	800c090 <__errno>
 8003068:	4603      	mov	r3, r0
 800306a:	220c      	movs	r2, #12
 800306c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800306e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003072:	e009      	b.n	8003088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <_sbrk+0x64>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307a:	4b07      	ldr	r3, [pc, #28]	; (8003098 <_sbrk+0x64>)
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4413      	add	r3, r2
 8003082:	4a05      	ldr	r2, [pc, #20]	; (8003098 <_sbrk+0x64>)
 8003084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003086:	68fb      	ldr	r3, [r7, #12]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20010000 	.word	0x20010000
 8003094:	00000400 	.word	0x00000400
 8003098:	20000724 	.word	0x20000724
 800309c:	20000bf0 	.word	0x20000bf0

080030a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <SystemInit+0x20>)
 80030a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <SystemInit+0x20>)
 80030ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030b4:	bf00      	nop
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <increaseStepCallback>:
#endif
static ring_buffer_t peakScoreBuf;
static ring_buffer_t peakBuf;

static void increaseStepCallback(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
    steps++;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <increaseStepCallback+0x1c>)
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <increaseStepCallback+0x1c>)
 80030d2:	801a      	strh	r2, [r3, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	20000728 	.word	0x20000728

080030e4 <initAlgo>:

void initAlgo()
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
    // init buffers
    ring_buffer_init(&rawBuf);
 80030e8:	4818      	ldr	r0, [pc, #96]	; (800314c <initAlgo+0x68>)
 80030ea:	f000 fd1c 	bl	8003b26 <ring_buffer_init>
    ring_buffer_init(&ppBuf);
 80030ee:	4818      	ldr	r0, [pc, #96]	; (8003150 <initAlgo+0x6c>)
 80030f0:	f000 fd19 	bl	8003b26 <ring_buffer_init>
    ring_buffer_init(&mdBuf);
 80030f4:	4817      	ldr	r0, [pc, #92]	; (8003154 <initAlgo+0x70>)
 80030f6:	f000 fd16 	bl	8003b26 <ring_buffer_init>
#ifndef SKIP_FILTER
    ring_buffer_init(&smoothBuf);
 80030fa:	4817      	ldr	r0, [pc, #92]	; (8003158 <initAlgo+0x74>)
 80030fc:	f000 fd13 	bl	8003b26 <ring_buffer_init>
#endif
    ring_buffer_init(&peakScoreBuf);
 8003100:	4816      	ldr	r0, [pc, #88]	; (800315c <initAlgo+0x78>)
 8003102:	f000 fd10 	bl	8003b26 <ring_buffer_init>
    ring_buffer_init(&peakBuf);
 8003106:	4816      	ldr	r0, [pc, #88]	; (8003160 <initAlgo+0x7c>)
 8003108:	f000 fd0d 	bl	8003b26 <ring_buffer_init>

    initPreProcessStage(&rawBuf, &ppBuf, motionDetectStage);
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <initAlgo+0x80>)
 800310e:	4910      	ldr	r1, [pc, #64]	; (8003150 <initAlgo+0x6c>)
 8003110:	480e      	ldr	r0, [pc, #56]	; (800314c <initAlgo+0x68>)
 8003112:	f000 fb7f 	bl	8003814 <initPreProcessStage>
#ifdef SKIP_FILTER
    initMotionDetectStage(&ppBuf, &mdBuf, scoringStage);
    initScoringStage(&mdBuf, &peakScoreBuf, detectionStage);
#else
    initMotionDetectStage(&ppBuf, &mdBuf, filterStage);
 8003116:	4a14      	ldr	r2, [pc, #80]	; (8003168 <initAlgo+0x84>)
 8003118:	490e      	ldr	r1, [pc, #56]	; (8003154 <initAlgo+0x70>)
 800311a:	480d      	ldr	r0, [pc, #52]	; (8003150 <initAlgo+0x6c>)
 800311c:	f000 fa40 	bl	80035a0 <initMotionDetectStage>
    initFilterStage(&mdBuf, &smoothBuf, scoringStage);
 8003120:	4a12      	ldr	r2, [pc, #72]	; (800316c <initAlgo+0x88>)
 8003122:	490d      	ldr	r1, [pc, #52]	; (8003158 <initAlgo+0x74>)
 8003124:	480b      	ldr	r0, [pc, #44]	; (8003154 <initAlgo+0x70>)
 8003126:	f000 f9c9 	bl	80034bc <initFilterStage>
    initScoringStage(&smoothBuf, &peakScoreBuf, detectionStage);
 800312a:	4a11      	ldr	r2, [pc, #68]	; (8003170 <initAlgo+0x8c>)
 800312c:	490b      	ldr	r1, [pc, #44]	; (800315c <initAlgo+0x78>)
 800312e:	480a      	ldr	r0, [pc, #40]	; (8003158 <initAlgo+0x74>)
 8003130:	f000 fd90 	bl	8003c54 <initScoringStage>
#endif
    initDetectionStage(&peakScoreBuf, &peakBuf, postProcessingStage);
 8003134:	4a0f      	ldr	r2, [pc, #60]	; (8003174 <initAlgo+0x90>)
 8003136:	490a      	ldr	r1, [pc, #40]	; (8003160 <initAlgo+0x7c>)
 8003138:	4808      	ldr	r0, [pc, #32]	; (800315c <initAlgo+0x78>)
 800313a:	f000 f8ab 	bl	8003294 <initDetectionStage>
    initPostProcessingStage(&peakBuf, &increaseStepCallback);
 800313e:	490e      	ldr	r1, [pc, #56]	; (8003178 <initAlgo+0x94>)
 8003140:	4807      	ldr	r0, [pc, #28]	; (8003160 <initAlgo+0x7c>)
 8003142:	f000 fa99 	bl	8003678 <initPostProcessingStage>
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	2000072c 	.word	0x2000072c
 8003150:	200007b0 	.word	0x200007b0
 8003154:	20000834 	.word	0x20000834
 8003158:	200008b8 	.word	0x200008b8
 800315c:	2000093c 	.word	0x2000093c
 8003160:	200009c0 	.word	0x200009c0
 8003164:	080035d9 	.word	0x080035d9
 8003168:	080034f5 	.word	0x080034f5
 800316c:	08003c8d 	.word	0x08003c8d
 8003170:	080032cd 	.word	0x080032cd
 8003174:	080036b5 	.word	0x080036b5
 8003178:	080030c5 	.word	0x080030c5

0800317c <processSample>:

void processSample(time_t time, accel_t x, accel_t y, accel_t z)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	4608      	mov	r0, r1
 8003186:	4611      	mov	r1, r2
 8003188:	461a      	mov	r2, r3
 800318a:	4603      	mov	r3, r0
 800318c:	817b      	strh	r3, [r7, #10]
 800318e:	460b      	mov	r3, r1
 8003190:	813b      	strh	r3, [r7, #8]
 8003192:	4613      	mov	r3, r2
 8003194:	80fb      	strh	r3, [r7, #6]
    preProcessSample(time, x, y, z);
 8003196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800319a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800319e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fbaa 	bl	80038fc <preProcessSample>
}
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <getSteps>:
    ring_buffer_init(&peakScoreBuf);
    ring_buffer_init(&peakBuf);
}

steps_t getSteps(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
    return steps;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <getSteps+0x14>)
 80031b6:	881b      	ldrh	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20000728 	.word	0x20000728

080031c8 <sqrt>:
#ifndef STEP_COUNTING_ALGO_UTILS_H
#define STEP_COUNTING_ALGO_UTILS_H
#include <stdint.h>

static int64_t sqrt(int64_t number)
{
 80031c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031cc:	b08b      	sub	sp, #44	; 0x2c
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
  int64_t base, i, y;
  base = 67108864; //2^24
 80031d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
  y = 0;
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 1; i <= 24; i++)
 80031ec:	f04f 0201 	mov.w	r2, #1
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80031f8:	e03d      	b.n	8003276 <sqrt+0xae>
  {
    y += base;
 80031fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003202:	eb10 0802 	adds.w	r8, r0, r2
 8003206:	eb41 0903 	adc.w	r9, r1, r3
 800320a:	e9c7 8904 	strd	r8, r9, [r7, #16]
    if ((y * y) > number)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	fb03 f202 	mul.w	r2, r3, r2
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	6939      	ldr	r1, [r7, #16]
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	441a      	add	r2, r3
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	fba3 4503 	umull	r4, r5, r3, r3
 8003226:	1953      	adds	r3, r2, r5
 8003228:	461d      	mov	r5, r3
 800322a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800322e:	42a2      	cmp	r2, r4
 8003230:	41ab      	sbcs	r3, r5
 8003232:	da09      	bge.n	8003248 <sqrt+0x80>
    {
      y -= base; // base should not have been added, so we substract again
 8003234:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003238:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800323c:	ebb0 0a02 	subs.w	sl, r0, r2
 8003240:	eb61 0b03 	sbc.w	fp, r1, r3
 8003244:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    }
    base = base >> 1; // shift 1 digit to the right = divide by 2
 8003248:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	0842      	lsrs	r2, r0, #1
 8003256:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800325a:	104b      	asrs	r3, r1, #1
 800325c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (i = 1; i <= 24; i++)
 8003260:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003264:	1c51      	adds	r1, r2, #1
 8003266:	6039      	str	r1, [r7, #0]
 8003268:	f143 0300 	adc.w	r3, r3, #0
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003272:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003276:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800327a:	2a19      	cmp	r2, #25
 800327c:	f173 0300 	sbcs.w	r3, r3, #0
 8003280:	dbbb      	blt.n	80031fa <sqrt+0x32>
  }
  return y;
 8003282:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	372c      	adds	r7, #44	; 0x2c
 800328c:	46bd      	mov	sp, r7
 800328e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003292:	4770      	bx	lr

08003294 <initDetectionStage>:
static time_t count = 0;
static int16_t threshold_int = 0;
static int16_t threshold_frac = 6;

void initDetectionStage(ring_buffer_t *pInBuff, ring_buffer_t *peakBufIn, void (*pNextStage)(void))
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 80032a0:	4a07      	ldr	r2, [pc, #28]	; (80032c0 <initDetectionStage+0x2c>)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6013      	str	r3, [r2, #0]
    outBuff = peakBufIn;
 80032a6:	4a07      	ldr	r2, [pc, #28]	; (80032c4 <initDetectionStage+0x30>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 80032ac:	4a06      	ldr	r2, [pc, #24]	; (80032c8 <initDetectionStage+0x34>)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    detectionFile = fopen(DUMP_DETECTION_FILE_NAME, "w+");
#endif
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000a44 	.word	0x20000a44
 80032c4:	20000a48 	.word	0x20000a48
 80032c8:	20000a4c 	.word	0x20000a4c

080032cc <detectionStage>:

void detectionStage(void)
{
 80032cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d0:	b088      	sub	sp, #32
 80032d2:	af00      	add	r7, sp, #0
    if (!ring_buffer_is_empty(inBuff))
 80032d4:	4b71      	ldr	r3, [pc, #452]	; (800349c <detectionStage+0x1d0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fbe1 	bl	8003aa0 <ring_buffer_is_empty>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f040 80d5 	bne.w	8003490 <detectionStage+0x1c4>
    {
        accumulator_t oMean = mean;
 80032e6:	4b6e      	ldr	r3, [pc, #440]	; (80034a0 <detectionStage+0x1d4>)
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	61fb      	str	r3, [r7, #28]
        data_point_t dataPoint;
        ring_buffer_dequeue(inBuff, &dataPoint);
 80032ec:	4b6b      	ldr	r3, [pc, #428]	; (800349c <detectionStage+0x1d0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f107 0208 	add.w	r2, r7, #8
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fc59 	bl	8003bae <ring_buffer_dequeue>
        count++;
 80032fc:	4b69      	ldr	r3, [pc, #420]	; (80034a4 <detectionStage+0x1d8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3301      	adds	r3, #1
 8003302:	4a68      	ldr	r2, [pc, #416]	; (80034a4 <detectionStage+0x1d8>)
 8003304:	6013      	str	r3, [r2, #0]
        if (count == 1)
 8003306:	4b67      	ldr	r3, [pc, #412]	; (80034a4 <detectionStage+0x1d8>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d106      	bne.n	800331c <detectionStage+0x50>
        {
            mean = dataPoint.magnitude;
 800330e:	893a      	ldrh	r2, [r7, #8]
 8003310:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <detectionStage+0x1d4>)
 8003312:	801a      	strh	r2, [r3, #0]
            std = 0;
 8003314:	4b64      	ldr	r3, [pc, #400]	; (80034a8 <detectionStage+0x1dc>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	e093      	b.n	8003444 <detectionStage+0x178>
        }
        else if (count == 2)
 800331c:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <detectionStage+0x1d8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b02      	cmp	r3, #2
 8003322:	d13f      	bne.n	80033a4 <detectionStage+0xd8>
        {
            mean = (mean + dataPoint.magnitude) / 2;
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <detectionStage+0x1d4>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	893b      	ldrh	r3, [r7, #8]
 800332c:	4413      	add	r3, r2
 800332e:	0fda      	lsrs	r2, r3, #31
 8003330:	4413      	add	r3, r2
 8003332:	105b      	asrs	r3, r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	4b5a      	ldr	r3, [pc, #360]	; (80034a0 <detectionStage+0x1d4>)
 8003338:	801a      	strh	r2, [r3, #0]
            std = sqrt(((dataPoint.magnitude - mean) * (dataPoint.magnitude - mean)) + ((oMean - mean) * (oMean - mean))) / 2;
 800333a:	893b      	ldrh	r3, [r7, #8]
 800333c:	461a      	mov	r2, r3
 800333e:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <detectionStage+0x1d4>)
 8003340:	881b      	ldrh	r3, [r3, #0]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	893a      	ldrh	r2, [r7, #8]
 8003346:	4611      	mov	r1, r2
 8003348:	4a55      	ldr	r2, [pc, #340]	; (80034a0 <detectionStage+0x1d4>)
 800334a:	8812      	ldrh	r2, [r2, #0]
 800334c:	1a8a      	subs	r2, r1, r2
 800334e:	fb03 f202 	mul.w	r2, r3, r2
 8003352:	4b53      	ldr	r3, [pc, #332]	; (80034a0 <detectionStage+0x1d4>)
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	4619      	mov	r1, r3
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	1a5b      	subs	r3, r3, r1
 800335c:	4950      	ldr	r1, [pc, #320]	; (80034a0 <detectionStage+0x1d4>)
 800335e:	8809      	ldrh	r1, [r1, #0]
 8003360:	4608      	mov	r0, r1
 8003362:	69f9      	ldr	r1, [r7, #28]
 8003364:	1a09      	subs	r1, r1, r0
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	17da      	asrs	r2, r3, #31
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	607a      	str	r2, [r7, #4]
 8003372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003376:	f7ff ff27 	bl	80031c8 <sqrt>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	0fd9      	lsrs	r1, r3, #31
 8003380:	2000      	movs	r0, #0
 8003382:	4688      	mov	r8, r1
 8003384:	4681      	mov	r9, r0
 8003386:	eb18 0402 	adds.w	r4, r8, r2
 800338a:	eb49 0503 	adc.w	r5, r9, r3
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	0862      	lsrs	r2, r4, #1
 8003398:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800339c:	106b      	asrs	r3, r5, #1
 800339e:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <detectionStage+0x1dc>)
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	e04f      	b.n	8003444 <detectionStage+0x178>
        }
        else
        {
            mean = (dataPoint.magnitude + ((count - 1) * mean)) / count;
 80033a4:	893b      	ldrh	r3, [r7, #8]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <detectionStage+0x1d8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	4a3c      	ldr	r2, [pc, #240]	; (80034a0 <detectionStage+0x1d4>)
 80033b0:	8812      	ldrh	r2, [r2, #0]
 80033b2:	fb02 f303 	mul.w	r3, r2, r3
 80033b6:	18ca      	adds	r2, r1, r3
 80033b8:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <detectionStage+0x1d8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	4b37      	ldr	r3, [pc, #220]	; (80034a0 <detectionStage+0x1d4>)
 80033c4:	801a      	strh	r2, [r3, #0]
            accumulator_t part1 = ((std * std) / (count - 1)) * (count - 2);
 80033c6:	4b38      	ldr	r3, [pc, #224]	; (80034a8 <detectionStage+0x1dc>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a37      	ldr	r2, [pc, #220]	; (80034a8 <detectionStage+0x1dc>)
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	fb03 f202 	mul.w	r2, r3, r2
 80033d2:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <detectionStage+0x1d8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80033dc:	4a31      	ldr	r2, [pc, #196]	; (80034a4 <detectionStage+0x1d8>)
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	3a02      	subs	r2, #2
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	61bb      	str	r3, [r7, #24]
            accumulator_t part2 = ((oMean - mean) * (oMean - mean));
 80033e8:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <detectionStage+0x1d4>)
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	461a      	mov	r2, r3
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	4a2b      	ldr	r2, [pc, #172]	; (80034a0 <detectionStage+0x1d4>)
 80033f4:	8812      	ldrh	r2, [r2, #0]
 80033f6:	4611      	mov	r1, r2
 80033f8:	69fa      	ldr	r2, [r7, #28]
 80033fa:	1a52      	subs	r2, r2, r1
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	617b      	str	r3, [r7, #20]
            accumulator_t part3 = ((dataPoint.magnitude - mean) * (dataPoint.magnitude - mean)) / count;
 8003402:	893b      	ldrh	r3, [r7, #8]
 8003404:	461a      	mov	r2, r3
 8003406:	4b26      	ldr	r3, [pc, #152]	; (80034a0 <detectionStage+0x1d4>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	893a      	ldrh	r2, [r7, #8]
 800340e:	4611      	mov	r1, r2
 8003410:	4a23      	ldr	r2, [pc, #140]	; (80034a0 <detectionStage+0x1d4>)
 8003412:	8812      	ldrh	r2, [r2, #0]
 8003414:	1a8a      	subs	r2, r1, r2
 8003416:	fb03 f202 	mul.w	r2, r3, r2
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <detectionStage+0x1d8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003422:	613b      	str	r3, [r7, #16]
            std = (accumulator_t)sqrt(part1 + part2 + part3);
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	441a      	add	r2, r3
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	17da      	asrs	r2, r3, #31
 8003430:	469a      	mov	sl, r3
 8003432:	4693      	mov	fp, r2
 8003434:	4650      	mov	r0, sl
 8003436:	4659      	mov	r1, fp
 8003438:	f7ff fec6 	bl	80031c8 <sqrt>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <detectionStage+0x1dc>)
 8003442:	601a      	str	r2, [r3, #0]
        }
        if (count > 15)
 8003444:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <detectionStage+0x1d8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b0f      	cmp	r3, #15
 800344a:	dd21      	ble.n	8003490 <detectionStage+0x1c4>
        {
            if ((dataPoint.magnitude - mean) > (std * threshold_int + (std / threshold_frac)))
 800344c:	893b      	ldrh	r3, [r7, #8]
 800344e:	461a      	mov	r2, r3
 8003450:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <detectionStage+0x1d4>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	1ad2      	subs	r2, r2, r3
 8003456:	4b15      	ldr	r3, [pc, #84]	; (80034ac <detectionStage+0x1e0>)
 8003458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800345c:	4619      	mov	r1, r3
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <detectionStage+0x1dc>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	fb03 f101 	mul.w	r1, r3, r1
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <detectionStage+0x1dc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4811      	ldr	r0, [pc, #68]	; (80034b0 <detectionStage+0x1e4>)
 800346c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8003470:	fb93 f3f0 	sdiv	r3, r3, r0
 8003474:	440b      	add	r3, r1
 8003476:	429a      	cmp	r2, r3
 8003478:	dd0a      	ble.n	8003490 <detectionStage+0x1c4>
            {
                // This is a peak
                ring_buffer_queue(outBuff, dataPoint);
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <detectionStage+0x1e8>)
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	f107 0308 	add.w	r3, r7, #8
 8003482:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003486:	f000 fb60 	bl	8003b4a <ring_buffer_queue>
                (*nextStage)();
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <detectionStage+0x1ec>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4798      	blx	r3
                }
#endif
            }
        }
    }
}
 8003490:	bf00      	nop
 8003492:	3720      	adds	r7, #32
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349a:	bf00      	nop
 800349c:	20000a44 	.word	0x20000a44
 80034a0:	20000a50 	.word	0x20000a50
 80034a4:	20000a58 	.word	0x20000a58
 80034a8:	20000a54 	.word	0x20000a54
 80034ac:	20000a5c 	.word	0x20000a5c
 80034b0:	2000001c 	.word	0x2000001c
 80034b4:	20000a48 	.word	0x20000a48
 80034b8:	20000a4c 	.word	0x20000a4c

080034bc <initFilterStage>:
    11354,
    -3734,
    -2696};

void initFilterStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 80034c8:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <initFilterStage+0x2c>)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <initFilterStage+0x30>)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 80034d4:	4a06      	ldr	r2, [pc, #24]	; (80034f0 <initFilterStage+0x34>)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    filteredFile = fopen(DUMP_FILTERED_FILE_NAME, "w+");
#endif
}
 80034da:	bf00      	nop
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000a60 	.word	0x20000a60
 80034ec:	20000a64 	.word	0x20000a64
 80034f0:	20000a68 	.word	0x20000a68

080034f4 <filterStage>:

void filterStage(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
    if (ring_buffer_num_items(inBuff) == FILTER_TAP_NUM)
 80034fa:	4b25      	ldr	r3, [pc, #148]	; (8003590 <filterStage+0x9c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fafc 	bl	8003afc <ring_buffer_num_items>
 8003504:	4603      	mov	r3, r0
 8003506:	2b07      	cmp	r3, #7
 8003508:	d13e      	bne.n	8003588 <filterStage+0x94>
    {
        accumulator_t sum = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
        data_point_t dataPoint;
        data_point_t out;

        for (int8_t i = 0; i < FILTER_TAP_NUM; i++)
 800350e:	2300      	movs	r3, #0
 8003510:	74fb      	strb	r3, [r7, #19]
 8003512:	e01f      	b.n	8003554 <filterStage+0x60>
        {
            ring_buffer_peek(inBuff, &dataPoint, i);
 8003514:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <filterStage+0x9c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	7cfa      	ldrb	r2, [r7, #19]
 800351a:	f107 0108 	add.w	r1, r7, #8
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fb6e 	bl	8003c00 <ring_buffer_peek>
            if (i == FILTER_TAP_NUM - 1)
 8003524:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003528:	2b06      	cmp	r3, #6
 800352a:	d101      	bne.n	8003530 <filterStage+0x3c>
                out.time = dataPoint.time;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	607b      	str	r3, [r7, #4]
            sum += dataPoint.magnitude * filter_taps[i];
 8003530:	893b      	ldrh	r3, [r7, #8]
 8003532:	4619      	mov	r1, r3
 8003534:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003538:	4a16      	ldr	r2, [pc, #88]	; (8003594 <filterStage+0xa0>)
 800353a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800353e:	fb01 f303 	mul.w	r3, r1, r3
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4413      	add	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
        for (int8_t i = 0; i < FILTER_TAP_NUM; i++)
 8003548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	3301      	adds	r3, #1
 8003550:	b2db      	uxtb	r3, r3
 8003552:	74fb      	strb	r3, [r7, #19]
 8003554:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003558:	2b06      	cmp	r3, #6
 800355a:	dddb      	ble.n	8003514 <filterStage+0x20>
        }
        out.magnitude = sum >> 16;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	141b      	asrs	r3, r3, #16
 8003560:	b29b      	uxth	r3, r3
 8003562:	803b      	strh	r3, [r7, #0]

        ring_buffer_dequeue(inBuff, &dataPoint);
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <filterStage+0x9c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f107 0208 	add.w	r2, r7, #8
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fb1d 	bl	8003bae <ring_buffer_dequeue>
        ring_buffer_queue(outBuff, out);
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <filterStage+0xa4>)
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	463b      	mov	r3, r7
 800357a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800357e:	f000 fae4 	bl	8003b4a <ring_buffer_queue>
        (*nextStage)();
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <filterStage+0xa8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4798      	blx	r3
                puts("error writing file");
            fflush(filteredFile);
        }
#endif
    }
}
 8003588:	bf00      	nop
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000a60 	.word	0x20000a60
 8003594:	20000020 	.word	0x20000020
 8003598:	20000a64 	.word	0x20000a64
 800359c:	20000a68 	.word	0x20000a68

080035a0 <initMotionDetectStage>:
static ring_buffer_t *inBuff;
static ring_buffer_t *outBuff;
static void (*nextStage)(void);

void initMotionDetectStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 80035ac:	4a07      	ldr	r2, [pc, #28]	; (80035cc <initMotionDetectStage+0x2c>)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <initMotionDetectStage+0x30>)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 80035b8:	4a06      	ldr	r2, [pc, #24]	; (80035d4 <initMotionDetectStage+0x34>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6013      	str	r3, [r2, #0]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000a6c 	.word	0x20000a6c
 80035d0:	20000a70 	.word	0x20000a70
 80035d4:	20000a74 	.word	0x20000a74

080035d8 <motionDetectStage>:

void motionDetectStage(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
    if (ring_buffer_num_items(inBuff) >= 15)
 80035de:	4b23      	ldr	r3, [pc, #140]	; (800366c <motionDetectStage+0x94>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fa8a 	bl	8003afc <ring_buffer_num_items>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b0e      	cmp	r3, #14
 80035ec:	d939      	bls.n	8003662 <motionDetectStage+0x8a>
    {
        magnitude_t min = maxof(magnitude_t);
 80035ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035f2:	82fb      	strh	r3, [r7, #22]
        magnitude_t max = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	82bb      	strh	r3, [r7, #20]
        for (int i = 0; i < 12; i++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	e017      	b.n	800362e <motionDetectStage+0x56>
        {
            data_point_t dp;
            ring_buffer_peek(inBuff, &dp, i);
 80035fe:	4b1b      	ldr	r3, [pc, #108]	; (800366c <motionDetectStage+0x94>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	f107 0108 	add.w	r1, r7, #8
 800360a:	4618      	mov	r0, r3
 800360c:	f000 faf8 	bl	8003c00 <ring_buffer_peek>
            if (dp.magnitude > max)
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	8aba      	ldrh	r2, [r7, #20]
 8003614:	429a      	cmp	r2, r3
 8003616:	d201      	bcs.n	800361c <motionDetectStage+0x44>
                max = dp.magnitude;
 8003618:	893b      	ldrh	r3, [r7, #8]
 800361a:	82bb      	strh	r3, [r7, #20]
            if (dp.magnitude < min)
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	8afa      	ldrh	r2, [r7, #22]
 8003620:	429a      	cmp	r2, r3
 8003622:	d901      	bls.n	8003628 <motionDetectStage+0x50>
                min = dp.magnitude;
 8003624:	893b      	ldrh	r3, [r7, #8]
 8003626:	82fb      	strh	r3, [r7, #22]
        for (int i = 0; i < 12; i++)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	3301      	adds	r3, #1
 800362c:	613b      	str	r3, [r7, #16]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b0b      	cmp	r3, #11
 8003632:	dde4      	ble.n	80035fe <motionDetectStage+0x26>
        }

        if (max - min > MOTION_THRESHOLD)
 8003634:	8aba      	ldrh	r2, [r7, #20]
 8003636:	8afb      	ldrh	r3, [r7, #22]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800363e:	dd10      	ble.n	8003662 <motionDetectStage+0x8a>
        {
            data_point_t dataPoint;
            ring_buffer_dequeue(inBuff, &dataPoint);
 8003640:	4b0a      	ldr	r3, [pc, #40]	; (800366c <motionDetectStage+0x94>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	463a      	mov	r2, r7
 8003646:	4611      	mov	r1, r2
 8003648:	4618      	mov	r0, r3
 800364a:	f000 fab0 	bl	8003bae <ring_buffer_dequeue>
            ring_buffer_queue(outBuff, dataPoint);
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <motionDetectStage+0x98>)
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	463b      	mov	r3, r7
 8003654:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003658:	f000 fa77 	bl	8003b4a <ring_buffer_queue>
            (*nextStage)();
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <motionDetectStage+0x9c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4798      	blx	r3
        }
    }
}
 8003662:	bf00      	nop
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000a6c 	.word	0x20000a6c
 8003670:	20000a70 	.word	0x20000a70
 8003674:	20000a74 	.word	0x20000a74

08003678 <initPostProcessingStage>:
static data_point_t lastDataPoint;
static int16_t timeThreshold = 300; // in ms, this discards steps that are too close in time, 3 steps /s is a reasonable maximum
static void (*stepCallback)(void);

void initPostProcessingStage(ring_buffer_t *pInBuff, void (*stepCallbackIn)(void))
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
    inBuff = pInBuff;
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <initPostProcessingStage+0x30>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6013      	str	r3, [r2, #0]
    stepCallback = stepCallbackIn;
 8003688:	4a08      	ldr	r2, [pc, #32]	; (80036ac <initPostProcessingStage+0x34>)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6013      	str	r3, [r2, #0]
    lastDataPoint.time = 0;
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <initPostProcessingStage+0x38>)
 8003690:	2200      	movs	r2, #0
 8003692:	605a      	str	r2, [r3, #4]
    lastDataPoint.magnitude = 0;
 8003694:	4b06      	ldr	r3, [pc, #24]	; (80036b0 <initPostProcessingStage+0x38>)
 8003696:	2200      	movs	r2, #0
 8003698:	801a      	strh	r2, [r3, #0]

#ifdef DUMP_FILE
    postProcFile = fopen(DUMP_POSTPROC_FILE_NAME, "w+");
#endif
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000a78 	.word	0x20000a78
 80036ac:	20000a84 	.word	0x20000a84
 80036b0:	20000a7c 	.word	0x20000a7c

080036b4 <postProcessingStage>:

void postProcessingStage(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
    if (!ring_buffer_is_empty(inBuff))
 80036ba:	4b1f      	ldr	r3, [pc, #124]	; (8003738 <postProcessingStage+0x84>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f9ee 	bl	8003aa0 <ring_buffer_is_empty>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d132      	bne.n	8003730 <postProcessingStage+0x7c>
    {
        data_point_t dataPoint;
        ring_buffer_dequeue(inBuff, &dataPoint);
 80036ca:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <postProcessingStage+0x84>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	463a      	mov	r2, r7
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 fa6b 	bl	8003bae <ring_buffer_dequeue>
        if (lastDataPoint.time == 0)
 80036d8:	4b18      	ldr	r3, [pc, #96]	; (800373c <postProcessingStage+0x88>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d107      	bne.n	80036f0 <postProcessingStage+0x3c>
        {
            lastDataPoint = dataPoint;
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <postProcessingStage+0x88>)
 80036e2:	461a      	mov	r2, r3
 80036e4:	463b      	mov	r3, r7
 80036e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036ea:	e882 0003 	stmia.w	r2, {r0, r1}
                    lastDataPoint = dataPoint;
                }
            }
        }
    }
}
 80036ee:	e01f      	b.n	8003730 <postProcessingStage+0x7c>
            if ((dataPoint.time - lastDataPoint.time) > timeThreshold)
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <postProcessingStage+0x88>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	4a11      	ldr	r2, [pc, #68]	; (8003740 <postProcessingStage+0x8c>)
 80036fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80036fe:	4293      	cmp	r3, r2
 8003700:	dd0a      	ble.n	8003718 <postProcessingStage+0x64>
                lastDataPoint = dataPoint;
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <postProcessingStage+0x88>)
 8003704:	461a      	mov	r2, r3
 8003706:	463b      	mov	r3, r7
 8003708:	e893 0003 	ldmia.w	r3, {r0, r1}
 800370c:	e882 0003 	stmia.w	r2, {r0, r1}
                (*stepCallback)();
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <postProcessingStage+0x90>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4798      	blx	r3
}
 8003716:	e00b      	b.n	8003730 <postProcessingStage+0x7c>
                if (dataPoint.magnitude > lastDataPoint.magnitude)
 8003718:	883a      	ldrh	r2, [r7, #0]
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <postProcessingStage+0x88>)
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d906      	bls.n	8003730 <postProcessingStage+0x7c>
                    lastDataPoint = dataPoint;
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <postProcessingStage+0x88>)
 8003724:	461a      	mov	r2, r3
 8003726:	463b      	mov	r3, r7
 8003728:	e893 0003 	ldmia.w	r3, {r0, r1}
 800372c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000a78 	.word	0x20000a78
 800373c:	20000a7c 	.word	0x20000a7c
 8003740:	2000002e 	.word	0x2000002e
 8003744:	20000a84 	.word	0x20000a84

08003748 <sqrt>:
{
 8003748:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800374c:	b08b      	sub	sp, #44	; 0x2c
 800374e:	af00      	add	r7, sp, #0
 8003750:	e9c7 0102 	strd	r0, r1, [r7, #8]
  base = 67108864; //2^24
 8003754:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003758:	f04f 0300 	mov.w	r3, #0
 800375c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  y = 0;
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 1; i <= 24; i++)
 800376c:	f04f 0201 	mov.w	r2, #1
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8003778:	e03d      	b.n	80037f6 <sqrt+0xae>
    y += base;
 800377a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800377e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003782:	eb10 0802 	adds.w	r8, r0, r2
 8003786:	eb41 0903 	adc.w	r9, r1, r3
 800378a:	e9c7 8904 	strd	r8, r9, [r7, #16]
    if ((y * y) > number)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	fb03 f202 	mul.w	r2, r3, r2
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	6939      	ldr	r1, [r7, #16]
 800379a:	fb01 f303 	mul.w	r3, r1, r3
 800379e:	441a      	add	r2, r3
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	fba3 4503 	umull	r4, r5, r3, r3
 80037a6:	1953      	adds	r3, r2, r5
 80037a8:	461d      	mov	r5, r3
 80037aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037ae:	42a2      	cmp	r2, r4
 80037b0:	41ab      	sbcs	r3, r5
 80037b2:	da09      	bge.n	80037c8 <sqrt+0x80>
      y -= base; // base should not have been added, so we substract again
 80037b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80037b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037bc:	ebb0 0a02 	subs.w	sl, r0, r2
 80037c0:	eb61 0b03 	sbc.w	fp, r1, r3
 80037c4:	e9c7 ab04 	strd	sl, fp, [r7, #16]
    base = base >> 1; // shift 1 digit to the right = divide by 2
 80037c8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	0842      	lsrs	r2, r0, #1
 80037d6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80037da:	104b      	asrs	r3, r1, #1
 80037dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
  for (i = 1; i <= 24; i++)
 80037e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e4:	1c51      	adds	r1, r2, #1
 80037e6:	6039      	str	r1, [r7, #0]
 80037e8:	f143 0300 	adc.w	r3, r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80037f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037fa:	2a19      	cmp	r2, #25
 80037fc:	f173 0300 	sbcs.w	r3, r3, #0
 8003800:	dbbb      	blt.n	800377a <sqrt+0x32>
  return y;
 8003802:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8003806:	4610      	mov	r0, r2
 8003808:	4619      	mov	r1, r3
 800380a:	372c      	adds	r7, #44	; 0x2c
 800380c:	46bd      	mov	sp, r7
 800380e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003812:	4770      	bx	lr

08003814 <initPreProcessStage>:
static uint8_t samplingPeriod = 80;    //in ms, this can be smaller than the actual sampling frequency, but it will result in more computations
static uint16_t timeScalingFactor = 1; //use this for adjusting time to ms, in case the clock has higher precision
static time_t lastSampleTime = -1;

void initPreProcessStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 8003820:	4a07      	ldr	r2, [pc, #28]	; (8003840 <initPreProcessStage+0x2c>)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 8003826:	4a07      	ldr	r2, [pc, #28]	; (8003844 <initPreProcessStage+0x30>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 800382c:	4a06      	ldr	r2, [pc, #24]	; (8003848 <initPreProcessStage+0x34>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    magnitudeFile = fopen(DUMP_MAGNITUDE_FILE_NAME, "w+");
    interpolatedFile = fopen(DUMP_INTERPOLATED_FILE_NAME, "w+");
#endif
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000a88 	.word	0x20000a88
 8003844:	20000a8c 	.word	0x20000a8c
 8003848:	20000a90 	.word	0x20000a90

0800384c <linearInterpolate>:

static data_point_t linearInterpolate(data_point_t dp1, data_point_t dp2, int64_t interpTime)
{
 800384c:	b082      	sub	sp, #8
 800384e:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	1d38      	adds	r0, r7, #4
 800385a:	e880 0006 	stmia.w	r0, {r1, r2}
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
    magnitude_t mag = (dp1.magnitude + ((dp2.magnitude - dp1.magnitude) / (dp2.time - dp1.time)) * (interpTime - dp1.time));
 8003860:	88b9      	ldrh	r1, [r7, #4]
 8003862:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003864:	461a      	mov	r2, r3
 8003866:	88bb      	ldrh	r3, [r7, #4]
 8003868:	1ad2      	subs	r2, r2, r3
 800386a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	1ac3      	subs	r3, r0, r3
 8003870:	fb92 f3f3 	sdiv	r3, r2, r3
 8003874:	b298      	uxth	r0, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	17da      	asrs	r2, r3, #31
 800387a:	461c      	mov	r4, r3
 800387c:	4615      	mov	r5, r2
 800387e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003882:	ebb2 0804 	subs.w	r8, r2, r4
 8003886:	eb63 0905 	sbc.w	r9, r3, r5
 800388a:	fa1f f388 	uxth.w	r3, r8
 800388e:	fb10 f303 	smulbb	r3, r0, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	440b      	add	r3, r1
 8003896:	83fb      	strh	r3, [r7, #30]
    data_point_t interp;
    interp.time = interpTime;
 8003898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800389a:	61bb      	str	r3, [r7, #24]
    interp.magnitude = mag;
 800389c:	8bfb      	ldrh	r3, [r7, #30]
 800389e:	82bb      	strh	r3, [r7, #20]
    return interp;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	461a      	mov	r2, r3
 80038a4:	f107 0314 	add.w	r3, r7, #20
 80038a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80038ac:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	3724      	adds	r7, #36	; 0x24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80038ba:	b002      	add	sp, #8
 80038bc:	4770      	bx	lr
	...

080038c0 <outPutDataPoint>:

static void outPutDataPoint(data_point_t dp)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	463b      	mov	r3, r7
 80038c8:	e883 0003 	stmia.w	r3, {r0, r1}
    lastSampleTime = dp.time;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <outPutDataPoint+0x30>)
 80038d0:	6013      	str	r3, [r2, #0]
    ring_buffer_queue(outBuff, dp);
 80038d2:	4b08      	ldr	r3, [pc, #32]	; (80038f4 <outPutDataPoint+0x34>)
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	463b      	mov	r3, r7
 80038d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80038dc:	f000 f935 	bl	8003b4a <ring_buffer_queue>
    (*nextStage)();
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <outPutDataPoint+0x38>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4798      	blx	r3
        if (!fprintf(interpolatedFile, "%lld, %lld\n", dp.time, dp.magnitude))
            puts("error writing file");
        fflush(interpolatedFile);
    }
#endif
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000034 	.word	0x20000034
 80038f4:	20000a8c 	.word	0x20000a8c
 80038f8:	20000a90 	.word	0x20000a90

080038fc <preProcessSample>:

void preProcessSample(time_t time, accel_t x, accel_t y, accel_t z)
{
 80038fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003900:	b096      	sub	sp, #88	; 0x58
 8003902:	af04      	add	r7, sp, #16
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	4608      	mov	r0, r1
 8003908:	4611      	mov	r1, r2
 800390a:	461a      	mov	r2, r3
 800390c:	4603      	mov	r3, r0
 800390e:	817b      	strh	r3, [r7, #10]
 8003910:	460b      	mov	r3, r1
 8003912:	813b      	strh	r3, [r7, #8]
 8003914:	4613      	mov	r3, r2
 8003916:	80fb      	strh	r3, [r7, #6]
    time = time / timeScalingFactor;
 8003918:	4b5d      	ldr	r3, [pc, #372]	; (8003a90 <preProcessSample+0x194>)
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	fb93 f3f2 	sdiv	r3, r3, r2
 8003924:	60fb      	str	r3, [r7, #12]

    magnitude_t magnitude = (magnitude_t)sqrt((accumulator_t)(x * x + y * y + z * z));
 8003926:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800392a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800392e:	fb03 f202 	mul.w	r2, r3, r2
 8003932:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003936:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	441a      	add	r2, r3
 8003940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003944:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	17da      	asrs	r2, r3, #31
 8003950:	4698      	mov	r8, r3
 8003952:	4691      	mov	r9, r2
 8003954:	4640      	mov	r0, r8
 8003956:	4649      	mov	r1, r9
 8003958:	f7ff fef6 	bl	8003748 <sqrt>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4613      	mov	r3, r2
 8003962:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    data_point_t dataPoint;
    dataPoint.time = time;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38
    dataPoint.magnitude = magnitude;
 800396a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800396e:	86bb      	strh	r3, [r7, #52]	; 0x34
#endif

#ifdef SKIP_INTERPOLATION
    outPutDataPoint(dataPoint);
#else
    ring_buffer_queue(inBuff, dataPoint);
 8003970:	4b48      	ldr	r3, [pc, #288]	; (8003a94 <preProcessSample+0x198>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003978:	e893 0006 	ldmia.w	r3, {r1, r2}
 800397c:	f000 f8e5 	bl	8003b4a <ring_buffer_queue>
    if (ring_buffer_num_items(inBuff) >= 2)
 8003980:	4b44      	ldr	r3, [pc, #272]	; (8003a94 <preProcessSample+0x198>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 f8b9 	bl	8003afc <ring_buffer_num_items>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d97a      	bls.n	8003a86 <preProcessSample+0x18a>
    {
        data_point_t dp1;
        data_point_t dp2;
        // take last 2 elements
        ring_buffer_peek(inBuff, &dp1, 0);
 8003990:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <preProcessSample+0x198>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003998:	2200      	movs	r2, #0
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f930 	bl	8003c00 <ring_buffer_peek>
        ring_buffer_peek(inBuff, &dp2, 1);
 80039a0:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <preProcessSample+0x198>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80039a8:	2201      	movs	r2, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f928 	bl	8003c00 <ring_buffer_peek>
        if (lastSampleTime == -1)
 80039b0:	4b39      	ldr	r3, [pc, #228]	; (8003a98 <preProcessSample+0x19c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039b8:	d102      	bne.n	80039c0 <preProcessSample+0xc4>
            lastSampleTime = dp1.time;
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	4a36      	ldr	r2, [pc, #216]	; (8003a98 <preProcessSample+0x19c>)
 80039be:	6013      	str	r3, [r2, #0]

        if (dp2.time - lastSampleTime == samplingPeriod)
 80039c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039c2:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <preProcessSample+0x19c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	4a34      	ldr	r2, [pc, #208]	; (8003a9c <preProcessSample+0x1a0>)
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d106      	bne.n	80039de <preProcessSample+0xe2>
        {
            // no need to interpolate!
            outPutDataPoint(dp2);
 80039d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039d8:	f7ff ff72 	bl	80038c0 <outPutDataPoint>
 80039dc:	e04b      	b.n	8003a76 <preProcessSample+0x17a>
        }
        else if (dp2.time - lastSampleTime > samplingPeriod)
 80039de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <preProcessSample+0x19c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <preProcessSample+0x1a0>)
 80039e8:	7812      	ldrb	r2, [r2, #0]
 80039ea:	4293      	cmp	r3, r2
 80039ec:	dd43      	ble.n	8003a76 <preProcessSample+0x17a>
        {
            int8_t numberOfPoints = 1 + ((((dp2.time - lastSampleTime)) - 1) / samplingPeriod); //number of points to be generated, ceiled
 80039ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f0:	4b29      	ldr	r3, [pc, #164]	; (8003a98 <preProcessSample+0x19c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	3b01      	subs	r3, #1
 80039f8:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <preProcessSample+0x1a0>)
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

            for (int8_t i = 1; i < numberOfPoints; i++)
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003a10:	e02b      	b.n	8003a6a <preProcessSample+0x16e>
            {
                time_t interpTime = lastSampleTime + samplingPeriod;
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <preProcessSample+0x1a0>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <preProcessSample+0x19c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	63fb      	str	r3, [r7, #60]	; 0x3c

                if (dp1.time <= interpTime && interpTime <= dp2.time)
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a24:	429a      	cmp	r2, r3
 8003a26:	db19      	blt.n	8003a5c <preProcessSample+0x160>
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	dc15      	bgt.n	8003a5c <preProcessSample+0x160>
                {
                    data_point_t interpolated = linearInterpolate(dp1, dp2, interpTime);
 8003a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a32:	17da      	asrs	r2, r3, #31
 8003a34:	461c      	mov	r4, r3
 8003a36:	4615      	mov	r5, r2
 8003a38:	f107 0014 	add.w	r0, r7, #20
 8003a3c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003a4a:	ca06      	ldmia	r2, {r1, r2}
 8003a4c:	f7ff fefe 	bl	800384c <linearInterpolate>
                    outPutDataPoint(interpolated);
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a58:	f7ff ff32 	bl	80038c0 <outPutDataPoint>
            for (int8_t i = 1; i < numberOfPoints; i++)
 8003a5c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003a6a:	f997 2047 	ldrsb.w	r2, [r7, #71]	; 0x47
 8003a6e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8003a72:	429a      	cmp	r2, r3
 8003a74:	dbcd      	blt.n	8003a12 <preProcessSample+0x116>
                }
            }
        }
        // remove oldest element in queue
        data_point_t dataPoint;
        ring_buffer_dequeue(inBuff, &dataPoint);
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <preProcessSample+0x198>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f107 021c 	add.w	r2, r7, #28
 8003a7e:	4611      	mov	r1, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f894 	bl	8003bae <ring_buffer_dequeue>
    }
#endif
}
 8003a86:	bf00      	nop
 8003a88:	3748      	adds	r7, #72	; 0x48
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a90:	20000032 	.word	0x20000032
 8003a94:	20000a88 	.word	0x20000a88
 8003a98:	20000034 	.word	0x20000034
 8003a9c:	20000030 	.word	0x20000030

08003aa0 <ring_buffer_is_empty>:
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	bf0c      	ite	eq
 8003ab8:	2301      	moveq	r3, #1
 8003aba:	2300      	movne	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <ring_buffer_is_full>:
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	bf0c      	ite	eq
 8003aea:	2301      	moveq	r3, #1
 8003aec:	2300      	movne	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <ring_buffer_num_items>:
 * Returns the number of items in a ring buffer.
 * @param buffer The buffer for which the number of items should be returned.
 * @return The number of items in the ring buffer.
 */
inline ring_buffer_size_t ring_buffer_num_items(ring_buffer_t *buffer)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	b2db      	uxtb	r3, r3
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <ring_buffer_init>:
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  buffer->head_index = 0;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, data_point_t data)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Is buffer full? */
  if (ring_buffer_is_full(buffer))
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f7ff ffb6 	bl	8003aca <ring_buffer_is_full>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <ring_buffer_queue+0x30>
  {
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	1d3a      	adds	r2, r7, #4
 8003b88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b8c:	e883 0003 	stmia.w	r3, {r0, r1}
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003b96:	3301      	adds	r3, #1
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <ring_buffer_dequeue>:

ring_buffer_size_t ring_buffer_dequeue(ring_buffer_t *buffer, data_point_t *data)
{
 8003bae:	b590      	push	{r4, r7, lr}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  if (ring_buffer_is_empty(buffer))
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff ff71 	bl	8003aa0 <ring_buffer_is_empty>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <ring_buffer_dequeue+0x1a>
  {
    /* No items */
    return 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e017      	b.n	8003bf8 <ring_buffer_dequeue+0x4a>
  }

  *data = buffer->buffer[buffer->tail_index];
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bce:	6839      	ldr	r1, [r7, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003bdc:	e884 0003 	stmia.w	r4, {r0, r1}
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003be6:	3301      	adds	r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return 1;
 8003bf6:	2301      	movs	r3, #1
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd90      	pop	{r4, r7, pc}

08003c00 <ring_buffer_peek>:

ring_buffer_size_t ring_buffer_peek(ring_buffer_t *buffer, data_point_t *data, ring_buffer_size_t index)
{
 8003c00:	b590      	push	{r4, r7, lr}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	71fb      	strb	r3, [r7, #7]
  if (index >= ring_buffer_num_items(buffer))
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f7ff ff74 	bl	8003afc <ring_buffer_num_items>
 8003c14:	4603      	mov	r3, r0
 8003c16:	461a      	mov	r2, r3
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d301      	bcc.n	8003c22 <ring_buffer_peek+0x22>
  {
    /* No items at index */
    return 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	e013      	b.n	8003c4a <ring_buffer_peek+0x4a>
  }

  /* Add index to pointer */
  ring_buffer_size_t data_index = ((buffer->tail_index + index) & RING_BUFFER_MASK);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	75fb      	strb	r3, [r7, #23]
  *data = buffer->buffer[data_index];
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c44:	e884 0003 	stmia.w	r4, {r0, r1}
  return 1;
 8003c48:	2301      	movs	r3, #1
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	371c      	adds	r7, #28
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd90      	pop	{r4, r7, pc}
	...

08003c54 <initScoringStage>:

static ring_buffer_size_t windowSize = 10;
static ring_buffer_size_t midpoint = 5; //half of size

void initScoringStage(ring_buffer_t *pInBuff, ring_buffer_t *pOutBuff, void (*pNextStage)(void))
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
    inBuff = pInBuff;
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <initScoringStage+0x2c>)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6013      	str	r3, [r2, #0]
    outBuff = pOutBuff;
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <initScoringStage+0x30>)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	6013      	str	r3, [r2, #0]
    nextStage = pNextStage;
 8003c6c:	4a06      	ldr	r2, [pc, #24]	; (8003c88 <initScoringStage+0x34>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6013      	str	r3, [r2, #0]

#ifdef DUMP_FILE
    scoringFile = fopen(DUMP_SCORING_FILE_NAME, "w+");
#endif
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000a94 	.word	0x20000a94
 8003c84:	20000a98 	.word	0x20000a98
 8003c88:	20000a9c 	.word	0x20000a9c

08003c8c <scoringStage>:

void scoringStage(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
    if (ring_buffer_num_items(inBuff) == windowSize)
 8003c92:	4b38      	ldr	r3, [pc, #224]	; (8003d74 <scoringStage+0xe8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7ff ff30 	bl	8003afc <ring_buffer_num_items>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <scoringStage+0xec>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d161      	bne.n	8003d6c <scoringStage+0xe0>
    {
        magnitude_t diffLeft = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	83fb      	strh	r3, [r7, #30]
        magnitude_t diffRight = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	83bb      	strh	r3, [r7, #28]
        data_point_t midpointData;
        ring_buffer_peek(inBuff, &midpointData, midpoint);
 8003cb0:	4b30      	ldr	r3, [pc, #192]	; (8003d74 <scoringStage+0xe8>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a31      	ldr	r2, [pc, #196]	; (8003d7c <scoringStage+0xf0>)
 8003cb6:	7812      	ldrb	r2, [r2, #0]
 8003cb8:	f107 0110 	add.w	r1, r7, #16
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7ff ff9f 	bl	8003c00 <ring_buffer_peek>
        data_point_t dataPoint;
        for (ring_buffer_size_t i = 0; i < midpoint; i++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	76fb      	strb	r3, [r7, #27]
 8003cc6:	e011      	b.n	8003cec <scoringStage+0x60>
        {
            ring_buffer_peek(inBuff, &dataPoint, i);
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <scoringStage+0xe8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	7efa      	ldrb	r2, [r7, #27]
 8003cce:	f107 0108 	add.w	r1, r7, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ff94 	bl	8003c00 <ring_buffer_peek>
            diffLeft += midpointData.magnitude - dataPoint.magnitude;
 8003cd8:	8a3a      	ldrh	r2, [r7, #16]
 8003cda:	893b      	ldrh	r3, [r7, #8]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	8bfb      	ldrh	r3, [r7, #30]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	83fb      	strh	r3, [r7, #30]
        for (ring_buffer_size_t i = 0; i < midpoint; i++)
 8003ce6:	7efb      	ldrb	r3, [r7, #27]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	4b23      	ldr	r3, [pc, #140]	; (8003d7c <scoringStage+0xf0>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	7efa      	ldrb	r2, [r7, #27]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d3e8      	bcc.n	8003cc8 <scoringStage+0x3c>
        }
        for (ring_buffer_size_t j = midpoint + 1; j < windowSize; j++)
 8003cf6:	4b21      	ldr	r3, [pc, #132]	; (8003d7c <scoringStage+0xf0>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	76bb      	strb	r3, [r7, #26]
 8003cfe:	e011      	b.n	8003d24 <scoringStage+0x98>
        {
            ring_buffer_peek(inBuff, &dataPoint, j);
 8003d00:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <scoringStage+0xe8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	7eba      	ldrb	r2, [r7, #26]
 8003d06:	f107 0108 	add.w	r1, r7, #8
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff ff78 	bl	8003c00 <ring_buffer_peek>
            diffRight += midpointData.magnitude - dataPoint.magnitude;
 8003d10:	8a3a      	ldrh	r2, [r7, #16]
 8003d12:	893b      	ldrh	r3, [r7, #8]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	b29a      	uxth	r2, r3
 8003d18:	8bbb      	ldrh	r3, [r7, #28]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	83bb      	strh	r3, [r7, #28]
        for (ring_buffer_size_t j = midpoint + 1; j < windowSize; j++)
 8003d1e:	7ebb      	ldrb	r3, [r7, #26]
 8003d20:	3301      	adds	r3, #1
 8003d22:	76bb      	strb	r3, [r7, #26]
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <scoringStage+0xec>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	7eba      	ldrb	r2, [r7, #26]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d3e8      	bcc.n	8003d00 <scoringStage+0x74>
        }
        magnitude_t scorePeak = (diffLeft + diffRight) / (windowSize - 1);
 8003d2e:	8bfa      	ldrh	r2, [r7, #30]
 8003d30:	8bbb      	ldrh	r3, [r7, #28]
 8003d32:	441a      	add	r2, r3
 8003d34:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <scoringStage+0xec>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8003d3e:	833b      	strh	r3, [r7, #24]
        data_point_t out;
        out.time = midpointData.time;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	607b      	str	r3, [r7, #4]
        out.magnitude = scorePeak;
 8003d44:	8b3b      	ldrh	r3, [r7, #24]
 8003d46:	803b      	strh	r3, [r7, #0]
        ring_buffer_queue(outBuff, out);
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <scoringStage+0xf4>)
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003d52:	f7ff fefa 	bl	8003b4a <ring_buffer_queue>
        ring_buffer_dequeue(inBuff, &midpointData);
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <scoringStage+0xe8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f107 0210 	add.w	r2, r7, #16
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff ff24 	bl	8003bae <ring_buffer_dequeue>
        (*nextStage)();
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <scoringStage+0xf8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4798      	blx	r3
                puts("error writing file");
            fflush(scoringFile);
        }
#endif
    }
}
 8003d6c:	bf00      	nop
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000a94 	.word	0x20000a94
 8003d78:	20000038 	.word	0x20000038
 8003d7c:	20000039 	.word	0x20000039
 8003d80:	20000a98 	.word	0x20000a98
 8003d84:	20000a9c 	.word	0x20000a9c

08003d88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dc0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d8c:	f7ff f988 	bl	80030a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d90:	480c      	ldr	r0, [pc, #48]	; (8003dc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d92:	490d      	ldr	r1, [pc, #52]	; (8003dc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d94:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <LoopForever+0xe>)
  movs r3, #0
 8003d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d98:	e002      	b.n	8003da0 <LoopCopyDataInit>

08003d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d9e:	3304      	adds	r3, #4

08003da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da4:	d3f9      	bcc.n	8003d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003da8:	4c0a      	ldr	r4, [pc, #40]	; (8003dd4 <LoopForever+0x16>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dac:	e001      	b.n	8003db2 <LoopFillZerobss>

08003dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db0:	3204      	adds	r2, #4

08003db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db4:	d3fb      	bcc.n	8003dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003db6:	f008 f971 	bl	800c09c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003dba:	f7fe fa37 	bl	800222c <main>

08003dbe <LoopForever>:

LoopForever:
    b LoopForever
 8003dbe:	e7fe      	b.n	8003dbe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003dc0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dc8:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003dcc:	08010580 	.word	0x08010580
  ldr r2, =_sbss
 8003dd0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003dd4:	20000bf0 	.word	0x20000bf0

08003dd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dd8:	e7fe      	b.n	8003dd8 <ADC1_IRQHandler>

08003dda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003de0:	2300      	movs	r3, #0
 8003de2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de4:	2003      	movs	r0, #3
 8003de6:	f001 f9af 	bl	8005148 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003dea:	200f      	movs	r0, #15
 8003dec:	f000 f80e 	bl	8003e0c <HAL_InitTick>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	71fb      	strb	r3, [r7, #7]
 8003dfa:	e001      	b.n	8003e00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dfc:	f7fe fda8 	bl	8002950 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e00:	79fb      	ldrb	r3, [r7, #7]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e18:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <HAL_InitTick+0x6c>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d023      	beq.n	8003e68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e20:	4b16      	ldr	r3, [pc, #88]	; (8003e7c <HAL_InitTick+0x70>)
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_InitTick+0x6c>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 f9bb 	bl	80051b2 <HAL_SYSTICK_Config>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0f      	cmp	r3, #15
 8003e46:	d809      	bhi.n	8003e5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e48:	2200      	movs	r2, #0
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e50:	f001 f985 	bl	800515e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e54:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <HAL_InitTick+0x74>)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e007      	b.n	8003e6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
 8003e60:	e004      	b.n	8003e6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	73fb      	strb	r3, [r7, #15]
 8003e66:	e001      	b.n	8003e6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20000040 	.word	0x20000040
 8003e7c:	20000018 	.word	0x20000018
 8003e80:	2000003c 	.word	0x2000003c

08003e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_IncTick+0x20>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b06      	ldr	r3, [pc, #24]	; (8003ea8 <HAL_IncTick+0x24>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4413      	add	r3, r2
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_IncTick+0x24>)
 8003e96:	6013      	str	r3, [r2, #0]
}
 8003e98:	bf00      	nop
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	20000040 	.word	0x20000040
 8003ea8:	20000aa0 	.word	0x20000aa0

08003eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return uwTick;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_GetTick+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000aa0 	.word	0x20000aa0

08003ec4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	609a      	str	r2, [r3, #8]
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3360      	adds	r3, #96	; 0x60
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4413      	add	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <LL_ADC_SetOffset+0x44>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003f64:	bf00      	nop
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	03fff000 	.word	0x03fff000

08003f74 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3360      	adds	r3, #96	; 0x60
 8003f82:	461a      	mov	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	3360      	adds	r3, #96	; 0x60
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b087      	sub	sp, #28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3330      	adds	r3, #48	; 0x30
 800400c:	461a      	mov	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	4413      	add	r3, r2
 800401a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	f003 031f 	and.w	r3, r3, #31
 8004026:	211f      	movs	r1, #31
 8004028:	fa01 f303 	lsl.w	r3, r1, r3
 800402c:	43db      	mvns	r3, r3
 800402e:	401a      	ands	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	0e9b      	lsrs	r3, r3, #26
 8004034:	f003 011f 	and.w	r1, r3, #31
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 031f 	and.w	r3, r3, #31
 800403e:	fa01 f303 	lsl.w	r3, r1, r3
 8004042:	431a      	orrs	r2, r3
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004054:	b480      	push	{r7}
 8004056:	b087      	sub	sp, #28
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	3314      	adds	r3, #20
 8004064:	461a      	mov	r2, r3
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	0e5b      	lsrs	r3, r3, #25
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	4413      	add	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	0d1b      	lsrs	r3, r3, #20
 800407c:	f003 031f 	and.w	r3, r3, #31
 8004080:	2107      	movs	r1, #7
 8004082:	fa01 f303 	lsl.w	r3, r1, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	401a      	ands	r2, r3
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	0d1b      	lsrs	r3, r3, #20
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	431a      	orrs	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
	...

080040ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c4:	43db      	mvns	r3, r3
 80040c6:	401a      	ands	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f003 0318 	and.w	r3, r3, #24
 80040ce:	4908      	ldr	r1, [pc, #32]	; (80040f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80040d0:	40d9      	lsrs	r1, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	400b      	ands	r3, r1
 80040d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040da:	431a      	orrs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	0007ffff 	.word	0x0007ffff

080040f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6093      	str	r3, [r2, #8]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800412c:	d101      	bne.n	8004132 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004150:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004154:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800417c:	d101      	bne.n	8004182 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800417e:	2301      	movs	r3, #1
 8004180:	e000      	b.n	8004184 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041a4:	f043 0201 	orr.w	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d101      	bne.n	80041d0 <LL_ADC_IsEnabled+0x18>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <LL_ADC_IsEnabled+0x1a>
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80041de:	b480      	push	{r7}
 80041e0:	b083      	sub	sp, #12
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041f2:	f043 0204 	orr.w	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004206:	b480      	push	{r7}
 8004208:	b083      	sub	sp, #12
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	2b04      	cmp	r3, #4
 8004218:	d101      	bne.n	800421e <LL_ADC_REG_IsConversionOngoing+0x18>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b08      	cmp	r3, #8
 800423e:	d101      	bne.n	8004244 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004240:	2301      	movs	r3, #1
 8004242:	e000      	b.n	8004246 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e126      	b.n	80044bc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	2b00      	cmp	r3, #0
 800427a:	d109      	bne.n	8004290 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7fe fb8b 	bl	8002998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff3f 	bl	8004118 <LL_ADC_IsDeepPowerDownEnabled>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d004      	beq.n	80042aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff25 	bl	80040f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff5a 	bl	8004168 <LL_ADC_IsInternalRegulatorEnabled>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d115      	bne.n	80042e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff ff3e 	bl	8004140 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042c4:	4b7f      	ldr	r3, [pc, #508]	; (80044c4 <HAL_ADC_Init+0x270>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	4a7f      	ldr	r2, [pc, #508]	; (80044c8 <HAL_ADC_Init+0x274>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	099b      	lsrs	r3, r3, #6
 80042d2:	3301      	adds	r3, #1
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042d8:	e002      	b.n	80042e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1f9      	bne.n	80042da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff ff3c 	bl	8004168 <LL_ADC_IsInternalRegulatorEnabled>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	f043 0210 	orr.w	r2, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	f043 0201 	orr.w	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff ff75 	bl	8004206 <LL_ADC_REG_IsConversionOngoing>
 800431c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 80bf 	bne.w	80044aa <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f040 80bb 	bne.w	80044aa <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800433c:	f043 0202 	orr.w	r2, r3, #2
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff ff35 	bl	80041b8 <LL_ADC_IsEnabled>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10b      	bne.n	800436c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004354:	485d      	ldr	r0, [pc, #372]	; (80044cc <HAL_ADC_Init+0x278>)
 8004356:	f7ff ff2f 	bl	80041b8 <LL_ADC_IsEnabled>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d105      	bne.n	800436c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	4619      	mov	r1, r3
 8004366:	485a      	ldr	r0, [pc, #360]	; (80044d0 <HAL_ADC_Init+0x27c>)
 8004368:	f7ff fdac 	bl	8003ec4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	7e5b      	ldrb	r3, [r3, #25]
 8004370:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004376:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800437c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004382:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800438a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800438c:	4313      	orrs	r3, r2
 800438e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d106      	bne.n	80043a8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	3b01      	subs	r3, #1
 80043a0:	045b      	lsls	r3, r3, #17
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	4b42      	ldr	r3, [pc, #264]	; (80044d4 <HAL_ADC_Init+0x280>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	69b9      	ldr	r1, [r7, #24]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ff25 	bl	800422c <LL_ADC_INJ_IsConversionOngoing>
 80043e2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d13d      	bne.n	8004466 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d13a      	bne.n	8004466 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80043f4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043fc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80043fe:	4313      	orrs	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800440c:	f023 0302 	bic.w	r3, r3, #2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	69b9      	ldr	r1, [r7, #24]
 8004416:	430b      	orrs	r3, r1
 8004418:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004420:	2b01      	cmp	r3, #1
 8004422:	d118      	bne.n	8004456 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800442e:	f023 0304 	bic.w	r3, r3, #4
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800443a:	4311      	orrs	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004440:	4311      	orrs	r1, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004446:	430a      	orrs	r2, r1
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0201 	orr.w	r2, r2, #1
 8004452:	611a      	str	r2, [r3, #16]
 8004454:	e007      	b.n	8004466 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0201 	bic.w	r2, r2, #1
 8004464:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d10c      	bne.n	8004488 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004474:	f023 010f 	bic.w	r1, r3, #15
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
 8004486:	e007      	b.n	8004498 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 020f 	bic.w	r2, r2, #15
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f023 0303 	bic.w	r3, r3, #3
 80044a0:	f043 0201 	orr.w	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	655a      	str	r2, [r3, #84]	; 0x54
 80044a8:	e007      	b.n	80044ba <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ae:	f043 0210 	orr.w	r2, r3, #16
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	20000018 	.word	0x20000018
 80044c8:	053e2d63 	.word	0x053e2d63
 80044cc:	50040000 	.word	0x50040000
 80044d0:	50040300 	.word	0x50040300
 80044d4:	fff0c007 	.word	0xfff0c007

080044d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff fe8e 	bl	8004206 <LL_ADC_REG_IsConversionOngoing>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d14f      	bne.n	8004590 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_ADC_Start+0x26>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e04b      	b.n	8004596 <HAL_ADC_Start+0xbe>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 fcc8 	bl	8004e9c <ADC_Enable>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d137      	bne.n	8004586 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004536:	d106      	bne.n	8004546 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453c:	f023 0206 	bic.w	r2, r3, #6
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	659a      	str	r2, [r3, #88]	; 0x58
 8004544:	e002      	b.n	800454c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	221c      	movs	r2, #28
 8004552:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fe2d 	bl	80041de <LL_ADC_REG_StartConversion>
 8004584:	e006      	b.n	8004594 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800458e:	e001      	b.n	8004594 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004590:	2302      	movs	r3, #2
 8004592:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d102      	bne.n	80045b6 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80045b0:	2308      	movs	r3, #8
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e010      	b.n	80045d8 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	f043 0220 	orr.w	r2, r3, #32
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e06f      	b.n	80046b4 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80045d4:	2304      	movs	r3, #4
 80045d6:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80045d8:	f7ff fc68 	bl	8003eac <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80045de:	e021      	b.n	8004624 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e6:	d01d      	beq.n	8004624 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80045e8:	f7ff fc60 	bl	8003eac <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <HAL_ADC_PollForConversion+0x60>
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d112      	bne.n	8004624 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	4013      	ands	r3, r2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	f043 0204 	orr.w	r2, r3, #4
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e047      	b.n	80046b4 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	4013      	ands	r3, r2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0d6      	beq.n	80045e0 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fcc7 	bl	8003fd6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01c      	beq.n	8004688 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7e5b      	ldrb	r3, [r3, #25]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d118      	bne.n	8004688 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b08      	cmp	r3, #8
 8004662:	d111      	bne.n	8004688 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d105      	bne.n	8004688 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b08      	cmp	r3, #8
 8004694:	d104      	bne.n	80046a0 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2208      	movs	r2, #8
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	e008      	b.n	80046b2 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d103      	bne.n	80046b2 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	220c      	movs	r2, #12
 80046b0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b0b6      	sub	sp, #216	; 0xd8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x22>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e3bb      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x79a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fd7d 	bl	8004206 <LL_ADC_REG_IsConversionOngoing>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 83a0 	bne.w	8004e54 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b05      	cmp	r3, #5
 8004722:	d824      	bhi.n	800476e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	3b02      	subs	r3, #2
 800472a:	2b03      	cmp	r3, #3
 800472c:	d81b      	bhi.n	8004766 <HAL_ADC_ConfigChannel+0x8e>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <HAL_ADC_ConfigChannel+0x5c>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004745 	.word	0x08004745
 8004738:	0800474d 	.word	0x0800474d
 800473c:	08004755 	.word	0x08004755
 8004740:	0800475d 	.word	0x0800475d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004744:	230c      	movs	r3, #12
 8004746:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800474a:	e010      	b.n	800476e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800474c:	2312      	movs	r3, #18
 800474e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004752:	e00c      	b.n	800476e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004754:	2318      	movs	r3, #24
 8004756:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800475a:	e008      	b.n	800476e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800475c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004764:	e003      	b.n	800476e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004766:	2306      	movs	r3, #6
 8004768:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800476c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800477c:	f7ff fc3e 	bl	8003ffc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fd3e 	bl	8004206 <LL_ADC_REG_IsConversionOngoing>
 800478a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fd4a 	bl	800422c <LL_ADC_INJ_IsConversionOngoing>
 8004798:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800479c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f040 81a4 	bne.w	8004aee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f040 819f 	bne.w	8004aee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6819      	ldr	r1, [r3, #0]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	461a      	mov	r2, r3
 80047be:	f7ff fc49 	bl	8004054 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695a      	ldr	r2, [r3, #20]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	08db      	lsrs	r3, r3, #3
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d00a      	beq.n	80047fa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	6919      	ldr	r1, [r3, #16]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047f4:	f7ff fb9a 	bl	8003f2c <LL_ADC_SetOffset>
 80047f8:	e179      	b.n	8004aee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff fbb7 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 8004806:	4603      	mov	r3, r0
 8004808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x14e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2100      	movs	r1, #0
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fbac 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 800481c:	4603      	mov	r3, r0
 800481e:	0e9b      	lsrs	r3, r3, #26
 8004820:	f003 021f 	and.w	r2, r3, #31
 8004824:	e01e      	b.n	8004864 <HAL_ADC_ConfigChannel+0x18c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f7ff fba1 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 8004832:	4603      	mov	r3, r0
 8004834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800483c:	fa93 f3a3 	rbit	r3, r3
 8004840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004848:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800484c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8004854:	2320      	movs	r3, #32
 8004856:	e004      	b.n	8004862 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8004858:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800485c:	fab3 f383 	clz	r3, r3
 8004860:	b2db      	uxtb	r3, r3
 8004862:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <HAL_ADC_ConfigChannel+0x1a4>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	0e9b      	lsrs	r3, r3, #26
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	e018      	b.n	80048ae <HAL_ADC_ConfigChannel+0x1d6>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004898:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80048a0:	2320      	movs	r3, #32
 80048a2:	e004      	b.n	80048ae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80048a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048a8:	fab3 f383 	clz	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d106      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fb70 	bl	8003fa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2101      	movs	r1, #1
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fb54 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 80048cc:	4603      	mov	r3, r0
 80048ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10a      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x214>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2101      	movs	r1, #1
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fb49 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 80048e2:	4603      	mov	r3, r0
 80048e4:	0e9b      	lsrs	r3, r3, #26
 80048e6:	f003 021f 	and.w	r2, r3, #31
 80048ea:	e01e      	b.n	800492a <HAL_ADC_ConfigChannel+0x252>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fb3e 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800490a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800490e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800491a:	2320      	movs	r3, #32
 800491c:	e004      	b.n	8004928 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800491e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004922:	fab3 f383 	clz	r3, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004932:	2b00      	cmp	r3, #0
 8004934:	d105      	bne.n	8004942 <HAL_ADC_ConfigChannel+0x26a>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	0e9b      	lsrs	r3, r3, #26
 800493c:	f003 031f 	and.w	r3, r3, #31
 8004940:	e018      	b.n	8004974 <HAL_ADC_ConfigChannel+0x29c>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800495a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800495e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8004966:	2320      	movs	r3, #32
 8004968:	e004      	b.n	8004974 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800496a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800496e:	fab3 f383 	clz	r3, r3
 8004972:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004974:	429a      	cmp	r2, r3
 8004976:	d106      	bne.n	8004986 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2200      	movs	r2, #0
 800497e:	2101      	movs	r1, #1
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fb0d 	bl	8003fa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2102      	movs	r1, #2
 800498c:	4618      	mov	r0, r3
 800498e:	f7ff faf1 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 8004992:	4603      	mov	r3, r0
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x2da>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2102      	movs	r1, #2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fae6 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 80049a8:	4603      	mov	r3, r0
 80049aa:	0e9b      	lsrs	r3, r3, #26
 80049ac:	f003 021f 	and.w	r2, r3, #31
 80049b0:	e01e      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x318>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2102      	movs	r1, #2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fadb 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 80049be:	4603      	mov	r3, r0
 80049c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80049d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80049d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80049e0:	2320      	movs	r3, #32
 80049e2:	e004      	b.n	80049ee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80049e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049e8:	fab3 f383 	clz	r3, r3
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x330>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	0e9b      	lsrs	r3, r3, #26
 8004a02:	f003 031f 	and.w	r3, r3, #31
 8004a06:	e014      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x35a>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a10:	fa93 f3a3 	rbit	r3, r3
 8004a14:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004a16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004a1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004a24:	2320      	movs	r3, #32
 8004a26:	e004      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004a28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a2c:	fab3 f383 	clz	r3, r3
 8004a30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d106      	bne.n	8004a44 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff faae 	bl	8003fa0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2103      	movs	r1, #3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fa92 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x398>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2103      	movs	r1, #3
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fa87 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 8004a66:	4603      	mov	r3, r0
 8004a68:	0e9b      	lsrs	r3, r3, #26
 8004a6a:	f003 021f 	and.w	r2, r3, #31
 8004a6e:	e017      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x3c8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2103      	movs	r1, #3
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff fa7c 	bl	8003f74 <LL_ADC_GetOffsetChannel>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a82:	fa93 f3a3 	rbit	r3, r3
 8004a86:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004a8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8004a92:	2320      	movs	r3, #32
 8004a94:	e003      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8004a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a98:	fab3 f383 	clz	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d105      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x3e0>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0e9b      	lsrs	r3, r3, #26
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	e011      	b.n	8004adc <HAL_ADC_ConfigChannel+0x404>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ac0:	fa93 f3a3 	rbit	r3, r3
 8004ac4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	e003      	b.n	8004adc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004ad4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ad6:	fab3 f383 	clz	r3, r3
 8004ada:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d106      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2103      	movs	r1, #3
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff fa59 	bl	8003fa0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fb60 	bl	80041b8 <LL_ADC_IsEnabled>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 8140 	bne.w	8004d80 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	6819      	ldr	r1, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f7ff facd 	bl	80040ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	4a8f      	ldr	r2, [pc, #572]	; (8004d54 <HAL_ADC_ConfigChannel+0x67c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	f040 8131 	bne.w	8004d80 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x46e>
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	0e9b      	lsrs	r3, r3, #26
 8004b34:	3301      	adds	r3, #1
 8004b36:	f003 031f 	and.w	r3, r3, #31
 8004b3a:	2b09      	cmp	r3, #9
 8004b3c:	bf94      	ite	ls
 8004b3e:	2301      	movls	r3, #1
 8004b40:	2300      	movhi	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	e019      	b.n	8004b7a <HAL_ADC_ConfigChannel+0x4a2>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b4e:	fa93 f3a3 	rbit	r3, r3
 8004b52:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b56:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8004b5e:	2320      	movs	r3, #32
 8004b60:	e003      	b.n	8004b6a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b64:	fab3 f383 	clz	r3, r3
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2b09      	cmp	r3, #9
 8004b72:	bf94      	ite	ls
 8004b74:	2301      	movls	r3, #1
 8004b76:	2300      	movhi	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d079      	beq.n	8004c72 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x4c2>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	0e9b      	lsrs	r3, r3, #26
 8004b90:	3301      	adds	r3, #1
 8004b92:	069b      	lsls	r3, r3, #26
 8004b94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b98:	e015      	b.n	8004bc6 <HAL_ADC_ConfigChannel+0x4ee>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba2:	fa93 f3a3 	rbit	r3, r3
 8004ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004baa:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	e003      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8004bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb8:	fab3 f383 	clz	r3, r3
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	069b      	lsls	r3, r3, #26
 8004bc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x50e>
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	0e9b      	lsrs	r3, r3, #26
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2101      	movs	r1, #1
 8004be0:	fa01 f303 	lsl.w	r3, r1, r3
 8004be4:	e017      	b.n	8004c16 <HAL_ADC_ConfigChannel+0x53e>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf6:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	e003      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8004c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	2101      	movs	r1, #1
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	ea42 0103 	orr.w	r1, r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x564>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	0e9b      	lsrs	r3, r3, #26
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f003 021f 	and.w	r2, r3, #31
 8004c32:	4613      	mov	r3, r2
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	4413      	add	r3, r2
 8004c38:	051b      	lsls	r3, r3, #20
 8004c3a:	e018      	b.n	8004c6e <HAL_ADC_ConfigChannel+0x596>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004c54:	2320      	movs	r3, #32
 8004c56:	e003      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	fab3 f383 	clz	r3, r3
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	3301      	adds	r3, #1
 8004c62:	f003 021f 	and.w	r2, r3, #31
 8004c66:	4613      	mov	r3, r2
 8004c68:	005b      	lsls	r3, r3, #1
 8004c6a:	4413      	add	r3, r2
 8004c6c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	e081      	b.n	8004d76 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x5b6>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	0e9b      	lsrs	r3, r3, #26
 8004c84:	3301      	adds	r3, #1
 8004c86:	069b      	lsls	r3, r3, #26
 8004c88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c8c:	e015      	b.n	8004cba <HAL_ADC_ConfigChannel+0x5e2>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	fa93 f3a3 	rbit	r3, r3
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8004ca6:	2320      	movs	r3, #32
 8004ca8:	e003      	b.n	8004cb2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8004caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cac:	fab3 f383 	clz	r3, r3
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	069b      	lsls	r3, r3, #26
 8004cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d109      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x602>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	0e9b      	lsrs	r3, r3, #26
 8004ccc:	3301      	adds	r3, #1
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd8:	e017      	b.n	8004d0a <HAL_ADC_ConfigChannel+0x632>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	fa93 f3a3 	rbit	r3, r3
 8004ce6:	61bb      	str	r3, [r7, #24]
  return result;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8004cf2:	2320      	movs	r3, #32
 8004cf4:	e003      	b.n	8004cfe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	fab3 f383 	clz	r3, r3
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	2101      	movs	r1, #1
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	ea42 0103 	orr.w	r1, r2, r3
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10d      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x65e>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	0e9b      	lsrs	r3, r3, #26
 8004d20:	3301      	adds	r3, #1
 8004d22:	f003 021f 	and.w	r2, r3, #31
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	3b1e      	subs	r3, #30
 8004d2e:	051b      	lsls	r3, r3, #20
 8004d30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d34:	e01e      	b.n	8004d74 <HAL_ADC_ConfigChannel+0x69c>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	fa93 f3a3 	rbit	r3, r3
 8004d42:	60fb      	str	r3, [r7, #12]
  return result;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d104      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8004d4e:	2320      	movs	r3, #32
 8004d50:	e006      	b.n	8004d60 <HAL_ADC_ConfigChannel+0x688>
 8004d52:	bf00      	nop
 8004d54:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fab3 f383 	clz	r3, r3
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	3301      	adds	r3, #1
 8004d62:	f003 021f 	and.w	r2, r3, #31
 8004d66:	4613      	mov	r3, r2
 8004d68:	005b      	lsls	r3, r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3b1e      	subs	r3, #30
 8004d6e:	051b      	lsls	r3, r3, #20
 8004d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d74:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	f7ff f96a 	bl	8004054 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b3d      	ldr	r3, [pc, #244]	; (8004e7c <HAL_ADC_ConfigChannel+0x7a4>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d06c      	beq.n	8004e66 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d8c:	483c      	ldr	r0, [pc, #240]	; (8004e80 <HAL_ADC_ConfigChannel+0x7a8>)
 8004d8e:	f7ff f8bf 	bl	8003f10 <LL_ADC_GetCommonPathInternalCh>
 8004d92:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a3a      	ldr	r2, [pc, #232]	; (8004e84 <HAL_ADC_ConfigChannel+0x7ac>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d127      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004da0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d121      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a35      	ldr	r2, [pc, #212]	; (8004e88 <HAL_ADC_ConfigChannel+0x7b0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d157      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004db6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	482f      	ldr	r0, [pc, #188]	; (8004e80 <HAL_ADC_ConfigChannel+0x7a8>)
 8004dc2:	f7ff f892 	bl	8003eea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <HAL_ADC_ConfigChannel+0x7b4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	099b      	lsrs	r3, r3, #6
 8004dcc:	4a30      	ldr	r2, [pc, #192]	; (8004e90 <HAL_ADC_ConfigChannel+0x7b8>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	099b      	lsrs	r3, r3, #6
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004de0:	e002      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f9      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dee:	e03a      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a27      	ldr	r2, [pc, #156]	; (8004e94 <HAL_ADC_ConfigChannel+0x7bc>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d113      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004dfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10d      	bne.n	8004e22 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a1f      	ldr	r2, [pc, #124]	; (8004e88 <HAL_ADC_ConfigChannel+0x7b0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d12a      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4819      	ldr	r0, [pc, #100]	; (8004e80 <HAL_ADC_ConfigChannel+0x7a8>)
 8004e1c:	f7ff f865 	bl	8003eea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e20:	e021      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1c      	ldr	r2, [pc, #112]	; (8004e98 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d11c      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d116      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a12      	ldr	r2, [pc, #72]	; (8004e88 <HAL_ADC_ConfigChannel+0x7b0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d111      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	480c      	ldr	r0, [pc, #48]	; (8004e80 <HAL_ADC_ConfigChannel+0x7a8>)
 8004e4e:	f7ff f84c 	bl	8003eea <LL_ADC_SetCommonPathInternalCh>
 8004e52:	e008      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e58:	f043 0220 	orr.w	r2, r3, #32
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	37d8      	adds	r7, #216	; 0xd8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	80080000 	.word	0x80080000
 8004e80:	50040300 	.word	0x50040300
 8004e84:	c7520000 	.word	0xc7520000
 8004e88:	50040000 	.word	0x50040000
 8004e8c:	20000018 	.word	0x20000018
 8004e90:	053e2d63 	.word	0x053e2d63
 8004e94:	cb840000 	.word	0xcb840000
 8004e98:	80000001 	.word	0x80000001

08004e9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff f983 	bl	80041b8 <LL_ADC_IsEnabled>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d169      	bne.n	8004f8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <ADC_Enable+0xfc>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00d      	beq.n	8004ee2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eca:	f043 0210 	orr.w	r2, r3, #16
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed6:	f043 0201 	orr.w	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e055      	b.n	8004f8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff f952 	bl	8004190 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004eec:	482b      	ldr	r0, [pc, #172]	; (8004f9c <ADC_Enable+0x100>)
 8004eee:	f7ff f80f 	bl	8003f10 <LL_ADC_GetCommonPathInternalCh>
 8004ef2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004ef4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d013      	beq.n	8004f24 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004efc:	4b28      	ldr	r3, [pc, #160]	; (8004fa0 <ADC_Enable+0x104>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	099b      	lsrs	r3, r3, #6
 8004f02:	4a28      	ldr	r2, [pc, #160]	; (8004fa4 <ADC_Enable+0x108>)
 8004f04:	fba2 2303 	umull	r2, r3, r2, r3
 8004f08:	099b      	lsrs	r3, r3, #6
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f16:	e002      	b.n	8004f1e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f9      	bne.n	8004f18 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f24:	f7fe ffc2 	bl	8003eac <HAL_GetTick>
 8004f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f2a:	e028      	b.n	8004f7e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff f941 	bl	80041b8 <LL_ADC_IsEnabled>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d104      	bne.n	8004f46 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff f925 	bl	8004190 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f46:	f7fe ffb1 	bl	8003eac <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d914      	bls.n	8004f7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d00d      	beq.n	8004f7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f043 0210 	orr.w	r2, r3, #16
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e007      	b.n	8004f8e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d1cf      	bne.n	8004f2c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	8000003f 	.word	0x8000003f
 8004f9c:	50040300 	.word	0x50040300
 8004fa0:	20000018 	.word	0x20000018
 8004fa4:	053e2d63 	.word	0x053e2d63

08004fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f003 0307 	and.w	r3, r3, #7
 8004fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fb8:	4b0c      	ldr	r3, [pc, #48]	; (8004fec <__NVIC_SetPriorityGrouping+0x44>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fda:	4a04      	ldr	r2, [pc, #16]	; (8004fec <__NVIC_SetPriorityGrouping+0x44>)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	60d3      	str	r3, [r2, #12]
}
 8004fe0:	bf00      	nop
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	e000ed00 	.word	0xe000ed00

08004ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ff4:	4b04      	ldr	r3, [pc, #16]	; (8005008 <__NVIC_GetPriorityGrouping+0x18>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	0a1b      	lsrs	r3, r3, #8
 8004ffa:	f003 0307 	and.w	r3, r3, #7
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501a:	2b00      	cmp	r3, #0
 800501c:	db0b      	blt.n	8005036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	f003 021f 	and.w	r2, r3, #31
 8005024:	4907      	ldr	r1, [pc, #28]	; (8005044 <__NVIC_EnableIRQ+0x38>)
 8005026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	2001      	movs	r0, #1
 800502e:	fa00 f202 	lsl.w	r2, r0, r2
 8005032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	e000e100 	.word	0xe000e100

08005048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	4603      	mov	r3, r0
 8005050:	6039      	str	r1, [r7, #0]
 8005052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005058:	2b00      	cmp	r3, #0
 800505a:	db0a      	blt.n	8005072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	b2da      	uxtb	r2, r3
 8005060:	490c      	ldr	r1, [pc, #48]	; (8005094 <__NVIC_SetPriority+0x4c>)
 8005062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005066:	0112      	lsls	r2, r2, #4
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	440b      	add	r3, r1
 800506c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005070:	e00a      	b.n	8005088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4908      	ldr	r1, [pc, #32]	; (8005098 <__NVIC_SetPriority+0x50>)
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	f003 030f 	and.w	r3, r3, #15
 800507e:	3b04      	subs	r3, #4
 8005080:	0112      	lsls	r2, r2, #4
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	440b      	add	r3, r1
 8005086:	761a      	strb	r2, [r3, #24]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	e000e100 	.word	0xe000e100
 8005098:	e000ed00 	.word	0xe000ed00

0800509c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800509c:	b480      	push	{r7}
 800509e:	b089      	sub	sp, #36	; 0x24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f1c3 0307 	rsb	r3, r3, #7
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	bf28      	it	cs
 80050ba:	2304      	movcs	r3, #4
 80050bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	3304      	adds	r3, #4
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d902      	bls.n	80050cc <NVIC_EncodePriority+0x30>
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3b03      	subs	r3, #3
 80050ca:	e000      	b.n	80050ce <NVIC_EncodePriority+0x32>
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43da      	mvns	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	401a      	ands	r2, r3
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	43d9      	mvns	r1, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f4:	4313      	orrs	r3, r2
         );
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3724      	adds	r7, #36	; 0x24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3b01      	subs	r3, #1
 8005110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005114:	d301      	bcc.n	800511a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005116:	2301      	movs	r3, #1
 8005118:	e00f      	b.n	800513a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800511a:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <SysTick_Config+0x40>)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	3b01      	subs	r3, #1
 8005120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005122:	210f      	movs	r1, #15
 8005124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005128:	f7ff ff8e 	bl	8005048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800512c:	4b05      	ldr	r3, [pc, #20]	; (8005144 <SysTick_Config+0x40>)
 800512e:	2200      	movs	r2, #0
 8005130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <SysTick_Config+0x40>)
 8005134:	2207      	movs	r2, #7
 8005136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	e000e010 	.word	0xe000e010

08005148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff29 	bl	8004fa8 <__NVIC_SetPriorityGrouping>
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	4603      	mov	r3, r0
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
 800516a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005170:	f7ff ff3e 	bl	8004ff0 <__NVIC_GetPriorityGrouping>
 8005174:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	6978      	ldr	r0, [r7, #20]
 800517c:	f7ff ff8e 	bl	800509c <NVIC_EncodePriority>
 8005180:	4602      	mov	r2, r0
 8005182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff ff5d 	bl	8005048 <__NVIC_SetPriority>
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	4603      	mov	r3, r0
 800519e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7ff ff31 	bl	800500c <__NVIC_EnableIRQ>
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7ff ffa2 	bl	8005104 <SysTick_Config>
 80051c0:	4603      	mov	r3, r0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b086      	sub	sp, #24
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_DMA_Start_IT+0x20>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e04b      	b.n	8005282 <HAL_DMA_Start_IT+0xb8>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d13a      	bne.n	8005274 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2202      	movs	r2, #2
 8005202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0201 	bic.w	r2, r2, #1
 800521a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 f831 	bl	800528a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 020e 	orr.w	r2, r2, #14
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	e00f      	b.n	8005262 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0204 	bic.w	r2, r2, #4
 8005250:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f042 020a 	orr.w	r2, r2, #10
 8005260:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e005      	b.n	8005280 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800527c:	2302      	movs	r3, #2
 800527e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005280:	7dfb      	ldrb	r3, [r7, #23]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	60f8      	str	r0, [r7, #12]
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	607a      	str	r2, [r7, #4]
 8005296:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	f003 021c 	and.w	r2, r3, #28
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a4:	2101      	movs	r1, #1
 80052a6:	fa01 f202 	lsl.w	r2, r1, r2
 80052aa:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d108      	bne.n	80052ce <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80052cc:	e007      	b.n	80052de <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	60da      	str	r2, [r3, #12]
}
 80052de:	bf00      	nop
 80052e0:	3714      	adds	r7, #20
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
	...

080052ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052f6:	2300      	movs	r3, #0
 80052f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052fa:	e148      	b.n	800558e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2101      	movs	r1, #1
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	4013      	ands	r3, r2
 800530a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 813a 	beq.w	8005588 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f003 0303 	and.w	r3, r3, #3
 800531c:	2b01      	cmp	r3, #1
 800531e:	d005      	beq.n	800532c <HAL_GPIO_Init+0x40>
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d130      	bne.n	800538e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	2203      	movs	r2, #3
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4013      	ands	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005362:	2201      	movs	r2, #1
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	43db      	mvns	r3, r3
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	f003 0201 	and.w	r2, r3, #1
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	fa02 f303 	lsl.w	r3, r2, r3
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0303 	and.w	r3, r3, #3
 8005396:	2b03      	cmp	r3, #3
 8005398:	d017      	beq.n	80053ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2203      	movs	r2, #3
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4013      	ands	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d123      	bne.n	800541e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	08da      	lsrs	r2, r3, #3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3208      	adds	r2, #8
 80053de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	220f      	movs	r2, #15
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4013      	ands	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	fa02 f303 	lsl.w	r3, r2, r3
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	08da      	lsrs	r2, r3, #3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3208      	adds	r2, #8
 8005418:	6939      	ldr	r1, [r7, #16]
 800541a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	2203      	movs	r2, #3
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 0203 	and.w	r2, r3, #3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8094 	beq.w	8005588 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005460:	4b52      	ldr	r3, [pc, #328]	; (80055ac <HAL_GPIO_Init+0x2c0>)
 8005462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005464:	4a51      	ldr	r2, [pc, #324]	; (80055ac <HAL_GPIO_Init+0x2c0>)
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6613      	str	r3, [r2, #96]	; 0x60
 800546c:	4b4f      	ldr	r3, [pc, #316]	; (80055ac <HAL_GPIO_Init+0x2c0>)
 800546e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005478:	4a4d      	ldr	r2, [pc, #308]	; (80055b0 <HAL_GPIO_Init+0x2c4>)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	089b      	lsrs	r3, r3, #2
 800547e:	3302      	adds	r3, #2
 8005480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005484:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	220f      	movs	r2, #15
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43db      	mvns	r3, r3
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4013      	ands	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054a2:	d00d      	beq.n	80054c0 <HAL_GPIO_Init+0x1d4>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a43      	ldr	r2, [pc, #268]	; (80055b4 <HAL_GPIO_Init+0x2c8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <HAL_GPIO_Init+0x1d0>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a42      	ldr	r2, [pc, #264]	; (80055b8 <HAL_GPIO_Init+0x2cc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d101      	bne.n	80054b8 <HAL_GPIO_Init+0x1cc>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e004      	b.n	80054c2 <HAL_GPIO_Init+0x1d6>
 80054b8:	2307      	movs	r3, #7
 80054ba:	e002      	b.n	80054c2 <HAL_GPIO_Init+0x1d6>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <HAL_GPIO_Init+0x1d6>
 80054c0:	2300      	movs	r3, #0
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	f002 0203 	and.w	r2, r2, #3
 80054c8:	0092      	lsls	r2, r2, #2
 80054ca:	4093      	lsls	r3, r2
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054d2:	4937      	ldr	r1, [pc, #220]	; (80055b0 <HAL_GPIO_Init+0x2c4>)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	3302      	adds	r3, #2
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054e0:	4b36      	ldr	r3, [pc, #216]	; (80055bc <HAL_GPIO_Init+0x2d0>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4013      	ands	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005504:	4a2d      	ldr	r2, [pc, #180]	; (80055bc <HAL_GPIO_Init+0x2d0>)
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800550a:	4b2c      	ldr	r3, [pc, #176]	; (80055bc <HAL_GPIO_Init+0x2d0>)
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	43db      	mvns	r3, r3
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4013      	ands	r3, r2
 8005518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800552e:	4a23      	ldr	r2, [pc, #140]	; (80055bc <HAL_GPIO_Init+0x2d0>)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005534:	4b21      	ldr	r3, [pc, #132]	; (80055bc <HAL_GPIO_Init+0x2d0>)
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	43db      	mvns	r3, r3
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4013      	ands	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_GPIO_Init+0x2d0>)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800555e:	4b17      	ldr	r3, [pc, #92]	; (80055bc <HAL_GPIO_Init+0x2d0>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	43db      	mvns	r3, r3
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4013      	ands	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d003      	beq.n	8005582 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005582:	4a0e      	ldr	r2, [pc, #56]	; (80055bc <HAL_GPIO_Init+0x2d0>)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	3301      	adds	r3, #1
 800558c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	f47f aeaf 	bne.w	80052fc <HAL_GPIO_Init+0x10>
  }
}
 800559e:	bf00      	nop
 80055a0:	bf00      	nop
 80055a2:	371c      	adds	r7, #28
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40010000 	.word	0x40010000
 80055b4:	48000400 	.word	0x48000400
 80055b8:	48000800 	.word	0x48000800
 80055bc:	40010400 	.word	0x40010400

080055c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	807b      	strh	r3, [r7, #2]
 80055cc:	4613      	mov	r3, r2
 80055ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055d0:	787b      	ldrb	r3, [r7, #1]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055d6:	887a      	ldrh	r2, [r7, #2]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055dc:	e002      	b.n	80055e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055de:	887a      	ldrh	r2, [r7, #2]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	4603      	mov	r3, r0
 80055f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055fa:	4b08      	ldr	r3, [pc, #32]	; (800561c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	4013      	ands	r3, r2
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005606:	4a05      	ldr	r2, [pc, #20]	; (800561c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005608:	88fb      	ldrh	r3, [r7, #6]
 800560a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f806 	bl	8005620 <HAL_GPIO_EXTI_Callback>
  }
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40010400 	.word	0x40010400

08005620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800562a:	bf00      	nop
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e08d      	b.n	8005764 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d106      	bne.n	8005662 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7fd f9ff 	bl	8002a60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2224      	movs	r2, #36	; 0x24
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005686:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005696:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d107      	bne.n	80056b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056ac:	609a      	str	r2, [r3, #8]
 80056ae:	e006      	b.n	80056be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d108      	bne.n	80056d8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d4:	605a      	str	r2, [r3, #4]
 80056d6:	e007      	b.n	80056e8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6812      	ldr	r2, [r2, #0]
 80056f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800570a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69d9      	ldr	r1, [r3, #28]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1a      	ldr	r2, [r3, #32]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	461a      	mov	r2, r3
 8005778:	460b      	mov	r3, r1
 800577a:	817b      	strh	r3, [r7, #10]
 800577c:	4613      	mov	r3, r2
 800577e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b20      	cmp	r3, #32
 800578a:	f040 80fd 	bne.w	8005988 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_I2C_Master_Transmit+0x30>
 8005798:	2302      	movs	r3, #2
 800579a:	e0f6      	b.n	800598a <HAL_I2C_Master_Transmit+0x21e>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057a4:	f7fe fb82 	bl	8003eac <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	9300      	str	r3, [sp, #0]
 80057ae:	2319      	movs	r3, #25
 80057b0:	2201      	movs	r2, #1
 80057b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f000 fa0a 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d001      	beq.n	80057c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e0e1      	b.n	800598a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2221      	movs	r2, #33	; 0x21
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2210      	movs	r2, #16
 80057d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	893a      	ldrh	r2, [r7, #8]
 80057e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2bff      	cmp	r3, #255	; 0xff
 80057f6:	d906      	bls.n	8005806 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	22ff      	movs	r2, #255	; 0xff
 80057fc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80057fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e007      	b.n	8005816 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005810:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005814:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d024      	beq.n	8005868 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	781a      	ldrb	r2, [r3, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29b      	uxth	r3, r3
 800583a:	3b01      	subs	r3, #1
 800583c:	b29a      	uxth	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005846:	3b01      	subs	r3, #1
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005852:	b2db      	uxtb	r3, r3
 8005854:	3301      	adds	r3, #1
 8005856:	b2da      	uxtb	r2, r3
 8005858:	8979      	ldrh	r1, [r7, #10]
 800585a:	4b4e      	ldr	r3, [pc, #312]	; (8005994 <HAL_I2C_Master_Transmit+0x228>)
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 fbf1 	bl	8006048 <I2C_TransferConfig>
 8005866:	e066      	b.n	8005936 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586c:	b2da      	uxtb	r2, r3
 800586e:	8979      	ldrh	r1, [r7, #10]
 8005870:	4b48      	ldr	r3, [pc, #288]	; (8005994 <HAL_I2C_Master_Transmit+0x228>)
 8005872:	9300      	str	r3, [sp, #0]
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 fbe6 	bl	8006048 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800587c:	e05b      	b.n	8005936 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	6a39      	ldr	r1, [r7, #32]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f9f3 	bl	8005c6e <I2C_WaitOnTXISFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e07b      	b.n	800598a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d034      	beq.n	8005936 <HAL_I2C_Master_Transmit+0x1ca>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d130      	bne.n	8005936 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2200      	movs	r2, #0
 80058dc:	2180      	movs	r1, #128	; 0x80
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f976 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e04d      	b.n	800598a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2bff      	cmp	r3, #255	; 0xff
 80058f6:	d90e      	bls.n	8005916 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	22ff      	movs	r2, #255	; 0xff
 80058fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005902:	b2da      	uxtb	r2, r3
 8005904:	8979      	ldrh	r1, [r7, #10]
 8005906:	2300      	movs	r3, #0
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 fb9a 	bl	8006048 <I2C_TransferConfig>
 8005914:	e00f      	b.n	8005936 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005924:	b2da      	uxtb	r2, r3
 8005926:	8979      	ldrh	r1, [r7, #10]
 8005928:	2300      	movs	r3, #0
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fb89 	bl	8006048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d19e      	bne.n	800587e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	6a39      	ldr	r1, [r7, #32]
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f9d9 	bl	8005cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e01a      	b.n	800598a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2220      	movs	r2, #32
 800595a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <HAL_I2C_Master_Transmit+0x22c>)
 8005968:	400b      	ands	r3, r1
 800596a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005984:	2300      	movs	r3, #0
 8005986:	e000      	b.n	800598a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005988:	2302      	movs	r3, #2
  }
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	80002000 	.word	0x80002000
 8005998:	fe00e800 	.word	0xfe00e800

0800599c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af02      	add	r7, sp, #8
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	461a      	mov	r2, r3
 80059a8:	460b      	mov	r3, r1
 80059aa:	817b      	strh	r3, [r7, #10]
 80059ac:	4613      	mov	r3, r2
 80059ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	f040 80db 	bne.w	8005b74 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d101      	bne.n	80059cc <HAL_I2C_Master_Receive+0x30>
 80059c8:	2302      	movs	r3, #2
 80059ca:	e0d4      	b.n	8005b76 <HAL_I2C_Master_Receive+0x1da>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059d4:	f7fe fa6a 	bl	8003eac <HAL_GetTick>
 80059d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	2319      	movs	r3, #25
 80059e0:	2201      	movs	r2, #1
 80059e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 f8f2 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0bf      	b.n	8005b76 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2222      	movs	r2, #34	; 0x22
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2210      	movs	r2, #16
 8005a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	893a      	ldrh	r2, [r7, #8]
 8005a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2bff      	cmp	r3, #255	; 0xff
 8005a26:	d90e      	bls.n	8005a46 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	22ff      	movs	r2, #255	; 0xff
 8005a2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	8979      	ldrh	r1, [r7, #10]
 8005a36:	4b52      	ldr	r3, [pc, #328]	; (8005b80 <HAL_I2C_Master_Receive+0x1e4>)
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fb02 	bl	8006048 <I2C_TransferConfig>
 8005a44:	e06d      	b.n	8005b22 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	8979      	ldrh	r1, [r7, #10]
 8005a58:	4b49      	ldr	r3, [pc, #292]	; (8005b80 <HAL_I2C_Master_Receive+0x1e4>)
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 faf1 	bl	8006048 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005a66:	e05c      	b.n	8005b22 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	6a39      	ldr	r1, [r7, #32]
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f989 	bl	8005d84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e07c      	b.n	8005b76 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d034      	beq.n	8005b22 <HAL_I2C_Master_Receive+0x186>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d130      	bne.n	8005b22 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f880 	bl	8005bd0 <I2C_WaitOnFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e04d      	b.n	8005b76 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2bff      	cmp	r3, #255	; 0xff
 8005ae2:	d90e      	bls.n	8005b02 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	22ff      	movs	r2, #255	; 0xff
 8005ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	8979      	ldrh	r1, [r7, #10]
 8005af2:	2300      	movs	r3, #0
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 faa4 	bl	8006048 <I2C_TransferConfig>
 8005b00:	e00f      	b.n	8005b22 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	8979      	ldrh	r1, [r7, #10]
 8005b14:	2300      	movs	r3, #0
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 fa93 	bl	8006048 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d19d      	bne.n	8005a68 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	6a39      	ldr	r1, [r7, #32]
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f8e3 	bl	8005cfc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e01a      	b.n	8005b76 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2220      	movs	r2, #32
 8005b46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6859      	ldr	r1, [r3, #4]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <HAL_I2C_Master_Receive+0x1e8>)
 8005b54:	400b      	ands	r3, r1
 8005b56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e000      	b.n	8005b76 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
  }
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3718      	adds	r7, #24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	80002400 	.word	0x80002400
 8005b84:	fe00e800 	.word	0xfe00e800

08005b88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d103      	bne.n	8005ba6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	699b      	ldr	r3, [r3, #24]
 8005bac:	f003 0301 	and.w	r3, r3, #1
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d007      	beq.n	8005bc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	699a      	ldr	r2, [r3, #24]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f042 0201 	orr.w	r2, r2, #1
 8005bc2:	619a      	str	r2, [r3, #24]
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	603b      	str	r3, [r7, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005be0:	e031      	b.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be8:	d02d      	beq.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bea:	f7fe f95f 	bl	8003eac <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d302      	bcc.n	8005c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d122      	bne.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	bf0c      	ite	eq
 8005c10:	2301      	moveq	r3, #1
 8005c12:	2300      	movne	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	461a      	mov	r2, r3
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d113      	bne.n	8005c46 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e00f      	b.n	8005c66 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699a      	ldr	r2, [r3, #24]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	bf0c      	ite	eq
 8005c56:	2301      	moveq	r3, #1
 8005c58:	2300      	movne	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d0be      	beq.n	8005be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b084      	sub	sp, #16
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	60b9      	str	r1, [r7, #8]
 8005c78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c7a:	e033      	b.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f000 f901 	bl	8005e88 <I2C_IsErrorOccurred>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e031      	b.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c96:	d025      	beq.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c98:	f7fe f908 	bl	8003eac <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d11a      	bne.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d013      	beq.n	8005ce4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc0:	f043 0220 	orr.w	r2, r3, #32
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e007      	b.n	8005cf4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d1c4      	bne.n	8005c7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d08:	e02f      	b.n	8005d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f000 f8ba 	bl	8005e88 <I2C_IsErrorOccurred>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d001      	beq.n	8005d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e02d      	b.n	8005d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d1e:	f7fe f8c5 	bl	8003eac <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d302      	bcc.n	8005d34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d11a      	bne.n	8005d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	f003 0320 	and.w	r3, r3, #32
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d013      	beq.n	8005d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e007      	b.n	8005d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b20      	cmp	r3, #32
 8005d76:	d1c8      	bne.n	8005d0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d90:	e06b      	b.n	8005e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 f876 	bl	8005e88 <I2C_IsErrorOccurred>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d001      	beq.n	8005da6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e069      	b.n	8005e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d138      	bne.n	8005e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	d105      	bne.n	8005dce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e055      	b.n	8005e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	f003 0310 	and.w	r3, r3, #16
 8005dd8:	2b10      	cmp	r3, #16
 8005dda:	d107      	bne.n	8005dec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2210      	movs	r2, #16
 8005de2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2204      	movs	r2, #4
 8005de8:	645a      	str	r2, [r3, #68]	; 0x44
 8005dea:	e002      	b.n	8005df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2220      	movs	r2, #32
 8005df8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6859      	ldr	r1, [r3, #4]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4b1f      	ldr	r3, [pc, #124]	; (8005e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005e06:	400b      	ands	r3, r1
 8005e08:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e029      	b.n	8005e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e26:	f7fe f841 	bl	8003eac <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d116      	bne.n	8005e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d00f      	beq.n	8005e6a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4e:	f043 0220 	orr.w	r2, r3, #32
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e007      	b.n	8005e7a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d18c      	bne.n	8005d92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	fe00e800 	.word	0xfe00e800

08005e88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08a      	sub	sp, #40	; 0x28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d068      	beq.n	8005f86 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2210      	movs	r2, #16
 8005eba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005ebc:	e049      	b.n	8005f52 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec4:	d045      	beq.n	8005f52 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005ec6:	f7fd fff1 	bl	8003eac <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d302      	bcc.n	8005edc <I2C_IsErrorOccurred+0x54>
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d13a      	bne.n	8005f52 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005eee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005efe:	d121      	bne.n	8005f44 <I2C_IsErrorOccurred+0xbc>
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f06:	d01d      	beq.n	8005f44 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f08:	7cfb      	ldrb	r3, [r7, #19]
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d01a      	beq.n	8005f44 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f1c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f1e:	f7fd ffc5 	bl	8003eac <HAL_GetTick>
 8005f22:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f24:	e00e      	b.n	8005f44 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f26:	f7fd ffc1 	bl	8003eac <HAL_GetTick>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	1ad3      	subs	r3, r2, r3
 8005f30:	2b19      	cmp	r3, #25
 8005f32:	d907      	bls.n	8005f44 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	f043 0320 	orr.w	r3, r3, #32
 8005f3a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005f42:	e006      	b.n	8005f52 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d1e9      	bne.n	8005f26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d003      	beq.n	8005f68 <I2C_IsErrorOccurred+0xe0>
 8005f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0aa      	beq.n	8005ebe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005f68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2220      	movs	r2, #32
 8005f76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	f043 0304 	orr.w	r3, r3, #4
 8005f7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00b      	beq.n	8005fb0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	f043 0301 	orr.w	r3, r3, #1
 8005f9e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fa8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00b      	beq.n	8005fd2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	f043 0308 	orr.w	r3, r3, #8
 8005fc0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	f043 0302 	orr.w	r3, r3, #2
 8005fe2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01c      	beq.n	8006036 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff fdc3 	bl	8005b88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6859      	ldr	r1, [r3, #4]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <I2C_IsErrorOccurred+0x1bc>)
 800600e:	400b      	ands	r3, r1
 8006010:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	431a      	orrs	r2, r3
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006036:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800603a:	4618      	mov	r0, r3
 800603c:	3728      	adds	r7, #40	; 0x28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	fe00e800 	.word	0xfe00e800

08006048 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	817b      	strh	r3, [r7, #10]
 8006056:	4613      	mov	r3, r2
 8006058:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800605a:	897b      	ldrh	r3, [r7, #10]
 800605c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006060:	7a7b      	ldrb	r3, [r7, #9]
 8006062:	041b      	lsls	r3, r3, #16
 8006064:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006068:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800606e:	6a3b      	ldr	r3, [r7, #32]
 8006070:	4313      	orrs	r3, r2
 8006072:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006076:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	0d5b      	lsrs	r3, r3, #21
 8006082:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <I2C_TransferConfig+0x60>)
 8006088:	430b      	orrs	r3, r1
 800608a:	43db      	mvns	r3, r3
 800608c:	ea02 0103 	and.w	r1, r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	430a      	orrs	r2, r1
 8006098:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	03ff63ff 	.word	0x03ff63ff

080060ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b20      	cmp	r3, #32
 80060c0:	d138      	bne.n	8006134 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e032      	b.n	8006136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2224      	movs	r2, #36	; 0x24
 80060dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0201 	bic.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6819      	ldr	r1, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2220      	movs	r2, #32
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	e000      	b.n	8006136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006134:	2302      	movs	r3, #2
  }
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
 800614a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b20      	cmp	r3, #32
 8006156:	d139      	bne.n	80061cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800615e:	2b01      	cmp	r3, #1
 8006160:	d101      	bne.n	8006166 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006162:	2302      	movs	r3, #2
 8006164:	e033      	b.n	80061ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2224      	movs	r2, #36	; 0x24
 8006172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0201 	bic.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006194:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	021b      	lsls	r3, r3, #8
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0201 	orr.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e000      	b.n	80061ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80061cc:	2302      	movs	r3, #2
  }
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40007000 	.word	0x40007000

080061f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006206:	d130      	bne.n	800626a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006208:	4b23      	ldr	r3, [pc, #140]	; (8006298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006214:	d038      	beq.n	8006288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006216:	4b20      	ldr	r3, [pc, #128]	; (8006298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800621e:	4a1e      	ldr	r2, [pc, #120]	; (8006298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006224:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006226:	4b1d      	ldr	r3, [pc, #116]	; (800629c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2232      	movs	r2, #50	; 0x32
 800622c:	fb02 f303 	mul.w	r3, r2, r3
 8006230:	4a1b      	ldr	r2, [pc, #108]	; (80062a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	0c9b      	lsrs	r3, r3, #18
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800623c:	e002      	b.n	8006244 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b01      	subs	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006244:	4b14      	ldr	r3, [pc, #80]	; (8006298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800624c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006250:	d102      	bne.n	8006258 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f2      	bne.n	800623e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006258:	4b0f      	ldr	r3, [pc, #60]	; (8006298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006264:	d110      	bne.n	8006288 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e00f      	b.n	800628a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800626a:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006276:	d007      	beq.n	8006288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006278:	4b07      	ldr	r3, [pc, #28]	; (8006298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006280:	4a05      	ldr	r2, [pc, #20]	; (8006298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006286:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40007000 	.word	0x40007000
 800629c:	20000018 	.word	0x20000018
 80062a0:	431bde83 	.word	0x431bde83

080062a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f000 bc02 	b.w	8006abc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062b8:	4b96      	ldr	r3, [pc, #600]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 030c 	and.w	r3, r3, #12
 80062c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062c2:	4b94      	ldr	r3, [pc, #592]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80e4 	beq.w	80064a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <HAL_RCC_OscConfig+0x4c>
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b0c      	cmp	r3, #12
 80062e4:	f040 808b 	bne.w	80063fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	f040 8087 	bne.w	80063fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062f0:	4b88      	ldr	r3, [pc, #544]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d005      	beq.n	8006308 <HAL_RCC_OscConfig+0x64>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e3d9      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1a      	ldr	r2, [r3, #32]
 800630c:	4b81      	ldr	r3, [pc, #516]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <HAL_RCC_OscConfig+0x7e>
 8006318:	4b7e      	ldr	r3, [pc, #504]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006320:	e005      	b.n	800632e <HAL_RCC_OscConfig+0x8a>
 8006322:	4b7c      	ldr	r3, [pc, #496]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006324:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006328:	091b      	lsrs	r3, r3, #4
 800632a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800632e:	4293      	cmp	r3, r2
 8006330:	d223      	bcs.n	800637a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fd8c 	bl	8006e54 <RCC_SetFlashLatencyFromMSIRange>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e3ba      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006346:	4b73      	ldr	r3, [pc, #460]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a72      	ldr	r2, [pc, #456]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800634c:	f043 0308 	orr.w	r3, r3, #8
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	4b70      	ldr	r3, [pc, #448]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	496d      	ldr	r1, [pc, #436]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006360:	4313      	orrs	r3, r2
 8006362:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006364:	4b6b      	ldr	r3, [pc, #428]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	4968      	ldr	r1, [pc, #416]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
 8006378:	e025      	b.n	80063c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800637a:	4b66      	ldr	r3, [pc, #408]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a65      	ldr	r2, [pc, #404]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006380:	f043 0308 	orr.w	r3, r3, #8
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	4b63      	ldr	r3, [pc, #396]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	4960      	ldr	r1, [pc, #384]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006394:	4313      	orrs	r3, r2
 8006396:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006398:	4b5e      	ldr	r3, [pc, #376]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	021b      	lsls	r3, r3, #8
 80063a6:	495b      	ldr	r1, [pc, #364]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d109      	bne.n	80063c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fd4c 	bl	8006e54 <RCC_SetFlashLatencyFromMSIRange>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e37a      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063c6:	f000 fc81 	bl	8006ccc <HAL_RCC_GetSysClockFreq>
 80063ca:	4602      	mov	r2, r0
 80063cc:	4b51      	ldr	r3, [pc, #324]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	091b      	lsrs	r3, r3, #4
 80063d2:	f003 030f 	and.w	r3, r3, #15
 80063d6:	4950      	ldr	r1, [pc, #320]	; (8006518 <HAL_RCC_OscConfig+0x274>)
 80063d8:	5ccb      	ldrb	r3, [r1, r3]
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	fa22 f303 	lsr.w	r3, r2, r3
 80063e2:	4a4e      	ldr	r2, [pc, #312]	; (800651c <HAL_RCC_OscConfig+0x278>)
 80063e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80063e6:	4b4e      	ldr	r3, [pc, #312]	; (8006520 <HAL_RCC_OscConfig+0x27c>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fd fd0e 	bl	8003e0c <HAL_InitTick>
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d052      	beq.n	80064a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	e35e      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d032      	beq.n	800646c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006406:	4b43      	ldr	r3, [pc, #268]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a42      	ldr	r2, [pc, #264]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006412:	f7fd fd4b 	bl	8003eac <HAL_GetTick>
 8006416:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006418:	e008      	b.n	800642c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800641a:	f7fd fd47 	bl	8003eac <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	2b02      	cmp	r3, #2
 8006426:	d901      	bls.n	800642c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e347      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800642c:	4b39      	ldr	r3, [pc, #228]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0302 	and.w	r3, r3, #2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0f0      	beq.n	800641a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006438:	4b36      	ldr	r3, [pc, #216]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a35      	ldr	r2, [pc, #212]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800643e:	f043 0308 	orr.w	r3, r3, #8
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b33      	ldr	r3, [pc, #204]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a1b      	ldr	r3, [r3, #32]
 8006450:	4930      	ldr	r1, [pc, #192]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006452:	4313      	orrs	r3, r2
 8006454:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006456:	4b2f      	ldr	r3, [pc, #188]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	492b      	ldr	r1, [pc, #172]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006466:	4313      	orrs	r3, r2
 8006468:	604b      	str	r3, [r1, #4]
 800646a:	e01a      	b.n	80064a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800646c:	4b29      	ldr	r3, [pc, #164]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a28      	ldr	r2, [pc, #160]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006472:	f023 0301 	bic.w	r3, r3, #1
 8006476:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006478:	f7fd fd18 	bl	8003eac <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006480:	f7fd fd14 	bl	8003eac <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e314      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006492:	4b20      	ldr	r3, [pc, #128]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0x1dc>
 800649e:	e000      	b.n	80064a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d073      	beq.n	8006596 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d005      	beq.n	80064c0 <HAL_RCC_OscConfig+0x21c>
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b0c      	cmp	r3, #12
 80064b8:	d10e      	bne.n	80064d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d10b      	bne.n	80064d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c0:	4b14      	ldr	r3, [pc, #80]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d063      	beq.n	8006594 <HAL_RCC_OscConfig+0x2f0>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d15f      	bne.n	8006594 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e2f1      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e0:	d106      	bne.n	80064f0 <HAL_RCC_OscConfig+0x24c>
 80064e2:	4b0c      	ldr	r3, [pc, #48]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a0b      	ldr	r2, [pc, #44]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 80064e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	e025      	b.n	800653c <HAL_RCC_OscConfig+0x298>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064f8:	d114      	bne.n	8006524 <HAL_RCC_OscConfig+0x280>
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a05      	ldr	r2, [pc, #20]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	4b03      	ldr	r3, [pc, #12]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a02      	ldr	r2, [pc, #8]	; (8006514 <HAL_RCC_OscConfig+0x270>)
 800650c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006510:	6013      	str	r3, [r2, #0]
 8006512:	e013      	b.n	800653c <HAL_RCC_OscConfig+0x298>
 8006514:	40021000 	.word	0x40021000
 8006518:	0800ff2c 	.word	0x0800ff2c
 800651c:	20000018 	.word	0x20000018
 8006520:	2000003c 	.word	0x2000003c
 8006524:	4ba0      	ldr	r3, [pc, #640]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a9f      	ldr	r2, [pc, #636]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800652a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b9d      	ldr	r3, [pc, #628]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a9c      	ldr	r2, [pc, #624]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800653a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d013      	beq.n	800656c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fd fcb2 	bl	8003eac <HAL_GetTick>
 8006548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800654a:	e008      	b.n	800655e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800654c:	f7fd fcae 	bl	8003eac <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	2b64      	cmp	r3, #100	; 0x64
 8006558:	d901      	bls.n	800655e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e2ae      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800655e:	4b92      	ldr	r3, [pc, #584]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0f0      	beq.n	800654c <HAL_RCC_OscConfig+0x2a8>
 800656a:	e014      	b.n	8006596 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656c:	f7fd fc9e 	bl	8003eac <HAL_GetTick>
 8006570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006572:	e008      	b.n	8006586 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006574:	f7fd fc9a 	bl	8003eac <HAL_GetTick>
 8006578:	4602      	mov	r2, r0
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b64      	cmp	r3, #100	; 0x64
 8006580:	d901      	bls.n	8006586 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e29a      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006586:	4b88      	ldr	r3, [pc, #544]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658e:	2b00      	cmp	r3, #0
 8006590:	d1f0      	bne.n	8006574 <HAL_RCC_OscConfig+0x2d0>
 8006592:	e000      	b.n	8006596 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d060      	beq.n	8006664 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d005      	beq.n	80065b4 <HAL_RCC_OscConfig+0x310>
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	2b0c      	cmp	r3, #12
 80065ac:	d119      	bne.n	80065e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d116      	bne.n	80065e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065b4:	4b7c      	ldr	r3, [pc, #496]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d005      	beq.n	80065cc <HAL_RCC_OscConfig+0x328>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e277      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065cc:	4b76      	ldr	r3, [pc, #472]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	061b      	lsls	r3, r3, #24
 80065da:	4973      	ldr	r1, [pc, #460]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065e0:	e040      	b.n	8006664 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d023      	beq.n	8006632 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065ea:	4b6f      	ldr	r3, [pc, #444]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a6e      	ldr	r2, [pc, #440]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80065f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f6:	f7fd fc59 	bl	8003eac <HAL_GetTick>
 80065fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065fc:	e008      	b.n	8006610 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065fe:	f7fd fc55 	bl	8003eac <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e255      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006610:	4b65      	ldr	r3, [pc, #404]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006618:	2b00      	cmp	r3, #0
 800661a:	d0f0      	beq.n	80065fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661c:	4b62      	ldr	r3, [pc, #392]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	061b      	lsls	r3, r3, #24
 800662a:	495f      	ldr	r1, [pc, #380]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800662c:	4313      	orrs	r3, r2
 800662e:	604b      	str	r3, [r1, #4]
 8006630:	e018      	b.n	8006664 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006632:	4b5d      	ldr	r3, [pc, #372]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a5c      	ldr	r2, [pc, #368]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800663c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663e:	f7fd fc35 	bl	8003eac <HAL_GetTick>
 8006642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006644:	e008      	b.n	8006658 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006646:	f7fd fc31 	bl	8003eac <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d901      	bls.n	8006658 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e231      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006658:	4b53      	ldr	r3, [pc, #332]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1f0      	bne.n	8006646 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d03c      	beq.n	80066ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01c      	beq.n	80066b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006678:	4b4b      	ldr	r3, [pc, #300]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800667a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800667e:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006680:	f043 0301 	orr.w	r3, r3, #1
 8006684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006688:	f7fd fc10 	bl	8003eac <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006690:	f7fd fc0c 	bl	8003eac <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e20c      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066a2:	4b41      	ldr	r3, [pc, #260]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80066a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0ef      	beq.n	8006690 <HAL_RCC_OscConfig+0x3ec>
 80066b0:	e01b      	b.n	80066ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066b2:	4b3d      	ldr	r3, [pc, #244]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80066b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b8:	4a3b      	ldr	r2, [pc, #236]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c2:	f7fd fbf3 	bl	8003eac <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ca:	f7fd fbef 	bl	8003eac <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e1ef      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80066dc:	4b32      	ldr	r3, [pc, #200]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80066de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1ef      	bne.n	80066ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80a6 	beq.w	8006844 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066f8:	2300      	movs	r3, #0
 80066fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80066fc:	4b2a      	ldr	r3, [pc, #168]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10d      	bne.n	8006724 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006708:	4b27      	ldr	r3, [pc, #156]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800670a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670c:	4a26      	ldr	r2, [pc, #152]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800670e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006712:	6593      	str	r3, [r2, #88]	; 0x58
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006720:	2301      	movs	r3, #1
 8006722:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006724:	4b21      	ldr	r3, [pc, #132]	; (80067ac <HAL_RCC_OscConfig+0x508>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	d118      	bne.n	8006762 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006730:	4b1e      	ldr	r3, [pc, #120]	; (80067ac <HAL_RCC_OscConfig+0x508>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1d      	ldr	r2, [pc, #116]	; (80067ac <HAL_RCC_OscConfig+0x508>)
 8006736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800673c:	f7fd fbb6 	bl	8003eac <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006744:	f7fd fbb2 	bl	8003eac <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e1b2      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006756:	4b15      	ldr	r3, [pc, #84]	; (80067ac <HAL_RCC_OscConfig+0x508>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0f0      	beq.n	8006744 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d108      	bne.n	800677c <HAL_RCC_OscConfig+0x4d8>
 800676a:	4b0f      	ldr	r3, [pc, #60]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800676c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006770:	4a0d      	ldr	r2, [pc, #52]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006772:	f043 0301 	orr.w	r3, r3, #1
 8006776:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800677a:	e029      	b.n	80067d0 <HAL_RCC_OscConfig+0x52c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	2b05      	cmp	r3, #5
 8006782:	d115      	bne.n	80067b0 <HAL_RCC_OscConfig+0x50c>
 8006784:	4b08      	ldr	r3, [pc, #32]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678a:	4a07      	ldr	r2, [pc, #28]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800678c:	f043 0304 	orr.w	r3, r3, #4
 8006790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006794:	4b04      	ldr	r3, [pc, #16]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	4a03      	ldr	r2, [pc, #12]	; (80067a8 <HAL_RCC_OscConfig+0x504>)
 800679c:	f043 0301 	orr.w	r3, r3, #1
 80067a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067a4:	e014      	b.n	80067d0 <HAL_RCC_OscConfig+0x52c>
 80067a6:	bf00      	nop
 80067a8:	40021000 	.word	0x40021000
 80067ac:	40007000 	.word	0x40007000
 80067b0:	4b9a      	ldr	r3, [pc, #616]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80067b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b6:	4a99      	ldr	r2, [pc, #612]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80067c0:	4b96      	ldr	r3, [pc, #600]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80067c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c6:	4a95      	ldr	r2, [pc, #596]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80067c8:	f023 0304 	bic.w	r3, r3, #4
 80067cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d016      	beq.n	8006806 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067d8:	f7fd fb68 	bl	8003eac <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067de:	e00a      	b.n	80067f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e0:	f7fd fb64 	bl	8003eac <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e162      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067f6:	4b89      	ldr	r3, [pc, #548]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80067f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0ed      	beq.n	80067e0 <HAL_RCC_OscConfig+0x53c>
 8006804:	e015      	b.n	8006832 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006806:	f7fd fb51 	bl	8003eac <HAL_GetTick>
 800680a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800680c:	e00a      	b.n	8006824 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800680e:	f7fd fb4d 	bl	8003eac <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	f241 3288 	movw	r2, #5000	; 0x1388
 800681c:	4293      	cmp	r3, r2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e14b      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006824:	4b7d      	ldr	r3, [pc, #500]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d1ed      	bne.n	800680e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006832:	7ffb      	ldrb	r3, [r7, #31]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d105      	bne.n	8006844 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006838:	4b78      	ldr	r3, [pc, #480]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 800683a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683c:	4a77      	ldr	r2, [pc, #476]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 800683e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006842:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d03c      	beq.n	80068ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006854:	2b00      	cmp	r3, #0
 8006856:	d01c      	beq.n	8006892 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006858:	4b70      	ldr	r3, [pc, #448]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 800685a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800685e:	4a6f      	ldr	r2, [pc, #444]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006860:	f043 0301 	orr.w	r3, r3, #1
 8006864:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006868:	f7fd fb20 	bl	8003eac <HAL_GetTick>
 800686c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006870:	f7fd fb1c 	bl	8003eac <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b02      	cmp	r3, #2
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e11c      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006882:	4b66      	ldr	r3, [pc, #408]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d0ef      	beq.n	8006870 <HAL_RCC_OscConfig+0x5cc>
 8006890:	e01b      	b.n	80068ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006892:	4b62      	ldr	r3, [pc, #392]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006894:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006898:	4a60      	ldr	r2, [pc, #384]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 800689a:	f023 0301 	bic.w	r3, r3, #1
 800689e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a2:	f7fd fb03 	bl	8003eac <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068aa:	f7fd faff 	bl	8003eac <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e0ff      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80068bc:	4b57      	ldr	r3, [pc, #348]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80068be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1ef      	bne.n	80068aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80f3 	beq.w	8006aba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d8:	2b02      	cmp	r3, #2
 80068da:	f040 80c9 	bne.w	8006a70 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80068de:	4b4f      	ldr	r3, [pc, #316]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f003 0203 	and.w	r2, r3, #3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d12c      	bne.n	800694c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	3b01      	subs	r3, #1
 80068fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006900:	429a      	cmp	r2, r3
 8006902:	d123      	bne.n	800694c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800690e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006910:	429a      	cmp	r2, r3
 8006912:	d11b      	bne.n	800694c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006920:	429a      	cmp	r2, r3
 8006922:	d113      	bne.n	800694c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	3b01      	subs	r3, #1
 8006932:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006934:	429a      	cmp	r2, r3
 8006936:	d109      	bne.n	800694c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	3b01      	subs	r3, #1
 8006946:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006948:	429a      	cmp	r2, r3
 800694a:	d06b      	beq.n	8006a24 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	2b0c      	cmp	r3, #12
 8006950:	d062      	beq.n	8006a18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006952:	4b32      	ldr	r3, [pc, #200]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e0ac      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006962:	4b2e      	ldr	r3, [pc, #184]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2d      	ldr	r2, [pc, #180]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006968:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800696c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800696e:	f7fd fa9d 	bl	8003eac <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006976:	f7fd fa99 	bl	8003eac <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e099      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006988:	4b24      	ldr	r3, [pc, #144]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d1f0      	bne.n	8006976 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006994:	4b21      	ldr	r3, [pc, #132]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <HAL_RCC_OscConfig+0x77c>)
 800699a:	4013      	ands	r3, r2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069a4:	3a01      	subs	r2, #1
 80069a6:	0112      	lsls	r2, r2, #4
 80069a8:	4311      	orrs	r1, r2
 80069aa:	687a      	ldr	r2, [r7, #4]
 80069ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069ae:	0212      	lsls	r2, r2, #8
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069b6:	0852      	lsrs	r2, r2, #1
 80069b8:	3a01      	subs	r2, #1
 80069ba:	0552      	lsls	r2, r2, #21
 80069bc:	4311      	orrs	r1, r2
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069c2:	0852      	lsrs	r2, r2, #1
 80069c4:	3a01      	subs	r2, #1
 80069c6:	0652      	lsls	r2, r2, #25
 80069c8:	4311      	orrs	r1, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069ce:	06d2      	lsls	r2, r2, #27
 80069d0:	430a      	orrs	r2, r1
 80069d2:	4912      	ldr	r1, [pc, #72]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80069d8:	4b10      	ldr	r3, [pc, #64]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a0f      	ldr	r2, [pc, #60]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80069de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069e4:	4b0d      	ldr	r3, [pc, #52]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	4a0c      	ldr	r2, [pc, #48]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 80069ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069f0:	f7fd fa5c 	bl	8003eac <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fd fa58 	bl	8003eac <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e058      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a0a:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <HAL_RCC_OscConfig+0x778>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0f0      	beq.n	80069f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a16:	e050      	b.n	8006aba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e04f      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a24:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d144      	bne.n	8006aba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a30:	4b24      	ldr	r3, [pc, #144]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a23      	ldr	r2, [pc, #140]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a3c:	4b21      	ldr	r3, [pc, #132]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4a20      	ldr	r2, [pc, #128]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a48:	f7fd fa30 	bl	8003eac <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a50:	f7fd fa2c 	bl	8003eac <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e02c      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a62:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0f0      	beq.n	8006a50 <HAL_RCC_OscConfig+0x7ac>
 8006a6e:	e024      	b.n	8006aba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	2b0c      	cmp	r3, #12
 8006a74:	d01f      	beq.n	8006ab6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a76:	4b13      	ldr	r3, [pc, #76]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a12      	ldr	r2, [pc, #72]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a82:	f7fd fa13 	bl	8003eac <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a8a:	f7fd fa0f 	bl	8003eac <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e00f      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a9c:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1f0      	bne.n	8006a8a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006aa8:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	4905      	ldr	r1, [pc, #20]	; (8006ac4 <HAL_RCC_OscConfig+0x820>)
 8006aae:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <HAL_RCC_OscConfig+0x824>)
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	60cb      	str	r3, [r1, #12]
 8006ab4:	e001      	b.n	8006aba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e000      	b.n	8006abc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3720      	adds	r7, #32
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	40021000 	.word	0x40021000
 8006ac8:	feeefffc 	.word	0xfeeefffc

08006acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0e7      	b.n	8006cb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae0:	4b75      	ldr	r3, [pc, #468]	; (8006cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d910      	bls.n	8006b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aee:	4b72      	ldr	r3, [pc, #456]	; (8006cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f023 0207 	bic.w	r2, r3, #7
 8006af6:	4970      	ldr	r1, [pc, #448]	; (8006cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afe:	4b6e      	ldr	r3, [pc, #440]	; (8006cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d001      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0cf      	b.n	8006cb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d010      	beq.n	8006b3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	689a      	ldr	r2, [r3, #8]
 8006b20:	4b66      	ldr	r3, [pc, #408]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d908      	bls.n	8006b3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b2c:	4b63      	ldr	r3, [pc, #396]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4960      	ldr	r1, [pc, #384]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d04c      	beq.n	8006be4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d107      	bne.n	8006b62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b52:	4b5a      	ldr	r3, [pc, #360]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d121      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e0a6      	b.n	8006cb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d107      	bne.n	8006b7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b6a:	4b54      	ldr	r3, [pc, #336]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d115      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e09a      	b.n	8006cb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d107      	bne.n	8006b92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b82:	4b4e      	ldr	r3, [pc, #312]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d109      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e08e      	b.n	8006cb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b92:	4b4a      	ldr	r3, [pc, #296]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e086      	b.n	8006cb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ba2:	4b46      	ldr	r3, [pc, #280]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f023 0203 	bic.w	r2, r3, #3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	4943      	ldr	r1, [pc, #268]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb4:	f7fd f97a 	bl	8003eac <HAL_GetTick>
 8006bb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bba:	e00a      	b.n	8006bd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bbc:	f7fd f976 	bl	8003eac <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e06e      	b.n	8006cb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd2:	4b3a      	ldr	r3, [pc, #232]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 020c 	and.w	r2, r3, #12
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d1eb      	bne.n	8006bbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d010      	beq.n	8006c12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	4b31      	ldr	r3, [pc, #196]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d208      	bcs.n	8006c12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c00:	4b2e      	ldr	r3, [pc, #184]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	492b      	ldr	r1, [pc, #172]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c12:	4b29      	ldr	r3, [pc, #164]	; (8006cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d210      	bcs.n	8006c42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c20:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f023 0207 	bic.w	r2, r3, #7
 8006c28:	4923      	ldr	r1, [pc, #140]	; (8006cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c30:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d001      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e036      	b.n	8006cb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0304 	and.w	r3, r3, #4
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d008      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c4e:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	4918      	ldr	r1, [pc, #96]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d009      	beq.n	8006c80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c6c:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4910      	ldr	r1, [pc, #64]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c80:	f000 f824 	bl	8006ccc <HAL_RCC_GetSysClockFreq>
 8006c84:	4602      	mov	r2, r0
 8006c86:	4b0d      	ldr	r3, [pc, #52]	; (8006cbc <HAL_RCC_ClockConfig+0x1f0>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	091b      	lsrs	r3, r3, #4
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	490b      	ldr	r1, [pc, #44]	; (8006cc0 <HAL_RCC_ClockConfig+0x1f4>)
 8006c92:	5ccb      	ldrb	r3, [r1, r3]
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	fa22 f303 	lsr.w	r3, r2, r3
 8006c9c:	4a09      	ldr	r2, [pc, #36]	; (8006cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8006c9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ca0:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <HAL_RCC_ClockConfig+0x1fc>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fd f8b1 	bl	8003e0c <HAL_InitTick>
 8006caa:	4603      	mov	r3, r0
 8006cac:	72fb      	strb	r3, [r7, #11]

  return status;
 8006cae:	7afb      	ldrb	r3, [r7, #11]
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	40022000 	.word	0x40022000
 8006cbc:	40021000 	.word	0x40021000
 8006cc0:	0800ff2c 	.word	0x0800ff2c
 8006cc4:	20000018 	.word	0x20000018
 8006cc8:	2000003c 	.word	0x2000003c

08006ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b089      	sub	sp, #36	; 0x24
 8006cd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61fb      	str	r3, [r7, #28]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cda:	4b3e      	ldr	r3, [pc, #248]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 030c 	and.w	r3, r3, #12
 8006ce2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ce4:	4b3b      	ldr	r3, [pc, #236]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_RCC_GetSysClockFreq+0x34>
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2b0c      	cmp	r3, #12
 8006cf8:	d121      	bne.n	8006d3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d11e      	bne.n	8006d3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d00:	4b34      	ldr	r3, [pc, #208]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d107      	bne.n	8006d1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d0c:	4b31      	ldr	r3, [pc, #196]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d12:	0a1b      	lsrs	r3, r3, #8
 8006d14:	f003 030f 	and.w	r3, r3, #15
 8006d18:	61fb      	str	r3, [r7, #28]
 8006d1a:	e005      	b.n	8006d28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d1c:	4b2d      	ldr	r3, [pc, #180]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	091b      	lsrs	r3, r3, #4
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d28:	4a2b      	ldr	r2, [pc, #172]	; (8006dd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10d      	bne.n	8006d54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d3c:	e00a      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d102      	bne.n	8006d4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d44:	4b25      	ldr	r3, [pc, #148]	; (8006ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	e004      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d101      	bne.n	8006d54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d50:	4b23      	ldr	r3, [pc, #140]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b0c      	cmp	r3, #12
 8006d58:	d134      	bne.n	8006dc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d5a:	4b1e      	ldr	r3, [pc, #120]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d003      	beq.n	8006d72 <HAL_RCC_GetSysClockFreq+0xa6>
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d003      	beq.n	8006d78 <HAL_RCC_GetSysClockFreq+0xac>
 8006d70:	e005      	b.n	8006d7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006d72:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8006d74:	617b      	str	r3, [r7, #20]
      break;
 8006d76:	e005      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006d78:	4b19      	ldr	r3, [pc, #100]	; (8006de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006d7a:	617b      	str	r3, [r7, #20]
      break;
 8006d7c:	e002      	b.n	8006d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	617b      	str	r3, [r7, #20]
      break;
 8006d82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006d84:	4b13      	ldr	r3, [pc, #76]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	3301      	adds	r3, #1
 8006d90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006d92:	4b10      	ldr	r3, [pc, #64]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	0a1b      	lsrs	r3, r3, #8
 8006d98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	fb03 f202 	mul.w	r2, r3, r2
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006daa:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	0e5b      	lsrs	r3, r3, #25
 8006db0:	f003 0303 	and.w	r3, r3, #3
 8006db4:	3301      	adds	r3, #1
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3724      	adds	r7, #36	; 0x24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40021000 	.word	0x40021000
 8006dd8:	0800ff44 	.word	0x0800ff44
 8006ddc:	00f42400 	.word	0x00f42400
 8006de0:	007a1200 	.word	0x007a1200

08006de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006de8:	4b03      	ldr	r3, [pc, #12]	; (8006df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006dea:	681b      	ldr	r3, [r3, #0]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	20000018 	.word	0x20000018

08006dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e00:	f7ff fff0 	bl	8006de4 <HAL_RCC_GetHCLKFreq>
 8006e04:	4602      	mov	r2, r0
 8006e06:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	0a1b      	lsrs	r3, r3, #8
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	4904      	ldr	r1, [pc, #16]	; (8006e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e12:	5ccb      	ldrb	r3, [r1, r3]
 8006e14:	f003 031f 	and.w	r3, r3, #31
 8006e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	40021000 	.word	0x40021000
 8006e24:	0800ff3c 	.word	0x0800ff3c

08006e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e2c:	f7ff ffda 	bl	8006de4 <HAL_RCC_GetHCLKFreq>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4b06      	ldr	r3, [pc, #24]	; (8006e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	0adb      	lsrs	r3, r3, #11
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	4904      	ldr	r1, [pc, #16]	; (8006e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e3e:	5ccb      	ldrb	r3, [r1, r3]
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	0800ff3c 	.word	0x0800ff3c

08006e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e60:	4b2a      	ldr	r3, [pc, #168]	; (8006f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006e6c:	f7ff f9b6 	bl	80061dc <HAL_PWREx_GetVoltageRange>
 8006e70:	6178      	str	r0, [r7, #20]
 8006e72:	e014      	b.n	8006e9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e74:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e78:	4a24      	ldr	r2, [pc, #144]	; (8006f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8006e80:	4b22      	ldr	r3, [pc, #136]	; (8006f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006e8c:	f7ff f9a6 	bl	80061dc <HAL_PWREx_GetVoltageRange>
 8006e90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006e92:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	4a1d      	ldr	r2, [pc, #116]	; (8006f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea4:	d10b      	bne.n	8006ebe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2b80      	cmp	r3, #128	; 0x80
 8006eaa:	d919      	bls.n	8006ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2ba0      	cmp	r3, #160	; 0xa0
 8006eb0:	d902      	bls.n	8006eb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	e013      	b.n	8006ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006eb8:	2301      	movs	r3, #1
 8006eba:	613b      	str	r3, [r7, #16]
 8006ebc:	e010      	b.n	8006ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b80      	cmp	r3, #128	; 0x80
 8006ec2:	d902      	bls.n	8006eca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	e00a      	b.n	8006ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b80      	cmp	r3, #128	; 0x80
 8006ece:	d102      	bne.n	8006ed6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	e004      	b.n	8006ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b70      	cmp	r3, #112	; 0x70
 8006eda:	d101      	bne.n	8006ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006edc:	2301      	movs	r3, #1
 8006ede:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f023 0207 	bic.w	r2, r3, #7
 8006ee8:	4909      	ldr	r1, [pc, #36]	; (8006f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0307 	and.w	r3, r3, #7
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d001      	beq.n	8006f02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40022000 	.word	0x40022000

08006f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f20:	2300      	movs	r3, #0
 8006f22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d031      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f38:	d01a      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006f3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f3e:	d814      	bhi.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d009      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f48:	d10f      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006f4a:	4b5d      	ldr	r3, [pc, #372]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	4a5c      	ldr	r2, [pc, #368]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f56:	e00c      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 f9ce 	bl	8007300 <RCCEx_PLLSAI1_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006f68:	e003      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8006f6e:	e000      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f72:	7cfb      	ldrb	r3, [r7, #19]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10b      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f78:	4b51      	ldr	r3, [pc, #324]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f86:	494e      	ldr	r1, [pc, #312]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006f8e:	e001      	b.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f90:	7cfb      	ldrb	r3, [r7, #19]
 8006f92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 809e 	beq.w	80070de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fa6:	4b46      	ldr	r3, [pc, #280]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e000      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00d      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fbc:	4b40      	ldr	r3, [pc, #256]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc0:	4a3f      	ldr	r2, [pc, #252]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8006fc8:	4b3d      	ldr	r3, [pc, #244]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd0:	60bb      	str	r3, [r7, #8]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fd8:	4b3a      	ldr	r3, [pc, #232]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a39      	ldr	r2, [pc, #228]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fe4:	f7fc ff62 	bl	8003eac <HAL_GetTick>
 8006fe8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006fea:	e009      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fec:	f7fc ff5e 	bl	8003eac <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d902      	bls.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	74fb      	strb	r3, [r7, #19]
        break;
 8006ffe:	e005      	b.n	800700c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007000:	4b30      	ldr	r3, [pc, #192]	; (80070c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007008:	2b00      	cmp	r3, #0
 800700a:	d0ef      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800700c:	7cfb      	ldrb	r3, [r7, #19]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d15a      	bne.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007012:	4b2b      	ldr	r3, [pc, #172]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800701c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01e      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	429a      	cmp	r2, r3
 800702c:	d019      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800702e:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007038:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800703a:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800703c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007040:	4a1f      	ldr	r2, [pc, #124]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800704a:	4b1d      	ldr	r3, [pc, #116]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800704c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007050:	4a1b      	ldr	r2, [pc, #108]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800705a:	4a19      	ldr	r2, [pc, #100]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d016      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800706c:	f7fc ff1e 	bl	8003eac <HAL_GetTick>
 8007070:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007072:	e00b      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007074:	f7fc ff1a 	bl	8003eac <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007082:	4293      	cmp	r3, r2
 8007084:	d902      	bls.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	74fb      	strb	r3, [r7, #19]
            break;
 800708a:	e006      	b.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800708c:	4b0c      	ldr	r3, [pc, #48]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800708e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0ec      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800709a:	7cfb      	ldrb	r3, [r7, #19]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10b      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070a0:	4b07      	ldr	r3, [pc, #28]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ae:	4904      	ldr	r1, [pc, #16]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80070b6:	e009      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070b8:	7cfb      	ldrb	r3, [r7, #19]
 80070ba:	74bb      	strb	r3, [r7, #18]
 80070bc:	e006      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80070be:	bf00      	nop
 80070c0:	40021000 	.word	0x40021000
 80070c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070c8:	7cfb      	ldrb	r3, [r7, #19]
 80070ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070cc:	7c7b      	ldrb	r3, [r7, #17]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d105      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070d2:	4b8a      	ldr	r3, [pc, #552]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070d6:	4a89      	ldr	r2, [pc, #548]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00a      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ea:	4b84      	ldr	r3, [pc, #528]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f0:	f023 0203 	bic.w	r2, r3, #3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	4980      	ldr	r1, [pc, #512]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0302 	and.w	r3, r3, #2
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800710c:	4b7b      	ldr	r3, [pc, #492]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007112:	f023 020c 	bic.w	r2, r3, #12
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	4978      	ldr	r1, [pc, #480]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0320 	and.w	r3, r3, #32
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800712e:	4b73      	ldr	r3, [pc, #460]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007134:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	496f      	ldr	r1, [pc, #444]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007150:	4b6a      	ldr	r3, [pc, #424]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007156:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715e:	4967      	ldr	r1, [pc, #412]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007160:	4313      	orrs	r3, r2
 8007162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007172:	4b62      	ldr	r3, [pc, #392]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007180:	495e      	ldr	r1, [pc, #376]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007182:	4313      	orrs	r3, r2
 8007184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007194:	4b59      	ldr	r3, [pc, #356]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	4956      	ldr	r1, [pc, #344]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071a4:	4313      	orrs	r3, r2
 80071a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071b6:	4b51      	ldr	r3, [pc, #324]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	494d      	ldr	r1, [pc, #308]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d028      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071d8:	4b48      	ldr	r3, [pc, #288]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4945      	ldr	r1, [pc, #276]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071f6:	d106      	bne.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071f8:	4b40      	ldr	r3, [pc, #256]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	4a3f      	ldr	r2, [pc, #252]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007202:	60d3      	str	r3, [r2, #12]
 8007204:	e011      	b.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800720e:	d10c      	bne.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3304      	adds	r3, #4
 8007214:	2101      	movs	r1, #1
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f872 	bl	8007300 <RCCEx_PLLSAI1_Config>
 800721c:	4603      	mov	r3, r0
 800721e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007220:	7cfb      	ldrb	r3, [r7, #19]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007226:	7cfb      	ldrb	r3, [r7, #19]
 8007228:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d028      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007236:	4b31      	ldr	r3, [pc, #196]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800723c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007244:	492d      	ldr	r1, [pc, #180]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007246:	4313      	orrs	r3, r2
 8007248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007254:	d106      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007256:	4b29      	ldr	r3, [pc, #164]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	4a28      	ldr	r2, [pc, #160]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800725c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007260:	60d3      	str	r3, [r2, #12]
 8007262:	e011      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800726c:	d10c      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3304      	adds	r3, #4
 8007272:	2101      	movs	r1, #1
 8007274:	4618      	mov	r0, r3
 8007276:	f000 f843 	bl	8007300 <RCCEx_PLLSAI1_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800727e:	7cfb      	ldrb	r3, [r7, #19]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007284:	7cfb      	ldrb	r3, [r7, #19]
 8007286:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01c      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007294:	4b19      	ldr	r3, [pc, #100]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800729a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a2:	4916      	ldr	r1, [pc, #88]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072b2:	d10c      	bne.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	2102      	movs	r1, #2
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 f820 	bl	8007300 <RCCEx_PLLSAI1_Config>
 80072c0:	4603      	mov	r3, r0
 80072c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80072c4:	7cfb      	ldrb	r3, [r7, #19]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80072ca:	7cfb      	ldrb	r3, [r7, #19]
 80072cc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072da:	4b08      	ldr	r3, [pc, #32]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e8:	4904      	ldr	r1, [pc, #16]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80072f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40021000 	.word	0x40021000

08007300 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800730a:	2300      	movs	r3, #0
 800730c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800730e:	4b74      	ldr	r3, [pc, #464]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	f003 0303 	and.w	r3, r3, #3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d018      	beq.n	800734c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800731a:	4b71      	ldr	r3, [pc, #452]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f003 0203 	and.w	r2, r3, #3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	429a      	cmp	r2, r3
 8007328:	d10d      	bne.n	8007346 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
       ||
 800732e:	2b00      	cmp	r3, #0
 8007330:	d009      	beq.n	8007346 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007332:	4b6b      	ldr	r3, [pc, #428]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	091b      	lsrs	r3, r3, #4
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
       ||
 8007342:	429a      	cmp	r2, r3
 8007344:	d047      	beq.n	80073d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
 800734a:	e044      	b.n	80073d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2b03      	cmp	r3, #3
 8007352:	d018      	beq.n	8007386 <RCCEx_PLLSAI1_Config+0x86>
 8007354:	2b03      	cmp	r3, #3
 8007356:	d825      	bhi.n	80073a4 <RCCEx_PLLSAI1_Config+0xa4>
 8007358:	2b01      	cmp	r3, #1
 800735a:	d002      	beq.n	8007362 <RCCEx_PLLSAI1_Config+0x62>
 800735c:	2b02      	cmp	r3, #2
 800735e:	d009      	beq.n	8007374 <RCCEx_PLLSAI1_Config+0x74>
 8007360:	e020      	b.n	80073a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007362:	4b5f      	ldr	r3, [pc, #380]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0302 	and.w	r3, r3, #2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d11d      	bne.n	80073aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007372:	e01a      	b.n	80073aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007374:	4b5a      	ldr	r3, [pc, #360]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800737c:	2b00      	cmp	r3, #0
 800737e:	d116      	bne.n	80073ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007384:	e013      	b.n	80073ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007386:	4b56      	ldr	r3, [pc, #344]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10f      	bne.n	80073b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007392:	4b53      	ldr	r3, [pc, #332]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073a2:	e006      	b.n	80073b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
      break;
 80073a8:	e004      	b.n	80073b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073aa:	bf00      	nop
 80073ac:	e002      	b.n	80073b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073ae:	bf00      	nop
 80073b0:	e000      	b.n	80073b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80073b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10d      	bne.n	80073d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80073ba:	4b49      	ldr	r3, [pc, #292]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6819      	ldr	r1, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	011b      	lsls	r3, r3, #4
 80073ce:	430b      	orrs	r3, r1
 80073d0:	4943      	ldr	r1, [pc, #268]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d17c      	bne.n	80074d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80073dc:	4b40      	ldr	r3, [pc, #256]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a3f      	ldr	r2, [pc, #252]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e8:	f7fc fd60 	bl	8003eac <HAL_GetTick>
 80073ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80073ee:	e009      	b.n	8007404 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80073f0:	f7fc fd5c 	bl	8003eac <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b02      	cmp	r3, #2
 80073fc:	d902      	bls.n	8007404 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	73fb      	strb	r3, [r7, #15]
        break;
 8007402:	e005      	b.n	8007410 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007404:	4b36      	ldr	r3, [pc, #216]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1ef      	bne.n	80073f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007410:	7bfb      	ldrb	r3, [r7, #15]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d15f      	bne.n	80074d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d110      	bne.n	800743e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800741c:	4b30      	ldr	r3, [pc, #192]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007424:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	6892      	ldr	r2, [r2, #8]
 800742c:	0211      	lsls	r1, r2, #8
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	68d2      	ldr	r2, [r2, #12]
 8007432:	06d2      	lsls	r2, r2, #27
 8007434:	430a      	orrs	r2, r1
 8007436:	492a      	ldr	r1, [pc, #168]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007438:	4313      	orrs	r3, r2
 800743a:	610b      	str	r3, [r1, #16]
 800743c:	e027      	b.n	800748e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d112      	bne.n	800746a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007444:	4b26      	ldr	r3, [pc, #152]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800744c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	6892      	ldr	r2, [r2, #8]
 8007454:	0211      	lsls	r1, r2, #8
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	6912      	ldr	r2, [r2, #16]
 800745a:	0852      	lsrs	r2, r2, #1
 800745c:	3a01      	subs	r2, #1
 800745e:	0552      	lsls	r2, r2, #21
 8007460:	430a      	orrs	r2, r1
 8007462:	491f      	ldr	r1, [pc, #124]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007464:	4313      	orrs	r3, r2
 8007466:	610b      	str	r3, [r1, #16]
 8007468:	e011      	b.n	800748e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800746a:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007472:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6892      	ldr	r2, [r2, #8]
 800747a:	0211      	lsls	r1, r2, #8
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6952      	ldr	r2, [r2, #20]
 8007480:	0852      	lsrs	r2, r2, #1
 8007482:	3a01      	subs	r2, #1
 8007484:	0652      	lsls	r2, r2, #25
 8007486:	430a      	orrs	r2, r1
 8007488:	4915      	ldr	r1, [pc, #84]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800748a:	4313      	orrs	r3, r2
 800748c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800748e:	4b14      	ldr	r3, [pc, #80]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007498:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800749a:	f7fc fd07 	bl	8003eac <HAL_GetTick>
 800749e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074a0:	e009      	b.n	80074b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074a2:	f7fc fd03 	bl	8003eac <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d902      	bls.n	80074b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	73fb      	strb	r3, [r7, #15]
          break;
 80074b4:	e005      	b.n	80074c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0ef      	beq.n	80074a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d106      	bne.n	80074d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ca:	691a      	ldr	r2, [r3, #16]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	4903      	ldr	r1, [pc, #12]	; (80074e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	40021000 	.word	0x40021000

080074e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d101      	bne.n	80074f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	e095      	b.n	8007622 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d108      	bne.n	8007510 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007506:	d009      	beq.n	800751c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	61da      	str	r2, [r3, #28]
 800750e:	e005      	b.n	800751c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d106      	bne.n	800753c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fb fbc4 	bl	8002cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007552:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800755c:	d902      	bls.n	8007564 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
 8007562:	e002      	b.n	800756a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007568:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007572:	d007      	beq.n	8007584 <HAL_SPI_Init+0xa0>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800757c:	d002      	beq.n	8007584 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	695b      	ldr	r3, [r3, #20]
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c6:	ea42 0103 	orr.w	r1, r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699b      	ldr	r3, [r3, #24]
 80075de:	0c1b      	lsrs	r3, r3, #16
 80075e0:	f003 0204 	and.w	r2, r3, #4
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e8:	f003 0310 	and.w	r3, r3, #16
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f2:	f003 0308 	and.w	r3, r3, #8
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007600:	ea42 0103 	orr.w	r1, r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	430a      	orrs	r2, r1
 8007610:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b088      	sub	sp, #32
 800762e:	af00      	add	r7, sp, #0
 8007630:	60f8      	str	r0, [r7, #12]
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	603b      	str	r3, [r7, #0]
 8007636:	4613      	mov	r3, r2
 8007638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_SPI_Transmit+0x22>
 8007648:	2302      	movs	r3, #2
 800764a:	e15f      	b.n	800790c <HAL_SPI_Transmit+0x2e2>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007654:	f7fc fc2a 	bl	8003eac <HAL_GetTick>
 8007658:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800765a:	88fb      	ldrh	r3, [r7, #6]
 800765c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b01      	cmp	r3, #1
 8007668:	d002      	beq.n	8007670 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800766a:	2302      	movs	r3, #2
 800766c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800766e:	e148      	b.n	8007902 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <HAL_SPI_Transmit+0x52>
 8007676:	88fb      	ldrh	r3, [r7, #6]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d102      	bne.n	8007682 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007680:	e13f      	b.n	8007902 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2203      	movs	r2, #3
 8007686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	88fa      	ldrh	r2, [r7, #6]
 800769a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	88fa      	ldrh	r2, [r7, #6]
 80076a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076cc:	d10f      	bne.n	80076ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f8:	2b40      	cmp	r3, #64	; 0x40
 80076fa:	d007      	beq.n	800770c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800770a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007714:	d94f      	bls.n	80077b6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <HAL_SPI_Transmit+0xfa>
 800771e:	8afb      	ldrh	r3, [r7, #22]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d142      	bne.n	80077aa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	881a      	ldrh	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007734:	1c9a      	adds	r2, r3, #2
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007748:	e02f      	b.n	80077aa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b02      	cmp	r3, #2
 8007756:	d112      	bne.n	800777e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	881a      	ldrh	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	1c9a      	adds	r2, r3, #2
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007772:	b29b      	uxth	r3, r3
 8007774:	3b01      	subs	r3, #1
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800777c:	e015      	b.n	80077aa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800777e:	f7fc fb95 	bl	8003eac <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	429a      	cmp	r2, r3
 800778c:	d803      	bhi.n	8007796 <HAL_SPI_Transmit+0x16c>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007794:	d102      	bne.n	800779c <HAL_SPI_Transmit+0x172>
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d106      	bne.n	80077aa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80077a8:	e0ab      	b.n	8007902 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1ca      	bne.n	800774a <HAL_SPI_Transmit+0x120>
 80077b4:	e080      	b.n	80078b8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_SPI_Transmit+0x19a>
 80077be:	8afb      	ldrh	r3, [r7, #22]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d174      	bne.n	80078ae <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d912      	bls.n	80077f4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	881a      	ldrh	r2, [r3, #0]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	1c9a      	adds	r2, r3, #2
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	3b02      	subs	r3, #2
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80077f2:	e05c      	b.n	80078ae <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	330c      	adds	r3, #12
 80077fe:	7812      	ldrb	r2, [r2, #0]
 8007800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007806:	1c5a      	adds	r2, r3, #1
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b29a      	uxth	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800781a:	e048      	b.n	80078ae <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 0302 	and.w	r3, r3, #2
 8007826:	2b02      	cmp	r3, #2
 8007828:	d12b      	bne.n	8007882 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b01      	cmp	r3, #1
 8007832:	d912      	bls.n	800785a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	881a      	ldrh	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	1c9a      	adds	r2, r3, #2
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800784e:	b29b      	uxth	r3, r3
 8007850:	3b02      	subs	r3, #2
 8007852:	b29a      	uxth	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007858:	e029      	b.n	80078ae <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	330c      	adds	r3, #12
 8007864:	7812      	ldrb	r2, [r2, #0]
 8007866:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007880:	e015      	b.n	80078ae <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007882:	f7fc fb13 	bl	8003eac <HAL_GetTick>
 8007886:	4602      	mov	r2, r0
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d803      	bhi.n	800789a <HAL_SPI_Transmit+0x270>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007898:	d102      	bne.n	80078a0 <HAL_SPI_Transmit+0x276>
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d106      	bne.n	80078ae <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80078ac:	e029      	b.n	8007902 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1b1      	bne.n	800781c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078b8:	69ba      	ldr	r2, [r7, #24]
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f000 fe89 	bl	80085d4 <SPI_EndRxTxTransaction>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2220      	movs	r2, #32
 80078cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	613b      	str	r3, [r7, #16]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e003      	b.n	8007902 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800790a:	7ffb      	ldrb	r3, [r7, #31]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3720      	adds	r7, #32
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b088      	sub	sp, #32
 8007918:	af02      	add	r7, sp, #8
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	4613      	mov	r3, r2
 8007922:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	d002      	beq.n	800793a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007934:	2302      	movs	r3, #2
 8007936:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007938:	e11a      	b.n	8007b70 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007942:	d112      	bne.n	800796a <HAL_SPI_Receive+0x56>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10e      	bne.n	800796a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2204      	movs	r2, #4
 8007950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007954:	88fa      	ldrh	r2, [r7, #6]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	9300      	str	r3, [sp, #0]
 800795a:	4613      	mov	r3, r2
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f000 f90e 	bl	8007b82 <HAL_SPI_TransmitReceive>
 8007966:	4603      	mov	r3, r0
 8007968:	e107      	b.n	8007b7a <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007970:	2b01      	cmp	r3, #1
 8007972:	d101      	bne.n	8007978 <HAL_SPI_Receive+0x64>
 8007974:	2302      	movs	r3, #2
 8007976:	e100      	b.n	8007b7a <HAL_SPI_Receive+0x266>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007980:	f7fc fa94 	bl	8003eac <HAL_GetTick>
 8007984:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <HAL_SPI_Receive+0x7e>
 800798c:	88fb      	ldrh	r3, [r7, #6]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d102      	bne.n	8007998 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007996:	e0eb      	b.n	8007b70 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2204      	movs	r2, #4
 800799c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	88fa      	ldrh	r2, [r7, #6]
 80079b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80079e2:	d908      	bls.n	80079f6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079f2:	605a      	str	r2, [r3, #4]
 80079f4:	e007      	b.n	8007a06 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a04:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a0e:	d10f      	bne.n	8007a30 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a2e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3a:	2b40      	cmp	r3, #64	; 0x40
 8007a3c:	d007      	beq.n	8007a4e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a4c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007a56:	d86f      	bhi.n	8007b38 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a58:	e034      	b.n	8007ac4 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d117      	bne.n	8007a98 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f103 020c 	add.w	r2, r3, #12
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	7812      	ldrb	r2, [r2, #0]
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007a96:	e015      	b.n	8007ac4 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a98:	f7fc fa08 	bl	8003eac <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d803      	bhi.n	8007ab0 <HAL_SPI_Receive+0x19c>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aae:	d102      	bne.n	8007ab6 <HAL_SPI_Receive+0x1a2>
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d106      	bne.n	8007ac4 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007ac2:	e055      	b.n	8007b70 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1c4      	bne.n	8007a5a <HAL_SPI_Receive+0x146>
 8007ad0:	e038      	b.n	8007b44 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d115      	bne.n	8007b0c <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	b292      	uxth	r2, r2
 8007aec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	1c9a      	adds	r2, r3, #2
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007b0a:	e015      	b.n	8007b38 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b0c:	f7fc f9ce 	bl	8003eac <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d803      	bhi.n	8007b24 <HAL_SPI_Receive+0x210>
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b22:	d102      	bne.n	8007b2a <HAL_SPI_Receive+0x216>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2201      	movs	r2, #1
 8007b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007b36:	e01b      	b.n	8007b70 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1c6      	bne.n	8007ad2 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fceb 	bl	8008524 <SPI_EndRxTransaction>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2220      	movs	r2, #32
 8007b58:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d002      	beq.n	8007b68 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	75fb      	strb	r3, [r7, #23]
 8007b66:	e003      	b.n	8007b70 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b08a      	sub	sp, #40	; 0x28
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	607a      	str	r2, [r7, #4]
 8007b8e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007b90:	2301      	movs	r3, #1
 8007b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d101      	bne.n	8007ba8 <HAL_SPI_TransmitReceive+0x26>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e20a      	b.n	8007fbe <HAL_SPI_TransmitReceive+0x43c>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bb0:	f7fc f97c 	bl	8003eac <HAL_GetTick>
 8007bb4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bbc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007bc4:	887b      	ldrh	r3, [r7, #2]
 8007bc6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007bc8:	887b      	ldrh	r3, [r7, #2]
 8007bca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bcc:	7efb      	ldrb	r3, [r7, #27]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d00e      	beq.n	8007bf0 <HAL_SPI_TransmitReceive+0x6e>
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bd8:	d106      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d102      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x66>
 8007be2:	7efb      	ldrb	r3, [r7, #27]
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d003      	beq.n	8007bf0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
 8007bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007bee:	e1e0      	b.n	8007fb2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <HAL_SPI_TransmitReceive+0x80>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d002      	beq.n	8007c02 <HAL_SPI_TransmitReceive+0x80>
 8007bfc:	887b      	ldrh	r3, [r7, #2]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007c08:	e1d3      	b.n	8007fb2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d003      	beq.n	8007c1e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2205      	movs	r2, #5
 8007c1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	887a      	ldrh	r2, [r7, #2]
 8007c2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	887a      	ldrh	r2, [r7, #2]
 8007c36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	887a      	ldrh	r2, [r7, #2]
 8007c44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	887a      	ldrh	r2, [r7, #2]
 8007c4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2200      	movs	r2, #0
 8007c56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c60:	d802      	bhi.n	8007c68 <HAL_SPI_TransmitReceive+0xe6>
 8007c62:	8a3b      	ldrh	r3, [r7, #16]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d908      	bls.n	8007c7a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c76:	605a      	str	r2, [r3, #4]
 8007c78:	e007      	b.n	8007c8a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b40      	cmp	r3, #64	; 0x40
 8007c96:	d007      	beq.n	8007ca8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ca6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cb0:	f240 8081 	bls.w	8007db6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <HAL_SPI_TransmitReceive+0x140>
 8007cbc:	8a7b      	ldrh	r3, [r7, #18]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d16d      	bne.n	8007d9e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	881a      	ldrh	r2, [r3, #0]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	1c9a      	adds	r2, r3, #2
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ce6:	e05a      	b.n	8007d9e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d11b      	bne.n	8007d2e <HAL_SPI_TransmitReceive+0x1ac>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d016      	beq.n	8007d2e <HAL_SPI_TransmitReceive+0x1ac>
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d113      	bne.n	8007d2e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0a:	881a      	ldrh	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d16:	1c9a      	adds	r2, r3, #2
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d11c      	bne.n	8007d76 <HAL_SPI_TransmitReceive+0x1f4>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d016      	beq.n	8007d76 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	68da      	ldr	r2, [r3, #12]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	b292      	uxth	r2, r2
 8007d54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	1c9a      	adds	r2, r3, #2
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007d72:	2301      	movs	r3, #1
 8007d74:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007d76:	f7fc f899 	bl	8003eac <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d80b      	bhi.n	8007d9e <HAL_SPI_TransmitReceive+0x21c>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d8c:	d007      	beq.n	8007d9e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007d9c:	e109      	b.n	8007fb2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d19f      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x166>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d199      	bne.n	8007ce8 <HAL_SPI_TransmitReceive+0x166>
 8007db4:	e0e3      	b.n	8007f7e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_SPI_TransmitReceive+0x244>
 8007dbe:	8a7b      	ldrh	r3, [r7, #18]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	f040 80cf 	bne.w	8007f64 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d912      	bls.n	8007df6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	881a      	ldrh	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	1c9a      	adds	r2, r3, #2
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	3b02      	subs	r3, #2
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007df4:	e0b6      	b.n	8007f64 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	330c      	adds	r3, #12
 8007e00:	7812      	ldrb	r2, [r2, #0]
 8007e02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	3b01      	subs	r3, #1
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e1c:	e0a2      	b.n	8007f64 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	d134      	bne.n	8007e96 <HAL_SPI_TransmitReceive+0x314>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d02f      	beq.n	8007e96 <HAL_SPI_TransmitReceive+0x314>
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d12c      	bne.n	8007e96 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d912      	bls.n	8007e6c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	881a      	ldrh	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e56:	1c9a      	adds	r2, r3, #2
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b02      	subs	r3, #2
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e6a:	e012      	b.n	8007e92 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	330c      	adds	r3, #12
 8007e76:	7812      	ldrb	r2, [r2, #0]
 8007e78:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	1c5a      	adds	r2, r3, #1
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e92:	2300      	movs	r3, #0
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d148      	bne.n	8007f36 <HAL_SPI_TransmitReceive+0x3b4>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d042      	beq.n	8007f36 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d923      	bls.n	8007f04 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	68da      	ldr	r2, [r3, #12]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	b292      	uxth	r2, r2
 8007ec8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	1c9a      	adds	r2, r3, #2
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b02      	subs	r3, #2
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d81f      	bhi.n	8007f32 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	e016      	b.n	8007f32 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f103 020c 	add.w	r2, r3, #12
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f10:	7812      	ldrb	r2, [r2, #0]
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f32:	2301      	movs	r3, #1
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f36:	f7fb ffb9 	bl	8003eac <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d803      	bhi.n	8007f4e <HAL_SPI_TransmitReceive+0x3cc>
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f4c:	d102      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x3d2>
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d107      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007f54:	2303      	movs	r3, #3
 8007f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8007f62:	e026      	b.n	8007fb2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f47f af57 	bne.w	8007e1e <HAL_SPI_TransmitReceive+0x29c>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f47f af50 	bne.w	8007e1e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f7e:	69fa      	ldr	r2, [r7, #28]
 8007f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fb26 	bl	80085d4 <SPI_EndRxTxTransaction>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d005      	beq.n	8007f9a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2220      	movs	r2, #32
 8007f98:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007fa8:	e003      	b.n	8007fb2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3728      	adds	r7, #40	; 0x28
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
	...

08007fc8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_SPI_Transmit_DMA+0x20>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e0d4      	b.n	8008192 <HAL_SPI_Transmit_DMA+0x1ca>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d002      	beq.n	8008002 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008000:	e0c2      	b.n	8008188 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <HAL_SPI_Transmit_DMA+0x46>
 8008008:	88fb      	ldrh	r3, [r7, #6]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008012:	e0b9      	b.n	8008188 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2203      	movs	r2, #3
 8008018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	88fa      	ldrh	r2, [r7, #6]
 800802c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	88fa      	ldrh	r2, [r7, #6]
 8008032:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800805e:	d10f      	bne.n	8008080 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800806e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800807e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008084:	4a45      	ldr	r2, [pc, #276]	; (800819c <HAL_SPI_Transmit_DMA+0x1d4>)
 8008086:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808c:	4a44      	ldr	r2, [pc, #272]	; (80081a0 <HAL_SPI_Transmit_DMA+0x1d8>)
 800808e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008094:	4a43      	ldr	r2, [pc, #268]	; (80081a4 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809c:	2200      	movs	r2, #0
 800809e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080ae:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80080b8:	d82d      	bhi.n	8008116 <HAL_SPI_Transmit_DMA+0x14e>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080be:	699b      	ldr	r3, [r3, #24]
 80080c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c4:	d127      	bne.n	8008116 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10f      	bne.n	80080f4 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080e2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	085b      	lsrs	r3, r3, #1
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080f2:	e010      	b.n	8008116 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008102:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008108:	b29b      	uxth	r3, r3
 800810a:	085b      	lsrs	r3, r3, #1
 800810c:	b29b      	uxth	r3, r3
 800810e:	3301      	adds	r3, #1
 8008110:	b29a      	uxth	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	4619      	mov	r1, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	330c      	adds	r3, #12
 8008126:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800812e:	f7fd f84c 	bl	80051ca <HAL_DMA_Start_IT>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d008      	beq.n	800814a <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800813c:	f043 0210 	orr.w	r2, r3, #16
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	75fb      	strb	r3, [r7, #23]

    goto error;
 8008148:	e01e      	b.n	8008188 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b40      	cmp	r3, #64	; 0x40
 8008156:	d007      	beq.n	8008168 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008166:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0220 	orr.w	r2, r2, #32
 8008176:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0202 	orr.w	r2, r2, #2
 8008186:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	0800828b 	.word	0x0800828b
 80081a0:	080081e5 	.word	0x080081e5
 80081a4:	080082a7 	.word	0x080082a7

080081a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081f2:	f7fb fe5b 	bl	8003eac <HAL_GetTick>
 80081f6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0320 	and.w	r3, r3, #32
 8008202:	2b20      	cmp	r3, #32
 8008204:	d03b      	beq.n	800827e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0220 	bic.w	r2, r2, #32
 8008214:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685a      	ldr	r2, [r3, #4]
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f022 0202 	bic.w	r2, r2, #2
 8008224:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	2164      	movs	r1, #100	; 0x64
 800822a:	6978      	ldr	r0, [r7, #20]
 800822c:	f000 f9d2 	bl	80085d4 <SPI_EndRxTxTransaction>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d005      	beq.n	8008242 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800823a:	f043 0220 	orr.w	r2, r3, #32
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d10a      	bne.n	8008260 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800824a:	2300      	movs	r3, #0
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	2200      	movs	r2, #0
 8008264:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008272:	2b00      	cmp	r3, #0
 8008274:	d003      	beq.n	800827e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008276:	6978      	ldr	r0, [r7, #20]
 8008278:	f7ff ffaa 	bl	80081d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800827c:	e002      	b.n	8008284 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800827e:	6978      	ldr	r0, [r7, #20]
 8008280:	f7ff ff92 	bl	80081a8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008296:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f7ff ff8f 	bl	80081bc <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800829e:	bf00      	nop
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 0203 	bic.w	r2, r2, #3
 80082c2:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082c8:	f043 0210 	orr.w	r2, r3, #16
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff ff79 	bl	80081d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b088      	sub	sp, #32
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	4613      	mov	r3, r2
 80082f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80082f8:	f7fb fdd8 	bl	8003eac <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	1a9b      	subs	r3, r3, r2
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	4413      	add	r3, r2
 8008306:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008308:	f7fb fdd0 	bl	8003eac <HAL_GetTick>
 800830c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800830e:	4b39      	ldr	r3, [pc, #228]	; (80083f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	015b      	lsls	r3, r3, #5
 8008314:	0d1b      	lsrs	r3, r3, #20
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	fb02 f303 	mul.w	r3, r2, r3
 800831c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800831e:	e054      	b.n	80083ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008326:	d050      	beq.n	80083ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008328:	f7fb fdc0 	bl	8003eac <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	69bb      	ldr	r3, [r7, #24]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	429a      	cmp	r2, r3
 8008336:	d902      	bls.n	800833e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d13d      	bne.n	80083ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800834c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008356:	d111      	bne.n	800837c <SPI_WaitFlagStateUntilTimeout+0x94>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008360:	d004      	beq.n	800836c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800836a:	d107      	bne.n	800837c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800837a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008384:	d10f      	bne.n	80083a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2201      	movs	r2, #1
 80083aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e017      	b.n	80083ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	3b01      	subs	r3, #1
 80083c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	4013      	ands	r3, r2
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	bf0c      	ite	eq
 80083da:	2301      	moveq	r3, #1
 80083dc:	2300      	movne	r3, #0
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	461a      	mov	r2, r3
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d19b      	bne.n	8008320 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3720      	adds	r7, #32
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000018 	.word	0x20000018

080083f8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08a      	sub	sp, #40	; 0x28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008406:	2300      	movs	r3, #0
 8008408:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800840a:	f7fb fd4f 	bl	8003eac <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	1a9b      	subs	r3, r3, r2
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	4413      	add	r3, r2
 8008418:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800841a:	f7fb fd47 	bl	8003eac <HAL_GetTick>
 800841e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	330c      	adds	r3, #12
 8008426:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008428:	4b3d      	ldr	r3, [pc, #244]	; (8008520 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	4613      	mov	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4413      	add	r3, r2
 8008432:	00da      	lsls	r2, r3, #3
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	0d1b      	lsrs	r3, r3, #20
 8008438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843a:	fb02 f303 	mul.w	r3, r2, r3
 800843e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008440:	e060      	b.n	8008504 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008448:	d107      	bne.n	800845a <SPI_WaitFifoStateUntilTimeout+0x62>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d104      	bne.n	800845a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008458:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008460:	d050      	beq.n	8008504 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008462:	f7fb fd23 	bl	8003eac <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846e:	429a      	cmp	r2, r3
 8008470:	d902      	bls.n	8008478 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	2b00      	cmp	r3, #0
 8008476:	d13d      	bne.n	80084f4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008486:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008490:	d111      	bne.n	80084b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800849a:	d004      	beq.n	80084a6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a4:	d107      	bne.n	80084b6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084be:	d10f      	bne.n	80084e0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e010      	b.n	8008516 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	3b01      	subs	r3, #1
 8008502:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	4013      	ands	r3, r2
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	429a      	cmp	r2, r3
 8008512:	d196      	bne.n	8008442 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3728      	adds	r7, #40	; 0x28
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000018 	.word	0x20000018

08008524 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b086      	sub	sp, #24
 8008528:	af02      	add	r7, sp, #8
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008538:	d111      	bne.n	800855e <SPI_EndRxTransaction+0x3a>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008542:	d004      	beq.n	800854e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800854c:	d107      	bne.n	800855e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800855c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	2200      	movs	r2, #0
 8008566:	2180      	movs	r1, #128	; 0x80
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff febd 	bl	80082e8 <SPI_WaitFlagStateUntilTimeout>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d007      	beq.n	8008584 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e023      	b.n	80085cc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800858c:	d11d      	bne.n	80085ca <SPI_EndRxTransaction+0xa6>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008596:	d004      	beq.n	80085a2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a0:	d113      	bne.n	80085ca <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	9300      	str	r3, [sp, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7ff ff22 	bl	80083f8 <SPI_WaitFifoStateUntilTimeout>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d007      	beq.n	80085ca <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085be:	f043 0220 	orr.w	r2, r3, #32
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e000      	b.n	80085cc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af02      	add	r7, sp, #8
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f7ff ff03 	bl	80083f8 <SPI_WaitFifoStateUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fc:	f043 0220 	orr.w	r2, r3, #32
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e027      	b.n	8008658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	2200      	movs	r2, #0
 8008610:	2180      	movs	r1, #128	; 0x80
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff fe68 	bl	80082e8 <SPI_WaitFlagStateUntilTimeout>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008622:	f043 0220 	orr.w	r2, r3, #32
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e014      	b.n	8008658 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	2200      	movs	r2, #0
 8008636:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f7ff fedc 	bl	80083f8 <SPI_WaitFifoStateUntilTimeout>
 8008640:	4603      	mov	r3, r0
 8008642:	2b00      	cmp	r3, #0
 8008644:	d007      	beq.n	8008656 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800864a:	f043 0220 	orr.w	r2, r3, #32
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e000      	b.n	8008658 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e049      	b.n	8008706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d106      	bne.n	800868c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f7fa fb80 	bl	8002d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	3304      	adds	r3, #4
 800869c:	4619      	mov	r1, r3
 800869e:	4610      	mov	r0, r2
 80086a0:	f000 fbfe 	bl	8008ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b01      	cmp	r3, #1
 8008722:	d001      	beq.n	8008728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e03b      	b.n	80087a0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a19      	ldr	r2, [pc, #100]	; (80087ac <HAL_TIM_Base_Start_IT+0x9c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d009      	beq.n	800875e <HAL_TIM_Base_Start_IT+0x4e>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008752:	d004      	beq.n	800875e <HAL_TIM_Base_Start_IT+0x4e>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a15      	ldr	r2, [pc, #84]	; (80087b0 <HAL_TIM_Base_Start_IT+0xa0>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d115      	bne.n	800878a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	4b13      	ldr	r3, [pc, #76]	; (80087b4 <HAL_TIM_Base_Start_IT+0xa4>)
 8008766:	4013      	ands	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b06      	cmp	r3, #6
 800876e:	d015      	beq.n	800879c <HAL_TIM_Base_Start_IT+0x8c>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008776:	d011      	beq.n	800879c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008788:	e008      	b.n	800879c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f042 0201 	orr.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	e000      	b.n	800879e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800879c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	40012c00 	.word	0x40012c00
 80087b0:	40014000 	.word	0x40014000
 80087b4:	00010007 	.word	0x00010007

080087b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e049      	b.n	800885e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d106      	bne.n	80087e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7fa fab4 	bl	8002d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4619      	mov	r1, r3
 80087f6:	4610      	mov	r0, r2
 80087f8:	f000 fb52 	bl	8008ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2201      	movs	r2, #1
 8008818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3708      	adds	r7, #8
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <HAL_TIM_PWM_Start+0x24>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800887e:	b2db      	uxtb	r3, r3
 8008880:	2b01      	cmp	r3, #1
 8008882:	bf14      	ite	ne
 8008884:	2301      	movne	r3, #1
 8008886:	2300      	moveq	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	e03c      	b.n	8008906 <HAL_TIM_PWM_Start+0x9e>
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	2b04      	cmp	r3, #4
 8008890:	d109      	bne.n	80088a6 <HAL_TIM_PWM_Start+0x3e>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b01      	cmp	r3, #1
 800889c:	bf14      	ite	ne
 800889e:	2301      	movne	r3, #1
 80088a0:	2300      	moveq	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	e02f      	b.n	8008906 <HAL_TIM_PWM_Start+0x9e>
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d109      	bne.n	80088c0 <HAL_TIM_PWM_Start+0x58>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	bf14      	ite	ne
 80088b8:	2301      	movne	r3, #1
 80088ba:	2300      	moveq	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	e022      	b.n	8008906 <HAL_TIM_PWM_Start+0x9e>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	2b0c      	cmp	r3, #12
 80088c4:	d109      	bne.n	80088da <HAL_TIM_PWM_Start+0x72>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	bf14      	ite	ne
 80088d2:	2301      	movne	r3, #1
 80088d4:	2300      	moveq	r3, #0
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	e015      	b.n	8008906 <HAL_TIM_PWM_Start+0x9e>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b10      	cmp	r3, #16
 80088de:	d109      	bne.n	80088f4 <HAL_TIM_PWM_Start+0x8c>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	bf14      	ite	ne
 80088ec:	2301      	movne	r3, #1
 80088ee:	2300      	moveq	r3, #0
 80088f0:	b2db      	uxtb	r3, r3
 80088f2:	e008      	b.n	8008906 <HAL_TIM_PWM_Start+0x9e>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	bf14      	ite	ne
 8008900:	2301      	movne	r3, #1
 8008902:	2300      	moveq	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e07e      	b.n	8008a0c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <HAL_TIM_PWM_Start+0xb6>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2202      	movs	r2, #2
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800891c:	e023      	b.n	8008966 <HAL_TIM_PWM_Start+0xfe>
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	2b04      	cmp	r3, #4
 8008922:	d104      	bne.n	800892e <HAL_TIM_PWM_Start+0xc6>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800892c:	e01b      	b.n	8008966 <HAL_TIM_PWM_Start+0xfe>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b08      	cmp	r3, #8
 8008932:	d104      	bne.n	800893e <HAL_TIM_PWM_Start+0xd6>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2202      	movs	r2, #2
 8008938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800893c:	e013      	b.n	8008966 <HAL_TIM_PWM_Start+0xfe>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	2b0c      	cmp	r3, #12
 8008942:	d104      	bne.n	800894e <HAL_TIM_PWM_Start+0xe6>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800894c:	e00b      	b.n	8008966 <HAL_TIM_PWM_Start+0xfe>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b10      	cmp	r3, #16
 8008952:	d104      	bne.n	800895e <HAL_TIM_PWM_Start+0xf6>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800895c:	e003      	b.n	8008966 <HAL_TIM_PWM_Start+0xfe>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2202      	movs	r2, #2
 8008962:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2201      	movs	r2, #1
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	4618      	mov	r0, r3
 8008970:	f000 fd78 	bl	8009464 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <HAL_TIM_PWM_Start+0x1ac>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d009      	beq.n	8008992 <HAL_TIM_PWM_Start+0x12a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a25      	ldr	r2, [pc, #148]	; (8008a18 <HAL_TIM_PWM_Start+0x1b0>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d004      	beq.n	8008992 <HAL_TIM_PWM_Start+0x12a>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a23      	ldr	r2, [pc, #140]	; (8008a1c <HAL_TIM_PWM_Start+0x1b4>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d101      	bne.n	8008996 <HAL_TIM_PWM_Start+0x12e>
 8008992:	2301      	movs	r3, #1
 8008994:	e000      	b.n	8008998 <HAL_TIM_PWM_Start+0x130>
 8008996:	2300      	movs	r3, #0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d007      	beq.n	80089ac <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089aa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a18      	ldr	r2, [pc, #96]	; (8008a14 <HAL_TIM_PWM_Start+0x1ac>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d009      	beq.n	80089ca <HAL_TIM_PWM_Start+0x162>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089be:	d004      	beq.n	80089ca <HAL_TIM_PWM_Start+0x162>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a14      	ldr	r2, [pc, #80]	; (8008a18 <HAL_TIM_PWM_Start+0x1b0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d115      	bne.n	80089f6 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	4b13      	ldr	r3, [pc, #76]	; (8008a20 <HAL_TIM_PWM_Start+0x1b8>)
 80089d2:	4013      	ands	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2b06      	cmp	r3, #6
 80089da:	d015      	beq.n	8008a08 <HAL_TIM_PWM_Start+0x1a0>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e2:	d011      	beq.n	8008a08 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0201 	orr.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089f4:	e008      	b.n	8008a08 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f042 0201 	orr.w	r2, r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	e000      	b.n	8008a0a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	40012c00 	.word	0x40012c00
 8008a18:	40014000 	.word	0x40014000
 8008a1c:	40014400 	.word	0x40014400
 8008a20:	00010007 	.word	0x00010007

08008a24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f003 0302 	and.w	r3, r3, #2
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d020      	beq.n	8008a88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01b      	beq.n	8008a88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f06f 0202 	mvn.w	r2, #2
 8008a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	f003 0303 	and.w	r3, r3, #3
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f9f8 	bl	8008e64 <HAL_TIM_IC_CaptureCallback>
 8008a74:	e005      	b.n	8008a82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f9ea 	bl	8008e50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 f9fb 	bl	8008e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d020      	beq.n	8008ad4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f003 0304 	and.w	r3, r3, #4
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01b      	beq.n	8008ad4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0204 	mvn.w	r2, #4
 8008aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2202      	movs	r2, #2
 8008aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f9d2 	bl	8008e64 <HAL_TIM_IC_CaptureCallback>
 8008ac0:	e005      	b.n	8008ace <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f9c4 	bl	8008e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f9d5 	bl	8008e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f003 0308 	and.w	r3, r3, #8
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d020      	beq.n	8008b20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01b      	beq.n	8008b20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f06f 0208 	mvn.w	r2, #8
 8008af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2204      	movs	r2, #4
 8008af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f9ac 	bl	8008e64 <HAL_TIM_IC_CaptureCallback>
 8008b0c:	e005      	b.n	8008b1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f99e 	bl	8008e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f9af 	bl	8008e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f003 0310 	and.w	r3, r3, #16
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d020      	beq.n	8008b6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f003 0310 	and.w	r3, r3, #16
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01b      	beq.n	8008b6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f06f 0210 	mvn.w	r2, #16
 8008b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2208      	movs	r2, #8
 8008b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 f986 	bl	8008e64 <HAL_TIM_IC_CaptureCallback>
 8008b58:	e005      	b.n	8008b66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f978 	bl	8008e50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f989 	bl	8008e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d00c      	beq.n	8008b90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f003 0301 	and.w	r3, r3, #1
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d007      	beq.n	8008b90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f06f 0201 	mvn.w	r2, #1
 8008b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7f9 fb30 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d00c      	beq.n	8008bb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d007      	beq.n	8008bb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fd66 	bl	8009680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00c      	beq.n	8008bd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d007      	beq.n	8008bd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fd5e 	bl	8009694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00c      	beq.n	8008bfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d007      	beq.n	8008bfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f948 	bl	8008e8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f003 0320 	and.w	r3, r3, #32
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00c      	beq.n	8008c20 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d007      	beq.n	8008c20 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f06f 0220 	mvn.w	r2, #32
 8008c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fd26 	bl	800966c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c20:	bf00      	nop
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	60f8      	str	r0, [r7, #12]
 8008c30:	60b9      	str	r1, [r7, #8]
 8008c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c34:	2300      	movs	r3, #0
 8008c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d101      	bne.n	8008c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c42:	2302      	movs	r3, #2
 8008c44:	e0ff      	b.n	8008e46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b14      	cmp	r3, #20
 8008c52:	f200 80f0 	bhi.w	8008e36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008cb1 	.word	0x08008cb1
 8008c60:	08008e37 	.word	0x08008e37
 8008c64:	08008e37 	.word	0x08008e37
 8008c68:	08008e37 	.word	0x08008e37
 8008c6c:	08008cf1 	.word	0x08008cf1
 8008c70:	08008e37 	.word	0x08008e37
 8008c74:	08008e37 	.word	0x08008e37
 8008c78:	08008e37 	.word	0x08008e37
 8008c7c:	08008d33 	.word	0x08008d33
 8008c80:	08008e37 	.word	0x08008e37
 8008c84:	08008e37 	.word	0x08008e37
 8008c88:	08008e37 	.word	0x08008e37
 8008c8c:	08008d73 	.word	0x08008d73
 8008c90:	08008e37 	.word	0x08008e37
 8008c94:	08008e37 	.word	0x08008e37
 8008c98:	08008e37 	.word	0x08008e37
 8008c9c:	08008db5 	.word	0x08008db5
 8008ca0:	08008e37 	.word	0x08008e37
 8008ca4:	08008e37 	.word	0x08008e37
 8008ca8:	08008e37 	.word	0x08008e37
 8008cac:	08008df5 	.word	0x08008df5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68b9      	ldr	r1, [r7, #8]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f000 f956 	bl	8008f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	699a      	ldr	r2, [r3, #24]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0208 	orr.w	r2, r2, #8
 8008cca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699a      	ldr	r2, [r3, #24]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 0204 	bic.w	r2, r2, #4
 8008cda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	6999      	ldr	r1, [r3, #24]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	691a      	ldr	r2, [r3, #16]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	619a      	str	r2, [r3, #24]
      break;
 8008cee:	e0a5      	b.n	8008e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68b9      	ldr	r1, [r7, #8]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 f9b2 	bl	8009060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	699a      	ldr	r2, [r3, #24]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699a      	ldr	r2, [r3, #24]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6999      	ldr	r1, [r3, #24]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	021a      	lsls	r2, r3, #8
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	619a      	str	r2, [r3, #24]
      break;
 8008d30:	e084      	b.n	8008e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68b9      	ldr	r1, [r7, #8]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fa0b 	bl	8009154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69da      	ldr	r2, [r3, #28]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f042 0208 	orr.w	r2, r2, #8
 8008d4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69da      	ldr	r2, [r3, #28]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0204 	bic.w	r2, r2, #4
 8008d5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69d9      	ldr	r1, [r3, #28]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	430a      	orrs	r2, r1
 8008d6e:	61da      	str	r2, [r3, #28]
      break;
 8008d70:	e064      	b.n	8008e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	68b9      	ldr	r1, [r7, #8]
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f000 fa63 	bl	8009244 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69da      	ldr	r2, [r3, #28]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	69da      	ldr	r2, [r3, #28]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69d9      	ldr	r1, [r3, #28]
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	021a      	lsls	r2, r3, #8
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	430a      	orrs	r2, r1
 8008db0:	61da      	str	r2, [r3, #28]
      break;
 8008db2:	e043      	b.n	8008e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68b9      	ldr	r1, [r7, #8]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 faa0 	bl	8009300 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0208 	orr.w	r2, r2, #8
 8008dce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0204 	bic.w	r2, r2, #4
 8008dde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	691a      	ldr	r2, [r3, #16]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	430a      	orrs	r2, r1
 8008df0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008df2:	e023      	b.n	8008e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f000 fad8 	bl	80093b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	021a      	lsls	r2, r3, #8
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e34:	e002      	b.n	8008e3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	75fb      	strb	r3, [r7, #23]
      break;
 8008e3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop

08008e50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e94:	bf00      	nop
 8008e96:	370c      	adds	r7, #12
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9e:	4770      	bx	lr

08008ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b085      	sub	sp, #20
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a2a      	ldr	r2, [pc, #168]	; (8008f5c <TIM_Base_SetConfig+0xbc>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d003      	beq.n	8008ec0 <TIM_Base_SetConfig+0x20>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ebe:	d108      	bne.n	8008ed2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a21      	ldr	r2, [pc, #132]	; (8008f5c <TIM_Base_SetConfig+0xbc>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d00b      	beq.n	8008ef2 <TIM_Base_SetConfig+0x52>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee0:	d007      	beq.n	8008ef2 <TIM_Base_SetConfig+0x52>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a1e      	ldr	r2, [pc, #120]	; (8008f60 <TIM_Base_SetConfig+0xc0>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d003      	beq.n	8008ef2 <TIM_Base_SetConfig+0x52>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a1d      	ldr	r2, [pc, #116]	; (8008f64 <TIM_Base_SetConfig+0xc4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d108      	bne.n	8008f04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a0c      	ldr	r2, [pc, #48]	; (8008f5c <TIM_Base_SetConfig+0xbc>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d007      	beq.n	8008f40 <TIM_Base_SetConfig+0xa0>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a0b      	ldr	r2, [pc, #44]	; (8008f60 <TIM_Base_SetConfig+0xc0>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d003      	beq.n	8008f40 <TIM_Base_SetConfig+0xa0>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a0a      	ldr	r2, [pc, #40]	; (8008f64 <TIM_Base_SetConfig+0xc4>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d103      	bne.n	8008f48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	691a      	ldr	r2, [r3, #16]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	615a      	str	r2, [r3, #20]
}
 8008f4e:	bf00      	nop
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	40012c00 	.word	0x40012c00
 8008f60:	40014000 	.word	0x40014000
 8008f64:	40014400 	.word	0x40014400

08008f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a1b      	ldr	r3, [r3, #32]
 8008f7c:	f023 0201 	bic.w	r2, r3, #1
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0303 	bic.w	r3, r3, #3
 8008fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f023 0302 	bic.w	r3, r3, #2
 8008fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a24      	ldr	r2, [pc, #144]	; (8009054 <TIM_OC1_SetConfig+0xec>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d007      	beq.n	8008fd8 <TIM_OC1_SetConfig+0x70>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a23      	ldr	r2, [pc, #140]	; (8009058 <TIM_OC1_SetConfig+0xf0>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_OC1_SetConfig+0x70>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a22      	ldr	r2, [pc, #136]	; (800905c <TIM_OC1_SetConfig+0xf4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d10c      	bne.n	8008ff2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	f023 0308 	bic.w	r3, r3, #8
 8008fde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f023 0304 	bic.w	r3, r3, #4
 8008ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a17      	ldr	r2, [pc, #92]	; (8009054 <TIM_OC1_SetConfig+0xec>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d007      	beq.n	800900a <TIM_OC1_SetConfig+0xa2>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a16      	ldr	r2, [pc, #88]	; (8009058 <TIM_OC1_SetConfig+0xf0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d003      	beq.n	800900a <TIM_OC1_SetConfig+0xa2>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a15      	ldr	r2, [pc, #84]	; (800905c <TIM_OC1_SetConfig+0xf4>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d111      	bne.n	800902e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009012:	693b      	ldr	r3, [r7, #16]
 8009014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	4313      	orrs	r3, r2
 8009022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	4313      	orrs	r3, r2
 800902c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68fa      	ldr	r2, [r7, #12]
 8009038:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	621a      	str	r2, [r3, #32]
}
 8009048:	bf00      	nop
 800904a:	371c      	adds	r7, #28
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	40012c00 	.word	0x40012c00
 8009058:	40014000 	.word	0x40014000
 800905c:	40014400 	.word	0x40014400

08009060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009060:	b480      	push	{r7}
 8009062:	b087      	sub	sp, #28
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	f023 0210 	bic.w	r2, r3, #16
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800908e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800909a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	021b      	lsls	r3, r3, #8
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f023 0320 	bic.w	r3, r3, #32
 80090ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	011b      	lsls	r3, r3, #4
 80090b6:	697a      	ldr	r2, [r7, #20]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a22      	ldr	r2, [pc, #136]	; (8009148 <TIM_OC2_SetConfig+0xe8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d10d      	bne.n	80090e0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	68db      	ldr	r3, [r3, #12]
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	697a      	ldr	r2, [r7, #20]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a19      	ldr	r2, [pc, #100]	; (8009148 <TIM_OC2_SetConfig+0xe8>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d007      	beq.n	80090f8 <TIM_OC2_SetConfig+0x98>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a18      	ldr	r2, [pc, #96]	; (800914c <TIM_OC2_SetConfig+0xec>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d003      	beq.n	80090f8 <TIM_OC2_SetConfig+0x98>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a17      	ldr	r2, [pc, #92]	; (8009150 <TIM_OC2_SetConfig+0xf0>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d113      	bne.n	8009120 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	4313      	orrs	r3, r2
 8009112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4313      	orrs	r3, r2
 800911e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	621a      	str	r2, [r3, #32]
}
 800913a:	bf00      	nop
 800913c:	371c      	adds	r7, #28
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop
 8009148:	40012c00 	.word	0x40012c00
 800914c:	40014000 	.word	0x40014000
 8009150:	40014400 	.word	0x40014400

08009154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009154:	b480      	push	{r7}
 8009156:	b087      	sub	sp, #28
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a1b      	ldr	r3, [r3, #32]
 8009162:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a1b      	ldr	r3, [r3, #32]
 8009168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	69db      	ldr	r3, [r3, #28]
 800917a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f023 0303 	bic.w	r3, r3, #3
 800918e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4313      	orrs	r3, r2
 8009198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	021b      	lsls	r3, r3, #8
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a21      	ldr	r2, [pc, #132]	; (8009238 <TIM_OC3_SetConfig+0xe4>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d10d      	bne.n	80091d2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	021b      	lsls	r3, r3, #8
 80091c4:	697a      	ldr	r2, [r7, #20]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a18      	ldr	r2, [pc, #96]	; (8009238 <TIM_OC3_SetConfig+0xe4>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d007      	beq.n	80091ea <TIM_OC3_SetConfig+0x96>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a17      	ldr	r2, [pc, #92]	; (800923c <TIM_OC3_SetConfig+0xe8>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d003      	beq.n	80091ea <TIM_OC3_SetConfig+0x96>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	4a16      	ldr	r2, [pc, #88]	; (8009240 <TIM_OC3_SetConfig+0xec>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d113      	bne.n	8009212 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	011b      	lsls	r3, r3, #4
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	4313      	orrs	r3, r2
 8009204:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	699b      	ldr	r3, [r3, #24]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	685a      	ldr	r2, [r3, #4]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	621a      	str	r2, [r3, #32]
}
 800922c:	bf00      	nop
 800922e:	371c      	adds	r7, #28
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	40012c00 	.word	0x40012c00
 800923c:	40014000 	.word	0x40014000
 8009240:	40014400 	.word	0x40014400

08009244 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	69db      	ldr	r3, [r3, #28]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800927e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	021b      	lsls	r3, r3, #8
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4313      	orrs	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009292:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	031b      	lsls	r3, r3, #12
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	4313      	orrs	r3, r2
 800929e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a14      	ldr	r2, [pc, #80]	; (80092f4 <TIM_OC4_SetConfig+0xb0>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d007      	beq.n	80092b8 <TIM_OC4_SetConfig+0x74>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a13      	ldr	r2, [pc, #76]	; (80092f8 <TIM_OC4_SetConfig+0xb4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <TIM_OC4_SetConfig+0x74>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a12      	ldr	r2, [pc, #72]	; (80092fc <TIM_OC4_SetConfig+0xb8>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d109      	bne.n	80092cc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	019b      	lsls	r3, r3, #6
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	685a      	ldr	r2, [r3, #4]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	693a      	ldr	r2, [r7, #16]
 80092e4:	621a      	str	r2, [r3, #32]
}
 80092e6:	bf00      	nop
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	40012c00 	.word	0x40012c00
 80092f8:	40014000 	.word	0x40014000
 80092fc:	40014400 	.word	0x40014400

08009300 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800932e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	4313      	orrs	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009344:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	041b      	lsls	r3, r3, #16
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	4313      	orrs	r3, r2
 8009350:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a13      	ldr	r2, [pc, #76]	; (80093a4 <TIM_OC5_SetConfig+0xa4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d007      	beq.n	800936a <TIM_OC5_SetConfig+0x6a>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a12      	ldr	r2, [pc, #72]	; (80093a8 <TIM_OC5_SetConfig+0xa8>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d003      	beq.n	800936a <TIM_OC5_SetConfig+0x6a>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a11      	ldr	r2, [pc, #68]	; (80093ac <TIM_OC5_SetConfig+0xac>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d109      	bne.n	800937e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	4313      	orrs	r3, r2
 800937c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	621a      	str	r2, [r3, #32]
}
 8009398:	bf00      	nop
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr
 80093a4:	40012c00 	.word	0x40012c00
 80093a8:	40014000 	.word	0x40014000
 80093ac:	40014400 	.word	0x40014400

080093b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a1b      	ldr	r3, [r3, #32]
 80093c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	021b      	lsls	r3, r3, #8
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	689b      	ldr	r3, [r3, #8]
 80093fc:	051b      	lsls	r3, r3, #20
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	4313      	orrs	r3, r2
 8009402:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a14      	ldr	r2, [pc, #80]	; (8009458 <TIM_OC6_SetConfig+0xa8>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d007      	beq.n	800941c <TIM_OC6_SetConfig+0x6c>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a13      	ldr	r2, [pc, #76]	; (800945c <TIM_OC6_SetConfig+0xac>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d003      	beq.n	800941c <TIM_OC6_SetConfig+0x6c>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a12      	ldr	r2, [pc, #72]	; (8009460 <TIM_OC6_SetConfig+0xb0>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d109      	bne.n	8009430 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009422:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	029b      	lsls	r3, r3, #10
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	4313      	orrs	r3, r2
 800942e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	621a      	str	r2, [r3, #32]
}
 800944a:	bf00      	nop
 800944c:	371c      	adds	r7, #28
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	40012c00 	.word	0x40012c00
 800945c:	40014000 	.word	0x40014000
 8009460:	40014400 	.word	0x40014400

08009464 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009464:	b480      	push	{r7}
 8009466:	b087      	sub	sp, #28
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f003 031f 	and.w	r3, r3, #31
 8009476:	2201      	movs	r2, #1
 8009478:	fa02 f303 	lsl.w	r3, r2, r3
 800947c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6a1a      	ldr	r2, [r3, #32]
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	43db      	mvns	r3, r3
 8009486:	401a      	ands	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a1a      	ldr	r2, [r3, #32]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f003 031f 	and.w	r3, r3, #31
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	fa01 f303 	lsl.w	r3, r1, r3
 800949c:	431a      	orrs	r2, r3
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	621a      	str	r2, [r3, #32]
}
 80094a2:	bf00      	nop
 80094a4:	371c      	adds	r7, #28
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
	...

080094b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d101      	bne.n	80094c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094c4:	2302      	movs	r3, #2
 80094c6:	e04f      	b.n	8009568 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a21      	ldr	r2, [pc, #132]	; (8009574 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d108      	bne.n	8009504 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4313      	orrs	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800950a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	4313      	orrs	r3, r2
 8009514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a14      	ldr	r2, [pc, #80]	; (8009574 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d009      	beq.n	800953c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009530:	d004      	beq.n	800953c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a10      	ldr	r2, [pc, #64]	; (8009578 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d10c      	bne.n	8009556 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009542:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	68ba      	ldr	r2, [r7, #8]
 800954a:	4313      	orrs	r3, r2
 800954c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	3714      	adds	r7, #20
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	40012c00 	.word	0x40012c00
 8009578:	40014000 	.word	0x40014000

0800957c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009586:	2300      	movs	r3, #0
 8009588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009590:	2b01      	cmp	r3, #1
 8009592:	d101      	bne.n	8009598 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009594:	2302      	movs	r3, #2
 8009596:	e060      	b.n	800965a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	4313      	orrs	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095fe:	4313      	orrs	r3, r2
 8009600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	041b      	lsls	r3, r3, #16
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a14      	ldr	r2, [pc, #80]	; (8009668 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d115      	bne.n	8009648 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	051b      	lsls	r3, r3, #20
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	4313      	orrs	r3, r2
 8009646:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3714      	adds	r7, #20
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	40012c00 	.word	0x40012c00

0800966c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e040      	b.n	800973c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d106      	bne.n	80096d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f7f9 fa3e 	bl	8002b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2224      	movs	r2, #36	; 0x24
 80096d4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0201 	bic.w	r2, r2, #1
 80096e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fba8 	bl	8009e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 f979 	bl	80099ec <UART_SetConfig>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d101      	bne.n	8009704 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e01b      	b.n	800973c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009712:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009722:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0201 	orr.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fc27 	bl	8009f88 <UART_CheckIdleState>
 800973a:	4603      	mov	r3, r0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08a      	sub	sp, #40	; 0x28
 8009748:	af02      	add	r7, sp, #8
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	4613      	mov	r3, r2
 8009752:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009758:	2b20      	cmp	r3, #32
 800975a:	d178      	bne.n	800984e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <HAL_UART_Transmit+0x24>
 8009762:	88fb      	ldrh	r3, [r7, #6]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e071      	b.n	8009850 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2221      	movs	r2, #33	; 0x21
 8009778:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800977a:	f7fa fb97 	bl	8003eac <HAL_GetTick>
 800977e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	88fa      	ldrh	r2, [r7, #6]
 8009784:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	88fa      	ldrh	r2, [r7, #6]
 800978c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	689b      	ldr	r3, [r3, #8]
 8009794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009798:	d108      	bne.n	80097ac <HAL_UART_Transmit+0x68>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d104      	bne.n	80097ac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	61bb      	str	r3, [r7, #24]
 80097aa:	e003      	b.n	80097b4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80097b4:	e030      	b.n	8009818 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	2200      	movs	r2, #0
 80097be:	2180      	movs	r1, #128	; 0x80
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 fc89 	bl	800a0d8 <UART_WaitOnFlagUntilTimeout>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2220      	movs	r2, #32
 80097d0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e03c      	b.n	8009850 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10b      	bne.n	80097f4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	881a      	ldrh	r2, [r3, #0]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097e8:	b292      	uxth	r2, r2
 80097ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	3302      	adds	r3, #2
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	e008      	b.n	8009806 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	781a      	ldrb	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	b292      	uxth	r2, r2
 80097fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	3301      	adds	r3, #1
 8009804:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800980c:	b29b      	uxth	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	b29a      	uxth	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800981e:	b29b      	uxth	r3, r3
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1c8      	bne.n	80097b6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	2200      	movs	r2, #0
 800982c:	2140      	movs	r1, #64	; 0x40
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f000 fc52 	bl	800a0d8 <UART_WaitOnFlagUntilTimeout>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d004      	beq.n	8009844 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2220      	movs	r2, #32
 800983e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e005      	b.n	8009850 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2220      	movs	r2, #32
 8009848:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	e000      	b.n	8009850 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800984e:	2302      	movs	r3, #2
  }
}
 8009850:	4618      	mov	r0, r3
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08a      	sub	sp, #40	; 0x28
 800985c:	af02      	add	r7, sp, #8
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	4613      	mov	r3, r2
 8009866:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800986e:	2b20      	cmp	r3, #32
 8009870:	f040 80b6 	bne.w	80099e0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d002      	beq.n	8009880 <HAL_UART_Receive+0x28>
 800987a:	88fb      	ldrh	r3, [r7, #6]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d101      	bne.n	8009884 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e0ae      	b.n	80099e2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2222      	movs	r2, #34	; 0x22
 8009890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800989a:	f7fa fb07 	bl	8003eac <HAL_GetTick>
 800989e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	88fa      	ldrh	r2, [r7, #6]
 80098a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	88fa      	ldrh	r2, [r7, #6]
 80098ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098b8:	d10e      	bne.n	80098d8 <HAL_UART_Receive+0x80>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d105      	bne.n	80098ce <HAL_UART_Receive+0x76>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80098c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098cc:	e02d      	b.n	800992a <HAL_UART_Receive+0xd2>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	22ff      	movs	r2, #255	; 0xff
 80098d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098d6:	e028      	b.n	800992a <HAL_UART_Receive+0xd2>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10d      	bne.n	80098fc <HAL_UART_Receive+0xa4>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <HAL_UART_Receive+0x9a>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	22ff      	movs	r2, #255	; 0xff
 80098ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098f0:	e01b      	b.n	800992a <HAL_UART_Receive+0xd2>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	227f      	movs	r2, #127	; 0x7f
 80098f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80098fa:	e016      	b.n	800992a <HAL_UART_Receive+0xd2>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009904:	d10d      	bne.n	8009922 <HAL_UART_Receive+0xca>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d104      	bne.n	8009918 <HAL_UART_Receive+0xc0>
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	227f      	movs	r2, #127	; 0x7f
 8009912:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009916:	e008      	b.n	800992a <HAL_UART_Receive+0xd2>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	223f      	movs	r2, #63	; 0x3f
 800991c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009920:	e003      	b.n	800992a <HAL_UART_Receive+0xd2>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009930:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800993a:	d108      	bne.n	800994e <HAL_UART_Receive+0xf6>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d104      	bne.n	800994e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009944:	2300      	movs	r3, #0
 8009946:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	61bb      	str	r3, [r7, #24]
 800994c:	e003      	b.n	8009956 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009952:	2300      	movs	r3, #0
 8009954:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009956:	e037      	b.n	80099c8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	2200      	movs	r2, #0
 8009960:	2120      	movs	r1, #32
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f000 fbb8 	bl	800a0d8 <UART_WaitOnFlagUntilTimeout>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d005      	beq.n	800997a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2220      	movs	r2, #32
 8009972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009976:	2303      	movs	r3, #3
 8009978:	e033      	b.n	80099e2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10c      	bne.n	800999a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009986:	b29a      	uxth	r2, r3
 8009988:	8a7b      	ldrh	r3, [r7, #18]
 800998a:	4013      	ands	r3, r2
 800998c:	b29a      	uxth	r2, r3
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	3302      	adds	r3, #2
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	e00d      	b.n	80099b6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	b2da      	uxtb	r2, r3
 80099a4:	8a7b      	ldrh	r3, [r7, #18]
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	4013      	ands	r3, r2
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	3301      	adds	r3, #1
 80099b4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099bc:	b29b      	uxth	r3, r3
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1c1      	bne.n	8009958 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	e000      	b.n	80099e2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80099e0:	2302      	movs	r3, #2
  }
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3720      	adds	r7, #32
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099f0:	b08a      	sub	sp, #40	; 0x28
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	431a      	orrs	r2, r3
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	4bb4      	ldr	r3, [pc, #720]	; (8009cec <UART_SetConfig+0x300>)
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	6812      	ldr	r2, [r2, #0]
 8009a22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a24:	430b      	orrs	r3, r1
 8009a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	68da      	ldr	r2, [r3, #12]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4aa9      	ldr	r2, [pc, #676]	; (8009cf0 <UART_SetConfig+0x304>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d004      	beq.n	8009a58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a54:	4313      	orrs	r3, r2
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4aa0      	ldr	r2, [pc, #640]	; (8009cf4 <UART_SetConfig+0x308>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d126      	bne.n	8009ac4 <UART_SetConfig+0xd8>
 8009a76:	4ba0      	ldr	r3, [pc, #640]	; (8009cf8 <UART_SetConfig+0x30c>)
 8009a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a7c:	f003 0303 	and.w	r3, r3, #3
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d81b      	bhi.n	8009abc <UART_SetConfig+0xd0>
 8009a84:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <UART_SetConfig+0xa0>)
 8009a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8a:	bf00      	nop
 8009a8c:	08009a9d 	.word	0x08009a9d
 8009a90:	08009aad 	.word	0x08009aad
 8009a94:	08009aa5 	.word	0x08009aa5
 8009a98:	08009ab5 	.word	0x08009ab5
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009aa2:	e080      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009aaa:	e07c      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009aac:	2304      	movs	r3, #4
 8009aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ab2:	e078      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009ab4:	2308      	movs	r3, #8
 8009ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009aba:	e074      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009abc:	2310      	movs	r3, #16
 8009abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ac2:	e070      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a8c      	ldr	r2, [pc, #560]	; (8009cfc <UART_SetConfig+0x310>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d138      	bne.n	8009b40 <UART_SetConfig+0x154>
 8009ace:	4b8a      	ldr	r3, [pc, #552]	; (8009cf8 <UART_SetConfig+0x30c>)
 8009ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad4:	f003 030c 	and.w	r3, r3, #12
 8009ad8:	2b0c      	cmp	r3, #12
 8009ada:	d82d      	bhi.n	8009b38 <UART_SetConfig+0x14c>
 8009adc:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <UART_SetConfig+0xf8>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009b19 	.word	0x08009b19
 8009ae8:	08009b39 	.word	0x08009b39
 8009aec:	08009b39 	.word	0x08009b39
 8009af0:	08009b39 	.word	0x08009b39
 8009af4:	08009b29 	.word	0x08009b29
 8009af8:	08009b39 	.word	0x08009b39
 8009afc:	08009b39 	.word	0x08009b39
 8009b00:	08009b39 	.word	0x08009b39
 8009b04:	08009b21 	.word	0x08009b21
 8009b08:	08009b39 	.word	0x08009b39
 8009b0c:	08009b39 	.word	0x08009b39
 8009b10:	08009b39 	.word	0x08009b39
 8009b14:	08009b31 	.word	0x08009b31
 8009b18:	2300      	movs	r3, #0
 8009b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b1e:	e042      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009b20:	2302      	movs	r3, #2
 8009b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b26:	e03e      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009b28:	2304      	movs	r3, #4
 8009b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b2e:	e03a      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009b30:	2308      	movs	r3, #8
 8009b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b36:	e036      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009b38:	2310      	movs	r3, #16
 8009b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b3e:	e032      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a6a      	ldr	r2, [pc, #424]	; (8009cf0 <UART_SetConfig+0x304>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d12a      	bne.n	8009ba0 <UART_SetConfig+0x1b4>
 8009b4a:	4b6b      	ldr	r3, [pc, #428]	; (8009cf8 <UART_SetConfig+0x30c>)
 8009b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b58:	d01a      	beq.n	8009b90 <UART_SetConfig+0x1a4>
 8009b5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b5e:	d81b      	bhi.n	8009b98 <UART_SetConfig+0x1ac>
 8009b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b64:	d00c      	beq.n	8009b80 <UART_SetConfig+0x194>
 8009b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b6a:	d815      	bhi.n	8009b98 <UART_SetConfig+0x1ac>
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <UART_SetConfig+0x18c>
 8009b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b74:	d008      	beq.n	8009b88 <UART_SetConfig+0x19c>
 8009b76:	e00f      	b.n	8009b98 <UART_SetConfig+0x1ac>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b7e:	e012      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009b80:	2302      	movs	r3, #2
 8009b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b86:	e00e      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009b88:	2304      	movs	r3, #4
 8009b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b8e:	e00a      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009b90:	2308      	movs	r3, #8
 8009b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b96:	e006      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009b98:	2310      	movs	r3, #16
 8009b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b9e:	e002      	b.n	8009ba6 <UART_SetConfig+0x1ba>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a51      	ldr	r2, [pc, #324]	; (8009cf0 <UART_SetConfig+0x304>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d17a      	bne.n	8009ca6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009bb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009bb4:	2b08      	cmp	r3, #8
 8009bb6:	d824      	bhi.n	8009c02 <UART_SetConfig+0x216>
 8009bb8:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <UART_SetConfig+0x1d4>)
 8009bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbe:	bf00      	nop
 8009bc0:	08009be5 	.word	0x08009be5
 8009bc4:	08009c03 	.word	0x08009c03
 8009bc8:	08009bed 	.word	0x08009bed
 8009bcc:	08009c03 	.word	0x08009c03
 8009bd0:	08009bf3 	.word	0x08009bf3
 8009bd4:	08009c03 	.word	0x08009c03
 8009bd8:	08009c03 	.word	0x08009c03
 8009bdc:	08009c03 	.word	0x08009c03
 8009be0:	08009bfb 	.word	0x08009bfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009be4:	f7fd f90a 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 8009be8:	61f8      	str	r0, [r7, #28]
        break;
 8009bea:	e010      	b.n	8009c0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bec:	4b44      	ldr	r3, [pc, #272]	; (8009d00 <UART_SetConfig+0x314>)
 8009bee:	61fb      	str	r3, [r7, #28]
        break;
 8009bf0:	e00d      	b.n	8009c0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bf2:	f7fd f86b 	bl	8006ccc <HAL_RCC_GetSysClockFreq>
 8009bf6:	61f8      	str	r0, [r7, #28]
        break;
 8009bf8:	e009      	b.n	8009c0e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bfe:	61fb      	str	r3, [r7, #28]
        break;
 8009c00:	e005      	b.n	8009c0e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8009c02:	2300      	movs	r3, #0
 8009c04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009c0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f000 8107 	beq.w	8009e24 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	4413      	add	r3, r2
 8009c20:	69fa      	ldr	r2, [r7, #28]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d305      	bcc.n	8009c32 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c2c:	69fa      	ldr	r2, [r7, #28]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d903      	bls.n	8009c3a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009c38:	e0f4      	b.n	8009e24 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	461c      	mov	r4, r3
 8009c40:	4615      	mov	r5, r2
 8009c42:	f04f 0200 	mov.w	r2, #0
 8009c46:	f04f 0300 	mov.w	r3, #0
 8009c4a:	022b      	lsls	r3, r5, #8
 8009c4c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009c50:	0222      	lsls	r2, r4, #8
 8009c52:	68f9      	ldr	r1, [r7, #12]
 8009c54:	6849      	ldr	r1, [r1, #4]
 8009c56:	0849      	lsrs	r1, r1, #1
 8009c58:	2000      	movs	r0, #0
 8009c5a:	4688      	mov	r8, r1
 8009c5c:	4681      	mov	r9, r0
 8009c5e:	eb12 0a08 	adds.w	sl, r2, r8
 8009c62:	eb43 0b09 	adc.w	fp, r3, r9
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	603b      	str	r3, [r7, #0]
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c74:	4650      	mov	r0, sl
 8009c76:	4659      	mov	r1, fp
 8009c78:	f7f7 f806 	bl	8000c88 <__aeabi_uldivmod>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	460b      	mov	r3, r1
 8009c80:	4613      	mov	r3, r2
 8009c82:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c8a:	d308      	bcc.n	8009c9e <UART_SetConfig+0x2b2>
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c92:	d204      	bcs.n	8009c9e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	69ba      	ldr	r2, [r7, #24]
 8009c9a:	60da      	str	r2, [r3, #12]
 8009c9c:	e0c2      	b.n	8009e24 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009ca4:	e0be      	b.n	8009e24 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	69db      	ldr	r3, [r3, #28]
 8009caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cae:	d16a      	bne.n	8009d86 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009cb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cb4:	2b08      	cmp	r3, #8
 8009cb6:	d834      	bhi.n	8009d22 <UART_SetConfig+0x336>
 8009cb8:	a201      	add	r2, pc, #4	; (adr r2, 8009cc0 <UART_SetConfig+0x2d4>)
 8009cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cbe:	bf00      	nop
 8009cc0:	08009ce5 	.word	0x08009ce5
 8009cc4:	08009d05 	.word	0x08009d05
 8009cc8:	08009d0d 	.word	0x08009d0d
 8009ccc:	08009d23 	.word	0x08009d23
 8009cd0:	08009d13 	.word	0x08009d13
 8009cd4:	08009d23 	.word	0x08009d23
 8009cd8:	08009d23 	.word	0x08009d23
 8009cdc:	08009d23 	.word	0x08009d23
 8009ce0:	08009d1b 	.word	0x08009d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ce4:	f7fd f88a 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 8009ce8:	61f8      	str	r0, [r7, #28]
        break;
 8009cea:	e020      	b.n	8009d2e <UART_SetConfig+0x342>
 8009cec:	efff69f3 	.word	0xefff69f3
 8009cf0:	40008000 	.word	0x40008000
 8009cf4:	40013800 	.word	0x40013800
 8009cf8:	40021000 	.word	0x40021000
 8009cfc:	40004400 	.word	0x40004400
 8009d00:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d04:	f7fd f890 	bl	8006e28 <HAL_RCC_GetPCLK2Freq>
 8009d08:	61f8      	str	r0, [r7, #28]
        break;
 8009d0a:	e010      	b.n	8009d2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d0c:	4b4c      	ldr	r3, [pc, #304]	; (8009e40 <UART_SetConfig+0x454>)
 8009d0e:	61fb      	str	r3, [r7, #28]
        break;
 8009d10:	e00d      	b.n	8009d2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d12:	f7fc ffdb 	bl	8006ccc <HAL_RCC_GetSysClockFreq>
 8009d16:	61f8      	str	r0, [r7, #28]
        break;
 8009d18:	e009      	b.n	8009d2e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d1e:	61fb      	str	r3, [r7, #28]
        break;
 8009d20:	e005      	b.n	8009d2e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009d2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d077      	beq.n	8009e24 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	005a      	lsls	r2, r3, #1
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	085b      	lsrs	r3, r3, #1
 8009d3e:	441a      	add	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d48:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b0f      	cmp	r3, #15
 8009d4e:	d916      	bls.n	8009d7e <UART_SetConfig+0x392>
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d56:	d212      	bcs.n	8009d7e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d58:	69bb      	ldr	r3, [r7, #24]
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	f023 030f 	bic.w	r3, r3, #15
 8009d60:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	085b      	lsrs	r3, r3, #1
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	f003 0307 	and.w	r3, r3, #7
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	8afb      	ldrh	r3, [r7, #22]
 8009d70:	4313      	orrs	r3, r2
 8009d72:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	8afa      	ldrh	r2, [r7, #22]
 8009d7a:	60da      	str	r2, [r3, #12]
 8009d7c:	e052      	b.n	8009e24 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009d84:	e04e      	b.n	8009e24 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009d86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d827      	bhi.n	8009dde <UART_SetConfig+0x3f2>
 8009d8e:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <UART_SetConfig+0x3a8>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009dc1 	.word	0x08009dc1
 8009d9c:	08009dc9 	.word	0x08009dc9
 8009da0:	08009ddf 	.word	0x08009ddf
 8009da4:	08009dcf 	.word	0x08009dcf
 8009da8:	08009ddf 	.word	0x08009ddf
 8009dac:	08009ddf 	.word	0x08009ddf
 8009db0:	08009ddf 	.word	0x08009ddf
 8009db4:	08009dd7 	.word	0x08009dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009db8:	f7fd f820 	bl	8006dfc <HAL_RCC_GetPCLK1Freq>
 8009dbc:	61f8      	str	r0, [r7, #28]
        break;
 8009dbe:	e014      	b.n	8009dea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dc0:	f7fd f832 	bl	8006e28 <HAL_RCC_GetPCLK2Freq>
 8009dc4:	61f8      	str	r0, [r7, #28]
        break;
 8009dc6:	e010      	b.n	8009dea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dc8:	4b1d      	ldr	r3, [pc, #116]	; (8009e40 <UART_SetConfig+0x454>)
 8009dca:	61fb      	str	r3, [r7, #28]
        break;
 8009dcc:	e00d      	b.n	8009dea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dce:	f7fc ff7d 	bl	8006ccc <HAL_RCC_GetSysClockFreq>
 8009dd2:	61f8      	str	r0, [r7, #28]
        break;
 8009dd4:	e009      	b.n	8009dea <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dda:	61fb      	str	r3, [r7, #28]
        break;
 8009ddc:	e005      	b.n	8009dea <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009de8:	bf00      	nop
    }

    if (pclk != 0U)
 8009dea:	69fb      	ldr	r3, [r7, #28]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d019      	beq.n	8009e24 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	685b      	ldr	r3, [r3, #4]
 8009df4:	085a      	lsrs	r2, r3, #1
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	441a      	add	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e02:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	2b0f      	cmp	r3, #15
 8009e08:	d909      	bls.n	8009e1e <UART_SetConfig+0x432>
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e10:	d205      	bcs.n	8009e1e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	60da      	str	r2, [r3, #12]
 8009e1c:	e002      	b.n	8009e24 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009e30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3728      	adds	r7, #40	; 0x28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e3e:	bf00      	nop
 8009e40:	00f42400 	.word	0x00f42400

08009e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00a      	beq.n	8009e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d00a      	beq.n	8009eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb6:	f003 0304 	and.w	r3, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00a      	beq.n	8009ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	430a      	orrs	r2, r1
 8009ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed8:	f003 0310 	and.w	r3, r3, #16
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00a      	beq.n	8009ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	430a      	orrs	r2, r1
 8009ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efa:	f003 0320 	and.w	r3, r3, #32
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d00a      	beq.n	8009f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	430a      	orrs	r2, r1
 8009f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d01a      	beq.n	8009f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	430a      	orrs	r2, r1
 8009f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f42:	d10a      	bne.n	8009f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	430a      	orrs	r2, r1
 8009f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00a      	beq.n	8009f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	605a      	str	r2, [r3, #4]
  }
}
 8009f7c:	bf00      	nop
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b098      	sub	sp, #96	; 0x60
 8009f8c:	af02      	add	r7, sp, #8
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f98:	f7f9 ff88 	bl	8003eac <HAL_GetTick>
 8009f9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f003 0308 	and.w	r3, r3, #8
 8009fa8:	2b08      	cmp	r3, #8
 8009faa:	d12e      	bne.n	800a00a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f88c 	bl	800a0d8 <UART_WaitOnFlagUntilTimeout>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d021      	beq.n	800a00a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fce:	e853 3f00 	ldrex	r3, [r3]
 8009fd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009fda:	653b      	str	r3, [r7, #80]	; 0x50
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fe6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fec:	e841 2300 	strex	r3, r2, [r1]
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1e6      	bne.n	8009fc6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2220      	movs	r2, #32
 8009ffc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a006:	2303      	movs	r3, #3
 800a008:	e062      	b.n	800a0d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0304 	and.w	r3, r3, #4
 800a014:	2b04      	cmp	r3, #4
 800a016:	d149      	bne.n	800a0ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a020:	2200      	movs	r2, #0
 800a022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f856 	bl	800a0d8 <UART_WaitOnFlagUntilTimeout>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d03c      	beq.n	800a0ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a03a:	e853 3f00 	ldrex	r3, [r3]
 800a03e:	623b      	str	r3, [r7, #32]
   return(result);
 800a040:	6a3b      	ldr	r3, [r7, #32]
 800a042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a046:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	461a      	mov	r2, r3
 800a04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a050:	633b      	str	r3, [r7, #48]	; 0x30
 800a052:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a058:	e841 2300 	strex	r3, r2, [r1]
 800a05c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e6      	bne.n	800a032 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3308      	adds	r3, #8
 800a06a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	e853 3f00 	ldrex	r3, [r3]
 800a072:	60fb      	str	r3, [r7, #12]
   return(result);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f023 0301 	bic.w	r3, r3, #1
 800a07a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3308      	adds	r3, #8
 800a082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a084:	61fa      	str	r2, [r7, #28]
 800a086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	69b9      	ldr	r1, [r7, #24]
 800a08a:	69fa      	ldr	r2, [r7, #28]
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	617b      	str	r3, [r7, #20]
   return(result);
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e5      	bne.n	800a064 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2220      	movs	r2, #32
 800a09c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e011      	b.n	800a0d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2220      	movs	r2, #32
 800a0b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3758      	adds	r7, #88	; 0x58
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	603b      	str	r3, [r7, #0]
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e8:	e049      	b.n	800a17e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0f0:	d045      	beq.n	800a17e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0f2:	f7f9 fedb 	bl	8003eac <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	69ba      	ldr	r2, [r7, #24]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d302      	bcc.n	800a108 <UART_WaitOnFlagUntilTimeout+0x30>
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d101      	bne.n	800a10c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e048      	b.n	800a19e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 0304 	and.w	r3, r3, #4
 800a116:	2b00      	cmp	r3, #0
 800a118:	d031      	beq.n	800a17e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	f003 0308 	and.w	r3, r3, #8
 800a124:	2b08      	cmp	r3, #8
 800a126:	d110      	bne.n	800a14a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2208      	movs	r2, #8
 800a12e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 f838 	bl	800a1a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2208      	movs	r2, #8
 800a13a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e029      	b.n	800a19e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a158:	d111      	bne.n	800a17e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 f81e 	bl	800a1a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2220      	movs	r2, #32
 800a16e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e00f      	b.n	800a19e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69da      	ldr	r2, [r3, #28]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	4013      	ands	r3, r2
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	bf0c      	ite	eq
 800a18e:	2301      	moveq	r3, #1
 800a190:	2300      	movne	r3, #0
 800a192:	b2db      	uxtb	r3, r3
 800a194:	461a      	mov	r2, r3
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d0a6      	beq.n	800a0ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b095      	sub	sp, #84	; 0x54
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a1ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e6      	bne.n	800a1ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	f023 0301 	bic.w	r3, r3, #1
 800a1f6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a200:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a208:	e841 2300 	strex	r3, r2, [r1]
 800a20c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	2b00      	cmp	r3, #0
 800a212:	d1e5      	bne.n	800a1e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d118      	bne.n	800a24e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	e853 3f00 	ldrex	r3, [r3]
 800a228:	60bb      	str	r3, [r7, #8]
   return(result);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f023 0310 	bic.w	r3, r3, #16
 800a230:	647b      	str	r3, [r7, #68]	; 0x44
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	461a      	mov	r2, r3
 800a238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a23a:	61bb      	str	r3, [r7, #24]
 800a23c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a23e:	6979      	ldr	r1, [r7, #20]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	e841 2300 	strex	r3, r2, [r1]
 800a246:	613b      	str	r3, [r7, #16]
   return(result);
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1e6      	bne.n	800a21c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2220      	movs	r2, #32
 800a252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2200      	movs	r2, #0
 800a25a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a262:	bf00      	nop
 800a264:	3754      	adds	r7, #84	; 0x54
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <__cvt>:
 800a26e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a272:	ec55 4b10 	vmov	r4, r5, d0
 800a276:	2d00      	cmp	r5, #0
 800a278:	460e      	mov	r6, r1
 800a27a:	4619      	mov	r1, r3
 800a27c:	462b      	mov	r3, r5
 800a27e:	bfbb      	ittet	lt
 800a280:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a284:	461d      	movlt	r5, r3
 800a286:	2300      	movge	r3, #0
 800a288:	232d      	movlt	r3, #45	; 0x2d
 800a28a:	700b      	strb	r3, [r1, #0]
 800a28c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a28e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a292:	4691      	mov	r9, r2
 800a294:	f023 0820 	bic.w	r8, r3, #32
 800a298:	bfbc      	itt	lt
 800a29a:	4622      	movlt	r2, r4
 800a29c:	4614      	movlt	r4, r2
 800a29e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2a2:	d005      	beq.n	800a2b0 <__cvt+0x42>
 800a2a4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a2a8:	d100      	bne.n	800a2ac <__cvt+0x3e>
 800a2aa:	3601      	adds	r6, #1
 800a2ac:	2102      	movs	r1, #2
 800a2ae:	e000      	b.n	800a2b2 <__cvt+0x44>
 800a2b0:	2103      	movs	r1, #3
 800a2b2:	ab03      	add	r3, sp, #12
 800a2b4:	9301      	str	r3, [sp, #4]
 800a2b6:	ab02      	add	r3, sp, #8
 800a2b8:	9300      	str	r3, [sp, #0]
 800a2ba:	ec45 4b10 	vmov	d0, r4, r5
 800a2be:	4653      	mov	r3, sl
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	f001 ffb9 	bl	800c238 <_dtoa_r>
 800a2c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a2ca:	4607      	mov	r7, r0
 800a2cc:	d102      	bne.n	800a2d4 <__cvt+0x66>
 800a2ce:	f019 0f01 	tst.w	r9, #1
 800a2d2:	d022      	beq.n	800a31a <__cvt+0xac>
 800a2d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a2d8:	eb07 0906 	add.w	r9, r7, r6
 800a2dc:	d110      	bne.n	800a300 <__cvt+0x92>
 800a2de:	783b      	ldrb	r3, [r7, #0]
 800a2e0:	2b30      	cmp	r3, #48	; 0x30
 800a2e2:	d10a      	bne.n	800a2fa <__cvt+0x8c>
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	f7f6 fbec 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2f0:	b918      	cbnz	r0, 800a2fa <__cvt+0x8c>
 800a2f2:	f1c6 0601 	rsb	r6, r6, #1
 800a2f6:	f8ca 6000 	str.w	r6, [sl]
 800a2fa:	f8da 3000 	ldr.w	r3, [sl]
 800a2fe:	4499      	add	r9, r3
 800a300:	2200      	movs	r2, #0
 800a302:	2300      	movs	r3, #0
 800a304:	4620      	mov	r0, r4
 800a306:	4629      	mov	r1, r5
 800a308:	f7f6 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800a30c:	b108      	cbz	r0, 800a312 <__cvt+0xa4>
 800a30e:	f8cd 900c 	str.w	r9, [sp, #12]
 800a312:	2230      	movs	r2, #48	; 0x30
 800a314:	9b03      	ldr	r3, [sp, #12]
 800a316:	454b      	cmp	r3, r9
 800a318:	d307      	bcc.n	800a32a <__cvt+0xbc>
 800a31a:	9b03      	ldr	r3, [sp, #12]
 800a31c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a31e:	1bdb      	subs	r3, r3, r7
 800a320:	4638      	mov	r0, r7
 800a322:	6013      	str	r3, [r2, #0]
 800a324:	b004      	add	sp, #16
 800a326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a32a:	1c59      	adds	r1, r3, #1
 800a32c:	9103      	str	r1, [sp, #12]
 800a32e:	701a      	strb	r2, [r3, #0]
 800a330:	e7f0      	b.n	800a314 <__cvt+0xa6>

0800a332 <__exponent>:
 800a332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a334:	4603      	mov	r3, r0
 800a336:	2900      	cmp	r1, #0
 800a338:	bfb8      	it	lt
 800a33a:	4249      	neglt	r1, r1
 800a33c:	f803 2b02 	strb.w	r2, [r3], #2
 800a340:	bfb4      	ite	lt
 800a342:	222d      	movlt	r2, #45	; 0x2d
 800a344:	222b      	movge	r2, #43	; 0x2b
 800a346:	2909      	cmp	r1, #9
 800a348:	7042      	strb	r2, [r0, #1]
 800a34a:	dd2a      	ble.n	800a3a2 <__exponent+0x70>
 800a34c:	f10d 0207 	add.w	r2, sp, #7
 800a350:	4617      	mov	r7, r2
 800a352:	260a      	movs	r6, #10
 800a354:	4694      	mov	ip, r2
 800a356:	fb91 f5f6 	sdiv	r5, r1, r6
 800a35a:	fb06 1415 	mls	r4, r6, r5, r1
 800a35e:	3430      	adds	r4, #48	; 0x30
 800a360:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a364:	460c      	mov	r4, r1
 800a366:	2c63      	cmp	r4, #99	; 0x63
 800a368:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a36c:	4629      	mov	r1, r5
 800a36e:	dcf1      	bgt.n	800a354 <__exponent+0x22>
 800a370:	3130      	adds	r1, #48	; 0x30
 800a372:	f1ac 0402 	sub.w	r4, ip, #2
 800a376:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a37a:	1c41      	adds	r1, r0, #1
 800a37c:	4622      	mov	r2, r4
 800a37e:	42ba      	cmp	r2, r7
 800a380:	d30a      	bcc.n	800a398 <__exponent+0x66>
 800a382:	f10d 0209 	add.w	r2, sp, #9
 800a386:	eba2 020c 	sub.w	r2, r2, ip
 800a38a:	42bc      	cmp	r4, r7
 800a38c:	bf88      	it	hi
 800a38e:	2200      	movhi	r2, #0
 800a390:	4413      	add	r3, r2
 800a392:	1a18      	subs	r0, r3, r0
 800a394:	b003      	add	sp, #12
 800a396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a398:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a39c:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a3a0:	e7ed      	b.n	800a37e <__exponent+0x4c>
 800a3a2:	2330      	movs	r3, #48	; 0x30
 800a3a4:	3130      	adds	r1, #48	; 0x30
 800a3a6:	7083      	strb	r3, [r0, #2]
 800a3a8:	70c1      	strb	r1, [r0, #3]
 800a3aa:	1d03      	adds	r3, r0, #4
 800a3ac:	e7f1      	b.n	800a392 <__exponent+0x60>
	...

0800a3b0 <_printf_float>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	ed2d 8b02 	vpush	{d8}
 800a3b8:	b08d      	sub	sp, #52	; 0x34
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a3c0:	4616      	mov	r6, r2
 800a3c2:	461f      	mov	r7, r3
 800a3c4:	4605      	mov	r5, r0
 800a3c6:	f001 fe19 	bl	800bffc <_localeconv_r>
 800a3ca:	f8d0 a000 	ldr.w	sl, [r0]
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	f7f5 ff4e 	bl	8000270 <strlen>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a3e4:	3307      	adds	r3, #7
 800a3e6:	f023 0307 	bic.w	r3, r3, #7
 800a3ea:	f103 0208 	add.w	r2, r3, #8
 800a3ee:	f8c8 2000 	str.w	r2, [r8]
 800a3f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a3fa:	9307      	str	r3, [sp, #28]
 800a3fc:	f8cd 8018 	str.w	r8, [sp, #24]
 800a400:	ee08 0a10 	vmov	s16, r0
 800a404:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a408:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a40c:	4b9e      	ldr	r3, [pc, #632]	; (800a688 <_printf_float+0x2d8>)
 800a40e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a412:	f7f6 fb8b 	bl	8000b2c <__aeabi_dcmpun>
 800a416:	bb88      	cbnz	r0, 800a47c <_printf_float+0xcc>
 800a418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a41c:	4b9a      	ldr	r3, [pc, #616]	; (800a688 <_printf_float+0x2d8>)
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a422:	f7f6 fb65 	bl	8000af0 <__aeabi_dcmple>
 800a426:	bb48      	cbnz	r0, 800a47c <_printf_float+0xcc>
 800a428:	2200      	movs	r2, #0
 800a42a:	2300      	movs	r3, #0
 800a42c:	4640      	mov	r0, r8
 800a42e:	4649      	mov	r1, r9
 800a430:	f7f6 fb54 	bl	8000adc <__aeabi_dcmplt>
 800a434:	b110      	cbz	r0, 800a43c <_printf_float+0x8c>
 800a436:	232d      	movs	r3, #45	; 0x2d
 800a438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a43c:	4a93      	ldr	r2, [pc, #588]	; (800a68c <_printf_float+0x2dc>)
 800a43e:	4b94      	ldr	r3, [pc, #592]	; (800a690 <_printf_float+0x2e0>)
 800a440:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a444:	bf94      	ite	ls
 800a446:	4690      	movls	r8, r2
 800a448:	4698      	movhi	r8, r3
 800a44a:	2303      	movs	r3, #3
 800a44c:	6123      	str	r3, [r4, #16]
 800a44e:	9b05      	ldr	r3, [sp, #20]
 800a450:	f023 0304 	bic.w	r3, r3, #4
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	f04f 0900 	mov.w	r9, #0
 800a45a:	9700      	str	r7, [sp, #0]
 800a45c:	4633      	mov	r3, r6
 800a45e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a460:	4621      	mov	r1, r4
 800a462:	4628      	mov	r0, r5
 800a464:	f000 f9da 	bl	800a81c <_printf_common>
 800a468:	3001      	adds	r0, #1
 800a46a:	f040 8090 	bne.w	800a58e <_printf_float+0x1de>
 800a46e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a472:	b00d      	add	sp, #52	; 0x34
 800a474:	ecbd 8b02 	vpop	{d8}
 800a478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a47c:	4642      	mov	r2, r8
 800a47e:	464b      	mov	r3, r9
 800a480:	4640      	mov	r0, r8
 800a482:	4649      	mov	r1, r9
 800a484:	f7f6 fb52 	bl	8000b2c <__aeabi_dcmpun>
 800a488:	b140      	cbz	r0, 800a49c <_printf_float+0xec>
 800a48a:	464b      	mov	r3, r9
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bfbc      	itt	lt
 800a490:	232d      	movlt	r3, #45	; 0x2d
 800a492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a496:	4a7f      	ldr	r2, [pc, #508]	; (800a694 <_printf_float+0x2e4>)
 800a498:	4b7f      	ldr	r3, [pc, #508]	; (800a698 <_printf_float+0x2e8>)
 800a49a:	e7d1      	b.n	800a440 <_printf_float+0x90>
 800a49c:	6863      	ldr	r3, [r4, #4]
 800a49e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a4a2:	9206      	str	r2, [sp, #24]
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	d13f      	bne.n	800a528 <_printf_float+0x178>
 800a4a8:	2306      	movs	r3, #6
 800a4aa:	6063      	str	r3, [r4, #4]
 800a4ac:	9b05      	ldr	r3, [sp, #20]
 800a4ae:	6861      	ldr	r1, [r4, #4]
 800a4b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	9303      	str	r3, [sp, #12]
 800a4b8:	ab0a      	add	r3, sp, #40	; 0x28
 800a4ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a4be:	ab09      	add	r3, sp, #36	; 0x24
 800a4c0:	ec49 8b10 	vmov	d0, r8, r9
 800a4c4:	9300      	str	r3, [sp, #0]
 800a4c6:	6022      	str	r2, [r4, #0]
 800a4c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	f7ff fece 	bl	800a26e <__cvt>
 800a4d2:	9b06      	ldr	r3, [sp, #24]
 800a4d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a4d6:	2b47      	cmp	r3, #71	; 0x47
 800a4d8:	4680      	mov	r8, r0
 800a4da:	d108      	bne.n	800a4ee <_printf_float+0x13e>
 800a4dc:	1cc8      	adds	r0, r1, #3
 800a4de:	db02      	blt.n	800a4e6 <_printf_float+0x136>
 800a4e0:	6863      	ldr	r3, [r4, #4]
 800a4e2:	4299      	cmp	r1, r3
 800a4e4:	dd41      	ble.n	800a56a <_printf_float+0x1ba>
 800a4e6:	f1ab 0302 	sub.w	r3, fp, #2
 800a4ea:	fa5f fb83 	uxtb.w	fp, r3
 800a4ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4f2:	d820      	bhi.n	800a536 <_printf_float+0x186>
 800a4f4:	3901      	subs	r1, #1
 800a4f6:	465a      	mov	r2, fp
 800a4f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a4fc:	9109      	str	r1, [sp, #36]	; 0x24
 800a4fe:	f7ff ff18 	bl	800a332 <__exponent>
 800a502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a504:	1813      	adds	r3, r2, r0
 800a506:	2a01      	cmp	r2, #1
 800a508:	4681      	mov	r9, r0
 800a50a:	6123      	str	r3, [r4, #16]
 800a50c:	dc02      	bgt.n	800a514 <_printf_float+0x164>
 800a50e:	6822      	ldr	r2, [r4, #0]
 800a510:	07d2      	lsls	r2, r2, #31
 800a512:	d501      	bpl.n	800a518 <_printf_float+0x168>
 800a514:	3301      	adds	r3, #1
 800a516:	6123      	str	r3, [r4, #16]
 800a518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d09c      	beq.n	800a45a <_printf_float+0xaa>
 800a520:	232d      	movs	r3, #45	; 0x2d
 800a522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a526:	e798      	b.n	800a45a <_printf_float+0xaa>
 800a528:	9a06      	ldr	r2, [sp, #24]
 800a52a:	2a47      	cmp	r2, #71	; 0x47
 800a52c:	d1be      	bne.n	800a4ac <_printf_float+0xfc>
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d1bc      	bne.n	800a4ac <_printf_float+0xfc>
 800a532:	2301      	movs	r3, #1
 800a534:	e7b9      	b.n	800a4aa <_printf_float+0xfa>
 800a536:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a53a:	d118      	bne.n	800a56e <_printf_float+0x1be>
 800a53c:	2900      	cmp	r1, #0
 800a53e:	6863      	ldr	r3, [r4, #4]
 800a540:	dd0b      	ble.n	800a55a <_printf_float+0x1aa>
 800a542:	6121      	str	r1, [r4, #16]
 800a544:	b913      	cbnz	r3, 800a54c <_printf_float+0x19c>
 800a546:	6822      	ldr	r2, [r4, #0]
 800a548:	07d0      	lsls	r0, r2, #31
 800a54a:	d502      	bpl.n	800a552 <_printf_float+0x1a2>
 800a54c:	3301      	adds	r3, #1
 800a54e:	440b      	add	r3, r1
 800a550:	6123      	str	r3, [r4, #16]
 800a552:	65a1      	str	r1, [r4, #88]	; 0x58
 800a554:	f04f 0900 	mov.w	r9, #0
 800a558:	e7de      	b.n	800a518 <_printf_float+0x168>
 800a55a:	b913      	cbnz	r3, 800a562 <_printf_float+0x1b2>
 800a55c:	6822      	ldr	r2, [r4, #0]
 800a55e:	07d2      	lsls	r2, r2, #31
 800a560:	d501      	bpl.n	800a566 <_printf_float+0x1b6>
 800a562:	3302      	adds	r3, #2
 800a564:	e7f4      	b.n	800a550 <_printf_float+0x1a0>
 800a566:	2301      	movs	r3, #1
 800a568:	e7f2      	b.n	800a550 <_printf_float+0x1a0>
 800a56a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a570:	4299      	cmp	r1, r3
 800a572:	db05      	blt.n	800a580 <_printf_float+0x1d0>
 800a574:	6823      	ldr	r3, [r4, #0]
 800a576:	6121      	str	r1, [r4, #16]
 800a578:	07d8      	lsls	r0, r3, #31
 800a57a:	d5ea      	bpl.n	800a552 <_printf_float+0x1a2>
 800a57c:	1c4b      	adds	r3, r1, #1
 800a57e:	e7e7      	b.n	800a550 <_printf_float+0x1a0>
 800a580:	2900      	cmp	r1, #0
 800a582:	bfd4      	ite	le
 800a584:	f1c1 0202 	rsble	r2, r1, #2
 800a588:	2201      	movgt	r2, #1
 800a58a:	4413      	add	r3, r2
 800a58c:	e7e0      	b.n	800a550 <_printf_float+0x1a0>
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	055a      	lsls	r2, r3, #21
 800a592:	d407      	bmi.n	800a5a4 <_printf_float+0x1f4>
 800a594:	6923      	ldr	r3, [r4, #16]
 800a596:	4642      	mov	r2, r8
 800a598:	4631      	mov	r1, r6
 800a59a:	4628      	mov	r0, r5
 800a59c:	47b8      	blx	r7
 800a59e:	3001      	adds	r0, #1
 800a5a0:	d12c      	bne.n	800a5fc <_printf_float+0x24c>
 800a5a2:	e764      	b.n	800a46e <_printf_float+0xbe>
 800a5a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a5a8:	f240 80e0 	bls.w	800a76c <_printf_float+0x3bc>
 800a5ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f7f6 fa88 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d034      	beq.n	800a626 <_printf_float+0x276>
 800a5bc:	4a37      	ldr	r2, [pc, #220]	; (800a69c <_printf_float+0x2ec>)
 800a5be:	2301      	movs	r3, #1
 800a5c0:	4631      	mov	r1, r6
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	47b8      	blx	r7
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	f43f af51 	beq.w	800a46e <_printf_float+0xbe>
 800a5cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	db02      	blt.n	800a5da <_printf_float+0x22a>
 800a5d4:	6823      	ldr	r3, [r4, #0]
 800a5d6:	07d8      	lsls	r0, r3, #31
 800a5d8:	d510      	bpl.n	800a5fc <_printf_float+0x24c>
 800a5da:	ee18 3a10 	vmov	r3, s16
 800a5de:	4652      	mov	r2, sl
 800a5e0:	4631      	mov	r1, r6
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	47b8      	blx	r7
 800a5e6:	3001      	adds	r0, #1
 800a5e8:	f43f af41 	beq.w	800a46e <_printf_float+0xbe>
 800a5ec:	f04f 0800 	mov.w	r8, #0
 800a5f0:	f104 091a 	add.w	r9, r4, #26
 800a5f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	4543      	cmp	r3, r8
 800a5fa:	dc09      	bgt.n	800a610 <_printf_float+0x260>
 800a5fc:	6823      	ldr	r3, [r4, #0]
 800a5fe:	079b      	lsls	r3, r3, #30
 800a600:	f100 8107 	bmi.w	800a812 <_printf_float+0x462>
 800a604:	68e0      	ldr	r0, [r4, #12]
 800a606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a608:	4298      	cmp	r0, r3
 800a60a:	bfb8      	it	lt
 800a60c:	4618      	movlt	r0, r3
 800a60e:	e730      	b.n	800a472 <_printf_float+0xc2>
 800a610:	2301      	movs	r3, #1
 800a612:	464a      	mov	r2, r9
 800a614:	4631      	mov	r1, r6
 800a616:	4628      	mov	r0, r5
 800a618:	47b8      	blx	r7
 800a61a:	3001      	adds	r0, #1
 800a61c:	f43f af27 	beq.w	800a46e <_printf_float+0xbe>
 800a620:	f108 0801 	add.w	r8, r8, #1
 800a624:	e7e6      	b.n	800a5f4 <_printf_float+0x244>
 800a626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dc39      	bgt.n	800a6a0 <_printf_float+0x2f0>
 800a62c:	4a1b      	ldr	r2, [pc, #108]	; (800a69c <_printf_float+0x2ec>)
 800a62e:	2301      	movs	r3, #1
 800a630:	4631      	mov	r1, r6
 800a632:	4628      	mov	r0, r5
 800a634:	47b8      	blx	r7
 800a636:	3001      	adds	r0, #1
 800a638:	f43f af19 	beq.w	800a46e <_printf_float+0xbe>
 800a63c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a640:	4313      	orrs	r3, r2
 800a642:	d102      	bne.n	800a64a <_printf_float+0x29a>
 800a644:	6823      	ldr	r3, [r4, #0]
 800a646:	07d9      	lsls	r1, r3, #31
 800a648:	d5d8      	bpl.n	800a5fc <_printf_float+0x24c>
 800a64a:	ee18 3a10 	vmov	r3, s16
 800a64e:	4652      	mov	r2, sl
 800a650:	4631      	mov	r1, r6
 800a652:	4628      	mov	r0, r5
 800a654:	47b8      	blx	r7
 800a656:	3001      	adds	r0, #1
 800a658:	f43f af09 	beq.w	800a46e <_printf_float+0xbe>
 800a65c:	f04f 0900 	mov.w	r9, #0
 800a660:	f104 0a1a 	add.w	sl, r4, #26
 800a664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a666:	425b      	negs	r3, r3
 800a668:	454b      	cmp	r3, r9
 800a66a:	dc01      	bgt.n	800a670 <_printf_float+0x2c0>
 800a66c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a66e:	e792      	b.n	800a596 <_printf_float+0x1e6>
 800a670:	2301      	movs	r3, #1
 800a672:	4652      	mov	r2, sl
 800a674:	4631      	mov	r1, r6
 800a676:	4628      	mov	r0, r5
 800a678:	47b8      	blx	r7
 800a67a:	3001      	adds	r0, #1
 800a67c:	f43f aef7 	beq.w	800a46e <_printf_float+0xbe>
 800a680:	f109 0901 	add.w	r9, r9, #1
 800a684:	e7ee      	b.n	800a664 <_printf_float+0x2b4>
 800a686:	bf00      	nop
 800a688:	7fefffff 	.word	0x7fefffff
 800a68c:	0800ff74 	.word	0x0800ff74
 800a690:	0800ff78 	.word	0x0800ff78
 800a694:	0800ff7c 	.word	0x0800ff7c
 800a698:	0800ff80 	.word	0x0800ff80
 800a69c:	0800ff84 	.word	0x0800ff84
 800a6a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	bfa8      	it	ge
 800a6a8:	461a      	movge	r2, r3
 800a6aa:	2a00      	cmp	r2, #0
 800a6ac:	4691      	mov	r9, r2
 800a6ae:	dc37      	bgt.n	800a720 <_printf_float+0x370>
 800a6b0:	f04f 0b00 	mov.w	fp, #0
 800a6b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6b8:	f104 021a 	add.w	r2, r4, #26
 800a6bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a6be:	9305      	str	r3, [sp, #20]
 800a6c0:	eba3 0309 	sub.w	r3, r3, r9
 800a6c4:	455b      	cmp	r3, fp
 800a6c6:	dc33      	bgt.n	800a730 <_printf_float+0x380>
 800a6c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	db3b      	blt.n	800a748 <_printf_float+0x398>
 800a6d0:	6823      	ldr	r3, [r4, #0]
 800a6d2:	07da      	lsls	r2, r3, #31
 800a6d4:	d438      	bmi.n	800a748 <_printf_float+0x398>
 800a6d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a6da:	eba2 0903 	sub.w	r9, r2, r3
 800a6de:	9b05      	ldr	r3, [sp, #20]
 800a6e0:	1ad2      	subs	r2, r2, r3
 800a6e2:	4591      	cmp	r9, r2
 800a6e4:	bfa8      	it	ge
 800a6e6:	4691      	movge	r9, r2
 800a6e8:	f1b9 0f00 	cmp.w	r9, #0
 800a6ec:	dc35      	bgt.n	800a75a <_printf_float+0x3aa>
 800a6ee:	f04f 0800 	mov.w	r8, #0
 800a6f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6f6:	f104 0a1a 	add.w	sl, r4, #26
 800a6fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6fe:	1a9b      	subs	r3, r3, r2
 800a700:	eba3 0309 	sub.w	r3, r3, r9
 800a704:	4543      	cmp	r3, r8
 800a706:	f77f af79 	ble.w	800a5fc <_printf_float+0x24c>
 800a70a:	2301      	movs	r3, #1
 800a70c:	4652      	mov	r2, sl
 800a70e:	4631      	mov	r1, r6
 800a710:	4628      	mov	r0, r5
 800a712:	47b8      	blx	r7
 800a714:	3001      	adds	r0, #1
 800a716:	f43f aeaa 	beq.w	800a46e <_printf_float+0xbe>
 800a71a:	f108 0801 	add.w	r8, r8, #1
 800a71e:	e7ec      	b.n	800a6fa <_printf_float+0x34a>
 800a720:	4613      	mov	r3, r2
 800a722:	4631      	mov	r1, r6
 800a724:	4642      	mov	r2, r8
 800a726:	4628      	mov	r0, r5
 800a728:	47b8      	blx	r7
 800a72a:	3001      	adds	r0, #1
 800a72c:	d1c0      	bne.n	800a6b0 <_printf_float+0x300>
 800a72e:	e69e      	b.n	800a46e <_printf_float+0xbe>
 800a730:	2301      	movs	r3, #1
 800a732:	4631      	mov	r1, r6
 800a734:	4628      	mov	r0, r5
 800a736:	9205      	str	r2, [sp, #20]
 800a738:	47b8      	blx	r7
 800a73a:	3001      	adds	r0, #1
 800a73c:	f43f ae97 	beq.w	800a46e <_printf_float+0xbe>
 800a740:	9a05      	ldr	r2, [sp, #20]
 800a742:	f10b 0b01 	add.w	fp, fp, #1
 800a746:	e7b9      	b.n	800a6bc <_printf_float+0x30c>
 800a748:	ee18 3a10 	vmov	r3, s16
 800a74c:	4652      	mov	r2, sl
 800a74e:	4631      	mov	r1, r6
 800a750:	4628      	mov	r0, r5
 800a752:	47b8      	blx	r7
 800a754:	3001      	adds	r0, #1
 800a756:	d1be      	bne.n	800a6d6 <_printf_float+0x326>
 800a758:	e689      	b.n	800a46e <_printf_float+0xbe>
 800a75a:	9a05      	ldr	r2, [sp, #20]
 800a75c:	464b      	mov	r3, r9
 800a75e:	4442      	add	r2, r8
 800a760:	4631      	mov	r1, r6
 800a762:	4628      	mov	r0, r5
 800a764:	47b8      	blx	r7
 800a766:	3001      	adds	r0, #1
 800a768:	d1c1      	bne.n	800a6ee <_printf_float+0x33e>
 800a76a:	e680      	b.n	800a46e <_printf_float+0xbe>
 800a76c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a76e:	2a01      	cmp	r2, #1
 800a770:	dc01      	bgt.n	800a776 <_printf_float+0x3c6>
 800a772:	07db      	lsls	r3, r3, #31
 800a774:	d53a      	bpl.n	800a7ec <_printf_float+0x43c>
 800a776:	2301      	movs	r3, #1
 800a778:	4642      	mov	r2, r8
 800a77a:	4631      	mov	r1, r6
 800a77c:	4628      	mov	r0, r5
 800a77e:	47b8      	blx	r7
 800a780:	3001      	adds	r0, #1
 800a782:	f43f ae74 	beq.w	800a46e <_printf_float+0xbe>
 800a786:	ee18 3a10 	vmov	r3, s16
 800a78a:	4652      	mov	r2, sl
 800a78c:	4631      	mov	r1, r6
 800a78e:	4628      	mov	r0, r5
 800a790:	47b8      	blx	r7
 800a792:	3001      	adds	r0, #1
 800a794:	f43f ae6b 	beq.w	800a46e <_printf_float+0xbe>
 800a798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a79c:	2200      	movs	r2, #0
 800a79e:	2300      	movs	r3, #0
 800a7a0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a7a4:	f7f6 f990 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7a8:	b9d8      	cbnz	r0, 800a7e2 <_printf_float+0x432>
 800a7aa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a7ae:	f108 0201 	add.w	r2, r8, #1
 800a7b2:	4631      	mov	r1, r6
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	47b8      	blx	r7
 800a7b8:	3001      	adds	r0, #1
 800a7ba:	d10e      	bne.n	800a7da <_printf_float+0x42a>
 800a7bc:	e657      	b.n	800a46e <_printf_float+0xbe>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	4652      	mov	r2, sl
 800a7c2:	4631      	mov	r1, r6
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	47b8      	blx	r7
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	f43f ae50 	beq.w	800a46e <_printf_float+0xbe>
 800a7ce:	f108 0801 	add.w	r8, r8, #1
 800a7d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	4543      	cmp	r3, r8
 800a7d8:	dcf1      	bgt.n	800a7be <_printf_float+0x40e>
 800a7da:	464b      	mov	r3, r9
 800a7dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a7e0:	e6da      	b.n	800a598 <_printf_float+0x1e8>
 800a7e2:	f04f 0800 	mov.w	r8, #0
 800a7e6:	f104 0a1a 	add.w	sl, r4, #26
 800a7ea:	e7f2      	b.n	800a7d2 <_printf_float+0x422>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	4642      	mov	r2, r8
 800a7f0:	e7df      	b.n	800a7b2 <_printf_float+0x402>
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	464a      	mov	r2, r9
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	4628      	mov	r0, r5
 800a7fa:	47b8      	blx	r7
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	f43f ae36 	beq.w	800a46e <_printf_float+0xbe>
 800a802:	f108 0801 	add.w	r8, r8, #1
 800a806:	68e3      	ldr	r3, [r4, #12]
 800a808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a80a:	1a5b      	subs	r3, r3, r1
 800a80c:	4543      	cmp	r3, r8
 800a80e:	dcf0      	bgt.n	800a7f2 <_printf_float+0x442>
 800a810:	e6f8      	b.n	800a604 <_printf_float+0x254>
 800a812:	f04f 0800 	mov.w	r8, #0
 800a816:	f104 0919 	add.w	r9, r4, #25
 800a81a:	e7f4      	b.n	800a806 <_printf_float+0x456>

0800a81c <_printf_common>:
 800a81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a820:	4616      	mov	r6, r2
 800a822:	4699      	mov	r9, r3
 800a824:	688a      	ldr	r2, [r1, #8]
 800a826:	690b      	ldr	r3, [r1, #16]
 800a828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a82c:	4293      	cmp	r3, r2
 800a82e:	bfb8      	it	lt
 800a830:	4613      	movlt	r3, r2
 800a832:	6033      	str	r3, [r6, #0]
 800a834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a838:	4607      	mov	r7, r0
 800a83a:	460c      	mov	r4, r1
 800a83c:	b10a      	cbz	r2, 800a842 <_printf_common+0x26>
 800a83e:	3301      	adds	r3, #1
 800a840:	6033      	str	r3, [r6, #0]
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	0699      	lsls	r1, r3, #26
 800a846:	bf42      	ittt	mi
 800a848:	6833      	ldrmi	r3, [r6, #0]
 800a84a:	3302      	addmi	r3, #2
 800a84c:	6033      	strmi	r3, [r6, #0]
 800a84e:	6825      	ldr	r5, [r4, #0]
 800a850:	f015 0506 	ands.w	r5, r5, #6
 800a854:	d106      	bne.n	800a864 <_printf_common+0x48>
 800a856:	f104 0a19 	add.w	sl, r4, #25
 800a85a:	68e3      	ldr	r3, [r4, #12]
 800a85c:	6832      	ldr	r2, [r6, #0]
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	42ab      	cmp	r3, r5
 800a862:	dc26      	bgt.n	800a8b2 <_printf_common+0x96>
 800a864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a868:	1e13      	subs	r3, r2, #0
 800a86a:	6822      	ldr	r2, [r4, #0]
 800a86c:	bf18      	it	ne
 800a86e:	2301      	movne	r3, #1
 800a870:	0692      	lsls	r2, r2, #26
 800a872:	d42b      	bmi.n	800a8cc <_printf_common+0xb0>
 800a874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a878:	4649      	mov	r1, r9
 800a87a:	4638      	mov	r0, r7
 800a87c:	47c0      	blx	r8
 800a87e:	3001      	adds	r0, #1
 800a880:	d01e      	beq.n	800a8c0 <_printf_common+0xa4>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	6922      	ldr	r2, [r4, #16]
 800a886:	f003 0306 	and.w	r3, r3, #6
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	bf02      	ittt	eq
 800a88e:	68e5      	ldreq	r5, [r4, #12]
 800a890:	6833      	ldreq	r3, [r6, #0]
 800a892:	1aed      	subeq	r5, r5, r3
 800a894:	68a3      	ldr	r3, [r4, #8]
 800a896:	bf0c      	ite	eq
 800a898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a89c:	2500      	movne	r5, #0
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	bfc4      	itt	gt
 800a8a2:	1a9b      	subgt	r3, r3, r2
 800a8a4:	18ed      	addgt	r5, r5, r3
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	341a      	adds	r4, #26
 800a8aa:	42b5      	cmp	r5, r6
 800a8ac:	d11a      	bne.n	800a8e4 <_printf_common+0xc8>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e008      	b.n	800a8c4 <_printf_common+0xa8>
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	4652      	mov	r2, sl
 800a8b6:	4649      	mov	r1, r9
 800a8b8:	4638      	mov	r0, r7
 800a8ba:	47c0      	blx	r8
 800a8bc:	3001      	adds	r0, #1
 800a8be:	d103      	bne.n	800a8c8 <_printf_common+0xac>
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c8:	3501      	adds	r5, #1
 800a8ca:	e7c6      	b.n	800a85a <_printf_common+0x3e>
 800a8cc:	18e1      	adds	r1, r4, r3
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	2030      	movs	r0, #48	; 0x30
 800a8d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8d6:	4422      	add	r2, r4
 800a8d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8e0:	3302      	adds	r3, #2
 800a8e2:	e7c7      	b.n	800a874 <_printf_common+0x58>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	4622      	mov	r2, r4
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	47c0      	blx	r8
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	d0e6      	beq.n	800a8c0 <_printf_common+0xa4>
 800a8f2:	3601      	adds	r6, #1
 800a8f4:	e7d9      	b.n	800a8aa <_printf_common+0x8e>
	...

0800a8f8 <_printf_i>:
 800a8f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	7e0f      	ldrb	r7, [r1, #24]
 800a8fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a900:	2f78      	cmp	r7, #120	; 0x78
 800a902:	4691      	mov	r9, r2
 800a904:	4680      	mov	r8, r0
 800a906:	460c      	mov	r4, r1
 800a908:	469a      	mov	sl, r3
 800a90a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a90e:	d807      	bhi.n	800a920 <_printf_i+0x28>
 800a910:	2f62      	cmp	r7, #98	; 0x62
 800a912:	d80a      	bhi.n	800a92a <_printf_i+0x32>
 800a914:	2f00      	cmp	r7, #0
 800a916:	f000 80d4 	beq.w	800aac2 <_printf_i+0x1ca>
 800a91a:	2f58      	cmp	r7, #88	; 0x58
 800a91c:	f000 80c0 	beq.w	800aaa0 <_printf_i+0x1a8>
 800a920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a928:	e03a      	b.n	800a9a0 <_printf_i+0xa8>
 800a92a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a92e:	2b15      	cmp	r3, #21
 800a930:	d8f6      	bhi.n	800a920 <_printf_i+0x28>
 800a932:	a101      	add	r1, pc, #4	; (adr r1, 800a938 <_printf_i+0x40>)
 800a934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a938:	0800a991 	.word	0x0800a991
 800a93c:	0800a9a5 	.word	0x0800a9a5
 800a940:	0800a921 	.word	0x0800a921
 800a944:	0800a921 	.word	0x0800a921
 800a948:	0800a921 	.word	0x0800a921
 800a94c:	0800a921 	.word	0x0800a921
 800a950:	0800a9a5 	.word	0x0800a9a5
 800a954:	0800a921 	.word	0x0800a921
 800a958:	0800a921 	.word	0x0800a921
 800a95c:	0800a921 	.word	0x0800a921
 800a960:	0800a921 	.word	0x0800a921
 800a964:	0800aaa9 	.word	0x0800aaa9
 800a968:	0800a9d1 	.word	0x0800a9d1
 800a96c:	0800aa63 	.word	0x0800aa63
 800a970:	0800a921 	.word	0x0800a921
 800a974:	0800a921 	.word	0x0800a921
 800a978:	0800aacb 	.word	0x0800aacb
 800a97c:	0800a921 	.word	0x0800a921
 800a980:	0800a9d1 	.word	0x0800a9d1
 800a984:	0800a921 	.word	0x0800a921
 800a988:	0800a921 	.word	0x0800a921
 800a98c:	0800aa6b 	.word	0x0800aa6b
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	1d1a      	adds	r2, r3, #4
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	602a      	str	r2, [r5, #0]
 800a998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a99c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e09f      	b.n	800aae4 <_printf_i+0x1ec>
 800a9a4:	6820      	ldr	r0, [r4, #0]
 800a9a6:	682b      	ldr	r3, [r5, #0]
 800a9a8:	0607      	lsls	r7, r0, #24
 800a9aa:	f103 0104 	add.w	r1, r3, #4
 800a9ae:	6029      	str	r1, [r5, #0]
 800a9b0:	d501      	bpl.n	800a9b6 <_printf_i+0xbe>
 800a9b2:	681e      	ldr	r6, [r3, #0]
 800a9b4:	e003      	b.n	800a9be <_printf_i+0xc6>
 800a9b6:	0646      	lsls	r6, r0, #25
 800a9b8:	d5fb      	bpl.n	800a9b2 <_printf_i+0xba>
 800a9ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a9be:	2e00      	cmp	r6, #0
 800a9c0:	da03      	bge.n	800a9ca <_printf_i+0xd2>
 800a9c2:	232d      	movs	r3, #45	; 0x2d
 800a9c4:	4276      	negs	r6, r6
 800a9c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9ca:	485a      	ldr	r0, [pc, #360]	; (800ab34 <_printf_i+0x23c>)
 800a9cc:	230a      	movs	r3, #10
 800a9ce:	e012      	b.n	800a9f6 <_printf_i+0xfe>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	6820      	ldr	r0, [r4, #0]
 800a9d4:	1d19      	adds	r1, r3, #4
 800a9d6:	6029      	str	r1, [r5, #0]
 800a9d8:	0605      	lsls	r5, r0, #24
 800a9da:	d501      	bpl.n	800a9e0 <_printf_i+0xe8>
 800a9dc:	681e      	ldr	r6, [r3, #0]
 800a9de:	e002      	b.n	800a9e6 <_printf_i+0xee>
 800a9e0:	0641      	lsls	r1, r0, #25
 800a9e2:	d5fb      	bpl.n	800a9dc <_printf_i+0xe4>
 800a9e4:	881e      	ldrh	r6, [r3, #0]
 800a9e6:	4853      	ldr	r0, [pc, #332]	; (800ab34 <_printf_i+0x23c>)
 800a9e8:	2f6f      	cmp	r7, #111	; 0x6f
 800a9ea:	bf0c      	ite	eq
 800a9ec:	2308      	moveq	r3, #8
 800a9ee:	230a      	movne	r3, #10
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9f6:	6865      	ldr	r5, [r4, #4]
 800a9f8:	60a5      	str	r5, [r4, #8]
 800a9fa:	2d00      	cmp	r5, #0
 800a9fc:	bfa2      	ittt	ge
 800a9fe:	6821      	ldrge	r1, [r4, #0]
 800aa00:	f021 0104 	bicge.w	r1, r1, #4
 800aa04:	6021      	strge	r1, [r4, #0]
 800aa06:	b90e      	cbnz	r6, 800aa0c <_printf_i+0x114>
 800aa08:	2d00      	cmp	r5, #0
 800aa0a:	d04b      	beq.n	800aaa4 <_printf_i+0x1ac>
 800aa0c:	4615      	mov	r5, r2
 800aa0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa12:	fb03 6711 	mls	r7, r3, r1, r6
 800aa16:	5dc7      	ldrb	r7, [r0, r7]
 800aa18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa1c:	4637      	mov	r7, r6
 800aa1e:	42bb      	cmp	r3, r7
 800aa20:	460e      	mov	r6, r1
 800aa22:	d9f4      	bls.n	800aa0e <_printf_i+0x116>
 800aa24:	2b08      	cmp	r3, #8
 800aa26:	d10b      	bne.n	800aa40 <_printf_i+0x148>
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	07de      	lsls	r6, r3, #31
 800aa2c:	d508      	bpl.n	800aa40 <_printf_i+0x148>
 800aa2e:	6923      	ldr	r3, [r4, #16]
 800aa30:	6861      	ldr	r1, [r4, #4]
 800aa32:	4299      	cmp	r1, r3
 800aa34:	bfde      	ittt	le
 800aa36:	2330      	movle	r3, #48	; 0x30
 800aa38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aa40:	1b52      	subs	r2, r2, r5
 800aa42:	6122      	str	r2, [r4, #16]
 800aa44:	f8cd a000 	str.w	sl, [sp]
 800aa48:	464b      	mov	r3, r9
 800aa4a:	aa03      	add	r2, sp, #12
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	4640      	mov	r0, r8
 800aa50:	f7ff fee4 	bl	800a81c <_printf_common>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d14a      	bne.n	800aaee <_printf_i+0x1f6>
 800aa58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa5c:	b004      	add	sp, #16
 800aa5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	f043 0320 	orr.w	r3, r3, #32
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	4833      	ldr	r0, [pc, #204]	; (800ab38 <_printf_i+0x240>)
 800aa6c:	2778      	movs	r7, #120	; 0x78
 800aa6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa72:	6823      	ldr	r3, [r4, #0]
 800aa74:	6829      	ldr	r1, [r5, #0]
 800aa76:	061f      	lsls	r7, r3, #24
 800aa78:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa7c:	d402      	bmi.n	800aa84 <_printf_i+0x18c>
 800aa7e:	065f      	lsls	r7, r3, #25
 800aa80:	bf48      	it	mi
 800aa82:	b2b6      	uxthmi	r6, r6
 800aa84:	07df      	lsls	r7, r3, #31
 800aa86:	bf48      	it	mi
 800aa88:	f043 0320 	orrmi.w	r3, r3, #32
 800aa8c:	6029      	str	r1, [r5, #0]
 800aa8e:	bf48      	it	mi
 800aa90:	6023      	strmi	r3, [r4, #0]
 800aa92:	b91e      	cbnz	r6, 800aa9c <_printf_i+0x1a4>
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	f023 0320 	bic.w	r3, r3, #32
 800aa9a:	6023      	str	r3, [r4, #0]
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	e7a7      	b.n	800a9f0 <_printf_i+0xf8>
 800aaa0:	4824      	ldr	r0, [pc, #144]	; (800ab34 <_printf_i+0x23c>)
 800aaa2:	e7e4      	b.n	800aa6e <_printf_i+0x176>
 800aaa4:	4615      	mov	r5, r2
 800aaa6:	e7bd      	b.n	800aa24 <_printf_i+0x12c>
 800aaa8:	682b      	ldr	r3, [r5, #0]
 800aaaa:	6826      	ldr	r6, [r4, #0]
 800aaac:	6961      	ldr	r1, [r4, #20]
 800aaae:	1d18      	adds	r0, r3, #4
 800aab0:	6028      	str	r0, [r5, #0]
 800aab2:	0635      	lsls	r5, r6, #24
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	d501      	bpl.n	800aabc <_printf_i+0x1c4>
 800aab8:	6019      	str	r1, [r3, #0]
 800aaba:	e002      	b.n	800aac2 <_printf_i+0x1ca>
 800aabc:	0670      	lsls	r0, r6, #25
 800aabe:	d5fb      	bpl.n	800aab8 <_printf_i+0x1c0>
 800aac0:	8019      	strh	r1, [r3, #0]
 800aac2:	2300      	movs	r3, #0
 800aac4:	6123      	str	r3, [r4, #16]
 800aac6:	4615      	mov	r5, r2
 800aac8:	e7bc      	b.n	800aa44 <_printf_i+0x14c>
 800aaca:	682b      	ldr	r3, [r5, #0]
 800aacc:	1d1a      	adds	r2, r3, #4
 800aace:	602a      	str	r2, [r5, #0]
 800aad0:	681d      	ldr	r5, [r3, #0]
 800aad2:	6862      	ldr	r2, [r4, #4]
 800aad4:	2100      	movs	r1, #0
 800aad6:	4628      	mov	r0, r5
 800aad8:	f7f5 fb7a 	bl	80001d0 <memchr>
 800aadc:	b108      	cbz	r0, 800aae2 <_printf_i+0x1ea>
 800aade:	1b40      	subs	r0, r0, r5
 800aae0:	6060      	str	r0, [r4, #4]
 800aae2:	6863      	ldr	r3, [r4, #4]
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	2300      	movs	r3, #0
 800aae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaec:	e7aa      	b.n	800aa44 <_printf_i+0x14c>
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	462a      	mov	r2, r5
 800aaf2:	4649      	mov	r1, r9
 800aaf4:	4640      	mov	r0, r8
 800aaf6:	47d0      	blx	sl
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d0ad      	beq.n	800aa58 <_printf_i+0x160>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	079b      	lsls	r3, r3, #30
 800ab00:	d413      	bmi.n	800ab2a <_printf_i+0x232>
 800ab02:	68e0      	ldr	r0, [r4, #12]
 800ab04:	9b03      	ldr	r3, [sp, #12]
 800ab06:	4298      	cmp	r0, r3
 800ab08:	bfb8      	it	lt
 800ab0a:	4618      	movlt	r0, r3
 800ab0c:	e7a6      	b.n	800aa5c <_printf_i+0x164>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	4632      	mov	r2, r6
 800ab12:	4649      	mov	r1, r9
 800ab14:	4640      	mov	r0, r8
 800ab16:	47d0      	blx	sl
 800ab18:	3001      	adds	r0, #1
 800ab1a:	d09d      	beq.n	800aa58 <_printf_i+0x160>
 800ab1c:	3501      	adds	r5, #1
 800ab1e:	68e3      	ldr	r3, [r4, #12]
 800ab20:	9903      	ldr	r1, [sp, #12]
 800ab22:	1a5b      	subs	r3, r3, r1
 800ab24:	42ab      	cmp	r3, r5
 800ab26:	dcf2      	bgt.n	800ab0e <_printf_i+0x216>
 800ab28:	e7eb      	b.n	800ab02 <_printf_i+0x20a>
 800ab2a:	2500      	movs	r5, #0
 800ab2c:	f104 0619 	add.w	r6, r4, #25
 800ab30:	e7f5      	b.n	800ab1e <_printf_i+0x226>
 800ab32:	bf00      	nop
 800ab34:	0800ff86 	.word	0x0800ff86
 800ab38:	0800ff97 	.word	0x0800ff97

0800ab3c <_scanf_float>:
 800ab3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	b087      	sub	sp, #28
 800ab42:	4617      	mov	r7, r2
 800ab44:	9303      	str	r3, [sp, #12]
 800ab46:	688b      	ldr	r3, [r1, #8]
 800ab48:	1e5a      	subs	r2, r3, #1
 800ab4a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ab4e:	bf83      	ittte	hi
 800ab50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ab54:	195b      	addhi	r3, r3, r5
 800ab56:	9302      	strhi	r3, [sp, #8]
 800ab58:	2300      	movls	r3, #0
 800ab5a:	bf86      	itte	hi
 800ab5c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ab60:	608b      	strhi	r3, [r1, #8]
 800ab62:	9302      	strls	r3, [sp, #8]
 800ab64:	680b      	ldr	r3, [r1, #0]
 800ab66:	468b      	mov	fp, r1
 800ab68:	2500      	movs	r5, #0
 800ab6a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ab6e:	f84b 3b1c 	str.w	r3, [fp], #28
 800ab72:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ab76:	4680      	mov	r8, r0
 800ab78:	460c      	mov	r4, r1
 800ab7a:	465e      	mov	r6, fp
 800ab7c:	46aa      	mov	sl, r5
 800ab7e:	46a9      	mov	r9, r5
 800ab80:	9501      	str	r5, [sp, #4]
 800ab82:	68a2      	ldr	r2, [r4, #8]
 800ab84:	b152      	cbz	r2, 800ab9c <_scanf_float+0x60>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	2b4e      	cmp	r3, #78	; 0x4e
 800ab8c:	d864      	bhi.n	800ac58 <_scanf_float+0x11c>
 800ab8e:	2b40      	cmp	r3, #64	; 0x40
 800ab90:	d83c      	bhi.n	800ac0c <_scanf_float+0xd0>
 800ab92:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ab96:	b2c8      	uxtb	r0, r1
 800ab98:	280e      	cmp	r0, #14
 800ab9a:	d93a      	bls.n	800ac12 <_scanf_float+0xd6>
 800ab9c:	f1b9 0f00 	cmp.w	r9, #0
 800aba0:	d003      	beq.n	800abaa <_scanf_float+0x6e>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800abae:	f1ba 0f01 	cmp.w	sl, #1
 800abb2:	f200 8113 	bhi.w	800addc <_scanf_float+0x2a0>
 800abb6:	455e      	cmp	r6, fp
 800abb8:	f200 8105 	bhi.w	800adc6 <_scanf_float+0x28a>
 800abbc:	2501      	movs	r5, #1
 800abbe:	4628      	mov	r0, r5
 800abc0:	b007      	add	sp, #28
 800abc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800abca:	2a0d      	cmp	r2, #13
 800abcc:	d8e6      	bhi.n	800ab9c <_scanf_float+0x60>
 800abce:	a101      	add	r1, pc, #4	; (adr r1, 800abd4 <_scanf_float+0x98>)
 800abd0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800abd4:	0800ad13 	.word	0x0800ad13
 800abd8:	0800ab9d 	.word	0x0800ab9d
 800abdc:	0800ab9d 	.word	0x0800ab9d
 800abe0:	0800ab9d 	.word	0x0800ab9d
 800abe4:	0800ad73 	.word	0x0800ad73
 800abe8:	0800ad4b 	.word	0x0800ad4b
 800abec:	0800ab9d 	.word	0x0800ab9d
 800abf0:	0800ab9d 	.word	0x0800ab9d
 800abf4:	0800ad21 	.word	0x0800ad21
 800abf8:	0800ab9d 	.word	0x0800ab9d
 800abfc:	0800ab9d 	.word	0x0800ab9d
 800ac00:	0800ab9d 	.word	0x0800ab9d
 800ac04:	0800ab9d 	.word	0x0800ab9d
 800ac08:	0800acd9 	.word	0x0800acd9
 800ac0c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ac10:	e7db      	b.n	800abca <_scanf_float+0x8e>
 800ac12:	290e      	cmp	r1, #14
 800ac14:	d8c2      	bhi.n	800ab9c <_scanf_float+0x60>
 800ac16:	a001      	add	r0, pc, #4	; (adr r0, 800ac1c <_scanf_float+0xe0>)
 800ac18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ac1c:	0800accb 	.word	0x0800accb
 800ac20:	0800ab9d 	.word	0x0800ab9d
 800ac24:	0800accb 	.word	0x0800accb
 800ac28:	0800ad5f 	.word	0x0800ad5f
 800ac2c:	0800ab9d 	.word	0x0800ab9d
 800ac30:	0800ac79 	.word	0x0800ac79
 800ac34:	0800acb5 	.word	0x0800acb5
 800ac38:	0800acb5 	.word	0x0800acb5
 800ac3c:	0800acb5 	.word	0x0800acb5
 800ac40:	0800acb5 	.word	0x0800acb5
 800ac44:	0800acb5 	.word	0x0800acb5
 800ac48:	0800acb5 	.word	0x0800acb5
 800ac4c:	0800acb5 	.word	0x0800acb5
 800ac50:	0800acb5 	.word	0x0800acb5
 800ac54:	0800acb5 	.word	0x0800acb5
 800ac58:	2b6e      	cmp	r3, #110	; 0x6e
 800ac5a:	d809      	bhi.n	800ac70 <_scanf_float+0x134>
 800ac5c:	2b60      	cmp	r3, #96	; 0x60
 800ac5e:	d8b2      	bhi.n	800abc6 <_scanf_float+0x8a>
 800ac60:	2b54      	cmp	r3, #84	; 0x54
 800ac62:	d077      	beq.n	800ad54 <_scanf_float+0x218>
 800ac64:	2b59      	cmp	r3, #89	; 0x59
 800ac66:	d199      	bne.n	800ab9c <_scanf_float+0x60>
 800ac68:	2d07      	cmp	r5, #7
 800ac6a:	d197      	bne.n	800ab9c <_scanf_float+0x60>
 800ac6c:	2508      	movs	r5, #8
 800ac6e:	e029      	b.n	800acc4 <_scanf_float+0x188>
 800ac70:	2b74      	cmp	r3, #116	; 0x74
 800ac72:	d06f      	beq.n	800ad54 <_scanf_float+0x218>
 800ac74:	2b79      	cmp	r3, #121	; 0x79
 800ac76:	e7f6      	b.n	800ac66 <_scanf_float+0x12a>
 800ac78:	6821      	ldr	r1, [r4, #0]
 800ac7a:	05c8      	lsls	r0, r1, #23
 800ac7c:	d51a      	bpl.n	800acb4 <_scanf_float+0x178>
 800ac7e:	9b02      	ldr	r3, [sp, #8]
 800ac80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ac84:	6021      	str	r1, [r4, #0]
 800ac86:	f109 0901 	add.w	r9, r9, #1
 800ac8a:	b11b      	cbz	r3, 800ac94 <_scanf_float+0x158>
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	3201      	adds	r2, #1
 800ac90:	9302      	str	r3, [sp, #8]
 800ac92:	60a2      	str	r2, [r4, #8]
 800ac94:	68a3      	ldr	r3, [r4, #8]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	60a3      	str	r3, [r4, #8]
 800ac9a:	6923      	ldr	r3, [r4, #16]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	6123      	str	r3, [r4, #16]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	3b01      	subs	r3, #1
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	607b      	str	r3, [r7, #4]
 800aca8:	f340 8084 	ble.w	800adb4 <_scanf_float+0x278>
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	3301      	adds	r3, #1
 800acb0:	603b      	str	r3, [r7, #0]
 800acb2:	e766      	b.n	800ab82 <_scanf_float+0x46>
 800acb4:	eb1a 0f05 	cmn.w	sl, r5
 800acb8:	f47f af70 	bne.w	800ab9c <_scanf_float+0x60>
 800acbc:	6822      	ldr	r2, [r4, #0]
 800acbe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800acc2:	6022      	str	r2, [r4, #0]
 800acc4:	f806 3b01 	strb.w	r3, [r6], #1
 800acc8:	e7e4      	b.n	800ac94 <_scanf_float+0x158>
 800acca:	6822      	ldr	r2, [r4, #0]
 800accc:	0610      	lsls	r0, r2, #24
 800acce:	f57f af65 	bpl.w	800ab9c <_scanf_float+0x60>
 800acd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acd6:	e7f4      	b.n	800acc2 <_scanf_float+0x186>
 800acd8:	f1ba 0f00 	cmp.w	sl, #0
 800acdc:	d10e      	bne.n	800acfc <_scanf_float+0x1c0>
 800acde:	f1b9 0f00 	cmp.w	r9, #0
 800ace2:	d10e      	bne.n	800ad02 <_scanf_float+0x1c6>
 800ace4:	6822      	ldr	r2, [r4, #0]
 800ace6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800acea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800acee:	d108      	bne.n	800ad02 <_scanf_float+0x1c6>
 800acf0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800acf4:	6022      	str	r2, [r4, #0]
 800acf6:	f04f 0a01 	mov.w	sl, #1
 800acfa:	e7e3      	b.n	800acc4 <_scanf_float+0x188>
 800acfc:	f1ba 0f02 	cmp.w	sl, #2
 800ad00:	d055      	beq.n	800adae <_scanf_float+0x272>
 800ad02:	2d01      	cmp	r5, #1
 800ad04:	d002      	beq.n	800ad0c <_scanf_float+0x1d0>
 800ad06:	2d04      	cmp	r5, #4
 800ad08:	f47f af48 	bne.w	800ab9c <_scanf_float+0x60>
 800ad0c:	3501      	adds	r5, #1
 800ad0e:	b2ed      	uxtb	r5, r5
 800ad10:	e7d8      	b.n	800acc4 <_scanf_float+0x188>
 800ad12:	f1ba 0f01 	cmp.w	sl, #1
 800ad16:	f47f af41 	bne.w	800ab9c <_scanf_float+0x60>
 800ad1a:	f04f 0a02 	mov.w	sl, #2
 800ad1e:	e7d1      	b.n	800acc4 <_scanf_float+0x188>
 800ad20:	b97d      	cbnz	r5, 800ad42 <_scanf_float+0x206>
 800ad22:	f1b9 0f00 	cmp.w	r9, #0
 800ad26:	f47f af3c 	bne.w	800aba2 <_scanf_float+0x66>
 800ad2a:	6822      	ldr	r2, [r4, #0]
 800ad2c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad30:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad34:	f47f af39 	bne.w	800abaa <_scanf_float+0x6e>
 800ad38:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad3c:	6022      	str	r2, [r4, #0]
 800ad3e:	2501      	movs	r5, #1
 800ad40:	e7c0      	b.n	800acc4 <_scanf_float+0x188>
 800ad42:	2d03      	cmp	r5, #3
 800ad44:	d0e2      	beq.n	800ad0c <_scanf_float+0x1d0>
 800ad46:	2d05      	cmp	r5, #5
 800ad48:	e7de      	b.n	800ad08 <_scanf_float+0x1cc>
 800ad4a:	2d02      	cmp	r5, #2
 800ad4c:	f47f af26 	bne.w	800ab9c <_scanf_float+0x60>
 800ad50:	2503      	movs	r5, #3
 800ad52:	e7b7      	b.n	800acc4 <_scanf_float+0x188>
 800ad54:	2d06      	cmp	r5, #6
 800ad56:	f47f af21 	bne.w	800ab9c <_scanf_float+0x60>
 800ad5a:	2507      	movs	r5, #7
 800ad5c:	e7b2      	b.n	800acc4 <_scanf_float+0x188>
 800ad5e:	6822      	ldr	r2, [r4, #0]
 800ad60:	0591      	lsls	r1, r2, #22
 800ad62:	f57f af1b 	bpl.w	800ab9c <_scanf_float+0x60>
 800ad66:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ad6a:	6022      	str	r2, [r4, #0]
 800ad6c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ad70:	e7a8      	b.n	800acc4 <_scanf_float+0x188>
 800ad72:	6822      	ldr	r2, [r4, #0]
 800ad74:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ad78:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ad7c:	d006      	beq.n	800ad8c <_scanf_float+0x250>
 800ad7e:	0550      	lsls	r0, r2, #21
 800ad80:	f57f af0c 	bpl.w	800ab9c <_scanf_float+0x60>
 800ad84:	f1b9 0f00 	cmp.w	r9, #0
 800ad88:	f43f af0f 	beq.w	800abaa <_scanf_float+0x6e>
 800ad8c:	0591      	lsls	r1, r2, #22
 800ad8e:	bf58      	it	pl
 800ad90:	9901      	ldrpl	r1, [sp, #4]
 800ad92:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ad96:	bf58      	it	pl
 800ad98:	eba9 0101 	subpl.w	r1, r9, r1
 800ad9c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ada0:	bf58      	it	pl
 800ada2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ada6:	6022      	str	r2, [r4, #0]
 800ada8:	f04f 0900 	mov.w	r9, #0
 800adac:	e78a      	b.n	800acc4 <_scanf_float+0x188>
 800adae:	f04f 0a03 	mov.w	sl, #3
 800adb2:	e787      	b.n	800acc4 <_scanf_float+0x188>
 800adb4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800adb8:	4639      	mov	r1, r7
 800adba:	4640      	mov	r0, r8
 800adbc:	4798      	blx	r3
 800adbe:	2800      	cmp	r0, #0
 800adc0:	f43f aedf 	beq.w	800ab82 <_scanf_float+0x46>
 800adc4:	e6ea      	b.n	800ab9c <_scanf_float+0x60>
 800adc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adce:	463a      	mov	r2, r7
 800add0:	4640      	mov	r0, r8
 800add2:	4798      	blx	r3
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	3b01      	subs	r3, #1
 800add8:	6123      	str	r3, [r4, #16]
 800adda:	e6ec      	b.n	800abb6 <_scanf_float+0x7a>
 800addc:	1e6b      	subs	r3, r5, #1
 800adde:	2b06      	cmp	r3, #6
 800ade0:	d825      	bhi.n	800ae2e <_scanf_float+0x2f2>
 800ade2:	2d02      	cmp	r5, #2
 800ade4:	d836      	bhi.n	800ae54 <_scanf_float+0x318>
 800ade6:	455e      	cmp	r6, fp
 800ade8:	f67f aee8 	bls.w	800abbc <_scanf_float+0x80>
 800adec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adf0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800adf4:	463a      	mov	r2, r7
 800adf6:	4640      	mov	r0, r8
 800adf8:	4798      	blx	r3
 800adfa:	6923      	ldr	r3, [r4, #16]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	6123      	str	r3, [r4, #16]
 800ae00:	e7f1      	b.n	800ade6 <_scanf_float+0x2aa>
 800ae02:	9802      	ldr	r0, [sp, #8]
 800ae04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae08:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ae0c:	9002      	str	r0, [sp, #8]
 800ae0e:	463a      	mov	r2, r7
 800ae10:	4640      	mov	r0, r8
 800ae12:	4798      	blx	r3
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	6123      	str	r3, [r4, #16]
 800ae1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ae1e:	fa5f fa8a 	uxtb.w	sl, sl
 800ae22:	f1ba 0f02 	cmp.w	sl, #2
 800ae26:	d1ec      	bne.n	800ae02 <_scanf_float+0x2c6>
 800ae28:	3d03      	subs	r5, #3
 800ae2a:	b2ed      	uxtb	r5, r5
 800ae2c:	1b76      	subs	r6, r6, r5
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	05da      	lsls	r2, r3, #23
 800ae32:	d52f      	bpl.n	800ae94 <_scanf_float+0x358>
 800ae34:	055b      	lsls	r3, r3, #21
 800ae36:	d510      	bpl.n	800ae5a <_scanf_float+0x31e>
 800ae38:	455e      	cmp	r6, fp
 800ae3a:	f67f aebf 	bls.w	800abbc <_scanf_float+0x80>
 800ae3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae46:	463a      	mov	r2, r7
 800ae48:	4640      	mov	r0, r8
 800ae4a:	4798      	blx	r3
 800ae4c:	6923      	ldr	r3, [r4, #16]
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	6123      	str	r3, [r4, #16]
 800ae52:	e7f1      	b.n	800ae38 <_scanf_float+0x2fc>
 800ae54:	46aa      	mov	sl, r5
 800ae56:	9602      	str	r6, [sp, #8]
 800ae58:	e7df      	b.n	800ae1a <_scanf_float+0x2de>
 800ae5a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ae5e:	6923      	ldr	r3, [r4, #16]
 800ae60:	2965      	cmp	r1, #101	; 0x65
 800ae62:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800ae66:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800ae6a:	6123      	str	r3, [r4, #16]
 800ae6c:	d00c      	beq.n	800ae88 <_scanf_float+0x34c>
 800ae6e:	2945      	cmp	r1, #69	; 0x45
 800ae70:	d00a      	beq.n	800ae88 <_scanf_float+0x34c>
 800ae72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae76:	463a      	mov	r2, r7
 800ae78:	4640      	mov	r0, r8
 800ae7a:	4798      	blx	r3
 800ae7c:	6923      	ldr	r3, [r4, #16]
 800ae7e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	1eb5      	subs	r5, r6, #2
 800ae86:	6123      	str	r3, [r4, #16]
 800ae88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae8c:	463a      	mov	r2, r7
 800ae8e:	4640      	mov	r0, r8
 800ae90:	4798      	blx	r3
 800ae92:	462e      	mov	r6, r5
 800ae94:	6825      	ldr	r5, [r4, #0]
 800ae96:	f015 0510 	ands.w	r5, r5, #16
 800ae9a:	d158      	bne.n	800af4e <_scanf_float+0x412>
 800ae9c:	7035      	strb	r5, [r6, #0]
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aea8:	d11c      	bne.n	800aee4 <_scanf_float+0x3a8>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	454b      	cmp	r3, r9
 800aeae:	eba3 0209 	sub.w	r2, r3, r9
 800aeb2:	d124      	bne.n	800aefe <_scanf_float+0x3c2>
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	4659      	mov	r1, fp
 800aeb8:	4640      	mov	r0, r8
 800aeba:	f000 ff65 	bl	800bd88 <_strtod_r>
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	6821      	ldr	r1, [r4, #0]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f011 0f02 	tst.w	r1, #2
 800aec8:	ec57 6b10 	vmov	r6, r7, d0
 800aecc:	f103 0204 	add.w	r2, r3, #4
 800aed0:	d020      	beq.n	800af14 <_scanf_float+0x3d8>
 800aed2:	9903      	ldr	r1, [sp, #12]
 800aed4:	600a      	str	r2, [r1, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	e9c3 6700 	strd	r6, r7, [r3]
 800aedc:	68e3      	ldr	r3, [r4, #12]
 800aede:	3301      	adds	r3, #1
 800aee0:	60e3      	str	r3, [r4, #12]
 800aee2:	e66c      	b.n	800abbe <_scanf_float+0x82>
 800aee4:	9b04      	ldr	r3, [sp, #16]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0e4      	beq.n	800aeb4 <_scanf_float+0x378>
 800aeea:	9905      	ldr	r1, [sp, #20]
 800aeec:	230a      	movs	r3, #10
 800aeee:	462a      	mov	r2, r5
 800aef0:	3101      	adds	r1, #1
 800aef2:	4640      	mov	r0, r8
 800aef4:	f001 f836 	bl	800bf64 <_strtol_r>
 800aef8:	9b04      	ldr	r3, [sp, #16]
 800aefa:	9e05      	ldr	r6, [sp, #20]
 800aefc:	1ac2      	subs	r2, r0, r3
 800aefe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800af02:	429e      	cmp	r6, r3
 800af04:	bf28      	it	cs
 800af06:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800af0a:	4912      	ldr	r1, [pc, #72]	; (800af54 <_scanf_float+0x418>)
 800af0c:	4630      	mov	r0, r6
 800af0e:	f000 f825 	bl	800af5c <siprintf>
 800af12:	e7cf      	b.n	800aeb4 <_scanf_float+0x378>
 800af14:	f011 0f04 	tst.w	r1, #4
 800af18:	9903      	ldr	r1, [sp, #12]
 800af1a:	600a      	str	r2, [r1, #0]
 800af1c:	d1db      	bne.n	800aed6 <_scanf_float+0x39a>
 800af1e:	f8d3 8000 	ldr.w	r8, [r3]
 800af22:	ee10 2a10 	vmov	r2, s0
 800af26:	ee10 0a10 	vmov	r0, s0
 800af2a:	463b      	mov	r3, r7
 800af2c:	4639      	mov	r1, r7
 800af2e:	f7f5 fdfd 	bl	8000b2c <__aeabi_dcmpun>
 800af32:	b128      	cbz	r0, 800af40 <_scanf_float+0x404>
 800af34:	4808      	ldr	r0, [pc, #32]	; (800af58 <_scanf_float+0x41c>)
 800af36:	f001 f8ef 	bl	800c118 <nanf>
 800af3a:	ed88 0a00 	vstr	s0, [r8]
 800af3e:	e7cd      	b.n	800aedc <_scanf_float+0x3a0>
 800af40:	4630      	mov	r0, r6
 800af42:	4639      	mov	r1, r7
 800af44:	f7f5 fe50 	bl	8000be8 <__aeabi_d2f>
 800af48:	f8c8 0000 	str.w	r0, [r8]
 800af4c:	e7c6      	b.n	800aedc <_scanf_float+0x3a0>
 800af4e:	2500      	movs	r5, #0
 800af50:	e635      	b.n	800abbe <_scanf_float+0x82>
 800af52:	bf00      	nop
 800af54:	0800ffa8 	.word	0x0800ffa8
 800af58:	08010397 	.word	0x08010397

0800af5c <siprintf>:
 800af5c:	b40e      	push	{r1, r2, r3}
 800af5e:	b500      	push	{lr}
 800af60:	b09c      	sub	sp, #112	; 0x70
 800af62:	ab1d      	add	r3, sp, #116	; 0x74
 800af64:	9002      	str	r0, [sp, #8]
 800af66:	9006      	str	r0, [sp, #24]
 800af68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af6c:	4809      	ldr	r0, [pc, #36]	; (800af94 <siprintf+0x38>)
 800af6e:	9107      	str	r1, [sp, #28]
 800af70:	9104      	str	r1, [sp, #16]
 800af72:	4909      	ldr	r1, [pc, #36]	; (800af98 <siprintf+0x3c>)
 800af74:	f853 2b04 	ldr.w	r2, [r3], #4
 800af78:	9105      	str	r1, [sp, #20]
 800af7a:	6800      	ldr	r0, [r0, #0]
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	a902      	add	r1, sp, #8
 800af80:	f002 fb4a 	bl	800d618 <_svfiprintf_r>
 800af84:	9b02      	ldr	r3, [sp, #8]
 800af86:	2200      	movs	r2, #0
 800af88:	701a      	strb	r2, [r3, #0]
 800af8a:	b01c      	add	sp, #112	; 0x70
 800af8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af90:	b003      	add	sp, #12
 800af92:	4770      	bx	lr
 800af94:	20000208 	.word	0x20000208
 800af98:	ffff0208 	.word	0xffff0208

0800af9c <__sread>:
 800af9c:	b510      	push	{r4, lr}
 800af9e:	460c      	mov	r4, r1
 800afa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa4:	f001 f850 	bl	800c048 <_read_r>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	bfab      	itete	ge
 800afac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800afae:	89a3      	ldrhlt	r3, [r4, #12]
 800afb0:	181b      	addge	r3, r3, r0
 800afb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afb6:	bfac      	ite	ge
 800afb8:	6563      	strge	r3, [r4, #84]	; 0x54
 800afba:	81a3      	strhlt	r3, [r4, #12]
 800afbc:	bd10      	pop	{r4, pc}

0800afbe <__swrite>:
 800afbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc2:	461f      	mov	r7, r3
 800afc4:	898b      	ldrh	r3, [r1, #12]
 800afc6:	05db      	lsls	r3, r3, #23
 800afc8:	4605      	mov	r5, r0
 800afca:	460c      	mov	r4, r1
 800afcc:	4616      	mov	r6, r2
 800afce:	d505      	bpl.n	800afdc <__swrite+0x1e>
 800afd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd4:	2302      	movs	r3, #2
 800afd6:	2200      	movs	r2, #0
 800afd8:	f001 f824 	bl	800c024 <_lseek_r>
 800afdc:	89a3      	ldrh	r3, [r4, #12]
 800afde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afe6:	81a3      	strh	r3, [r4, #12]
 800afe8:	4632      	mov	r2, r6
 800afea:	463b      	mov	r3, r7
 800afec:	4628      	mov	r0, r5
 800afee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aff2:	f001 b83b 	b.w	800c06c <_write_r>

0800aff6 <__sseek>:
 800aff6:	b510      	push	{r4, lr}
 800aff8:	460c      	mov	r4, r1
 800affa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800affe:	f001 f811 	bl	800c024 <_lseek_r>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	89a3      	ldrh	r3, [r4, #12]
 800b006:	bf15      	itete	ne
 800b008:	6560      	strne	r0, [r4, #84]	; 0x54
 800b00a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b00e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b012:	81a3      	strheq	r3, [r4, #12]
 800b014:	bf18      	it	ne
 800b016:	81a3      	strhne	r3, [r4, #12]
 800b018:	bd10      	pop	{r4, pc}

0800b01a <__sclose>:
 800b01a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b01e:	f000 bff1 	b.w	800c004 <_close_r>
	...

0800b024 <std>:
 800b024:	2300      	movs	r3, #0
 800b026:	b510      	push	{r4, lr}
 800b028:	4604      	mov	r4, r0
 800b02a:	e9c0 3300 	strd	r3, r3, [r0]
 800b02e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b032:	6083      	str	r3, [r0, #8]
 800b034:	8181      	strh	r1, [r0, #12]
 800b036:	6643      	str	r3, [r0, #100]	; 0x64
 800b038:	81c2      	strh	r2, [r0, #14]
 800b03a:	6183      	str	r3, [r0, #24]
 800b03c:	4619      	mov	r1, r3
 800b03e:	2208      	movs	r2, #8
 800b040:	305c      	adds	r0, #92	; 0x5c
 800b042:	f000 ffd3 	bl	800bfec <memset>
 800b046:	4b0d      	ldr	r3, [pc, #52]	; (800b07c <std+0x58>)
 800b048:	6263      	str	r3, [r4, #36]	; 0x24
 800b04a:	4b0d      	ldr	r3, [pc, #52]	; (800b080 <std+0x5c>)
 800b04c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b04e:	4b0d      	ldr	r3, [pc, #52]	; (800b084 <std+0x60>)
 800b050:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b052:	4b0d      	ldr	r3, [pc, #52]	; (800b088 <std+0x64>)
 800b054:	6323      	str	r3, [r4, #48]	; 0x30
 800b056:	4b0d      	ldr	r3, [pc, #52]	; (800b08c <std+0x68>)
 800b058:	6224      	str	r4, [r4, #32]
 800b05a:	429c      	cmp	r4, r3
 800b05c:	d006      	beq.n	800b06c <std+0x48>
 800b05e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b062:	4294      	cmp	r4, r2
 800b064:	d002      	beq.n	800b06c <std+0x48>
 800b066:	33d0      	adds	r3, #208	; 0xd0
 800b068:	429c      	cmp	r4, r3
 800b06a:	d105      	bne.n	800b078 <std+0x54>
 800b06c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b074:	f001 b836 	b.w	800c0e4 <__retarget_lock_init_recursive>
 800b078:	bd10      	pop	{r4, pc}
 800b07a:	bf00      	nop
 800b07c:	0800af9d 	.word	0x0800af9d
 800b080:	0800afbf 	.word	0x0800afbf
 800b084:	0800aff7 	.word	0x0800aff7
 800b088:	0800b01b 	.word	0x0800b01b
 800b08c:	20000aa4 	.word	0x20000aa4

0800b090 <stdio_exit_handler>:
 800b090:	4a02      	ldr	r2, [pc, #8]	; (800b09c <stdio_exit_handler+0xc>)
 800b092:	4903      	ldr	r1, [pc, #12]	; (800b0a0 <stdio_exit_handler+0x10>)
 800b094:	4803      	ldr	r0, [pc, #12]	; (800b0a4 <stdio_exit_handler+0x14>)
 800b096:	f000 bf67 	b.w	800bf68 <_fwalk_sglue>
 800b09a:	bf00      	nop
 800b09c:	20000044 	.word	0x20000044
 800b0a0:	0800dd1d 	.word	0x0800dd1d
 800b0a4:	200001bc 	.word	0x200001bc

0800b0a8 <cleanup_stdio>:
 800b0a8:	6841      	ldr	r1, [r0, #4]
 800b0aa:	4b0c      	ldr	r3, [pc, #48]	; (800b0dc <cleanup_stdio+0x34>)
 800b0ac:	4299      	cmp	r1, r3
 800b0ae:	b510      	push	{r4, lr}
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	d001      	beq.n	800b0b8 <cleanup_stdio+0x10>
 800b0b4:	f002 fe32 	bl	800dd1c <_fflush_r>
 800b0b8:	68a1      	ldr	r1, [r4, #8]
 800b0ba:	4b09      	ldr	r3, [pc, #36]	; (800b0e0 <cleanup_stdio+0x38>)
 800b0bc:	4299      	cmp	r1, r3
 800b0be:	d002      	beq.n	800b0c6 <cleanup_stdio+0x1e>
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f002 fe2b 	bl	800dd1c <_fflush_r>
 800b0c6:	68e1      	ldr	r1, [r4, #12]
 800b0c8:	4b06      	ldr	r3, [pc, #24]	; (800b0e4 <cleanup_stdio+0x3c>)
 800b0ca:	4299      	cmp	r1, r3
 800b0cc:	d004      	beq.n	800b0d8 <cleanup_stdio+0x30>
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0d4:	f002 be22 	b.w	800dd1c <_fflush_r>
 800b0d8:	bd10      	pop	{r4, pc}
 800b0da:	bf00      	nop
 800b0dc:	20000aa4 	.word	0x20000aa4
 800b0e0:	20000b0c 	.word	0x20000b0c
 800b0e4:	20000b74 	.word	0x20000b74

0800b0e8 <global_stdio_init.part.0>:
 800b0e8:	b510      	push	{r4, lr}
 800b0ea:	4b0b      	ldr	r3, [pc, #44]	; (800b118 <global_stdio_init.part.0+0x30>)
 800b0ec:	4c0b      	ldr	r4, [pc, #44]	; (800b11c <global_stdio_init.part.0+0x34>)
 800b0ee:	4a0c      	ldr	r2, [pc, #48]	; (800b120 <global_stdio_init.part.0+0x38>)
 800b0f0:	601a      	str	r2, [r3, #0]
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	2104      	movs	r1, #4
 800b0f8:	f7ff ff94 	bl	800b024 <std>
 800b0fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b100:	2201      	movs	r2, #1
 800b102:	2109      	movs	r1, #9
 800b104:	f7ff ff8e 	bl	800b024 <std>
 800b108:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b10c:	2202      	movs	r2, #2
 800b10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b112:	2112      	movs	r1, #18
 800b114:	f7ff bf86 	b.w	800b024 <std>
 800b118:	20000bdc 	.word	0x20000bdc
 800b11c:	20000aa4 	.word	0x20000aa4
 800b120:	0800b091 	.word	0x0800b091

0800b124 <__sfp_lock_acquire>:
 800b124:	4801      	ldr	r0, [pc, #4]	; (800b12c <__sfp_lock_acquire+0x8>)
 800b126:	f000 bfde 	b.w	800c0e6 <__retarget_lock_acquire_recursive>
 800b12a:	bf00      	nop
 800b12c:	20000be5 	.word	0x20000be5

0800b130 <__sfp_lock_release>:
 800b130:	4801      	ldr	r0, [pc, #4]	; (800b138 <__sfp_lock_release+0x8>)
 800b132:	f000 bfd9 	b.w	800c0e8 <__retarget_lock_release_recursive>
 800b136:	bf00      	nop
 800b138:	20000be5 	.word	0x20000be5

0800b13c <__sinit>:
 800b13c:	b510      	push	{r4, lr}
 800b13e:	4604      	mov	r4, r0
 800b140:	f7ff fff0 	bl	800b124 <__sfp_lock_acquire>
 800b144:	6a23      	ldr	r3, [r4, #32]
 800b146:	b11b      	cbz	r3, 800b150 <__sinit+0x14>
 800b148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b14c:	f7ff bff0 	b.w	800b130 <__sfp_lock_release>
 800b150:	4b04      	ldr	r3, [pc, #16]	; (800b164 <__sinit+0x28>)
 800b152:	6223      	str	r3, [r4, #32]
 800b154:	4b04      	ldr	r3, [pc, #16]	; (800b168 <__sinit+0x2c>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1f5      	bne.n	800b148 <__sinit+0xc>
 800b15c:	f7ff ffc4 	bl	800b0e8 <global_stdio_init.part.0>
 800b160:	e7f2      	b.n	800b148 <__sinit+0xc>
 800b162:	bf00      	nop
 800b164:	0800b0a9 	.word	0x0800b0a9
 800b168:	20000bdc 	.word	0x20000bdc

0800b16c <sulp>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	4604      	mov	r4, r0
 800b170:	460d      	mov	r5, r1
 800b172:	ec45 4b10 	vmov	d0, r4, r5
 800b176:	4616      	mov	r6, r2
 800b178:	f003 f970 	bl	800e45c <__ulp>
 800b17c:	ec51 0b10 	vmov	r0, r1, d0
 800b180:	b17e      	cbz	r6, 800b1a2 <sulp+0x36>
 800b182:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b186:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	dd09      	ble.n	800b1a2 <sulp+0x36>
 800b18e:	051b      	lsls	r3, r3, #20
 800b190:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b194:	2400      	movs	r4, #0
 800b196:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b19a:	4622      	mov	r2, r4
 800b19c:	462b      	mov	r3, r5
 800b19e:	f7f5 fa2b 	bl	80005f8 <__aeabi_dmul>
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
 800b1a4:	0000      	movs	r0, r0
	...

0800b1a8 <_strtod_l>:
 800b1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1ac:	ed2d 8b02 	vpush	{d8}
 800b1b0:	b09b      	sub	sp, #108	; 0x6c
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	9213      	str	r2, [sp, #76]	; 0x4c
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	9216      	str	r2, [sp, #88]	; 0x58
 800b1ba:	460d      	mov	r5, r1
 800b1bc:	f04f 0800 	mov.w	r8, #0
 800b1c0:	f04f 0900 	mov.w	r9, #0
 800b1c4:	460a      	mov	r2, r1
 800b1c6:	9215      	str	r2, [sp, #84]	; 0x54
 800b1c8:	7811      	ldrb	r1, [r2, #0]
 800b1ca:	292b      	cmp	r1, #43	; 0x2b
 800b1cc:	d04c      	beq.n	800b268 <_strtod_l+0xc0>
 800b1ce:	d83a      	bhi.n	800b246 <_strtod_l+0x9e>
 800b1d0:	290d      	cmp	r1, #13
 800b1d2:	d834      	bhi.n	800b23e <_strtod_l+0x96>
 800b1d4:	2908      	cmp	r1, #8
 800b1d6:	d834      	bhi.n	800b242 <_strtod_l+0x9a>
 800b1d8:	2900      	cmp	r1, #0
 800b1da:	d03d      	beq.n	800b258 <_strtod_l+0xb0>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	920a      	str	r2, [sp, #40]	; 0x28
 800b1e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b1e2:	7832      	ldrb	r2, [r6, #0]
 800b1e4:	2a30      	cmp	r2, #48	; 0x30
 800b1e6:	f040 80b4 	bne.w	800b352 <_strtod_l+0x1aa>
 800b1ea:	7872      	ldrb	r2, [r6, #1]
 800b1ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b1f0:	2a58      	cmp	r2, #88	; 0x58
 800b1f2:	d170      	bne.n	800b2d6 <_strtod_l+0x12e>
 800b1f4:	9302      	str	r3, [sp, #8]
 800b1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	ab16      	add	r3, sp, #88	; 0x58
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	4a8e      	ldr	r2, [pc, #568]	; (800b438 <_strtod_l+0x290>)
 800b200:	ab17      	add	r3, sp, #92	; 0x5c
 800b202:	a915      	add	r1, sp, #84	; 0x54
 800b204:	4620      	mov	r0, r4
 800b206:	f001 febd 	bl	800cf84 <__gethex>
 800b20a:	f010 070f 	ands.w	r7, r0, #15
 800b20e:	4605      	mov	r5, r0
 800b210:	d005      	beq.n	800b21e <_strtod_l+0x76>
 800b212:	2f06      	cmp	r7, #6
 800b214:	d12a      	bne.n	800b26c <_strtod_l+0xc4>
 800b216:	3601      	adds	r6, #1
 800b218:	2300      	movs	r3, #0
 800b21a:	9615      	str	r6, [sp, #84]	; 0x54
 800b21c:	930a      	str	r3, [sp, #40]	; 0x28
 800b21e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b220:	2b00      	cmp	r3, #0
 800b222:	f040 857f 	bne.w	800bd24 <_strtod_l+0xb7c>
 800b226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b228:	b1db      	cbz	r3, 800b262 <_strtod_l+0xba>
 800b22a:	4642      	mov	r2, r8
 800b22c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b230:	ec43 2b10 	vmov	d0, r2, r3
 800b234:	b01b      	add	sp, #108	; 0x6c
 800b236:	ecbd 8b02 	vpop	{d8}
 800b23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b23e:	2920      	cmp	r1, #32
 800b240:	d1cc      	bne.n	800b1dc <_strtod_l+0x34>
 800b242:	3201      	adds	r2, #1
 800b244:	e7bf      	b.n	800b1c6 <_strtod_l+0x1e>
 800b246:	292d      	cmp	r1, #45	; 0x2d
 800b248:	d1c8      	bne.n	800b1dc <_strtod_l+0x34>
 800b24a:	2101      	movs	r1, #1
 800b24c:	910a      	str	r1, [sp, #40]	; 0x28
 800b24e:	1c51      	adds	r1, r2, #1
 800b250:	9115      	str	r1, [sp, #84]	; 0x54
 800b252:	7852      	ldrb	r2, [r2, #1]
 800b254:	2a00      	cmp	r2, #0
 800b256:	d1c3      	bne.n	800b1e0 <_strtod_l+0x38>
 800b258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b25a:	9515      	str	r5, [sp, #84]	; 0x54
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f040 855f 	bne.w	800bd20 <_strtod_l+0xb78>
 800b262:	4642      	mov	r2, r8
 800b264:	464b      	mov	r3, r9
 800b266:	e7e3      	b.n	800b230 <_strtod_l+0x88>
 800b268:	2100      	movs	r1, #0
 800b26a:	e7ef      	b.n	800b24c <_strtod_l+0xa4>
 800b26c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b26e:	b13a      	cbz	r2, 800b280 <_strtod_l+0xd8>
 800b270:	2135      	movs	r1, #53	; 0x35
 800b272:	a818      	add	r0, sp, #96	; 0x60
 800b274:	f003 f9ef 	bl	800e656 <__copybits>
 800b278:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b27a:	4620      	mov	r0, r4
 800b27c:	f002 fdc2 	bl	800de04 <_Bfree>
 800b280:	3f01      	subs	r7, #1
 800b282:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b284:	2f04      	cmp	r7, #4
 800b286:	d806      	bhi.n	800b296 <_strtod_l+0xee>
 800b288:	e8df f007 	tbb	[pc, r7]
 800b28c:	201d0314 	.word	0x201d0314
 800b290:	14          	.byte	0x14
 800b291:	00          	.byte	0x00
 800b292:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b296:	05e9      	lsls	r1, r5, #23
 800b298:	bf48      	it	mi
 800b29a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b29e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b2a2:	0d1b      	lsrs	r3, r3, #20
 800b2a4:	051b      	lsls	r3, r3, #20
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1b9      	bne.n	800b21e <_strtod_l+0x76>
 800b2aa:	f000 fef1 	bl	800c090 <__errno>
 800b2ae:	2322      	movs	r3, #34	; 0x22
 800b2b0:	6003      	str	r3, [r0, #0]
 800b2b2:	e7b4      	b.n	800b21e <_strtod_l+0x76>
 800b2b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b2b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b2bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b2c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b2c4:	e7e7      	b.n	800b296 <_strtod_l+0xee>
 800b2c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b440 <_strtod_l+0x298>
 800b2ca:	e7e4      	b.n	800b296 <_strtod_l+0xee>
 800b2cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b2d0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b2d4:	e7df      	b.n	800b296 <_strtod_l+0xee>
 800b2d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	9215      	str	r2, [sp, #84]	; 0x54
 800b2dc:	785b      	ldrb	r3, [r3, #1]
 800b2de:	2b30      	cmp	r3, #48	; 0x30
 800b2e0:	d0f9      	beq.n	800b2d6 <_strtod_l+0x12e>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d09b      	beq.n	800b21e <_strtod_l+0x76>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	f04f 0a00 	mov.w	sl, #0
 800b2ec:	9304      	str	r3, [sp, #16]
 800b2ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b2f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b2f6:	46d3      	mov	fp, sl
 800b2f8:	220a      	movs	r2, #10
 800b2fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b2fc:	7806      	ldrb	r6, [r0, #0]
 800b2fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b302:	b2d9      	uxtb	r1, r3
 800b304:	2909      	cmp	r1, #9
 800b306:	d926      	bls.n	800b356 <_strtod_l+0x1ae>
 800b308:	494c      	ldr	r1, [pc, #304]	; (800b43c <_strtod_l+0x294>)
 800b30a:	2201      	movs	r2, #1
 800b30c:	f000 fe5c 	bl	800bfc8 <strncmp>
 800b310:	2800      	cmp	r0, #0
 800b312:	d030      	beq.n	800b376 <_strtod_l+0x1ce>
 800b314:	2000      	movs	r0, #0
 800b316:	4632      	mov	r2, r6
 800b318:	9005      	str	r0, [sp, #20]
 800b31a:	465e      	mov	r6, fp
 800b31c:	4603      	mov	r3, r0
 800b31e:	2a65      	cmp	r2, #101	; 0x65
 800b320:	d001      	beq.n	800b326 <_strtod_l+0x17e>
 800b322:	2a45      	cmp	r2, #69	; 0x45
 800b324:	d113      	bne.n	800b34e <_strtod_l+0x1a6>
 800b326:	b91e      	cbnz	r6, 800b330 <_strtod_l+0x188>
 800b328:	9a04      	ldr	r2, [sp, #16]
 800b32a:	4302      	orrs	r2, r0
 800b32c:	d094      	beq.n	800b258 <_strtod_l+0xb0>
 800b32e:	2600      	movs	r6, #0
 800b330:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b332:	1c6a      	adds	r2, r5, #1
 800b334:	9215      	str	r2, [sp, #84]	; 0x54
 800b336:	786a      	ldrb	r2, [r5, #1]
 800b338:	2a2b      	cmp	r2, #43	; 0x2b
 800b33a:	d074      	beq.n	800b426 <_strtod_l+0x27e>
 800b33c:	2a2d      	cmp	r2, #45	; 0x2d
 800b33e:	d078      	beq.n	800b432 <_strtod_l+0x28a>
 800b340:	f04f 0c00 	mov.w	ip, #0
 800b344:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b348:	2909      	cmp	r1, #9
 800b34a:	d97f      	bls.n	800b44c <_strtod_l+0x2a4>
 800b34c:	9515      	str	r5, [sp, #84]	; 0x54
 800b34e:	2700      	movs	r7, #0
 800b350:	e09e      	b.n	800b490 <_strtod_l+0x2e8>
 800b352:	2300      	movs	r3, #0
 800b354:	e7c8      	b.n	800b2e8 <_strtod_l+0x140>
 800b356:	f1bb 0f08 	cmp.w	fp, #8
 800b35a:	bfd8      	it	le
 800b35c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b35e:	f100 0001 	add.w	r0, r0, #1
 800b362:	bfda      	itte	le
 800b364:	fb02 3301 	mlale	r3, r2, r1, r3
 800b368:	9309      	strle	r3, [sp, #36]	; 0x24
 800b36a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b36e:	f10b 0b01 	add.w	fp, fp, #1
 800b372:	9015      	str	r0, [sp, #84]	; 0x54
 800b374:	e7c1      	b.n	800b2fa <_strtod_l+0x152>
 800b376:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	9215      	str	r2, [sp, #84]	; 0x54
 800b37c:	785a      	ldrb	r2, [r3, #1]
 800b37e:	f1bb 0f00 	cmp.w	fp, #0
 800b382:	d037      	beq.n	800b3f4 <_strtod_l+0x24c>
 800b384:	9005      	str	r0, [sp, #20]
 800b386:	465e      	mov	r6, fp
 800b388:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b38c:	2b09      	cmp	r3, #9
 800b38e:	d912      	bls.n	800b3b6 <_strtod_l+0x20e>
 800b390:	2301      	movs	r3, #1
 800b392:	e7c4      	b.n	800b31e <_strtod_l+0x176>
 800b394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	9215      	str	r2, [sp, #84]	; 0x54
 800b39a:	785a      	ldrb	r2, [r3, #1]
 800b39c:	3001      	adds	r0, #1
 800b39e:	2a30      	cmp	r2, #48	; 0x30
 800b3a0:	d0f8      	beq.n	800b394 <_strtod_l+0x1ec>
 800b3a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b3a6:	2b08      	cmp	r3, #8
 800b3a8:	f200 84c1 	bhi.w	800bd2e <_strtod_l+0xb86>
 800b3ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b3ae:	9005      	str	r0, [sp, #20]
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3b4:	4606      	mov	r6, r0
 800b3b6:	3a30      	subs	r2, #48	; 0x30
 800b3b8:	f100 0301 	add.w	r3, r0, #1
 800b3bc:	d014      	beq.n	800b3e8 <_strtod_l+0x240>
 800b3be:	9905      	ldr	r1, [sp, #20]
 800b3c0:	4419      	add	r1, r3
 800b3c2:	9105      	str	r1, [sp, #20]
 800b3c4:	4633      	mov	r3, r6
 800b3c6:	eb00 0c06 	add.w	ip, r0, r6
 800b3ca:	210a      	movs	r1, #10
 800b3cc:	4563      	cmp	r3, ip
 800b3ce:	d113      	bne.n	800b3f8 <_strtod_l+0x250>
 800b3d0:	1833      	adds	r3, r6, r0
 800b3d2:	2b08      	cmp	r3, #8
 800b3d4:	f106 0601 	add.w	r6, r6, #1
 800b3d8:	4406      	add	r6, r0
 800b3da:	dc1a      	bgt.n	800b412 <_strtod_l+0x26a>
 800b3dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3de:	230a      	movs	r3, #10
 800b3e0:	fb03 2301 	mla	r3, r3, r1, r2
 800b3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b3ea:	1c51      	adds	r1, r2, #1
 800b3ec:	9115      	str	r1, [sp, #84]	; 0x54
 800b3ee:	7852      	ldrb	r2, [r2, #1]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	e7c9      	b.n	800b388 <_strtod_l+0x1e0>
 800b3f4:	4658      	mov	r0, fp
 800b3f6:	e7d2      	b.n	800b39e <_strtod_l+0x1f6>
 800b3f8:	2b08      	cmp	r3, #8
 800b3fa:	f103 0301 	add.w	r3, r3, #1
 800b3fe:	dc03      	bgt.n	800b408 <_strtod_l+0x260>
 800b400:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b402:	434f      	muls	r7, r1
 800b404:	9709      	str	r7, [sp, #36]	; 0x24
 800b406:	e7e1      	b.n	800b3cc <_strtod_l+0x224>
 800b408:	2b10      	cmp	r3, #16
 800b40a:	bfd8      	it	le
 800b40c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b410:	e7dc      	b.n	800b3cc <_strtod_l+0x224>
 800b412:	2e10      	cmp	r6, #16
 800b414:	bfdc      	itt	le
 800b416:	230a      	movle	r3, #10
 800b418:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b41c:	e7e3      	b.n	800b3e6 <_strtod_l+0x23e>
 800b41e:	2300      	movs	r3, #0
 800b420:	9305      	str	r3, [sp, #20]
 800b422:	2301      	movs	r3, #1
 800b424:	e780      	b.n	800b328 <_strtod_l+0x180>
 800b426:	f04f 0c00 	mov.w	ip, #0
 800b42a:	1caa      	adds	r2, r5, #2
 800b42c:	9215      	str	r2, [sp, #84]	; 0x54
 800b42e:	78aa      	ldrb	r2, [r5, #2]
 800b430:	e788      	b.n	800b344 <_strtod_l+0x19c>
 800b432:	f04f 0c01 	mov.w	ip, #1
 800b436:	e7f8      	b.n	800b42a <_strtod_l+0x282>
 800b438:	0800ffb0 	.word	0x0800ffb0
 800b43c:	0800ffad 	.word	0x0800ffad
 800b440:	7ff00000 	.word	0x7ff00000
 800b444:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b446:	1c51      	adds	r1, r2, #1
 800b448:	9115      	str	r1, [sp, #84]	; 0x54
 800b44a:	7852      	ldrb	r2, [r2, #1]
 800b44c:	2a30      	cmp	r2, #48	; 0x30
 800b44e:	d0f9      	beq.n	800b444 <_strtod_l+0x29c>
 800b450:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b454:	2908      	cmp	r1, #8
 800b456:	f63f af7a 	bhi.w	800b34e <_strtod_l+0x1a6>
 800b45a:	3a30      	subs	r2, #48	; 0x30
 800b45c:	9208      	str	r2, [sp, #32]
 800b45e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b460:	920c      	str	r2, [sp, #48]	; 0x30
 800b462:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b464:	1c57      	adds	r7, r2, #1
 800b466:	9715      	str	r7, [sp, #84]	; 0x54
 800b468:	7852      	ldrb	r2, [r2, #1]
 800b46a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b46e:	f1be 0f09 	cmp.w	lr, #9
 800b472:	d938      	bls.n	800b4e6 <_strtod_l+0x33e>
 800b474:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b476:	1a7f      	subs	r7, r7, r1
 800b478:	2f08      	cmp	r7, #8
 800b47a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b47e:	dc03      	bgt.n	800b488 <_strtod_l+0x2e0>
 800b480:	9908      	ldr	r1, [sp, #32]
 800b482:	428f      	cmp	r7, r1
 800b484:	bfa8      	it	ge
 800b486:	460f      	movge	r7, r1
 800b488:	f1bc 0f00 	cmp.w	ip, #0
 800b48c:	d000      	beq.n	800b490 <_strtod_l+0x2e8>
 800b48e:	427f      	negs	r7, r7
 800b490:	2e00      	cmp	r6, #0
 800b492:	d14f      	bne.n	800b534 <_strtod_l+0x38c>
 800b494:	9904      	ldr	r1, [sp, #16]
 800b496:	4301      	orrs	r1, r0
 800b498:	f47f aec1 	bne.w	800b21e <_strtod_l+0x76>
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f47f aedb 	bne.w	800b258 <_strtod_l+0xb0>
 800b4a2:	2a69      	cmp	r2, #105	; 0x69
 800b4a4:	d029      	beq.n	800b4fa <_strtod_l+0x352>
 800b4a6:	dc26      	bgt.n	800b4f6 <_strtod_l+0x34e>
 800b4a8:	2a49      	cmp	r2, #73	; 0x49
 800b4aa:	d026      	beq.n	800b4fa <_strtod_l+0x352>
 800b4ac:	2a4e      	cmp	r2, #78	; 0x4e
 800b4ae:	f47f aed3 	bne.w	800b258 <_strtod_l+0xb0>
 800b4b2:	499b      	ldr	r1, [pc, #620]	; (800b720 <_strtod_l+0x578>)
 800b4b4:	a815      	add	r0, sp, #84	; 0x54
 800b4b6:	f001 ffa5 	bl	800d404 <__match>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f43f aecc 	beq.w	800b258 <_strtod_l+0xb0>
 800b4c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	2b28      	cmp	r3, #40	; 0x28
 800b4c6:	d12f      	bne.n	800b528 <_strtod_l+0x380>
 800b4c8:	4996      	ldr	r1, [pc, #600]	; (800b724 <_strtod_l+0x57c>)
 800b4ca:	aa18      	add	r2, sp, #96	; 0x60
 800b4cc:	a815      	add	r0, sp, #84	; 0x54
 800b4ce:	f001 ffad 	bl	800d42c <__hexnan>
 800b4d2:	2805      	cmp	r0, #5
 800b4d4:	d128      	bne.n	800b528 <_strtod_l+0x380>
 800b4d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b4d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b4dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b4e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b4e4:	e69b      	b.n	800b21e <_strtod_l+0x76>
 800b4e6:	9f08      	ldr	r7, [sp, #32]
 800b4e8:	210a      	movs	r1, #10
 800b4ea:	fb01 2107 	mla	r1, r1, r7, r2
 800b4ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b4f2:	9208      	str	r2, [sp, #32]
 800b4f4:	e7b5      	b.n	800b462 <_strtod_l+0x2ba>
 800b4f6:	2a6e      	cmp	r2, #110	; 0x6e
 800b4f8:	e7d9      	b.n	800b4ae <_strtod_l+0x306>
 800b4fa:	498b      	ldr	r1, [pc, #556]	; (800b728 <_strtod_l+0x580>)
 800b4fc:	a815      	add	r0, sp, #84	; 0x54
 800b4fe:	f001 ff81 	bl	800d404 <__match>
 800b502:	2800      	cmp	r0, #0
 800b504:	f43f aea8 	beq.w	800b258 <_strtod_l+0xb0>
 800b508:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b50a:	4988      	ldr	r1, [pc, #544]	; (800b72c <_strtod_l+0x584>)
 800b50c:	3b01      	subs	r3, #1
 800b50e:	a815      	add	r0, sp, #84	; 0x54
 800b510:	9315      	str	r3, [sp, #84]	; 0x54
 800b512:	f001 ff77 	bl	800d404 <__match>
 800b516:	b910      	cbnz	r0, 800b51e <_strtod_l+0x376>
 800b518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b51a:	3301      	adds	r3, #1
 800b51c:	9315      	str	r3, [sp, #84]	; 0x54
 800b51e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b73c <_strtod_l+0x594>
 800b522:	f04f 0800 	mov.w	r8, #0
 800b526:	e67a      	b.n	800b21e <_strtod_l+0x76>
 800b528:	4881      	ldr	r0, [pc, #516]	; (800b730 <_strtod_l+0x588>)
 800b52a:	f000 fded 	bl	800c108 <nan>
 800b52e:	ec59 8b10 	vmov	r8, r9, d0
 800b532:	e674      	b.n	800b21e <_strtod_l+0x76>
 800b534:	9b05      	ldr	r3, [sp, #20]
 800b536:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b538:	1afb      	subs	r3, r7, r3
 800b53a:	f1bb 0f00 	cmp.w	fp, #0
 800b53e:	bf08      	it	eq
 800b540:	46b3      	moveq	fp, r6
 800b542:	2e10      	cmp	r6, #16
 800b544:	9308      	str	r3, [sp, #32]
 800b546:	4635      	mov	r5, r6
 800b548:	bfa8      	it	ge
 800b54a:	2510      	movge	r5, #16
 800b54c:	f7f4 ffda 	bl	8000504 <__aeabi_ui2d>
 800b550:	2e09      	cmp	r6, #9
 800b552:	4680      	mov	r8, r0
 800b554:	4689      	mov	r9, r1
 800b556:	dd13      	ble.n	800b580 <_strtod_l+0x3d8>
 800b558:	4b76      	ldr	r3, [pc, #472]	; (800b734 <_strtod_l+0x58c>)
 800b55a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b55e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b562:	f7f5 f849 	bl	80005f8 <__aeabi_dmul>
 800b566:	4680      	mov	r8, r0
 800b568:	4650      	mov	r0, sl
 800b56a:	4689      	mov	r9, r1
 800b56c:	f7f4 ffca 	bl	8000504 <__aeabi_ui2d>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4640      	mov	r0, r8
 800b576:	4649      	mov	r1, r9
 800b578:	f7f4 fe88 	bl	800028c <__adddf3>
 800b57c:	4680      	mov	r8, r0
 800b57e:	4689      	mov	r9, r1
 800b580:	2e0f      	cmp	r6, #15
 800b582:	dc38      	bgt.n	800b5f6 <_strtod_l+0x44e>
 800b584:	9b08      	ldr	r3, [sp, #32]
 800b586:	2b00      	cmp	r3, #0
 800b588:	f43f ae49 	beq.w	800b21e <_strtod_l+0x76>
 800b58c:	dd24      	ble.n	800b5d8 <_strtod_l+0x430>
 800b58e:	2b16      	cmp	r3, #22
 800b590:	dc0b      	bgt.n	800b5aa <_strtod_l+0x402>
 800b592:	4968      	ldr	r1, [pc, #416]	; (800b734 <_strtod_l+0x58c>)
 800b594:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b59c:	4642      	mov	r2, r8
 800b59e:	464b      	mov	r3, r9
 800b5a0:	f7f5 f82a 	bl	80005f8 <__aeabi_dmul>
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4689      	mov	r9, r1
 800b5a8:	e639      	b.n	800b21e <_strtod_l+0x76>
 800b5aa:	9a08      	ldr	r2, [sp, #32]
 800b5ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	db20      	blt.n	800b5f6 <_strtod_l+0x44e>
 800b5b4:	4c5f      	ldr	r4, [pc, #380]	; (800b734 <_strtod_l+0x58c>)
 800b5b6:	f1c6 060f 	rsb	r6, r6, #15
 800b5ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b5be:	4642      	mov	r2, r8
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5c6:	f7f5 f817 	bl	80005f8 <__aeabi_dmul>
 800b5ca:	9b08      	ldr	r3, [sp, #32]
 800b5cc:	1b9e      	subs	r6, r3, r6
 800b5ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b5d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b5d6:	e7e3      	b.n	800b5a0 <_strtod_l+0x3f8>
 800b5d8:	9b08      	ldr	r3, [sp, #32]
 800b5da:	3316      	adds	r3, #22
 800b5dc:	db0b      	blt.n	800b5f6 <_strtod_l+0x44e>
 800b5de:	9b05      	ldr	r3, [sp, #20]
 800b5e0:	1bdf      	subs	r7, r3, r7
 800b5e2:	4b54      	ldr	r3, [pc, #336]	; (800b734 <_strtod_l+0x58c>)
 800b5e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b5e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5ec:	4640      	mov	r0, r8
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	f7f5 f92c 	bl	800084c <__aeabi_ddiv>
 800b5f4:	e7d6      	b.n	800b5a4 <_strtod_l+0x3fc>
 800b5f6:	9b08      	ldr	r3, [sp, #32]
 800b5f8:	1b75      	subs	r5, r6, r5
 800b5fa:	441d      	add	r5, r3
 800b5fc:	2d00      	cmp	r5, #0
 800b5fe:	dd70      	ble.n	800b6e2 <_strtod_l+0x53a>
 800b600:	f015 030f 	ands.w	r3, r5, #15
 800b604:	d00a      	beq.n	800b61c <_strtod_l+0x474>
 800b606:	494b      	ldr	r1, [pc, #300]	; (800b734 <_strtod_l+0x58c>)
 800b608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b60c:	4642      	mov	r2, r8
 800b60e:	464b      	mov	r3, r9
 800b610:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b614:	f7f4 fff0 	bl	80005f8 <__aeabi_dmul>
 800b618:	4680      	mov	r8, r0
 800b61a:	4689      	mov	r9, r1
 800b61c:	f035 050f 	bics.w	r5, r5, #15
 800b620:	d04d      	beq.n	800b6be <_strtod_l+0x516>
 800b622:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b626:	dd22      	ble.n	800b66e <_strtod_l+0x4c6>
 800b628:	2500      	movs	r5, #0
 800b62a:	46ab      	mov	fp, r5
 800b62c:	9509      	str	r5, [sp, #36]	; 0x24
 800b62e:	9505      	str	r5, [sp, #20]
 800b630:	2322      	movs	r3, #34	; 0x22
 800b632:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b73c <_strtod_l+0x594>
 800b636:	6023      	str	r3, [r4, #0]
 800b638:	f04f 0800 	mov.w	r8, #0
 800b63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b63e:	2b00      	cmp	r3, #0
 800b640:	f43f aded 	beq.w	800b21e <_strtod_l+0x76>
 800b644:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b646:	4620      	mov	r0, r4
 800b648:	f002 fbdc 	bl	800de04 <_Bfree>
 800b64c:	9905      	ldr	r1, [sp, #20]
 800b64e:	4620      	mov	r0, r4
 800b650:	f002 fbd8 	bl	800de04 <_Bfree>
 800b654:	4659      	mov	r1, fp
 800b656:	4620      	mov	r0, r4
 800b658:	f002 fbd4 	bl	800de04 <_Bfree>
 800b65c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b65e:	4620      	mov	r0, r4
 800b660:	f002 fbd0 	bl	800de04 <_Bfree>
 800b664:	4629      	mov	r1, r5
 800b666:	4620      	mov	r0, r4
 800b668:	f002 fbcc 	bl	800de04 <_Bfree>
 800b66c:	e5d7      	b.n	800b21e <_strtod_l+0x76>
 800b66e:	4b32      	ldr	r3, [pc, #200]	; (800b738 <_strtod_l+0x590>)
 800b670:	9304      	str	r3, [sp, #16]
 800b672:	2300      	movs	r3, #0
 800b674:	112d      	asrs	r5, r5, #4
 800b676:	4640      	mov	r0, r8
 800b678:	4649      	mov	r1, r9
 800b67a:	469a      	mov	sl, r3
 800b67c:	2d01      	cmp	r5, #1
 800b67e:	dc21      	bgt.n	800b6c4 <_strtod_l+0x51c>
 800b680:	b10b      	cbz	r3, 800b686 <_strtod_l+0x4de>
 800b682:	4680      	mov	r8, r0
 800b684:	4689      	mov	r9, r1
 800b686:	492c      	ldr	r1, [pc, #176]	; (800b738 <_strtod_l+0x590>)
 800b688:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b68c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b690:	4642      	mov	r2, r8
 800b692:	464b      	mov	r3, r9
 800b694:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b698:	f7f4 ffae 	bl	80005f8 <__aeabi_dmul>
 800b69c:	4b27      	ldr	r3, [pc, #156]	; (800b73c <_strtod_l+0x594>)
 800b69e:	460a      	mov	r2, r1
 800b6a0:	400b      	ands	r3, r1
 800b6a2:	4927      	ldr	r1, [pc, #156]	; (800b740 <_strtod_l+0x598>)
 800b6a4:	428b      	cmp	r3, r1
 800b6a6:	4680      	mov	r8, r0
 800b6a8:	d8be      	bhi.n	800b628 <_strtod_l+0x480>
 800b6aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b6ae:	428b      	cmp	r3, r1
 800b6b0:	bf86      	itte	hi
 800b6b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b744 <_strtod_l+0x59c>
 800b6b6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800b6ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b6be:	2300      	movs	r3, #0
 800b6c0:	9304      	str	r3, [sp, #16]
 800b6c2:	e07b      	b.n	800b7bc <_strtod_l+0x614>
 800b6c4:	07ea      	lsls	r2, r5, #31
 800b6c6:	d505      	bpl.n	800b6d4 <_strtod_l+0x52c>
 800b6c8:	9b04      	ldr	r3, [sp, #16]
 800b6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ce:	f7f4 ff93 	bl	80005f8 <__aeabi_dmul>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	9a04      	ldr	r2, [sp, #16]
 800b6d6:	3208      	adds	r2, #8
 800b6d8:	f10a 0a01 	add.w	sl, sl, #1
 800b6dc:	106d      	asrs	r5, r5, #1
 800b6de:	9204      	str	r2, [sp, #16]
 800b6e0:	e7cc      	b.n	800b67c <_strtod_l+0x4d4>
 800b6e2:	d0ec      	beq.n	800b6be <_strtod_l+0x516>
 800b6e4:	426d      	negs	r5, r5
 800b6e6:	f015 020f 	ands.w	r2, r5, #15
 800b6ea:	d00a      	beq.n	800b702 <_strtod_l+0x55a>
 800b6ec:	4b11      	ldr	r3, [pc, #68]	; (800b734 <_strtod_l+0x58c>)
 800b6ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f7f5 f8a7 	bl	800084c <__aeabi_ddiv>
 800b6fe:	4680      	mov	r8, r0
 800b700:	4689      	mov	r9, r1
 800b702:	112d      	asrs	r5, r5, #4
 800b704:	d0db      	beq.n	800b6be <_strtod_l+0x516>
 800b706:	2d1f      	cmp	r5, #31
 800b708:	dd1e      	ble.n	800b748 <_strtod_l+0x5a0>
 800b70a:	2500      	movs	r5, #0
 800b70c:	46ab      	mov	fp, r5
 800b70e:	9509      	str	r5, [sp, #36]	; 0x24
 800b710:	9505      	str	r5, [sp, #20]
 800b712:	2322      	movs	r3, #34	; 0x22
 800b714:	f04f 0800 	mov.w	r8, #0
 800b718:	f04f 0900 	mov.w	r9, #0
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	e78d      	b.n	800b63c <_strtod_l+0x494>
 800b720:	0800ff81 	.word	0x0800ff81
 800b724:	0800ffc4 	.word	0x0800ffc4
 800b728:	0800ff79 	.word	0x0800ff79
 800b72c:	0801010c 	.word	0x0801010c
 800b730:	08010397 	.word	0x08010397
 800b734:	08010288 	.word	0x08010288
 800b738:	08010260 	.word	0x08010260
 800b73c:	7ff00000 	.word	0x7ff00000
 800b740:	7ca00000 	.word	0x7ca00000
 800b744:	7fefffff 	.word	0x7fefffff
 800b748:	f015 0310 	ands.w	r3, r5, #16
 800b74c:	bf18      	it	ne
 800b74e:	236a      	movne	r3, #106	; 0x6a
 800b750:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800baf4 <_strtod_l+0x94c>
 800b754:	9304      	str	r3, [sp, #16]
 800b756:	4640      	mov	r0, r8
 800b758:	4649      	mov	r1, r9
 800b75a:	2300      	movs	r3, #0
 800b75c:	07ea      	lsls	r2, r5, #31
 800b75e:	d504      	bpl.n	800b76a <_strtod_l+0x5c2>
 800b760:	e9da 2300 	ldrd	r2, r3, [sl]
 800b764:	f7f4 ff48 	bl	80005f8 <__aeabi_dmul>
 800b768:	2301      	movs	r3, #1
 800b76a:	106d      	asrs	r5, r5, #1
 800b76c:	f10a 0a08 	add.w	sl, sl, #8
 800b770:	d1f4      	bne.n	800b75c <_strtod_l+0x5b4>
 800b772:	b10b      	cbz	r3, 800b778 <_strtod_l+0x5d0>
 800b774:	4680      	mov	r8, r0
 800b776:	4689      	mov	r9, r1
 800b778:	9b04      	ldr	r3, [sp, #16]
 800b77a:	b1bb      	cbz	r3, 800b7ac <_strtod_l+0x604>
 800b77c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b780:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b784:	2b00      	cmp	r3, #0
 800b786:	4649      	mov	r1, r9
 800b788:	dd10      	ble.n	800b7ac <_strtod_l+0x604>
 800b78a:	2b1f      	cmp	r3, #31
 800b78c:	f340 811e 	ble.w	800b9cc <_strtod_l+0x824>
 800b790:	2b34      	cmp	r3, #52	; 0x34
 800b792:	bfde      	ittt	le
 800b794:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b798:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b79c:	4093      	lslle	r3, r2
 800b79e:	f04f 0800 	mov.w	r8, #0
 800b7a2:	bfcc      	ite	gt
 800b7a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b7a8:	ea03 0901 	andle.w	r9, r3, r1
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	4640      	mov	r0, r8
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	f7f5 f988 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d1a6      	bne.n	800b70a <_strtod_l+0x562>
 800b7bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7c2:	4633      	mov	r3, r6
 800b7c4:	465a      	mov	r2, fp
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f002 fb84 	bl	800ded4 <__s2b>
 800b7cc:	9009      	str	r0, [sp, #36]	; 0x24
 800b7ce:	2800      	cmp	r0, #0
 800b7d0:	f43f af2a 	beq.w	800b628 <_strtod_l+0x480>
 800b7d4:	9a08      	ldr	r2, [sp, #32]
 800b7d6:	9b05      	ldr	r3, [sp, #20]
 800b7d8:	2a00      	cmp	r2, #0
 800b7da:	eba3 0307 	sub.w	r3, r3, r7
 800b7de:	bfa8      	it	ge
 800b7e0:	2300      	movge	r3, #0
 800b7e2:	930c      	str	r3, [sp, #48]	; 0x30
 800b7e4:	2500      	movs	r5, #0
 800b7e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b7ea:	9312      	str	r3, [sp, #72]	; 0x48
 800b7ec:	46ab      	mov	fp, r5
 800b7ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	6859      	ldr	r1, [r3, #4]
 800b7f4:	f002 fac6 	bl	800dd84 <_Balloc>
 800b7f8:	9005      	str	r0, [sp, #20]
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	f43f af18 	beq.w	800b630 <_strtod_l+0x488>
 800b800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b802:	691a      	ldr	r2, [r3, #16]
 800b804:	3202      	adds	r2, #2
 800b806:	f103 010c 	add.w	r1, r3, #12
 800b80a:	0092      	lsls	r2, r2, #2
 800b80c:	300c      	adds	r0, #12
 800b80e:	f000 fc6c 	bl	800c0ea <memcpy>
 800b812:	ec49 8b10 	vmov	d0, r8, r9
 800b816:	aa18      	add	r2, sp, #96	; 0x60
 800b818:	a917      	add	r1, sp, #92	; 0x5c
 800b81a:	4620      	mov	r0, r4
 800b81c:	f002 fe8e 	bl	800e53c <__d2b>
 800b820:	ec49 8b18 	vmov	d8, r8, r9
 800b824:	9016      	str	r0, [sp, #88]	; 0x58
 800b826:	2800      	cmp	r0, #0
 800b828:	f43f af02 	beq.w	800b630 <_strtod_l+0x488>
 800b82c:	2101      	movs	r1, #1
 800b82e:	4620      	mov	r0, r4
 800b830:	f002 fbe8 	bl	800e004 <__i2b>
 800b834:	4683      	mov	fp, r0
 800b836:	2800      	cmp	r0, #0
 800b838:	f43f aefa 	beq.w	800b630 <_strtod_l+0x488>
 800b83c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b83e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b840:	2e00      	cmp	r6, #0
 800b842:	bfab      	itete	ge
 800b844:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b846:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b848:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b84a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b84e:	bfac      	ite	ge
 800b850:	eb06 0a03 	addge.w	sl, r6, r3
 800b854:	1b9f      	sublt	r7, r3, r6
 800b856:	9b04      	ldr	r3, [sp, #16]
 800b858:	1af6      	subs	r6, r6, r3
 800b85a:	4416      	add	r6, r2
 800b85c:	4ba0      	ldr	r3, [pc, #640]	; (800bae0 <_strtod_l+0x938>)
 800b85e:	3e01      	subs	r6, #1
 800b860:	429e      	cmp	r6, r3
 800b862:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b866:	f280 80c4 	bge.w	800b9f2 <_strtod_l+0x84a>
 800b86a:	1b9b      	subs	r3, r3, r6
 800b86c:	2b1f      	cmp	r3, #31
 800b86e:	eba2 0203 	sub.w	r2, r2, r3
 800b872:	f04f 0101 	mov.w	r1, #1
 800b876:	f300 80b0 	bgt.w	800b9da <_strtod_l+0x832>
 800b87a:	fa01 f303 	lsl.w	r3, r1, r3
 800b87e:	930e      	str	r3, [sp, #56]	; 0x38
 800b880:	2300      	movs	r3, #0
 800b882:	930d      	str	r3, [sp, #52]	; 0x34
 800b884:	eb0a 0602 	add.w	r6, sl, r2
 800b888:	9b04      	ldr	r3, [sp, #16]
 800b88a:	45b2      	cmp	sl, r6
 800b88c:	4417      	add	r7, r2
 800b88e:	441f      	add	r7, r3
 800b890:	4653      	mov	r3, sl
 800b892:	bfa8      	it	ge
 800b894:	4633      	movge	r3, r6
 800b896:	42bb      	cmp	r3, r7
 800b898:	bfa8      	it	ge
 800b89a:	463b      	movge	r3, r7
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	bfc2      	ittt	gt
 800b8a0:	1af6      	subgt	r6, r6, r3
 800b8a2:	1aff      	subgt	r7, r7, r3
 800b8a4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b8a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	dd17      	ble.n	800b8de <_strtod_l+0x736>
 800b8ae:	4659      	mov	r1, fp
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f002 fc66 	bl	800e184 <__pow5mult>
 800b8b8:	4683      	mov	fp, r0
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	f43f aeb8 	beq.w	800b630 <_strtod_l+0x488>
 800b8c0:	4601      	mov	r1, r0
 800b8c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f002 fbb3 	bl	800e030 <__multiply>
 800b8ca:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	f43f aeaf 	beq.w	800b630 <_strtod_l+0x488>
 800b8d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f002 fa95 	bl	800de04 <_Bfree>
 800b8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8dc:	9316      	str	r3, [sp, #88]	; 0x58
 800b8de:	2e00      	cmp	r6, #0
 800b8e0:	f300 808c 	bgt.w	800b9fc <_strtod_l+0x854>
 800b8e4:	9b08      	ldr	r3, [sp, #32]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	dd08      	ble.n	800b8fc <_strtod_l+0x754>
 800b8ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8ec:	9905      	ldr	r1, [sp, #20]
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f002 fc48 	bl	800e184 <__pow5mult>
 800b8f4:	9005      	str	r0, [sp, #20]
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	f43f ae9a 	beq.w	800b630 <_strtod_l+0x488>
 800b8fc:	2f00      	cmp	r7, #0
 800b8fe:	dd08      	ble.n	800b912 <_strtod_l+0x76a>
 800b900:	9905      	ldr	r1, [sp, #20]
 800b902:	463a      	mov	r2, r7
 800b904:	4620      	mov	r0, r4
 800b906:	f002 fc97 	bl	800e238 <__lshift>
 800b90a:	9005      	str	r0, [sp, #20]
 800b90c:	2800      	cmp	r0, #0
 800b90e:	f43f ae8f 	beq.w	800b630 <_strtod_l+0x488>
 800b912:	f1ba 0f00 	cmp.w	sl, #0
 800b916:	dd08      	ble.n	800b92a <_strtod_l+0x782>
 800b918:	4659      	mov	r1, fp
 800b91a:	4652      	mov	r2, sl
 800b91c:	4620      	mov	r0, r4
 800b91e:	f002 fc8b 	bl	800e238 <__lshift>
 800b922:	4683      	mov	fp, r0
 800b924:	2800      	cmp	r0, #0
 800b926:	f43f ae83 	beq.w	800b630 <_strtod_l+0x488>
 800b92a:	9a05      	ldr	r2, [sp, #20]
 800b92c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b92e:	4620      	mov	r0, r4
 800b930:	f002 fd0a 	bl	800e348 <__mdiff>
 800b934:	4605      	mov	r5, r0
 800b936:	2800      	cmp	r0, #0
 800b938:	f43f ae7a 	beq.w	800b630 <_strtod_l+0x488>
 800b93c:	68c3      	ldr	r3, [r0, #12]
 800b93e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b940:	2300      	movs	r3, #0
 800b942:	60c3      	str	r3, [r0, #12]
 800b944:	4659      	mov	r1, fp
 800b946:	f002 fce3 	bl	800e310 <__mcmp>
 800b94a:	2800      	cmp	r0, #0
 800b94c:	da60      	bge.n	800ba10 <_strtod_l+0x868>
 800b94e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b950:	ea53 0308 	orrs.w	r3, r3, r8
 800b954:	f040 8084 	bne.w	800ba60 <_strtod_l+0x8b8>
 800b958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d17f      	bne.n	800ba60 <_strtod_l+0x8b8>
 800b960:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b964:	0d1b      	lsrs	r3, r3, #20
 800b966:	051b      	lsls	r3, r3, #20
 800b968:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b96c:	d978      	bls.n	800ba60 <_strtod_l+0x8b8>
 800b96e:	696b      	ldr	r3, [r5, #20]
 800b970:	b913      	cbnz	r3, 800b978 <_strtod_l+0x7d0>
 800b972:	692b      	ldr	r3, [r5, #16]
 800b974:	2b01      	cmp	r3, #1
 800b976:	dd73      	ble.n	800ba60 <_strtod_l+0x8b8>
 800b978:	4629      	mov	r1, r5
 800b97a:	2201      	movs	r2, #1
 800b97c:	4620      	mov	r0, r4
 800b97e:	f002 fc5b 	bl	800e238 <__lshift>
 800b982:	4659      	mov	r1, fp
 800b984:	4605      	mov	r5, r0
 800b986:	f002 fcc3 	bl	800e310 <__mcmp>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	dd68      	ble.n	800ba60 <_strtod_l+0x8b8>
 800b98e:	9904      	ldr	r1, [sp, #16]
 800b990:	4a54      	ldr	r2, [pc, #336]	; (800bae4 <_strtod_l+0x93c>)
 800b992:	464b      	mov	r3, r9
 800b994:	2900      	cmp	r1, #0
 800b996:	f000 8084 	beq.w	800baa2 <_strtod_l+0x8fa>
 800b99a:	ea02 0109 	and.w	r1, r2, r9
 800b99e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b9a2:	dc7e      	bgt.n	800baa2 <_strtod_l+0x8fa>
 800b9a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b9a8:	f77f aeb3 	ble.w	800b712 <_strtod_l+0x56a>
 800b9ac:	4b4e      	ldr	r3, [pc, #312]	; (800bae8 <_strtod_l+0x940>)
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	4649      	mov	r1, r9
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f7f4 fe20 	bl	80005f8 <__aeabi_dmul>
 800b9b8:	4b4a      	ldr	r3, [pc, #296]	; (800bae4 <_strtod_l+0x93c>)
 800b9ba:	400b      	ands	r3, r1
 800b9bc:	4680      	mov	r8, r0
 800b9be:	4689      	mov	r9, r1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f47f ae3f 	bne.w	800b644 <_strtod_l+0x49c>
 800b9c6:	2322      	movs	r3, #34	; 0x22
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	e63b      	b.n	800b644 <_strtod_l+0x49c>
 800b9cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9d4:	ea03 0808 	and.w	r8, r3, r8
 800b9d8:	e6e8      	b.n	800b7ac <_strtod_l+0x604>
 800b9da:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b9de:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b9e2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b9e6:	36e2      	adds	r6, #226	; 0xe2
 800b9e8:	fa01 f306 	lsl.w	r3, r1, r6
 800b9ec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b9f0:	e748      	b.n	800b884 <_strtod_l+0x6dc>
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b9fa:	e743      	b.n	800b884 <_strtod_l+0x6dc>
 800b9fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b9fe:	4632      	mov	r2, r6
 800ba00:	4620      	mov	r0, r4
 800ba02:	f002 fc19 	bl	800e238 <__lshift>
 800ba06:	9016      	str	r0, [sp, #88]	; 0x58
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	f47f af6b 	bne.w	800b8e4 <_strtod_l+0x73c>
 800ba0e:	e60f      	b.n	800b630 <_strtod_l+0x488>
 800ba10:	46ca      	mov	sl, r9
 800ba12:	d171      	bne.n	800baf8 <_strtod_l+0x950>
 800ba14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba1a:	b352      	cbz	r2, 800ba72 <_strtod_l+0x8ca>
 800ba1c:	4a33      	ldr	r2, [pc, #204]	; (800baec <_strtod_l+0x944>)
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	d12a      	bne.n	800ba78 <_strtod_l+0x8d0>
 800ba22:	9b04      	ldr	r3, [sp, #16]
 800ba24:	4641      	mov	r1, r8
 800ba26:	b1fb      	cbz	r3, 800ba68 <_strtod_l+0x8c0>
 800ba28:	4b2e      	ldr	r3, [pc, #184]	; (800bae4 <_strtod_l+0x93c>)
 800ba2a:	ea09 0303 	and.w	r3, r9, r3
 800ba2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba36:	d81a      	bhi.n	800ba6e <_strtod_l+0x8c6>
 800ba38:	0d1b      	lsrs	r3, r3, #20
 800ba3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba42:	4299      	cmp	r1, r3
 800ba44:	d118      	bne.n	800ba78 <_strtod_l+0x8d0>
 800ba46:	4b2a      	ldr	r3, [pc, #168]	; (800baf0 <_strtod_l+0x948>)
 800ba48:	459a      	cmp	sl, r3
 800ba4a:	d102      	bne.n	800ba52 <_strtod_l+0x8aa>
 800ba4c:	3101      	adds	r1, #1
 800ba4e:	f43f adef 	beq.w	800b630 <_strtod_l+0x488>
 800ba52:	4b24      	ldr	r3, [pc, #144]	; (800bae4 <_strtod_l+0x93c>)
 800ba54:	ea0a 0303 	and.w	r3, sl, r3
 800ba58:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ba5c:	f04f 0800 	mov.w	r8, #0
 800ba60:	9b04      	ldr	r3, [sp, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1a2      	bne.n	800b9ac <_strtod_l+0x804>
 800ba66:	e5ed      	b.n	800b644 <_strtod_l+0x49c>
 800ba68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba6c:	e7e9      	b.n	800ba42 <_strtod_l+0x89a>
 800ba6e:	4613      	mov	r3, r2
 800ba70:	e7e7      	b.n	800ba42 <_strtod_l+0x89a>
 800ba72:	ea53 0308 	orrs.w	r3, r3, r8
 800ba76:	d08a      	beq.n	800b98e <_strtod_l+0x7e6>
 800ba78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba7a:	b1e3      	cbz	r3, 800bab6 <_strtod_l+0x90e>
 800ba7c:	ea13 0f0a 	tst.w	r3, sl
 800ba80:	d0ee      	beq.n	800ba60 <_strtod_l+0x8b8>
 800ba82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba84:	9a04      	ldr	r2, [sp, #16]
 800ba86:	4640      	mov	r0, r8
 800ba88:	4649      	mov	r1, r9
 800ba8a:	b1c3      	cbz	r3, 800babe <_strtod_l+0x916>
 800ba8c:	f7ff fb6e 	bl	800b16c <sulp>
 800ba90:	4602      	mov	r2, r0
 800ba92:	460b      	mov	r3, r1
 800ba94:	ec51 0b18 	vmov	r0, r1, d8
 800ba98:	f7f4 fbf8 	bl	800028c <__adddf3>
 800ba9c:	4680      	mov	r8, r0
 800ba9e:	4689      	mov	r9, r1
 800baa0:	e7de      	b.n	800ba60 <_strtod_l+0x8b8>
 800baa2:	4013      	ands	r3, r2
 800baa4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800baa8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800baac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bab0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800bab4:	e7d4      	b.n	800ba60 <_strtod_l+0x8b8>
 800bab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bab8:	ea13 0f08 	tst.w	r3, r8
 800babc:	e7e0      	b.n	800ba80 <_strtod_l+0x8d8>
 800babe:	f7ff fb55 	bl	800b16c <sulp>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	ec51 0b18 	vmov	r0, r1, d8
 800baca:	f7f4 fbdd 	bl	8000288 <__aeabi_dsub>
 800bace:	2200      	movs	r2, #0
 800bad0:	2300      	movs	r3, #0
 800bad2:	4680      	mov	r8, r0
 800bad4:	4689      	mov	r9, r1
 800bad6:	f7f4 fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bada:	2800      	cmp	r0, #0
 800badc:	d0c0      	beq.n	800ba60 <_strtod_l+0x8b8>
 800bade:	e618      	b.n	800b712 <_strtod_l+0x56a>
 800bae0:	fffffc02 	.word	0xfffffc02
 800bae4:	7ff00000 	.word	0x7ff00000
 800bae8:	39500000 	.word	0x39500000
 800baec:	000fffff 	.word	0x000fffff
 800baf0:	7fefffff 	.word	0x7fefffff
 800baf4:	0800ffd8 	.word	0x0800ffd8
 800baf8:	4659      	mov	r1, fp
 800bafa:	4628      	mov	r0, r5
 800bafc:	f002 fd78 	bl	800e5f0 <__ratio>
 800bb00:	ec57 6b10 	vmov	r6, r7, d0
 800bb04:	ee10 0a10 	vmov	r0, s0
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb0e:	4639      	mov	r1, r7
 800bb10:	f7f4 ffee 	bl	8000af0 <__aeabi_dcmple>
 800bb14:	2800      	cmp	r0, #0
 800bb16:	d071      	beq.n	800bbfc <_strtod_l+0xa54>
 800bb18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d17c      	bne.n	800bc18 <_strtod_l+0xa70>
 800bb1e:	f1b8 0f00 	cmp.w	r8, #0
 800bb22:	d15a      	bne.n	800bbda <_strtod_l+0xa32>
 800bb24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d15d      	bne.n	800bbe8 <_strtod_l+0xa40>
 800bb2c:	4b90      	ldr	r3, [pc, #576]	; (800bd70 <_strtod_l+0xbc8>)
 800bb2e:	2200      	movs	r2, #0
 800bb30:	4630      	mov	r0, r6
 800bb32:	4639      	mov	r1, r7
 800bb34:	f7f4 ffd2 	bl	8000adc <__aeabi_dcmplt>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d15c      	bne.n	800bbf6 <_strtod_l+0xa4e>
 800bb3c:	4630      	mov	r0, r6
 800bb3e:	4639      	mov	r1, r7
 800bb40:	4b8c      	ldr	r3, [pc, #560]	; (800bd74 <_strtod_l+0xbcc>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	f7f4 fd58 	bl	80005f8 <__aeabi_dmul>
 800bb48:	4606      	mov	r6, r0
 800bb4a:	460f      	mov	r7, r1
 800bb4c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bb50:	9606      	str	r6, [sp, #24]
 800bb52:	9307      	str	r3, [sp, #28]
 800bb54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bb5c:	4b86      	ldr	r3, [pc, #536]	; (800bd78 <_strtod_l+0xbd0>)
 800bb5e:	ea0a 0303 	and.w	r3, sl, r3
 800bb62:	930d      	str	r3, [sp, #52]	; 0x34
 800bb64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb66:	4b85      	ldr	r3, [pc, #532]	; (800bd7c <_strtod_l+0xbd4>)
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	f040 8090 	bne.w	800bc8e <_strtod_l+0xae6>
 800bb6e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bb72:	ec49 8b10 	vmov	d0, r8, r9
 800bb76:	f002 fc71 	bl	800e45c <__ulp>
 800bb7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb7e:	ec51 0b10 	vmov	r0, r1, d0
 800bb82:	f7f4 fd39 	bl	80005f8 <__aeabi_dmul>
 800bb86:	4642      	mov	r2, r8
 800bb88:	464b      	mov	r3, r9
 800bb8a:	f7f4 fb7f 	bl	800028c <__adddf3>
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4979      	ldr	r1, [pc, #484]	; (800bd78 <_strtod_l+0xbd0>)
 800bb92:	4a7b      	ldr	r2, [pc, #492]	; (800bd80 <_strtod_l+0xbd8>)
 800bb94:	4019      	ands	r1, r3
 800bb96:	4291      	cmp	r1, r2
 800bb98:	4680      	mov	r8, r0
 800bb9a:	d944      	bls.n	800bc26 <_strtod_l+0xa7e>
 800bb9c:	ee18 2a90 	vmov	r2, s17
 800bba0:	4b78      	ldr	r3, [pc, #480]	; (800bd84 <_strtod_l+0xbdc>)
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d104      	bne.n	800bbb0 <_strtod_l+0xa08>
 800bba6:	ee18 3a10 	vmov	r3, s16
 800bbaa:	3301      	adds	r3, #1
 800bbac:	f43f ad40 	beq.w	800b630 <_strtod_l+0x488>
 800bbb0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bd84 <_strtod_l+0xbdc>
 800bbb4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800bbb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f002 f922 	bl	800de04 <_Bfree>
 800bbc0:	9905      	ldr	r1, [sp, #20]
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f002 f91e 	bl	800de04 <_Bfree>
 800bbc8:	4659      	mov	r1, fp
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f002 f91a 	bl	800de04 <_Bfree>
 800bbd0:	4629      	mov	r1, r5
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	f002 f916 	bl	800de04 <_Bfree>
 800bbd8:	e609      	b.n	800b7ee <_strtod_l+0x646>
 800bbda:	f1b8 0f01 	cmp.w	r8, #1
 800bbde:	d103      	bne.n	800bbe8 <_strtod_l+0xa40>
 800bbe0:	f1b9 0f00 	cmp.w	r9, #0
 800bbe4:	f43f ad95 	beq.w	800b712 <_strtod_l+0x56a>
 800bbe8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bd40 <_strtod_l+0xb98>
 800bbec:	4f60      	ldr	r7, [pc, #384]	; (800bd70 <_strtod_l+0xbc8>)
 800bbee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bbf2:	2600      	movs	r6, #0
 800bbf4:	e7ae      	b.n	800bb54 <_strtod_l+0x9ac>
 800bbf6:	4f5f      	ldr	r7, [pc, #380]	; (800bd74 <_strtod_l+0xbcc>)
 800bbf8:	2600      	movs	r6, #0
 800bbfa:	e7a7      	b.n	800bb4c <_strtod_l+0x9a4>
 800bbfc:	4b5d      	ldr	r3, [pc, #372]	; (800bd74 <_strtod_l+0xbcc>)
 800bbfe:	4630      	mov	r0, r6
 800bc00:	4639      	mov	r1, r7
 800bc02:	2200      	movs	r2, #0
 800bc04:	f7f4 fcf8 	bl	80005f8 <__aeabi_dmul>
 800bc08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc0a:	4606      	mov	r6, r0
 800bc0c:	460f      	mov	r7, r1
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d09c      	beq.n	800bb4c <_strtod_l+0x9a4>
 800bc12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bc16:	e79d      	b.n	800bb54 <_strtod_l+0x9ac>
 800bc18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bd48 <_strtod_l+0xba0>
 800bc1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc20:	ec57 6b17 	vmov	r6, r7, d7
 800bc24:	e796      	b.n	800bb54 <_strtod_l+0x9ac>
 800bc26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bc2a:	9b04      	ldr	r3, [sp, #16]
 800bc2c:	46ca      	mov	sl, r9
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1c2      	bne.n	800bbb8 <_strtod_l+0xa10>
 800bc32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bc38:	0d1b      	lsrs	r3, r3, #20
 800bc3a:	051b      	lsls	r3, r3, #20
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d1bb      	bne.n	800bbb8 <_strtod_l+0xa10>
 800bc40:	4630      	mov	r0, r6
 800bc42:	4639      	mov	r1, r7
 800bc44:	f7f5 f838 	bl	8000cb8 <__aeabi_d2lz>
 800bc48:	f7f4 fca8 	bl	800059c <__aeabi_l2d>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	f7f4 fb18 	bl	8000288 <__aeabi_dsub>
 800bc58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc5e:	ea43 0308 	orr.w	r3, r3, r8
 800bc62:	4313      	orrs	r3, r2
 800bc64:	4606      	mov	r6, r0
 800bc66:	460f      	mov	r7, r1
 800bc68:	d054      	beq.n	800bd14 <_strtod_l+0xb6c>
 800bc6a:	a339      	add	r3, pc, #228	; (adr r3, 800bd50 <_strtod_l+0xba8>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f7f4 ff34 	bl	8000adc <__aeabi_dcmplt>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	f47f ace5 	bne.w	800b644 <_strtod_l+0x49c>
 800bc7a:	a337      	add	r3, pc, #220	; (adr r3, 800bd58 <_strtod_l+0xbb0>)
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	4630      	mov	r0, r6
 800bc82:	4639      	mov	r1, r7
 800bc84:	f7f4 ff48 	bl	8000b18 <__aeabi_dcmpgt>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d095      	beq.n	800bbb8 <_strtod_l+0xa10>
 800bc8c:	e4da      	b.n	800b644 <_strtod_l+0x49c>
 800bc8e:	9b04      	ldr	r3, [sp, #16]
 800bc90:	b333      	cbz	r3, 800bce0 <_strtod_l+0xb38>
 800bc92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bc98:	d822      	bhi.n	800bce0 <_strtod_l+0xb38>
 800bc9a:	a331      	add	r3, pc, #196	; (adr r3, 800bd60 <_strtod_l+0xbb8>)
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	4630      	mov	r0, r6
 800bca2:	4639      	mov	r1, r7
 800bca4:	f7f4 ff24 	bl	8000af0 <__aeabi_dcmple>
 800bca8:	b1a0      	cbz	r0, 800bcd4 <_strtod_l+0xb2c>
 800bcaa:	4639      	mov	r1, r7
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7f4 ff7b 	bl	8000ba8 <__aeabi_d2uiz>
 800bcb2:	2801      	cmp	r0, #1
 800bcb4:	bf38      	it	cc
 800bcb6:	2001      	movcc	r0, #1
 800bcb8:	f7f4 fc24 	bl	8000504 <__aeabi_ui2d>
 800bcbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	460f      	mov	r7, r1
 800bcc2:	bb23      	cbnz	r3, 800bd0e <_strtod_l+0xb66>
 800bcc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcc8:	9010      	str	r0, [sp, #64]	; 0x40
 800bcca:	9311      	str	r3, [sp, #68]	; 0x44
 800bccc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bcd0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bcd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcd8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bcdc:	1a9b      	subs	r3, r3, r2
 800bcde:	930f      	str	r3, [sp, #60]	; 0x3c
 800bce0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bce4:	eeb0 0a48 	vmov.f32	s0, s16
 800bce8:	eef0 0a68 	vmov.f32	s1, s17
 800bcec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bcf0:	f002 fbb4 	bl	800e45c <__ulp>
 800bcf4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800bcf8:	ec53 2b10 	vmov	r2, r3, d0
 800bcfc:	f7f4 fc7c 	bl	80005f8 <__aeabi_dmul>
 800bd00:	ec53 2b18 	vmov	r2, r3, d8
 800bd04:	f7f4 fac2 	bl	800028c <__adddf3>
 800bd08:	4680      	mov	r8, r0
 800bd0a:	4689      	mov	r9, r1
 800bd0c:	e78d      	b.n	800bc2a <_strtod_l+0xa82>
 800bd0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bd12:	e7db      	b.n	800bccc <_strtod_l+0xb24>
 800bd14:	a314      	add	r3, pc, #80	; (adr r3, 800bd68 <_strtod_l+0xbc0>)
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	f7f4 fedf 	bl	8000adc <__aeabi_dcmplt>
 800bd1e:	e7b3      	b.n	800bc88 <_strtod_l+0xae0>
 800bd20:	2300      	movs	r3, #0
 800bd22:	930a      	str	r3, [sp, #40]	; 0x28
 800bd24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bd26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd28:	6013      	str	r3, [r2, #0]
 800bd2a:	f7ff ba7c 	b.w	800b226 <_strtod_l+0x7e>
 800bd2e:	2a65      	cmp	r2, #101	; 0x65
 800bd30:	f43f ab75 	beq.w	800b41e <_strtod_l+0x276>
 800bd34:	2a45      	cmp	r2, #69	; 0x45
 800bd36:	f43f ab72 	beq.w	800b41e <_strtod_l+0x276>
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f7ff bbaa 	b.w	800b494 <_strtod_l+0x2ec>
 800bd40:	00000000 	.word	0x00000000
 800bd44:	bff00000 	.word	0xbff00000
 800bd48:	00000000 	.word	0x00000000
 800bd4c:	3ff00000 	.word	0x3ff00000
 800bd50:	94a03595 	.word	0x94a03595
 800bd54:	3fdfffff 	.word	0x3fdfffff
 800bd58:	35afe535 	.word	0x35afe535
 800bd5c:	3fe00000 	.word	0x3fe00000
 800bd60:	ffc00000 	.word	0xffc00000
 800bd64:	41dfffff 	.word	0x41dfffff
 800bd68:	94a03595 	.word	0x94a03595
 800bd6c:	3fcfffff 	.word	0x3fcfffff
 800bd70:	3ff00000 	.word	0x3ff00000
 800bd74:	3fe00000 	.word	0x3fe00000
 800bd78:	7ff00000 	.word	0x7ff00000
 800bd7c:	7fe00000 	.word	0x7fe00000
 800bd80:	7c9fffff 	.word	0x7c9fffff
 800bd84:	7fefffff 	.word	0x7fefffff

0800bd88 <_strtod_r>:
 800bd88:	4b01      	ldr	r3, [pc, #4]	; (800bd90 <_strtod_r+0x8>)
 800bd8a:	f7ff ba0d 	b.w	800b1a8 <_strtod_l>
 800bd8e:	bf00      	nop
 800bd90:	20000050 	.word	0x20000050

0800bd94 <strtof>:
 800bd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd98:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800be5c <strtof+0xc8>
 800bd9c:	4b2a      	ldr	r3, [pc, #168]	; (800be48 <strtof+0xb4>)
 800bd9e:	460a      	mov	r2, r1
 800bda0:	ed2d 8b02 	vpush	{d8}
 800bda4:	4601      	mov	r1, r0
 800bda6:	f8d8 0000 	ldr.w	r0, [r8]
 800bdaa:	f7ff f9fd 	bl	800b1a8 <_strtod_l>
 800bdae:	ec55 4b10 	vmov	r4, r5, d0
 800bdb2:	ee10 2a10 	vmov	r2, s0
 800bdb6:	ee10 0a10 	vmov	r0, s0
 800bdba:	462b      	mov	r3, r5
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	f7f4 feb5 	bl	8000b2c <__aeabi_dcmpun>
 800bdc2:	b190      	cbz	r0, 800bdea <strtof+0x56>
 800bdc4:	2d00      	cmp	r5, #0
 800bdc6:	4821      	ldr	r0, [pc, #132]	; (800be4c <strtof+0xb8>)
 800bdc8:	da09      	bge.n	800bdde <strtof+0x4a>
 800bdca:	f000 f9a5 	bl	800c118 <nanf>
 800bdce:	eeb1 8a40 	vneg.f32	s16, s0
 800bdd2:	eeb0 0a48 	vmov.f32	s0, s16
 800bdd6:	ecbd 8b02 	vpop	{d8}
 800bdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdde:	ecbd 8b02 	vpop	{d8}
 800bde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bde6:	f000 b997 	b.w	800c118 <nanf>
 800bdea:	4620      	mov	r0, r4
 800bdec:	4629      	mov	r1, r5
 800bdee:	f7f4 fefb 	bl	8000be8 <__aeabi_d2f>
 800bdf2:	ee08 0a10 	vmov	s16, r0
 800bdf6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800be50 <strtof+0xbc>
 800bdfa:	eeb0 7ac8 	vabs.f32	s14, s16
 800bdfe:	eeb4 7a67 	vcmp.f32	s14, s15
 800be02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be06:	dd11      	ble.n	800be2c <strtof+0x98>
 800be08:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800be0c:	4b11      	ldr	r3, [pc, #68]	; (800be54 <strtof+0xc0>)
 800be0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be12:	4620      	mov	r0, r4
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 fe89 	bl	8000b2c <__aeabi_dcmpun>
 800be1a:	b980      	cbnz	r0, 800be3e <strtof+0xaa>
 800be1c:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <strtof+0xc0>)
 800be1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be22:	4620      	mov	r0, r4
 800be24:	4639      	mov	r1, r7
 800be26:	f7f4 fe63 	bl	8000af0 <__aeabi_dcmple>
 800be2a:	b940      	cbnz	r0, 800be3e <strtof+0xaa>
 800be2c:	ee18 3a10 	vmov	r3, s16
 800be30:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800be34:	d1cd      	bne.n	800bdd2 <strtof+0x3e>
 800be36:	4b08      	ldr	r3, [pc, #32]	; (800be58 <strtof+0xc4>)
 800be38:	402b      	ands	r3, r5
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d0c9      	beq.n	800bdd2 <strtof+0x3e>
 800be3e:	f8d8 3000 	ldr.w	r3, [r8]
 800be42:	2222      	movs	r2, #34	; 0x22
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	e7c4      	b.n	800bdd2 <strtof+0x3e>
 800be48:	20000050 	.word	0x20000050
 800be4c:	08010397 	.word	0x08010397
 800be50:	7f7fffff 	.word	0x7f7fffff
 800be54:	7fefffff 	.word	0x7fefffff
 800be58:	7ff00000 	.word	0x7ff00000
 800be5c:	20000208 	.word	0x20000208

0800be60 <_strtol_l.constprop.0>:
 800be60:	2b01      	cmp	r3, #1
 800be62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be66:	d001      	beq.n	800be6c <_strtol_l.constprop.0+0xc>
 800be68:	2b24      	cmp	r3, #36	; 0x24
 800be6a:	d906      	bls.n	800be7a <_strtol_l.constprop.0+0x1a>
 800be6c:	f000 f910 	bl	800c090 <__errno>
 800be70:	2316      	movs	r3, #22
 800be72:	6003      	str	r3, [r0, #0]
 800be74:	2000      	movs	r0, #0
 800be76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bf60 <_strtol_l.constprop.0+0x100>
 800be7e:	460d      	mov	r5, r1
 800be80:	462e      	mov	r6, r5
 800be82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800be86:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800be8a:	f017 0708 	ands.w	r7, r7, #8
 800be8e:	d1f7      	bne.n	800be80 <_strtol_l.constprop.0+0x20>
 800be90:	2c2d      	cmp	r4, #45	; 0x2d
 800be92:	d132      	bne.n	800befa <_strtol_l.constprop.0+0x9a>
 800be94:	782c      	ldrb	r4, [r5, #0]
 800be96:	2701      	movs	r7, #1
 800be98:	1cb5      	adds	r5, r6, #2
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d05b      	beq.n	800bf56 <_strtol_l.constprop.0+0xf6>
 800be9e:	2b10      	cmp	r3, #16
 800bea0:	d109      	bne.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bea2:	2c30      	cmp	r4, #48	; 0x30
 800bea4:	d107      	bne.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bea6:	782c      	ldrb	r4, [r5, #0]
 800bea8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800beac:	2c58      	cmp	r4, #88	; 0x58
 800beae:	d14d      	bne.n	800bf4c <_strtol_l.constprop.0+0xec>
 800beb0:	786c      	ldrb	r4, [r5, #1]
 800beb2:	2310      	movs	r3, #16
 800beb4:	3502      	adds	r5, #2
 800beb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800beba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bebe:	f04f 0e00 	mov.w	lr, #0
 800bec2:	fbb8 f9f3 	udiv	r9, r8, r3
 800bec6:	4676      	mov	r6, lr
 800bec8:	fb03 8a19 	mls	sl, r3, r9, r8
 800becc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bed0:	f1bc 0f09 	cmp.w	ip, #9
 800bed4:	d816      	bhi.n	800bf04 <_strtol_l.constprop.0+0xa4>
 800bed6:	4664      	mov	r4, ip
 800bed8:	42a3      	cmp	r3, r4
 800beda:	dd24      	ble.n	800bf26 <_strtol_l.constprop.0+0xc6>
 800bedc:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bee0:	d008      	beq.n	800bef4 <_strtol_l.constprop.0+0x94>
 800bee2:	45b1      	cmp	r9, r6
 800bee4:	d31c      	bcc.n	800bf20 <_strtol_l.constprop.0+0xc0>
 800bee6:	d101      	bne.n	800beec <_strtol_l.constprop.0+0x8c>
 800bee8:	45a2      	cmp	sl, r4
 800beea:	db19      	blt.n	800bf20 <_strtol_l.constprop.0+0xc0>
 800beec:	fb06 4603 	mla	r6, r6, r3, r4
 800bef0:	f04f 0e01 	mov.w	lr, #1
 800bef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bef8:	e7e8      	b.n	800becc <_strtol_l.constprop.0+0x6c>
 800befa:	2c2b      	cmp	r4, #43	; 0x2b
 800befc:	bf04      	itt	eq
 800befe:	782c      	ldrbeq	r4, [r5, #0]
 800bf00:	1cb5      	addeq	r5, r6, #2
 800bf02:	e7ca      	b.n	800be9a <_strtol_l.constprop.0+0x3a>
 800bf04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bf08:	f1bc 0f19 	cmp.w	ip, #25
 800bf0c:	d801      	bhi.n	800bf12 <_strtol_l.constprop.0+0xb2>
 800bf0e:	3c37      	subs	r4, #55	; 0x37
 800bf10:	e7e2      	b.n	800bed8 <_strtol_l.constprop.0+0x78>
 800bf12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bf16:	f1bc 0f19 	cmp.w	ip, #25
 800bf1a:	d804      	bhi.n	800bf26 <_strtol_l.constprop.0+0xc6>
 800bf1c:	3c57      	subs	r4, #87	; 0x57
 800bf1e:	e7db      	b.n	800bed8 <_strtol_l.constprop.0+0x78>
 800bf20:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800bf24:	e7e6      	b.n	800bef4 <_strtol_l.constprop.0+0x94>
 800bf26:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bf2a:	d105      	bne.n	800bf38 <_strtol_l.constprop.0+0xd8>
 800bf2c:	2322      	movs	r3, #34	; 0x22
 800bf2e:	6003      	str	r3, [r0, #0]
 800bf30:	4646      	mov	r6, r8
 800bf32:	b942      	cbnz	r2, 800bf46 <_strtol_l.constprop.0+0xe6>
 800bf34:	4630      	mov	r0, r6
 800bf36:	e79e      	b.n	800be76 <_strtol_l.constprop.0+0x16>
 800bf38:	b107      	cbz	r7, 800bf3c <_strtol_l.constprop.0+0xdc>
 800bf3a:	4276      	negs	r6, r6
 800bf3c:	2a00      	cmp	r2, #0
 800bf3e:	d0f9      	beq.n	800bf34 <_strtol_l.constprop.0+0xd4>
 800bf40:	f1be 0f00 	cmp.w	lr, #0
 800bf44:	d000      	beq.n	800bf48 <_strtol_l.constprop.0+0xe8>
 800bf46:	1e69      	subs	r1, r5, #1
 800bf48:	6011      	str	r1, [r2, #0]
 800bf4a:	e7f3      	b.n	800bf34 <_strtol_l.constprop.0+0xd4>
 800bf4c:	2430      	movs	r4, #48	; 0x30
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d1b1      	bne.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bf52:	2308      	movs	r3, #8
 800bf54:	e7af      	b.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bf56:	2c30      	cmp	r4, #48	; 0x30
 800bf58:	d0a5      	beq.n	800bea6 <_strtol_l.constprop.0+0x46>
 800bf5a:	230a      	movs	r3, #10
 800bf5c:	e7ab      	b.n	800beb6 <_strtol_l.constprop.0+0x56>
 800bf5e:	bf00      	nop
 800bf60:	08010009 	.word	0x08010009

0800bf64 <_strtol_r>:
 800bf64:	f7ff bf7c 	b.w	800be60 <_strtol_l.constprop.0>

0800bf68 <_fwalk_sglue>:
 800bf68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf6c:	4607      	mov	r7, r0
 800bf6e:	4688      	mov	r8, r1
 800bf70:	4614      	mov	r4, r2
 800bf72:	2600      	movs	r6, #0
 800bf74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf78:	f1b9 0901 	subs.w	r9, r9, #1
 800bf7c:	d505      	bpl.n	800bf8a <_fwalk_sglue+0x22>
 800bf7e:	6824      	ldr	r4, [r4, #0]
 800bf80:	2c00      	cmp	r4, #0
 800bf82:	d1f7      	bne.n	800bf74 <_fwalk_sglue+0xc>
 800bf84:	4630      	mov	r0, r6
 800bf86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf8a:	89ab      	ldrh	r3, [r5, #12]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d907      	bls.n	800bfa0 <_fwalk_sglue+0x38>
 800bf90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf94:	3301      	adds	r3, #1
 800bf96:	d003      	beq.n	800bfa0 <_fwalk_sglue+0x38>
 800bf98:	4629      	mov	r1, r5
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	47c0      	blx	r8
 800bf9e:	4306      	orrs	r6, r0
 800bfa0:	3568      	adds	r5, #104	; 0x68
 800bfa2:	e7e9      	b.n	800bf78 <_fwalk_sglue+0x10>

0800bfa4 <iprintf>:
 800bfa4:	b40f      	push	{r0, r1, r2, r3}
 800bfa6:	b507      	push	{r0, r1, r2, lr}
 800bfa8:	4906      	ldr	r1, [pc, #24]	; (800bfc4 <iprintf+0x20>)
 800bfaa:	ab04      	add	r3, sp, #16
 800bfac:	6808      	ldr	r0, [r1, #0]
 800bfae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb2:	6881      	ldr	r1, [r0, #8]
 800bfb4:	9301      	str	r3, [sp, #4]
 800bfb6:	f001 fc57 	bl	800d868 <_vfiprintf_r>
 800bfba:	b003      	add	sp, #12
 800bfbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfc0:	b004      	add	sp, #16
 800bfc2:	4770      	bx	lr
 800bfc4:	20000208 	.word	0x20000208

0800bfc8 <strncmp>:
 800bfc8:	b510      	push	{r4, lr}
 800bfca:	b16a      	cbz	r2, 800bfe8 <strncmp+0x20>
 800bfcc:	3901      	subs	r1, #1
 800bfce:	1884      	adds	r4, r0, r2
 800bfd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d103      	bne.n	800bfe4 <strncmp+0x1c>
 800bfdc:	42a0      	cmp	r0, r4
 800bfde:	d001      	beq.n	800bfe4 <strncmp+0x1c>
 800bfe0:	2a00      	cmp	r2, #0
 800bfe2:	d1f5      	bne.n	800bfd0 <strncmp+0x8>
 800bfe4:	1ad0      	subs	r0, r2, r3
 800bfe6:	bd10      	pop	{r4, pc}
 800bfe8:	4610      	mov	r0, r2
 800bfea:	e7fc      	b.n	800bfe6 <strncmp+0x1e>

0800bfec <memset>:
 800bfec:	4402      	add	r2, r0
 800bfee:	4603      	mov	r3, r0
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d100      	bne.n	800bff6 <memset+0xa>
 800bff4:	4770      	bx	lr
 800bff6:	f803 1b01 	strb.w	r1, [r3], #1
 800bffa:	e7f9      	b.n	800bff0 <memset+0x4>

0800bffc <_localeconv_r>:
 800bffc:	4800      	ldr	r0, [pc, #0]	; (800c000 <_localeconv_r+0x4>)
 800bffe:	4770      	bx	lr
 800c000:	20000140 	.word	0x20000140

0800c004 <_close_r>:
 800c004:	b538      	push	{r3, r4, r5, lr}
 800c006:	4d06      	ldr	r5, [pc, #24]	; (800c020 <_close_r+0x1c>)
 800c008:	2300      	movs	r3, #0
 800c00a:	4604      	mov	r4, r0
 800c00c:	4608      	mov	r0, r1
 800c00e:	602b      	str	r3, [r5, #0]
 800c010:	f7f6 ffdb 	bl	8002fca <_close>
 800c014:	1c43      	adds	r3, r0, #1
 800c016:	d102      	bne.n	800c01e <_close_r+0x1a>
 800c018:	682b      	ldr	r3, [r5, #0]
 800c01a:	b103      	cbz	r3, 800c01e <_close_r+0x1a>
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	bd38      	pop	{r3, r4, r5, pc}
 800c020:	20000be0 	.word	0x20000be0

0800c024 <_lseek_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	4d07      	ldr	r5, [pc, #28]	; (800c044 <_lseek_r+0x20>)
 800c028:	4604      	mov	r4, r0
 800c02a:	4608      	mov	r0, r1
 800c02c:	4611      	mov	r1, r2
 800c02e:	2200      	movs	r2, #0
 800c030:	602a      	str	r2, [r5, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	f7f6 fff0 	bl	8003018 <_lseek>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_lseek_r+0x1e>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_lseek_r+0x1e>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	20000be0 	.word	0x20000be0

0800c048 <_read_r>:
 800c048:	b538      	push	{r3, r4, r5, lr}
 800c04a:	4d07      	ldr	r5, [pc, #28]	; (800c068 <_read_r+0x20>)
 800c04c:	4604      	mov	r4, r0
 800c04e:	4608      	mov	r0, r1
 800c050:	4611      	mov	r1, r2
 800c052:	2200      	movs	r2, #0
 800c054:	602a      	str	r2, [r5, #0]
 800c056:	461a      	mov	r2, r3
 800c058:	f7f6 ff7e 	bl	8002f58 <_read>
 800c05c:	1c43      	adds	r3, r0, #1
 800c05e:	d102      	bne.n	800c066 <_read_r+0x1e>
 800c060:	682b      	ldr	r3, [r5, #0]
 800c062:	b103      	cbz	r3, 800c066 <_read_r+0x1e>
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	bd38      	pop	{r3, r4, r5, pc}
 800c068:	20000be0 	.word	0x20000be0

0800c06c <_write_r>:
 800c06c:	b538      	push	{r3, r4, r5, lr}
 800c06e:	4d07      	ldr	r5, [pc, #28]	; (800c08c <_write_r+0x20>)
 800c070:	4604      	mov	r4, r0
 800c072:	4608      	mov	r0, r1
 800c074:	4611      	mov	r1, r2
 800c076:	2200      	movs	r2, #0
 800c078:	602a      	str	r2, [r5, #0]
 800c07a:	461a      	mov	r2, r3
 800c07c:	f7f6 ff89 	bl	8002f92 <_write>
 800c080:	1c43      	adds	r3, r0, #1
 800c082:	d102      	bne.n	800c08a <_write_r+0x1e>
 800c084:	682b      	ldr	r3, [r5, #0]
 800c086:	b103      	cbz	r3, 800c08a <_write_r+0x1e>
 800c088:	6023      	str	r3, [r4, #0]
 800c08a:	bd38      	pop	{r3, r4, r5, pc}
 800c08c:	20000be0 	.word	0x20000be0

0800c090 <__errno>:
 800c090:	4b01      	ldr	r3, [pc, #4]	; (800c098 <__errno+0x8>)
 800c092:	6818      	ldr	r0, [r3, #0]
 800c094:	4770      	bx	lr
 800c096:	bf00      	nop
 800c098:	20000208 	.word	0x20000208

0800c09c <__libc_init_array>:
 800c09c:	b570      	push	{r4, r5, r6, lr}
 800c09e:	4d0d      	ldr	r5, [pc, #52]	; (800c0d4 <__libc_init_array+0x38>)
 800c0a0:	4c0d      	ldr	r4, [pc, #52]	; (800c0d8 <__libc_init_array+0x3c>)
 800c0a2:	1b64      	subs	r4, r4, r5
 800c0a4:	10a4      	asrs	r4, r4, #2
 800c0a6:	2600      	movs	r6, #0
 800c0a8:	42a6      	cmp	r6, r4
 800c0aa:	d109      	bne.n	800c0c0 <__libc_init_array+0x24>
 800c0ac:	4d0b      	ldr	r5, [pc, #44]	; (800c0dc <__libc_init_array+0x40>)
 800c0ae:	4c0c      	ldr	r4, [pc, #48]	; (800c0e0 <__libc_init_array+0x44>)
 800c0b0:	f003 fe76 	bl	800fda0 <_init>
 800c0b4:	1b64      	subs	r4, r4, r5
 800c0b6:	10a4      	asrs	r4, r4, #2
 800c0b8:	2600      	movs	r6, #0
 800c0ba:	42a6      	cmp	r6, r4
 800c0bc:	d105      	bne.n	800c0ca <__libc_init_array+0x2e>
 800c0be:	bd70      	pop	{r4, r5, r6, pc}
 800c0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0c4:	4798      	blx	r3
 800c0c6:	3601      	adds	r6, #1
 800c0c8:	e7ee      	b.n	800c0a8 <__libc_init_array+0xc>
 800c0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0ce:	4798      	blx	r3
 800c0d0:	3601      	adds	r6, #1
 800c0d2:	e7f2      	b.n	800c0ba <__libc_init_array+0x1e>
 800c0d4:	08010578 	.word	0x08010578
 800c0d8:	08010578 	.word	0x08010578
 800c0dc:	08010578 	.word	0x08010578
 800c0e0:	0801057c 	.word	0x0801057c

0800c0e4 <__retarget_lock_init_recursive>:
 800c0e4:	4770      	bx	lr

0800c0e6 <__retarget_lock_acquire_recursive>:
 800c0e6:	4770      	bx	lr

0800c0e8 <__retarget_lock_release_recursive>:
 800c0e8:	4770      	bx	lr

0800c0ea <memcpy>:
 800c0ea:	440a      	add	r2, r1
 800c0ec:	4291      	cmp	r1, r2
 800c0ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c0f2:	d100      	bne.n	800c0f6 <memcpy+0xc>
 800c0f4:	4770      	bx	lr
 800c0f6:	b510      	push	{r4, lr}
 800c0f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c100:	4291      	cmp	r1, r2
 800c102:	d1f9      	bne.n	800c0f8 <memcpy+0xe>
 800c104:	bd10      	pop	{r4, pc}
	...

0800c108 <nan>:
 800c108:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c110 <nan+0x8>
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	00000000 	.word	0x00000000
 800c114:	7ff80000 	.word	0x7ff80000

0800c118 <nanf>:
 800c118:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c120 <nanf+0x8>
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	7fc00000 	.word	0x7fc00000

0800c124 <quorem>:
 800c124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	6903      	ldr	r3, [r0, #16]
 800c12a:	690c      	ldr	r4, [r1, #16]
 800c12c:	42a3      	cmp	r3, r4
 800c12e:	4607      	mov	r7, r0
 800c130:	db7e      	blt.n	800c230 <quorem+0x10c>
 800c132:	3c01      	subs	r4, #1
 800c134:	f101 0814 	add.w	r8, r1, #20
 800c138:	f100 0514 	add.w	r5, r0, #20
 800c13c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c140:	9301      	str	r3, [sp, #4]
 800c142:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c146:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c14a:	3301      	adds	r3, #1
 800c14c:	429a      	cmp	r2, r3
 800c14e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c152:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c156:	fbb2 f6f3 	udiv	r6, r2, r3
 800c15a:	d331      	bcc.n	800c1c0 <quorem+0x9c>
 800c15c:	f04f 0e00 	mov.w	lr, #0
 800c160:	4640      	mov	r0, r8
 800c162:	46ac      	mov	ip, r5
 800c164:	46f2      	mov	sl, lr
 800c166:	f850 2b04 	ldr.w	r2, [r0], #4
 800c16a:	b293      	uxth	r3, r2
 800c16c:	fb06 e303 	mla	r3, r6, r3, lr
 800c170:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c174:	0c1a      	lsrs	r2, r3, #16
 800c176:	b29b      	uxth	r3, r3
 800c178:	ebaa 0303 	sub.w	r3, sl, r3
 800c17c:	f8dc a000 	ldr.w	sl, [ip]
 800c180:	fa13 f38a 	uxtah	r3, r3, sl
 800c184:	fb06 220e 	mla	r2, r6, lr, r2
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	9b00      	ldr	r3, [sp, #0]
 800c18c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c190:	b292      	uxth	r2, r2
 800c192:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c196:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c19a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c19e:	4581      	cmp	r9, r0
 800c1a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1a4:	f84c 3b04 	str.w	r3, [ip], #4
 800c1a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c1ac:	d2db      	bcs.n	800c166 <quorem+0x42>
 800c1ae:	f855 300b 	ldr.w	r3, [r5, fp]
 800c1b2:	b92b      	cbnz	r3, 800c1c0 <quorem+0x9c>
 800c1b4:	9b01      	ldr	r3, [sp, #4]
 800c1b6:	3b04      	subs	r3, #4
 800c1b8:	429d      	cmp	r5, r3
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	d32c      	bcc.n	800c218 <quorem+0xf4>
 800c1be:	613c      	str	r4, [r7, #16]
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	f002 f8a5 	bl	800e310 <__mcmp>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	db22      	blt.n	800c210 <quorem+0xec>
 800c1ca:	3601      	adds	r6, #1
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	2000      	movs	r0, #0
 800c1d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c1d4:	f8d1 c000 	ldr.w	ip, [r1]
 800c1d8:	b293      	uxth	r3, r2
 800c1da:	1ac3      	subs	r3, r0, r3
 800c1dc:	0c12      	lsrs	r2, r2, #16
 800c1de:	fa13 f38c 	uxtah	r3, r3, ip
 800c1e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c1e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1f0:	45c1      	cmp	r9, r8
 800c1f2:	f841 3b04 	str.w	r3, [r1], #4
 800c1f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c1fa:	d2e9      	bcs.n	800c1d0 <quorem+0xac>
 800c1fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c200:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c204:	b922      	cbnz	r2, 800c210 <quorem+0xec>
 800c206:	3b04      	subs	r3, #4
 800c208:	429d      	cmp	r5, r3
 800c20a:	461a      	mov	r2, r3
 800c20c:	d30a      	bcc.n	800c224 <quorem+0x100>
 800c20e:	613c      	str	r4, [r7, #16]
 800c210:	4630      	mov	r0, r6
 800c212:	b003      	add	sp, #12
 800c214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c218:	6812      	ldr	r2, [r2, #0]
 800c21a:	3b04      	subs	r3, #4
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	d1ce      	bne.n	800c1be <quorem+0x9a>
 800c220:	3c01      	subs	r4, #1
 800c222:	e7c9      	b.n	800c1b8 <quorem+0x94>
 800c224:	6812      	ldr	r2, [r2, #0]
 800c226:	3b04      	subs	r3, #4
 800c228:	2a00      	cmp	r2, #0
 800c22a:	d1f0      	bne.n	800c20e <quorem+0xea>
 800c22c:	3c01      	subs	r4, #1
 800c22e:	e7eb      	b.n	800c208 <quorem+0xe4>
 800c230:	2000      	movs	r0, #0
 800c232:	e7ee      	b.n	800c212 <quorem+0xee>
 800c234:	0000      	movs	r0, r0
	...

0800c238 <_dtoa_r>:
 800c238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23c:	ed2d 8b04 	vpush	{d8-d9}
 800c240:	69c5      	ldr	r5, [r0, #28]
 800c242:	b093      	sub	sp, #76	; 0x4c
 800c244:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c248:	ec57 6b10 	vmov	r6, r7, d0
 800c24c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c250:	9107      	str	r1, [sp, #28]
 800c252:	4604      	mov	r4, r0
 800c254:	920a      	str	r2, [sp, #40]	; 0x28
 800c256:	930d      	str	r3, [sp, #52]	; 0x34
 800c258:	b975      	cbnz	r5, 800c278 <_dtoa_r+0x40>
 800c25a:	2010      	movs	r0, #16
 800c25c:	f001 fc1e 	bl	800da9c <malloc>
 800c260:	4602      	mov	r2, r0
 800c262:	61e0      	str	r0, [r4, #28]
 800c264:	b920      	cbnz	r0, 800c270 <_dtoa_r+0x38>
 800c266:	4bae      	ldr	r3, [pc, #696]	; (800c520 <_dtoa_r+0x2e8>)
 800c268:	21ef      	movs	r1, #239	; 0xef
 800c26a:	48ae      	ldr	r0, [pc, #696]	; (800c524 <_dtoa_r+0x2ec>)
 800c26c:	f002 fbb8 	bl	800e9e0 <__assert_func>
 800c270:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c274:	6005      	str	r5, [r0, #0]
 800c276:	60c5      	str	r5, [r0, #12]
 800c278:	69e3      	ldr	r3, [r4, #28]
 800c27a:	6819      	ldr	r1, [r3, #0]
 800c27c:	b151      	cbz	r1, 800c294 <_dtoa_r+0x5c>
 800c27e:	685a      	ldr	r2, [r3, #4]
 800c280:	604a      	str	r2, [r1, #4]
 800c282:	2301      	movs	r3, #1
 800c284:	4093      	lsls	r3, r2
 800c286:	608b      	str	r3, [r1, #8]
 800c288:	4620      	mov	r0, r4
 800c28a:	f001 fdbb 	bl	800de04 <_Bfree>
 800c28e:	69e3      	ldr	r3, [r4, #28]
 800c290:	2200      	movs	r2, #0
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	1e3b      	subs	r3, r7, #0
 800c296:	bfbb      	ittet	lt
 800c298:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c29c:	9303      	strlt	r3, [sp, #12]
 800c29e:	2300      	movge	r3, #0
 800c2a0:	2201      	movlt	r2, #1
 800c2a2:	bfac      	ite	ge
 800c2a4:	f8c8 3000 	strge.w	r3, [r8]
 800c2a8:	f8c8 2000 	strlt.w	r2, [r8]
 800c2ac:	4b9e      	ldr	r3, [pc, #632]	; (800c528 <_dtoa_r+0x2f0>)
 800c2ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c2b2:	ea33 0308 	bics.w	r3, r3, r8
 800c2b6:	d11b      	bne.n	800c2f0 <_dtoa_r+0xb8>
 800c2b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c2c4:	4333      	orrs	r3, r6
 800c2c6:	f000 8593 	beq.w	800cdf0 <_dtoa_r+0xbb8>
 800c2ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2cc:	b963      	cbnz	r3, 800c2e8 <_dtoa_r+0xb0>
 800c2ce:	4b97      	ldr	r3, [pc, #604]	; (800c52c <_dtoa_r+0x2f4>)
 800c2d0:	e027      	b.n	800c322 <_dtoa_r+0xea>
 800c2d2:	4b97      	ldr	r3, [pc, #604]	; (800c530 <_dtoa_r+0x2f8>)
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	3308      	adds	r3, #8
 800c2d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c2da:	6013      	str	r3, [r2, #0]
 800c2dc:	9800      	ldr	r0, [sp, #0]
 800c2de:	b013      	add	sp, #76	; 0x4c
 800c2e0:	ecbd 8b04 	vpop	{d8-d9}
 800c2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e8:	4b90      	ldr	r3, [pc, #576]	; (800c52c <_dtoa_r+0x2f4>)
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	3303      	adds	r3, #3
 800c2ee:	e7f3      	b.n	800c2d8 <_dtoa_r+0xa0>
 800c2f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	ec51 0b17 	vmov	r0, r1, d7
 800c2fa:	eeb0 8a47 	vmov.f32	s16, s14
 800c2fe:	eef0 8a67 	vmov.f32	s17, s15
 800c302:	2300      	movs	r3, #0
 800c304:	f7f4 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c308:	4681      	mov	r9, r0
 800c30a:	b160      	cbz	r0, 800c326 <_dtoa_r+0xee>
 800c30c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c30e:	2301      	movs	r3, #1
 800c310:	6013      	str	r3, [r2, #0]
 800c312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c314:	2b00      	cmp	r3, #0
 800c316:	f000 8568 	beq.w	800cdea <_dtoa_r+0xbb2>
 800c31a:	4b86      	ldr	r3, [pc, #536]	; (800c534 <_dtoa_r+0x2fc>)
 800c31c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c31e:	6013      	str	r3, [r2, #0]
 800c320:	3b01      	subs	r3, #1
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	e7da      	b.n	800c2dc <_dtoa_r+0xa4>
 800c326:	aa10      	add	r2, sp, #64	; 0x40
 800c328:	a911      	add	r1, sp, #68	; 0x44
 800c32a:	4620      	mov	r0, r4
 800c32c:	eeb0 0a48 	vmov.f32	s0, s16
 800c330:	eef0 0a68 	vmov.f32	s1, s17
 800c334:	f002 f902 	bl	800e53c <__d2b>
 800c338:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c33c:	4682      	mov	sl, r0
 800c33e:	2d00      	cmp	r5, #0
 800c340:	d07f      	beq.n	800c442 <_dtoa_r+0x20a>
 800c342:	ee18 3a90 	vmov	r3, s17
 800c346:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c34a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c34e:	ec51 0b18 	vmov	r0, r1, d8
 800c352:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c35a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c35e:	4619      	mov	r1, r3
 800c360:	2200      	movs	r2, #0
 800c362:	4b75      	ldr	r3, [pc, #468]	; (800c538 <_dtoa_r+0x300>)
 800c364:	f7f3 ff90 	bl	8000288 <__aeabi_dsub>
 800c368:	a367      	add	r3, pc, #412	; (adr r3, 800c508 <_dtoa_r+0x2d0>)
 800c36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c36e:	f7f4 f943 	bl	80005f8 <__aeabi_dmul>
 800c372:	a367      	add	r3, pc, #412	; (adr r3, 800c510 <_dtoa_r+0x2d8>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f3 ff88 	bl	800028c <__adddf3>
 800c37c:	4606      	mov	r6, r0
 800c37e:	4628      	mov	r0, r5
 800c380:	460f      	mov	r7, r1
 800c382:	f7f4 f8cf 	bl	8000524 <__aeabi_i2d>
 800c386:	a364      	add	r3, pc, #400	; (adr r3, 800c518 <_dtoa_r+0x2e0>)
 800c388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38c:	f7f4 f934 	bl	80005f8 <__aeabi_dmul>
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	4630      	mov	r0, r6
 800c396:	4639      	mov	r1, r7
 800c398:	f7f3 ff78 	bl	800028c <__adddf3>
 800c39c:	4606      	mov	r6, r0
 800c39e:	460f      	mov	r7, r1
 800c3a0:	f7f4 fbda 	bl	8000b58 <__aeabi_d2iz>
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	4683      	mov	fp, r0
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	4639      	mov	r1, r7
 800c3ae:	f7f4 fb95 	bl	8000adc <__aeabi_dcmplt>
 800c3b2:	b148      	cbz	r0, 800c3c8 <_dtoa_r+0x190>
 800c3b4:	4658      	mov	r0, fp
 800c3b6:	f7f4 f8b5 	bl	8000524 <__aeabi_i2d>
 800c3ba:	4632      	mov	r2, r6
 800c3bc:	463b      	mov	r3, r7
 800c3be:	f7f4 fb83 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3c2:	b908      	cbnz	r0, 800c3c8 <_dtoa_r+0x190>
 800c3c4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c3c8:	f1bb 0f16 	cmp.w	fp, #22
 800c3cc:	d857      	bhi.n	800c47e <_dtoa_r+0x246>
 800c3ce:	4b5b      	ldr	r3, [pc, #364]	; (800c53c <_dtoa_r+0x304>)
 800c3d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d8:	ec51 0b18 	vmov	r0, r1, d8
 800c3dc:	f7f4 fb7e 	bl	8000adc <__aeabi_dcmplt>
 800c3e0:	2800      	cmp	r0, #0
 800c3e2:	d04e      	beq.n	800c482 <_dtoa_r+0x24a>
 800c3e4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	930c      	str	r3, [sp, #48]	; 0x30
 800c3ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c3ee:	1b5b      	subs	r3, r3, r5
 800c3f0:	1e5a      	subs	r2, r3, #1
 800c3f2:	bf45      	ittet	mi
 800c3f4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c3f8:	9305      	strmi	r3, [sp, #20]
 800c3fa:	2300      	movpl	r3, #0
 800c3fc:	2300      	movmi	r3, #0
 800c3fe:	9206      	str	r2, [sp, #24]
 800c400:	bf54      	ite	pl
 800c402:	9305      	strpl	r3, [sp, #20]
 800c404:	9306      	strmi	r3, [sp, #24]
 800c406:	f1bb 0f00 	cmp.w	fp, #0
 800c40a:	db3c      	blt.n	800c486 <_dtoa_r+0x24e>
 800c40c:	9b06      	ldr	r3, [sp, #24]
 800c40e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c412:	445b      	add	r3, fp
 800c414:	9306      	str	r3, [sp, #24]
 800c416:	2300      	movs	r3, #0
 800c418:	9308      	str	r3, [sp, #32]
 800c41a:	9b07      	ldr	r3, [sp, #28]
 800c41c:	2b09      	cmp	r3, #9
 800c41e:	d868      	bhi.n	800c4f2 <_dtoa_r+0x2ba>
 800c420:	2b05      	cmp	r3, #5
 800c422:	bfc4      	itt	gt
 800c424:	3b04      	subgt	r3, #4
 800c426:	9307      	strgt	r3, [sp, #28]
 800c428:	9b07      	ldr	r3, [sp, #28]
 800c42a:	f1a3 0302 	sub.w	r3, r3, #2
 800c42e:	bfcc      	ite	gt
 800c430:	2500      	movgt	r5, #0
 800c432:	2501      	movle	r5, #1
 800c434:	2b03      	cmp	r3, #3
 800c436:	f200 8085 	bhi.w	800c544 <_dtoa_r+0x30c>
 800c43a:	e8df f003 	tbb	[pc, r3]
 800c43e:	3b2e      	.short	0x3b2e
 800c440:	5839      	.short	0x5839
 800c442:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c446:	441d      	add	r5, r3
 800c448:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c44c:	2b20      	cmp	r3, #32
 800c44e:	bfc1      	itttt	gt
 800c450:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c454:	fa08 f803 	lslgt.w	r8, r8, r3
 800c458:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c45c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c460:	bfd6      	itet	le
 800c462:	f1c3 0320 	rsble	r3, r3, #32
 800c466:	ea48 0003 	orrgt.w	r0, r8, r3
 800c46a:	fa06 f003 	lslle.w	r0, r6, r3
 800c46e:	f7f4 f849 	bl	8000504 <__aeabi_ui2d>
 800c472:	2201      	movs	r2, #1
 800c474:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c478:	3d01      	subs	r5, #1
 800c47a:	920e      	str	r2, [sp, #56]	; 0x38
 800c47c:	e76f      	b.n	800c35e <_dtoa_r+0x126>
 800c47e:	2301      	movs	r3, #1
 800c480:	e7b3      	b.n	800c3ea <_dtoa_r+0x1b2>
 800c482:	900c      	str	r0, [sp, #48]	; 0x30
 800c484:	e7b2      	b.n	800c3ec <_dtoa_r+0x1b4>
 800c486:	9b05      	ldr	r3, [sp, #20]
 800c488:	eba3 030b 	sub.w	r3, r3, fp
 800c48c:	9305      	str	r3, [sp, #20]
 800c48e:	f1cb 0300 	rsb	r3, fp, #0
 800c492:	9308      	str	r3, [sp, #32]
 800c494:	2300      	movs	r3, #0
 800c496:	930b      	str	r3, [sp, #44]	; 0x2c
 800c498:	e7bf      	b.n	800c41a <_dtoa_r+0x1e2>
 800c49a:	2300      	movs	r3, #0
 800c49c:	9309      	str	r3, [sp, #36]	; 0x24
 800c49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	dc52      	bgt.n	800c54a <_dtoa_r+0x312>
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	9301      	str	r3, [sp, #4]
 800c4a8:	9304      	str	r3, [sp, #16]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	920a      	str	r2, [sp, #40]	; 0x28
 800c4ae:	e00b      	b.n	800c4c8 <_dtoa_r+0x290>
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e7f3      	b.n	800c49c <_dtoa_r+0x264>
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ba:	445b      	add	r3, fp
 800c4bc:	9301      	str	r3, [sp, #4]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	9304      	str	r3, [sp, #16]
 800c4c4:	bfb8      	it	lt
 800c4c6:	2301      	movlt	r3, #1
 800c4c8:	69e0      	ldr	r0, [r4, #28]
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	2204      	movs	r2, #4
 800c4ce:	f102 0614 	add.w	r6, r2, #20
 800c4d2:	429e      	cmp	r6, r3
 800c4d4:	d93d      	bls.n	800c552 <_dtoa_r+0x31a>
 800c4d6:	6041      	str	r1, [r0, #4]
 800c4d8:	4620      	mov	r0, r4
 800c4da:	f001 fc53 	bl	800dd84 <_Balloc>
 800c4de:	9000      	str	r0, [sp, #0]
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d139      	bne.n	800c558 <_dtoa_r+0x320>
 800c4e4:	4b16      	ldr	r3, [pc, #88]	; (800c540 <_dtoa_r+0x308>)
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	f240 11af 	movw	r1, #431	; 0x1af
 800c4ec:	e6bd      	b.n	800c26a <_dtoa_r+0x32>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	e7e1      	b.n	800c4b6 <_dtoa_r+0x27e>
 800c4f2:	2501      	movs	r5, #1
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	9307      	str	r3, [sp, #28]
 800c4f8:	9509      	str	r5, [sp, #36]	; 0x24
 800c4fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4fe:	9301      	str	r3, [sp, #4]
 800c500:	9304      	str	r3, [sp, #16]
 800c502:	2200      	movs	r2, #0
 800c504:	2312      	movs	r3, #18
 800c506:	e7d1      	b.n	800c4ac <_dtoa_r+0x274>
 800c508:	636f4361 	.word	0x636f4361
 800c50c:	3fd287a7 	.word	0x3fd287a7
 800c510:	8b60c8b3 	.word	0x8b60c8b3
 800c514:	3fc68a28 	.word	0x3fc68a28
 800c518:	509f79fb 	.word	0x509f79fb
 800c51c:	3fd34413 	.word	0x3fd34413
 800c520:	08010116 	.word	0x08010116
 800c524:	0801012d 	.word	0x0801012d
 800c528:	7ff00000 	.word	0x7ff00000
 800c52c:	08010112 	.word	0x08010112
 800c530:	08010109 	.word	0x08010109
 800c534:	0800ff85 	.word	0x0800ff85
 800c538:	3ff80000 	.word	0x3ff80000
 800c53c:	08010288 	.word	0x08010288
 800c540:	08010185 	.word	0x08010185
 800c544:	2301      	movs	r3, #1
 800c546:	9309      	str	r3, [sp, #36]	; 0x24
 800c548:	e7d7      	b.n	800c4fa <_dtoa_r+0x2c2>
 800c54a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	9304      	str	r3, [sp, #16]
 800c550:	e7ba      	b.n	800c4c8 <_dtoa_r+0x290>
 800c552:	3101      	adds	r1, #1
 800c554:	0052      	lsls	r2, r2, #1
 800c556:	e7ba      	b.n	800c4ce <_dtoa_r+0x296>
 800c558:	69e3      	ldr	r3, [r4, #28]
 800c55a:	9a00      	ldr	r2, [sp, #0]
 800c55c:	601a      	str	r2, [r3, #0]
 800c55e:	9b04      	ldr	r3, [sp, #16]
 800c560:	2b0e      	cmp	r3, #14
 800c562:	f200 80a8 	bhi.w	800c6b6 <_dtoa_r+0x47e>
 800c566:	2d00      	cmp	r5, #0
 800c568:	f000 80a5 	beq.w	800c6b6 <_dtoa_r+0x47e>
 800c56c:	f1bb 0f00 	cmp.w	fp, #0
 800c570:	dd38      	ble.n	800c5e4 <_dtoa_r+0x3ac>
 800c572:	4bc0      	ldr	r3, [pc, #768]	; (800c874 <_dtoa_r+0x63c>)
 800c574:	f00b 020f 	and.w	r2, fp, #15
 800c578:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c57c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c580:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c584:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c588:	d019      	beq.n	800c5be <_dtoa_r+0x386>
 800c58a:	4bbb      	ldr	r3, [pc, #748]	; (800c878 <_dtoa_r+0x640>)
 800c58c:	ec51 0b18 	vmov	r0, r1, d8
 800c590:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c594:	f7f4 f95a 	bl	800084c <__aeabi_ddiv>
 800c598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c59c:	f008 080f 	and.w	r8, r8, #15
 800c5a0:	2503      	movs	r5, #3
 800c5a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c878 <_dtoa_r+0x640>
 800c5a6:	f1b8 0f00 	cmp.w	r8, #0
 800c5aa:	d10a      	bne.n	800c5c2 <_dtoa_r+0x38a>
 800c5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	463b      	mov	r3, r7
 800c5b4:	f7f4 f94a 	bl	800084c <__aeabi_ddiv>
 800c5b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5bc:	e02b      	b.n	800c616 <_dtoa_r+0x3de>
 800c5be:	2502      	movs	r5, #2
 800c5c0:	e7ef      	b.n	800c5a2 <_dtoa_r+0x36a>
 800c5c2:	f018 0f01 	tst.w	r8, #1
 800c5c6:	d008      	beq.n	800c5da <_dtoa_r+0x3a2>
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	4639      	mov	r1, r7
 800c5cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c5d0:	f7f4 f812 	bl	80005f8 <__aeabi_dmul>
 800c5d4:	3501      	adds	r5, #1
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	460f      	mov	r7, r1
 800c5da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c5de:	f109 0908 	add.w	r9, r9, #8
 800c5e2:	e7e0      	b.n	800c5a6 <_dtoa_r+0x36e>
 800c5e4:	f000 809f 	beq.w	800c726 <_dtoa_r+0x4ee>
 800c5e8:	f1cb 0600 	rsb	r6, fp, #0
 800c5ec:	4ba1      	ldr	r3, [pc, #644]	; (800c874 <_dtoa_r+0x63c>)
 800c5ee:	4fa2      	ldr	r7, [pc, #648]	; (800c878 <_dtoa_r+0x640>)
 800c5f0:	f006 020f 	and.w	r2, r6, #15
 800c5f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fc:	ec51 0b18 	vmov	r0, r1, d8
 800c600:	f7f3 fffa 	bl	80005f8 <__aeabi_dmul>
 800c604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c608:	1136      	asrs	r6, r6, #4
 800c60a:	2300      	movs	r3, #0
 800c60c:	2502      	movs	r5, #2
 800c60e:	2e00      	cmp	r6, #0
 800c610:	d17e      	bne.n	800c710 <_dtoa_r+0x4d8>
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1d0      	bne.n	800c5b8 <_dtoa_r+0x380>
 800c616:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c618:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	f000 8084 	beq.w	800c72a <_dtoa_r+0x4f2>
 800c622:	4b96      	ldr	r3, [pc, #600]	; (800c87c <_dtoa_r+0x644>)
 800c624:	2200      	movs	r2, #0
 800c626:	4640      	mov	r0, r8
 800c628:	4649      	mov	r1, r9
 800c62a:	f7f4 fa57 	bl	8000adc <__aeabi_dcmplt>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d07b      	beq.n	800c72a <_dtoa_r+0x4f2>
 800c632:	9b04      	ldr	r3, [sp, #16]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d078      	beq.n	800c72a <_dtoa_r+0x4f2>
 800c638:	9b01      	ldr	r3, [sp, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	dd39      	ble.n	800c6b2 <_dtoa_r+0x47a>
 800c63e:	4b90      	ldr	r3, [pc, #576]	; (800c880 <_dtoa_r+0x648>)
 800c640:	2200      	movs	r2, #0
 800c642:	4640      	mov	r0, r8
 800c644:	4649      	mov	r1, r9
 800c646:	f7f3 ffd7 	bl	80005f8 <__aeabi_dmul>
 800c64a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c64e:	9e01      	ldr	r6, [sp, #4]
 800c650:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c654:	3501      	adds	r5, #1
 800c656:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c65a:	4628      	mov	r0, r5
 800c65c:	f7f3 ff62 	bl	8000524 <__aeabi_i2d>
 800c660:	4642      	mov	r2, r8
 800c662:	464b      	mov	r3, r9
 800c664:	f7f3 ffc8 	bl	80005f8 <__aeabi_dmul>
 800c668:	4b86      	ldr	r3, [pc, #536]	; (800c884 <_dtoa_r+0x64c>)
 800c66a:	2200      	movs	r2, #0
 800c66c:	f7f3 fe0e 	bl	800028c <__adddf3>
 800c670:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c678:	9303      	str	r3, [sp, #12]
 800c67a:	2e00      	cmp	r6, #0
 800c67c:	d158      	bne.n	800c730 <_dtoa_r+0x4f8>
 800c67e:	4b82      	ldr	r3, [pc, #520]	; (800c888 <_dtoa_r+0x650>)
 800c680:	2200      	movs	r2, #0
 800c682:	4640      	mov	r0, r8
 800c684:	4649      	mov	r1, r9
 800c686:	f7f3 fdff 	bl	8000288 <__aeabi_dsub>
 800c68a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c68e:	4680      	mov	r8, r0
 800c690:	4689      	mov	r9, r1
 800c692:	f7f4 fa41 	bl	8000b18 <__aeabi_dcmpgt>
 800c696:	2800      	cmp	r0, #0
 800c698:	f040 8296 	bne.w	800cbc8 <_dtoa_r+0x990>
 800c69c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c6a0:	4640      	mov	r0, r8
 800c6a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	f7f4 fa18 	bl	8000adc <__aeabi_dcmplt>
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	f040 8289 	bne.w	800cbc4 <_dtoa_r+0x98c>
 800c6b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c6b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	f2c0 814e 	blt.w	800c95a <_dtoa_r+0x722>
 800c6be:	f1bb 0f0e 	cmp.w	fp, #14
 800c6c2:	f300 814a 	bgt.w	800c95a <_dtoa_r+0x722>
 800c6c6:	4b6b      	ldr	r3, [pc, #428]	; (800c874 <_dtoa_r+0x63c>)
 800c6c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c6cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f280 80dc 	bge.w	800c890 <_dtoa_r+0x658>
 800c6d8:	9b04      	ldr	r3, [sp, #16]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f300 80d8 	bgt.w	800c890 <_dtoa_r+0x658>
 800c6e0:	f040 826f 	bne.w	800cbc2 <_dtoa_r+0x98a>
 800c6e4:	4b68      	ldr	r3, [pc, #416]	; (800c888 <_dtoa_r+0x650>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	4640      	mov	r0, r8
 800c6ea:	4649      	mov	r1, r9
 800c6ec:	f7f3 ff84 	bl	80005f8 <__aeabi_dmul>
 800c6f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6f4:	f7f4 fa06 	bl	8000b04 <__aeabi_dcmpge>
 800c6f8:	9e04      	ldr	r6, [sp, #16]
 800c6fa:	4637      	mov	r7, r6
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	f040 8245 	bne.w	800cb8c <_dtoa_r+0x954>
 800c702:	9d00      	ldr	r5, [sp, #0]
 800c704:	2331      	movs	r3, #49	; 0x31
 800c706:	f805 3b01 	strb.w	r3, [r5], #1
 800c70a:	f10b 0b01 	add.w	fp, fp, #1
 800c70e:	e241      	b.n	800cb94 <_dtoa_r+0x95c>
 800c710:	07f2      	lsls	r2, r6, #31
 800c712:	d505      	bpl.n	800c720 <_dtoa_r+0x4e8>
 800c714:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c718:	f7f3 ff6e 	bl	80005f8 <__aeabi_dmul>
 800c71c:	3501      	adds	r5, #1
 800c71e:	2301      	movs	r3, #1
 800c720:	1076      	asrs	r6, r6, #1
 800c722:	3708      	adds	r7, #8
 800c724:	e773      	b.n	800c60e <_dtoa_r+0x3d6>
 800c726:	2502      	movs	r5, #2
 800c728:	e775      	b.n	800c616 <_dtoa_r+0x3de>
 800c72a:	9e04      	ldr	r6, [sp, #16]
 800c72c:	465f      	mov	r7, fp
 800c72e:	e792      	b.n	800c656 <_dtoa_r+0x41e>
 800c730:	9900      	ldr	r1, [sp, #0]
 800c732:	4b50      	ldr	r3, [pc, #320]	; (800c874 <_dtoa_r+0x63c>)
 800c734:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c738:	4431      	add	r1, r6
 800c73a:	9102      	str	r1, [sp, #8]
 800c73c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c73e:	eeb0 9a47 	vmov.f32	s18, s14
 800c742:	eef0 9a67 	vmov.f32	s19, s15
 800c746:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c74a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c74e:	2900      	cmp	r1, #0
 800c750:	d044      	beq.n	800c7dc <_dtoa_r+0x5a4>
 800c752:	494e      	ldr	r1, [pc, #312]	; (800c88c <_dtoa_r+0x654>)
 800c754:	2000      	movs	r0, #0
 800c756:	f7f4 f879 	bl	800084c <__aeabi_ddiv>
 800c75a:	ec53 2b19 	vmov	r2, r3, d9
 800c75e:	f7f3 fd93 	bl	8000288 <__aeabi_dsub>
 800c762:	9d00      	ldr	r5, [sp, #0]
 800c764:	ec41 0b19 	vmov	d9, r0, r1
 800c768:	4649      	mov	r1, r9
 800c76a:	4640      	mov	r0, r8
 800c76c:	f7f4 f9f4 	bl	8000b58 <__aeabi_d2iz>
 800c770:	4606      	mov	r6, r0
 800c772:	f7f3 fed7 	bl	8000524 <__aeabi_i2d>
 800c776:	4602      	mov	r2, r0
 800c778:	460b      	mov	r3, r1
 800c77a:	4640      	mov	r0, r8
 800c77c:	4649      	mov	r1, r9
 800c77e:	f7f3 fd83 	bl	8000288 <__aeabi_dsub>
 800c782:	3630      	adds	r6, #48	; 0x30
 800c784:	f805 6b01 	strb.w	r6, [r5], #1
 800c788:	ec53 2b19 	vmov	r2, r3, d9
 800c78c:	4680      	mov	r8, r0
 800c78e:	4689      	mov	r9, r1
 800c790:	f7f4 f9a4 	bl	8000adc <__aeabi_dcmplt>
 800c794:	2800      	cmp	r0, #0
 800c796:	d164      	bne.n	800c862 <_dtoa_r+0x62a>
 800c798:	4642      	mov	r2, r8
 800c79a:	464b      	mov	r3, r9
 800c79c:	4937      	ldr	r1, [pc, #220]	; (800c87c <_dtoa_r+0x644>)
 800c79e:	2000      	movs	r0, #0
 800c7a0:	f7f3 fd72 	bl	8000288 <__aeabi_dsub>
 800c7a4:	ec53 2b19 	vmov	r2, r3, d9
 800c7a8:	f7f4 f998 	bl	8000adc <__aeabi_dcmplt>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	f040 80b6 	bne.w	800c91e <_dtoa_r+0x6e6>
 800c7b2:	9b02      	ldr	r3, [sp, #8]
 800c7b4:	429d      	cmp	r5, r3
 800c7b6:	f43f af7c 	beq.w	800c6b2 <_dtoa_r+0x47a>
 800c7ba:	4b31      	ldr	r3, [pc, #196]	; (800c880 <_dtoa_r+0x648>)
 800c7bc:	ec51 0b19 	vmov	r0, r1, d9
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f7f3 ff19 	bl	80005f8 <__aeabi_dmul>
 800c7c6:	4b2e      	ldr	r3, [pc, #184]	; (800c880 <_dtoa_r+0x648>)
 800c7c8:	ec41 0b19 	vmov	d9, r0, r1
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	4649      	mov	r1, r9
 800c7d2:	f7f3 ff11 	bl	80005f8 <__aeabi_dmul>
 800c7d6:	4680      	mov	r8, r0
 800c7d8:	4689      	mov	r9, r1
 800c7da:	e7c5      	b.n	800c768 <_dtoa_r+0x530>
 800c7dc:	ec51 0b17 	vmov	r0, r1, d7
 800c7e0:	f7f3 ff0a 	bl	80005f8 <__aeabi_dmul>
 800c7e4:	9b02      	ldr	r3, [sp, #8]
 800c7e6:	9d00      	ldr	r5, [sp, #0]
 800c7e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7ea:	ec41 0b19 	vmov	d9, r0, r1
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	4640      	mov	r0, r8
 800c7f2:	f7f4 f9b1 	bl	8000b58 <__aeabi_d2iz>
 800c7f6:	4606      	mov	r6, r0
 800c7f8:	f7f3 fe94 	bl	8000524 <__aeabi_i2d>
 800c7fc:	3630      	adds	r6, #48	; 0x30
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4640      	mov	r0, r8
 800c804:	4649      	mov	r1, r9
 800c806:	f7f3 fd3f 	bl	8000288 <__aeabi_dsub>
 800c80a:	f805 6b01 	strb.w	r6, [r5], #1
 800c80e:	9b02      	ldr	r3, [sp, #8]
 800c810:	429d      	cmp	r5, r3
 800c812:	4680      	mov	r8, r0
 800c814:	4689      	mov	r9, r1
 800c816:	f04f 0200 	mov.w	r2, #0
 800c81a:	d124      	bne.n	800c866 <_dtoa_r+0x62e>
 800c81c:	4b1b      	ldr	r3, [pc, #108]	; (800c88c <_dtoa_r+0x654>)
 800c81e:	ec51 0b19 	vmov	r0, r1, d9
 800c822:	f7f3 fd33 	bl	800028c <__adddf3>
 800c826:	4602      	mov	r2, r0
 800c828:	460b      	mov	r3, r1
 800c82a:	4640      	mov	r0, r8
 800c82c:	4649      	mov	r1, r9
 800c82e:	f7f4 f973 	bl	8000b18 <__aeabi_dcmpgt>
 800c832:	2800      	cmp	r0, #0
 800c834:	d173      	bne.n	800c91e <_dtoa_r+0x6e6>
 800c836:	ec53 2b19 	vmov	r2, r3, d9
 800c83a:	4914      	ldr	r1, [pc, #80]	; (800c88c <_dtoa_r+0x654>)
 800c83c:	2000      	movs	r0, #0
 800c83e:	f7f3 fd23 	bl	8000288 <__aeabi_dsub>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4640      	mov	r0, r8
 800c848:	4649      	mov	r1, r9
 800c84a:	f7f4 f947 	bl	8000adc <__aeabi_dcmplt>
 800c84e:	2800      	cmp	r0, #0
 800c850:	f43f af2f 	beq.w	800c6b2 <_dtoa_r+0x47a>
 800c854:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c856:	1e6b      	subs	r3, r5, #1
 800c858:	930f      	str	r3, [sp, #60]	; 0x3c
 800c85a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c85e:	2b30      	cmp	r3, #48	; 0x30
 800c860:	d0f8      	beq.n	800c854 <_dtoa_r+0x61c>
 800c862:	46bb      	mov	fp, r7
 800c864:	e04a      	b.n	800c8fc <_dtoa_r+0x6c4>
 800c866:	4b06      	ldr	r3, [pc, #24]	; (800c880 <_dtoa_r+0x648>)
 800c868:	f7f3 fec6 	bl	80005f8 <__aeabi_dmul>
 800c86c:	4680      	mov	r8, r0
 800c86e:	4689      	mov	r9, r1
 800c870:	e7bd      	b.n	800c7ee <_dtoa_r+0x5b6>
 800c872:	bf00      	nop
 800c874:	08010288 	.word	0x08010288
 800c878:	08010260 	.word	0x08010260
 800c87c:	3ff00000 	.word	0x3ff00000
 800c880:	40240000 	.word	0x40240000
 800c884:	401c0000 	.word	0x401c0000
 800c888:	40140000 	.word	0x40140000
 800c88c:	3fe00000 	.word	0x3fe00000
 800c890:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c894:	9d00      	ldr	r5, [sp, #0]
 800c896:	4642      	mov	r2, r8
 800c898:	464b      	mov	r3, r9
 800c89a:	4630      	mov	r0, r6
 800c89c:	4639      	mov	r1, r7
 800c89e:	f7f3 ffd5 	bl	800084c <__aeabi_ddiv>
 800c8a2:	f7f4 f959 	bl	8000b58 <__aeabi_d2iz>
 800c8a6:	9001      	str	r0, [sp, #4]
 800c8a8:	f7f3 fe3c 	bl	8000524 <__aeabi_i2d>
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	464b      	mov	r3, r9
 800c8b0:	f7f3 fea2 	bl	80005f8 <__aeabi_dmul>
 800c8b4:	4602      	mov	r2, r0
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	4639      	mov	r1, r7
 800c8bc:	f7f3 fce4 	bl	8000288 <__aeabi_dsub>
 800c8c0:	9e01      	ldr	r6, [sp, #4]
 800c8c2:	9f04      	ldr	r7, [sp, #16]
 800c8c4:	3630      	adds	r6, #48	; 0x30
 800c8c6:	f805 6b01 	strb.w	r6, [r5], #1
 800c8ca:	9e00      	ldr	r6, [sp, #0]
 800c8cc:	1bae      	subs	r6, r5, r6
 800c8ce:	42b7      	cmp	r7, r6
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	d134      	bne.n	800c940 <_dtoa_r+0x708>
 800c8d6:	f7f3 fcd9 	bl	800028c <__adddf3>
 800c8da:	4642      	mov	r2, r8
 800c8dc:	464b      	mov	r3, r9
 800c8de:	4606      	mov	r6, r0
 800c8e0:	460f      	mov	r7, r1
 800c8e2:	f7f4 f919 	bl	8000b18 <__aeabi_dcmpgt>
 800c8e6:	b9c8      	cbnz	r0, 800c91c <_dtoa_r+0x6e4>
 800c8e8:	4642      	mov	r2, r8
 800c8ea:	464b      	mov	r3, r9
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	4639      	mov	r1, r7
 800c8f0:	f7f4 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800c8f4:	b110      	cbz	r0, 800c8fc <_dtoa_r+0x6c4>
 800c8f6:	9b01      	ldr	r3, [sp, #4]
 800c8f8:	07db      	lsls	r3, r3, #31
 800c8fa:	d40f      	bmi.n	800c91c <_dtoa_r+0x6e4>
 800c8fc:	4651      	mov	r1, sl
 800c8fe:	4620      	mov	r0, r4
 800c900:	f001 fa80 	bl	800de04 <_Bfree>
 800c904:	2300      	movs	r3, #0
 800c906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c908:	702b      	strb	r3, [r5, #0]
 800c90a:	f10b 0301 	add.w	r3, fp, #1
 800c90e:	6013      	str	r3, [r2, #0]
 800c910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c912:	2b00      	cmp	r3, #0
 800c914:	f43f ace2 	beq.w	800c2dc <_dtoa_r+0xa4>
 800c918:	601d      	str	r5, [r3, #0]
 800c91a:	e4df      	b.n	800c2dc <_dtoa_r+0xa4>
 800c91c:	465f      	mov	r7, fp
 800c91e:	462b      	mov	r3, r5
 800c920:	461d      	mov	r5, r3
 800c922:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c926:	2a39      	cmp	r2, #57	; 0x39
 800c928:	d106      	bne.n	800c938 <_dtoa_r+0x700>
 800c92a:	9a00      	ldr	r2, [sp, #0]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d1f7      	bne.n	800c920 <_dtoa_r+0x6e8>
 800c930:	9900      	ldr	r1, [sp, #0]
 800c932:	2230      	movs	r2, #48	; 0x30
 800c934:	3701      	adds	r7, #1
 800c936:	700a      	strb	r2, [r1, #0]
 800c938:	781a      	ldrb	r2, [r3, #0]
 800c93a:	3201      	adds	r2, #1
 800c93c:	701a      	strb	r2, [r3, #0]
 800c93e:	e790      	b.n	800c862 <_dtoa_r+0x62a>
 800c940:	4ba3      	ldr	r3, [pc, #652]	; (800cbd0 <_dtoa_r+0x998>)
 800c942:	2200      	movs	r2, #0
 800c944:	f7f3 fe58 	bl	80005f8 <__aeabi_dmul>
 800c948:	2200      	movs	r2, #0
 800c94a:	2300      	movs	r3, #0
 800c94c:	4606      	mov	r6, r0
 800c94e:	460f      	mov	r7, r1
 800c950:	f7f4 f8ba 	bl	8000ac8 <__aeabi_dcmpeq>
 800c954:	2800      	cmp	r0, #0
 800c956:	d09e      	beq.n	800c896 <_dtoa_r+0x65e>
 800c958:	e7d0      	b.n	800c8fc <_dtoa_r+0x6c4>
 800c95a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c95c:	2a00      	cmp	r2, #0
 800c95e:	f000 80ca 	beq.w	800caf6 <_dtoa_r+0x8be>
 800c962:	9a07      	ldr	r2, [sp, #28]
 800c964:	2a01      	cmp	r2, #1
 800c966:	f300 80ad 	bgt.w	800cac4 <_dtoa_r+0x88c>
 800c96a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c96c:	2a00      	cmp	r2, #0
 800c96e:	f000 80a5 	beq.w	800cabc <_dtoa_r+0x884>
 800c972:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c976:	9e08      	ldr	r6, [sp, #32]
 800c978:	9d05      	ldr	r5, [sp, #20]
 800c97a:	9a05      	ldr	r2, [sp, #20]
 800c97c:	441a      	add	r2, r3
 800c97e:	9205      	str	r2, [sp, #20]
 800c980:	9a06      	ldr	r2, [sp, #24]
 800c982:	2101      	movs	r1, #1
 800c984:	441a      	add	r2, r3
 800c986:	4620      	mov	r0, r4
 800c988:	9206      	str	r2, [sp, #24]
 800c98a:	f001 fb3b 	bl	800e004 <__i2b>
 800c98e:	4607      	mov	r7, r0
 800c990:	b165      	cbz	r5, 800c9ac <_dtoa_r+0x774>
 800c992:	9b06      	ldr	r3, [sp, #24]
 800c994:	2b00      	cmp	r3, #0
 800c996:	dd09      	ble.n	800c9ac <_dtoa_r+0x774>
 800c998:	42ab      	cmp	r3, r5
 800c99a:	9a05      	ldr	r2, [sp, #20]
 800c99c:	bfa8      	it	ge
 800c99e:	462b      	movge	r3, r5
 800c9a0:	1ad2      	subs	r2, r2, r3
 800c9a2:	9205      	str	r2, [sp, #20]
 800c9a4:	9a06      	ldr	r2, [sp, #24]
 800c9a6:	1aed      	subs	r5, r5, r3
 800c9a8:	1ad3      	subs	r3, r2, r3
 800c9aa:	9306      	str	r3, [sp, #24]
 800c9ac:	9b08      	ldr	r3, [sp, #32]
 800c9ae:	b1f3      	cbz	r3, 800c9ee <_dtoa_r+0x7b6>
 800c9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f000 80a3 	beq.w	800cafe <_dtoa_r+0x8c6>
 800c9b8:	2e00      	cmp	r6, #0
 800c9ba:	dd10      	ble.n	800c9de <_dtoa_r+0x7a6>
 800c9bc:	4639      	mov	r1, r7
 800c9be:	4632      	mov	r2, r6
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f001 fbdf 	bl	800e184 <__pow5mult>
 800c9c6:	4652      	mov	r2, sl
 800c9c8:	4601      	mov	r1, r0
 800c9ca:	4607      	mov	r7, r0
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f001 fb2f 	bl	800e030 <__multiply>
 800c9d2:	4651      	mov	r1, sl
 800c9d4:	4680      	mov	r8, r0
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f001 fa14 	bl	800de04 <_Bfree>
 800c9dc:	46c2      	mov	sl, r8
 800c9de:	9b08      	ldr	r3, [sp, #32]
 800c9e0:	1b9a      	subs	r2, r3, r6
 800c9e2:	d004      	beq.n	800c9ee <_dtoa_r+0x7b6>
 800c9e4:	4651      	mov	r1, sl
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f001 fbcc 	bl	800e184 <__pow5mult>
 800c9ec:	4682      	mov	sl, r0
 800c9ee:	2101      	movs	r1, #1
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f001 fb07 	bl	800e004 <__i2b>
 800c9f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	f340 8081 	ble.w	800cb02 <_dtoa_r+0x8ca>
 800ca00:	461a      	mov	r2, r3
 800ca02:	4601      	mov	r1, r0
 800ca04:	4620      	mov	r0, r4
 800ca06:	f001 fbbd 	bl	800e184 <__pow5mult>
 800ca0a:	9b07      	ldr	r3, [sp, #28]
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	4606      	mov	r6, r0
 800ca10:	dd7a      	ble.n	800cb08 <_dtoa_r+0x8d0>
 800ca12:	f04f 0800 	mov.w	r8, #0
 800ca16:	6933      	ldr	r3, [r6, #16]
 800ca18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ca1c:	6918      	ldr	r0, [r3, #16]
 800ca1e:	f001 faa3 	bl	800df68 <__hi0bits>
 800ca22:	f1c0 0020 	rsb	r0, r0, #32
 800ca26:	9b06      	ldr	r3, [sp, #24]
 800ca28:	4418      	add	r0, r3
 800ca2a:	f010 001f 	ands.w	r0, r0, #31
 800ca2e:	f000 8094 	beq.w	800cb5a <_dtoa_r+0x922>
 800ca32:	f1c0 0320 	rsb	r3, r0, #32
 800ca36:	2b04      	cmp	r3, #4
 800ca38:	f340 8085 	ble.w	800cb46 <_dtoa_r+0x90e>
 800ca3c:	9b05      	ldr	r3, [sp, #20]
 800ca3e:	f1c0 001c 	rsb	r0, r0, #28
 800ca42:	4403      	add	r3, r0
 800ca44:	9305      	str	r3, [sp, #20]
 800ca46:	9b06      	ldr	r3, [sp, #24]
 800ca48:	4403      	add	r3, r0
 800ca4a:	4405      	add	r5, r0
 800ca4c:	9306      	str	r3, [sp, #24]
 800ca4e:	9b05      	ldr	r3, [sp, #20]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	dd05      	ble.n	800ca60 <_dtoa_r+0x828>
 800ca54:	4651      	mov	r1, sl
 800ca56:	461a      	mov	r2, r3
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f001 fbed 	bl	800e238 <__lshift>
 800ca5e:	4682      	mov	sl, r0
 800ca60:	9b06      	ldr	r3, [sp, #24]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	dd05      	ble.n	800ca72 <_dtoa_r+0x83a>
 800ca66:	4631      	mov	r1, r6
 800ca68:	461a      	mov	r2, r3
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f001 fbe4 	bl	800e238 <__lshift>
 800ca70:	4606      	mov	r6, r0
 800ca72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d072      	beq.n	800cb5e <_dtoa_r+0x926>
 800ca78:	4631      	mov	r1, r6
 800ca7a:	4650      	mov	r0, sl
 800ca7c:	f001 fc48 	bl	800e310 <__mcmp>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	da6c      	bge.n	800cb5e <_dtoa_r+0x926>
 800ca84:	2300      	movs	r3, #0
 800ca86:	4651      	mov	r1, sl
 800ca88:	220a      	movs	r2, #10
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	f001 f9dc 	bl	800de48 <__multadd>
 800ca90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca92:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ca96:	4682      	mov	sl, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f000 81b0 	beq.w	800cdfe <_dtoa_r+0xbc6>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	4639      	mov	r1, r7
 800caa2:	220a      	movs	r2, #10
 800caa4:	4620      	mov	r0, r4
 800caa6:	f001 f9cf 	bl	800de48 <__multadd>
 800caaa:	9b01      	ldr	r3, [sp, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	4607      	mov	r7, r0
 800cab0:	f300 8096 	bgt.w	800cbe0 <_dtoa_r+0x9a8>
 800cab4:	9b07      	ldr	r3, [sp, #28]
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	dc59      	bgt.n	800cb6e <_dtoa_r+0x936>
 800caba:	e091      	b.n	800cbe0 <_dtoa_r+0x9a8>
 800cabc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cabe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cac2:	e758      	b.n	800c976 <_dtoa_r+0x73e>
 800cac4:	9b04      	ldr	r3, [sp, #16]
 800cac6:	1e5e      	subs	r6, r3, #1
 800cac8:	9b08      	ldr	r3, [sp, #32]
 800caca:	42b3      	cmp	r3, r6
 800cacc:	bfbf      	itttt	lt
 800cace:	9b08      	ldrlt	r3, [sp, #32]
 800cad0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cad2:	9608      	strlt	r6, [sp, #32]
 800cad4:	1af3      	sublt	r3, r6, r3
 800cad6:	bfb4      	ite	lt
 800cad8:	18d2      	addlt	r2, r2, r3
 800cada:	1b9e      	subge	r6, r3, r6
 800cadc:	9b04      	ldr	r3, [sp, #16]
 800cade:	bfbc      	itt	lt
 800cae0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cae2:	2600      	movlt	r6, #0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	bfb7      	itett	lt
 800cae8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800caec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800caf0:	1a9d      	sublt	r5, r3, r2
 800caf2:	2300      	movlt	r3, #0
 800caf4:	e741      	b.n	800c97a <_dtoa_r+0x742>
 800caf6:	9e08      	ldr	r6, [sp, #32]
 800caf8:	9d05      	ldr	r5, [sp, #20]
 800cafa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cafc:	e748      	b.n	800c990 <_dtoa_r+0x758>
 800cafe:	9a08      	ldr	r2, [sp, #32]
 800cb00:	e770      	b.n	800c9e4 <_dtoa_r+0x7ac>
 800cb02:	9b07      	ldr	r3, [sp, #28]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	dc19      	bgt.n	800cb3c <_dtoa_r+0x904>
 800cb08:	9b02      	ldr	r3, [sp, #8]
 800cb0a:	b9bb      	cbnz	r3, 800cb3c <_dtoa_r+0x904>
 800cb0c:	9b03      	ldr	r3, [sp, #12]
 800cb0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb12:	b99b      	cbnz	r3, 800cb3c <_dtoa_r+0x904>
 800cb14:	9b03      	ldr	r3, [sp, #12]
 800cb16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb1a:	0d1b      	lsrs	r3, r3, #20
 800cb1c:	051b      	lsls	r3, r3, #20
 800cb1e:	b183      	cbz	r3, 800cb42 <_dtoa_r+0x90a>
 800cb20:	9b05      	ldr	r3, [sp, #20]
 800cb22:	3301      	adds	r3, #1
 800cb24:	9305      	str	r3, [sp, #20]
 800cb26:	9b06      	ldr	r3, [sp, #24]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	9306      	str	r3, [sp, #24]
 800cb2c:	f04f 0801 	mov.w	r8, #1
 800cb30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f47f af6f 	bne.w	800ca16 <_dtoa_r+0x7de>
 800cb38:	2001      	movs	r0, #1
 800cb3a:	e774      	b.n	800ca26 <_dtoa_r+0x7ee>
 800cb3c:	f04f 0800 	mov.w	r8, #0
 800cb40:	e7f6      	b.n	800cb30 <_dtoa_r+0x8f8>
 800cb42:	4698      	mov	r8, r3
 800cb44:	e7f4      	b.n	800cb30 <_dtoa_r+0x8f8>
 800cb46:	d082      	beq.n	800ca4e <_dtoa_r+0x816>
 800cb48:	9a05      	ldr	r2, [sp, #20]
 800cb4a:	331c      	adds	r3, #28
 800cb4c:	441a      	add	r2, r3
 800cb4e:	9205      	str	r2, [sp, #20]
 800cb50:	9a06      	ldr	r2, [sp, #24]
 800cb52:	441a      	add	r2, r3
 800cb54:	441d      	add	r5, r3
 800cb56:	9206      	str	r2, [sp, #24]
 800cb58:	e779      	b.n	800ca4e <_dtoa_r+0x816>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	e7f4      	b.n	800cb48 <_dtoa_r+0x910>
 800cb5e:	9b04      	ldr	r3, [sp, #16]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dc37      	bgt.n	800cbd4 <_dtoa_r+0x99c>
 800cb64:	9b07      	ldr	r3, [sp, #28]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	dd34      	ble.n	800cbd4 <_dtoa_r+0x99c>
 800cb6a:	9b04      	ldr	r3, [sp, #16]
 800cb6c:	9301      	str	r3, [sp, #4]
 800cb6e:	9b01      	ldr	r3, [sp, #4]
 800cb70:	b963      	cbnz	r3, 800cb8c <_dtoa_r+0x954>
 800cb72:	4631      	mov	r1, r6
 800cb74:	2205      	movs	r2, #5
 800cb76:	4620      	mov	r0, r4
 800cb78:	f001 f966 	bl	800de48 <__multadd>
 800cb7c:	4601      	mov	r1, r0
 800cb7e:	4606      	mov	r6, r0
 800cb80:	4650      	mov	r0, sl
 800cb82:	f001 fbc5 	bl	800e310 <__mcmp>
 800cb86:	2800      	cmp	r0, #0
 800cb88:	f73f adbb 	bgt.w	800c702 <_dtoa_r+0x4ca>
 800cb8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb8e:	9d00      	ldr	r5, [sp, #0]
 800cb90:	ea6f 0b03 	mvn.w	fp, r3
 800cb94:	f04f 0800 	mov.w	r8, #0
 800cb98:	4631      	mov	r1, r6
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f001 f932 	bl	800de04 <_Bfree>
 800cba0:	2f00      	cmp	r7, #0
 800cba2:	f43f aeab 	beq.w	800c8fc <_dtoa_r+0x6c4>
 800cba6:	f1b8 0f00 	cmp.w	r8, #0
 800cbaa:	d005      	beq.n	800cbb8 <_dtoa_r+0x980>
 800cbac:	45b8      	cmp	r8, r7
 800cbae:	d003      	beq.n	800cbb8 <_dtoa_r+0x980>
 800cbb0:	4641      	mov	r1, r8
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f001 f926 	bl	800de04 <_Bfree>
 800cbb8:	4639      	mov	r1, r7
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f001 f922 	bl	800de04 <_Bfree>
 800cbc0:	e69c      	b.n	800c8fc <_dtoa_r+0x6c4>
 800cbc2:	2600      	movs	r6, #0
 800cbc4:	4637      	mov	r7, r6
 800cbc6:	e7e1      	b.n	800cb8c <_dtoa_r+0x954>
 800cbc8:	46bb      	mov	fp, r7
 800cbca:	4637      	mov	r7, r6
 800cbcc:	e599      	b.n	800c702 <_dtoa_r+0x4ca>
 800cbce:	bf00      	nop
 800cbd0:	40240000 	.word	0x40240000
 800cbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	f000 80c8 	beq.w	800cd6c <_dtoa_r+0xb34>
 800cbdc:	9b04      	ldr	r3, [sp, #16]
 800cbde:	9301      	str	r3, [sp, #4]
 800cbe0:	2d00      	cmp	r5, #0
 800cbe2:	dd05      	ble.n	800cbf0 <_dtoa_r+0x9b8>
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	462a      	mov	r2, r5
 800cbe8:	4620      	mov	r0, r4
 800cbea:	f001 fb25 	bl	800e238 <__lshift>
 800cbee:	4607      	mov	r7, r0
 800cbf0:	f1b8 0f00 	cmp.w	r8, #0
 800cbf4:	d05b      	beq.n	800ccae <_dtoa_r+0xa76>
 800cbf6:	6879      	ldr	r1, [r7, #4]
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f001 f8c3 	bl	800dd84 <_Balloc>
 800cbfe:	4605      	mov	r5, r0
 800cc00:	b928      	cbnz	r0, 800cc0e <_dtoa_r+0x9d6>
 800cc02:	4b83      	ldr	r3, [pc, #524]	; (800ce10 <_dtoa_r+0xbd8>)
 800cc04:	4602      	mov	r2, r0
 800cc06:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cc0a:	f7ff bb2e 	b.w	800c26a <_dtoa_r+0x32>
 800cc0e:	693a      	ldr	r2, [r7, #16]
 800cc10:	3202      	adds	r2, #2
 800cc12:	0092      	lsls	r2, r2, #2
 800cc14:	f107 010c 	add.w	r1, r7, #12
 800cc18:	300c      	adds	r0, #12
 800cc1a:	f7ff fa66 	bl	800c0ea <memcpy>
 800cc1e:	2201      	movs	r2, #1
 800cc20:	4629      	mov	r1, r5
 800cc22:	4620      	mov	r0, r4
 800cc24:	f001 fb08 	bl	800e238 <__lshift>
 800cc28:	9b00      	ldr	r3, [sp, #0]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	9304      	str	r3, [sp, #16]
 800cc2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc32:	4413      	add	r3, r2
 800cc34:	9308      	str	r3, [sp, #32]
 800cc36:	9b02      	ldr	r3, [sp, #8]
 800cc38:	f003 0301 	and.w	r3, r3, #1
 800cc3c:	46b8      	mov	r8, r7
 800cc3e:	9306      	str	r3, [sp, #24]
 800cc40:	4607      	mov	r7, r0
 800cc42:	9b04      	ldr	r3, [sp, #16]
 800cc44:	4631      	mov	r1, r6
 800cc46:	3b01      	subs	r3, #1
 800cc48:	4650      	mov	r0, sl
 800cc4a:	9301      	str	r3, [sp, #4]
 800cc4c:	f7ff fa6a 	bl	800c124 <quorem>
 800cc50:	4641      	mov	r1, r8
 800cc52:	9002      	str	r0, [sp, #8]
 800cc54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cc58:	4650      	mov	r0, sl
 800cc5a:	f001 fb59 	bl	800e310 <__mcmp>
 800cc5e:	463a      	mov	r2, r7
 800cc60:	9005      	str	r0, [sp, #20]
 800cc62:	4631      	mov	r1, r6
 800cc64:	4620      	mov	r0, r4
 800cc66:	f001 fb6f 	bl	800e348 <__mdiff>
 800cc6a:	68c2      	ldr	r2, [r0, #12]
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	bb02      	cbnz	r2, 800ccb2 <_dtoa_r+0xa7a>
 800cc70:	4601      	mov	r1, r0
 800cc72:	4650      	mov	r0, sl
 800cc74:	f001 fb4c 	bl	800e310 <__mcmp>
 800cc78:	4602      	mov	r2, r0
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	9209      	str	r2, [sp, #36]	; 0x24
 800cc80:	f001 f8c0 	bl	800de04 <_Bfree>
 800cc84:	9b07      	ldr	r3, [sp, #28]
 800cc86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc88:	9d04      	ldr	r5, [sp, #16]
 800cc8a:	ea43 0102 	orr.w	r1, r3, r2
 800cc8e:	9b06      	ldr	r3, [sp, #24]
 800cc90:	4319      	orrs	r1, r3
 800cc92:	d110      	bne.n	800ccb6 <_dtoa_r+0xa7e>
 800cc94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cc98:	d029      	beq.n	800ccee <_dtoa_r+0xab6>
 800cc9a:	9b05      	ldr	r3, [sp, #20]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dd02      	ble.n	800cca6 <_dtoa_r+0xa6e>
 800cca0:	9b02      	ldr	r3, [sp, #8]
 800cca2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cca6:	9b01      	ldr	r3, [sp, #4]
 800cca8:	f883 9000 	strb.w	r9, [r3]
 800ccac:	e774      	b.n	800cb98 <_dtoa_r+0x960>
 800ccae:	4638      	mov	r0, r7
 800ccb0:	e7ba      	b.n	800cc28 <_dtoa_r+0x9f0>
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	e7e1      	b.n	800cc7a <_dtoa_r+0xa42>
 800ccb6:	9b05      	ldr	r3, [sp, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	db04      	blt.n	800ccc6 <_dtoa_r+0xa8e>
 800ccbc:	9907      	ldr	r1, [sp, #28]
 800ccbe:	430b      	orrs	r3, r1
 800ccc0:	9906      	ldr	r1, [sp, #24]
 800ccc2:	430b      	orrs	r3, r1
 800ccc4:	d120      	bne.n	800cd08 <_dtoa_r+0xad0>
 800ccc6:	2a00      	cmp	r2, #0
 800ccc8:	dded      	ble.n	800cca6 <_dtoa_r+0xa6e>
 800ccca:	4651      	mov	r1, sl
 800cccc:	2201      	movs	r2, #1
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f001 fab2 	bl	800e238 <__lshift>
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	4682      	mov	sl, r0
 800ccd8:	f001 fb1a 	bl	800e310 <__mcmp>
 800ccdc:	2800      	cmp	r0, #0
 800ccde:	dc03      	bgt.n	800cce8 <_dtoa_r+0xab0>
 800cce0:	d1e1      	bne.n	800cca6 <_dtoa_r+0xa6e>
 800cce2:	f019 0f01 	tst.w	r9, #1
 800cce6:	d0de      	beq.n	800cca6 <_dtoa_r+0xa6e>
 800cce8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ccec:	d1d8      	bne.n	800cca0 <_dtoa_r+0xa68>
 800ccee:	9a01      	ldr	r2, [sp, #4]
 800ccf0:	2339      	movs	r3, #57	; 0x39
 800ccf2:	7013      	strb	r3, [r2, #0]
 800ccf4:	462b      	mov	r3, r5
 800ccf6:	461d      	mov	r5, r3
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ccfe:	2a39      	cmp	r2, #57	; 0x39
 800cd00:	d06c      	beq.n	800cddc <_dtoa_r+0xba4>
 800cd02:	3201      	adds	r2, #1
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	e747      	b.n	800cb98 <_dtoa_r+0x960>
 800cd08:	2a00      	cmp	r2, #0
 800cd0a:	dd07      	ble.n	800cd1c <_dtoa_r+0xae4>
 800cd0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd10:	d0ed      	beq.n	800ccee <_dtoa_r+0xab6>
 800cd12:	9a01      	ldr	r2, [sp, #4]
 800cd14:	f109 0301 	add.w	r3, r9, #1
 800cd18:	7013      	strb	r3, [r2, #0]
 800cd1a:	e73d      	b.n	800cb98 <_dtoa_r+0x960>
 800cd1c:	9b04      	ldr	r3, [sp, #16]
 800cd1e:	9a08      	ldr	r2, [sp, #32]
 800cd20:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d043      	beq.n	800cdb0 <_dtoa_r+0xb78>
 800cd28:	4651      	mov	r1, sl
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	220a      	movs	r2, #10
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f001 f88a 	bl	800de48 <__multadd>
 800cd34:	45b8      	cmp	r8, r7
 800cd36:	4682      	mov	sl, r0
 800cd38:	f04f 0300 	mov.w	r3, #0
 800cd3c:	f04f 020a 	mov.w	r2, #10
 800cd40:	4641      	mov	r1, r8
 800cd42:	4620      	mov	r0, r4
 800cd44:	d107      	bne.n	800cd56 <_dtoa_r+0xb1e>
 800cd46:	f001 f87f 	bl	800de48 <__multadd>
 800cd4a:	4680      	mov	r8, r0
 800cd4c:	4607      	mov	r7, r0
 800cd4e:	9b04      	ldr	r3, [sp, #16]
 800cd50:	3301      	adds	r3, #1
 800cd52:	9304      	str	r3, [sp, #16]
 800cd54:	e775      	b.n	800cc42 <_dtoa_r+0xa0a>
 800cd56:	f001 f877 	bl	800de48 <__multadd>
 800cd5a:	4639      	mov	r1, r7
 800cd5c:	4680      	mov	r8, r0
 800cd5e:	2300      	movs	r3, #0
 800cd60:	220a      	movs	r2, #10
 800cd62:	4620      	mov	r0, r4
 800cd64:	f001 f870 	bl	800de48 <__multadd>
 800cd68:	4607      	mov	r7, r0
 800cd6a:	e7f0      	b.n	800cd4e <_dtoa_r+0xb16>
 800cd6c:	9b04      	ldr	r3, [sp, #16]
 800cd6e:	9301      	str	r3, [sp, #4]
 800cd70:	9d00      	ldr	r5, [sp, #0]
 800cd72:	4631      	mov	r1, r6
 800cd74:	4650      	mov	r0, sl
 800cd76:	f7ff f9d5 	bl	800c124 <quorem>
 800cd7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cd7e:	9b00      	ldr	r3, [sp, #0]
 800cd80:	f805 9b01 	strb.w	r9, [r5], #1
 800cd84:	1aea      	subs	r2, r5, r3
 800cd86:	9b01      	ldr	r3, [sp, #4]
 800cd88:	4293      	cmp	r3, r2
 800cd8a:	dd07      	ble.n	800cd9c <_dtoa_r+0xb64>
 800cd8c:	4651      	mov	r1, sl
 800cd8e:	2300      	movs	r3, #0
 800cd90:	220a      	movs	r2, #10
 800cd92:	4620      	mov	r0, r4
 800cd94:	f001 f858 	bl	800de48 <__multadd>
 800cd98:	4682      	mov	sl, r0
 800cd9a:	e7ea      	b.n	800cd72 <_dtoa_r+0xb3a>
 800cd9c:	9b01      	ldr	r3, [sp, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	bfc8      	it	gt
 800cda2:	461d      	movgt	r5, r3
 800cda4:	9b00      	ldr	r3, [sp, #0]
 800cda6:	bfd8      	it	le
 800cda8:	2501      	movle	r5, #1
 800cdaa:	441d      	add	r5, r3
 800cdac:	f04f 0800 	mov.w	r8, #0
 800cdb0:	4651      	mov	r1, sl
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	f001 fa3f 	bl	800e238 <__lshift>
 800cdba:	4631      	mov	r1, r6
 800cdbc:	4682      	mov	sl, r0
 800cdbe:	f001 faa7 	bl	800e310 <__mcmp>
 800cdc2:	2800      	cmp	r0, #0
 800cdc4:	dc96      	bgt.n	800ccf4 <_dtoa_r+0xabc>
 800cdc6:	d102      	bne.n	800cdce <_dtoa_r+0xb96>
 800cdc8:	f019 0f01 	tst.w	r9, #1
 800cdcc:	d192      	bne.n	800ccf4 <_dtoa_r+0xabc>
 800cdce:	462b      	mov	r3, r5
 800cdd0:	461d      	mov	r5, r3
 800cdd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdd6:	2a30      	cmp	r2, #48	; 0x30
 800cdd8:	d0fa      	beq.n	800cdd0 <_dtoa_r+0xb98>
 800cdda:	e6dd      	b.n	800cb98 <_dtoa_r+0x960>
 800cddc:	9a00      	ldr	r2, [sp, #0]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d189      	bne.n	800ccf6 <_dtoa_r+0xabe>
 800cde2:	f10b 0b01 	add.w	fp, fp, #1
 800cde6:	2331      	movs	r3, #49	; 0x31
 800cde8:	e796      	b.n	800cd18 <_dtoa_r+0xae0>
 800cdea:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <_dtoa_r+0xbdc>)
 800cdec:	f7ff ba99 	b.w	800c322 <_dtoa_r+0xea>
 800cdf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f47f aa6d 	bne.w	800c2d2 <_dtoa_r+0x9a>
 800cdf8:	4b07      	ldr	r3, [pc, #28]	; (800ce18 <_dtoa_r+0xbe0>)
 800cdfa:	f7ff ba92 	b.w	800c322 <_dtoa_r+0xea>
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	dcb5      	bgt.n	800cd70 <_dtoa_r+0xb38>
 800ce04:	9b07      	ldr	r3, [sp, #28]
 800ce06:	2b02      	cmp	r3, #2
 800ce08:	f73f aeb1 	bgt.w	800cb6e <_dtoa_r+0x936>
 800ce0c:	e7b0      	b.n	800cd70 <_dtoa_r+0xb38>
 800ce0e:	bf00      	nop
 800ce10:	08010185 	.word	0x08010185
 800ce14:	0800ff84 	.word	0x0800ff84
 800ce18:	08010109 	.word	0x08010109

0800ce1c <_free_r>:
 800ce1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce1e:	2900      	cmp	r1, #0
 800ce20:	d044      	beq.n	800ceac <_free_r+0x90>
 800ce22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce26:	9001      	str	r0, [sp, #4]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ce2e:	bfb8      	it	lt
 800ce30:	18e4      	addlt	r4, r4, r3
 800ce32:	f000 ff9b 	bl	800dd6c <__malloc_lock>
 800ce36:	4a1e      	ldr	r2, [pc, #120]	; (800ceb0 <_free_r+0x94>)
 800ce38:	9801      	ldr	r0, [sp, #4]
 800ce3a:	6813      	ldr	r3, [r2, #0]
 800ce3c:	b933      	cbnz	r3, 800ce4c <_free_r+0x30>
 800ce3e:	6063      	str	r3, [r4, #4]
 800ce40:	6014      	str	r4, [r2, #0]
 800ce42:	b003      	add	sp, #12
 800ce44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce48:	f000 bf96 	b.w	800dd78 <__malloc_unlock>
 800ce4c:	42a3      	cmp	r3, r4
 800ce4e:	d908      	bls.n	800ce62 <_free_r+0x46>
 800ce50:	6825      	ldr	r5, [r4, #0]
 800ce52:	1961      	adds	r1, r4, r5
 800ce54:	428b      	cmp	r3, r1
 800ce56:	bf01      	itttt	eq
 800ce58:	6819      	ldreq	r1, [r3, #0]
 800ce5a:	685b      	ldreq	r3, [r3, #4]
 800ce5c:	1949      	addeq	r1, r1, r5
 800ce5e:	6021      	streq	r1, [r4, #0]
 800ce60:	e7ed      	b.n	800ce3e <_free_r+0x22>
 800ce62:	461a      	mov	r2, r3
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	b10b      	cbz	r3, 800ce6c <_free_r+0x50>
 800ce68:	42a3      	cmp	r3, r4
 800ce6a:	d9fa      	bls.n	800ce62 <_free_r+0x46>
 800ce6c:	6811      	ldr	r1, [r2, #0]
 800ce6e:	1855      	adds	r5, r2, r1
 800ce70:	42a5      	cmp	r5, r4
 800ce72:	d10b      	bne.n	800ce8c <_free_r+0x70>
 800ce74:	6824      	ldr	r4, [r4, #0]
 800ce76:	4421      	add	r1, r4
 800ce78:	1854      	adds	r4, r2, r1
 800ce7a:	42a3      	cmp	r3, r4
 800ce7c:	6011      	str	r1, [r2, #0]
 800ce7e:	d1e0      	bne.n	800ce42 <_free_r+0x26>
 800ce80:	681c      	ldr	r4, [r3, #0]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	6053      	str	r3, [r2, #4]
 800ce86:	440c      	add	r4, r1
 800ce88:	6014      	str	r4, [r2, #0]
 800ce8a:	e7da      	b.n	800ce42 <_free_r+0x26>
 800ce8c:	d902      	bls.n	800ce94 <_free_r+0x78>
 800ce8e:	230c      	movs	r3, #12
 800ce90:	6003      	str	r3, [r0, #0]
 800ce92:	e7d6      	b.n	800ce42 <_free_r+0x26>
 800ce94:	6825      	ldr	r5, [r4, #0]
 800ce96:	1961      	adds	r1, r4, r5
 800ce98:	428b      	cmp	r3, r1
 800ce9a:	bf04      	itt	eq
 800ce9c:	6819      	ldreq	r1, [r3, #0]
 800ce9e:	685b      	ldreq	r3, [r3, #4]
 800cea0:	6063      	str	r3, [r4, #4]
 800cea2:	bf04      	itt	eq
 800cea4:	1949      	addeq	r1, r1, r5
 800cea6:	6021      	streq	r1, [r4, #0]
 800cea8:	6054      	str	r4, [r2, #4]
 800ceaa:	e7ca      	b.n	800ce42 <_free_r+0x26>
 800ceac:	b003      	add	sp, #12
 800ceae:	bd30      	pop	{r4, r5, pc}
 800ceb0:	20000be8 	.word	0x20000be8

0800ceb4 <rshift>:
 800ceb4:	6903      	ldr	r3, [r0, #16]
 800ceb6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ceba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cebe:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cec2:	f100 0414 	add.w	r4, r0, #20
 800cec6:	dd45      	ble.n	800cf54 <rshift+0xa0>
 800cec8:	f011 011f 	ands.w	r1, r1, #31
 800cecc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ced0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ced4:	d10c      	bne.n	800cef0 <rshift+0x3c>
 800ced6:	f100 0710 	add.w	r7, r0, #16
 800ceda:	4629      	mov	r1, r5
 800cedc:	42b1      	cmp	r1, r6
 800cede:	d334      	bcc.n	800cf4a <rshift+0x96>
 800cee0:	1a9b      	subs	r3, r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	1eea      	subs	r2, r5, #3
 800cee6:	4296      	cmp	r6, r2
 800cee8:	bf38      	it	cc
 800ceea:	2300      	movcc	r3, #0
 800ceec:	4423      	add	r3, r4
 800ceee:	e015      	b.n	800cf1c <rshift+0x68>
 800cef0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cef4:	f1c1 0820 	rsb	r8, r1, #32
 800cef8:	40cf      	lsrs	r7, r1
 800cefa:	f105 0e04 	add.w	lr, r5, #4
 800cefe:	46a1      	mov	r9, r4
 800cf00:	4576      	cmp	r6, lr
 800cf02:	46f4      	mov	ip, lr
 800cf04:	d815      	bhi.n	800cf32 <rshift+0x7e>
 800cf06:	1a9a      	subs	r2, r3, r2
 800cf08:	0092      	lsls	r2, r2, #2
 800cf0a:	3a04      	subs	r2, #4
 800cf0c:	3501      	adds	r5, #1
 800cf0e:	42ae      	cmp	r6, r5
 800cf10:	bf38      	it	cc
 800cf12:	2200      	movcc	r2, #0
 800cf14:	18a3      	adds	r3, r4, r2
 800cf16:	50a7      	str	r7, [r4, r2]
 800cf18:	b107      	cbz	r7, 800cf1c <rshift+0x68>
 800cf1a:	3304      	adds	r3, #4
 800cf1c:	1b1a      	subs	r2, r3, r4
 800cf1e:	42a3      	cmp	r3, r4
 800cf20:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cf24:	bf08      	it	eq
 800cf26:	2300      	moveq	r3, #0
 800cf28:	6102      	str	r2, [r0, #16]
 800cf2a:	bf08      	it	eq
 800cf2c:	6143      	streq	r3, [r0, #20]
 800cf2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf32:	f8dc c000 	ldr.w	ip, [ip]
 800cf36:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf3a:	ea4c 0707 	orr.w	r7, ip, r7
 800cf3e:	f849 7b04 	str.w	r7, [r9], #4
 800cf42:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf46:	40cf      	lsrs	r7, r1
 800cf48:	e7da      	b.n	800cf00 <rshift+0x4c>
 800cf4a:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf4e:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf52:	e7c3      	b.n	800cedc <rshift+0x28>
 800cf54:	4623      	mov	r3, r4
 800cf56:	e7e1      	b.n	800cf1c <rshift+0x68>

0800cf58 <__hexdig_fun>:
 800cf58:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cf5c:	2b09      	cmp	r3, #9
 800cf5e:	d802      	bhi.n	800cf66 <__hexdig_fun+0xe>
 800cf60:	3820      	subs	r0, #32
 800cf62:	b2c0      	uxtb	r0, r0
 800cf64:	4770      	bx	lr
 800cf66:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cf6a:	2b05      	cmp	r3, #5
 800cf6c:	d801      	bhi.n	800cf72 <__hexdig_fun+0x1a>
 800cf6e:	3847      	subs	r0, #71	; 0x47
 800cf70:	e7f7      	b.n	800cf62 <__hexdig_fun+0xa>
 800cf72:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cf76:	2b05      	cmp	r3, #5
 800cf78:	d801      	bhi.n	800cf7e <__hexdig_fun+0x26>
 800cf7a:	3827      	subs	r0, #39	; 0x27
 800cf7c:	e7f1      	b.n	800cf62 <__hexdig_fun+0xa>
 800cf7e:	2000      	movs	r0, #0
 800cf80:	4770      	bx	lr
	...

0800cf84 <__gethex>:
 800cf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf88:	4617      	mov	r7, r2
 800cf8a:	680a      	ldr	r2, [r1, #0]
 800cf8c:	b085      	sub	sp, #20
 800cf8e:	f102 0b02 	add.w	fp, r2, #2
 800cf92:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf96:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf9a:	4681      	mov	r9, r0
 800cf9c:	468a      	mov	sl, r1
 800cf9e:	9302      	str	r3, [sp, #8]
 800cfa0:	32fe      	adds	r2, #254	; 0xfe
 800cfa2:	eb02 030b 	add.w	r3, r2, fp
 800cfa6:	46d8      	mov	r8, fp
 800cfa8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cfac:	9301      	str	r3, [sp, #4]
 800cfae:	2830      	cmp	r0, #48	; 0x30
 800cfb0:	d0f7      	beq.n	800cfa2 <__gethex+0x1e>
 800cfb2:	f7ff ffd1 	bl	800cf58 <__hexdig_fun>
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d138      	bne.n	800d02e <__gethex+0xaa>
 800cfbc:	49a7      	ldr	r1, [pc, #668]	; (800d25c <__gethex+0x2d8>)
 800cfbe:	2201      	movs	r2, #1
 800cfc0:	4640      	mov	r0, r8
 800cfc2:	f7ff f801 	bl	800bfc8 <strncmp>
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	2800      	cmp	r0, #0
 800cfca:	d169      	bne.n	800d0a0 <__gethex+0x11c>
 800cfcc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cfd0:	465d      	mov	r5, fp
 800cfd2:	f7ff ffc1 	bl	800cf58 <__hexdig_fun>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d064      	beq.n	800d0a4 <__gethex+0x120>
 800cfda:	465a      	mov	r2, fp
 800cfdc:	7810      	ldrb	r0, [r2, #0]
 800cfde:	2830      	cmp	r0, #48	; 0x30
 800cfe0:	4690      	mov	r8, r2
 800cfe2:	f102 0201 	add.w	r2, r2, #1
 800cfe6:	d0f9      	beq.n	800cfdc <__gethex+0x58>
 800cfe8:	f7ff ffb6 	bl	800cf58 <__hexdig_fun>
 800cfec:	2301      	movs	r3, #1
 800cfee:	fab0 f480 	clz	r4, r0
 800cff2:	0964      	lsrs	r4, r4, #5
 800cff4:	465e      	mov	r6, fp
 800cff6:	9301      	str	r3, [sp, #4]
 800cff8:	4642      	mov	r2, r8
 800cffa:	4615      	mov	r5, r2
 800cffc:	3201      	adds	r2, #1
 800cffe:	7828      	ldrb	r0, [r5, #0]
 800d000:	f7ff ffaa 	bl	800cf58 <__hexdig_fun>
 800d004:	2800      	cmp	r0, #0
 800d006:	d1f8      	bne.n	800cffa <__gethex+0x76>
 800d008:	4994      	ldr	r1, [pc, #592]	; (800d25c <__gethex+0x2d8>)
 800d00a:	2201      	movs	r2, #1
 800d00c:	4628      	mov	r0, r5
 800d00e:	f7fe ffdb 	bl	800bfc8 <strncmp>
 800d012:	b978      	cbnz	r0, 800d034 <__gethex+0xb0>
 800d014:	b946      	cbnz	r6, 800d028 <__gethex+0xa4>
 800d016:	1c6e      	adds	r6, r5, #1
 800d018:	4632      	mov	r2, r6
 800d01a:	4615      	mov	r5, r2
 800d01c:	3201      	adds	r2, #1
 800d01e:	7828      	ldrb	r0, [r5, #0]
 800d020:	f7ff ff9a 	bl	800cf58 <__hexdig_fun>
 800d024:	2800      	cmp	r0, #0
 800d026:	d1f8      	bne.n	800d01a <__gethex+0x96>
 800d028:	1b73      	subs	r3, r6, r5
 800d02a:	009e      	lsls	r6, r3, #2
 800d02c:	e004      	b.n	800d038 <__gethex+0xb4>
 800d02e:	2400      	movs	r4, #0
 800d030:	4626      	mov	r6, r4
 800d032:	e7e1      	b.n	800cff8 <__gethex+0x74>
 800d034:	2e00      	cmp	r6, #0
 800d036:	d1f7      	bne.n	800d028 <__gethex+0xa4>
 800d038:	782b      	ldrb	r3, [r5, #0]
 800d03a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d03e:	2b50      	cmp	r3, #80	; 0x50
 800d040:	d13d      	bne.n	800d0be <__gethex+0x13a>
 800d042:	786b      	ldrb	r3, [r5, #1]
 800d044:	2b2b      	cmp	r3, #43	; 0x2b
 800d046:	d02f      	beq.n	800d0a8 <__gethex+0x124>
 800d048:	2b2d      	cmp	r3, #45	; 0x2d
 800d04a:	d031      	beq.n	800d0b0 <__gethex+0x12c>
 800d04c:	1c69      	adds	r1, r5, #1
 800d04e:	f04f 0b00 	mov.w	fp, #0
 800d052:	7808      	ldrb	r0, [r1, #0]
 800d054:	f7ff ff80 	bl	800cf58 <__hexdig_fun>
 800d058:	1e42      	subs	r2, r0, #1
 800d05a:	b2d2      	uxtb	r2, r2
 800d05c:	2a18      	cmp	r2, #24
 800d05e:	d82e      	bhi.n	800d0be <__gethex+0x13a>
 800d060:	f1a0 0210 	sub.w	r2, r0, #16
 800d064:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d068:	f7ff ff76 	bl	800cf58 <__hexdig_fun>
 800d06c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800d070:	fa5f fc8c 	uxtb.w	ip, ip
 800d074:	f1bc 0f18 	cmp.w	ip, #24
 800d078:	d91d      	bls.n	800d0b6 <__gethex+0x132>
 800d07a:	f1bb 0f00 	cmp.w	fp, #0
 800d07e:	d000      	beq.n	800d082 <__gethex+0xfe>
 800d080:	4252      	negs	r2, r2
 800d082:	4416      	add	r6, r2
 800d084:	f8ca 1000 	str.w	r1, [sl]
 800d088:	b1dc      	cbz	r4, 800d0c2 <__gethex+0x13e>
 800d08a:	9b01      	ldr	r3, [sp, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	bf14      	ite	ne
 800d090:	f04f 0800 	movne.w	r8, #0
 800d094:	f04f 0806 	moveq.w	r8, #6
 800d098:	4640      	mov	r0, r8
 800d09a:	b005      	add	sp, #20
 800d09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a0:	4645      	mov	r5, r8
 800d0a2:	4626      	mov	r6, r4
 800d0a4:	2401      	movs	r4, #1
 800d0a6:	e7c7      	b.n	800d038 <__gethex+0xb4>
 800d0a8:	f04f 0b00 	mov.w	fp, #0
 800d0ac:	1ca9      	adds	r1, r5, #2
 800d0ae:	e7d0      	b.n	800d052 <__gethex+0xce>
 800d0b0:	f04f 0b01 	mov.w	fp, #1
 800d0b4:	e7fa      	b.n	800d0ac <__gethex+0x128>
 800d0b6:	230a      	movs	r3, #10
 800d0b8:	fb03 0002 	mla	r0, r3, r2, r0
 800d0bc:	e7d0      	b.n	800d060 <__gethex+0xdc>
 800d0be:	4629      	mov	r1, r5
 800d0c0:	e7e0      	b.n	800d084 <__gethex+0x100>
 800d0c2:	eba5 0308 	sub.w	r3, r5, r8
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	2b07      	cmp	r3, #7
 800d0cc:	dc0a      	bgt.n	800d0e4 <__gethex+0x160>
 800d0ce:	4648      	mov	r0, r9
 800d0d0:	f000 fe58 	bl	800dd84 <_Balloc>
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	b940      	cbnz	r0, 800d0ea <__gethex+0x166>
 800d0d8:	4b61      	ldr	r3, [pc, #388]	; (800d260 <__gethex+0x2dc>)
 800d0da:	4602      	mov	r2, r0
 800d0dc:	21e4      	movs	r1, #228	; 0xe4
 800d0de:	4861      	ldr	r0, [pc, #388]	; (800d264 <__gethex+0x2e0>)
 800d0e0:	f001 fc7e 	bl	800e9e0 <__assert_func>
 800d0e4:	3101      	adds	r1, #1
 800d0e6:	105b      	asrs	r3, r3, #1
 800d0e8:	e7ef      	b.n	800d0ca <__gethex+0x146>
 800d0ea:	f100 0a14 	add.w	sl, r0, #20
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	495a      	ldr	r1, [pc, #360]	; (800d25c <__gethex+0x2d8>)
 800d0f2:	f8cd a004 	str.w	sl, [sp, #4]
 800d0f6:	469b      	mov	fp, r3
 800d0f8:	45a8      	cmp	r8, r5
 800d0fa:	d342      	bcc.n	800d182 <__gethex+0x1fe>
 800d0fc:	9801      	ldr	r0, [sp, #4]
 800d0fe:	f840 bb04 	str.w	fp, [r0], #4
 800d102:	eba0 000a 	sub.w	r0, r0, sl
 800d106:	1080      	asrs	r0, r0, #2
 800d108:	6120      	str	r0, [r4, #16]
 800d10a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d10e:	4658      	mov	r0, fp
 800d110:	f000 ff2a 	bl	800df68 <__hi0bits>
 800d114:	683d      	ldr	r5, [r7, #0]
 800d116:	eba8 0000 	sub.w	r0, r8, r0
 800d11a:	42a8      	cmp	r0, r5
 800d11c:	dd59      	ble.n	800d1d2 <__gethex+0x24e>
 800d11e:	eba0 0805 	sub.w	r8, r0, r5
 800d122:	4641      	mov	r1, r8
 800d124:	4620      	mov	r0, r4
 800d126:	f001 fab9 	bl	800e69c <__any_on>
 800d12a:	4683      	mov	fp, r0
 800d12c:	b1b8      	cbz	r0, 800d15e <__gethex+0x1da>
 800d12e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800d132:	1159      	asrs	r1, r3, #5
 800d134:	f003 021f 	and.w	r2, r3, #31
 800d138:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d13c:	f04f 0b01 	mov.w	fp, #1
 800d140:	fa0b f202 	lsl.w	r2, fp, r2
 800d144:	420a      	tst	r2, r1
 800d146:	d00a      	beq.n	800d15e <__gethex+0x1da>
 800d148:	455b      	cmp	r3, fp
 800d14a:	dd06      	ble.n	800d15a <__gethex+0x1d6>
 800d14c:	f1a8 0102 	sub.w	r1, r8, #2
 800d150:	4620      	mov	r0, r4
 800d152:	f001 faa3 	bl	800e69c <__any_on>
 800d156:	2800      	cmp	r0, #0
 800d158:	d138      	bne.n	800d1cc <__gethex+0x248>
 800d15a:	f04f 0b02 	mov.w	fp, #2
 800d15e:	4641      	mov	r1, r8
 800d160:	4620      	mov	r0, r4
 800d162:	f7ff fea7 	bl	800ceb4 <rshift>
 800d166:	4446      	add	r6, r8
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	42b3      	cmp	r3, r6
 800d16c:	da41      	bge.n	800d1f2 <__gethex+0x26e>
 800d16e:	4621      	mov	r1, r4
 800d170:	4648      	mov	r0, r9
 800d172:	f000 fe47 	bl	800de04 <_Bfree>
 800d176:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d178:	2300      	movs	r3, #0
 800d17a:	6013      	str	r3, [r2, #0]
 800d17c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d180:	e78a      	b.n	800d098 <__gethex+0x114>
 800d182:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d186:	2a2e      	cmp	r2, #46	; 0x2e
 800d188:	d014      	beq.n	800d1b4 <__gethex+0x230>
 800d18a:	2b20      	cmp	r3, #32
 800d18c:	d106      	bne.n	800d19c <__gethex+0x218>
 800d18e:	9b01      	ldr	r3, [sp, #4]
 800d190:	f843 bb04 	str.w	fp, [r3], #4
 800d194:	f04f 0b00 	mov.w	fp, #0
 800d198:	9301      	str	r3, [sp, #4]
 800d19a:	465b      	mov	r3, fp
 800d19c:	7828      	ldrb	r0, [r5, #0]
 800d19e:	9303      	str	r3, [sp, #12]
 800d1a0:	f7ff feda 	bl	800cf58 <__hexdig_fun>
 800d1a4:	9b03      	ldr	r3, [sp, #12]
 800d1a6:	f000 000f 	and.w	r0, r0, #15
 800d1aa:	4098      	lsls	r0, r3
 800d1ac:	ea4b 0b00 	orr.w	fp, fp, r0
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	e7a1      	b.n	800d0f8 <__gethex+0x174>
 800d1b4:	45a8      	cmp	r8, r5
 800d1b6:	d8e8      	bhi.n	800d18a <__gethex+0x206>
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	9303      	str	r3, [sp, #12]
 800d1be:	f7fe ff03 	bl	800bfc8 <strncmp>
 800d1c2:	4926      	ldr	r1, [pc, #152]	; (800d25c <__gethex+0x2d8>)
 800d1c4:	9b03      	ldr	r3, [sp, #12]
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	d1df      	bne.n	800d18a <__gethex+0x206>
 800d1ca:	e795      	b.n	800d0f8 <__gethex+0x174>
 800d1cc:	f04f 0b03 	mov.w	fp, #3
 800d1d0:	e7c5      	b.n	800d15e <__gethex+0x1da>
 800d1d2:	da0b      	bge.n	800d1ec <__gethex+0x268>
 800d1d4:	eba5 0800 	sub.w	r8, r5, r0
 800d1d8:	4621      	mov	r1, r4
 800d1da:	4642      	mov	r2, r8
 800d1dc:	4648      	mov	r0, r9
 800d1de:	f001 f82b 	bl	800e238 <__lshift>
 800d1e2:	eba6 0608 	sub.w	r6, r6, r8
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	f100 0a14 	add.w	sl, r0, #20
 800d1ec:	f04f 0b00 	mov.w	fp, #0
 800d1f0:	e7ba      	b.n	800d168 <__gethex+0x1e4>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	42b3      	cmp	r3, r6
 800d1f6:	dd73      	ble.n	800d2e0 <__gethex+0x35c>
 800d1f8:	1b9e      	subs	r6, r3, r6
 800d1fa:	42b5      	cmp	r5, r6
 800d1fc:	dc34      	bgt.n	800d268 <__gethex+0x2e4>
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2b02      	cmp	r3, #2
 800d202:	d023      	beq.n	800d24c <__gethex+0x2c8>
 800d204:	2b03      	cmp	r3, #3
 800d206:	d025      	beq.n	800d254 <__gethex+0x2d0>
 800d208:	2b01      	cmp	r3, #1
 800d20a:	d115      	bne.n	800d238 <__gethex+0x2b4>
 800d20c:	42b5      	cmp	r5, r6
 800d20e:	d113      	bne.n	800d238 <__gethex+0x2b4>
 800d210:	2d01      	cmp	r5, #1
 800d212:	d10b      	bne.n	800d22c <__gethex+0x2a8>
 800d214:	9a02      	ldr	r2, [sp, #8]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6013      	str	r3, [r2, #0]
 800d21a:	2301      	movs	r3, #1
 800d21c:	6123      	str	r3, [r4, #16]
 800d21e:	f8ca 3000 	str.w	r3, [sl]
 800d222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d224:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d228:	601c      	str	r4, [r3, #0]
 800d22a:	e735      	b.n	800d098 <__gethex+0x114>
 800d22c:	1e69      	subs	r1, r5, #1
 800d22e:	4620      	mov	r0, r4
 800d230:	f001 fa34 	bl	800e69c <__any_on>
 800d234:	2800      	cmp	r0, #0
 800d236:	d1ed      	bne.n	800d214 <__gethex+0x290>
 800d238:	4621      	mov	r1, r4
 800d23a:	4648      	mov	r0, r9
 800d23c:	f000 fde2 	bl	800de04 <_Bfree>
 800d240:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d242:	2300      	movs	r3, #0
 800d244:	6013      	str	r3, [r2, #0]
 800d246:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d24a:	e725      	b.n	800d098 <__gethex+0x114>
 800d24c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1f2      	bne.n	800d238 <__gethex+0x2b4>
 800d252:	e7df      	b.n	800d214 <__gethex+0x290>
 800d254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d256:	2b00      	cmp	r3, #0
 800d258:	d1dc      	bne.n	800d214 <__gethex+0x290>
 800d25a:	e7ed      	b.n	800d238 <__gethex+0x2b4>
 800d25c:	0800ffad 	.word	0x0800ffad
 800d260:	08010185 	.word	0x08010185
 800d264:	08010196 	.word	0x08010196
 800d268:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d26c:	f1bb 0f00 	cmp.w	fp, #0
 800d270:	d133      	bne.n	800d2da <__gethex+0x356>
 800d272:	f1b8 0f00 	cmp.w	r8, #0
 800d276:	d004      	beq.n	800d282 <__gethex+0x2fe>
 800d278:	4641      	mov	r1, r8
 800d27a:	4620      	mov	r0, r4
 800d27c:	f001 fa0e 	bl	800e69c <__any_on>
 800d280:	4683      	mov	fp, r0
 800d282:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d286:	2301      	movs	r3, #1
 800d288:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d28c:	f008 081f 	and.w	r8, r8, #31
 800d290:	fa03 f308 	lsl.w	r3, r3, r8
 800d294:	4213      	tst	r3, r2
 800d296:	4631      	mov	r1, r6
 800d298:	4620      	mov	r0, r4
 800d29a:	bf18      	it	ne
 800d29c:	f04b 0b02 	orrne.w	fp, fp, #2
 800d2a0:	1bad      	subs	r5, r5, r6
 800d2a2:	f7ff fe07 	bl	800ceb4 <rshift>
 800d2a6:	687e      	ldr	r6, [r7, #4]
 800d2a8:	f04f 0802 	mov.w	r8, #2
 800d2ac:	f1bb 0f00 	cmp.w	fp, #0
 800d2b0:	d04a      	beq.n	800d348 <__gethex+0x3c4>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2b02      	cmp	r3, #2
 800d2b6:	d016      	beq.n	800d2e6 <__gethex+0x362>
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d018      	beq.n	800d2ee <__gethex+0x36a>
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d109      	bne.n	800d2d4 <__gethex+0x350>
 800d2c0:	f01b 0f02 	tst.w	fp, #2
 800d2c4:	d006      	beq.n	800d2d4 <__gethex+0x350>
 800d2c6:	f8da 3000 	ldr.w	r3, [sl]
 800d2ca:	ea4b 0b03 	orr.w	fp, fp, r3
 800d2ce:	f01b 0f01 	tst.w	fp, #1
 800d2d2:	d10f      	bne.n	800d2f4 <__gethex+0x370>
 800d2d4:	f048 0810 	orr.w	r8, r8, #16
 800d2d8:	e036      	b.n	800d348 <__gethex+0x3c4>
 800d2da:	f04f 0b01 	mov.w	fp, #1
 800d2de:	e7d0      	b.n	800d282 <__gethex+0x2fe>
 800d2e0:	f04f 0801 	mov.w	r8, #1
 800d2e4:	e7e2      	b.n	800d2ac <__gethex+0x328>
 800d2e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2e8:	f1c3 0301 	rsb	r3, r3, #1
 800d2ec:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d0ef      	beq.n	800d2d4 <__gethex+0x350>
 800d2f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2f8:	f104 0214 	add.w	r2, r4, #20
 800d2fc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d300:	9301      	str	r3, [sp, #4]
 800d302:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d306:	2300      	movs	r3, #0
 800d308:	4694      	mov	ip, r2
 800d30a:	f852 1b04 	ldr.w	r1, [r2], #4
 800d30e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d312:	d01e      	beq.n	800d352 <__gethex+0x3ce>
 800d314:	3101      	adds	r1, #1
 800d316:	f8cc 1000 	str.w	r1, [ip]
 800d31a:	f1b8 0f02 	cmp.w	r8, #2
 800d31e:	f104 0214 	add.w	r2, r4, #20
 800d322:	d13d      	bne.n	800d3a0 <__gethex+0x41c>
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	3b01      	subs	r3, #1
 800d328:	42ab      	cmp	r3, r5
 800d32a:	d10b      	bne.n	800d344 <__gethex+0x3c0>
 800d32c:	1169      	asrs	r1, r5, #5
 800d32e:	2301      	movs	r3, #1
 800d330:	f005 051f 	and.w	r5, r5, #31
 800d334:	fa03 f505 	lsl.w	r5, r3, r5
 800d338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d33c:	421d      	tst	r5, r3
 800d33e:	bf18      	it	ne
 800d340:	f04f 0801 	movne.w	r8, #1
 800d344:	f048 0820 	orr.w	r8, r8, #32
 800d348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d34a:	601c      	str	r4, [r3, #0]
 800d34c:	9b02      	ldr	r3, [sp, #8]
 800d34e:	601e      	str	r6, [r3, #0]
 800d350:	e6a2      	b.n	800d098 <__gethex+0x114>
 800d352:	4290      	cmp	r0, r2
 800d354:	f842 3c04 	str.w	r3, [r2, #-4]
 800d358:	d8d6      	bhi.n	800d308 <__gethex+0x384>
 800d35a:	68a2      	ldr	r2, [r4, #8]
 800d35c:	4593      	cmp	fp, r2
 800d35e:	db17      	blt.n	800d390 <__gethex+0x40c>
 800d360:	6861      	ldr	r1, [r4, #4]
 800d362:	4648      	mov	r0, r9
 800d364:	3101      	adds	r1, #1
 800d366:	f000 fd0d 	bl	800dd84 <_Balloc>
 800d36a:	4682      	mov	sl, r0
 800d36c:	b918      	cbnz	r0, 800d376 <__gethex+0x3f2>
 800d36e:	4b1b      	ldr	r3, [pc, #108]	; (800d3dc <__gethex+0x458>)
 800d370:	4602      	mov	r2, r0
 800d372:	2184      	movs	r1, #132	; 0x84
 800d374:	e6b3      	b.n	800d0de <__gethex+0x15a>
 800d376:	6922      	ldr	r2, [r4, #16]
 800d378:	3202      	adds	r2, #2
 800d37a:	f104 010c 	add.w	r1, r4, #12
 800d37e:	0092      	lsls	r2, r2, #2
 800d380:	300c      	adds	r0, #12
 800d382:	f7fe feb2 	bl	800c0ea <memcpy>
 800d386:	4621      	mov	r1, r4
 800d388:	4648      	mov	r0, r9
 800d38a:	f000 fd3b 	bl	800de04 <_Bfree>
 800d38e:	4654      	mov	r4, sl
 800d390:	6922      	ldr	r2, [r4, #16]
 800d392:	1c51      	adds	r1, r2, #1
 800d394:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d398:	6121      	str	r1, [r4, #16]
 800d39a:	2101      	movs	r1, #1
 800d39c:	6151      	str	r1, [r2, #20]
 800d39e:	e7bc      	b.n	800d31a <__gethex+0x396>
 800d3a0:	6921      	ldr	r1, [r4, #16]
 800d3a2:	4559      	cmp	r1, fp
 800d3a4:	dd0b      	ble.n	800d3be <__gethex+0x43a>
 800d3a6:	2101      	movs	r1, #1
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f7ff fd83 	bl	800ceb4 <rshift>
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	3601      	adds	r6, #1
 800d3b2:	42b3      	cmp	r3, r6
 800d3b4:	f6ff aedb 	blt.w	800d16e <__gethex+0x1ea>
 800d3b8:	f04f 0801 	mov.w	r8, #1
 800d3bc:	e7c2      	b.n	800d344 <__gethex+0x3c0>
 800d3be:	f015 051f 	ands.w	r5, r5, #31
 800d3c2:	d0f9      	beq.n	800d3b8 <__gethex+0x434>
 800d3c4:	9b01      	ldr	r3, [sp, #4]
 800d3c6:	441a      	add	r2, r3
 800d3c8:	f1c5 0520 	rsb	r5, r5, #32
 800d3cc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d3d0:	f000 fdca 	bl	800df68 <__hi0bits>
 800d3d4:	42a8      	cmp	r0, r5
 800d3d6:	dbe6      	blt.n	800d3a6 <__gethex+0x422>
 800d3d8:	e7ee      	b.n	800d3b8 <__gethex+0x434>
 800d3da:	bf00      	nop
 800d3dc:	08010185 	.word	0x08010185

0800d3e0 <L_shift>:
 800d3e0:	f1c2 0208 	rsb	r2, r2, #8
 800d3e4:	0092      	lsls	r2, r2, #2
 800d3e6:	b570      	push	{r4, r5, r6, lr}
 800d3e8:	f1c2 0620 	rsb	r6, r2, #32
 800d3ec:	6843      	ldr	r3, [r0, #4]
 800d3ee:	6804      	ldr	r4, [r0, #0]
 800d3f0:	fa03 f506 	lsl.w	r5, r3, r6
 800d3f4:	432c      	orrs	r4, r5
 800d3f6:	40d3      	lsrs	r3, r2
 800d3f8:	6004      	str	r4, [r0, #0]
 800d3fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3fe:	4288      	cmp	r0, r1
 800d400:	d3f4      	bcc.n	800d3ec <L_shift+0xc>
 800d402:	bd70      	pop	{r4, r5, r6, pc}

0800d404 <__match>:
 800d404:	b530      	push	{r4, r5, lr}
 800d406:	6803      	ldr	r3, [r0, #0]
 800d408:	3301      	adds	r3, #1
 800d40a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d40e:	b914      	cbnz	r4, 800d416 <__match+0x12>
 800d410:	6003      	str	r3, [r0, #0]
 800d412:	2001      	movs	r0, #1
 800d414:	bd30      	pop	{r4, r5, pc}
 800d416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d41e:	2d19      	cmp	r5, #25
 800d420:	bf98      	it	ls
 800d422:	3220      	addls	r2, #32
 800d424:	42a2      	cmp	r2, r4
 800d426:	d0f0      	beq.n	800d40a <__match+0x6>
 800d428:	2000      	movs	r0, #0
 800d42a:	e7f3      	b.n	800d414 <__match+0x10>

0800d42c <__hexnan>:
 800d42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d430:	680b      	ldr	r3, [r1, #0]
 800d432:	6801      	ldr	r1, [r0, #0]
 800d434:	115e      	asrs	r6, r3, #5
 800d436:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d43a:	f013 031f 	ands.w	r3, r3, #31
 800d43e:	b087      	sub	sp, #28
 800d440:	bf18      	it	ne
 800d442:	3604      	addne	r6, #4
 800d444:	2500      	movs	r5, #0
 800d446:	1f37      	subs	r7, r6, #4
 800d448:	4682      	mov	sl, r0
 800d44a:	4690      	mov	r8, r2
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d452:	46b9      	mov	r9, r7
 800d454:	463c      	mov	r4, r7
 800d456:	9502      	str	r5, [sp, #8]
 800d458:	46ab      	mov	fp, r5
 800d45a:	784a      	ldrb	r2, [r1, #1]
 800d45c:	1c4b      	adds	r3, r1, #1
 800d45e:	9303      	str	r3, [sp, #12]
 800d460:	b342      	cbz	r2, 800d4b4 <__hexnan+0x88>
 800d462:	4610      	mov	r0, r2
 800d464:	9105      	str	r1, [sp, #20]
 800d466:	9204      	str	r2, [sp, #16]
 800d468:	f7ff fd76 	bl	800cf58 <__hexdig_fun>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	d14f      	bne.n	800d510 <__hexnan+0xe4>
 800d470:	9a04      	ldr	r2, [sp, #16]
 800d472:	9905      	ldr	r1, [sp, #20]
 800d474:	2a20      	cmp	r2, #32
 800d476:	d818      	bhi.n	800d4aa <__hexnan+0x7e>
 800d478:	9b02      	ldr	r3, [sp, #8]
 800d47a:	459b      	cmp	fp, r3
 800d47c:	dd13      	ble.n	800d4a6 <__hexnan+0x7a>
 800d47e:	454c      	cmp	r4, r9
 800d480:	d206      	bcs.n	800d490 <__hexnan+0x64>
 800d482:	2d07      	cmp	r5, #7
 800d484:	dc04      	bgt.n	800d490 <__hexnan+0x64>
 800d486:	462a      	mov	r2, r5
 800d488:	4649      	mov	r1, r9
 800d48a:	4620      	mov	r0, r4
 800d48c:	f7ff ffa8 	bl	800d3e0 <L_shift>
 800d490:	4544      	cmp	r4, r8
 800d492:	d950      	bls.n	800d536 <__hexnan+0x10a>
 800d494:	2300      	movs	r3, #0
 800d496:	f1a4 0904 	sub.w	r9, r4, #4
 800d49a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d49e:	f8cd b008 	str.w	fp, [sp, #8]
 800d4a2:	464c      	mov	r4, r9
 800d4a4:	461d      	mov	r5, r3
 800d4a6:	9903      	ldr	r1, [sp, #12]
 800d4a8:	e7d7      	b.n	800d45a <__hexnan+0x2e>
 800d4aa:	2a29      	cmp	r2, #41	; 0x29
 800d4ac:	d155      	bne.n	800d55a <__hexnan+0x12e>
 800d4ae:	3102      	adds	r1, #2
 800d4b0:	f8ca 1000 	str.w	r1, [sl]
 800d4b4:	f1bb 0f00 	cmp.w	fp, #0
 800d4b8:	d04f      	beq.n	800d55a <__hexnan+0x12e>
 800d4ba:	454c      	cmp	r4, r9
 800d4bc:	d206      	bcs.n	800d4cc <__hexnan+0xa0>
 800d4be:	2d07      	cmp	r5, #7
 800d4c0:	dc04      	bgt.n	800d4cc <__hexnan+0xa0>
 800d4c2:	462a      	mov	r2, r5
 800d4c4:	4649      	mov	r1, r9
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f7ff ff8a 	bl	800d3e0 <L_shift>
 800d4cc:	4544      	cmp	r4, r8
 800d4ce:	d934      	bls.n	800d53a <__hexnan+0x10e>
 800d4d0:	f1a8 0204 	sub.w	r2, r8, #4
 800d4d4:	4623      	mov	r3, r4
 800d4d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4da:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4de:	429f      	cmp	r7, r3
 800d4e0:	d2f9      	bcs.n	800d4d6 <__hexnan+0xaa>
 800d4e2:	1b3b      	subs	r3, r7, r4
 800d4e4:	f023 0303 	bic.w	r3, r3, #3
 800d4e8:	3304      	adds	r3, #4
 800d4ea:	3e03      	subs	r6, #3
 800d4ec:	3401      	adds	r4, #1
 800d4ee:	42a6      	cmp	r6, r4
 800d4f0:	bf38      	it	cc
 800d4f2:	2304      	movcc	r3, #4
 800d4f4:	4443      	add	r3, r8
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f843 2b04 	str.w	r2, [r3], #4
 800d4fc:	429f      	cmp	r7, r3
 800d4fe:	d2fb      	bcs.n	800d4f8 <__hexnan+0xcc>
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	b91b      	cbnz	r3, 800d50c <__hexnan+0xe0>
 800d504:	4547      	cmp	r7, r8
 800d506:	d126      	bne.n	800d556 <__hexnan+0x12a>
 800d508:	2301      	movs	r3, #1
 800d50a:	603b      	str	r3, [r7, #0]
 800d50c:	2005      	movs	r0, #5
 800d50e:	e025      	b.n	800d55c <__hexnan+0x130>
 800d510:	3501      	adds	r5, #1
 800d512:	2d08      	cmp	r5, #8
 800d514:	f10b 0b01 	add.w	fp, fp, #1
 800d518:	dd06      	ble.n	800d528 <__hexnan+0xfc>
 800d51a:	4544      	cmp	r4, r8
 800d51c:	d9c3      	bls.n	800d4a6 <__hexnan+0x7a>
 800d51e:	2300      	movs	r3, #0
 800d520:	f844 3c04 	str.w	r3, [r4, #-4]
 800d524:	2501      	movs	r5, #1
 800d526:	3c04      	subs	r4, #4
 800d528:	6822      	ldr	r2, [r4, #0]
 800d52a:	f000 000f 	and.w	r0, r0, #15
 800d52e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d532:	6020      	str	r0, [r4, #0]
 800d534:	e7b7      	b.n	800d4a6 <__hexnan+0x7a>
 800d536:	2508      	movs	r5, #8
 800d538:	e7b5      	b.n	800d4a6 <__hexnan+0x7a>
 800d53a:	9b01      	ldr	r3, [sp, #4]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d0df      	beq.n	800d500 <__hexnan+0xd4>
 800d540:	f1c3 0320 	rsb	r3, r3, #32
 800d544:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d548:	40da      	lsrs	r2, r3
 800d54a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d54e:	4013      	ands	r3, r2
 800d550:	f846 3c04 	str.w	r3, [r6, #-4]
 800d554:	e7d4      	b.n	800d500 <__hexnan+0xd4>
 800d556:	3f04      	subs	r7, #4
 800d558:	e7d2      	b.n	800d500 <__hexnan+0xd4>
 800d55a:	2004      	movs	r0, #4
 800d55c:	b007      	add	sp, #28
 800d55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d562 <__ssputs_r>:
 800d562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d566:	688e      	ldr	r6, [r1, #8]
 800d568:	461f      	mov	r7, r3
 800d56a:	42be      	cmp	r6, r7
 800d56c:	680b      	ldr	r3, [r1, #0]
 800d56e:	4682      	mov	sl, r0
 800d570:	460c      	mov	r4, r1
 800d572:	4690      	mov	r8, r2
 800d574:	d82c      	bhi.n	800d5d0 <__ssputs_r+0x6e>
 800d576:	898a      	ldrh	r2, [r1, #12]
 800d578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d57c:	d026      	beq.n	800d5cc <__ssputs_r+0x6a>
 800d57e:	6965      	ldr	r5, [r4, #20]
 800d580:	6909      	ldr	r1, [r1, #16]
 800d582:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d586:	eba3 0901 	sub.w	r9, r3, r1
 800d58a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d58e:	1c7b      	adds	r3, r7, #1
 800d590:	444b      	add	r3, r9
 800d592:	106d      	asrs	r5, r5, #1
 800d594:	429d      	cmp	r5, r3
 800d596:	bf38      	it	cc
 800d598:	461d      	movcc	r5, r3
 800d59a:	0553      	lsls	r3, r2, #21
 800d59c:	d527      	bpl.n	800d5ee <__ssputs_r+0x8c>
 800d59e:	4629      	mov	r1, r5
 800d5a0:	f000 faa4 	bl	800daec <_malloc_r>
 800d5a4:	4606      	mov	r6, r0
 800d5a6:	b360      	cbz	r0, 800d602 <__ssputs_r+0xa0>
 800d5a8:	6921      	ldr	r1, [r4, #16]
 800d5aa:	464a      	mov	r2, r9
 800d5ac:	f7fe fd9d 	bl	800c0ea <memcpy>
 800d5b0:	89a3      	ldrh	r3, [r4, #12]
 800d5b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ba:	81a3      	strh	r3, [r4, #12]
 800d5bc:	6126      	str	r6, [r4, #16]
 800d5be:	6165      	str	r5, [r4, #20]
 800d5c0:	444e      	add	r6, r9
 800d5c2:	eba5 0509 	sub.w	r5, r5, r9
 800d5c6:	6026      	str	r6, [r4, #0]
 800d5c8:	60a5      	str	r5, [r4, #8]
 800d5ca:	463e      	mov	r6, r7
 800d5cc:	42be      	cmp	r6, r7
 800d5ce:	d900      	bls.n	800d5d2 <__ssputs_r+0x70>
 800d5d0:	463e      	mov	r6, r7
 800d5d2:	6820      	ldr	r0, [r4, #0]
 800d5d4:	4632      	mov	r2, r6
 800d5d6:	4641      	mov	r1, r8
 800d5d8:	f001 f9b5 	bl	800e946 <memmove>
 800d5dc:	68a3      	ldr	r3, [r4, #8]
 800d5de:	1b9b      	subs	r3, r3, r6
 800d5e0:	60a3      	str	r3, [r4, #8]
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	4433      	add	r3, r6
 800d5e6:	6023      	str	r3, [r4, #0]
 800d5e8:	2000      	movs	r0, #0
 800d5ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ee:	462a      	mov	r2, r5
 800d5f0:	f001 f875 	bl	800e6de <_realloc_r>
 800d5f4:	4606      	mov	r6, r0
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	d1e0      	bne.n	800d5bc <__ssputs_r+0x5a>
 800d5fa:	6921      	ldr	r1, [r4, #16]
 800d5fc:	4650      	mov	r0, sl
 800d5fe:	f7ff fc0d 	bl	800ce1c <_free_r>
 800d602:	230c      	movs	r3, #12
 800d604:	f8ca 3000 	str.w	r3, [sl]
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d60e:	81a3      	strh	r3, [r4, #12]
 800d610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d614:	e7e9      	b.n	800d5ea <__ssputs_r+0x88>
	...

0800d618 <_svfiprintf_r>:
 800d618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61c:	4698      	mov	r8, r3
 800d61e:	898b      	ldrh	r3, [r1, #12]
 800d620:	061b      	lsls	r3, r3, #24
 800d622:	b09d      	sub	sp, #116	; 0x74
 800d624:	4607      	mov	r7, r0
 800d626:	460d      	mov	r5, r1
 800d628:	4614      	mov	r4, r2
 800d62a:	d50e      	bpl.n	800d64a <_svfiprintf_r+0x32>
 800d62c:	690b      	ldr	r3, [r1, #16]
 800d62e:	b963      	cbnz	r3, 800d64a <_svfiprintf_r+0x32>
 800d630:	2140      	movs	r1, #64	; 0x40
 800d632:	f000 fa5b 	bl	800daec <_malloc_r>
 800d636:	6028      	str	r0, [r5, #0]
 800d638:	6128      	str	r0, [r5, #16]
 800d63a:	b920      	cbnz	r0, 800d646 <_svfiprintf_r+0x2e>
 800d63c:	230c      	movs	r3, #12
 800d63e:	603b      	str	r3, [r7, #0]
 800d640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d644:	e0d0      	b.n	800d7e8 <_svfiprintf_r+0x1d0>
 800d646:	2340      	movs	r3, #64	; 0x40
 800d648:	616b      	str	r3, [r5, #20]
 800d64a:	2300      	movs	r3, #0
 800d64c:	9309      	str	r3, [sp, #36]	; 0x24
 800d64e:	2320      	movs	r3, #32
 800d650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d654:	f8cd 800c 	str.w	r8, [sp, #12]
 800d658:	2330      	movs	r3, #48	; 0x30
 800d65a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d800 <_svfiprintf_r+0x1e8>
 800d65e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d662:	f04f 0901 	mov.w	r9, #1
 800d666:	4623      	mov	r3, r4
 800d668:	469a      	mov	sl, r3
 800d66a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d66e:	b10a      	cbz	r2, 800d674 <_svfiprintf_r+0x5c>
 800d670:	2a25      	cmp	r2, #37	; 0x25
 800d672:	d1f9      	bne.n	800d668 <_svfiprintf_r+0x50>
 800d674:	ebba 0b04 	subs.w	fp, sl, r4
 800d678:	d00b      	beq.n	800d692 <_svfiprintf_r+0x7a>
 800d67a:	465b      	mov	r3, fp
 800d67c:	4622      	mov	r2, r4
 800d67e:	4629      	mov	r1, r5
 800d680:	4638      	mov	r0, r7
 800d682:	f7ff ff6e 	bl	800d562 <__ssputs_r>
 800d686:	3001      	adds	r0, #1
 800d688:	f000 80a9 	beq.w	800d7de <_svfiprintf_r+0x1c6>
 800d68c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d68e:	445a      	add	r2, fp
 800d690:	9209      	str	r2, [sp, #36]	; 0x24
 800d692:	f89a 3000 	ldrb.w	r3, [sl]
 800d696:	2b00      	cmp	r3, #0
 800d698:	f000 80a1 	beq.w	800d7de <_svfiprintf_r+0x1c6>
 800d69c:	2300      	movs	r3, #0
 800d69e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d6a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6a6:	f10a 0a01 	add.w	sl, sl, #1
 800d6aa:	9304      	str	r3, [sp, #16]
 800d6ac:	9307      	str	r3, [sp, #28]
 800d6ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6b2:	931a      	str	r3, [sp, #104]	; 0x68
 800d6b4:	4654      	mov	r4, sl
 800d6b6:	2205      	movs	r2, #5
 800d6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6bc:	4850      	ldr	r0, [pc, #320]	; (800d800 <_svfiprintf_r+0x1e8>)
 800d6be:	f7f2 fd87 	bl	80001d0 <memchr>
 800d6c2:	9a04      	ldr	r2, [sp, #16]
 800d6c4:	b9d8      	cbnz	r0, 800d6fe <_svfiprintf_r+0xe6>
 800d6c6:	06d0      	lsls	r0, r2, #27
 800d6c8:	bf44      	itt	mi
 800d6ca:	2320      	movmi	r3, #32
 800d6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6d0:	0711      	lsls	r1, r2, #28
 800d6d2:	bf44      	itt	mi
 800d6d4:	232b      	movmi	r3, #43	; 0x2b
 800d6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6da:	f89a 3000 	ldrb.w	r3, [sl]
 800d6de:	2b2a      	cmp	r3, #42	; 0x2a
 800d6e0:	d015      	beq.n	800d70e <_svfiprintf_r+0xf6>
 800d6e2:	9a07      	ldr	r2, [sp, #28]
 800d6e4:	4654      	mov	r4, sl
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	f04f 0c0a 	mov.w	ip, #10
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6f2:	3b30      	subs	r3, #48	; 0x30
 800d6f4:	2b09      	cmp	r3, #9
 800d6f6:	d94d      	bls.n	800d794 <_svfiprintf_r+0x17c>
 800d6f8:	b1b0      	cbz	r0, 800d728 <_svfiprintf_r+0x110>
 800d6fa:	9207      	str	r2, [sp, #28]
 800d6fc:	e014      	b.n	800d728 <_svfiprintf_r+0x110>
 800d6fe:	eba0 0308 	sub.w	r3, r0, r8
 800d702:	fa09 f303 	lsl.w	r3, r9, r3
 800d706:	4313      	orrs	r3, r2
 800d708:	9304      	str	r3, [sp, #16]
 800d70a:	46a2      	mov	sl, r4
 800d70c:	e7d2      	b.n	800d6b4 <_svfiprintf_r+0x9c>
 800d70e:	9b03      	ldr	r3, [sp, #12]
 800d710:	1d19      	adds	r1, r3, #4
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	9103      	str	r1, [sp, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	bfbb      	ittet	lt
 800d71a:	425b      	neglt	r3, r3
 800d71c:	f042 0202 	orrlt.w	r2, r2, #2
 800d720:	9307      	strge	r3, [sp, #28]
 800d722:	9307      	strlt	r3, [sp, #28]
 800d724:	bfb8      	it	lt
 800d726:	9204      	strlt	r2, [sp, #16]
 800d728:	7823      	ldrb	r3, [r4, #0]
 800d72a:	2b2e      	cmp	r3, #46	; 0x2e
 800d72c:	d10c      	bne.n	800d748 <_svfiprintf_r+0x130>
 800d72e:	7863      	ldrb	r3, [r4, #1]
 800d730:	2b2a      	cmp	r3, #42	; 0x2a
 800d732:	d134      	bne.n	800d79e <_svfiprintf_r+0x186>
 800d734:	9b03      	ldr	r3, [sp, #12]
 800d736:	1d1a      	adds	r2, r3, #4
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	9203      	str	r2, [sp, #12]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	bfb8      	it	lt
 800d740:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d744:	3402      	adds	r4, #2
 800d746:	9305      	str	r3, [sp, #20]
 800d748:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d810 <_svfiprintf_r+0x1f8>
 800d74c:	7821      	ldrb	r1, [r4, #0]
 800d74e:	2203      	movs	r2, #3
 800d750:	4650      	mov	r0, sl
 800d752:	f7f2 fd3d 	bl	80001d0 <memchr>
 800d756:	b138      	cbz	r0, 800d768 <_svfiprintf_r+0x150>
 800d758:	9b04      	ldr	r3, [sp, #16]
 800d75a:	eba0 000a 	sub.w	r0, r0, sl
 800d75e:	2240      	movs	r2, #64	; 0x40
 800d760:	4082      	lsls	r2, r0
 800d762:	4313      	orrs	r3, r2
 800d764:	3401      	adds	r4, #1
 800d766:	9304      	str	r3, [sp, #16]
 800d768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d76c:	4825      	ldr	r0, [pc, #148]	; (800d804 <_svfiprintf_r+0x1ec>)
 800d76e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d772:	2206      	movs	r2, #6
 800d774:	f7f2 fd2c 	bl	80001d0 <memchr>
 800d778:	2800      	cmp	r0, #0
 800d77a:	d038      	beq.n	800d7ee <_svfiprintf_r+0x1d6>
 800d77c:	4b22      	ldr	r3, [pc, #136]	; (800d808 <_svfiprintf_r+0x1f0>)
 800d77e:	bb1b      	cbnz	r3, 800d7c8 <_svfiprintf_r+0x1b0>
 800d780:	9b03      	ldr	r3, [sp, #12]
 800d782:	3307      	adds	r3, #7
 800d784:	f023 0307 	bic.w	r3, r3, #7
 800d788:	3308      	adds	r3, #8
 800d78a:	9303      	str	r3, [sp, #12]
 800d78c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d78e:	4433      	add	r3, r6
 800d790:	9309      	str	r3, [sp, #36]	; 0x24
 800d792:	e768      	b.n	800d666 <_svfiprintf_r+0x4e>
 800d794:	fb0c 3202 	mla	r2, ip, r2, r3
 800d798:	460c      	mov	r4, r1
 800d79a:	2001      	movs	r0, #1
 800d79c:	e7a6      	b.n	800d6ec <_svfiprintf_r+0xd4>
 800d79e:	2300      	movs	r3, #0
 800d7a0:	3401      	adds	r4, #1
 800d7a2:	9305      	str	r3, [sp, #20]
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	f04f 0c0a 	mov.w	ip, #10
 800d7aa:	4620      	mov	r0, r4
 800d7ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7b0:	3a30      	subs	r2, #48	; 0x30
 800d7b2:	2a09      	cmp	r2, #9
 800d7b4:	d903      	bls.n	800d7be <_svfiprintf_r+0x1a6>
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d0c6      	beq.n	800d748 <_svfiprintf_r+0x130>
 800d7ba:	9105      	str	r1, [sp, #20]
 800d7bc:	e7c4      	b.n	800d748 <_svfiprintf_r+0x130>
 800d7be:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e7f0      	b.n	800d7aa <_svfiprintf_r+0x192>
 800d7c8:	ab03      	add	r3, sp, #12
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	462a      	mov	r2, r5
 800d7ce:	4b0f      	ldr	r3, [pc, #60]	; (800d80c <_svfiprintf_r+0x1f4>)
 800d7d0:	a904      	add	r1, sp, #16
 800d7d2:	4638      	mov	r0, r7
 800d7d4:	f7fc fdec 	bl	800a3b0 <_printf_float>
 800d7d8:	1c42      	adds	r2, r0, #1
 800d7da:	4606      	mov	r6, r0
 800d7dc:	d1d6      	bne.n	800d78c <_svfiprintf_r+0x174>
 800d7de:	89ab      	ldrh	r3, [r5, #12]
 800d7e0:	065b      	lsls	r3, r3, #25
 800d7e2:	f53f af2d 	bmi.w	800d640 <_svfiprintf_r+0x28>
 800d7e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7e8:	b01d      	add	sp, #116	; 0x74
 800d7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ee:	ab03      	add	r3, sp, #12
 800d7f0:	9300      	str	r3, [sp, #0]
 800d7f2:	462a      	mov	r2, r5
 800d7f4:	4b05      	ldr	r3, [pc, #20]	; (800d80c <_svfiprintf_r+0x1f4>)
 800d7f6:	a904      	add	r1, sp, #16
 800d7f8:	4638      	mov	r0, r7
 800d7fa:	f7fd f87d 	bl	800a8f8 <_printf_i>
 800d7fe:	e7eb      	b.n	800d7d8 <_svfiprintf_r+0x1c0>
 800d800:	080101f6 	.word	0x080101f6
 800d804:	08010200 	.word	0x08010200
 800d808:	0800a3b1 	.word	0x0800a3b1
 800d80c:	0800d563 	.word	0x0800d563
 800d810:	080101fc 	.word	0x080101fc

0800d814 <__sfputc_r>:
 800d814:	6893      	ldr	r3, [r2, #8]
 800d816:	3b01      	subs	r3, #1
 800d818:	2b00      	cmp	r3, #0
 800d81a:	b410      	push	{r4}
 800d81c:	6093      	str	r3, [r2, #8]
 800d81e:	da08      	bge.n	800d832 <__sfputc_r+0x1e>
 800d820:	6994      	ldr	r4, [r2, #24]
 800d822:	42a3      	cmp	r3, r4
 800d824:	db01      	blt.n	800d82a <__sfputc_r+0x16>
 800d826:	290a      	cmp	r1, #10
 800d828:	d103      	bne.n	800d832 <__sfputc_r+0x1e>
 800d82a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d82e:	f000 bf85 	b.w	800e73c <__swbuf_r>
 800d832:	6813      	ldr	r3, [r2, #0]
 800d834:	1c58      	adds	r0, r3, #1
 800d836:	6010      	str	r0, [r2, #0]
 800d838:	7019      	strb	r1, [r3, #0]
 800d83a:	4608      	mov	r0, r1
 800d83c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d840:	4770      	bx	lr

0800d842 <__sfputs_r>:
 800d842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d844:	4606      	mov	r6, r0
 800d846:	460f      	mov	r7, r1
 800d848:	4614      	mov	r4, r2
 800d84a:	18d5      	adds	r5, r2, r3
 800d84c:	42ac      	cmp	r4, r5
 800d84e:	d101      	bne.n	800d854 <__sfputs_r+0x12>
 800d850:	2000      	movs	r0, #0
 800d852:	e007      	b.n	800d864 <__sfputs_r+0x22>
 800d854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d858:	463a      	mov	r2, r7
 800d85a:	4630      	mov	r0, r6
 800d85c:	f7ff ffda 	bl	800d814 <__sfputc_r>
 800d860:	1c43      	adds	r3, r0, #1
 800d862:	d1f3      	bne.n	800d84c <__sfputs_r+0xa>
 800d864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d868 <_vfiprintf_r>:
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	460d      	mov	r5, r1
 800d86e:	b09d      	sub	sp, #116	; 0x74
 800d870:	4614      	mov	r4, r2
 800d872:	4698      	mov	r8, r3
 800d874:	4606      	mov	r6, r0
 800d876:	b118      	cbz	r0, 800d880 <_vfiprintf_r+0x18>
 800d878:	6a03      	ldr	r3, [r0, #32]
 800d87a:	b90b      	cbnz	r3, 800d880 <_vfiprintf_r+0x18>
 800d87c:	f7fd fc5e 	bl	800b13c <__sinit>
 800d880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d882:	07d9      	lsls	r1, r3, #31
 800d884:	d405      	bmi.n	800d892 <_vfiprintf_r+0x2a>
 800d886:	89ab      	ldrh	r3, [r5, #12]
 800d888:	059a      	lsls	r2, r3, #22
 800d88a:	d402      	bmi.n	800d892 <_vfiprintf_r+0x2a>
 800d88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d88e:	f7fe fc2a 	bl	800c0e6 <__retarget_lock_acquire_recursive>
 800d892:	89ab      	ldrh	r3, [r5, #12]
 800d894:	071b      	lsls	r3, r3, #28
 800d896:	d501      	bpl.n	800d89c <_vfiprintf_r+0x34>
 800d898:	692b      	ldr	r3, [r5, #16]
 800d89a:	b99b      	cbnz	r3, 800d8c4 <_vfiprintf_r+0x5c>
 800d89c:	4629      	mov	r1, r5
 800d89e:	4630      	mov	r0, r6
 800d8a0:	f000 ff8a 	bl	800e7b8 <__swsetup_r>
 800d8a4:	b170      	cbz	r0, 800d8c4 <_vfiprintf_r+0x5c>
 800d8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8a8:	07dc      	lsls	r4, r3, #31
 800d8aa:	d504      	bpl.n	800d8b6 <_vfiprintf_r+0x4e>
 800d8ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8b0:	b01d      	add	sp, #116	; 0x74
 800d8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b6:	89ab      	ldrh	r3, [r5, #12]
 800d8b8:	0598      	lsls	r0, r3, #22
 800d8ba:	d4f7      	bmi.n	800d8ac <_vfiprintf_r+0x44>
 800d8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8be:	f7fe fc13 	bl	800c0e8 <__retarget_lock_release_recursive>
 800d8c2:	e7f3      	b.n	800d8ac <_vfiprintf_r+0x44>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d8c8:	2320      	movs	r3, #32
 800d8ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8d2:	2330      	movs	r3, #48	; 0x30
 800d8d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800da88 <_vfiprintf_r+0x220>
 800d8d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8dc:	f04f 0901 	mov.w	r9, #1
 800d8e0:	4623      	mov	r3, r4
 800d8e2:	469a      	mov	sl, r3
 800d8e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8e8:	b10a      	cbz	r2, 800d8ee <_vfiprintf_r+0x86>
 800d8ea:	2a25      	cmp	r2, #37	; 0x25
 800d8ec:	d1f9      	bne.n	800d8e2 <_vfiprintf_r+0x7a>
 800d8ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d8f2:	d00b      	beq.n	800d90c <_vfiprintf_r+0xa4>
 800d8f4:	465b      	mov	r3, fp
 800d8f6:	4622      	mov	r2, r4
 800d8f8:	4629      	mov	r1, r5
 800d8fa:	4630      	mov	r0, r6
 800d8fc:	f7ff ffa1 	bl	800d842 <__sfputs_r>
 800d900:	3001      	adds	r0, #1
 800d902:	f000 80a9 	beq.w	800da58 <_vfiprintf_r+0x1f0>
 800d906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d908:	445a      	add	r2, fp
 800d90a:	9209      	str	r2, [sp, #36]	; 0x24
 800d90c:	f89a 3000 	ldrb.w	r3, [sl]
 800d910:	2b00      	cmp	r3, #0
 800d912:	f000 80a1 	beq.w	800da58 <_vfiprintf_r+0x1f0>
 800d916:	2300      	movs	r3, #0
 800d918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d91c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d920:	f10a 0a01 	add.w	sl, sl, #1
 800d924:	9304      	str	r3, [sp, #16]
 800d926:	9307      	str	r3, [sp, #28]
 800d928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d92c:	931a      	str	r3, [sp, #104]	; 0x68
 800d92e:	4654      	mov	r4, sl
 800d930:	2205      	movs	r2, #5
 800d932:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d936:	4854      	ldr	r0, [pc, #336]	; (800da88 <_vfiprintf_r+0x220>)
 800d938:	f7f2 fc4a 	bl	80001d0 <memchr>
 800d93c:	9a04      	ldr	r2, [sp, #16]
 800d93e:	b9d8      	cbnz	r0, 800d978 <_vfiprintf_r+0x110>
 800d940:	06d1      	lsls	r1, r2, #27
 800d942:	bf44      	itt	mi
 800d944:	2320      	movmi	r3, #32
 800d946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d94a:	0713      	lsls	r3, r2, #28
 800d94c:	bf44      	itt	mi
 800d94e:	232b      	movmi	r3, #43	; 0x2b
 800d950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d954:	f89a 3000 	ldrb.w	r3, [sl]
 800d958:	2b2a      	cmp	r3, #42	; 0x2a
 800d95a:	d015      	beq.n	800d988 <_vfiprintf_r+0x120>
 800d95c:	9a07      	ldr	r2, [sp, #28]
 800d95e:	4654      	mov	r4, sl
 800d960:	2000      	movs	r0, #0
 800d962:	f04f 0c0a 	mov.w	ip, #10
 800d966:	4621      	mov	r1, r4
 800d968:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d96c:	3b30      	subs	r3, #48	; 0x30
 800d96e:	2b09      	cmp	r3, #9
 800d970:	d94d      	bls.n	800da0e <_vfiprintf_r+0x1a6>
 800d972:	b1b0      	cbz	r0, 800d9a2 <_vfiprintf_r+0x13a>
 800d974:	9207      	str	r2, [sp, #28]
 800d976:	e014      	b.n	800d9a2 <_vfiprintf_r+0x13a>
 800d978:	eba0 0308 	sub.w	r3, r0, r8
 800d97c:	fa09 f303 	lsl.w	r3, r9, r3
 800d980:	4313      	orrs	r3, r2
 800d982:	9304      	str	r3, [sp, #16]
 800d984:	46a2      	mov	sl, r4
 800d986:	e7d2      	b.n	800d92e <_vfiprintf_r+0xc6>
 800d988:	9b03      	ldr	r3, [sp, #12]
 800d98a:	1d19      	adds	r1, r3, #4
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	9103      	str	r1, [sp, #12]
 800d990:	2b00      	cmp	r3, #0
 800d992:	bfbb      	ittet	lt
 800d994:	425b      	neglt	r3, r3
 800d996:	f042 0202 	orrlt.w	r2, r2, #2
 800d99a:	9307      	strge	r3, [sp, #28]
 800d99c:	9307      	strlt	r3, [sp, #28]
 800d99e:	bfb8      	it	lt
 800d9a0:	9204      	strlt	r2, [sp, #16]
 800d9a2:	7823      	ldrb	r3, [r4, #0]
 800d9a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d9a6:	d10c      	bne.n	800d9c2 <_vfiprintf_r+0x15a>
 800d9a8:	7863      	ldrb	r3, [r4, #1]
 800d9aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d9ac:	d134      	bne.n	800da18 <_vfiprintf_r+0x1b0>
 800d9ae:	9b03      	ldr	r3, [sp, #12]
 800d9b0:	1d1a      	adds	r2, r3, #4
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	9203      	str	r2, [sp, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	bfb8      	it	lt
 800d9ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d9be:	3402      	adds	r4, #2
 800d9c0:	9305      	str	r3, [sp, #20]
 800d9c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800da98 <_vfiprintf_r+0x230>
 800d9c6:	7821      	ldrb	r1, [r4, #0]
 800d9c8:	2203      	movs	r2, #3
 800d9ca:	4650      	mov	r0, sl
 800d9cc:	f7f2 fc00 	bl	80001d0 <memchr>
 800d9d0:	b138      	cbz	r0, 800d9e2 <_vfiprintf_r+0x17a>
 800d9d2:	9b04      	ldr	r3, [sp, #16]
 800d9d4:	eba0 000a 	sub.w	r0, r0, sl
 800d9d8:	2240      	movs	r2, #64	; 0x40
 800d9da:	4082      	lsls	r2, r0
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	3401      	adds	r4, #1
 800d9e0:	9304      	str	r3, [sp, #16]
 800d9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9e6:	4829      	ldr	r0, [pc, #164]	; (800da8c <_vfiprintf_r+0x224>)
 800d9e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9ec:	2206      	movs	r2, #6
 800d9ee:	f7f2 fbef 	bl	80001d0 <memchr>
 800d9f2:	2800      	cmp	r0, #0
 800d9f4:	d03f      	beq.n	800da76 <_vfiprintf_r+0x20e>
 800d9f6:	4b26      	ldr	r3, [pc, #152]	; (800da90 <_vfiprintf_r+0x228>)
 800d9f8:	bb1b      	cbnz	r3, 800da42 <_vfiprintf_r+0x1da>
 800d9fa:	9b03      	ldr	r3, [sp, #12]
 800d9fc:	3307      	adds	r3, #7
 800d9fe:	f023 0307 	bic.w	r3, r3, #7
 800da02:	3308      	adds	r3, #8
 800da04:	9303      	str	r3, [sp, #12]
 800da06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da08:	443b      	add	r3, r7
 800da0a:	9309      	str	r3, [sp, #36]	; 0x24
 800da0c:	e768      	b.n	800d8e0 <_vfiprintf_r+0x78>
 800da0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800da12:	460c      	mov	r4, r1
 800da14:	2001      	movs	r0, #1
 800da16:	e7a6      	b.n	800d966 <_vfiprintf_r+0xfe>
 800da18:	2300      	movs	r3, #0
 800da1a:	3401      	adds	r4, #1
 800da1c:	9305      	str	r3, [sp, #20]
 800da1e:	4619      	mov	r1, r3
 800da20:	f04f 0c0a 	mov.w	ip, #10
 800da24:	4620      	mov	r0, r4
 800da26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da2a:	3a30      	subs	r2, #48	; 0x30
 800da2c:	2a09      	cmp	r2, #9
 800da2e:	d903      	bls.n	800da38 <_vfiprintf_r+0x1d0>
 800da30:	2b00      	cmp	r3, #0
 800da32:	d0c6      	beq.n	800d9c2 <_vfiprintf_r+0x15a>
 800da34:	9105      	str	r1, [sp, #20]
 800da36:	e7c4      	b.n	800d9c2 <_vfiprintf_r+0x15a>
 800da38:	fb0c 2101 	mla	r1, ip, r1, r2
 800da3c:	4604      	mov	r4, r0
 800da3e:	2301      	movs	r3, #1
 800da40:	e7f0      	b.n	800da24 <_vfiprintf_r+0x1bc>
 800da42:	ab03      	add	r3, sp, #12
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	462a      	mov	r2, r5
 800da48:	4b12      	ldr	r3, [pc, #72]	; (800da94 <_vfiprintf_r+0x22c>)
 800da4a:	a904      	add	r1, sp, #16
 800da4c:	4630      	mov	r0, r6
 800da4e:	f7fc fcaf 	bl	800a3b0 <_printf_float>
 800da52:	4607      	mov	r7, r0
 800da54:	1c78      	adds	r0, r7, #1
 800da56:	d1d6      	bne.n	800da06 <_vfiprintf_r+0x19e>
 800da58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da5a:	07d9      	lsls	r1, r3, #31
 800da5c:	d405      	bmi.n	800da6a <_vfiprintf_r+0x202>
 800da5e:	89ab      	ldrh	r3, [r5, #12]
 800da60:	059a      	lsls	r2, r3, #22
 800da62:	d402      	bmi.n	800da6a <_vfiprintf_r+0x202>
 800da64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da66:	f7fe fb3f 	bl	800c0e8 <__retarget_lock_release_recursive>
 800da6a:	89ab      	ldrh	r3, [r5, #12]
 800da6c:	065b      	lsls	r3, r3, #25
 800da6e:	f53f af1d 	bmi.w	800d8ac <_vfiprintf_r+0x44>
 800da72:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da74:	e71c      	b.n	800d8b0 <_vfiprintf_r+0x48>
 800da76:	ab03      	add	r3, sp, #12
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	462a      	mov	r2, r5
 800da7c:	4b05      	ldr	r3, [pc, #20]	; (800da94 <_vfiprintf_r+0x22c>)
 800da7e:	a904      	add	r1, sp, #16
 800da80:	4630      	mov	r0, r6
 800da82:	f7fc ff39 	bl	800a8f8 <_printf_i>
 800da86:	e7e4      	b.n	800da52 <_vfiprintf_r+0x1ea>
 800da88:	080101f6 	.word	0x080101f6
 800da8c:	08010200 	.word	0x08010200
 800da90:	0800a3b1 	.word	0x0800a3b1
 800da94:	0800d843 	.word	0x0800d843
 800da98:	080101fc 	.word	0x080101fc

0800da9c <malloc>:
 800da9c:	4b02      	ldr	r3, [pc, #8]	; (800daa8 <malloc+0xc>)
 800da9e:	4601      	mov	r1, r0
 800daa0:	6818      	ldr	r0, [r3, #0]
 800daa2:	f000 b823 	b.w	800daec <_malloc_r>
 800daa6:	bf00      	nop
 800daa8:	20000208 	.word	0x20000208

0800daac <sbrk_aligned>:
 800daac:	b570      	push	{r4, r5, r6, lr}
 800daae:	4e0e      	ldr	r6, [pc, #56]	; (800dae8 <sbrk_aligned+0x3c>)
 800dab0:	460c      	mov	r4, r1
 800dab2:	6831      	ldr	r1, [r6, #0]
 800dab4:	4605      	mov	r5, r0
 800dab6:	b911      	cbnz	r1, 800dabe <sbrk_aligned+0x12>
 800dab8:	f000 ff82 	bl	800e9c0 <_sbrk_r>
 800dabc:	6030      	str	r0, [r6, #0]
 800dabe:	4621      	mov	r1, r4
 800dac0:	4628      	mov	r0, r5
 800dac2:	f000 ff7d 	bl	800e9c0 <_sbrk_r>
 800dac6:	1c43      	adds	r3, r0, #1
 800dac8:	d00a      	beq.n	800dae0 <sbrk_aligned+0x34>
 800daca:	1cc4      	adds	r4, r0, #3
 800dacc:	f024 0403 	bic.w	r4, r4, #3
 800dad0:	42a0      	cmp	r0, r4
 800dad2:	d007      	beq.n	800dae4 <sbrk_aligned+0x38>
 800dad4:	1a21      	subs	r1, r4, r0
 800dad6:	4628      	mov	r0, r5
 800dad8:	f000 ff72 	bl	800e9c0 <_sbrk_r>
 800dadc:	3001      	adds	r0, #1
 800dade:	d101      	bne.n	800dae4 <sbrk_aligned+0x38>
 800dae0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dae4:	4620      	mov	r0, r4
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
 800dae8:	20000bec 	.word	0x20000bec

0800daec <_malloc_r>:
 800daec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800daf0:	1ccd      	adds	r5, r1, #3
 800daf2:	f025 0503 	bic.w	r5, r5, #3
 800daf6:	3508      	adds	r5, #8
 800daf8:	2d0c      	cmp	r5, #12
 800dafa:	bf38      	it	cc
 800dafc:	250c      	movcc	r5, #12
 800dafe:	2d00      	cmp	r5, #0
 800db00:	4607      	mov	r7, r0
 800db02:	db01      	blt.n	800db08 <_malloc_r+0x1c>
 800db04:	42a9      	cmp	r1, r5
 800db06:	d905      	bls.n	800db14 <_malloc_r+0x28>
 800db08:	230c      	movs	r3, #12
 800db0a:	603b      	str	r3, [r7, #0]
 800db0c:	2600      	movs	r6, #0
 800db0e:	4630      	mov	r0, r6
 800db10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dbe8 <_malloc_r+0xfc>
 800db18:	f000 f928 	bl	800dd6c <__malloc_lock>
 800db1c:	f8d8 3000 	ldr.w	r3, [r8]
 800db20:	461c      	mov	r4, r3
 800db22:	bb5c      	cbnz	r4, 800db7c <_malloc_r+0x90>
 800db24:	4629      	mov	r1, r5
 800db26:	4638      	mov	r0, r7
 800db28:	f7ff ffc0 	bl	800daac <sbrk_aligned>
 800db2c:	1c43      	adds	r3, r0, #1
 800db2e:	4604      	mov	r4, r0
 800db30:	d155      	bne.n	800dbde <_malloc_r+0xf2>
 800db32:	f8d8 4000 	ldr.w	r4, [r8]
 800db36:	4626      	mov	r6, r4
 800db38:	2e00      	cmp	r6, #0
 800db3a:	d145      	bne.n	800dbc8 <_malloc_r+0xdc>
 800db3c:	2c00      	cmp	r4, #0
 800db3e:	d048      	beq.n	800dbd2 <_malloc_r+0xe6>
 800db40:	6823      	ldr	r3, [r4, #0]
 800db42:	4631      	mov	r1, r6
 800db44:	4638      	mov	r0, r7
 800db46:	eb04 0903 	add.w	r9, r4, r3
 800db4a:	f000 ff39 	bl	800e9c0 <_sbrk_r>
 800db4e:	4581      	cmp	r9, r0
 800db50:	d13f      	bne.n	800dbd2 <_malloc_r+0xe6>
 800db52:	6821      	ldr	r1, [r4, #0]
 800db54:	1a6d      	subs	r5, r5, r1
 800db56:	4629      	mov	r1, r5
 800db58:	4638      	mov	r0, r7
 800db5a:	f7ff ffa7 	bl	800daac <sbrk_aligned>
 800db5e:	3001      	adds	r0, #1
 800db60:	d037      	beq.n	800dbd2 <_malloc_r+0xe6>
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	442b      	add	r3, r5
 800db66:	6023      	str	r3, [r4, #0]
 800db68:	f8d8 3000 	ldr.w	r3, [r8]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d038      	beq.n	800dbe2 <_malloc_r+0xf6>
 800db70:	685a      	ldr	r2, [r3, #4]
 800db72:	42a2      	cmp	r2, r4
 800db74:	d12b      	bne.n	800dbce <_malloc_r+0xe2>
 800db76:	2200      	movs	r2, #0
 800db78:	605a      	str	r2, [r3, #4]
 800db7a:	e00f      	b.n	800db9c <_malloc_r+0xb0>
 800db7c:	6822      	ldr	r2, [r4, #0]
 800db7e:	1b52      	subs	r2, r2, r5
 800db80:	d41f      	bmi.n	800dbc2 <_malloc_r+0xd6>
 800db82:	2a0b      	cmp	r2, #11
 800db84:	d917      	bls.n	800dbb6 <_malloc_r+0xca>
 800db86:	1961      	adds	r1, r4, r5
 800db88:	42a3      	cmp	r3, r4
 800db8a:	6025      	str	r5, [r4, #0]
 800db8c:	bf18      	it	ne
 800db8e:	6059      	strne	r1, [r3, #4]
 800db90:	6863      	ldr	r3, [r4, #4]
 800db92:	bf08      	it	eq
 800db94:	f8c8 1000 	streq.w	r1, [r8]
 800db98:	5162      	str	r2, [r4, r5]
 800db9a:	604b      	str	r3, [r1, #4]
 800db9c:	4638      	mov	r0, r7
 800db9e:	f104 060b 	add.w	r6, r4, #11
 800dba2:	f000 f8e9 	bl	800dd78 <__malloc_unlock>
 800dba6:	f026 0607 	bic.w	r6, r6, #7
 800dbaa:	1d23      	adds	r3, r4, #4
 800dbac:	1af2      	subs	r2, r6, r3
 800dbae:	d0ae      	beq.n	800db0e <_malloc_r+0x22>
 800dbb0:	1b9b      	subs	r3, r3, r6
 800dbb2:	50a3      	str	r3, [r4, r2]
 800dbb4:	e7ab      	b.n	800db0e <_malloc_r+0x22>
 800dbb6:	42a3      	cmp	r3, r4
 800dbb8:	6862      	ldr	r2, [r4, #4]
 800dbba:	d1dd      	bne.n	800db78 <_malloc_r+0x8c>
 800dbbc:	f8c8 2000 	str.w	r2, [r8]
 800dbc0:	e7ec      	b.n	800db9c <_malloc_r+0xb0>
 800dbc2:	4623      	mov	r3, r4
 800dbc4:	6864      	ldr	r4, [r4, #4]
 800dbc6:	e7ac      	b.n	800db22 <_malloc_r+0x36>
 800dbc8:	4634      	mov	r4, r6
 800dbca:	6876      	ldr	r6, [r6, #4]
 800dbcc:	e7b4      	b.n	800db38 <_malloc_r+0x4c>
 800dbce:	4613      	mov	r3, r2
 800dbd0:	e7cc      	b.n	800db6c <_malloc_r+0x80>
 800dbd2:	230c      	movs	r3, #12
 800dbd4:	603b      	str	r3, [r7, #0]
 800dbd6:	4638      	mov	r0, r7
 800dbd8:	f000 f8ce 	bl	800dd78 <__malloc_unlock>
 800dbdc:	e797      	b.n	800db0e <_malloc_r+0x22>
 800dbde:	6025      	str	r5, [r4, #0]
 800dbe0:	e7dc      	b.n	800db9c <_malloc_r+0xb0>
 800dbe2:	605b      	str	r3, [r3, #4]
 800dbe4:	deff      	udf	#255	; 0xff
 800dbe6:	bf00      	nop
 800dbe8:	20000be8 	.word	0x20000be8

0800dbec <__ascii_mbtowc>:
 800dbec:	b082      	sub	sp, #8
 800dbee:	b901      	cbnz	r1, 800dbf2 <__ascii_mbtowc+0x6>
 800dbf0:	a901      	add	r1, sp, #4
 800dbf2:	b142      	cbz	r2, 800dc06 <__ascii_mbtowc+0x1a>
 800dbf4:	b14b      	cbz	r3, 800dc0a <__ascii_mbtowc+0x1e>
 800dbf6:	7813      	ldrb	r3, [r2, #0]
 800dbf8:	600b      	str	r3, [r1, #0]
 800dbfa:	7812      	ldrb	r2, [r2, #0]
 800dbfc:	1e10      	subs	r0, r2, #0
 800dbfe:	bf18      	it	ne
 800dc00:	2001      	movne	r0, #1
 800dc02:	b002      	add	sp, #8
 800dc04:	4770      	bx	lr
 800dc06:	4610      	mov	r0, r2
 800dc08:	e7fb      	b.n	800dc02 <__ascii_mbtowc+0x16>
 800dc0a:	f06f 0001 	mvn.w	r0, #1
 800dc0e:	e7f8      	b.n	800dc02 <__ascii_mbtowc+0x16>

0800dc10 <__sflush_r>:
 800dc10:	898a      	ldrh	r2, [r1, #12]
 800dc12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc16:	4605      	mov	r5, r0
 800dc18:	0710      	lsls	r0, r2, #28
 800dc1a:	460c      	mov	r4, r1
 800dc1c:	d458      	bmi.n	800dcd0 <__sflush_r+0xc0>
 800dc1e:	684b      	ldr	r3, [r1, #4]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dc05      	bgt.n	800dc30 <__sflush_r+0x20>
 800dc24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	dc02      	bgt.n	800dc30 <__sflush_r+0x20>
 800dc2a:	2000      	movs	r0, #0
 800dc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc32:	2e00      	cmp	r6, #0
 800dc34:	d0f9      	beq.n	800dc2a <__sflush_r+0x1a>
 800dc36:	2300      	movs	r3, #0
 800dc38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc3c:	682f      	ldr	r7, [r5, #0]
 800dc3e:	6a21      	ldr	r1, [r4, #32]
 800dc40:	602b      	str	r3, [r5, #0]
 800dc42:	d032      	beq.n	800dcaa <__sflush_r+0x9a>
 800dc44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc46:	89a3      	ldrh	r3, [r4, #12]
 800dc48:	075a      	lsls	r2, r3, #29
 800dc4a:	d505      	bpl.n	800dc58 <__sflush_r+0x48>
 800dc4c:	6863      	ldr	r3, [r4, #4]
 800dc4e:	1ac0      	subs	r0, r0, r3
 800dc50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc52:	b10b      	cbz	r3, 800dc58 <__sflush_r+0x48>
 800dc54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc56:	1ac0      	subs	r0, r0, r3
 800dc58:	2300      	movs	r3, #0
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc5e:	6a21      	ldr	r1, [r4, #32]
 800dc60:	4628      	mov	r0, r5
 800dc62:	47b0      	blx	r6
 800dc64:	1c43      	adds	r3, r0, #1
 800dc66:	89a3      	ldrh	r3, [r4, #12]
 800dc68:	d106      	bne.n	800dc78 <__sflush_r+0x68>
 800dc6a:	6829      	ldr	r1, [r5, #0]
 800dc6c:	291d      	cmp	r1, #29
 800dc6e:	d82b      	bhi.n	800dcc8 <__sflush_r+0xb8>
 800dc70:	4a29      	ldr	r2, [pc, #164]	; (800dd18 <__sflush_r+0x108>)
 800dc72:	410a      	asrs	r2, r1
 800dc74:	07d6      	lsls	r6, r2, #31
 800dc76:	d427      	bmi.n	800dcc8 <__sflush_r+0xb8>
 800dc78:	2200      	movs	r2, #0
 800dc7a:	6062      	str	r2, [r4, #4]
 800dc7c:	04d9      	lsls	r1, r3, #19
 800dc7e:	6922      	ldr	r2, [r4, #16]
 800dc80:	6022      	str	r2, [r4, #0]
 800dc82:	d504      	bpl.n	800dc8e <__sflush_r+0x7e>
 800dc84:	1c42      	adds	r2, r0, #1
 800dc86:	d101      	bne.n	800dc8c <__sflush_r+0x7c>
 800dc88:	682b      	ldr	r3, [r5, #0]
 800dc8a:	b903      	cbnz	r3, 800dc8e <__sflush_r+0x7e>
 800dc8c:	6560      	str	r0, [r4, #84]	; 0x54
 800dc8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc90:	602f      	str	r7, [r5, #0]
 800dc92:	2900      	cmp	r1, #0
 800dc94:	d0c9      	beq.n	800dc2a <__sflush_r+0x1a>
 800dc96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc9a:	4299      	cmp	r1, r3
 800dc9c:	d002      	beq.n	800dca4 <__sflush_r+0x94>
 800dc9e:	4628      	mov	r0, r5
 800dca0:	f7ff f8bc 	bl	800ce1c <_free_r>
 800dca4:	2000      	movs	r0, #0
 800dca6:	6360      	str	r0, [r4, #52]	; 0x34
 800dca8:	e7c0      	b.n	800dc2c <__sflush_r+0x1c>
 800dcaa:	2301      	movs	r3, #1
 800dcac:	4628      	mov	r0, r5
 800dcae:	47b0      	blx	r6
 800dcb0:	1c41      	adds	r1, r0, #1
 800dcb2:	d1c8      	bne.n	800dc46 <__sflush_r+0x36>
 800dcb4:	682b      	ldr	r3, [r5, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d0c5      	beq.n	800dc46 <__sflush_r+0x36>
 800dcba:	2b1d      	cmp	r3, #29
 800dcbc:	d001      	beq.n	800dcc2 <__sflush_r+0xb2>
 800dcbe:	2b16      	cmp	r3, #22
 800dcc0:	d101      	bne.n	800dcc6 <__sflush_r+0xb6>
 800dcc2:	602f      	str	r7, [r5, #0]
 800dcc4:	e7b1      	b.n	800dc2a <__sflush_r+0x1a>
 800dcc6:	89a3      	ldrh	r3, [r4, #12]
 800dcc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dccc:	81a3      	strh	r3, [r4, #12]
 800dcce:	e7ad      	b.n	800dc2c <__sflush_r+0x1c>
 800dcd0:	690f      	ldr	r7, [r1, #16]
 800dcd2:	2f00      	cmp	r7, #0
 800dcd4:	d0a9      	beq.n	800dc2a <__sflush_r+0x1a>
 800dcd6:	0793      	lsls	r3, r2, #30
 800dcd8:	680e      	ldr	r6, [r1, #0]
 800dcda:	bf08      	it	eq
 800dcdc:	694b      	ldreq	r3, [r1, #20]
 800dcde:	600f      	str	r7, [r1, #0]
 800dce0:	bf18      	it	ne
 800dce2:	2300      	movne	r3, #0
 800dce4:	eba6 0807 	sub.w	r8, r6, r7
 800dce8:	608b      	str	r3, [r1, #8]
 800dcea:	f1b8 0f00 	cmp.w	r8, #0
 800dcee:	dd9c      	ble.n	800dc2a <__sflush_r+0x1a>
 800dcf0:	6a21      	ldr	r1, [r4, #32]
 800dcf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcf4:	4643      	mov	r3, r8
 800dcf6:	463a      	mov	r2, r7
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	47b0      	blx	r6
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	dc06      	bgt.n	800dd0e <__sflush_r+0xfe>
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd06:	81a3      	strh	r3, [r4, #12]
 800dd08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd0c:	e78e      	b.n	800dc2c <__sflush_r+0x1c>
 800dd0e:	4407      	add	r7, r0
 800dd10:	eba8 0800 	sub.w	r8, r8, r0
 800dd14:	e7e9      	b.n	800dcea <__sflush_r+0xda>
 800dd16:	bf00      	nop
 800dd18:	dfbffffe 	.word	0xdfbffffe

0800dd1c <_fflush_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	690b      	ldr	r3, [r1, #16]
 800dd20:	4605      	mov	r5, r0
 800dd22:	460c      	mov	r4, r1
 800dd24:	b913      	cbnz	r3, 800dd2c <_fflush_r+0x10>
 800dd26:	2500      	movs	r5, #0
 800dd28:	4628      	mov	r0, r5
 800dd2a:	bd38      	pop	{r3, r4, r5, pc}
 800dd2c:	b118      	cbz	r0, 800dd36 <_fflush_r+0x1a>
 800dd2e:	6a03      	ldr	r3, [r0, #32]
 800dd30:	b90b      	cbnz	r3, 800dd36 <_fflush_r+0x1a>
 800dd32:	f7fd fa03 	bl	800b13c <__sinit>
 800dd36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d0f3      	beq.n	800dd26 <_fflush_r+0xa>
 800dd3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd40:	07d0      	lsls	r0, r2, #31
 800dd42:	d404      	bmi.n	800dd4e <_fflush_r+0x32>
 800dd44:	0599      	lsls	r1, r3, #22
 800dd46:	d402      	bmi.n	800dd4e <_fflush_r+0x32>
 800dd48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd4a:	f7fe f9cc 	bl	800c0e6 <__retarget_lock_acquire_recursive>
 800dd4e:	4628      	mov	r0, r5
 800dd50:	4621      	mov	r1, r4
 800dd52:	f7ff ff5d 	bl	800dc10 <__sflush_r>
 800dd56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd58:	07da      	lsls	r2, r3, #31
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	d4e4      	bmi.n	800dd28 <_fflush_r+0xc>
 800dd5e:	89a3      	ldrh	r3, [r4, #12]
 800dd60:	059b      	lsls	r3, r3, #22
 800dd62:	d4e1      	bmi.n	800dd28 <_fflush_r+0xc>
 800dd64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd66:	f7fe f9bf 	bl	800c0e8 <__retarget_lock_release_recursive>
 800dd6a:	e7dd      	b.n	800dd28 <_fflush_r+0xc>

0800dd6c <__malloc_lock>:
 800dd6c:	4801      	ldr	r0, [pc, #4]	; (800dd74 <__malloc_lock+0x8>)
 800dd6e:	f7fe b9ba 	b.w	800c0e6 <__retarget_lock_acquire_recursive>
 800dd72:	bf00      	nop
 800dd74:	20000be4 	.word	0x20000be4

0800dd78 <__malloc_unlock>:
 800dd78:	4801      	ldr	r0, [pc, #4]	; (800dd80 <__malloc_unlock+0x8>)
 800dd7a:	f7fe b9b5 	b.w	800c0e8 <__retarget_lock_release_recursive>
 800dd7e:	bf00      	nop
 800dd80:	20000be4 	.word	0x20000be4

0800dd84 <_Balloc>:
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	69c6      	ldr	r6, [r0, #28]
 800dd88:	4604      	mov	r4, r0
 800dd8a:	460d      	mov	r5, r1
 800dd8c:	b976      	cbnz	r6, 800ddac <_Balloc+0x28>
 800dd8e:	2010      	movs	r0, #16
 800dd90:	f7ff fe84 	bl	800da9c <malloc>
 800dd94:	4602      	mov	r2, r0
 800dd96:	61e0      	str	r0, [r4, #28]
 800dd98:	b920      	cbnz	r0, 800dda4 <_Balloc+0x20>
 800dd9a:	4b18      	ldr	r3, [pc, #96]	; (800ddfc <_Balloc+0x78>)
 800dd9c:	4818      	ldr	r0, [pc, #96]	; (800de00 <_Balloc+0x7c>)
 800dd9e:	216b      	movs	r1, #107	; 0x6b
 800dda0:	f000 fe1e 	bl	800e9e0 <__assert_func>
 800dda4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dda8:	6006      	str	r6, [r0, #0]
 800ddaa:	60c6      	str	r6, [r0, #12]
 800ddac:	69e6      	ldr	r6, [r4, #28]
 800ddae:	68f3      	ldr	r3, [r6, #12]
 800ddb0:	b183      	cbz	r3, 800ddd4 <_Balloc+0x50>
 800ddb2:	69e3      	ldr	r3, [r4, #28]
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ddba:	b9b8      	cbnz	r0, 800ddec <_Balloc+0x68>
 800ddbc:	2101      	movs	r1, #1
 800ddbe:	fa01 f605 	lsl.w	r6, r1, r5
 800ddc2:	1d72      	adds	r2, r6, #5
 800ddc4:	0092      	lsls	r2, r2, #2
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f000 fe28 	bl	800ea1c <_calloc_r>
 800ddcc:	b160      	cbz	r0, 800dde8 <_Balloc+0x64>
 800ddce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ddd2:	e00e      	b.n	800ddf2 <_Balloc+0x6e>
 800ddd4:	2221      	movs	r2, #33	; 0x21
 800ddd6:	2104      	movs	r1, #4
 800ddd8:	4620      	mov	r0, r4
 800ddda:	f000 fe1f 	bl	800ea1c <_calloc_r>
 800ddde:	69e3      	ldr	r3, [r4, #28]
 800dde0:	60f0      	str	r0, [r6, #12]
 800dde2:	68db      	ldr	r3, [r3, #12]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d1e4      	bne.n	800ddb2 <_Balloc+0x2e>
 800dde8:	2000      	movs	r0, #0
 800ddea:	bd70      	pop	{r4, r5, r6, pc}
 800ddec:	6802      	ldr	r2, [r0, #0]
 800ddee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ddf8:	e7f7      	b.n	800ddea <_Balloc+0x66>
 800ddfa:	bf00      	nop
 800ddfc:	08010116 	.word	0x08010116
 800de00:	08010207 	.word	0x08010207

0800de04 <_Bfree>:
 800de04:	b570      	push	{r4, r5, r6, lr}
 800de06:	69c6      	ldr	r6, [r0, #28]
 800de08:	4605      	mov	r5, r0
 800de0a:	460c      	mov	r4, r1
 800de0c:	b976      	cbnz	r6, 800de2c <_Bfree+0x28>
 800de0e:	2010      	movs	r0, #16
 800de10:	f7ff fe44 	bl	800da9c <malloc>
 800de14:	4602      	mov	r2, r0
 800de16:	61e8      	str	r0, [r5, #28]
 800de18:	b920      	cbnz	r0, 800de24 <_Bfree+0x20>
 800de1a:	4b09      	ldr	r3, [pc, #36]	; (800de40 <_Bfree+0x3c>)
 800de1c:	4809      	ldr	r0, [pc, #36]	; (800de44 <_Bfree+0x40>)
 800de1e:	218f      	movs	r1, #143	; 0x8f
 800de20:	f000 fdde 	bl	800e9e0 <__assert_func>
 800de24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de28:	6006      	str	r6, [r0, #0]
 800de2a:	60c6      	str	r6, [r0, #12]
 800de2c:	b13c      	cbz	r4, 800de3e <_Bfree+0x3a>
 800de2e:	69eb      	ldr	r3, [r5, #28]
 800de30:	6862      	ldr	r2, [r4, #4]
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800de38:	6021      	str	r1, [r4, #0]
 800de3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800de3e:	bd70      	pop	{r4, r5, r6, pc}
 800de40:	08010116 	.word	0x08010116
 800de44:	08010207 	.word	0x08010207

0800de48 <__multadd>:
 800de48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de4c:	690d      	ldr	r5, [r1, #16]
 800de4e:	4607      	mov	r7, r0
 800de50:	460c      	mov	r4, r1
 800de52:	461e      	mov	r6, r3
 800de54:	f101 0c14 	add.w	ip, r1, #20
 800de58:	2000      	movs	r0, #0
 800de5a:	f8dc 3000 	ldr.w	r3, [ip]
 800de5e:	b299      	uxth	r1, r3
 800de60:	fb02 6101 	mla	r1, r2, r1, r6
 800de64:	0c1e      	lsrs	r6, r3, #16
 800de66:	0c0b      	lsrs	r3, r1, #16
 800de68:	fb02 3306 	mla	r3, r2, r6, r3
 800de6c:	b289      	uxth	r1, r1
 800de6e:	3001      	adds	r0, #1
 800de70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800de74:	4285      	cmp	r5, r0
 800de76:	f84c 1b04 	str.w	r1, [ip], #4
 800de7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800de7e:	dcec      	bgt.n	800de5a <__multadd+0x12>
 800de80:	b30e      	cbz	r6, 800dec6 <__multadd+0x7e>
 800de82:	68a3      	ldr	r3, [r4, #8]
 800de84:	42ab      	cmp	r3, r5
 800de86:	dc19      	bgt.n	800debc <__multadd+0x74>
 800de88:	6861      	ldr	r1, [r4, #4]
 800de8a:	4638      	mov	r0, r7
 800de8c:	3101      	adds	r1, #1
 800de8e:	f7ff ff79 	bl	800dd84 <_Balloc>
 800de92:	4680      	mov	r8, r0
 800de94:	b928      	cbnz	r0, 800dea2 <__multadd+0x5a>
 800de96:	4602      	mov	r2, r0
 800de98:	4b0c      	ldr	r3, [pc, #48]	; (800decc <__multadd+0x84>)
 800de9a:	480d      	ldr	r0, [pc, #52]	; (800ded0 <__multadd+0x88>)
 800de9c:	21ba      	movs	r1, #186	; 0xba
 800de9e:	f000 fd9f 	bl	800e9e0 <__assert_func>
 800dea2:	6922      	ldr	r2, [r4, #16]
 800dea4:	3202      	adds	r2, #2
 800dea6:	f104 010c 	add.w	r1, r4, #12
 800deaa:	0092      	lsls	r2, r2, #2
 800deac:	300c      	adds	r0, #12
 800deae:	f7fe f91c 	bl	800c0ea <memcpy>
 800deb2:	4621      	mov	r1, r4
 800deb4:	4638      	mov	r0, r7
 800deb6:	f7ff ffa5 	bl	800de04 <_Bfree>
 800deba:	4644      	mov	r4, r8
 800debc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dec0:	3501      	adds	r5, #1
 800dec2:	615e      	str	r6, [r3, #20]
 800dec4:	6125      	str	r5, [r4, #16]
 800dec6:	4620      	mov	r0, r4
 800dec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800decc:	08010185 	.word	0x08010185
 800ded0:	08010207 	.word	0x08010207

0800ded4 <__s2b>:
 800ded4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ded8:	460c      	mov	r4, r1
 800deda:	4615      	mov	r5, r2
 800dedc:	461f      	mov	r7, r3
 800dede:	2209      	movs	r2, #9
 800dee0:	3308      	adds	r3, #8
 800dee2:	4606      	mov	r6, r0
 800dee4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dee8:	2100      	movs	r1, #0
 800deea:	2201      	movs	r2, #1
 800deec:	429a      	cmp	r2, r3
 800deee:	db09      	blt.n	800df04 <__s2b+0x30>
 800def0:	4630      	mov	r0, r6
 800def2:	f7ff ff47 	bl	800dd84 <_Balloc>
 800def6:	b940      	cbnz	r0, 800df0a <__s2b+0x36>
 800def8:	4602      	mov	r2, r0
 800defa:	4b19      	ldr	r3, [pc, #100]	; (800df60 <__s2b+0x8c>)
 800defc:	4819      	ldr	r0, [pc, #100]	; (800df64 <__s2b+0x90>)
 800defe:	21d3      	movs	r1, #211	; 0xd3
 800df00:	f000 fd6e 	bl	800e9e0 <__assert_func>
 800df04:	0052      	lsls	r2, r2, #1
 800df06:	3101      	adds	r1, #1
 800df08:	e7f0      	b.n	800deec <__s2b+0x18>
 800df0a:	9b08      	ldr	r3, [sp, #32]
 800df0c:	6143      	str	r3, [r0, #20]
 800df0e:	2d09      	cmp	r5, #9
 800df10:	f04f 0301 	mov.w	r3, #1
 800df14:	6103      	str	r3, [r0, #16]
 800df16:	dd16      	ble.n	800df46 <__s2b+0x72>
 800df18:	f104 0909 	add.w	r9, r4, #9
 800df1c:	46c8      	mov	r8, r9
 800df1e:	442c      	add	r4, r5
 800df20:	f818 3b01 	ldrb.w	r3, [r8], #1
 800df24:	4601      	mov	r1, r0
 800df26:	3b30      	subs	r3, #48	; 0x30
 800df28:	220a      	movs	r2, #10
 800df2a:	4630      	mov	r0, r6
 800df2c:	f7ff ff8c 	bl	800de48 <__multadd>
 800df30:	45a0      	cmp	r8, r4
 800df32:	d1f5      	bne.n	800df20 <__s2b+0x4c>
 800df34:	f1a5 0408 	sub.w	r4, r5, #8
 800df38:	444c      	add	r4, r9
 800df3a:	1b2d      	subs	r5, r5, r4
 800df3c:	1963      	adds	r3, r4, r5
 800df3e:	42bb      	cmp	r3, r7
 800df40:	db04      	blt.n	800df4c <__s2b+0x78>
 800df42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df46:	340a      	adds	r4, #10
 800df48:	2509      	movs	r5, #9
 800df4a:	e7f6      	b.n	800df3a <__s2b+0x66>
 800df4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800df50:	4601      	mov	r1, r0
 800df52:	3b30      	subs	r3, #48	; 0x30
 800df54:	220a      	movs	r2, #10
 800df56:	4630      	mov	r0, r6
 800df58:	f7ff ff76 	bl	800de48 <__multadd>
 800df5c:	e7ee      	b.n	800df3c <__s2b+0x68>
 800df5e:	bf00      	nop
 800df60:	08010185 	.word	0x08010185
 800df64:	08010207 	.word	0x08010207

0800df68 <__hi0bits>:
 800df68:	0c03      	lsrs	r3, r0, #16
 800df6a:	041b      	lsls	r3, r3, #16
 800df6c:	b9d3      	cbnz	r3, 800dfa4 <__hi0bits+0x3c>
 800df6e:	0400      	lsls	r0, r0, #16
 800df70:	2310      	movs	r3, #16
 800df72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800df76:	bf04      	itt	eq
 800df78:	0200      	lsleq	r0, r0, #8
 800df7a:	3308      	addeq	r3, #8
 800df7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800df80:	bf04      	itt	eq
 800df82:	0100      	lsleq	r0, r0, #4
 800df84:	3304      	addeq	r3, #4
 800df86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800df8a:	bf04      	itt	eq
 800df8c:	0080      	lsleq	r0, r0, #2
 800df8e:	3302      	addeq	r3, #2
 800df90:	2800      	cmp	r0, #0
 800df92:	db05      	blt.n	800dfa0 <__hi0bits+0x38>
 800df94:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800df98:	f103 0301 	add.w	r3, r3, #1
 800df9c:	bf08      	it	eq
 800df9e:	2320      	moveq	r3, #32
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	4770      	bx	lr
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	e7e4      	b.n	800df72 <__hi0bits+0xa>

0800dfa8 <__lo0bits>:
 800dfa8:	6803      	ldr	r3, [r0, #0]
 800dfaa:	f013 0207 	ands.w	r2, r3, #7
 800dfae:	d00c      	beq.n	800dfca <__lo0bits+0x22>
 800dfb0:	07d9      	lsls	r1, r3, #31
 800dfb2:	d422      	bmi.n	800dffa <__lo0bits+0x52>
 800dfb4:	079a      	lsls	r2, r3, #30
 800dfb6:	bf49      	itett	mi
 800dfb8:	085b      	lsrmi	r3, r3, #1
 800dfba:	089b      	lsrpl	r3, r3, #2
 800dfbc:	6003      	strmi	r3, [r0, #0]
 800dfbe:	2201      	movmi	r2, #1
 800dfc0:	bf5c      	itt	pl
 800dfc2:	6003      	strpl	r3, [r0, #0]
 800dfc4:	2202      	movpl	r2, #2
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	4770      	bx	lr
 800dfca:	b299      	uxth	r1, r3
 800dfcc:	b909      	cbnz	r1, 800dfd2 <__lo0bits+0x2a>
 800dfce:	0c1b      	lsrs	r3, r3, #16
 800dfd0:	2210      	movs	r2, #16
 800dfd2:	b2d9      	uxtb	r1, r3
 800dfd4:	b909      	cbnz	r1, 800dfda <__lo0bits+0x32>
 800dfd6:	3208      	adds	r2, #8
 800dfd8:	0a1b      	lsrs	r3, r3, #8
 800dfda:	0719      	lsls	r1, r3, #28
 800dfdc:	bf04      	itt	eq
 800dfde:	091b      	lsreq	r3, r3, #4
 800dfe0:	3204      	addeq	r2, #4
 800dfe2:	0799      	lsls	r1, r3, #30
 800dfe4:	bf04      	itt	eq
 800dfe6:	089b      	lsreq	r3, r3, #2
 800dfe8:	3202      	addeq	r2, #2
 800dfea:	07d9      	lsls	r1, r3, #31
 800dfec:	d403      	bmi.n	800dff6 <__lo0bits+0x4e>
 800dfee:	085b      	lsrs	r3, r3, #1
 800dff0:	f102 0201 	add.w	r2, r2, #1
 800dff4:	d003      	beq.n	800dffe <__lo0bits+0x56>
 800dff6:	6003      	str	r3, [r0, #0]
 800dff8:	e7e5      	b.n	800dfc6 <__lo0bits+0x1e>
 800dffa:	2200      	movs	r2, #0
 800dffc:	e7e3      	b.n	800dfc6 <__lo0bits+0x1e>
 800dffe:	2220      	movs	r2, #32
 800e000:	e7e1      	b.n	800dfc6 <__lo0bits+0x1e>
	...

0800e004 <__i2b>:
 800e004:	b510      	push	{r4, lr}
 800e006:	460c      	mov	r4, r1
 800e008:	2101      	movs	r1, #1
 800e00a:	f7ff febb 	bl	800dd84 <_Balloc>
 800e00e:	4602      	mov	r2, r0
 800e010:	b928      	cbnz	r0, 800e01e <__i2b+0x1a>
 800e012:	4b05      	ldr	r3, [pc, #20]	; (800e028 <__i2b+0x24>)
 800e014:	4805      	ldr	r0, [pc, #20]	; (800e02c <__i2b+0x28>)
 800e016:	f240 1145 	movw	r1, #325	; 0x145
 800e01a:	f000 fce1 	bl	800e9e0 <__assert_func>
 800e01e:	2301      	movs	r3, #1
 800e020:	6144      	str	r4, [r0, #20]
 800e022:	6103      	str	r3, [r0, #16]
 800e024:	bd10      	pop	{r4, pc}
 800e026:	bf00      	nop
 800e028:	08010185 	.word	0x08010185
 800e02c:	08010207 	.word	0x08010207

0800e030 <__multiply>:
 800e030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e034:	4691      	mov	r9, r2
 800e036:	690a      	ldr	r2, [r1, #16]
 800e038:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e03c:	429a      	cmp	r2, r3
 800e03e:	bfb8      	it	lt
 800e040:	460b      	movlt	r3, r1
 800e042:	460c      	mov	r4, r1
 800e044:	bfbc      	itt	lt
 800e046:	464c      	movlt	r4, r9
 800e048:	4699      	movlt	r9, r3
 800e04a:	6927      	ldr	r7, [r4, #16]
 800e04c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e050:	68a3      	ldr	r3, [r4, #8]
 800e052:	6861      	ldr	r1, [r4, #4]
 800e054:	eb07 060a 	add.w	r6, r7, sl
 800e058:	42b3      	cmp	r3, r6
 800e05a:	b085      	sub	sp, #20
 800e05c:	bfb8      	it	lt
 800e05e:	3101      	addlt	r1, #1
 800e060:	f7ff fe90 	bl	800dd84 <_Balloc>
 800e064:	b930      	cbnz	r0, 800e074 <__multiply+0x44>
 800e066:	4602      	mov	r2, r0
 800e068:	4b44      	ldr	r3, [pc, #272]	; (800e17c <__multiply+0x14c>)
 800e06a:	4845      	ldr	r0, [pc, #276]	; (800e180 <__multiply+0x150>)
 800e06c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e070:	f000 fcb6 	bl	800e9e0 <__assert_func>
 800e074:	f100 0514 	add.w	r5, r0, #20
 800e078:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e07c:	462b      	mov	r3, r5
 800e07e:	2200      	movs	r2, #0
 800e080:	4543      	cmp	r3, r8
 800e082:	d321      	bcc.n	800e0c8 <__multiply+0x98>
 800e084:	f104 0314 	add.w	r3, r4, #20
 800e088:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e08c:	f109 0314 	add.w	r3, r9, #20
 800e090:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e094:	9202      	str	r2, [sp, #8]
 800e096:	1b3a      	subs	r2, r7, r4
 800e098:	3a15      	subs	r2, #21
 800e09a:	f022 0203 	bic.w	r2, r2, #3
 800e09e:	3204      	adds	r2, #4
 800e0a0:	f104 0115 	add.w	r1, r4, #21
 800e0a4:	428f      	cmp	r7, r1
 800e0a6:	bf38      	it	cc
 800e0a8:	2204      	movcc	r2, #4
 800e0aa:	9201      	str	r2, [sp, #4]
 800e0ac:	9a02      	ldr	r2, [sp, #8]
 800e0ae:	9303      	str	r3, [sp, #12]
 800e0b0:	429a      	cmp	r2, r3
 800e0b2:	d80c      	bhi.n	800e0ce <__multiply+0x9e>
 800e0b4:	2e00      	cmp	r6, #0
 800e0b6:	dd03      	ble.n	800e0c0 <__multiply+0x90>
 800e0b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d05b      	beq.n	800e178 <__multiply+0x148>
 800e0c0:	6106      	str	r6, [r0, #16]
 800e0c2:	b005      	add	sp, #20
 800e0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c8:	f843 2b04 	str.w	r2, [r3], #4
 800e0cc:	e7d8      	b.n	800e080 <__multiply+0x50>
 800e0ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800e0d2:	f1ba 0f00 	cmp.w	sl, #0
 800e0d6:	d024      	beq.n	800e122 <__multiply+0xf2>
 800e0d8:	f104 0e14 	add.w	lr, r4, #20
 800e0dc:	46a9      	mov	r9, r5
 800e0de:	f04f 0c00 	mov.w	ip, #0
 800e0e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e0e6:	f8d9 1000 	ldr.w	r1, [r9]
 800e0ea:	fa1f fb82 	uxth.w	fp, r2
 800e0ee:	b289      	uxth	r1, r1
 800e0f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800e0f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e0f8:	f8d9 2000 	ldr.w	r2, [r9]
 800e0fc:	4461      	add	r1, ip
 800e0fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e102:	fb0a c20b 	mla	r2, sl, fp, ip
 800e106:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e10a:	b289      	uxth	r1, r1
 800e10c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e110:	4577      	cmp	r7, lr
 800e112:	f849 1b04 	str.w	r1, [r9], #4
 800e116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e11a:	d8e2      	bhi.n	800e0e2 <__multiply+0xb2>
 800e11c:	9a01      	ldr	r2, [sp, #4]
 800e11e:	f845 c002 	str.w	ip, [r5, r2]
 800e122:	9a03      	ldr	r2, [sp, #12]
 800e124:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e128:	3304      	adds	r3, #4
 800e12a:	f1b9 0f00 	cmp.w	r9, #0
 800e12e:	d021      	beq.n	800e174 <__multiply+0x144>
 800e130:	6829      	ldr	r1, [r5, #0]
 800e132:	f104 0c14 	add.w	ip, r4, #20
 800e136:	46ae      	mov	lr, r5
 800e138:	f04f 0a00 	mov.w	sl, #0
 800e13c:	f8bc b000 	ldrh.w	fp, [ip]
 800e140:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e144:	fb09 220b 	mla	r2, r9, fp, r2
 800e148:	4452      	add	r2, sl
 800e14a:	b289      	uxth	r1, r1
 800e14c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e150:	f84e 1b04 	str.w	r1, [lr], #4
 800e154:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e158:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e15c:	f8be 1000 	ldrh.w	r1, [lr]
 800e160:	fb09 110a 	mla	r1, r9, sl, r1
 800e164:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e168:	4567      	cmp	r7, ip
 800e16a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e16e:	d8e5      	bhi.n	800e13c <__multiply+0x10c>
 800e170:	9a01      	ldr	r2, [sp, #4]
 800e172:	50a9      	str	r1, [r5, r2]
 800e174:	3504      	adds	r5, #4
 800e176:	e799      	b.n	800e0ac <__multiply+0x7c>
 800e178:	3e01      	subs	r6, #1
 800e17a:	e79b      	b.n	800e0b4 <__multiply+0x84>
 800e17c:	08010185 	.word	0x08010185
 800e180:	08010207 	.word	0x08010207

0800e184 <__pow5mult>:
 800e184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e188:	4615      	mov	r5, r2
 800e18a:	f012 0203 	ands.w	r2, r2, #3
 800e18e:	4606      	mov	r6, r0
 800e190:	460f      	mov	r7, r1
 800e192:	d007      	beq.n	800e1a4 <__pow5mult+0x20>
 800e194:	4c25      	ldr	r4, [pc, #148]	; (800e22c <__pow5mult+0xa8>)
 800e196:	3a01      	subs	r2, #1
 800e198:	2300      	movs	r3, #0
 800e19a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e19e:	f7ff fe53 	bl	800de48 <__multadd>
 800e1a2:	4607      	mov	r7, r0
 800e1a4:	10ad      	asrs	r5, r5, #2
 800e1a6:	d03d      	beq.n	800e224 <__pow5mult+0xa0>
 800e1a8:	69f4      	ldr	r4, [r6, #28]
 800e1aa:	b97c      	cbnz	r4, 800e1cc <__pow5mult+0x48>
 800e1ac:	2010      	movs	r0, #16
 800e1ae:	f7ff fc75 	bl	800da9c <malloc>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	61f0      	str	r0, [r6, #28]
 800e1b6:	b928      	cbnz	r0, 800e1c4 <__pow5mult+0x40>
 800e1b8:	4b1d      	ldr	r3, [pc, #116]	; (800e230 <__pow5mult+0xac>)
 800e1ba:	481e      	ldr	r0, [pc, #120]	; (800e234 <__pow5mult+0xb0>)
 800e1bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e1c0:	f000 fc0e 	bl	800e9e0 <__assert_func>
 800e1c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e1c8:	6004      	str	r4, [r0, #0]
 800e1ca:	60c4      	str	r4, [r0, #12]
 800e1cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e1d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e1d4:	b94c      	cbnz	r4, 800e1ea <__pow5mult+0x66>
 800e1d6:	f240 2171 	movw	r1, #625	; 0x271
 800e1da:	4630      	mov	r0, r6
 800e1dc:	f7ff ff12 	bl	800e004 <__i2b>
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	6003      	str	r3, [r0, #0]
 800e1ea:	f04f 0900 	mov.w	r9, #0
 800e1ee:	07eb      	lsls	r3, r5, #31
 800e1f0:	d50a      	bpl.n	800e208 <__pow5mult+0x84>
 800e1f2:	4639      	mov	r1, r7
 800e1f4:	4622      	mov	r2, r4
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	f7ff ff1a 	bl	800e030 <__multiply>
 800e1fc:	4639      	mov	r1, r7
 800e1fe:	4680      	mov	r8, r0
 800e200:	4630      	mov	r0, r6
 800e202:	f7ff fdff 	bl	800de04 <_Bfree>
 800e206:	4647      	mov	r7, r8
 800e208:	106d      	asrs	r5, r5, #1
 800e20a:	d00b      	beq.n	800e224 <__pow5mult+0xa0>
 800e20c:	6820      	ldr	r0, [r4, #0]
 800e20e:	b938      	cbnz	r0, 800e220 <__pow5mult+0x9c>
 800e210:	4622      	mov	r2, r4
 800e212:	4621      	mov	r1, r4
 800e214:	4630      	mov	r0, r6
 800e216:	f7ff ff0b 	bl	800e030 <__multiply>
 800e21a:	6020      	str	r0, [r4, #0]
 800e21c:	f8c0 9000 	str.w	r9, [r0]
 800e220:	4604      	mov	r4, r0
 800e222:	e7e4      	b.n	800e1ee <__pow5mult+0x6a>
 800e224:	4638      	mov	r0, r7
 800e226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e22a:	bf00      	nop
 800e22c:	08010350 	.word	0x08010350
 800e230:	08010116 	.word	0x08010116
 800e234:	08010207 	.word	0x08010207

0800e238 <__lshift>:
 800e238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e23c:	460c      	mov	r4, r1
 800e23e:	6849      	ldr	r1, [r1, #4]
 800e240:	6923      	ldr	r3, [r4, #16]
 800e242:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e246:	68a3      	ldr	r3, [r4, #8]
 800e248:	4607      	mov	r7, r0
 800e24a:	4691      	mov	r9, r2
 800e24c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e250:	f108 0601 	add.w	r6, r8, #1
 800e254:	42b3      	cmp	r3, r6
 800e256:	db0b      	blt.n	800e270 <__lshift+0x38>
 800e258:	4638      	mov	r0, r7
 800e25a:	f7ff fd93 	bl	800dd84 <_Balloc>
 800e25e:	4605      	mov	r5, r0
 800e260:	b948      	cbnz	r0, 800e276 <__lshift+0x3e>
 800e262:	4602      	mov	r2, r0
 800e264:	4b28      	ldr	r3, [pc, #160]	; (800e308 <__lshift+0xd0>)
 800e266:	4829      	ldr	r0, [pc, #164]	; (800e30c <__lshift+0xd4>)
 800e268:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e26c:	f000 fbb8 	bl	800e9e0 <__assert_func>
 800e270:	3101      	adds	r1, #1
 800e272:	005b      	lsls	r3, r3, #1
 800e274:	e7ee      	b.n	800e254 <__lshift+0x1c>
 800e276:	2300      	movs	r3, #0
 800e278:	f100 0114 	add.w	r1, r0, #20
 800e27c:	f100 0210 	add.w	r2, r0, #16
 800e280:	4618      	mov	r0, r3
 800e282:	4553      	cmp	r3, sl
 800e284:	db33      	blt.n	800e2ee <__lshift+0xb6>
 800e286:	6920      	ldr	r0, [r4, #16]
 800e288:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e28c:	f104 0314 	add.w	r3, r4, #20
 800e290:	f019 091f 	ands.w	r9, r9, #31
 800e294:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e298:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e29c:	d02b      	beq.n	800e2f6 <__lshift+0xbe>
 800e29e:	f1c9 0e20 	rsb	lr, r9, #32
 800e2a2:	468a      	mov	sl, r1
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	6818      	ldr	r0, [r3, #0]
 800e2a8:	fa00 f009 	lsl.w	r0, r0, r9
 800e2ac:	4310      	orrs	r0, r2
 800e2ae:	f84a 0b04 	str.w	r0, [sl], #4
 800e2b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2b6:	459c      	cmp	ip, r3
 800e2b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800e2bc:	d8f3      	bhi.n	800e2a6 <__lshift+0x6e>
 800e2be:	ebac 0304 	sub.w	r3, ip, r4
 800e2c2:	3b15      	subs	r3, #21
 800e2c4:	f023 0303 	bic.w	r3, r3, #3
 800e2c8:	3304      	adds	r3, #4
 800e2ca:	f104 0015 	add.w	r0, r4, #21
 800e2ce:	4584      	cmp	ip, r0
 800e2d0:	bf38      	it	cc
 800e2d2:	2304      	movcc	r3, #4
 800e2d4:	50ca      	str	r2, [r1, r3]
 800e2d6:	b10a      	cbz	r2, 800e2dc <__lshift+0xa4>
 800e2d8:	f108 0602 	add.w	r6, r8, #2
 800e2dc:	3e01      	subs	r6, #1
 800e2de:	4638      	mov	r0, r7
 800e2e0:	612e      	str	r6, [r5, #16]
 800e2e2:	4621      	mov	r1, r4
 800e2e4:	f7ff fd8e 	bl	800de04 <_Bfree>
 800e2e8:	4628      	mov	r0, r5
 800e2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	e7c5      	b.n	800e282 <__lshift+0x4a>
 800e2f6:	3904      	subs	r1, #4
 800e2f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e2fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800e300:	459c      	cmp	ip, r3
 800e302:	d8f9      	bhi.n	800e2f8 <__lshift+0xc0>
 800e304:	e7ea      	b.n	800e2dc <__lshift+0xa4>
 800e306:	bf00      	nop
 800e308:	08010185 	.word	0x08010185
 800e30c:	08010207 	.word	0x08010207

0800e310 <__mcmp>:
 800e310:	b530      	push	{r4, r5, lr}
 800e312:	6902      	ldr	r2, [r0, #16]
 800e314:	690c      	ldr	r4, [r1, #16]
 800e316:	1b12      	subs	r2, r2, r4
 800e318:	d10e      	bne.n	800e338 <__mcmp+0x28>
 800e31a:	f100 0314 	add.w	r3, r0, #20
 800e31e:	3114      	adds	r1, #20
 800e320:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e324:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e328:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e32c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e330:	42a5      	cmp	r5, r4
 800e332:	d003      	beq.n	800e33c <__mcmp+0x2c>
 800e334:	d305      	bcc.n	800e342 <__mcmp+0x32>
 800e336:	2201      	movs	r2, #1
 800e338:	4610      	mov	r0, r2
 800e33a:	bd30      	pop	{r4, r5, pc}
 800e33c:	4283      	cmp	r3, r0
 800e33e:	d3f3      	bcc.n	800e328 <__mcmp+0x18>
 800e340:	e7fa      	b.n	800e338 <__mcmp+0x28>
 800e342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e346:	e7f7      	b.n	800e338 <__mcmp+0x28>

0800e348 <__mdiff>:
 800e348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34c:	460c      	mov	r4, r1
 800e34e:	4606      	mov	r6, r0
 800e350:	4611      	mov	r1, r2
 800e352:	4620      	mov	r0, r4
 800e354:	4690      	mov	r8, r2
 800e356:	f7ff ffdb 	bl	800e310 <__mcmp>
 800e35a:	1e05      	subs	r5, r0, #0
 800e35c:	d110      	bne.n	800e380 <__mdiff+0x38>
 800e35e:	4629      	mov	r1, r5
 800e360:	4630      	mov	r0, r6
 800e362:	f7ff fd0f 	bl	800dd84 <_Balloc>
 800e366:	b930      	cbnz	r0, 800e376 <__mdiff+0x2e>
 800e368:	4b3a      	ldr	r3, [pc, #232]	; (800e454 <__mdiff+0x10c>)
 800e36a:	4602      	mov	r2, r0
 800e36c:	f240 2137 	movw	r1, #567	; 0x237
 800e370:	4839      	ldr	r0, [pc, #228]	; (800e458 <__mdiff+0x110>)
 800e372:	f000 fb35 	bl	800e9e0 <__assert_func>
 800e376:	2301      	movs	r3, #1
 800e378:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e37c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e380:	bfa4      	itt	ge
 800e382:	4643      	movge	r3, r8
 800e384:	46a0      	movge	r8, r4
 800e386:	4630      	mov	r0, r6
 800e388:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e38c:	bfa6      	itte	ge
 800e38e:	461c      	movge	r4, r3
 800e390:	2500      	movge	r5, #0
 800e392:	2501      	movlt	r5, #1
 800e394:	f7ff fcf6 	bl	800dd84 <_Balloc>
 800e398:	b920      	cbnz	r0, 800e3a4 <__mdiff+0x5c>
 800e39a:	4b2e      	ldr	r3, [pc, #184]	; (800e454 <__mdiff+0x10c>)
 800e39c:	4602      	mov	r2, r0
 800e39e:	f240 2145 	movw	r1, #581	; 0x245
 800e3a2:	e7e5      	b.n	800e370 <__mdiff+0x28>
 800e3a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e3a8:	6926      	ldr	r6, [r4, #16]
 800e3aa:	60c5      	str	r5, [r0, #12]
 800e3ac:	f104 0914 	add.w	r9, r4, #20
 800e3b0:	f108 0514 	add.w	r5, r8, #20
 800e3b4:	f100 0e14 	add.w	lr, r0, #20
 800e3b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e3bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e3c0:	f108 0210 	add.w	r2, r8, #16
 800e3c4:	46f2      	mov	sl, lr
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e3cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e3d0:	fa11 f88b 	uxtah	r8, r1, fp
 800e3d4:	b299      	uxth	r1, r3
 800e3d6:	0c1b      	lsrs	r3, r3, #16
 800e3d8:	eba8 0801 	sub.w	r8, r8, r1
 800e3dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e3e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e3e4:	fa1f f888 	uxth.w	r8, r8
 800e3e8:	1419      	asrs	r1, r3, #16
 800e3ea:	454e      	cmp	r6, r9
 800e3ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e3f0:	f84a 3b04 	str.w	r3, [sl], #4
 800e3f4:	d8e8      	bhi.n	800e3c8 <__mdiff+0x80>
 800e3f6:	1b33      	subs	r3, r6, r4
 800e3f8:	3b15      	subs	r3, #21
 800e3fa:	f023 0303 	bic.w	r3, r3, #3
 800e3fe:	3304      	adds	r3, #4
 800e400:	3415      	adds	r4, #21
 800e402:	42a6      	cmp	r6, r4
 800e404:	bf38      	it	cc
 800e406:	2304      	movcc	r3, #4
 800e408:	441d      	add	r5, r3
 800e40a:	4473      	add	r3, lr
 800e40c:	469e      	mov	lr, r3
 800e40e:	462e      	mov	r6, r5
 800e410:	4566      	cmp	r6, ip
 800e412:	d30e      	bcc.n	800e432 <__mdiff+0xea>
 800e414:	f10c 0203 	add.w	r2, ip, #3
 800e418:	1b52      	subs	r2, r2, r5
 800e41a:	f022 0203 	bic.w	r2, r2, #3
 800e41e:	3d03      	subs	r5, #3
 800e420:	45ac      	cmp	ip, r5
 800e422:	bf38      	it	cc
 800e424:	2200      	movcc	r2, #0
 800e426:	4413      	add	r3, r2
 800e428:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e42c:	b17a      	cbz	r2, 800e44e <__mdiff+0x106>
 800e42e:	6107      	str	r7, [r0, #16]
 800e430:	e7a4      	b.n	800e37c <__mdiff+0x34>
 800e432:	f856 8b04 	ldr.w	r8, [r6], #4
 800e436:	fa11 f288 	uxtah	r2, r1, r8
 800e43a:	1414      	asrs	r4, r2, #16
 800e43c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e440:	b292      	uxth	r2, r2
 800e442:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e446:	f84e 2b04 	str.w	r2, [lr], #4
 800e44a:	1421      	asrs	r1, r4, #16
 800e44c:	e7e0      	b.n	800e410 <__mdiff+0xc8>
 800e44e:	3f01      	subs	r7, #1
 800e450:	e7ea      	b.n	800e428 <__mdiff+0xe0>
 800e452:	bf00      	nop
 800e454:	08010185 	.word	0x08010185
 800e458:	08010207 	.word	0x08010207

0800e45c <__ulp>:
 800e45c:	b082      	sub	sp, #8
 800e45e:	ed8d 0b00 	vstr	d0, [sp]
 800e462:	9a01      	ldr	r2, [sp, #4]
 800e464:	4b0f      	ldr	r3, [pc, #60]	; (800e4a4 <__ulp+0x48>)
 800e466:	4013      	ands	r3, r2
 800e468:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	dc08      	bgt.n	800e482 <__ulp+0x26>
 800e470:	425b      	negs	r3, r3
 800e472:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e476:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e47a:	da04      	bge.n	800e486 <__ulp+0x2a>
 800e47c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e480:	4113      	asrs	r3, r2
 800e482:	2200      	movs	r2, #0
 800e484:	e008      	b.n	800e498 <__ulp+0x3c>
 800e486:	f1a2 0314 	sub.w	r3, r2, #20
 800e48a:	2b1e      	cmp	r3, #30
 800e48c:	bfda      	itte	le
 800e48e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e492:	40da      	lsrle	r2, r3
 800e494:	2201      	movgt	r2, #1
 800e496:	2300      	movs	r3, #0
 800e498:	4619      	mov	r1, r3
 800e49a:	4610      	mov	r0, r2
 800e49c:	ec41 0b10 	vmov	d0, r0, r1
 800e4a0:	b002      	add	sp, #8
 800e4a2:	4770      	bx	lr
 800e4a4:	7ff00000 	.word	0x7ff00000

0800e4a8 <__b2d>:
 800e4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ac:	6906      	ldr	r6, [r0, #16]
 800e4ae:	f100 0814 	add.w	r8, r0, #20
 800e4b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e4b6:	1f37      	subs	r7, r6, #4
 800e4b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e4bc:	4610      	mov	r0, r2
 800e4be:	f7ff fd53 	bl	800df68 <__hi0bits>
 800e4c2:	f1c0 0320 	rsb	r3, r0, #32
 800e4c6:	280a      	cmp	r0, #10
 800e4c8:	600b      	str	r3, [r1, #0]
 800e4ca:	491b      	ldr	r1, [pc, #108]	; (800e538 <__b2d+0x90>)
 800e4cc:	dc15      	bgt.n	800e4fa <__b2d+0x52>
 800e4ce:	f1c0 0c0b 	rsb	ip, r0, #11
 800e4d2:	fa22 f30c 	lsr.w	r3, r2, ip
 800e4d6:	45b8      	cmp	r8, r7
 800e4d8:	ea43 0501 	orr.w	r5, r3, r1
 800e4dc:	bf34      	ite	cc
 800e4de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e4e2:	2300      	movcs	r3, #0
 800e4e4:	3015      	adds	r0, #21
 800e4e6:	fa02 f000 	lsl.w	r0, r2, r0
 800e4ea:	fa23 f30c 	lsr.w	r3, r3, ip
 800e4ee:	4303      	orrs	r3, r0
 800e4f0:	461c      	mov	r4, r3
 800e4f2:	ec45 4b10 	vmov	d0, r4, r5
 800e4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4fa:	45b8      	cmp	r8, r7
 800e4fc:	bf3a      	itte	cc
 800e4fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e502:	f1a6 0708 	subcc.w	r7, r6, #8
 800e506:	2300      	movcs	r3, #0
 800e508:	380b      	subs	r0, #11
 800e50a:	d012      	beq.n	800e532 <__b2d+0x8a>
 800e50c:	f1c0 0120 	rsb	r1, r0, #32
 800e510:	fa23 f401 	lsr.w	r4, r3, r1
 800e514:	4082      	lsls	r2, r0
 800e516:	4322      	orrs	r2, r4
 800e518:	4547      	cmp	r7, r8
 800e51a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e51e:	bf8c      	ite	hi
 800e520:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e524:	2200      	movls	r2, #0
 800e526:	4083      	lsls	r3, r0
 800e528:	40ca      	lsrs	r2, r1
 800e52a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e52e:	4313      	orrs	r3, r2
 800e530:	e7de      	b.n	800e4f0 <__b2d+0x48>
 800e532:	ea42 0501 	orr.w	r5, r2, r1
 800e536:	e7db      	b.n	800e4f0 <__b2d+0x48>
 800e538:	3ff00000 	.word	0x3ff00000

0800e53c <__d2b>:
 800e53c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e540:	460f      	mov	r7, r1
 800e542:	2101      	movs	r1, #1
 800e544:	ec59 8b10 	vmov	r8, r9, d0
 800e548:	4616      	mov	r6, r2
 800e54a:	f7ff fc1b 	bl	800dd84 <_Balloc>
 800e54e:	4604      	mov	r4, r0
 800e550:	b930      	cbnz	r0, 800e560 <__d2b+0x24>
 800e552:	4602      	mov	r2, r0
 800e554:	4b24      	ldr	r3, [pc, #144]	; (800e5e8 <__d2b+0xac>)
 800e556:	4825      	ldr	r0, [pc, #148]	; (800e5ec <__d2b+0xb0>)
 800e558:	f240 310f 	movw	r1, #783	; 0x30f
 800e55c:	f000 fa40 	bl	800e9e0 <__assert_func>
 800e560:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e568:	bb2d      	cbnz	r5, 800e5b6 <__d2b+0x7a>
 800e56a:	9301      	str	r3, [sp, #4]
 800e56c:	f1b8 0300 	subs.w	r3, r8, #0
 800e570:	d026      	beq.n	800e5c0 <__d2b+0x84>
 800e572:	4668      	mov	r0, sp
 800e574:	9300      	str	r3, [sp, #0]
 800e576:	f7ff fd17 	bl	800dfa8 <__lo0bits>
 800e57a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e57e:	b1e8      	cbz	r0, 800e5bc <__d2b+0x80>
 800e580:	f1c0 0320 	rsb	r3, r0, #32
 800e584:	fa02 f303 	lsl.w	r3, r2, r3
 800e588:	430b      	orrs	r3, r1
 800e58a:	40c2      	lsrs	r2, r0
 800e58c:	6163      	str	r3, [r4, #20]
 800e58e:	9201      	str	r2, [sp, #4]
 800e590:	9b01      	ldr	r3, [sp, #4]
 800e592:	61a3      	str	r3, [r4, #24]
 800e594:	2b00      	cmp	r3, #0
 800e596:	bf14      	ite	ne
 800e598:	2202      	movne	r2, #2
 800e59a:	2201      	moveq	r2, #1
 800e59c:	6122      	str	r2, [r4, #16]
 800e59e:	b1bd      	cbz	r5, 800e5d0 <__d2b+0x94>
 800e5a0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e5a4:	4405      	add	r5, r0
 800e5a6:	603d      	str	r5, [r7, #0]
 800e5a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e5ac:	6030      	str	r0, [r6, #0]
 800e5ae:	4620      	mov	r0, r4
 800e5b0:	b003      	add	sp, #12
 800e5b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5ba:	e7d6      	b.n	800e56a <__d2b+0x2e>
 800e5bc:	6161      	str	r1, [r4, #20]
 800e5be:	e7e7      	b.n	800e590 <__d2b+0x54>
 800e5c0:	a801      	add	r0, sp, #4
 800e5c2:	f7ff fcf1 	bl	800dfa8 <__lo0bits>
 800e5c6:	9b01      	ldr	r3, [sp, #4]
 800e5c8:	6163      	str	r3, [r4, #20]
 800e5ca:	3020      	adds	r0, #32
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	e7e5      	b.n	800e59c <__d2b+0x60>
 800e5d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e5d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e5d8:	6038      	str	r0, [r7, #0]
 800e5da:	6918      	ldr	r0, [r3, #16]
 800e5dc:	f7ff fcc4 	bl	800df68 <__hi0bits>
 800e5e0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e5e4:	e7e2      	b.n	800e5ac <__d2b+0x70>
 800e5e6:	bf00      	nop
 800e5e8:	08010185 	.word	0x08010185
 800e5ec:	08010207 	.word	0x08010207

0800e5f0 <__ratio>:
 800e5f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5f4:	4688      	mov	r8, r1
 800e5f6:	4669      	mov	r1, sp
 800e5f8:	4681      	mov	r9, r0
 800e5fa:	f7ff ff55 	bl	800e4a8 <__b2d>
 800e5fe:	a901      	add	r1, sp, #4
 800e600:	4640      	mov	r0, r8
 800e602:	ec55 4b10 	vmov	r4, r5, d0
 800e606:	f7ff ff4f 	bl	800e4a8 <__b2d>
 800e60a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e60e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e612:	eba3 0c02 	sub.w	ip, r3, r2
 800e616:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e61a:	1a9b      	subs	r3, r3, r2
 800e61c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e620:	ec51 0b10 	vmov	r0, r1, d0
 800e624:	2b00      	cmp	r3, #0
 800e626:	bfd6      	itet	le
 800e628:	460a      	movle	r2, r1
 800e62a:	462a      	movgt	r2, r5
 800e62c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e630:	468b      	mov	fp, r1
 800e632:	462f      	mov	r7, r5
 800e634:	bfd4      	ite	le
 800e636:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e63a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e63e:	4620      	mov	r0, r4
 800e640:	ee10 2a10 	vmov	r2, s0
 800e644:	465b      	mov	r3, fp
 800e646:	4639      	mov	r1, r7
 800e648:	f7f2 f900 	bl	800084c <__aeabi_ddiv>
 800e64c:	ec41 0b10 	vmov	d0, r0, r1
 800e650:	b003      	add	sp, #12
 800e652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e656 <__copybits>:
 800e656:	3901      	subs	r1, #1
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	1149      	asrs	r1, r1, #5
 800e65c:	6914      	ldr	r4, [r2, #16]
 800e65e:	3101      	adds	r1, #1
 800e660:	f102 0314 	add.w	r3, r2, #20
 800e664:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e668:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e66c:	1f05      	subs	r5, r0, #4
 800e66e:	42a3      	cmp	r3, r4
 800e670:	d30c      	bcc.n	800e68c <__copybits+0x36>
 800e672:	1aa3      	subs	r3, r4, r2
 800e674:	3b11      	subs	r3, #17
 800e676:	f023 0303 	bic.w	r3, r3, #3
 800e67a:	3211      	adds	r2, #17
 800e67c:	42a2      	cmp	r2, r4
 800e67e:	bf88      	it	hi
 800e680:	2300      	movhi	r3, #0
 800e682:	4418      	add	r0, r3
 800e684:	2300      	movs	r3, #0
 800e686:	4288      	cmp	r0, r1
 800e688:	d305      	bcc.n	800e696 <__copybits+0x40>
 800e68a:	bd70      	pop	{r4, r5, r6, pc}
 800e68c:	f853 6b04 	ldr.w	r6, [r3], #4
 800e690:	f845 6f04 	str.w	r6, [r5, #4]!
 800e694:	e7eb      	b.n	800e66e <__copybits+0x18>
 800e696:	f840 3b04 	str.w	r3, [r0], #4
 800e69a:	e7f4      	b.n	800e686 <__copybits+0x30>

0800e69c <__any_on>:
 800e69c:	f100 0214 	add.w	r2, r0, #20
 800e6a0:	6900      	ldr	r0, [r0, #16]
 800e6a2:	114b      	asrs	r3, r1, #5
 800e6a4:	4298      	cmp	r0, r3
 800e6a6:	b510      	push	{r4, lr}
 800e6a8:	db11      	blt.n	800e6ce <__any_on+0x32>
 800e6aa:	dd0a      	ble.n	800e6c2 <__any_on+0x26>
 800e6ac:	f011 011f 	ands.w	r1, r1, #31
 800e6b0:	d007      	beq.n	800e6c2 <__any_on+0x26>
 800e6b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e6b6:	fa24 f001 	lsr.w	r0, r4, r1
 800e6ba:	fa00 f101 	lsl.w	r1, r0, r1
 800e6be:	428c      	cmp	r4, r1
 800e6c0:	d10b      	bne.n	800e6da <__any_on+0x3e>
 800e6c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d803      	bhi.n	800e6d2 <__any_on+0x36>
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	bd10      	pop	{r4, pc}
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	e7f7      	b.n	800e6c2 <__any_on+0x26>
 800e6d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e6d6:	2900      	cmp	r1, #0
 800e6d8:	d0f5      	beq.n	800e6c6 <__any_on+0x2a>
 800e6da:	2001      	movs	r0, #1
 800e6dc:	e7f6      	b.n	800e6cc <__any_on+0x30>

0800e6de <_realloc_r>:
 800e6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e2:	4680      	mov	r8, r0
 800e6e4:	4614      	mov	r4, r2
 800e6e6:	460e      	mov	r6, r1
 800e6e8:	b921      	cbnz	r1, 800e6f4 <_realloc_r+0x16>
 800e6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ee:	4611      	mov	r1, r2
 800e6f0:	f7ff b9fc 	b.w	800daec <_malloc_r>
 800e6f4:	b92a      	cbnz	r2, 800e702 <_realloc_r+0x24>
 800e6f6:	f7fe fb91 	bl	800ce1c <_free_r>
 800e6fa:	4625      	mov	r5, r4
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e702:	f000 f9a1 	bl	800ea48 <_malloc_usable_size_r>
 800e706:	4284      	cmp	r4, r0
 800e708:	4607      	mov	r7, r0
 800e70a:	d802      	bhi.n	800e712 <_realloc_r+0x34>
 800e70c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e710:	d812      	bhi.n	800e738 <_realloc_r+0x5a>
 800e712:	4621      	mov	r1, r4
 800e714:	4640      	mov	r0, r8
 800e716:	f7ff f9e9 	bl	800daec <_malloc_r>
 800e71a:	4605      	mov	r5, r0
 800e71c:	2800      	cmp	r0, #0
 800e71e:	d0ed      	beq.n	800e6fc <_realloc_r+0x1e>
 800e720:	42bc      	cmp	r4, r7
 800e722:	4622      	mov	r2, r4
 800e724:	4631      	mov	r1, r6
 800e726:	bf28      	it	cs
 800e728:	463a      	movcs	r2, r7
 800e72a:	f7fd fcde 	bl	800c0ea <memcpy>
 800e72e:	4631      	mov	r1, r6
 800e730:	4640      	mov	r0, r8
 800e732:	f7fe fb73 	bl	800ce1c <_free_r>
 800e736:	e7e1      	b.n	800e6fc <_realloc_r+0x1e>
 800e738:	4635      	mov	r5, r6
 800e73a:	e7df      	b.n	800e6fc <_realloc_r+0x1e>

0800e73c <__swbuf_r>:
 800e73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73e:	460e      	mov	r6, r1
 800e740:	4614      	mov	r4, r2
 800e742:	4605      	mov	r5, r0
 800e744:	b118      	cbz	r0, 800e74e <__swbuf_r+0x12>
 800e746:	6a03      	ldr	r3, [r0, #32]
 800e748:	b90b      	cbnz	r3, 800e74e <__swbuf_r+0x12>
 800e74a:	f7fc fcf7 	bl	800b13c <__sinit>
 800e74e:	69a3      	ldr	r3, [r4, #24]
 800e750:	60a3      	str	r3, [r4, #8]
 800e752:	89a3      	ldrh	r3, [r4, #12]
 800e754:	071a      	lsls	r2, r3, #28
 800e756:	d525      	bpl.n	800e7a4 <__swbuf_r+0x68>
 800e758:	6923      	ldr	r3, [r4, #16]
 800e75a:	b31b      	cbz	r3, 800e7a4 <__swbuf_r+0x68>
 800e75c:	6823      	ldr	r3, [r4, #0]
 800e75e:	6922      	ldr	r2, [r4, #16]
 800e760:	1a98      	subs	r0, r3, r2
 800e762:	6963      	ldr	r3, [r4, #20]
 800e764:	b2f6      	uxtb	r6, r6
 800e766:	4283      	cmp	r3, r0
 800e768:	4637      	mov	r7, r6
 800e76a:	dc04      	bgt.n	800e776 <__swbuf_r+0x3a>
 800e76c:	4621      	mov	r1, r4
 800e76e:	4628      	mov	r0, r5
 800e770:	f7ff fad4 	bl	800dd1c <_fflush_r>
 800e774:	b9e0      	cbnz	r0, 800e7b0 <__swbuf_r+0x74>
 800e776:	68a3      	ldr	r3, [r4, #8]
 800e778:	3b01      	subs	r3, #1
 800e77a:	60a3      	str	r3, [r4, #8]
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	1c5a      	adds	r2, r3, #1
 800e780:	6022      	str	r2, [r4, #0]
 800e782:	701e      	strb	r6, [r3, #0]
 800e784:	6962      	ldr	r2, [r4, #20]
 800e786:	1c43      	adds	r3, r0, #1
 800e788:	429a      	cmp	r2, r3
 800e78a:	d004      	beq.n	800e796 <__swbuf_r+0x5a>
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	07db      	lsls	r3, r3, #31
 800e790:	d506      	bpl.n	800e7a0 <__swbuf_r+0x64>
 800e792:	2e0a      	cmp	r6, #10
 800e794:	d104      	bne.n	800e7a0 <__swbuf_r+0x64>
 800e796:	4621      	mov	r1, r4
 800e798:	4628      	mov	r0, r5
 800e79a:	f7ff fabf 	bl	800dd1c <_fflush_r>
 800e79e:	b938      	cbnz	r0, 800e7b0 <__swbuf_r+0x74>
 800e7a0:	4638      	mov	r0, r7
 800e7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7a4:	4621      	mov	r1, r4
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	f000 f806 	bl	800e7b8 <__swsetup_r>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	d0d5      	beq.n	800e75c <__swbuf_r+0x20>
 800e7b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e7b4:	e7f4      	b.n	800e7a0 <__swbuf_r+0x64>
	...

0800e7b8 <__swsetup_r>:
 800e7b8:	b538      	push	{r3, r4, r5, lr}
 800e7ba:	4b2a      	ldr	r3, [pc, #168]	; (800e864 <__swsetup_r+0xac>)
 800e7bc:	4605      	mov	r5, r0
 800e7be:	6818      	ldr	r0, [r3, #0]
 800e7c0:	460c      	mov	r4, r1
 800e7c2:	b118      	cbz	r0, 800e7cc <__swsetup_r+0x14>
 800e7c4:	6a03      	ldr	r3, [r0, #32]
 800e7c6:	b90b      	cbnz	r3, 800e7cc <__swsetup_r+0x14>
 800e7c8:	f7fc fcb8 	bl	800b13c <__sinit>
 800e7cc:	89a3      	ldrh	r3, [r4, #12]
 800e7ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7d2:	0718      	lsls	r0, r3, #28
 800e7d4:	d422      	bmi.n	800e81c <__swsetup_r+0x64>
 800e7d6:	06d9      	lsls	r1, r3, #27
 800e7d8:	d407      	bmi.n	800e7ea <__swsetup_r+0x32>
 800e7da:	2309      	movs	r3, #9
 800e7dc:	602b      	str	r3, [r5, #0]
 800e7de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e7e2:	81a3      	strh	r3, [r4, #12]
 800e7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7e8:	e034      	b.n	800e854 <__swsetup_r+0x9c>
 800e7ea:	0758      	lsls	r0, r3, #29
 800e7ec:	d512      	bpl.n	800e814 <__swsetup_r+0x5c>
 800e7ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7f0:	b141      	cbz	r1, 800e804 <__swsetup_r+0x4c>
 800e7f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7f6:	4299      	cmp	r1, r3
 800e7f8:	d002      	beq.n	800e800 <__swsetup_r+0x48>
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	f7fe fb0e 	bl	800ce1c <_free_r>
 800e800:	2300      	movs	r3, #0
 800e802:	6363      	str	r3, [r4, #52]	; 0x34
 800e804:	89a3      	ldrh	r3, [r4, #12]
 800e806:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e80a:	81a3      	strh	r3, [r4, #12]
 800e80c:	2300      	movs	r3, #0
 800e80e:	6063      	str	r3, [r4, #4]
 800e810:	6923      	ldr	r3, [r4, #16]
 800e812:	6023      	str	r3, [r4, #0]
 800e814:	89a3      	ldrh	r3, [r4, #12]
 800e816:	f043 0308 	orr.w	r3, r3, #8
 800e81a:	81a3      	strh	r3, [r4, #12]
 800e81c:	6923      	ldr	r3, [r4, #16]
 800e81e:	b94b      	cbnz	r3, 800e834 <__swsetup_r+0x7c>
 800e820:	89a3      	ldrh	r3, [r4, #12]
 800e822:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e82a:	d003      	beq.n	800e834 <__swsetup_r+0x7c>
 800e82c:	4621      	mov	r1, r4
 800e82e:	4628      	mov	r0, r5
 800e830:	f000 f84d 	bl	800e8ce <__smakebuf_r>
 800e834:	89a0      	ldrh	r0, [r4, #12]
 800e836:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e83a:	f010 0301 	ands.w	r3, r0, #1
 800e83e:	d00a      	beq.n	800e856 <__swsetup_r+0x9e>
 800e840:	2300      	movs	r3, #0
 800e842:	60a3      	str	r3, [r4, #8]
 800e844:	6963      	ldr	r3, [r4, #20]
 800e846:	425b      	negs	r3, r3
 800e848:	61a3      	str	r3, [r4, #24]
 800e84a:	6923      	ldr	r3, [r4, #16]
 800e84c:	b943      	cbnz	r3, 800e860 <__swsetup_r+0xa8>
 800e84e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e852:	d1c4      	bne.n	800e7de <__swsetup_r+0x26>
 800e854:	bd38      	pop	{r3, r4, r5, pc}
 800e856:	0781      	lsls	r1, r0, #30
 800e858:	bf58      	it	pl
 800e85a:	6963      	ldrpl	r3, [r4, #20]
 800e85c:	60a3      	str	r3, [r4, #8]
 800e85e:	e7f4      	b.n	800e84a <__swsetup_r+0x92>
 800e860:	2000      	movs	r0, #0
 800e862:	e7f7      	b.n	800e854 <__swsetup_r+0x9c>
 800e864:	20000208 	.word	0x20000208

0800e868 <__ascii_wctomb>:
 800e868:	b149      	cbz	r1, 800e87e <__ascii_wctomb+0x16>
 800e86a:	2aff      	cmp	r2, #255	; 0xff
 800e86c:	bf85      	ittet	hi
 800e86e:	238a      	movhi	r3, #138	; 0x8a
 800e870:	6003      	strhi	r3, [r0, #0]
 800e872:	700a      	strbls	r2, [r1, #0]
 800e874:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e878:	bf98      	it	ls
 800e87a:	2001      	movls	r0, #1
 800e87c:	4770      	bx	lr
 800e87e:	4608      	mov	r0, r1
 800e880:	4770      	bx	lr

0800e882 <__swhatbuf_r>:
 800e882:	b570      	push	{r4, r5, r6, lr}
 800e884:	460c      	mov	r4, r1
 800e886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e88a:	2900      	cmp	r1, #0
 800e88c:	b096      	sub	sp, #88	; 0x58
 800e88e:	4615      	mov	r5, r2
 800e890:	461e      	mov	r6, r3
 800e892:	da0d      	bge.n	800e8b0 <__swhatbuf_r+0x2e>
 800e894:	89a3      	ldrh	r3, [r4, #12]
 800e896:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e89a:	f04f 0100 	mov.w	r1, #0
 800e89e:	bf0c      	ite	eq
 800e8a0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e8a4:	2340      	movne	r3, #64	; 0x40
 800e8a6:	2000      	movs	r0, #0
 800e8a8:	6031      	str	r1, [r6, #0]
 800e8aa:	602b      	str	r3, [r5, #0]
 800e8ac:	b016      	add	sp, #88	; 0x58
 800e8ae:	bd70      	pop	{r4, r5, r6, pc}
 800e8b0:	466a      	mov	r2, sp
 800e8b2:	f000 f863 	bl	800e97c <_fstat_r>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	dbec      	blt.n	800e894 <__swhatbuf_r+0x12>
 800e8ba:	9901      	ldr	r1, [sp, #4]
 800e8bc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e8c0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e8c4:	4259      	negs	r1, r3
 800e8c6:	4159      	adcs	r1, r3
 800e8c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8cc:	e7eb      	b.n	800e8a6 <__swhatbuf_r+0x24>

0800e8ce <__smakebuf_r>:
 800e8ce:	898b      	ldrh	r3, [r1, #12]
 800e8d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e8d2:	079d      	lsls	r5, r3, #30
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	d507      	bpl.n	800e8ea <__smakebuf_r+0x1c>
 800e8da:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e8de:	6023      	str	r3, [r4, #0]
 800e8e0:	6123      	str	r3, [r4, #16]
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	6163      	str	r3, [r4, #20]
 800e8e6:	b002      	add	sp, #8
 800e8e8:	bd70      	pop	{r4, r5, r6, pc}
 800e8ea:	ab01      	add	r3, sp, #4
 800e8ec:	466a      	mov	r2, sp
 800e8ee:	f7ff ffc8 	bl	800e882 <__swhatbuf_r>
 800e8f2:	9900      	ldr	r1, [sp, #0]
 800e8f4:	4605      	mov	r5, r0
 800e8f6:	4630      	mov	r0, r6
 800e8f8:	f7ff f8f8 	bl	800daec <_malloc_r>
 800e8fc:	b948      	cbnz	r0, 800e912 <__smakebuf_r+0x44>
 800e8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e902:	059a      	lsls	r2, r3, #22
 800e904:	d4ef      	bmi.n	800e8e6 <__smakebuf_r+0x18>
 800e906:	f023 0303 	bic.w	r3, r3, #3
 800e90a:	f043 0302 	orr.w	r3, r3, #2
 800e90e:	81a3      	strh	r3, [r4, #12]
 800e910:	e7e3      	b.n	800e8da <__smakebuf_r+0xc>
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	6020      	str	r0, [r4, #0]
 800e916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e91a:	81a3      	strh	r3, [r4, #12]
 800e91c:	9b00      	ldr	r3, [sp, #0]
 800e91e:	6163      	str	r3, [r4, #20]
 800e920:	9b01      	ldr	r3, [sp, #4]
 800e922:	6120      	str	r0, [r4, #16]
 800e924:	b15b      	cbz	r3, 800e93e <__smakebuf_r+0x70>
 800e926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e92a:	4630      	mov	r0, r6
 800e92c:	f000 f838 	bl	800e9a0 <_isatty_r>
 800e930:	b128      	cbz	r0, 800e93e <__smakebuf_r+0x70>
 800e932:	89a3      	ldrh	r3, [r4, #12]
 800e934:	f023 0303 	bic.w	r3, r3, #3
 800e938:	f043 0301 	orr.w	r3, r3, #1
 800e93c:	81a3      	strh	r3, [r4, #12]
 800e93e:	89a3      	ldrh	r3, [r4, #12]
 800e940:	431d      	orrs	r5, r3
 800e942:	81a5      	strh	r5, [r4, #12]
 800e944:	e7cf      	b.n	800e8e6 <__smakebuf_r+0x18>

0800e946 <memmove>:
 800e946:	4288      	cmp	r0, r1
 800e948:	b510      	push	{r4, lr}
 800e94a:	eb01 0402 	add.w	r4, r1, r2
 800e94e:	d902      	bls.n	800e956 <memmove+0x10>
 800e950:	4284      	cmp	r4, r0
 800e952:	4623      	mov	r3, r4
 800e954:	d807      	bhi.n	800e966 <memmove+0x20>
 800e956:	1e43      	subs	r3, r0, #1
 800e958:	42a1      	cmp	r1, r4
 800e95a:	d008      	beq.n	800e96e <memmove+0x28>
 800e95c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e960:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e964:	e7f8      	b.n	800e958 <memmove+0x12>
 800e966:	4402      	add	r2, r0
 800e968:	4601      	mov	r1, r0
 800e96a:	428a      	cmp	r2, r1
 800e96c:	d100      	bne.n	800e970 <memmove+0x2a>
 800e96e:	bd10      	pop	{r4, pc}
 800e970:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e974:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e978:	e7f7      	b.n	800e96a <memmove+0x24>
	...

0800e97c <_fstat_r>:
 800e97c:	b538      	push	{r3, r4, r5, lr}
 800e97e:	4d07      	ldr	r5, [pc, #28]	; (800e99c <_fstat_r+0x20>)
 800e980:	2300      	movs	r3, #0
 800e982:	4604      	mov	r4, r0
 800e984:	4608      	mov	r0, r1
 800e986:	4611      	mov	r1, r2
 800e988:	602b      	str	r3, [r5, #0]
 800e98a:	f7f4 fb2a 	bl	8002fe2 <_fstat>
 800e98e:	1c43      	adds	r3, r0, #1
 800e990:	d102      	bne.n	800e998 <_fstat_r+0x1c>
 800e992:	682b      	ldr	r3, [r5, #0]
 800e994:	b103      	cbz	r3, 800e998 <_fstat_r+0x1c>
 800e996:	6023      	str	r3, [r4, #0]
 800e998:	bd38      	pop	{r3, r4, r5, pc}
 800e99a:	bf00      	nop
 800e99c:	20000be0 	.word	0x20000be0

0800e9a0 <_isatty_r>:
 800e9a0:	b538      	push	{r3, r4, r5, lr}
 800e9a2:	4d06      	ldr	r5, [pc, #24]	; (800e9bc <_isatty_r+0x1c>)
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	4604      	mov	r4, r0
 800e9a8:	4608      	mov	r0, r1
 800e9aa:	602b      	str	r3, [r5, #0]
 800e9ac:	f7f4 fb29 	bl	8003002 <_isatty>
 800e9b0:	1c43      	adds	r3, r0, #1
 800e9b2:	d102      	bne.n	800e9ba <_isatty_r+0x1a>
 800e9b4:	682b      	ldr	r3, [r5, #0]
 800e9b6:	b103      	cbz	r3, 800e9ba <_isatty_r+0x1a>
 800e9b8:	6023      	str	r3, [r4, #0]
 800e9ba:	bd38      	pop	{r3, r4, r5, pc}
 800e9bc:	20000be0 	.word	0x20000be0

0800e9c0 <_sbrk_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	4d06      	ldr	r5, [pc, #24]	; (800e9dc <_sbrk_r+0x1c>)
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	4608      	mov	r0, r1
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	f7f4 fb32 	bl	8003034 <_sbrk>
 800e9d0:	1c43      	adds	r3, r0, #1
 800e9d2:	d102      	bne.n	800e9da <_sbrk_r+0x1a>
 800e9d4:	682b      	ldr	r3, [r5, #0]
 800e9d6:	b103      	cbz	r3, 800e9da <_sbrk_r+0x1a>
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	bd38      	pop	{r3, r4, r5, pc}
 800e9dc:	20000be0 	.word	0x20000be0

0800e9e0 <__assert_func>:
 800e9e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e9e2:	4614      	mov	r4, r2
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	4b09      	ldr	r3, [pc, #36]	; (800ea0c <__assert_func+0x2c>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	4605      	mov	r5, r0
 800e9ec:	68d8      	ldr	r0, [r3, #12]
 800e9ee:	b14c      	cbz	r4, 800ea04 <__assert_func+0x24>
 800e9f0:	4b07      	ldr	r3, [pc, #28]	; (800ea10 <__assert_func+0x30>)
 800e9f2:	9100      	str	r1, [sp, #0]
 800e9f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e9f8:	4906      	ldr	r1, [pc, #24]	; (800ea14 <__assert_func+0x34>)
 800e9fa:	462b      	mov	r3, r5
 800e9fc:	f000 f82c 	bl	800ea58 <fiprintf>
 800ea00:	f000 f83c 	bl	800ea7c <abort>
 800ea04:	4b04      	ldr	r3, [pc, #16]	; (800ea18 <__assert_func+0x38>)
 800ea06:	461c      	mov	r4, r3
 800ea08:	e7f3      	b.n	800e9f2 <__assert_func+0x12>
 800ea0a:	bf00      	nop
 800ea0c:	20000208 	.word	0x20000208
 800ea10:	0801035c 	.word	0x0801035c
 800ea14:	08010369 	.word	0x08010369
 800ea18:	08010397 	.word	0x08010397

0800ea1c <_calloc_r>:
 800ea1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea1e:	fba1 2402 	umull	r2, r4, r1, r2
 800ea22:	b94c      	cbnz	r4, 800ea38 <_calloc_r+0x1c>
 800ea24:	4611      	mov	r1, r2
 800ea26:	9201      	str	r2, [sp, #4]
 800ea28:	f7ff f860 	bl	800daec <_malloc_r>
 800ea2c:	9a01      	ldr	r2, [sp, #4]
 800ea2e:	4605      	mov	r5, r0
 800ea30:	b930      	cbnz	r0, 800ea40 <_calloc_r+0x24>
 800ea32:	4628      	mov	r0, r5
 800ea34:	b003      	add	sp, #12
 800ea36:	bd30      	pop	{r4, r5, pc}
 800ea38:	220c      	movs	r2, #12
 800ea3a:	6002      	str	r2, [r0, #0]
 800ea3c:	2500      	movs	r5, #0
 800ea3e:	e7f8      	b.n	800ea32 <_calloc_r+0x16>
 800ea40:	4621      	mov	r1, r4
 800ea42:	f7fd fad3 	bl	800bfec <memset>
 800ea46:	e7f4      	b.n	800ea32 <_calloc_r+0x16>

0800ea48 <_malloc_usable_size_r>:
 800ea48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea4c:	1f18      	subs	r0, r3, #4
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	bfbc      	itt	lt
 800ea52:	580b      	ldrlt	r3, [r1, r0]
 800ea54:	18c0      	addlt	r0, r0, r3
 800ea56:	4770      	bx	lr

0800ea58 <fiprintf>:
 800ea58:	b40e      	push	{r1, r2, r3}
 800ea5a:	b503      	push	{r0, r1, lr}
 800ea5c:	4601      	mov	r1, r0
 800ea5e:	ab03      	add	r3, sp, #12
 800ea60:	4805      	ldr	r0, [pc, #20]	; (800ea78 <fiprintf+0x20>)
 800ea62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea66:	6800      	ldr	r0, [r0, #0]
 800ea68:	9301      	str	r3, [sp, #4]
 800ea6a:	f7fe fefd 	bl	800d868 <_vfiprintf_r>
 800ea6e:	b002      	add	sp, #8
 800ea70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea74:	b003      	add	sp, #12
 800ea76:	4770      	bx	lr
 800ea78:	20000208 	.word	0x20000208

0800ea7c <abort>:
 800ea7c:	b508      	push	{r3, lr}
 800ea7e:	2006      	movs	r0, #6
 800ea80:	f000 f82c 	bl	800eadc <raise>
 800ea84:	2001      	movs	r0, #1
 800ea86:	f7f4 fa5d 	bl	8002f44 <_exit>

0800ea8a <_raise_r>:
 800ea8a:	291f      	cmp	r1, #31
 800ea8c:	b538      	push	{r3, r4, r5, lr}
 800ea8e:	4604      	mov	r4, r0
 800ea90:	460d      	mov	r5, r1
 800ea92:	d904      	bls.n	800ea9e <_raise_r+0x14>
 800ea94:	2316      	movs	r3, #22
 800ea96:	6003      	str	r3, [r0, #0]
 800ea98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea9c:	bd38      	pop	{r3, r4, r5, pc}
 800ea9e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800eaa0:	b112      	cbz	r2, 800eaa8 <_raise_r+0x1e>
 800eaa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eaa6:	b94b      	cbnz	r3, 800eabc <_raise_r+0x32>
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	f000 f831 	bl	800eb10 <_getpid_r>
 800eaae:	462a      	mov	r2, r5
 800eab0:	4601      	mov	r1, r0
 800eab2:	4620      	mov	r0, r4
 800eab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eab8:	f000 b818 	b.w	800eaec <_kill_r>
 800eabc:	2b01      	cmp	r3, #1
 800eabe:	d00a      	beq.n	800ead6 <_raise_r+0x4c>
 800eac0:	1c59      	adds	r1, r3, #1
 800eac2:	d103      	bne.n	800eacc <_raise_r+0x42>
 800eac4:	2316      	movs	r3, #22
 800eac6:	6003      	str	r3, [r0, #0]
 800eac8:	2001      	movs	r0, #1
 800eaca:	e7e7      	b.n	800ea9c <_raise_r+0x12>
 800eacc:	2400      	movs	r4, #0
 800eace:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ead2:	4628      	mov	r0, r5
 800ead4:	4798      	blx	r3
 800ead6:	2000      	movs	r0, #0
 800ead8:	e7e0      	b.n	800ea9c <_raise_r+0x12>
	...

0800eadc <raise>:
 800eadc:	4b02      	ldr	r3, [pc, #8]	; (800eae8 <raise+0xc>)
 800eade:	4601      	mov	r1, r0
 800eae0:	6818      	ldr	r0, [r3, #0]
 800eae2:	f7ff bfd2 	b.w	800ea8a <_raise_r>
 800eae6:	bf00      	nop
 800eae8:	20000208 	.word	0x20000208

0800eaec <_kill_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	4d07      	ldr	r5, [pc, #28]	; (800eb0c <_kill_r+0x20>)
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	4608      	mov	r0, r1
 800eaf6:	4611      	mov	r1, r2
 800eaf8:	602b      	str	r3, [r5, #0]
 800eafa:	f7f4 fa13 	bl	8002f24 <_kill>
 800eafe:	1c43      	adds	r3, r0, #1
 800eb00:	d102      	bne.n	800eb08 <_kill_r+0x1c>
 800eb02:	682b      	ldr	r3, [r5, #0]
 800eb04:	b103      	cbz	r3, 800eb08 <_kill_r+0x1c>
 800eb06:	6023      	str	r3, [r4, #0]
 800eb08:	bd38      	pop	{r3, r4, r5, pc}
 800eb0a:	bf00      	nop
 800eb0c:	20000be0 	.word	0x20000be0

0800eb10 <_getpid_r>:
 800eb10:	f7f4 ba00 	b.w	8002f14 <_getpid>

0800eb14 <sqrt>:
 800eb14:	b538      	push	{r3, r4, r5, lr}
 800eb16:	ed2d 8b02 	vpush	{d8}
 800eb1a:	ec55 4b10 	vmov	r4, r5, d0
 800eb1e:	f000 f87b 	bl	800ec18 <__ieee754_sqrt>
 800eb22:	4622      	mov	r2, r4
 800eb24:	462b      	mov	r3, r5
 800eb26:	4620      	mov	r0, r4
 800eb28:	4629      	mov	r1, r5
 800eb2a:	eeb0 8a40 	vmov.f32	s16, s0
 800eb2e:	eef0 8a60 	vmov.f32	s17, s1
 800eb32:	f7f1 fffb 	bl	8000b2c <__aeabi_dcmpun>
 800eb36:	b990      	cbnz	r0, 800eb5e <sqrt+0x4a>
 800eb38:	2200      	movs	r2, #0
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	4629      	mov	r1, r5
 800eb40:	f7f1 ffcc 	bl	8000adc <__aeabi_dcmplt>
 800eb44:	b158      	cbz	r0, 800eb5e <sqrt+0x4a>
 800eb46:	f7fd faa3 	bl	800c090 <__errno>
 800eb4a:	2321      	movs	r3, #33	; 0x21
 800eb4c:	6003      	str	r3, [r0, #0]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	2300      	movs	r3, #0
 800eb52:	4610      	mov	r0, r2
 800eb54:	4619      	mov	r1, r3
 800eb56:	f7f1 fe79 	bl	800084c <__aeabi_ddiv>
 800eb5a:	ec41 0b18 	vmov	d8, r0, r1
 800eb5e:	eeb0 0a48 	vmov.f32	s0, s16
 800eb62:	eef0 0a68 	vmov.f32	s1, s17
 800eb66:	ecbd 8b02 	vpop	{d8}
 800eb6a:	bd38      	pop	{r3, r4, r5, pc}
 800eb6c:	0000      	movs	r0, r0
	...

0800eb70 <cos>:
 800eb70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb72:	ec53 2b10 	vmov	r2, r3, d0
 800eb76:	4826      	ldr	r0, [pc, #152]	; (800ec10 <cos+0xa0>)
 800eb78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eb7c:	4281      	cmp	r1, r0
 800eb7e:	dc06      	bgt.n	800eb8e <cos+0x1e>
 800eb80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800ec08 <cos+0x98>
 800eb84:	b005      	add	sp, #20
 800eb86:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb8a:	f000 be79 	b.w	800f880 <__kernel_cos>
 800eb8e:	4821      	ldr	r0, [pc, #132]	; (800ec14 <cos+0xa4>)
 800eb90:	4281      	cmp	r1, r0
 800eb92:	dd09      	ble.n	800eba8 <cos+0x38>
 800eb94:	ee10 0a10 	vmov	r0, s0
 800eb98:	4619      	mov	r1, r3
 800eb9a:	f7f1 fb75 	bl	8000288 <__aeabi_dsub>
 800eb9e:	ec41 0b10 	vmov	d0, r0, r1
 800eba2:	b005      	add	sp, #20
 800eba4:	f85d fb04 	ldr.w	pc, [sp], #4
 800eba8:	4668      	mov	r0, sp
 800ebaa:	f000 f911 	bl	800edd0 <__ieee754_rem_pio2>
 800ebae:	f000 0003 	and.w	r0, r0, #3
 800ebb2:	2801      	cmp	r0, #1
 800ebb4:	d00b      	beq.n	800ebce <cos+0x5e>
 800ebb6:	2802      	cmp	r0, #2
 800ebb8:	d016      	beq.n	800ebe8 <cos+0x78>
 800ebba:	b9e0      	cbnz	r0, 800ebf6 <cos+0x86>
 800ebbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebc0:	ed9d 0b00 	vldr	d0, [sp]
 800ebc4:	f000 fe5c 	bl	800f880 <__kernel_cos>
 800ebc8:	ec51 0b10 	vmov	r0, r1, d0
 800ebcc:	e7e7      	b.n	800eb9e <cos+0x2e>
 800ebce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebd2:	ed9d 0b00 	vldr	d0, [sp]
 800ebd6:	f000 ff1b 	bl	800fa10 <__kernel_sin>
 800ebda:	ec53 2b10 	vmov	r2, r3, d0
 800ebde:	ee10 0a10 	vmov	r0, s0
 800ebe2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ebe6:	e7da      	b.n	800eb9e <cos+0x2e>
 800ebe8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebec:	ed9d 0b00 	vldr	d0, [sp]
 800ebf0:	f000 fe46 	bl	800f880 <__kernel_cos>
 800ebf4:	e7f1      	b.n	800ebda <cos+0x6a>
 800ebf6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ebfa:	ed9d 0b00 	vldr	d0, [sp]
 800ebfe:	2001      	movs	r0, #1
 800ec00:	f000 ff06 	bl	800fa10 <__kernel_sin>
 800ec04:	e7e0      	b.n	800ebc8 <cos+0x58>
 800ec06:	bf00      	nop
	...
 800ec10:	3fe921fb 	.word	0x3fe921fb
 800ec14:	7fefffff 	.word	0x7fefffff

0800ec18 <__ieee754_sqrt>:
 800ec18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec1c:	ec55 4b10 	vmov	r4, r5, d0
 800ec20:	4e67      	ldr	r6, [pc, #412]	; (800edc0 <__ieee754_sqrt+0x1a8>)
 800ec22:	43ae      	bics	r6, r5
 800ec24:	ee10 0a10 	vmov	r0, s0
 800ec28:	ee10 2a10 	vmov	r2, s0
 800ec2c:	4629      	mov	r1, r5
 800ec2e:	462b      	mov	r3, r5
 800ec30:	d10d      	bne.n	800ec4e <__ieee754_sqrt+0x36>
 800ec32:	f7f1 fce1 	bl	80005f8 <__aeabi_dmul>
 800ec36:	4602      	mov	r2, r0
 800ec38:	460b      	mov	r3, r1
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	4629      	mov	r1, r5
 800ec3e:	f7f1 fb25 	bl	800028c <__adddf3>
 800ec42:	4604      	mov	r4, r0
 800ec44:	460d      	mov	r5, r1
 800ec46:	ec45 4b10 	vmov	d0, r4, r5
 800ec4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec4e:	2d00      	cmp	r5, #0
 800ec50:	dc0b      	bgt.n	800ec6a <__ieee754_sqrt+0x52>
 800ec52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ec56:	4326      	orrs	r6, r4
 800ec58:	d0f5      	beq.n	800ec46 <__ieee754_sqrt+0x2e>
 800ec5a:	b135      	cbz	r5, 800ec6a <__ieee754_sqrt+0x52>
 800ec5c:	f7f1 fb14 	bl	8000288 <__aeabi_dsub>
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	f7f1 fdf2 	bl	800084c <__aeabi_ddiv>
 800ec68:	e7eb      	b.n	800ec42 <__ieee754_sqrt+0x2a>
 800ec6a:	1509      	asrs	r1, r1, #20
 800ec6c:	f000 808d 	beq.w	800ed8a <__ieee754_sqrt+0x172>
 800ec70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ec74:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ec78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec7c:	07c9      	lsls	r1, r1, #31
 800ec7e:	bf5c      	itt	pl
 800ec80:	005b      	lslpl	r3, r3, #1
 800ec82:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ec86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ec8a:	bf58      	it	pl
 800ec8c:	0052      	lslpl	r2, r2, #1
 800ec8e:	2500      	movs	r5, #0
 800ec90:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ec94:	1076      	asrs	r6, r6, #1
 800ec96:	0052      	lsls	r2, r2, #1
 800ec98:	f04f 0e16 	mov.w	lr, #22
 800ec9c:	46ac      	mov	ip, r5
 800ec9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800eca2:	eb0c 0001 	add.w	r0, ip, r1
 800eca6:	4298      	cmp	r0, r3
 800eca8:	bfde      	ittt	le
 800ecaa:	1a1b      	suble	r3, r3, r0
 800ecac:	eb00 0c01 	addle.w	ip, r0, r1
 800ecb0:	186d      	addle	r5, r5, r1
 800ecb2:	005b      	lsls	r3, r3, #1
 800ecb4:	f1be 0e01 	subs.w	lr, lr, #1
 800ecb8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ecbc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ecc0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ecc4:	d1ed      	bne.n	800eca2 <__ieee754_sqrt+0x8a>
 800ecc6:	4674      	mov	r4, lr
 800ecc8:	2720      	movs	r7, #32
 800ecca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800ecce:	4563      	cmp	r3, ip
 800ecd0:	eb01 000e 	add.w	r0, r1, lr
 800ecd4:	dc02      	bgt.n	800ecdc <__ieee754_sqrt+0xc4>
 800ecd6:	d113      	bne.n	800ed00 <__ieee754_sqrt+0xe8>
 800ecd8:	4290      	cmp	r0, r2
 800ecda:	d811      	bhi.n	800ed00 <__ieee754_sqrt+0xe8>
 800ecdc:	2800      	cmp	r0, #0
 800ecde:	eb00 0e01 	add.w	lr, r0, r1
 800ece2:	da57      	bge.n	800ed94 <__ieee754_sqrt+0x17c>
 800ece4:	f1be 0f00 	cmp.w	lr, #0
 800ece8:	db54      	blt.n	800ed94 <__ieee754_sqrt+0x17c>
 800ecea:	f10c 0801 	add.w	r8, ip, #1
 800ecee:	eba3 030c 	sub.w	r3, r3, ip
 800ecf2:	4290      	cmp	r0, r2
 800ecf4:	bf88      	it	hi
 800ecf6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800ecfa:	1a12      	subs	r2, r2, r0
 800ecfc:	440c      	add	r4, r1
 800ecfe:	46c4      	mov	ip, r8
 800ed00:	005b      	lsls	r3, r3, #1
 800ed02:	3f01      	subs	r7, #1
 800ed04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ed08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ed0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ed10:	d1dd      	bne.n	800ecce <__ieee754_sqrt+0xb6>
 800ed12:	4313      	orrs	r3, r2
 800ed14:	d01b      	beq.n	800ed4e <__ieee754_sqrt+0x136>
 800ed16:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800edc4 <__ieee754_sqrt+0x1ac>
 800ed1a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800edc8 <__ieee754_sqrt+0x1b0>
 800ed1e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed22:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed26:	f7f1 faaf 	bl	8000288 <__aeabi_dsub>
 800ed2a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	4640      	mov	r0, r8
 800ed34:	4649      	mov	r1, r9
 800ed36:	f7f1 fedb 	bl	8000af0 <__aeabi_dcmple>
 800ed3a:	b140      	cbz	r0, 800ed4e <__ieee754_sqrt+0x136>
 800ed3c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800ed40:	e9da 0100 	ldrd	r0, r1, [sl]
 800ed44:	e9db 2300 	ldrd	r2, r3, [fp]
 800ed48:	d126      	bne.n	800ed98 <__ieee754_sqrt+0x180>
 800ed4a:	3501      	adds	r5, #1
 800ed4c:	463c      	mov	r4, r7
 800ed4e:	106a      	asrs	r2, r5, #1
 800ed50:	0863      	lsrs	r3, r4, #1
 800ed52:	07e9      	lsls	r1, r5, #31
 800ed54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ed58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ed5c:	bf48      	it	mi
 800ed5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ed62:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ed66:	461c      	mov	r4, r3
 800ed68:	e76d      	b.n	800ec46 <__ieee754_sqrt+0x2e>
 800ed6a:	0ad3      	lsrs	r3, r2, #11
 800ed6c:	3815      	subs	r0, #21
 800ed6e:	0552      	lsls	r2, r2, #21
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d0fa      	beq.n	800ed6a <__ieee754_sqrt+0x152>
 800ed74:	02dc      	lsls	r4, r3, #11
 800ed76:	d50a      	bpl.n	800ed8e <__ieee754_sqrt+0x176>
 800ed78:	f1c1 0420 	rsb	r4, r1, #32
 800ed7c:	fa22 f404 	lsr.w	r4, r2, r4
 800ed80:	1e4d      	subs	r5, r1, #1
 800ed82:	408a      	lsls	r2, r1
 800ed84:	4323      	orrs	r3, r4
 800ed86:	1b41      	subs	r1, r0, r5
 800ed88:	e772      	b.n	800ec70 <__ieee754_sqrt+0x58>
 800ed8a:	4608      	mov	r0, r1
 800ed8c:	e7f0      	b.n	800ed70 <__ieee754_sqrt+0x158>
 800ed8e:	005b      	lsls	r3, r3, #1
 800ed90:	3101      	adds	r1, #1
 800ed92:	e7ef      	b.n	800ed74 <__ieee754_sqrt+0x15c>
 800ed94:	46e0      	mov	r8, ip
 800ed96:	e7aa      	b.n	800ecee <__ieee754_sqrt+0xd6>
 800ed98:	f7f1 fa78 	bl	800028c <__adddf3>
 800ed9c:	e9da 8900 	ldrd	r8, r9, [sl]
 800eda0:	4602      	mov	r2, r0
 800eda2:	460b      	mov	r3, r1
 800eda4:	4640      	mov	r0, r8
 800eda6:	4649      	mov	r1, r9
 800eda8:	f7f1 fe98 	bl	8000adc <__aeabi_dcmplt>
 800edac:	b120      	cbz	r0, 800edb8 <__ieee754_sqrt+0x1a0>
 800edae:	1ca0      	adds	r0, r4, #2
 800edb0:	bf08      	it	eq
 800edb2:	3501      	addeq	r5, #1
 800edb4:	3402      	adds	r4, #2
 800edb6:	e7ca      	b.n	800ed4e <__ieee754_sqrt+0x136>
 800edb8:	3401      	adds	r4, #1
 800edba:	f024 0401 	bic.w	r4, r4, #1
 800edbe:	e7c6      	b.n	800ed4e <__ieee754_sqrt+0x136>
 800edc0:	7ff00000 	.word	0x7ff00000
 800edc4:	20000210 	.word	0x20000210
 800edc8:	20000218 	.word	0x20000218
 800edcc:	00000000 	.word	0x00000000

0800edd0 <__ieee754_rem_pio2>:
 800edd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd4:	ed2d 8b02 	vpush	{d8}
 800edd8:	ec55 4b10 	vmov	r4, r5, d0
 800eddc:	4bca      	ldr	r3, [pc, #808]	; (800f108 <__ieee754_rem_pio2+0x338>)
 800edde:	b08b      	sub	sp, #44	; 0x2c
 800ede0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ede4:	4598      	cmp	r8, r3
 800ede6:	4682      	mov	sl, r0
 800ede8:	9502      	str	r5, [sp, #8]
 800edea:	dc08      	bgt.n	800edfe <__ieee754_rem_pio2+0x2e>
 800edec:	2200      	movs	r2, #0
 800edee:	2300      	movs	r3, #0
 800edf0:	ed80 0b00 	vstr	d0, [r0]
 800edf4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800edf8:	f04f 0b00 	mov.w	fp, #0
 800edfc:	e028      	b.n	800ee50 <__ieee754_rem_pio2+0x80>
 800edfe:	4bc3      	ldr	r3, [pc, #780]	; (800f10c <__ieee754_rem_pio2+0x33c>)
 800ee00:	4598      	cmp	r8, r3
 800ee02:	dc78      	bgt.n	800eef6 <__ieee754_rem_pio2+0x126>
 800ee04:	9b02      	ldr	r3, [sp, #8]
 800ee06:	4ec2      	ldr	r6, [pc, #776]	; (800f110 <__ieee754_rem_pio2+0x340>)
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	ee10 0a10 	vmov	r0, s0
 800ee0e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f0d0 <__ieee754_rem_pio2+0x300>)
 800ee10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee14:	4629      	mov	r1, r5
 800ee16:	dd39      	ble.n	800ee8c <__ieee754_rem_pio2+0xbc>
 800ee18:	f7f1 fa36 	bl	8000288 <__aeabi_dsub>
 800ee1c:	45b0      	cmp	r8, r6
 800ee1e:	4604      	mov	r4, r0
 800ee20:	460d      	mov	r5, r1
 800ee22:	d01b      	beq.n	800ee5c <__ieee754_rem_pio2+0x8c>
 800ee24:	a3ac      	add	r3, pc, #688	; (adr r3, 800f0d8 <__ieee754_rem_pio2+0x308>)
 800ee26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2a:	f7f1 fa2d 	bl	8000288 <__aeabi_dsub>
 800ee2e:	4602      	mov	r2, r0
 800ee30:	460b      	mov	r3, r1
 800ee32:	e9ca 2300 	strd	r2, r3, [sl]
 800ee36:	4620      	mov	r0, r4
 800ee38:	4629      	mov	r1, r5
 800ee3a:	f7f1 fa25 	bl	8000288 <__aeabi_dsub>
 800ee3e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f0d8 <__ieee754_rem_pio2+0x308>)
 800ee40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee44:	f7f1 fa20 	bl	8000288 <__aeabi_dsub>
 800ee48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee4c:	f04f 0b01 	mov.w	fp, #1
 800ee50:	4658      	mov	r0, fp
 800ee52:	b00b      	add	sp, #44	; 0x2c
 800ee54:	ecbd 8b02 	vpop	{d8}
 800ee58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee5c:	a3a0      	add	r3, pc, #640	; (adr r3, 800f0e0 <__ieee754_rem_pio2+0x310>)
 800ee5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee62:	f7f1 fa11 	bl	8000288 <__aeabi_dsub>
 800ee66:	a3a0      	add	r3, pc, #640	; (adr r3, 800f0e8 <__ieee754_rem_pio2+0x318>)
 800ee68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6c:	4604      	mov	r4, r0
 800ee6e:	460d      	mov	r5, r1
 800ee70:	f7f1 fa0a 	bl	8000288 <__aeabi_dsub>
 800ee74:	4602      	mov	r2, r0
 800ee76:	460b      	mov	r3, r1
 800ee78:	e9ca 2300 	strd	r2, r3, [sl]
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	4629      	mov	r1, r5
 800ee80:	f7f1 fa02 	bl	8000288 <__aeabi_dsub>
 800ee84:	a398      	add	r3, pc, #608	; (adr r3, 800f0e8 <__ieee754_rem_pio2+0x318>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	e7db      	b.n	800ee44 <__ieee754_rem_pio2+0x74>
 800ee8c:	f7f1 f9fe 	bl	800028c <__adddf3>
 800ee90:	45b0      	cmp	r8, r6
 800ee92:	4604      	mov	r4, r0
 800ee94:	460d      	mov	r5, r1
 800ee96:	d016      	beq.n	800eec6 <__ieee754_rem_pio2+0xf6>
 800ee98:	a38f      	add	r3, pc, #572	; (adr r3, 800f0d8 <__ieee754_rem_pio2+0x308>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 f9f5 	bl	800028c <__adddf3>
 800eea2:	4602      	mov	r2, r0
 800eea4:	460b      	mov	r3, r1
 800eea6:	e9ca 2300 	strd	r2, r3, [sl]
 800eeaa:	4620      	mov	r0, r4
 800eeac:	4629      	mov	r1, r5
 800eeae:	f7f1 f9eb 	bl	8000288 <__aeabi_dsub>
 800eeb2:	a389      	add	r3, pc, #548	; (adr r3, 800f0d8 <__ieee754_rem_pio2+0x308>)
 800eeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb8:	f7f1 f9e8 	bl	800028c <__adddf3>
 800eebc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800eec0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eec4:	e7c4      	b.n	800ee50 <__ieee754_rem_pio2+0x80>
 800eec6:	a386      	add	r3, pc, #536	; (adr r3, 800f0e0 <__ieee754_rem_pio2+0x310>)
 800eec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eecc:	f7f1 f9de 	bl	800028c <__adddf3>
 800eed0:	a385      	add	r3, pc, #532	; (adr r3, 800f0e8 <__ieee754_rem_pio2+0x318>)
 800eed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed6:	4604      	mov	r4, r0
 800eed8:	460d      	mov	r5, r1
 800eeda:	f7f1 f9d7 	bl	800028c <__adddf3>
 800eede:	4602      	mov	r2, r0
 800eee0:	460b      	mov	r3, r1
 800eee2:	e9ca 2300 	strd	r2, r3, [sl]
 800eee6:	4620      	mov	r0, r4
 800eee8:	4629      	mov	r1, r5
 800eeea:	f7f1 f9cd 	bl	8000288 <__aeabi_dsub>
 800eeee:	a37e      	add	r3, pc, #504	; (adr r3, 800f0e8 <__ieee754_rem_pio2+0x318>)
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	e7e0      	b.n	800eeb8 <__ieee754_rem_pio2+0xe8>
 800eef6:	4b87      	ldr	r3, [pc, #540]	; (800f114 <__ieee754_rem_pio2+0x344>)
 800eef8:	4598      	cmp	r8, r3
 800eefa:	f300 80d8 	bgt.w	800f0ae <__ieee754_rem_pio2+0x2de>
 800eefe:	f000 fe45 	bl	800fb8c <fabs>
 800ef02:	ec55 4b10 	vmov	r4, r5, d0
 800ef06:	ee10 0a10 	vmov	r0, s0
 800ef0a:	a379      	add	r3, pc, #484	; (adr r3, 800f0f0 <__ieee754_rem_pio2+0x320>)
 800ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef10:	4629      	mov	r1, r5
 800ef12:	f7f1 fb71 	bl	80005f8 <__aeabi_dmul>
 800ef16:	4b80      	ldr	r3, [pc, #512]	; (800f118 <__ieee754_rem_pio2+0x348>)
 800ef18:	2200      	movs	r2, #0
 800ef1a:	f7f1 f9b7 	bl	800028c <__adddf3>
 800ef1e:	f7f1 fe1b 	bl	8000b58 <__aeabi_d2iz>
 800ef22:	4683      	mov	fp, r0
 800ef24:	f7f1 fafe 	bl	8000524 <__aeabi_i2d>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	ec43 2b18 	vmov	d8, r2, r3
 800ef30:	a367      	add	r3, pc, #412	; (adr r3, 800f0d0 <__ieee754_rem_pio2+0x300>)
 800ef32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef36:	f7f1 fb5f 	bl	80005f8 <__aeabi_dmul>
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	4620      	mov	r0, r4
 800ef40:	4629      	mov	r1, r5
 800ef42:	f7f1 f9a1 	bl	8000288 <__aeabi_dsub>
 800ef46:	a364      	add	r3, pc, #400	; (adr r3, 800f0d8 <__ieee754_rem_pio2+0x308>)
 800ef48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef4c:	4606      	mov	r6, r0
 800ef4e:	460f      	mov	r7, r1
 800ef50:	ec51 0b18 	vmov	r0, r1, d8
 800ef54:	f7f1 fb50 	bl	80005f8 <__aeabi_dmul>
 800ef58:	f1bb 0f1f 	cmp.w	fp, #31
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	460d      	mov	r5, r1
 800ef60:	dc0d      	bgt.n	800ef7e <__ieee754_rem_pio2+0x1ae>
 800ef62:	4b6e      	ldr	r3, [pc, #440]	; (800f11c <__ieee754_rem_pio2+0x34c>)
 800ef64:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800ef68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef6c:	4543      	cmp	r3, r8
 800ef6e:	d006      	beq.n	800ef7e <__ieee754_rem_pio2+0x1ae>
 800ef70:	4622      	mov	r2, r4
 800ef72:	462b      	mov	r3, r5
 800ef74:	4630      	mov	r0, r6
 800ef76:	4639      	mov	r1, r7
 800ef78:	f7f1 f986 	bl	8000288 <__aeabi_dsub>
 800ef7c:	e00e      	b.n	800ef9c <__ieee754_rem_pio2+0x1cc>
 800ef7e:	462b      	mov	r3, r5
 800ef80:	4622      	mov	r2, r4
 800ef82:	4630      	mov	r0, r6
 800ef84:	4639      	mov	r1, r7
 800ef86:	f7f1 f97f 	bl	8000288 <__aeabi_dsub>
 800ef8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ef8e:	9303      	str	r3, [sp, #12]
 800ef90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ef94:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ef98:	2b10      	cmp	r3, #16
 800ef9a:	dc02      	bgt.n	800efa2 <__ieee754_rem_pio2+0x1d2>
 800ef9c:	e9ca 0100 	strd	r0, r1, [sl]
 800efa0:	e039      	b.n	800f016 <__ieee754_rem_pio2+0x246>
 800efa2:	a34f      	add	r3, pc, #316	; (adr r3, 800f0e0 <__ieee754_rem_pio2+0x310>)
 800efa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa8:	ec51 0b18 	vmov	r0, r1, d8
 800efac:	f7f1 fb24 	bl	80005f8 <__aeabi_dmul>
 800efb0:	4604      	mov	r4, r0
 800efb2:	460d      	mov	r5, r1
 800efb4:	4602      	mov	r2, r0
 800efb6:	460b      	mov	r3, r1
 800efb8:	4630      	mov	r0, r6
 800efba:	4639      	mov	r1, r7
 800efbc:	f7f1 f964 	bl	8000288 <__aeabi_dsub>
 800efc0:	4602      	mov	r2, r0
 800efc2:	460b      	mov	r3, r1
 800efc4:	4680      	mov	r8, r0
 800efc6:	4689      	mov	r9, r1
 800efc8:	4630      	mov	r0, r6
 800efca:	4639      	mov	r1, r7
 800efcc:	f7f1 f95c 	bl	8000288 <__aeabi_dsub>
 800efd0:	4622      	mov	r2, r4
 800efd2:	462b      	mov	r3, r5
 800efd4:	f7f1 f958 	bl	8000288 <__aeabi_dsub>
 800efd8:	a343      	add	r3, pc, #268	; (adr r3, 800f0e8 <__ieee754_rem_pio2+0x318>)
 800efda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efde:	4604      	mov	r4, r0
 800efe0:	460d      	mov	r5, r1
 800efe2:	ec51 0b18 	vmov	r0, r1, d8
 800efe6:	f7f1 fb07 	bl	80005f8 <__aeabi_dmul>
 800efea:	4622      	mov	r2, r4
 800efec:	462b      	mov	r3, r5
 800efee:	f7f1 f94b 	bl	8000288 <__aeabi_dsub>
 800eff2:	4602      	mov	r2, r0
 800eff4:	460b      	mov	r3, r1
 800eff6:	4604      	mov	r4, r0
 800eff8:	460d      	mov	r5, r1
 800effa:	4640      	mov	r0, r8
 800effc:	4649      	mov	r1, r9
 800effe:	f7f1 f943 	bl	8000288 <__aeabi_dsub>
 800f002:	9a03      	ldr	r2, [sp, #12]
 800f004:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f008:	1ad3      	subs	r3, r2, r3
 800f00a:	2b31      	cmp	r3, #49	; 0x31
 800f00c:	dc24      	bgt.n	800f058 <__ieee754_rem_pio2+0x288>
 800f00e:	e9ca 0100 	strd	r0, r1, [sl]
 800f012:	4646      	mov	r6, r8
 800f014:	464f      	mov	r7, r9
 800f016:	e9da 8900 	ldrd	r8, r9, [sl]
 800f01a:	4630      	mov	r0, r6
 800f01c:	4642      	mov	r2, r8
 800f01e:	464b      	mov	r3, r9
 800f020:	4639      	mov	r1, r7
 800f022:	f7f1 f931 	bl	8000288 <__aeabi_dsub>
 800f026:	462b      	mov	r3, r5
 800f028:	4622      	mov	r2, r4
 800f02a:	f7f1 f92d 	bl	8000288 <__aeabi_dsub>
 800f02e:	9b02      	ldr	r3, [sp, #8]
 800f030:	2b00      	cmp	r3, #0
 800f032:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f036:	f6bf af0b 	bge.w	800ee50 <__ieee754_rem_pio2+0x80>
 800f03a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f03e:	f8ca 3004 	str.w	r3, [sl, #4]
 800f042:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f046:	f8ca 8000 	str.w	r8, [sl]
 800f04a:	f8ca 0008 	str.w	r0, [sl, #8]
 800f04e:	f8ca 300c 	str.w	r3, [sl, #12]
 800f052:	f1cb 0b00 	rsb	fp, fp, #0
 800f056:	e6fb      	b.n	800ee50 <__ieee754_rem_pio2+0x80>
 800f058:	a327      	add	r3, pc, #156	; (adr r3, 800f0f8 <__ieee754_rem_pio2+0x328>)
 800f05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05e:	ec51 0b18 	vmov	r0, r1, d8
 800f062:	f7f1 fac9 	bl	80005f8 <__aeabi_dmul>
 800f066:	4604      	mov	r4, r0
 800f068:	460d      	mov	r5, r1
 800f06a:	4602      	mov	r2, r0
 800f06c:	460b      	mov	r3, r1
 800f06e:	4640      	mov	r0, r8
 800f070:	4649      	mov	r1, r9
 800f072:	f7f1 f909 	bl	8000288 <__aeabi_dsub>
 800f076:	4602      	mov	r2, r0
 800f078:	460b      	mov	r3, r1
 800f07a:	4606      	mov	r6, r0
 800f07c:	460f      	mov	r7, r1
 800f07e:	4640      	mov	r0, r8
 800f080:	4649      	mov	r1, r9
 800f082:	f7f1 f901 	bl	8000288 <__aeabi_dsub>
 800f086:	4622      	mov	r2, r4
 800f088:	462b      	mov	r3, r5
 800f08a:	f7f1 f8fd 	bl	8000288 <__aeabi_dsub>
 800f08e:	a31c      	add	r3, pc, #112	; (adr r3, 800f100 <__ieee754_rem_pio2+0x330>)
 800f090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f094:	4604      	mov	r4, r0
 800f096:	460d      	mov	r5, r1
 800f098:	ec51 0b18 	vmov	r0, r1, d8
 800f09c:	f7f1 faac 	bl	80005f8 <__aeabi_dmul>
 800f0a0:	4622      	mov	r2, r4
 800f0a2:	462b      	mov	r3, r5
 800f0a4:	f7f1 f8f0 	bl	8000288 <__aeabi_dsub>
 800f0a8:	4604      	mov	r4, r0
 800f0aa:	460d      	mov	r5, r1
 800f0ac:	e760      	b.n	800ef70 <__ieee754_rem_pio2+0x1a0>
 800f0ae:	4b1c      	ldr	r3, [pc, #112]	; (800f120 <__ieee754_rem_pio2+0x350>)
 800f0b0:	4598      	cmp	r8, r3
 800f0b2:	dd37      	ble.n	800f124 <__ieee754_rem_pio2+0x354>
 800f0b4:	ee10 2a10 	vmov	r2, s0
 800f0b8:	462b      	mov	r3, r5
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	4629      	mov	r1, r5
 800f0be:	f7f1 f8e3 	bl	8000288 <__aeabi_dsub>
 800f0c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f0c6:	e9ca 0100 	strd	r0, r1, [sl]
 800f0ca:	e695      	b.n	800edf8 <__ieee754_rem_pio2+0x28>
 800f0cc:	f3af 8000 	nop.w
 800f0d0:	54400000 	.word	0x54400000
 800f0d4:	3ff921fb 	.word	0x3ff921fb
 800f0d8:	1a626331 	.word	0x1a626331
 800f0dc:	3dd0b461 	.word	0x3dd0b461
 800f0e0:	1a600000 	.word	0x1a600000
 800f0e4:	3dd0b461 	.word	0x3dd0b461
 800f0e8:	2e037073 	.word	0x2e037073
 800f0ec:	3ba3198a 	.word	0x3ba3198a
 800f0f0:	6dc9c883 	.word	0x6dc9c883
 800f0f4:	3fe45f30 	.word	0x3fe45f30
 800f0f8:	2e000000 	.word	0x2e000000
 800f0fc:	3ba3198a 	.word	0x3ba3198a
 800f100:	252049c1 	.word	0x252049c1
 800f104:	397b839a 	.word	0x397b839a
 800f108:	3fe921fb 	.word	0x3fe921fb
 800f10c:	4002d97b 	.word	0x4002d97b
 800f110:	3ff921fb 	.word	0x3ff921fb
 800f114:	413921fb 	.word	0x413921fb
 800f118:	3fe00000 	.word	0x3fe00000
 800f11c:	08010398 	.word	0x08010398
 800f120:	7fefffff 	.word	0x7fefffff
 800f124:	ea4f 5628 	mov.w	r6, r8, asr #20
 800f128:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800f12c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800f130:	4620      	mov	r0, r4
 800f132:	460d      	mov	r5, r1
 800f134:	f7f1 fd10 	bl	8000b58 <__aeabi_d2iz>
 800f138:	f7f1 f9f4 	bl	8000524 <__aeabi_i2d>
 800f13c:	4602      	mov	r2, r0
 800f13e:	460b      	mov	r3, r1
 800f140:	4620      	mov	r0, r4
 800f142:	4629      	mov	r1, r5
 800f144:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f148:	f7f1 f89e 	bl	8000288 <__aeabi_dsub>
 800f14c:	4b21      	ldr	r3, [pc, #132]	; (800f1d4 <__ieee754_rem_pio2+0x404>)
 800f14e:	2200      	movs	r2, #0
 800f150:	f7f1 fa52 	bl	80005f8 <__aeabi_dmul>
 800f154:	460d      	mov	r5, r1
 800f156:	4604      	mov	r4, r0
 800f158:	f7f1 fcfe 	bl	8000b58 <__aeabi_d2iz>
 800f15c:	f7f1 f9e2 	bl	8000524 <__aeabi_i2d>
 800f160:	4602      	mov	r2, r0
 800f162:	460b      	mov	r3, r1
 800f164:	4620      	mov	r0, r4
 800f166:	4629      	mov	r1, r5
 800f168:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f16c:	f7f1 f88c 	bl	8000288 <__aeabi_dsub>
 800f170:	4b18      	ldr	r3, [pc, #96]	; (800f1d4 <__ieee754_rem_pio2+0x404>)
 800f172:	2200      	movs	r2, #0
 800f174:	f7f1 fa40 	bl	80005f8 <__aeabi_dmul>
 800f178:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f17c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f180:	2703      	movs	r7, #3
 800f182:	2400      	movs	r4, #0
 800f184:	2500      	movs	r5, #0
 800f186:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800f18a:	4622      	mov	r2, r4
 800f18c:	462b      	mov	r3, r5
 800f18e:	46b9      	mov	r9, r7
 800f190:	3f01      	subs	r7, #1
 800f192:	f7f1 fc99 	bl	8000ac8 <__aeabi_dcmpeq>
 800f196:	2800      	cmp	r0, #0
 800f198:	d1f5      	bne.n	800f186 <__ieee754_rem_pio2+0x3b6>
 800f19a:	4b0f      	ldr	r3, [pc, #60]	; (800f1d8 <__ieee754_rem_pio2+0x408>)
 800f19c:	9301      	str	r3, [sp, #4]
 800f19e:	2302      	movs	r3, #2
 800f1a0:	9300      	str	r3, [sp, #0]
 800f1a2:	4632      	mov	r2, r6
 800f1a4:	464b      	mov	r3, r9
 800f1a6:	4651      	mov	r1, sl
 800f1a8:	a804      	add	r0, sp, #16
 800f1aa:	f000 f819 	bl	800f1e0 <__kernel_rem_pio2>
 800f1ae:	9b02      	ldr	r3, [sp, #8]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	4683      	mov	fp, r0
 800f1b4:	f6bf ae4c 	bge.w	800ee50 <__ieee754_rem_pio2+0x80>
 800f1b8:	e9da 2100 	ldrd	r2, r1, [sl]
 800f1bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1c0:	e9ca 2300 	strd	r2, r3, [sl]
 800f1c4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f1c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f1cc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f1d0:	e73f      	b.n	800f052 <__ieee754_rem_pio2+0x282>
 800f1d2:	bf00      	nop
 800f1d4:	41700000 	.word	0x41700000
 800f1d8:	08010418 	.word	0x08010418
 800f1dc:	00000000 	.word	0x00000000

0800f1e0 <__kernel_rem_pio2>:
 800f1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e4:	ed2d 8b02 	vpush	{d8}
 800f1e8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800f1ec:	f112 0f14 	cmn.w	r2, #20
 800f1f0:	9306      	str	r3, [sp, #24]
 800f1f2:	9104      	str	r1, [sp, #16]
 800f1f4:	4bc2      	ldr	r3, [pc, #776]	; (800f500 <__kernel_rem_pio2+0x320>)
 800f1f6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800f1f8:	9009      	str	r0, [sp, #36]	; 0x24
 800f1fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1fe:	9300      	str	r3, [sp, #0]
 800f200:	9b06      	ldr	r3, [sp, #24]
 800f202:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f206:	bfa8      	it	ge
 800f208:	1ed4      	subge	r4, r2, #3
 800f20a:	9305      	str	r3, [sp, #20]
 800f20c:	bfb2      	itee	lt
 800f20e:	2400      	movlt	r4, #0
 800f210:	2318      	movge	r3, #24
 800f212:	fb94 f4f3 	sdivge	r4, r4, r3
 800f216:	f06f 0317 	mvn.w	r3, #23
 800f21a:	fb04 3303 	mla	r3, r4, r3, r3
 800f21e:	eb03 0a02 	add.w	sl, r3, r2
 800f222:	9b00      	ldr	r3, [sp, #0]
 800f224:	9a05      	ldr	r2, [sp, #20]
 800f226:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800f4f0 <__kernel_rem_pio2+0x310>
 800f22a:	eb03 0802 	add.w	r8, r3, r2
 800f22e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f230:	1aa7      	subs	r7, r4, r2
 800f232:	ae20      	add	r6, sp, #128	; 0x80
 800f234:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f238:	2500      	movs	r5, #0
 800f23a:	4545      	cmp	r5, r8
 800f23c:	dd13      	ble.n	800f266 <__kernel_rem_pio2+0x86>
 800f23e:	9b06      	ldr	r3, [sp, #24]
 800f240:	aa20      	add	r2, sp, #128	; 0x80
 800f242:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f246:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800f24a:	f04f 0800 	mov.w	r8, #0
 800f24e:	9b00      	ldr	r3, [sp, #0]
 800f250:	4598      	cmp	r8, r3
 800f252:	dc31      	bgt.n	800f2b8 <__kernel_rem_pio2+0xd8>
 800f254:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800f4f0 <__kernel_rem_pio2+0x310>
 800f258:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800f25c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f260:	462f      	mov	r7, r5
 800f262:	2600      	movs	r6, #0
 800f264:	e01b      	b.n	800f29e <__kernel_rem_pio2+0xbe>
 800f266:	42ef      	cmn	r7, r5
 800f268:	d407      	bmi.n	800f27a <__kernel_rem_pio2+0x9a>
 800f26a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f26e:	f7f1 f959 	bl	8000524 <__aeabi_i2d>
 800f272:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f276:	3501      	adds	r5, #1
 800f278:	e7df      	b.n	800f23a <__kernel_rem_pio2+0x5a>
 800f27a:	ec51 0b18 	vmov	r0, r1, d8
 800f27e:	e7f8      	b.n	800f272 <__kernel_rem_pio2+0x92>
 800f280:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f284:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f288:	f7f1 f9b6 	bl	80005f8 <__aeabi_dmul>
 800f28c:	4602      	mov	r2, r0
 800f28e:	460b      	mov	r3, r1
 800f290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f294:	f7f0 fffa 	bl	800028c <__adddf3>
 800f298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f29c:	3601      	adds	r6, #1
 800f29e:	9b05      	ldr	r3, [sp, #20]
 800f2a0:	429e      	cmp	r6, r3
 800f2a2:	f1a7 0708 	sub.w	r7, r7, #8
 800f2a6:	ddeb      	ble.n	800f280 <__kernel_rem_pio2+0xa0>
 800f2a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2ac:	f108 0801 	add.w	r8, r8, #1
 800f2b0:	ecab 7b02 	vstmia	fp!, {d7}
 800f2b4:	3508      	adds	r5, #8
 800f2b6:	e7ca      	b.n	800f24e <__kernel_rem_pio2+0x6e>
 800f2b8:	9b00      	ldr	r3, [sp, #0]
 800f2ba:	aa0c      	add	r2, sp, #48	; 0x30
 800f2bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f2c2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800f2c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f2c8:	9c00      	ldr	r4, [sp, #0]
 800f2ca:	930a      	str	r3, [sp, #40]	; 0x28
 800f2cc:	00e3      	lsls	r3, r4, #3
 800f2ce:	9308      	str	r3, [sp, #32]
 800f2d0:	ab98      	add	r3, sp, #608	; 0x260
 800f2d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f2d6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f2da:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800f2de:	ab70      	add	r3, sp, #448	; 0x1c0
 800f2e0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f2e4:	46c3      	mov	fp, r8
 800f2e6:	46a1      	mov	r9, r4
 800f2e8:	f1b9 0f00 	cmp.w	r9, #0
 800f2ec:	f1a5 0508 	sub.w	r5, r5, #8
 800f2f0:	dc77      	bgt.n	800f3e2 <__kernel_rem_pio2+0x202>
 800f2f2:	ec47 6b10 	vmov	d0, r6, r7
 800f2f6:	4650      	mov	r0, sl
 800f2f8:	f000 fc52 	bl	800fba0 <scalbn>
 800f2fc:	ec57 6b10 	vmov	r6, r7, d0
 800f300:	2200      	movs	r2, #0
 800f302:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f306:	ee10 0a10 	vmov	r0, s0
 800f30a:	4639      	mov	r1, r7
 800f30c:	f7f1 f974 	bl	80005f8 <__aeabi_dmul>
 800f310:	ec41 0b10 	vmov	d0, r0, r1
 800f314:	f000 fcc4 	bl	800fca0 <floor>
 800f318:	4b7a      	ldr	r3, [pc, #488]	; (800f504 <__kernel_rem_pio2+0x324>)
 800f31a:	ec51 0b10 	vmov	r0, r1, d0
 800f31e:	2200      	movs	r2, #0
 800f320:	f7f1 f96a 	bl	80005f8 <__aeabi_dmul>
 800f324:	4602      	mov	r2, r0
 800f326:	460b      	mov	r3, r1
 800f328:	4630      	mov	r0, r6
 800f32a:	4639      	mov	r1, r7
 800f32c:	f7f0 ffac 	bl	8000288 <__aeabi_dsub>
 800f330:	460f      	mov	r7, r1
 800f332:	4606      	mov	r6, r0
 800f334:	f7f1 fc10 	bl	8000b58 <__aeabi_d2iz>
 800f338:	9002      	str	r0, [sp, #8]
 800f33a:	f7f1 f8f3 	bl	8000524 <__aeabi_i2d>
 800f33e:	4602      	mov	r2, r0
 800f340:	460b      	mov	r3, r1
 800f342:	4630      	mov	r0, r6
 800f344:	4639      	mov	r1, r7
 800f346:	f7f0 ff9f 	bl	8000288 <__aeabi_dsub>
 800f34a:	f1ba 0f00 	cmp.w	sl, #0
 800f34e:	4606      	mov	r6, r0
 800f350:	460f      	mov	r7, r1
 800f352:	dd6d      	ble.n	800f430 <__kernel_rem_pio2+0x250>
 800f354:	1e61      	subs	r1, r4, #1
 800f356:	ab0c      	add	r3, sp, #48	; 0x30
 800f358:	9d02      	ldr	r5, [sp, #8]
 800f35a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f35e:	f1ca 0018 	rsb	r0, sl, #24
 800f362:	fa43 f200 	asr.w	r2, r3, r0
 800f366:	4415      	add	r5, r2
 800f368:	4082      	lsls	r2, r0
 800f36a:	1a9b      	subs	r3, r3, r2
 800f36c:	aa0c      	add	r2, sp, #48	; 0x30
 800f36e:	9502      	str	r5, [sp, #8]
 800f370:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f374:	f1ca 0217 	rsb	r2, sl, #23
 800f378:	fa43 fb02 	asr.w	fp, r3, r2
 800f37c:	f1bb 0f00 	cmp.w	fp, #0
 800f380:	dd65      	ble.n	800f44e <__kernel_rem_pio2+0x26e>
 800f382:	9b02      	ldr	r3, [sp, #8]
 800f384:	2200      	movs	r2, #0
 800f386:	3301      	adds	r3, #1
 800f388:	9302      	str	r3, [sp, #8]
 800f38a:	4615      	mov	r5, r2
 800f38c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f390:	4294      	cmp	r4, r2
 800f392:	f300 809f 	bgt.w	800f4d4 <__kernel_rem_pio2+0x2f4>
 800f396:	f1ba 0f00 	cmp.w	sl, #0
 800f39a:	dd07      	ble.n	800f3ac <__kernel_rem_pio2+0x1cc>
 800f39c:	f1ba 0f01 	cmp.w	sl, #1
 800f3a0:	f000 80c1 	beq.w	800f526 <__kernel_rem_pio2+0x346>
 800f3a4:	f1ba 0f02 	cmp.w	sl, #2
 800f3a8:	f000 80c7 	beq.w	800f53a <__kernel_rem_pio2+0x35a>
 800f3ac:	f1bb 0f02 	cmp.w	fp, #2
 800f3b0:	d14d      	bne.n	800f44e <__kernel_rem_pio2+0x26e>
 800f3b2:	4632      	mov	r2, r6
 800f3b4:	463b      	mov	r3, r7
 800f3b6:	4954      	ldr	r1, [pc, #336]	; (800f508 <__kernel_rem_pio2+0x328>)
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	f7f0 ff65 	bl	8000288 <__aeabi_dsub>
 800f3be:	4606      	mov	r6, r0
 800f3c0:	460f      	mov	r7, r1
 800f3c2:	2d00      	cmp	r5, #0
 800f3c4:	d043      	beq.n	800f44e <__kernel_rem_pio2+0x26e>
 800f3c6:	4650      	mov	r0, sl
 800f3c8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800f4f8 <__kernel_rem_pio2+0x318>
 800f3cc:	f000 fbe8 	bl	800fba0 <scalbn>
 800f3d0:	4630      	mov	r0, r6
 800f3d2:	4639      	mov	r1, r7
 800f3d4:	ec53 2b10 	vmov	r2, r3, d0
 800f3d8:	f7f0 ff56 	bl	8000288 <__aeabi_dsub>
 800f3dc:	4606      	mov	r6, r0
 800f3de:	460f      	mov	r7, r1
 800f3e0:	e035      	b.n	800f44e <__kernel_rem_pio2+0x26e>
 800f3e2:	4b4a      	ldr	r3, [pc, #296]	; (800f50c <__kernel_rem_pio2+0x32c>)
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	4630      	mov	r0, r6
 800f3e8:	4639      	mov	r1, r7
 800f3ea:	f7f1 f905 	bl	80005f8 <__aeabi_dmul>
 800f3ee:	f7f1 fbb3 	bl	8000b58 <__aeabi_d2iz>
 800f3f2:	f7f1 f897 	bl	8000524 <__aeabi_i2d>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	460b      	mov	r3, r1
 800f3fa:	ec43 2b18 	vmov	d8, r2, r3
 800f3fe:	4b44      	ldr	r3, [pc, #272]	; (800f510 <__kernel_rem_pio2+0x330>)
 800f400:	2200      	movs	r2, #0
 800f402:	f7f1 f8f9 	bl	80005f8 <__aeabi_dmul>
 800f406:	4602      	mov	r2, r0
 800f408:	460b      	mov	r3, r1
 800f40a:	4630      	mov	r0, r6
 800f40c:	4639      	mov	r1, r7
 800f40e:	f7f0 ff3b 	bl	8000288 <__aeabi_dsub>
 800f412:	f7f1 fba1 	bl	8000b58 <__aeabi_d2iz>
 800f416:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f41a:	f84b 0b04 	str.w	r0, [fp], #4
 800f41e:	ec51 0b18 	vmov	r0, r1, d8
 800f422:	f7f0 ff33 	bl	800028c <__adddf3>
 800f426:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800f42a:	4606      	mov	r6, r0
 800f42c:	460f      	mov	r7, r1
 800f42e:	e75b      	b.n	800f2e8 <__kernel_rem_pio2+0x108>
 800f430:	d106      	bne.n	800f440 <__kernel_rem_pio2+0x260>
 800f432:	1e63      	subs	r3, r4, #1
 800f434:	aa0c      	add	r2, sp, #48	; 0x30
 800f436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f43a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800f43e:	e79d      	b.n	800f37c <__kernel_rem_pio2+0x19c>
 800f440:	4b34      	ldr	r3, [pc, #208]	; (800f514 <__kernel_rem_pio2+0x334>)
 800f442:	2200      	movs	r2, #0
 800f444:	f7f1 fb5e 	bl	8000b04 <__aeabi_dcmpge>
 800f448:	2800      	cmp	r0, #0
 800f44a:	d140      	bne.n	800f4ce <__kernel_rem_pio2+0x2ee>
 800f44c:	4683      	mov	fp, r0
 800f44e:	2200      	movs	r2, #0
 800f450:	2300      	movs	r3, #0
 800f452:	4630      	mov	r0, r6
 800f454:	4639      	mov	r1, r7
 800f456:	f7f1 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800f45a:	2800      	cmp	r0, #0
 800f45c:	f000 80c1 	beq.w	800f5e2 <__kernel_rem_pio2+0x402>
 800f460:	1e65      	subs	r5, r4, #1
 800f462:	462b      	mov	r3, r5
 800f464:	2200      	movs	r2, #0
 800f466:	9900      	ldr	r1, [sp, #0]
 800f468:	428b      	cmp	r3, r1
 800f46a:	da6d      	bge.n	800f548 <__kernel_rem_pio2+0x368>
 800f46c:	2a00      	cmp	r2, #0
 800f46e:	f000 808a 	beq.w	800f586 <__kernel_rem_pio2+0x3a6>
 800f472:	ab0c      	add	r3, sp, #48	; 0x30
 800f474:	f1aa 0a18 	sub.w	sl, sl, #24
 800f478:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f000 80ae 	beq.w	800f5de <__kernel_rem_pio2+0x3fe>
 800f482:	4650      	mov	r0, sl
 800f484:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800f4f8 <__kernel_rem_pio2+0x318>
 800f488:	f000 fb8a 	bl	800fba0 <scalbn>
 800f48c:	1c6b      	adds	r3, r5, #1
 800f48e:	00da      	lsls	r2, r3, #3
 800f490:	9205      	str	r2, [sp, #20]
 800f492:	ec57 6b10 	vmov	r6, r7, d0
 800f496:	aa70      	add	r2, sp, #448	; 0x1c0
 800f498:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800f50c <__kernel_rem_pio2+0x32c>
 800f49c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800f4a0:	462c      	mov	r4, r5
 800f4a2:	f04f 0800 	mov.w	r8, #0
 800f4a6:	2c00      	cmp	r4, #0
 800f4a8:	f280 80d4 	bge.w	800f654 <__kernel_rem_pio2+0x474>
 800f4ac:	462c      	mov	r4, r5
 800f4ae:	2c00      	cmp	r4, #0
 800f4b0:	f2c0 8102 	blt.w	800f6b8 <__kernel_rem_pio2+0x4d8>
 800f4b4:	4b18      	ldr	r3, [pc, #96]	; (800f518 <__kernel_rem_pio2+0x338>)
 800f4b6:	461e      	mov	r6, r3
 800f4b8:	ab70      	add	r3, sp, #448	; 0x1c0
 800f4ba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800f4be:	1b2b      	subs	r3, r5, r4
 800f4c0:	f04f 0900 	mov.w	r9, #0
 800f4c4:	f04f 0a00 	mov.w	sl, #0
 800f4c8:	2700      	movs	r7, #0
 800f4ca:	9306      	str	r3, [sp, #24]
 800f4cc:	e0e6      	b.n	800f69c <__kernel_rem_pio2+0x4bc>
 800f4ce:	f04f 0b02 	mov.w	fp, #2
 800f4d2:	e756      	b.n	800f382 <__kernel_rem_pio2+0x1a2>
 800f4d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f4d8:	bb05      	cbnz	r5, 800f51c <__kernel_rem_pio2+0x33c>
 800f4da:	b123      	cbz	r3, 800f4e6 <__kernel_rem_pio2+0x306>
 800f4dc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f4e0:	f8c8 3000 	str.w	r3, [r8]
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	3201      	adds	r2, #1
 800f4e8:	f108 0804 	add.w	r8, r8, #4
 800f4ec:	461d      	mov	r5, r3
 800f4ee:	e74f      	b.n	800f390 <__kernel_rem_pio2+0x1b0>
	...
 800f4fc:	3ff00000 	.word	0x3ff00000
 800f500:	08010560 	.word	0x08010560
 800f504:	40200000 	.word	0x40200000
 800f508:	3ff00000 	.word	0x3ff00000
 800f50c:	3e700000 	.word	0x3e700000
 800f510:	41700000 	.word	0x41700000
 800f514:	3fe00000 	.word	0x3fe00000
 800f518:	08010520 	.word	0x08010520
 800f51c:	1acb      	subs	r3, r1, r3
 800f51e:	f8c8 3000 	str.w	r3, [r8]
 800f522:	462b      	mov	r3, r5
 800f524:	e7df      	b.n	800f4e6 <__kernel_rem_pio2+0x306>
 800f526:	1e62      	subs	r2, r4, #1
 800f528:	ab0c      	add	r3, sp, #48	; 0x30
 800f52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f52e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f532:	a90c      	add	r1, sp, #48	; 0x30
 800f534:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f538:	e738      	b.n	800f3ac <__kernel_rem_pio2+0x1cc>
 800f53a:	1e62      	subs	r2, r4, #1
 800f53c:	ab0c      	add	r3, sp, #48	; 0x30
 800f53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f542:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f546:	e7f4      	b.n	800f532 <__kernel_rem_pio2+0x352>
 800f548:	a90c      	add	r1, sp, #48	; 0x30
 800f54a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f54e:	3b01      	subs	r3, #1
 800f550:	430a      	orrs	r2, r1
 800f552:	e788      	b.n	800f466 <__kernel_rem_pio2+0x286>
 800f554:	3301      	adds	r3, #1
 800f556:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f55a:	2900      	cmp	r1, #0
 800f55c:	d0fa      	beq.n	800f554 <__kernel_rem_pio2+0x374>
 800f55e:	9a08      	ldr	r2, [sp, #32]
 800f560:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800f564:	446a      	add	r2, sp
 800f566:	3a98      	subs	r2, #152	; 0x98
 800f568:	9208      	str	r2, [sp, #32]
 800f56a:	9a06      	ldr	r2, [sp, #24]
 800f56c:	a920      	add	r1, sp, #128	; 0x80
 800f56e:	18a2      	adds	r2, r4, r2
 800f570:	18e3      	adds	r3, r4, r3
 800f572:	f104 0801 	add.w	r8, r4, #1
 800f576:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800f57a:	9302      	str	r3, [sp, #8]
 800f57c:	9b02      	ldr	r3, [sp, #8]
 800f57e:	4543      	cmp	r3, r8
 800f580:	da04      	bge.n	800f58c <__kernel_rem_pio2+0x3ac>
 800f582:	461c      	mov	r4, r3
 800f584:	e6a2      	b.n	800f2cc <__kernel_rem_pio2+0xec>
 800f586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f588:	2301      	movs	r3, #1
 800f58a:	e7e4      	b.n	800f556 <__kernel_rem_pio2+0x376>
 800f58c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f58e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f592:	f7f0 ffc7 	bl	8000524 <__aeabi_i2d>
 800f596:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f59c:	46ab      	mov	fp, r5
 800f59e:	461c      	mov	r4, r3
 800f5a0:	f04f 0900 	mov.w	r9, #0
 800f5a4:	2600      	movs	r6, #0
 800f5a6:	2700      	movs	r7, #0
 800f5a8:	9b05      	ldr	r3, [sp, #20]
 800f5aa:	4599      	cmp	r9, r3
 800f5ac:	dd06      	ble.n	800f5bc <__kernel_rem_pio2+0x3dc>
 800f5ae:	9b08      	ldr	r3, [sp, #32]
 800f5b0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f5b4:	f108 0801 	add.w	r8, r8, #1
 800f5b8:	9308      	str	r3, [sp, #32]
 800f5ba:	e7df      	b.n	800f57c <__kernel_rem_pio2+0x39c>
 800f5bc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f5c0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f5c4:	f7f1 f818 	bl	80005f8 <__aeabi_dmul>
 800f5c8:	4602      	mov	r2, r0
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	4639      	mov	r1, r7
 800f5d0:	f7f0 fe5c 	bl	800028c <__adddf3>
 800f5d4:	f109 0901 	add.w	r9, r9, #1
 800f5d8:	4606      	mov	r6, r0
 800f5da:	460f      	mov	r7, r1
 800f5dc:	e7e4      	b.n	800f5a8 <__kernel_rem_pio2+0x3c8>
 800f5de:	3d01      	subs	r5, #1
 800f5e0:	e747      	b.n	800f472 <__kernel_rem_pio2+0x292>
 800f5e2:	ec47 6b10 	vmov	d0, r6, r7
 800f5e6:	f1ca 0000 	rsb	r0, sl, #0
 800f5ea:	f000 fad9 	bl	800fba0 <scalbn>
 800f5ee:	ec57 6b10 	vmov	r6, r7, d0
 800f5f2:	4ba0      	ldr	r3, [pc, #640]	; (800f874 <__kernel_rem_pio2+0x694>)
 800f5f4:	ee10 0a10 	vmov	r0, s0
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	4639      	mov	r1, r7
 800f5fc:	f7f1 fa82 	bl	8000b04 <__aeabi_dcmpge>
 800f600:	b1f8      	cbz	r0, 800f642 <__kernel_rem_pio2+0x462>
 800f602:	4b9d      	ldr	r3, [pc, #628]	; (800f878 <__kernel_rem_pio2+0x698>)
 800f604:	2200      	movs	r2, #0
 800f606:	4630      	mov	r0, r6
 800f608:	4639      	mov	r1, r7
 800f60a:	f7f0 fff5 	bl	80005f8 <__aeabi_dmul>
 800f60e:	f7f1 faa3 	bl	8000b58 <__aeabi_d2iz>
 800f612:	4680      	mov	r8, r0
 800f614:	f7f0 ff86 	bl	8000524 <__aeabi_i2d>
 800f618:	4b96      	ldr	r3, [pc, #600]	; (800f874 <__kernel_rem_pio2+0x694>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	f7f0 ffec 	bl	80005f8 <__aeabi_dmul>
 800f620:	460b      	mov	r3, r1
 800f622:	4602      	mov	r2, r0
 800f624:	4639      	mov	r1, r7
 800f626:	4630      	mov	r0, r6
 800f628:	f7f0 fe2e 	bl	8000288 <__aeabi_dsub>
 800f62c:	f7f1 fa94 	bl	8000b58 <__aeabi_d2iz>
 800f630:	1c65      	adds	r5, r4, #1
 800f632:	ab0c      	add	r3, sp, #48	; 0x30
 800f634:	f10a 0a18 	add.w	sl, sl, #24
 800f638:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f63c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f640:	e71f      	b.n	800f482 <__kernel_rem_pio2+0x2a2>
 800f642:	4630      	mov	r0, r6
 800f644:	4639      	mov	r1, r7
 800f646:	f7f1 fa87 	bl	8000b58 <__aeabi_d2iz>
 800f64a:	ab0c      	add	r3, sp, #48	; 0x30
 800f64c:	4625      	mov	r5, r4
 800f64e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f652:	e716      	b.n	800f482 <__kernel_rem_pio2+0x2a2>
 800f654:	ab0c      	add	r3, sp, #48	; 0x30
 800f656:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f65a:	f7f0 ff63 	bl	8000524 <__aeabi_i2d>
 800f65e:	4632      	mov	r2, r6
 800f660:	463b      	mov	r3, r7
 800f662:	f7f0 ffc9 	bl	80005f8 <__aeabi_dmul>
 800f666:	4642      	mov	r2, r8
 800f668:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f66c:	464b      	mov	r3, r9
 800f66e:	4630      	mov	r0, r6
 800f670:	4639      	mov	r1, r7
 800f672:	f7f0 ffc1 	bl	80005f8 <__aeabi_dmul>
 800f676:	3c01      	subs	r4, #1
 800f678:	4606      	mov	r6, r0
 800f67a:	460f      	mov	r7, r1
 800f67c:	e713      	b.n	800f4a6 <__kernel_rem_pio2+0x2c6>
 800f67e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f682:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f686:	f7f0 ffb7 	bl	80005f8 <__aeabi_dmul>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4648      	mov	r0, r9
 800f690:	4651      	mov	r1, sl
 800f692:	f7f0 fdfb 	bl	800028c <__adddf3>
 800f696:	3701      	adds	r7, #1
 800f698:	4681      	mov	r9, r0
 800f69a:	468a      	mov	sl, r1
 800f69c:	9b00      	ldr	r3, [sp, #0]
 800f69e:	429f      	cmp	r7, r3
 800f6a0:	dc02      	bgt.n	800f6a8 <__kernel_rem_pio2+0x4c8>
 800f6a2:	9b06      	ldr	r3, [sp, #24]
 800f6a4:	429f      	cmp	r7, r3
 800f6a6:	ddea      	ble.n	800f67e <__kernel_rem_pio2+0x49e>
 800f6a8:	9a06      	ldr	r2, [sp, #24]
 800f6aa:	ab48      	add	r3, sp, #288	; 0x120
 800f6ac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f6b0:	e9c6 9a00 	strd	r9, sl, [r6]
 800f6b4:	3c01      	subs	r4, #1
 800f6b6:	e6fa      	b.n	800f4ae <__kernel_rem_pio2+0x2ce>
 800f6b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f6ba:	2b02      	cmp	r3, #2
 800f6bc:	dc0b      	bgt.n	800f6d6 <__kernel_rem_pio2+0x4f6>
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	dc39      	bgt.n	800f736 <__kernel_rem_pio2+0x556>
 800f6c2:	d05d      	beq.n	800f780 <__kernel_rem_pio2+0x5a0>
 800f6c4:	9b02      	ldr	r3, [sp, #8]
 800f6c6:	f003 0007 	and.w	r0, r3, #7
 800f6ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f6ce:	ecbd 8b02 	vpop	{d8}
 800f6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f6d8:	2b03      	cmp	r3, #3
 800f6da:	d1f3      	bne.n	800f6c4 <__kernel_rem_pio2+0x4e4>
 800f6dc:	9b05      	ldr	r3, [sp, #20]
 800f6de:	9500      	str	r5, [sp, #0]
 800f6e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f6e4:	eb0d 0403 	add.w	r4, sp, r3
 800f6e8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f6ec:	46a2      	mov	sl, r4
 800f6ee:	9b00      	ldr	r3, [sp, #0]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	f1aa 0a08 	sub.w	sl, sl, #8
 800f6f6:	dc69      	bgt.n	800f7cc <__kernel_rem_pio2+0x5ec>
 800f6f8:	46aa      	mov	sl, r5
 800f6fa:	f1ba 0f01 	cmp.w	sl, #1
 800f6fe:	f1a4 0408 	sub.w	r4, r4, #8
 800f702:	f300 8083 	bgt.w	800f80c <__kernel_rem_pio2+0x62c>
 800f706:	9c05      	ldr	r4, [sp, #20]
 800f708:	ab48      	add	r3, sp, #288	; 0x120
 800f70a:	441c      	add	r4, r3
 800f70c:	2000      	movs	r0, #0
 800f70e:	2100      	movs	r1, #0
 800f710:	2d01      	cmp	r5, #1
 800f712:	f300 809a 	bgt.w	800f84a <__kernel_rem_pio2+0x66a>
 800f716:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f71a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f71e:	f1bb 0f00 	cmp.w	fp, #0
 800f722:	f040 8098 	bne.w	800f856 <__kernel_rem_pio2+0x676>
 800f726:	9b04      	ldr	r3, [sp, #16]
 800f728:	e9c3 7800 	strd	r7, r8, [r3]
 800f72c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f730:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f734:	e7c6      	b.n	800f6c4 <__kernel_rem_pio2+0x4e4>
 800f736:	9e05      	ldr	r6, [sp, #20]
 800f738:	ab48      	add	r3, sp, #288	; 0x120
 800f73a:	441e      	add	r6, r3
 800f73c:	462c      	mov	r4, r5
 800f73e:	2000      	movs	r0, #0
 800f740:	2100      	movs	r1, #0
 800f742:	2c00      	cmp	r4, #0
 800f744:	da33      	bge.n	800f7ae <__kernel_rem_pio2+0x5ce>
 800f746:	f1bb 0f00 	cmp.w	fp, #0
 800f74a:	d036      	beq.n	800f7ba <__kernel_rem_pio2+0x5da>
 800f74c:	4602      	mov	r2, r0
 800f74e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f752:	9c04      	ldr	r4, [sp, #16]
 800f754:	e9c4 2300 	strd	r2, r3, [r4]
 800f758:	4602      	mov	r2, r0
 800f75a:	460b      	mov	r3, r1
 800f75c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f760:	f7f0 fd92 	bl	8000288 <__aeabi_dsub>
 800f764:	ae4a      	add	r6, sp, #296	; 0x128
 800f766:	2401      	movs	r4, #1
 800f768:	42a5      	cmp	r5, r4
 800f76a:	da29      	bge.n	800f7c0 <__kernel_rem_pio2+0x5e0>
 800f76c:	f1bb 0f00 	cmp.w	fp, #0
 800f770:	d002      	beq.n	800f778 <__kernel_rem_pio2+0x598>
 800f772:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f776:	4619      	mov	r1, r3
 800f778:	9b04      	ldr	r3, [sp, #16]
 800f77a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f77e:	e7a1      	b.n	800f6c4 <__kernel_rem_pio2+0x4e4>
 800f780:	9c05      	ldr	r4, [sp, #20]
 800f782:	ab48      	add	r3, sp, #288	; 0x120
 800f784:	441c      	add	r4, r3
 800f786:	2000      	movs	r0, #0
 800f788:	2100      	movs	r1, #0
 800f78a:	2d00      	cmp	r5, #0
 800f78c:	da09      	bge.n	800f7a2 <__kernel_rem_pio2+0x5c2>
 800f78e:	f1bb 0f00 	cmp.w	fp, #0
 800f792:	d002      	beq.n	800f79a <__kernel_rem_pio2+0x5ba>
 800f794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f798:	4619      	mov	r1, r3
 800f79a:	9b04      	ldr	r3, [sp, #16]
 800f79c:	e9c3 0100 	strd	r0, r1, [r3]
 800f7a0:	e790      	b.n	800f6c4 <__kernel_rem_pio2+0x4e4>
 800f7a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f7a6:	f7f0 fd71 	bl	800028c <__adddf3>
 800f7aa:	3d01      	subs	r5, #1
 800f7ac:	e7ed      	b.n	800f78a <__kernel_rem_pio2+0x5aa>
 800f7ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f7b2:	f7f0 fd6b 	bl	800028c <__adddf3>
 800f7b6:	3c01      	subs	r4, #1
 800f7b8:	e7c3      	b.n	800f742 <__kernel_rem_pio2+0x562>
 800f7ba:	4602      	mov	r2, r0
 800f7bc:	460b      	mov	r3, r1
 800f7be:	e7c8      	b.n	800f752 <__kernel_rem_pio2+0x572>
 800f7c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f7c4:	f7f0 fd62 	bl	800028c <__adddf3>
 800f7c8:	3401      	adds	r4, #1
 800f7ca:	e7cd      	b.n	800f768 <__kernel_rem_pio2+0x588>
 800f7cc:	e9da 8900 	ldrd	r8, r9, [sl]
 800f7d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f7d4:	9b00      	ldr	r3, [sp, #0]
 800f7d6:	3b01      	subs	r3, #1
 800f7d8:	9300      	str	r3, [sp, #0]
 800f7da:	4632      	mov	r2, r6
 800f7dc:	463b      	mov	r3, r7
 800f7de:	4640      	mov	r0, r8
 800f7e0:	4649      	mov	r1, r9
 800f7e2:	f7f0 fd53 	bl	800028c <__adddf3>
 800f7e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	460b      	mov	r3, r1
 800f7ee:	4640      	mov	r0, r8
 800f7f0:	4649      	mov	r1, r9
 800f7f2:	f7f0 fd49 	bl	8000288 <__aeabi_dsub>
 800f7f6:	4632      	mov	r2, r6
 800f7f8:	463b      	mov	r3, r7
 800f7fa:	f7f0 fd47 	bl	800028c <__adddf3>
 800f7fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f802:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f806:	ed8a 7b00 	vstr	d7, [sl]
 800f80a:	e770      	b.n	800f6ee <__kernel_rem_pio2+0x50e>
 800f80c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f810:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f814:	4640      	mov	r0, r8
 800f816:	4632      	mov	r2, r6
 800f818:	463b      	mov	r3, r7
 800f81a:	4649      	mov	r1, r9
 800f81c:	f7f0 fd36 	bl	800028c <__adddf3>
 800f820:	e9cd 0100 	strd	r0, r1, [sp]
 800f824:	4602      	mov	r2, r0
 800f826:	460b      	mov	r3, r1
 800f828:	4640      	mov	r0, r8
 800f82a:	4649      	mov	r1, r9
 800f82c:	f7f0 fd2c 	bl	8000288 <__aeabi_dsub>
 800f830:	4632      	mov	r2, r6
 800f832:	463b      	mov	r3, r7
 800f834:	f7f0 fd2a 	bl	800028c <__adddf3>
 800f838:	ed9d 7b00 	vldr	d7, [sp]
 800f83c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f840:	ed84 7b00 	vstr	d7, [r4]
 800f844:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f848:	e757      	b.n	800f6fa <__kernel_rem_pio2+0x51a>
 800f84a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f84e:	f7f0 fd1d 	bl	800028c <__adddf3>
 800f852:	3d01      	subs	r5, #1
 800f854:	e75c      	b.n	800f710 <__kernel_rem_pio2+0x530>
 800f856:	9b04      	ldr	r3, [sp, #16]
 800f858:	9a04      	ldr	r2, [sp, #16]
 800f85a:	601f      	str	r7, [r3, #0]
 800f85c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f860:	605c      	str	r4, [r3, #4]
 800f862:	609d      	str	r5, [r3, #8]
 800f864:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f868:	60d3      	str	r3, [r2, #12]
 800f86a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f86e:	6110      	str	r0, [r2, #16]
 800f870:	6153      	str	r3, [r2, #20]
 800f872:	e727      	b.n	800f6c4 <__kernel_rem_pio2+0x4e4>
 800f874:	41700000 	.word	0x41700000
 800f878:	3e700000 	.word	0x3e700000
 800f87c:	00000000 	.word	0x00000000

0800f880 <__kernel_cos>:
 800f880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f884:	ec57 6b10 	vmov	r6, r7, d0
 800f888:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f88c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f890:	ed8d 1b00 	vstr	d1, [sp]
 800f894:	da07      	bge.n	800f8a6 <__kernel_cos+0x26>
 800f896:	ee10 0a10 	vmov	r0, s0
 800f89a:	4639      	mov	r1, r7
 800f89c:	f7f1 f95c 	bl	8000b58 <__aeabi_d2iz>
 800f8a0:	2800      	cmp	r0, #0
 800f8a2:	f000 8088 	beq.w	800f9b6 <__kernel_cos+0x136>
 800f8a6:	4632      	mov	r2, r6
 800f8a8:	463b      	mov	r3, r7
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	4639      	mov	r1, r7
 800f8ae:	f7f0 fea3 	bl	80005f8 <__aeabi_dmul>
 800f8b2:	4b51      	ldr	r3, [pc, #324]	; (800f9f8 <__kernel_cos+0x178>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	4604      	mov	r4, r0
 800f8b8:	460d      	mov	r5, r1
 800f8ba:	f7f0 fe9d 	bl	80005f8 <__aeabi_dmul>
 800f8be:	a340      	add	r3, pc, #256	; (adr r3, 800f9c0 <__kernel_cos+0x140>)
 800f8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c4:	4682      	mov	sl, r0
 800f8c6:	468b      	mov	fp, r1
 800f8c8:	4620      	mov	r0, r4
 800f8ca:	4629      	mov	r1, r5
 800f8cc:	f7f0 fe94 	bl	80005f8 <__aeabi_dmul>
 800f8d0:	a33d      	add	r3, pc, #244	; (adr r3, 800f9c8 <__kernel_cos+0x148>)
 800f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d6:	f7f0 fcd9 	bl	800028c <__adddf3>
 800f8da:	4622      	mov	r2, r4
 800f8dc:	462b      	mov	r3, r5
 800f8de:	f7f0 fe8b 	bl	80005f8 <__aeabi_dmul>
 800f8e2:	a33b      	add	r3, pc, #236	; (adr r3, 800f9d0 <__kernel_cos+0x150>)
 800f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e8:	f7f0 fcce 	bl	8000288 <__aeabi_dsub>
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	462b      	mov	r3, r5
 800f8f0:	f7f0 fe82 	bl	80005f8 <__aeabi_dmul>
 800f8f4:	a338      	add	r3, pc, #224	; (adr r3, 800f9d8 <__kernel_cos+0x158>)
 800f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fa:	f7f0 fcc7 	bl	800028c <__adddf3>
 800f8fe:	4622      	mov	r2, r4
 800f900:	462b      	mov	r3, r5
 800f902:	f7f0 fe79 	bl	80005f8 <__aeabi_dmul>
 800f906:	a336      	add	r3, pc, #216	; (adr r3, 800f9e0 <__kernel_cos+0x160>)
 800f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f90c:	f7f0 fcbc 	bl	8000288 <__aeabi_dsub>
 800f910:	4622      	mov	r2, r4
 800f912:	462b      	mov	r3, r5
 800f914:	f7f0 fe70 	bl	80005f8 <__aeabi_dmul>
 800f918:	a333      	add	r3, pc, #204	; (adr r3, 800f9e8 <__kernel_cos+0x168>)
 800f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91e:	f7f0 fcb5 	bl	800028c <__adddf3>
 800f922:	4622      	mov	r2, r4
 800f924:	462b      	mov	r3, r5
 800f926:	f7f0 fe67 	bl	80005f8 <__aeabi_dmul>
 800f92a:	4622      	mov	r2, r4
 800f92c:	462b      	mov	r3, r5
 800f92e:	f7f0 fe63 	bl	80005f8 <__aeabi_dmul>
 800f932:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f936:	4604      	mov	r4, r0
 800f938:	460d      	mov	r5, r1
 800f93a:	4630      	mov	r0, r6
 800f93c:	4639      	mov	r1, r7
 800f93e:	f7f0 fe5b 	bl	80005f8 <__aeabi_dmul>
 800f942:	460b      	mov	r3, r1
 800f944:	4602      	mov	r2, r0
 800f946:	4629      	mov	r1, r5
 800f948:	4620      	mov	r0, r4
 800f94a:	f7f0 fc9d 	bl	8000288 <__aeabi_dsub>
 800f94e:	4b2b      	ldr	r3, [pc, #172]	; (800f9fc <__kernel_cos+0x17c>)
 800f950:	4598      	cmp	r8, r3
 800f952:	4606      	mov	r6, r0
 800f954:	460f      	mov	r7, r1
 800f956:	dc10      	bgt.n	800f97a <__kernel_cos+0xfa>
 800f958:	4602      	mov	r2, r0
 800f95a:	460b      	mov	r3, r1
 800f95c:	4650      	mov	r0, sl
 800f95e:	4659      	mov	r1, fp
 800f960:	f7f0 fc92 	bl	8000288 <__aeabi_dsub>
 800f964:	460b      	mov	r3, r1
 800f966:	4926      	ldr	r1, [pc, #152]	; (800fa00 <__kernel_cos+0x180>)
 800f968:	4602      	mov	r2, r0
 800f96a:	2000      	movs	r0, #0
 800f96c:	f7f0 fc8c 	bl	8000288 <__aeabi_dsub>
 800f970:	ec41 0b10 	vmov	d0, r0, r1
 800f974:	b003      	add	sp, #12
 800f976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97a:	4b22      	ldr	r3, [pc, #136]	; (800fa04 <__kernel_cos+0x184>)
 800f97c:	4920      	ldr	r1, [pc, #128]	; (800fa00 <__kernel_cos+0x180>)
 800f97e:	4598      	cmp	r8, r3
 800f980:	bfcc      	ite	gt
 800f982:	4d21      	ldrgt	r5, [pc, #132]	; (800fa08 <__kernel_cos+0x188>)
 800f984:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f988:	2400      	movs	r4, #0
 800f98a:	4622      	mov	r2, r4
 800f98c:	462b      	mov	r3, r5
 800f98e:	2000      	movs	r0, #0
 800f990:	f7f0 fc7a 	bl	8000288 <__aeabi_dsub>
 800f994:	4622      	mov	r2, r4
 800f996:	4680      	mov	r8, r0
 800f998:	4689      	mov	r9, r1
 800f99a:	462b      	mov	r3, r5
 800f99c:	4650      	mov	r0, sl
 800f99e:	4659      	mov	r1, fp
 800f9a0:	f7f0 fc72 	bl	8000288 <__aeabi_dsub>
 800f9a4:	4632      	mov	r2, r6
 800f9a6:	463b      	mov	r3, r7
 800f9a8:	f7f0 fc6e 	bl	8000288 <__aeabi_dsub>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	460b      	mov	r3, r1
 800f9b0:	4640      	mov	r0, r8
 800f9b2:	4649      	mov	r1, r9
 800f9b4:	e7da      	b.n	800f96c <__kernel_cos+0xec>
 800f9b6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f9f0 <__kernel_cos+0x170>
 800f9ba:	e7db      	b.n	800f974 <__kernel_cos+0xf4>
 800f9bc:	f3af 8000 	nop.w
 800f9c0:	be8838d4 	.word	0xbe8838d4
 800f9c4:	bda8fae9 	.word	0xbda8fae9
 800f9c8:	bdb4b1c4 	.word	0xbdb4b1c4
 800f9cc:	3e21ee9e 	.word	0x3e21ee9e
 800f9d0:	809c52ad 	.word	0x809c52ad
 800f9d4:	3e927e4f 	.word	0x3e927e4f
 800f9d8:	19cb1590 	.word	0x19cb1590
 800f9dc:	3efa01a0 	.word	0x3efa01a0
 800f9e0:	16c15177 	.word	0x16c15177
 800f9e4:	3f56c16c 	.word	0x3f56c16c
 800f9e8:	5555554c 	.word	0x5555554c
 800f9ec:	3fa55555 	.word	0x3fa55555
 800f9f0:	00000000 	.word	0x00000000
 800f9f4:	3ff00000 	.word	0x3ff00000
 800f9f8:	3fe00000 	.word	0x3fe00000
 800f9fc:	3fd33332 	.word	0x3fd33332
 800fa00:	3ff00000 	.word	0x3ff00000
 800fa04:	3fe90000 	.word	0x3fe90000
 800fa08:	3fd20000 	.word	0x3fd20000
 800fa0c:	00000000 	.word	0x00000000

0800fa10 <__kernel_sin>:
 800fa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa14:	ed2d 8b04 	vpush	{d8-d9}
 800fa18:	eeb0 8a41 	vmov.f32	s16, s2
 800fa1c:	eef0 8a61 	vmov.f32	s17, s3
 800fa20:	ec55 4b10 	vmov	r4, r5, d0
 800fa24:	b083      	sub	sp, #12
 800fa26:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fa2a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800fa2e:	9001      	str	r0, [sp, #4]
 800fa30:	da06      	bge.n	800fa40 <__kernel_sin+0x30>
 800fa32:	ee10 0a10 	vmov	r0, s0
 800fa36:	4629      	mov	r1, r5
 800fa38:	f7f1 f88e 	bl	8000b58 <__aeabi_d2iz>
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d051      	beq.n	800fae4 <__kernel_sin+0xd4>
 800fa40:	4622      	mov	r2, r4
 800fa42:	462b      	mov	r3, r5
 800fa44:	4620      	mov	r0, r4
 800fa46:	4629      	mov	r1, r5
 800fa48:	f7f0 fdd6 	bl	80005f8 <__aeabi_dmul>
 800fa4c:	4682      	mov	sl, r0
 800fa4e:	468b      	mov	fp, r1
 800fa50:	4602      	mov	r2, r0
 800fa52:	460b      	mov	r3, r1
 800fa54:	4620      	mov	r0, r4
 800fa56:	4629      	mov	r1, r5
 800fa58:	f7f0 fdce 	bl	80005f8 <__aeabi_dmul>
 800fa5c:	a341      	add	r3, pc, #260	; (adr r3, 800fb64 <__kernel_sin+0x154>)
 800fa5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa62:	4680      	mov	r8, r0
 800fa64:	4689      	mov	r9, r1
 800fa66:	4650      	mov	r0, sl
 800fa68:	4659      	mov	r1, fp
 800fa6a:	f7f0 fdc5 	bl	80005f8 <__aeabi_dmul>
 800fa6e:	a33f      	add	r3, pc, #252	; (adr r3, 800fb6c <__kernel_sin+0x15c>)
 800fa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa74:	f7f0 fc08 	bl	8000288 <__aeabi_dsub>
 800fa78:	4652      	mov	r2, sl
 800fa7a:	465b      	mov	r3, fp
 800fa7c:	f7f0 fdbc 	bl	80005f8 <__aeabi_dmul>
 800fa80:	a33c      	add	r3, pc, #240	; (adr r3, 800fb74 <__kernel_sin+0x164>)
 800fa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa86:	f7f0 fc01 	bl	800028c <__adddf3>
 800fa8a:	4652      	mov	r2, sl
 800fa8c:	465b      	mov	r3, fp
 800fa8e:	f7f0 fdb3 	bl	80005f8 <__aeabi_dmul>
 800fa92:	a33a      	add	r3, pc, #232	; (adr r3, 800fb7c <__kernel_sin+0x16c>)
 800fa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa98:	f7f0 fbf6 	bl	8000288 <__aeabi_dsub>
 800fa9c:	4652      	mov	r2, sl
 800fa9e:	465b      	mov	r3, fp
 800faa0:	f7f0 fdaa 	bl	80005f8 <__aeabi_dmul>
 800faa4:	a337      	add	r3, pc, #220	; (adr r3, 800fb84 <__kernel_sin+0x174>)
 800faa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faaa:	f7f0 fbef 	bl	800028c <__adddf3>
 800faae:	9b01      	ldr	r3, [sp, #4]
 800fab0:	4606      	mov	r6, r0
 800fab2:	460f      	mov	r7, r1
 800fab4:	b9eb      	cbnz	r3, 800faf2 <__kernel_sin+0xe2>
 800fab6:	4602      	mov	r2, r0
 800fab8:	460b      	mov	r3, r1
 800faba:	4650      	mov	r0, sl
 800fabc:	4659      	mov	r1, fp
 800fabe:	f7f0 fd9b 	bl	80005f8 <__aeabi_dmul>
 800fac2:	a325      	add	r3, pc, #148	; (adr r3, 800fb58 <__kernel_sin+0x148>)
 800fac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac8:	f7f0 fbde 	bl	8000288 <__aeabi_dsub>
 800facc:	4642      	mov	r2, r8
 800face:	464b      	mov	r3, r9
 800fad0:	f7f0 fd92 	bl	80005f8 <__aeabi_dmul>
 800fad4:	4602      	mov	r2, r0
 800fad6:	460b      	mov	r3, r1
 800fad8:	4620      	mov	r0, r4
 800fada:	4629      	mov	r1, r5
 800fadc:	f7f0 fbd6 	bl	800028c <__adddf3>
 800fae0:	4604      	mov	r4, r0
 800fae2:	460d      	mov	r5, r1
 800fae4:	ec45 4b10 	vmov	d0, r4, r5
 800fae8:	b003      	add	sp, #12
 800faea:	ecbd 8b04 	vpop	{d8-d9}
 800faee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faf2:	4b1b      	ldr	r3, [pc, #108]	; (800fb60 <__kernel_sin+0x150>)
 800faf4:	ec51 0b18 	vmov	r0, r1, d8
 800faf8:	2200      	movs	r2, #0
 800fafa:	f7f0 fd7d 	bl	80005f8 <__aeabi_dmul>
 800fafe:	4632      	mov	r2, r6
 800fb00:	ec41 0b19 	vmov	d9, r0, r1
 800fb04:	463b      	mov	r3, r7
 800fb06:	4640      	mov	r0, r8
 800fb08:	4649      	mov	r1, r9
 800fb0a:	f7f0 fd75 	bl	80005f8 <__aeabi_dmul>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	460b      	mov	r3, r1
 800fb12:	ec51 0b19 	vmov	r0, r1, d9
 800fb16:	f7f0 fbb7 	bl	8000288 <__aeabi_dsub>
 800fb1a:	4652      	mov	r2, sl
 800fb1c:	465b      	mov	r3, fp
 800fb1e:	f7f0 fd6b 	bl	80005f8 <__aeabi_dmul>
 800fb22:	ec53 2b18 	vmov	r2, r3, d8
 800fb26:	f7f0 fbaf 	bl	8000288 <__aeabi_dsub>
 800fb2a:	a30b      	add	r3, pc, #44	; (adr r3, 800fb58 <__kernel_sin+0x148>)
 800fb2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb30:	4606      	mov	r6, r0
 800fb32:	460f      	mov	r7, r1
 800fb34:	4640      	mov	r0, r8
 800fb36:	4649      	mov	r1, r9
 800fb38:	f7f0 fd5e 	bl	80005f8 <__aeabi_dmul>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	460b      	mov	r3, r1
 800fb40:	4630      	mov	r0, r6
 800fb42:	4639      	mov	r1, r7
 800fb44:	f7f0 fba2 	bl	800028c <__adddf3>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	4629      	mov	r1, r5
 800fb50:	f7f0 fb9a 	bl	8000288 <__aeabi_dsub>
 800fb54:	e7c4      	b.n	800fae0 <__kernel_sin+0xd0>
 800fb56:	bf00      	nop
 800fb58:	55555549 	.word	0x55555549
 800fb5c:	3fc55555 	.word	0x3fc55555
 800fb60:	3fe00000 	.word	0x3fe00000
 800fb64:	5acfd57c 	.word	0x5acfd57c
 800fb68:	3de5d93a 	.word	0x3de5d93a
 800fb6c:	8a2b9ceb 	.word	0x8a2b9ceb
 800fb70:	3e5ae5e6 	.word	0x3e5ae5e6
 800fb74:	57b1fe7d 	.word	0x57b1fe7d
 800fb78:	3ec71de3 	.word	0x3ec71de3
 800fb7c:	19c161d5 	.word	0x19c161d5
 800fb80:	3f2a01a0 	.word	0x3f2a01a0
 800fb84:	1110f8a6 	.word	0x1110f8a6
 800fb88:	3f811111 	.word	0x3f811111

0800fb8c <fabs>:
 800fb8c:	ec51 0b10 	vmov	r0, r1, d0
 800fb90:	ee10 2a10 	vmov	r2, s0
 800fb94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fb98:	ec43 2b10 	vmov	d0, r2, r3
 800fb9c:	4770      	bx	lr
	...

0800fba0 <scalbn>:
 800fba0:	b570      	push	{r4, r5, r6, lr}
 800fba2:	ec55 4b10 	vmov	r4, r5, d0
 800fba6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fbaa:	4606      	mov	r6, r0
 800fbac:	462b      	mov	r3, r5
 800fbae:	b999      	cbnz	r1, 800fbd8 <scalbn+0x38>
 800fbb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fbb4:	4323      	orrs	r3, r4
 800fbb6:	d03f      	beq.n	800fc38 <scalbn+0x98>
 800fbb8:	4b35      	ldr	r3, [pc, #212]	; (800fc90 <scalbn+0xf0>)
 800fbba:	4629      	mov	r1, r5
 800fbbc:	ee10 0a10 	vmov	r0, s0
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f7f0 fd19 	bl	80005f8 <__aeabi_dmul>
 800fbc6:	4b33      	ldr	r3, [pc, #204]	; (800fc94 <scalbn+0xf4>)
 800fbc8:	429e      	cmp	r6, r3
 800fbca:	4604      	mov	r4, r0
 800fbcc:	460d      	mov	r5, r1
 800fbce:	da10      	bge.n	800fbf2 <scalbn+0x52>
 800fbd0:	a327      	add	r3, pc, #156	; (adr r3, 800fc70 <scalbn+0xd0>)
 800fbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd6:	e01f      	b.n	800fc18 <scalbn+0x78>
 800fbd8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fbdc:	4291      	cmp	r1, r2
 800fbde:	d10c      	bne.n	800fbfa <scalbn+0x5a>
 800fbe0:	ee10 2a10 	vmov	r2, s0
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	f7f0 fb50 	bl	800028c <__adddf3>
 800fbec:	4604      	mov	r4, r0
 800fbee:	460d      	mov	r5, r1
 800fbf0:	e022      	b.n	800fc38 <scalbn+0x98>
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fbf8:	3936      	subs	r1, #54	; 0x36
 800fbfa:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fbfe:	4296      	cmp	r6, r2
 800fc00:	dd0d      	ble.n	800fc1e <scalbn+0x7e>
 800fc02:	2d00      	cmp	r5, #0
 800fc04:	a11c      	add	r1, pc, #112	; (adr r1, 800fc78 <scalbn+0xd8>)
 800fc06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc0a:	da02      	bge.n	800fc12 <scalbn+0x72>
 800fc0c:	a11c      	add	r1, pc, #112	; (adr r1, 800fc80 <scalbn+0xe0>)
 800fc0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc12:	a319      	add	r3, pc, #100	; (adr r3, 800fc78 <scalbn+0xd8>)
 800fc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc18:	f7f0 fcee 	bl	80005f8 <__aeabi_dmul>
 800fc1c:	e7e6      	b.n	800fbec <scalbn+0x4c>
 800fc1e:	1872      	adds	r2, r6, r1
 800fc20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fc24:	428a      	cmp	r2, r1
 800fc26:	dcec      	bgt.n	800fc02 <scalbn+0x62>
 800fc28:	2a00      	cmp	r2, #0
 800fc2a:	dd08      	ble.n	800fc3e <scalbn+0x9e>
 800fc2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fc34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fc38:	ec45 4b10 	vmov	d0, r4, r5
 800fc3c:	bd70      	pop	{r4, r5, r6, pc}
 800fc3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fc42:	da08      	bge.n	800fc56 <scalbn+0xb6>
 800fc44:	2d00      	cmp	r5, #0
 800fc46:	a10a      	add	r1, pc, #40	; (adr r1, 800fc70 <scalbn+0xd0>)
 800fc48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc4c:	dac0      	bge.n	800fbd0 <scalbn+0x30>
 800fc4e:	a10e      	add	r1, pc, #56	; (adr r1, 800fc88 <scalbn+0xe8>)
 800fc50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc54:	e7bc      	b.n	800fbd0 <scalbn+0x30>
 800fc56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc5a:	3236      	adds	r2, #54	; 0x36
 800fc5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fc60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fc64:	4620      	mov	r0, r4
 800fc66:	4b0c      	ldr	r3, [pc, #48]	; (800fc98 <scalbn+0xf8>)
 800fc68:	2200      	movs	r2, #0
 800fc6a:	e7d5      	b.n	800fc18 <scalbn+0x78>
 800fc6c:	f3af 8000 	nop.w
 800fc70:	c2f8f359 	.word	0xc2f8f359
 800fc74:	01a56e1f 	.word	0x01a56e1f
 800fc78:	8800759c 	.word	0x8800759c
 800fc7c:	7e37e43c 	.word	0x7e37e43c
 800fc80:	8800759c 	.word	0x8800759c
 800fc84:	fe37e43c 	.word	0xfe37e43c
 800fc88:	c2f8f359 	.word	0xc2f8f359
 800fc8c:	81a56e1f 	.word	0x81a56e1f
 800fc90:	43500000 	.word	0x43500000
 800fc94:	ffff3cb0 	.word	0xffff3cb0
 800fc98:	3c900000 	.word	0x3c900000
 800fc9c:	00000000 	.word	0x00000000

0800fca0 <floor>:
 800fca0:	ec51 0b10 	vmov	r0, r1, d0
 800fca4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcac:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800fcb0:	2e13      	cmp	r6, #19
 800fcb2:	ee10 5a10 	vmov	r5, s0
 800fcb6:	ee10 8a10 	vmov	r8, s0
 800fcba:	460c      	mov	r4, r1
 800fcbc:	dc31      	bgt.n	800fd22 <floor+0x82>
 800fcbe:	2e00      	cmp	r6, #0
 800fcc0:	da14      	bge.n	800fcec <floor+0x4c>
 800fcc2:	a333      	add	r3, pc, #204	; (adr r3, 800fd90 <floor+0xf0>)
 800fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc8:	f7f0 fae0 	bl	800028c <__adddf3>
 800fccc:	2200      	movs	r2, #0
 800fcce:	2300      	movs	r3, #0
 800fcd0:	f7f0 ff22 	bl	8000b18 <__aeabi_dcmpgt>
 800fcd4:	b138      	cbz	r0, 800fce6 <floor+0x46>
 800fcd6:	2c00      	cmp	r4, #0
 800fcd8:	da53      	bge.n	800fd82 <floor+0xe2>
 800fcda:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800fcde:	4325      	orrs	r5, r4
 800fce0:	d052      	beq.n	800fd88 <floor+0xe8>
 800fce2:	4c2d      	ldr	r4, [pc, #180]	; (800fd98 <floor+0xf8>)
 800fce4:	2500      	movs	r5, #0
 800fce6:	4621      	mov	r1, r4
 800fce8:	4628      	mov	r0, r5
 800fcea:	e024      	b.n	800fd36 <floor+0x96>
 800fcec:	4f2b      	ldr	r7, [pc, #172]	; (800fd9c <floor+0xfc>)
 800fcee:	4137      	asrs	r7, r6
 800fcf0:	ea01 0307 	and.w	r3, r1, r7
 800fcf4:	4303      	orrs	r3, r0
 800fcf6:	d01e      	beq.n	800fd36 <floor+0x96>
 800fcf8:	a325      	add	r3, pc, #148	; (adr r3, 800fd90 <floor+0xf0>)
 800fcfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfe:	f7f0 fac5 	bl	800028c <__adddf3>
 800fd02:	2200      	movs	r2, #0
 800fd04:	2300      	movs	r3, #0
 800fd06:	f7f0 ff07 	bl	8000b18 <__aeabi_dcmpgt>
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	d0eb      	beq.n	800fce6 <floor+0x46>
 800fd0e:	2c00      	cmp	r4, #0
 800fd10:	bfbe      	ittt	lt
 800fd12:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fd16:	4133      	asrlt	r3, r6
 800fd18:	18e4      	addlt	r4, r4, r3
 800fd1a:	ea24 0407 	bic.w	r4, r4, r7
 800fd1e:	2500      	movs	r5, #0
 800fd20:	e7e1      	b.n	800fce6 <floor+0x46>
 800fd22:	2e33      	cmp	r6, #51	; 0x33
 800fd24:	dd0b      	ble.n	800fd3e <floor+0x9e>
 800fd26:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fd2a:	d104      	bne.n	800fd36 <floor+0x96>
 800fd2c:	ee10 2a10 	vmov	r2, s0
 800fd30:	460b      	mov	r3, r1
 800fd32:	f7f0 faab 	bl	800028c <__adddf3>
 800fd36:	ec41 0b10 	vmov	d0, r0, r1
 800fd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd3e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800fd42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fd46:	40df      	lsrs	r7, r3
 800fd48:	4238      	tst	r0, r7
 800fd4a:	d0f4      	beq.n	800fd36 <floor+0x96>
 800fd4c:	a310      	add	r3, pc, #64	; (adr r3, 800fd90 <floor+0xf0>)
 800fd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd52:	f7f0 fa9b 	bl	800028c <__adddf3>
 800fd56:	2200      	movs	r2, #0
 800fd58:	2300      	movs	r3, #0
 800fd5a:	f7f0 fedd 	bl	8000b18 <__aeabi_dcmpgt>
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d0c1      	beq.n	800fce6 <floor+0x46>
 800fd62:	2c00      	cmp	r4, #0
 800fd64:	da0a      	bge.n	800fd7c <floor+0xdc>
 800fd66:	2e14      	cmp	r6, #20
 800fd68:	d101      	bne.n	800fd6e <floor+0xce>
 800fd6a:	3401      	adds	r4, #1
 800fd6c:	e006      	b.n	800fd7c <floor+0xdc>
 800fd6e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fd72:	2301      	movs	r3, #1
 800fd74:	40b3      	lsls	r3, r6
 800fd76:	441d      	add	r5, r3
 800fd78:	45a8      	cmp	r8, r5
 800fd7a:	d8f6      	bhi.n	800fd6a <floor+0xca>
 800fd7c:	ea25 0507 	bic.w	r5, r5, r7
 800fd80:	e7b1      	b.n	800fce6 <floor+0x46>
 800fd82:	2500      	movs	r5, #0
 800fd84:	462c      	mov	r4, r5
 800fd86:	e7ae      	b.n	800fce6 <floor+0x46>
 800fd88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800fd8c:	e7ab      	b.n	800fce6 <floor+0x46>
 800fd8e:	bf00      	nop
 800fd90:	8800759c 	.word	0x8800759c
 800fd94:	7e37e43c 	.word	0x7e37e43c
 800fd98:	bff00000 	.word	0xbff00000
 800fd9c:	000fffff 	.word	0x000fffff

0800fda0 <_init>:
 800fda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fda2:	bf00      	nop
 800fda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fda6:	bc08      	pop	{r3}
 800fda8:	469e      	mov	lr, r3
 800fdaa:	4770      	bx	lr

0800fdac <_fini>:
 800fdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdae:	bf00      	nop
 800fdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdb2:	bc08      	pop	{r3}
 800fdb4:	469e      	mov	lr, r3
 800fdb6:	4770      	bx	lr

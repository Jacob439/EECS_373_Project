
armband-all.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800f470  0800f470  00010470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fbd0  0800fbd0  00011210  2**0
                  CONTENTS
  4 .ARM          00000008  0800fbd0  0800fbd0  00010bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fbd8  0800fbd8  00011210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fbd8  0800fbd8  00010bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fbdc  0800fbdc  00010bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800fbe0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000210  0800fdf0  00011210  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000824  0800fdf0  00011824  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b27f  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000375c  00000000  00000000  0002c4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  0002fc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142c  00000000  00000000  000315e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000254d1  00000000  00000000  00032a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e11c  00000000  00000000  00057ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1f26  00000000  00000000  00076001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00157f27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008644  00000000  00000000  00157f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001605b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f458 	.word	0x0800f458

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800f458 	.word	0x0800f458

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <fix_msb_loss>:
 * exceed 286 m/s2
 * this is 100% fine for gravity vector
 * this is most likely fine for acc vector as no runner is
 * putting out 30g's while running
 */
uint16_t fix_msb_loss(uint16_t val){
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	80fb      	strh	r3, [r7, #6]
	if ((val & 0xF000) == 0x7000) {
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8000ff4:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000ff8:	d105      	bne.n	8001006 <fix_msb_loss+0x22>
		val |= 0x8000;
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001000:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001004:	80fb      	strh	r3, [r7, #6]
	}
	return val;
 8001006:	88fb      	ldrh	r3, [r7, #6]
}
 8001008:	4618      	mov	r0, r3
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <startup_IMU>:

void startup_IMU(I2C_HandleTypeDef *hi2c){
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	// verify i2c is working properly by reading chip id
	read_to_buf(hi2c, 0x00, buf, 1);
 800101c:	f107 020c 	add.w	r2, r7, #12
 8001020:	2301      	movs	r3, #1
 8001022:	2100      	movs	r1, #0
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f848 	bl	80010ba <read_to_buf>
	if(buf[0] != 0xA0) {
 800102a:	7b3b      	ldrb	r3, [r7, #12]
 800102c:	2ba0      	cmp	r3, #160	@ 0xa0
 800102e:	d003      	beq.n	8001038 <startup_IMU+0x24>
		printf("chip error, wrong/no chip ID returned\n\r");
 8001030:	4808      	ldr	r0, [pc, #32]	@ (8001054 <startup_IMU+0x40>)
 8001032:	f00a fa55 	bl	800b4e0 <iprintf>
 8001036:	e00a      	b.n	800104e <startup_IMU+0x3a>
		return;
	}

	// put chip in configuration mode
	buf[0] = 0x3D;
 8001038:	233d      	movs	r3, #61	@ 0x3d
 800103a:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2202      	movs	r2, #2
 8001046:	4619      	mov	r1, r3
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f000 f81b 	bl	8001084 <transmit_buf>
}
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	0800f470 	.word	0x0800f470

08001058 <init_IMU>:

void init_IMU(I2C_HandleTypeDef *hi2c){
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	uint8_t buf[10];

	startup_IMU(hi2c);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffd7 	bl	8001014 <startup_IMU>

	// put chip in IMU mode
	buf[0] = 0x3D;
 8001066:	233d      	movs	r3, #61	@ 0x3d
 8001068:	733b      	strb	r3, [r7, #12]
	buf[1] = 0x08;
 800106a:	2308      	movs	r3, #8
 800106c:	737b      	strb	r3, [r7, #13]
	transmit_buf(hi2c, buf, 2);
 800106e:	f107 030c 	add.w	r3, r7, #12
 8001072:	2202      	movs	r2, #2
 8001074:	4619      	mov	r1, r3
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 f804 	bl	8001084 <transmit_buf>
}
 800107c:	bf00      	nop
 800107e:	3718      	adds	r7, #24
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <transmit_buf>:
	buf[1] = buf[0];
	buf[0] = 0x3B;
	transmit_buf(hi2c, buf, 2);
}

uint8_t transmit_buf(I2C_HandleTypeDef *hi2c, uint8_t *buf, uint16_t bytes) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af02      	add	r7, sp, #8
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	4613      	mov	r3, r2
 8001090:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, bytes, 1000);
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001098:	9200      	str	r2, [sp, #0]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	2150      	movs	r1, #80	@ 0x50
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f003 ff02 	bl	8004ea8 <HAL_I2C_Master_Transmit>
 80010a4:	4603      	mov	r3, r0
 80010a6:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f838 	bl	8001120 <check_ret>
 80010b0:	4603      	mov	r3, r0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <read_to_buf>:

uint8_t read_to_buf(I2C_HandleTypeDef *hi2c, uint8_t subAddr, uint8_t *buf, uint16_t bytes){
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b088      	sub	sp, #32
 80010be:	af02      	add	r7, sp, #8
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	461a      	mov	r2, r3
 80010c6:	460b      	mov	r3, r1
 80010c8:	72fb      	strb	r3, [r7, #11]
 80010ca:	4613      	mov	r3, r2
 80010cc:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, SAD_W, &subAddr, 1, 1000);
 80010ce:	f107 020b 	add.w	r2, r7, #11
 80010d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	2150      	movs	r1, #80	@ 0x50
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f003 fee3 	bl	8004ea8 <HAL_I2C_Master_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	75fb      	strb	r3, [r7, #23]
	if (!check_ret(ret)) return 0;
 80010e6:	7dfb      	ldrb	r3, [r7, #23]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f819 	bl	8001120 <check_ret>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <read_to_buf+0x3e>
 80010f4:	2300      	movs	r3, #0
 80010f6:	e00f      	b.n	8001118 <read_to_buf+0x5e>
	ret = HAL_I2C_Master_Receive(hi2c, SAD_R, buf, bytes, 1000);
 80010f8:	893b      	ldrh	r3, [r7, #8]
 80010fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	2151      	movs	r1, #81	@ 0x51
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f003 ffe7 	bl	80050d8 <HAL_I2C_Master_Receive>
 800110a:	4603      	mov	r3, r0
 800110c:	75fb      	strb	r3, [r7, #23]
	return check_ret(ret);
 800110e:	7dfb      	ldrb	r3, [r7, #23]
 8001110:	4618      	mov	r0, r3
 8001112:	f000 f805 	bl	8001120 <check_ret>
 8001116:	4603      	mov	r3, r0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <check_ret>:

uint8_t check_ret(HAL_StatusTypeDef ret) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK) {
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <check_ret+0x14>
		return 1;
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <check_ret+0x16>
	} else {
		// TODO:
		// add more descriptive error
		//printf("i2c error!\n\r");
		return 0;
 8001134:	2300      	movs	r3, #0
	}
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <lin_acc_vec_raw>:

void lin_acc_vec_raw(I2C_HandleTypeDef *hi2c, int16_t* vec) {
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];
	read_to_buf(hi2c, 0x28, buf, 6);
 800114c:	f107 0208 	add.w	r2, r7, #8
 8001150:	2306      	movs	r3, #6
 8001152:	2128      	movs	r1, #40	@ 0x28
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ffb0 	bl	80010ba <read_to_buf>
	vec[0] = fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 800115a:	7a3b      	ldrb	r3, [r7, #8]
 800115c:	b21a      	sxth	r2, r3
 800115e:	7a7b      	ldrb	r3, [r7, #9]
 8001160:	021b      	lsls	r3, r3, #8
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21b      	sxth	r3, r3
 8001168:	b29b      	uxth	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff3a 	bl	8000fe4 <fix_msb_loss>
 8001170:	4603      	mov	r3, r0
 8001172:	b21a      	sxth	r2, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	801a      	strh	r2, [r3, #0]
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	b21a      	sxth	r2, r3
 800117c:	7afb      	ldrb	r3, [r7, #11]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
 8001186:	b29b      	uxth	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff2b 	bl	8000fe4 <fix_msb_loss>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	3302      	adds	r3, #2
 8001196:	b212      	sxth	r2, r2
 8001198:	801a      	strh	r2, [r3, #0]
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
 800119a:	7b3b      	ldrb	r3, [r7, #12]
 800119c:	b21a      	sxth	r2, r3
 800119e:	7b7b      	ldrb	r3, [r7, #13]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21b      	sxth	r3, r3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff1a 	bl	8000fe4 <fix_msb_loss>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3304      	adds	r3, #4
 80011b8:	b212      	sxth	r2, r2
 80011ba:	801a      	strh	r2, [r3, #0]
	return;
 80011bc:	bf00      	nop
}
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <lin_acc_vec>:
	uint8_t buf[2];
	read_to_buf(hi2c, 0x2C, buf, 2);
	return fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
}

void lin_acc_vec(I2C_HandleTypeDef *hi2c, float* vec){
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
	int16_t veci[3];
	lin_acc_vec_raw(hi2c, veci);
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ffb4 	bl	8001142 <lin_acc_vec_raw>
	vec[0] = veci[0] / 100.0f;
 80011da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e6:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001234 <lin_acc_vec+0x70>
 80011ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	edc3 7a00 	vstr	s15, [r3]
	vec[1] = veci[1] / 100.0f;
 80011f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011f8:	ee07 3a90 	vmov	s15, r3
 80011fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3304      	adds	r3, #4
 8001204:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001234 <lin_acc_vec+0x70>
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	edc3 7a00 	vstr	s15, [r3]
	vec[2] = veci[2] / 100.0f;
 8001210:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3308      	adds	r3, #8
 8001220:	eddf 6a04 	vldr	s13, [pc, #16]	@ 8001234 <lin_acc_vec+0x70>
 8001224:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001228:	edc3 7a00 	vstr	s15, [r3]
	return;
 800122c:	bf00      	nop
}
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	42c80000 	.word	0x42c80000

08001238 <grav_vec_raw>:
float z_lin_acc(I2C_HandleTypeDef *hi2c){
	return z_lin_acc_raw(hi2c) / 100.0f;
}


void grav_vec_raw(I2C_HandleTypeDef *hi2c, int16_t* vec) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
	uint8_t buf[6];
	read_to_buf(hi2c, 0x2E, buf, 6);
 8001242:	f107 0208 	add.w	r2, r7, #8
 8001246:	2306      	movs	r3, #6
 8001248:	212e      	movs	r1, #46	@ 0x2e
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ff35 	bl	80010ba <read_to_buf>
	vec[0] = fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
 8001250:	7a3b      	ldrb	r3, [r7, #8]
 8001252:	b21a      	sxth	r2, r3
 8001254:	7a7b      	ldrb	r3, [r7, #9]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	b21b      	sxth	r3, r3
 800125e:	b29b      	uxth	r3, r3
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff febf 	bl	8000fe4 <fix_msb_loss>
 8001266:	4603      	mov	r3, r0
 8001268:	b21a      	sxth	r2, r3
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	801a      	strh	r2, [r3, #0]
	vec[1] = fix_msb_loss(buf[2] | ((0xFF & buf[3]) << 8));
 800126e:	7abb      	ldrb	r3, [r7, #10]
 8001270:	b21a      	sxth	r2, r3
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21b      	sxth	r3, r3
 800127c:	b29b      	uxth	r3, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff feb0 	bl	8000fe4 <fix_msb_loss>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	3302      	adds	r3, #2
 800128c:	b212      	sxth	r2, r2
 800128e:	801a      	strh	r2, [r3, #0]
	vec[2] = fix_msb_loss(buf[4] | ((0xFF & buf[5]) << 8));
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	b21a      	sxth	r2, r3
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21b      	sxth	r3, r3
 800129a:	4313      	orrs	r3, r2
 800129c:	b21b      	sxth	r3, r3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fe9f 	bl	8000fe4 <fix_msb_loss>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3304      	adds	r3, #4
 80012ae:	b212      	sxth	r2, r2
 80012b0:	801a      	strh	r2, [r3, #0]
	return;
 80012b2:	bf00      	nop
}
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <grav_vec>:
	uint8_t buf[2];
	read_to_buf(hi2c, 0x32, buf, 2);
	return fix_msb_loss(buf[0] | ((0xFF & buf[1]) << 8));
}

void grav_vec(I2C_HandleTypeDef *hi2c, float* vec) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
	int16_t veci[3];
	grav_vec_raw(hi2c, veci);
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4619      	mov	r1, r3
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ffb3 	bl	8001238 <grav_vec_raw>
	vec[0] = veci[0] / 100.0f;
 80012d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012d6:	ee07 3a90 	vmov	s15, r3
 80012da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012de:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800132c <grav_vec+0x70>
 80012e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	edc3 7a00 	vstr	s15, [r3]
	vec[1] = veci[1] / 100.0f;
 80012ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	3304      	adds	r3, #4
 80012fc:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800132c <grav_vec+0x70>
 8001300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001304:	edc3 7a00 	vstr	s15, [r3]
	vec[2] = veci[2] / 100.0f;
 8001308:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	3308      	adds	r3, #8
 8001318:	eddf 6a04 	vldr	s13, [pc, #16]	@ 800132c <grav_vec+0x70>
 800131c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001320:	edc3 7a00 	vstr	s15, [r3]
	return;
 8001324:	bf00      	nop
}
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	42c80000 	.word	0x42c80000

08001330 <initPulseSensor>:
static bool first_beat = true;		// first beat bool
static bool second_beat = false; 	// second beat bool
static bool pulse = false; 		// pulse recognized bool
static int samples_since_last_beat = 0;

void initPulseSensor(ADC_HandleTypeDef *hadc_in) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	hadc = hadc_in;
 8001338:	4a04      	ldr	r2, [pc, #16]	@ (800134c <initPulseSensor+0x1c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000022c 	.word	0x2000022c

08001350 <updatePulseSensor>:

void updatePulseSensor(void){
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	read_ADC();
 8001354:	f000 f804 	bl	8001360 <read_ADC>
	get_pulse();
 8001358:	f000 f834 	bl	80013c4 <get_pulse>
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <read_ADC>:

void read_ADC(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
	//uint32_t val;
	unsigned int val;

	HAL_ADC_Start(hadc);
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <read_ADC+0x54>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fc52 	bl	8003c14 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(hadc, 0xFFFFFFFF);
 8001370:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <read_ADC+0x54>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f04f 31ff 	mov.w	r1, #4294967295
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fcae 	bl	8003cda <HAL_ADC_PollForConversion>
	val = HAL_ADC_GetValue(hadc);
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <read_ADC+0x54>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fd38 	bl	8003df8 <HAL_ADC_GetValue>
 8001388:	6078      	str	r0, [r7, #4]
	signal = val * 3.3f / 4096.0f;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001394:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80013b8 <read_ADC+0x58>
 8001398:	ee27 7a87 	vmul.f32	s14, s15, s14
 800139c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80013bc <read_ADC+0x5c>
 80013a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <read_ADC+0x60>)
 80013a6:	edc3 7a00 	vstr	s15, [r3]
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	2000022c 	.word	0x2000022c
 80013b8:	40533333 	.word	0x40533333
 80013bc:	45800000 	.word	0x45800000
 80013c0:	2000025c 	.word	0x2000025c

080013c4 <get_pulse>:

void get_pulse() {
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
	++samples_since_last_beat;
 80013ca:	4b95      	ldr	r3, [pc, #596]	@ (8001620 <get_pulse+0x25c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	3301      	adds	r3, #1
 80013d0:	4a93      	ldr	r2, [pc, #588]	@ (8001620 <get_pulse+0x25c>)
 80013d2:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_beat * SAMPLE_PERIOD;
 80013d4:	4b92      	ldr	r3, [pc, #584]	@ (8001620 <get_pulse+0x25c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	603b      	str	r3, [r7, #0]
	if (signal < thresh && N > (IBI / 5) * 3) { // avoid dicrotic noise by waiting 3/5 of last IBI
 80013e0:	4b90      	ldr	r3, [pc, #576]	@ (8001624 <get_pulse+0x260>)
 80013e2:	ed93 7a00 	vldr	s14, [r3]
 80013e6:	4b90      	ldr	r3, [pc, #576]	@ (8001628 <get_pulse+0x264>)
 80013e8:	edd3 7a00 	vldr	s15, [r3]
 80013ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	d51c      	bpl.n	8001430 <get_pulse+0x6c>
 80013f6:	4b8d      	ldr	r3, [pc, #564]	@ (800162c <get_pulse+0x268>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a8d      	ldr	r2, [pc, #564]	@ (8001630 <get_pulse+0x26c>)
 80013fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001400:	1052      	asrs	r2, r2, #1
 8001402:	17db      	asrs	r3, r3, #31
 8001404:	1ad2      	subs	r2, r2, r3
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	dd0e      	ble.n	8001430 <get_pulse+0x6c>
	    if (signal < trough_amp) {                        // T is the trough
 8001412:	4b84      	ldr	r3, [pc, #528]	@ (8001624 <get_pulse+0x260>)
 8001414:	ed93 7a00 	vldr	s14, [r3]
 8001418:	4b86      	ldr	r3, [pc, #536]	@ (8001634 <get_pulse+0x270>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d503      	bpl.n	8001430 <get_pulse+0x6c>
	      trough_amp = signal;                            // keep track of lowest point in pulse wave
 8001428:	4b7e      	ldr	r3, [pc, #504]	@ (8001624 <get_pulse+0x260>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a81      	ldr	r2, [pc, #516]	@ (8001634 <get_pulse+0x270>)
 800142e:	6013      	str	r3, [r2, #0]
	    }
	  }

	  if (signal > thresh && signal > peak_amp) {       // thresh condition helps avoid noise
 8001430:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <get_pulse+0x260>)
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	4b7c      	ldr	r3, [pc, #496]	@ (8001628 <get_pulse+0x264>)
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001444:	dd0e      	ble.n	8001464 <get_pulse+0xa0>
 8001446:	4b77      	ldr	r3, [pc, #476]	@ (8001624 <get_pulse+0x260>)
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	4b7a      	ldr	r3, [pc, #488]	@ (8001638 <get_pulse+0x274>)
 800144e:	edd3 7a00 	vldr	s15, [r3]
 8001452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145a:	dd03      	ble.n	8001464 <get_pulse+0xa0>
		  peak_amp = signal;                              // P is the peak
 800145c:	4b71      	ldr	r3, [pc, #452]	@ (8001624 <get_pulse+0x260>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a75      	ldr	r2, [pc, #468]	@ (8001638 <get_pulse+0x274>)
 8001462:	6013      	str	r3, [r2, #0]
	  }                                          // keep track of highest point in pulse wave

	  //  NOW IT'S TIME TO LOOK FOR THE HEART BEAT
	  // signal surges up in value every time there is a pulse
	  if (N > 250) {                             // avoid high frequency noise
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2bfa      	cmp	r3, #250	@ 0xfa
 8001468:	dd7c      	ble.n	8001564 <get_pulse+0x1a0>
	    if ( (signal > thresh) && (pulse == false) && (N > ((IBI / 5) * 3)) ) {
 800146a:	4b6e      	ldr	r3, [pc, #440]	@ (8001624 <get_pulse+0x260>)
 800146c:	ed93 7a00 	vldr	s14, [r3]
 8001470:	4b6d      	ldr	r3, [pc, #436]	@ (8001628 <get_pulse+0x264>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	dd71      	ble.n	8001564 <get_pulse+0x1a0>
 8001480:	4b6e      	ldr	r3, [pc, #440]	@ (800163c <get_pulse+0x278>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f083 0301 	eor.w	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d06a      	beq.n	8001564 <get_pulse+0x1a0>
 800148e:	4b67      	ldr	r3, [pc, #412]	@ (800162c <get_pulse+0x268>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a67      	ldr	r2, [pc, #412]	@ (8001630 <get_pulse+0x26c>)
 8001494:	fb82 1203 	smull	r1, r2, r2, r3
 8001498:	1052      	asrs	r2, r2, #1
 800149a:	17db      	asrs	r3, r3, #31
 800149c:	1ad2      	subs	r2, r2, r3
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dd5c      	ble.n	8001564 <get_pulse+0x1a0>
	      pulse = true;                             // set the Pulse flag when we think there is a pulse
 80014aa:	4b64      	ldr	r3, [pc, #400]	@ (800163c <get_pulse+0x278>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
	      IBI = N;    // measure time between beats in mS
 80014b0:	4a5e      	ldr	r2, [pc, #376]	@ (800162c <get_pulse+0x268>)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	6013      	str	r3, [r2, #0]
	      samples_since_last_beat = 0;
 80014b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001620 <get_pulse+0x25c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

	      if (second_beat) {                      // if this is the second beat, if secondBeat == TRUE
 80014bc:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <get_pulse+0x27c>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d011      	beq.n	80014e8 <get_pulse+0x124>
	        second_beat = false;                    // clear secondBeat flag
 80014c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001640 <get_pulse+0x27c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	e008      	b.n	80014e2 <get_pulse+0x11e>
	          rate[i] = IBI;
 80014d0:	4b56      	ldr	r3, [pc, #344]	@ (800162c <get_pulse+0x268>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	495b      	ldr	r1, [pc, #364]	@ (8001644 <get_pulse+0x280>)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        for (int i = 0; i < BUF_LENGTH; i++) {       // seed the running total to get a realisitic BPM at startup
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3301      	adds	r3, #1
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b09      	cmp	r3, #9
 80014e6:	ddf3      	ble.n	80014d0 <get_pulse+0x10c>
	        }
	      }

	      if (first_beat) {                       // if it's the first time we found a beat, if firstBeat == TRUE
 80014e8:	4b57      	ldr	r3, [pc, #348]	@ (8001648 <get_pulse+0x284>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <get_pulse+0x13a>
	    	first_beat = 0;                       // clear firstBeat flag
 80014f0:	4b55      	ldr	r3, [pc, #340]	@ (8001648 <get_pulse+0x284>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
	    	second_beat = 1;                      // set the second beat flag
 80014f6:	4b52      	ldr	r3, [pc, #328]	@ (8001640 <get_pulse+0x27c>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	701a      	strb	r2, [r3, #0]
	        // IBI value is unreliable so discard it
	        return;
 80014fc:	e08a      	b.n	8001614 <get_pulse+0x250>
	      }


	      // keep a running total of the last 10 IBI values
	      int runningTotal = 0;                  // clear the runningTotal variable
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]

	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	e012      	b.n	800152e <get_pulse+0x16a>
	        rate[i] = rate[i + 1];                // and drop the oldest IBI value
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3301      	adds	r3, #1
 800150c:	4a4d      	ldr	r2, [pc, #308]	@ (8001644 <get_pulse+0x280>)
 800150e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001512:	494c      	ldr	r1, [pc, #304]	@ (8001644 <get_pulse+0x280>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        runningTotal += rate[i];              // add up the 9 oldest IBI values
 800151a:	4a4a      	ldr	r2, [pc, #296]	@ (8001644 <get_pulse+0x280>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4413      	add	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
	      for (int i = 0; i < BUF_LENGTH - 1; i++) {          // shift data in the rate array
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3301      	adds	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b08      	cmp	r3, #8
 8001532:	dde9      	ble.n	8001508 <get_pulse+0x144>
	      }

	      rate[BUF_LENGTH - 1] = IBI;                          // add the latest IBI to the rate array
 8001534:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <get_pulse+0x268>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a42      	ldr	r2, [pc, #264]	@ (8001644 <get_pulse+0x280>)
 800153a:	6253      	str	r3, [r2, #36]	@ 0x24
	      runningTotal += rate[BUF_LENGTH - 1];                // add the latest IBI to runningTotal
 800153c:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <get_pulse+0x280>)
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	68ba      	ldr	r2, [r7, #8]
 8001542:	4413      	add	r3, r2
 8001544:	60bb      	str	r3, [r7, #8]
	      runningTotal /= BUF_LENGTH;                     // average the last 10 IBI values
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	4a39      	ldr	r2, [pc, #228]	@ (8001630 <get_pulse+0x26c>)
 800154a:	fb82 1203 	smull	r1, r2, r2, r3
 800154e:	1092      	asrs	r2, r2, #2
 8001550:	17db      	asrs	r3, r3, #31
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	60bb      	str	r3, [r7, #8]
	      BPM = 60000 / runningTotal;             // how many beats can fit into a minute? that's BPM!
 8001556:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001560:	4a3a      	ldr	r2, [pc, #232]	@ (800164c <get_pulse+0x288>)
 8001562:	6013      	str	r3, [r2, #0]
	      //fadeLevel = MAX_FADE_LEVEL;             // If we're fading, re-light that LED.
	    }
	  }

	  if (signal < thresh && pulse) {  // when the values are going down, the beat is over
 8001564:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <get_pulse+0x260>)
 8001566:	ed93 7a00 	vldr	s14, [r3]
 800156a:	4b2f      	ldr	r3, [pc, #188]	@ (8001628 <get_pulse+0x264>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	d528      	bpl.n	80015cc <get_pulse+0x208>
 800157a:	4b30      	ldr	r3, [pc, #192]	@ (800163c <get_pulse+0x278>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d024      	beq.n	80015cc <get_pulse+0x208>
	    pulse = false;                         // reset the Pulse flag so we can do it again
 8001582:	4b2e      	ldr	r3, [pc, #184]	@ (800163c <get_pulse+0x278>)
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
	    amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 8001588:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <get_pulse+0x274>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <get_pulse+0x270>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	4b2d      	ldr	r3, [pc, #180]	@ (8001650 <get_pulse+0x28c>)
 800159a:	edc3 7a00 	vstr	s15, [r3]
	    thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 800159e:	4b2c      	ldr	r3, [pc, #176]	@ (8001650 <get_pulse+0x28c>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80015a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015ac:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <get_pulse+0x270>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001628 <get_pulse+0x264>)
 80015b8:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <get_pulse+0x264>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001638 <get_pulse+0x274>)
 80015c2:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <get_pulse+0x264>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001634 <get_pulse+0x270>)
 80015ca:	6013      	str	r3, [r2, #0]
	  }

	  if (N > 2500) {                          // if 2.5 seconds go by without a beat
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80015d2:	4293      	cmp	r3, r2
 80015d4:	dd1e      	ble.n	8001614 <get_pulse+0x250>
	    thresh = THRESH_DEFAULT;                // set thresh default
 80015d6:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <get_pulse+0x264>)
 80015d8:	4a1e      	ldr	r2, [pc, #120]	@ (8001654 <get_pulse+0x290>)
 80015da:	601a      	str	r2, [r3, #0]
	    peak_amp = THRESH_DEFAULT;                               // set P default
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <get_pulse+0x274>)
 80015de:	4a1d      	ldr	r2, [pc, #116]	@ (8001654 <get_pulse+0x290>)
 80015e0:	601a      	str	r2, [r3, #0]
	    trough_amp = THRESH_DEFAULT;                               // set T default
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <get_pulse+0x270>)
 80015e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001654 <get_pulse+0x290>)
 80015e6:	601a      	str	r2, [r3, #0]
	    samples_since_last_beat = 0;          // bring the lastBeatTime up to date
 80015e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <get_pulse+0x25c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
	    first_beat = true;                      // set these to avoid noise
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <get_pulse+0x284>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	701a      	strb	r2, [r3, #0]
	    second_beat = false;                    // when we get the heartbeat back
 80015f4:	4b12      	ldr	r3, [pc, #72]	@ (8001640 <get_pulse+0x27c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
	    BPM = 0;
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <get_pulse+0x288>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
	    IBI = 600;                  // 600ms per beat = 100 Beats Per Minute (BPM)
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <get_pulse+0x268>)
 8001602:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8001606:	601a      	str	r2, [r3, #0]
	    pulse = false;
 8001608:	4b0c      	ldr	r3, [pc, #48]	@ (800163c <get_pulse+0x278>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	    amp = 100;                  // beat amplitude 1/10 of input range.
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <get_pulse+0x28c>)
 8001610:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <get_pulse+0x294>)
 8001612:	601a      	str	r2, [r3, #0]

	  }
}
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000264 	.word	0x20000264
 8001624:	2000025c 	.word	0x2000025c
 8001628:	20000008 	.word	0x20000008
 800162c:	20000000 	.word	0x20000000
 8001630:	66666667 	.word	0x66666667
 8001634:	20000010 	.word	0x20000010
 8001638:	2000000c 	.word	0x2000000c
 800163c:	20000261 	.word	0x20000261
 8001640:	20000260 	.word	0x20000260
 8001644:	20000234 	.word	0x20000234
 8001648:	20000014 	.word	0x20000014
 800164c:	20000230 	.word	0x20000230
 8001650:	20000004 	.word	0x20000004
 8001654:	3fcccccd 	.word	0x3fcccccd
 8001658:	42c80000 	.word	0x42c80000

0800165c <get_BPM>:

int get_BPM(void) {
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return BPM;
 8001660:	4b03      	ldr	r3, [pc, #12]	@ (8001670 <get_BPM+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000230 	.word	0x20000230

08001674 <GPS_nmea_to_dec>:
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
            return;
    }
}

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	ed87 0a01 	vstr	s0, [r7, #4]
 800167e:	4603      	mov	r3, r0
 8001680:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001682:	ed97 7a01 	vldr	s14, [r7, #4]
 8001686:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001708 <GPS_nmea_to_dec+0x94>
 800168a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800168e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001692:	ee17 3a90 	vmov	r3, s15
 8001696:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	2264      	movs	r2, #100	@ 0x64
 800169c:	fb02 f303 	mul.w	r3, r2, r3
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80016ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016b0:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80016b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80016b8:	eddf 6a14 	vldr	s13, [pc, #80]	@ 800170c <GPS_nmea_to_dec+0x98>
 80016bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c0:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80016d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	2b53      	cmp	r3, #83	@ 0x53
 80016de:	d002      	beq.n	80016e6 <GPS_nmea_to_dec+0x72>
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	2b57      	cmp	r3, #87	@ 0x57
 80016e4:	d105      	bne.n	80016f2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80016e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ea:	eef1 7a67 	vneg.f32	s15, s15
 80016ee:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	ee07 3a90 	vmov	s15, r3
}
 80016f8:	eeb0 0a67 	vmov.f32	s0, s15
 80016fc:	371c      	adds	r7, #28
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	42c80000 	.word	0x42c80000
 800170c:	42700000 	.word	0x42700000

08001710 <updateGPS>:

updateGPS(){
 8001710:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001714:	b08e      	sub	sp, #56	@ 0x38
 8001716:	af00      	add	r7, sp, #0
	// imu_ctr = 1;
	  int counter = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	@ 0x34
	  int counter2 = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	@ 0x30
	  while(1){
		  HAL_StatusTypeDef ret = HAL_UART_Receive(&huart1, a, 1, 5000);
 8001720:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001724:	2201      	movs	r2, #1
 8001726:	4980      	ldr	r1, [pc, #512]	@ (8001928 <updateGPS+0x218>)
 8001728:	4880      	ldr	r0, [pc, #512]	@ (800192c <updateGPS+0x21c>)
 800172a:	f007 fc32 	bl	8008f92 <HAL_UART_Receive>
 800172e:	4603      	mov	r3, r0
 8001730:	75fb      	strb	r3, [r7, #23]
		  if (ret == HAL_TIMEOUT) {
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b03      	cmp	r3, #3
 8001736:	f000 81b6 	beq.w	8001aa6 <updateGPS+0x396>
			  break;
		  }
		  if(a[0] == '$'){
 800173a:	4b7b      	ldr	r3, [pc, #492]	@ (8001928 <updateGPS+0x218>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b24      	cmp	r3, #36	@ 0x24
 8001740:	f040 810d 	bne.w	800195e <updateGPS+0x24e>
			  gps_buf[gps_idx++] = a[0];
 8001744:	4b7a      	ldr	r3, [pc, #488]	@ (8001930 <updateGPS+0x220>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	b2d1      	uxtb	r1, r2
 800174c:	4a78      	ldr	r2, [pc, #480]	@ (8001930 <updateGPS+0x220>)
 800174e:	7011      	strb	r1, [r2, #0]
 8001750:	461a      	mov	r2, r3
 8001752:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <updateGPS+0x218>)
 8001754:	7819      	ldrb	r1, [r3, #0]
 8001756:	4b77      	ldr	r3, [pc, #476]	@ (8001934 <updateGPS+0x224>)
 8001758:	5499      	strb	r1, [r3, r2]
			  //printf("%c", a[0]);
			  while (a[0] != 10){
 800175a:	e011      	b.n	8001780 <updateGPS+0x70>
				  HAL_UART_Receive(&huart1, a, 1, 5000);
 800175c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001760:	2201      	movs	r2, #1
 8001762:	4971      	ldr	r1, [pc, #452]	@ (8001928 <updateGPS+0x218>)
 8001764:	4871      	ldr	r0, [pc, #452]	@ (800192c <updateGPS+0x21c>)
 8001766:	f007 fc14 	bl	8008f92 <HAL_UART_Receive>
				  gps_buf[gps_idx++] = a[0];
 800176a:	4b71      	ldr	r3, [pc, #452]	@ (8001930 <updateGPS+0x220>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	b2d1      	uxtb	r1, r2
 8001772:	4a6f      	ldr	r2, [pc, #444]	@ (8001930 <updateGPS+0x220>)
 8001774:	7011      	strb	r1, [r2, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	4b6b      	ldr	r3, [pc, #428]	@ (8001928 <updateGPS+0x218>)
 800177a:	7819      	ldrb	r1, [r3, #0]
 800177c:	4b6d      	ldr	r3, [pc, #436]	@ (8001934 <updateGPS+0x224>)
 800177e:	5499      	strb	r1, [r3, r2]
			  while (a[0] != 10){
 8001780:	4b69      	ldr	r3, [pc, #420]	@ (8001928 <updateGPS+0x218>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b0a      	cmp	r3, #10
 8001786:	d1e9      	bne.n	800175c <updateGPS+0x4c>
				  //printf("%c", a[0]);
			  }
			  for (int i = 0; i < 7; ++i){
 8001788:	2300      	movs	r3, #0
 800178a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800178c:	e00b      	b.n	80017a6 <updateGPS+0x96>
				  temp[i] = gps_buf[i];
 800178e:	4a69      	ldr	r2, [pc, #420]	@ (8001934 <updateGPS+0x224>)
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	4413      	add	r3, r2
 8001794:	7819      	ldrb	r1, [r3, #0]
 8001796:	4a68      	ldr	r2, [pc, #416]	@ (8001938 <updateGPS+0x228>)
 8001798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800179a:	4413      	add	r3, r2
 800179c:	460a      	mov	r2, r1
 800179e:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 7; ++i){
 80017a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a2:	3301      	adds	r3, #1
 80017a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017a8:	2b06      	cmp	r3, #6
 80017aa:	ddf0      	ble.n	800178e <updateGPS+0x7e>
			  }
			  temp[6] = '\0';
 80017ac:	4b62      	ldr	r3, [pc, #392]	@ (8001938 <updateGPS+0x228>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	719a      	strb	r2, [r3, #6]
			  for (int i = 0; i < 128; ++i){
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017b6:	e009      	b.n	80017cc <updateGPS+0xbc>
				  printf("%c", gps_buf[i]);////////
 80017b8:	4a5e      	ldr	r2, [pc, #376]	@ (8001934 <updateGPS+0x224>)
 80017ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017bc:	4413      	add	r3, r2
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f009 fe9f 	bl	800b504 <putchar>
			  for (int i = 0; i < 128; ++i){
 80017c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c8:	3301      	adds	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80017cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80017d0:	ddf2      	ble.n	80017b8 <updateGPS+0xa8>
			  }


			  //printf("done\n");
			  counter++;
 80017d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d4:	3301      	adds	r3, #1
 80017d6:	637b      	str	r3, [r7, #52]	@ 0x34
			  gps_idx = 0;
 80017d8:	4b55      	ldr	r3, [pc, #340]	@ (8001930 <updateGPS+0x220>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]


			  if (!strncmp((char*)temp, "$GPGGA", 6)){
 80017de:	2206      	movs	r2, #6
 80017e0:	4956      	ldr	r1, [pc, #344]	@ (800193c <updateGPS+0x22c>)
 80017e2:	4855      	ldr	r0, [pc, #340]	@ (8001938 <updateGPS+0x228>)
 80017e4:	f009 ff01 	bl	800b5ea <strncmp>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 8081 	bne.w	80018f2 <updateGPS+0x1e2>
				  char lat[9];
				  char lat_ns;
				  char lon[9];
				  char lon_ew;

				  for (int i = 18; i < 27; i++){
 80017f0:	2312      	movs	r3, #18
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f4:	e00c      	b.n	8001810 <updateGPS+0x100>
					  lat[i-18] = gps_buf[i];
 80017f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f8:	3b12      	subs	r3, #18
 80017fa:	494e      	ldr	r1, [pc, #312]	@ (8001934 <updateGPS+0x224>)
 80017fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017fe:	440a      	add	r2, r1
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	3338      	adds	r3, #56	@ 0x38
 8001804:	443b      	add	r3, r7
 8001806:	f803 2c2c 	strb.w	r2, [r3, #-44]
				  for (int i = 18; i < 27; i++){
 800180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180c:	3301      	adds	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001812:	2b1a      	cmp	r3, #26
 8001814:	ddef      	ble.n	80017f6 <updateGPS+0xe6>

				  }
				  lat_ns = gps_buf[28];
 8001816:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <updateGPS+0x224>)
 8001818:	7f1b      	ldrb	r3, [r3, #28]
 800181a:	75bb      	strb	r3, [r7, #22]
				  for (int i = 30; i < 40; i++){
 800181c:	231e      	movs	r3, #30
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	e00c      	b.n	800183c <updateGPS+0x12c>
					  lon[i-30] = gps_buf[i];
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	3b1e      	subs	r3, #30
 8001826:	4943      	ldr	r1, [pc, #268]	@ (8001934 <updateGPS+0x224>)
 8001828:	6a3a      	ldr	r2, [r7, #32]
 800182a:	440a      	add	r2, r1
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	3338      	adds	r3, #56	@ 0x38
 8001830:	443b      	add	r3, r7
 8001832:	f803 2c38 	strb.w	r2, [r3, #-56]
				  for (int i = 30; i < 40; i++){
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	3301      	adds	r3, #1
 800183a:	623b      	str	r3, [r7, #32]
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	2b27      	cmp	r3, #39	@ 0x27
 8001840:	ddef      	ble.n	8001822 <updateGPS+0x112>
				  }
				  lon_ew = gps_buf[41];
 8001842:	4b3c      	ldr	r3, [pc, #240]	@ (8001934 <updateGPS+0x224>)
 8001844:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001848:	757b      	strb	r3, [r7, #21]
				  for (int i = 0; i < 128; ++i){
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	e007      	b.n	8001860 <updateGPS+0x150>
					  gps_buf[i] = 0;
 8001850:	4a38      	ldr	r2, [pc, #224]	@ (8001934 <updateGPS+0x224>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	4413      	add	r3, r2
 8001856:	2200      	movs	r2, #0
 8001858:	701a      	strb	r2, [r3, #0]
				  for (int i = 0; i < 128; ++i){
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3301      	adds	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b7f      	cmp	r3, #127	@ 0x7f
 8001864:	ddf4      	ble.n	8001850 <updateGPS+0x140>
				  }
				  GPS2.dec_latitude = GPS_nmea_to_dec(strtof(lat, NULL), lat_ns)*(PI/180);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f008 fea5 	bl	800a5bc <strtof>
 8001872:	ee07 0a90 	vmov	s15, r0
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	7dbb      	ldrb	r3, [r7, #22]
 800187c:	4618      	mov	r0, r3
 800187e:	eeb0 0a67 	vmov.f32	s0, s15
 8001882:	f7ff fef7 	bl	8001674 <GPS_nmea_to_dec>
 8001886:	ee10 3a10 	vmov	r3, s0
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe5c 	bl	8000548 <__aeabi_f2d>
 8001890:	a323      	add	r3, pc, #140	@ (adr r3, 8001920 <updateGPS+0x210>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe feaf 	bl	80005f8 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	f7ff f9a1 	bl	8000be8 <__aeabi_d2f>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4a25      	ldr	r2, [pc, #148]	@ (8001940 <updateGPS+0x230>)
 80018aa:	6053      	str	r3, [r2, #4]
				  GPS2.dec_longitude = GPS_nmea_to_dec(strtof(lon, NULL), lon_ew)*(PI/180);
 80018ac:	463b      	mov	r3, r7
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f008 fe83 	bl	800a5bc <strtof>
 80018b6:	ee07 0a90 	vmov	s15, r0
 80018ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018be:	7d7b      	ldrb	r3, [r7, #21]
 80018c0:	4618      	mov	r0, r3
 80018c2:	eeb0 0a67 	vmov.f32	s0, s15
 80018c6:	f7ff fed5 	bl	8001674 <GPS_nmea_to_dec>
 80018ca:	ee10 3a10 	vmov	r3, s0
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe3a 	bl	8000548 <__aeabi_f2d>
 80018d4:	a312      	add	r3, pc, #72	@ (adr r3, 8001920 <updateGPS+0x210>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fe8d 	bl	80005f8 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	f7ff f97f 	bl	8000be8 <__aeabi_d2f>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <updateGPS+0x230>)
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e011      	b.n	8001916 <updateGPS+0x206>

			  }
			  else if (!strncmp((char*)temp, "$GPRMC", 6)){
 80018f2:	2206      	movs	r2, #6
 80018f4:	4913      	ldr	r1, [pc, #76]	@ (8001944 <updateGPS+0x234>)
 80018f6:	4810      	ldr	r0, [pc, #64]	@ (8001938 <updateGPS+0x228>)
 80018f8:	f009 fe77 	bl	800b5ea <strncmp>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d109      	bne.n	8001916 <updateGPS+0x206>
				//sscanf((char*)gps_buf, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS2.utc_time, &GPS2.nmea_latitude, &GPS2.ns, &GPS2.nmea_longitude, &GPS2.ew, &GPS2.speed_k, &GPS2.course_d, &GPS2.date);
				  GPS2.speed_k++;
 8001902:	4b0f      	ldr	r3, [pc, #60]	@ (8001940 <updateGPS+0x230>)
 8001904:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001908:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800190c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <updateGPS+0x230>)
 8001912:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			  }
			  for (int i = 0; i < 128; ++i){
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e01d      	b.n	8001958 <updateGPS+0x248>
 800191c:	f3af 8000 	nop.w
 8001920:	a2529d39 	.word	0xa2529d39
 8001924:	3f91df46 	.word	0x3f91df46
 8001928:	20000268 	.word	0x20000268
 800192c:	200004c0 	.word	0x200004c0
 8001930:	200002f4 	.word	0x200002f4
 8001934:	20000274 	.word	0x20000274
 8001938:	20000370 	.word	0x20000370
 800193c:	0800f4e0 	.word	0x0800f4e0
 8001940:	200002f8 	.word	0x200002f8
 8001944:	0800f510 	.word	0x0800f510
				  gps_buf[i] = 0;
 8001948:	4a5d      	ldr	r2, [pc, #372]	@ (8001ac0 <updateGPS+0x3b0>)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	4413      	add	r3, r2
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 128; ++i){
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	3301      	adds	r3, #1
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b7f      	cmp	r3, #127	@ 0x7f
 800195c:	ddf4      	ble.n	8001948 <updateGPS+0x238>
			  }
		  }

		  if(counter == 6){
 800195e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001960:	2b06      	cmp	r3, #6
 8001962:	f47f aedd 	bne.w	8001720 <updateGPS+0x10>
//				  printf("long: %f, longdec: %f\n\r", GPS2.nmea_latitude, GPS2.dec_longitude);
//				  printf("lat: %f, latdec: %f\n\r", GPS2.nmea_longitude, GPS2.dec_latitude);
//				  printf("speed: %f\n\r", GPS2.speed_k);
//				  printf("date: %f\n\r", GPS2.utc_time);

			  if(counter2 == 1){
 8001966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 8096 	bne.w	8001a9a <updateGPS+0x38a>
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 800196e:	4b55      	ldr	r3, [pc, #340]	@ (8001ac4 <updateGPS+0x3b4>)
 8001970:	ed93 7a00 	vldr	s14, [r3]
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <updateGPS+0x3b4>)
 8001976:	edd3 7a02 	vldr	s15, [r3, #8]
 800197a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197e:	ee17 0a90 	vmov	r0, s15
 8001982:	f7fe fde1 	bl	8000548 <__aeabi_f2d>
 8001986:	4604      	mov	r4, r0
 8001988:	460d      	mov	r5, r1
						  (cos(((double)GPS2.dec_longitude+(double)GPS2.dec_longitude_prev)/2));
 800198a:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac4 <updateGPS+0x3b4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fdda 	bl	8000548 <__aeabi_f2d>
 8001994:	4680      	mov	r8, r0
 8001996:	4689      	mov	r9, r1
 8001998:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac4 <updateGPS+0x3b4>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdd3 	bl	8000548 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	4640      	mov	r0, r8
 80019a8:	4649      	mov	r1, r9
 80019aa:	f7fe fc6f 	bl	800028c <__adddf3>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019be:	f7fe ff45 	bl	800084c <__aeabi_ddiv>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b17 	vmov	d7, r2, r3
 80019ca:	eeb0 0a47 	vmov.f32	s0, s14
 80019ce:	eef0 0a67 	vmov.f32	s1, s15
 80019d2:	f00c fc35 	bl	800e240 <cos>
 80019d6:	ec53 2b10 	vmov	r2, r3, d0
				  x_cord = (double)(GPS2.dec_longitude - GPS2.dec_longitude_prev)*
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fe0b 	bl	80005f8 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4938      	ldr	r1, [pc, #224]	@ (8001ac8 <updateGPS+0x3b8>)
 80019e8:	e9c1 2300 	strd	r2, r3, [r1]
				  y_cord = (double)(GPS2.dec_latitude - GPS2.dec_latitude_prev);
 80019ec:	4b35      	ldr	r3, [pc, #212]	@ (8001ac4 <updateGPS+0x3b4>)
 80019ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80019f2:	4b34      	ldr	r3, [pc, #208]	@ (8001ac4 <updateGPS+0x3b4>)
 80019f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80019f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019fc:	ee17 0a90 	vmov	r0, s15
 8001a00:	f7fe fda2 	bl	8000548 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4930      	ldr	r1, [pc, #192]	@ (8001acc <updateGPS+0x3bc>)
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]
				  p2p_dist = sqrt(x_cord*x_cord + y_cord*y_cord)*6371000;
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <updateGPS+0x3b8>)
 8001a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a14:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <updateGPS+0x3b8>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	f7fe fded 	bl	80005f8 <__aeabi_dmul>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	4614      	mov	r4, r2
 8001a24:	461d      	mov	r5, r3
 8001a26:	4b29      	ldr	r3, [pc, #164]	@ (8001acc <updateGPS+0x3bc>)
 8001a28:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a2c:	4b27      	ldr	r3, [pc, #156]	@ (8001acc <updateGPS+0x3bc>)
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	f7fe fde1 	bl	80005f8 <__aeabi_dmul>
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	f7fe fc25 	bl	800028c <__adddf3>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	ec43 2b17 	vmov	d7, r2, r3
 8001a4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a4e:	eef0 0a67 	vmov.f32	s1, s15
 8001a52:	f00c fbc9 	bl	800e1e8 <sqrt>
 8001a56:	ec51 0b10 	vmov	r0, r1, d0
 8001a5a:	a317      	add	r3, pc, #92	@ (adr r3, 8001ab8 <updateGPS+0x3a8>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fdca 	bl	80005f8 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4919      	ldr	r1, [pc, #100]	@ (8001ad0 <updateGPS+0x3c0>)
 8001a6a:	e9c1 2300 	strd	r2, r3, [r1]
				  velocity = p2p_dist/5;// m/s, timer is set for 5 sec
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <updateGPS+0x3c0>)
 8001a70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <updateGPS+0x3c4>)
 8001a7a:	f7fe fee7 	bl	800084c <__aeabi_ddiv>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4915      	ldr	r1, [pc, #84]	@ (8001ad8 <updateGPS+0x3c8>)
 8001a84:	e9c1 2300 	strd	r2, r3, [r1]
				  //printf("p2p: %f\nmeter/sec: %f\n\r", p2p_dist,velocity);
				  //printf("Minute Per Mile: %f\n\r", .08333/(p2p_dist/1609.3));
				  GPS2.dec_latitude_prev = GPS2.dec_latitude;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <updateGPS+0x3b4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <updateGPS+0x3b4>)
 8001a8e:	60d3      	str	r3, [r2, #12]
				  GPS2.dec_longitude_prev = GPS2.dec_longitude;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <updateGPS+0x3b4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac4 <updateGPS+0x3b4>)
 8001a96:	6093      	str	r3, [r2, #8]


				  break;
 8001a98:	e006      	b.n	8001aa8 <updateGPS+0x398>
			  }
			  counter2++;
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30
			  counter = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	@ 0x34
	  while(1){
 8001aa4:	e63c      	b.n	8001720 <updateGPS+0x10>
			  break;
 8001aa6:	bf00      	nop


		  }
	  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3738      	adds	r7, #56	@ 0x38
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ab2:	bf00      	nop
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	00000000 	.word	0x00000000
 8001abc:	41584dae 	.word	0x41584dae
 8001ac0:	20000274 	.word	0x20000274
 8001ac4:	200002f8 	.word	0x200002f8
 8001ac8:	20000360 	.word	0x20000360
 8001acc:	20000368 	.word	0x20000368
 8001ad0:	20000358 	.word	0x20000358
 8001ad4:	40140000 	.word	0x40140000
 8001ad8:	20000378 	.word	0x20000378

08001adc <get_distance>:

double get_distance(){
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
	return p2p_dist;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <get_distance+0x20>)
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	ec43 2b17 	vmov	d7, r2, r3
}
 8001aea:	eeb0 0a47 	vmov.f32	s0, s14
 8001aee:	eef0 0a67 	vmov.f32	s1, s15
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000358 	.word	0x20000358

08001b00 <get_velocity>:

double get_velocity(){
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	return velocity;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <get_velocity+0x20>)
 8001b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0a:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001b12:	eef0 0a67 	vmov.f32	s1, s15
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000378 	.word	0x20000378

08001b24 <read_register>:

// SPI helpers //

// Reads single register
static uint8_t read_register(lora_sx1276 *lora, uint8_t address)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	70fb      	strb	r3, [r7, #3]
  uint8_t value = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	73fb      	strb	r3, [r7, #15]

  // 7bit controls read/write mode
  CLEAR_BIT(address, BIT_7);
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	70fb      	strb	r3, [r7, #3]

  // Start SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6858      	ldr	r0, [r3, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	8adb      	ldrh	r3, [r3, #22]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f003 f8d7 	bl	8004cfc <HAL_GPIO_WritePin>
  // Transmit reg address, then receive it value
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6818      	ldr	r0, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	1cf9      	adds	r1, r7, #3
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f005 f904 	bl	8006d66 <HAL_SPI_Transmit>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	617b      	str	r3, [r7, #20]
  uint32_t res2 = HAL_SPI_Receive(lora->spi, &value, 1, lora->spi_timeout);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6818      	ldr	r0, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f107 010f 	add.w	r1, r7, #15
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f005 fa6e 	bl	8007050 <HAL_SPI_Receive>
 8001b74:	4603      	mov	r3, r0
 8001b76:	613b      	str	r3, [r7, #16]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6858      	ldr	r0, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	8adb      	ldrh	r3, [r3, #22]
 8001b80:	2201      	movs	r2, #1
 8001b82:	4619      	mov	r1, r3
 8001b84:	f003 f8ba 	bl	8004cfc <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit/receive failed (%d %d)", res1, res2);
  }

  return value;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <write_register>:

// Writes single register
static void write_register(lora_sx1276 *lora, uint8_t address, uint8_t value)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	70fb      	strb	r3, [r7, #3]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	70bb      	strb	r3, [r7, #2]
  // 7bit controls read/write mode
  SET_BIT(address, BIT_7);
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ba8:	70fb      	strb	r3, [r7, #3]

  // Reg address + its new value
  uint16_t payload = (value << 8) | address;
 8001baa:	78bb      	ldrb	r3, [r7, #2]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	b21a      	sxth	r2, r3
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	b21b      	sxth	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	817b      	strh	r3, [r7, #10]

  // Start SPI transaction, send address + value
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6858      	ldr	r0, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	8adb      	ldrh	r3, [r3, #22]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f003 f898 	bl	8004cfc <HAL_GPIO_WritePin>
  uint32_t res = HAL_SPI_Transmit(lora->spi, (uint8_t*)&payload, 2, lora->spi_timeout);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f107 010a 	add.w	r1, r7, #10
 8001bd8:	2202      	movs	r2, #2
 8001bda:	f005 f8c4 	bl	8006d66 <HAL_SPI_Transmit>
 8001bde:	4603      	mov	r3, r0
 8001be0:	60fb      	str	r3, [r7, #12]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6858      	ldr	r0, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	8adb      	ldrh	r3, [r3, #22]
 8001bea:	2201      	movs	r2, #1
 8001bec:	4619      	mov	r1, r3
 8001bee:	f003 f885 	bl	8004cfc <HAL_GPIO_WritePin>

  if (res != HAL_OK) {
    DEBUGF("SPI transmit failed: %d", res);
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <write_fifo>:

// Copies bytes from buffer into radio FIFO given len length
static void write_fifo(lora_sx1276 *lora, uint8_t *buffer, uint8_t len, uint8_t mode)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b088      	sub	sp, #32
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	4611      	mov	r1, r2
 8001c06:	461a      	mov	r2, r3
 8001c08:	460b      	mov	r3, r1
 8001c0a:	71fb      	strb	r3, [r7, #7]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71bb      	strb	r3, [r7, #6]
  uint8_t address = REG_FIFO | BIT_7;
 8001c10:	2380      	movs	r3, #128	@ 0x80
 8001c12:	75fb      	strb	r3, [r7, #23]

  // Start SPI transaction, send address
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_RESET);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6858      	ldr	r0, [r3, #4]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8adb      	ldrh	r3, [r3, #22]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f003 f86c 	bl	8004cfc <HAL_GPIO_WritePin>
  uint32_t res1 = HAL_SPI_Transmit(lora->spi, &address, 1, lora->spi_timeout);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f107 0117 	add.w	r1, r7, #23
 8001c30:	2201      	movs	r2, #1
 8001c32:	f005 f898 	bl	8006d66 <HAL_SPI_Transmit>
 8001c36:	4603      	mov	r3, r0
 8001c38:	61fb      	str	r3, [r7, #28]
  if (mode == TRANSFER_MODE_DMA) {
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d108      	bne.n	8001c52 <write_fifo+0x58>
    HAL_SPI_Transmit_DMA(lora->spi, buffer, len);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	b292      	uxth	r2, r2
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f005 fd5a 	bl	8007704 <HAL_SPI_Transmit_DMA>
 8001c50:	e012      	b.n	8001c78 <write_fifo+0x7e>
    // Intentionally leave SPI active - let DMA finish transfer
    return;
  }
  uint32_t res2 = HAL_SPI_Transmit(lora->spi, buffer, len, lora->spi_timeout);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	f005 f881 	bl	8006d66 <HAL_SPI_Transmit>
 8001c64:	4603      	mov	r3, r0
 8001c66:	61bb      	str	r3, [r7, #24]
  // End SPI transaction
  HAL_GPIO_WritePin(lora->nss_port, lora->nss_pin, GPIO_PIN_SET);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6858      	ldr	r0, [r3, #4]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8adb      	ldrh	r3, [r3, #22]
 8001c70:	2201      	movs	r2, #1
 8001c72:	4619      	mov	r1, r3
 8001c74:	f003 f842 	bl	8004cfc <HAL_GPIO_WritePin>

  if (res1 != HAL_OK || res2 != HAL_OK) {
    DEBUGF("SPI transmit failed");
  }
}
 8001c78:	3720      	adds	r7, #32
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <set_mode>:
    DEBUGF("SPI receive/transmit failed");
  }
}

static void set_mode(lora_sx1276 *lora, uint8_t mode)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70fb      	strb	r3, [r7, #3]
  write_register(lora, REG_OP_MODE, OPMODE_LONG_RANGE_MODE | mode);
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	2101      	movs	r1, #1
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff ff7b 	bl	8001b92 <write_register>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <set_OCP>:

// Set Overload Current Protection
static void set_OCP(lora_sx1276 *lora, uint8_t imax)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	70fb      	strb	r3, [r7, #3]
  uint8_t value;

  // Minimum available current is 45mA, maximum 240mA
  // As per page 80 of datasheet
  if (imax < 45) {
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	2b2c      	cmp	r3, #44	@ 0x2c
 8001cb4:	d801      	bhi.n	8001cba <set_OCP+0x16>
    imax = 45;
 8001cb6:	232d      	movs	r3, #45	@ 0x2d
 8001cb8:	70fb      	strb	r3, [r7, #3]
  }
  if (imax > 240) {
 8001cba:	78fb      	ldrb	r3, [r7, #3]
 8001cbc:	2bf0      	cmp	r3, #240	@ 0xf0
 8001cbe:	d901      	bls.n	8001cc4 <set_OCP+0x20>
    imax = 240;
 8001cc0:	23f0      	movs	r3, #240	@ 0xf0
 8001cc2:	70fb      	strb	r3, [r7, #3]
  }

  if (imax < 130) {
 8001cc4:	78fb      	ldrb	r3, [r7, #3]
 8001cc6:	2b81      	cmp	r3, #129	@ 0x81
 8001cc8:	d809      	bhi.n	8001cde <set_OCP+0x3a>
    value = (imax - 45) / 5;
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	3b2d      	subs	r3, #45	@ 0x2d
 8001cce:	4a0f      	ldr	r2, [pc, #60]	@ (8001d0c <set_OCP+0x68>)
 8001cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd4:	1052      	asrs	r2, r2, #1
 8001cd6:	17db      	asrs	r3, r3, #31
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e008      	b.n	8001cf0 <set_OCP+0x4c>
  } else {
    value = (imax + 30) / 10;
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	331e      	adds	r3, #30
 8001ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d0c <set_OCP+0x68>)
 8001ce4:	fb82 1203 	smull	r1, r2, r2, r3
 8001ce8:	1092      	asrs	r2, r2, #2
 8001cea:	17db      	asrs	r3, r3, #31
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	73fb      	strb	r3, [r7, #15]
  }

  write_register(lora, REG_OCP, OCP_ON | value);
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	f043 0320 	orr.w	r3, r3, #32
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	210b      	movs	r1, #11
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f7ff ff48 	bl	8001b92 <write_register>
}
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	66666667 	.word	0x66666667

08001d10 <set_low_data_rate_optimization>:

static void set_low_data_rate_optimization(lora_sx1276 *lora)
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b088      	sub	sp, #32
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Read current signal bandwidth
  uint64_t bandwidth = read_register(lora, REG_MODEM_CONFIG_1) >> 4;
 8001d18:	211d      	movs	r1, #29
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff02 	bl	8001b24 <read_register>
 8001d20:	4603      	mov	r3, r0
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2200      	movs	r2, #0
 8001d2a:	461c      	mov	r4, r3
 8001d2c:	4615      	mov	r5, r2
 8001d2e:	e9c7 4504 	strd	r4, r5, [r7, #16]
  // Read current spreading factor
  uint8_t  sf = read_register(lora, REG_MODEM_CONFIG_2) >> 4;
 8001d32:	211e      	movs	r1, #30
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff fef5 	bl	8001b24 <read_register>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	73fb      	strb	r3, [r7, #15]

  uint8_t  mc3 = MC3_AGCAUTO;
 8001d40:	2304      	movs	r3, #4
 8001d42:	77fb      	strb	r3, [r7, #31]

  if (sf >= 11 && bandwidth == LORA_BANDWIDTH_125_KHZ) {
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2b0a      	cmp	r3, #10
 8001d48:	d908      	bls.n	8001d5c <set_low_data_rate_optimization+0x4c>
 8001d4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d4e:	1fd1      	subs	r1, r2, #7
 8001d50:	430b      	orrs	r3, r1
 8001d52:	d103      	bne.n	8001d5c <set_low_data_rate_optimization+0x4c>
    mc3 |= MC3_MOBILE_NODE;
 8001d54:	7ffb      	ldrb	r3, [r7, #31]
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	77fb      	strb	r3, [r7, #31]
  }

  write_register(lora, REG_MODEM_CONFIG_3, mc3);
 8001d5c:	7ffb      	ldrb	r3, [r7, #31]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2126      	movs	r1, #38	@ 0x26
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ff15 	bl	8001b92 <write_register>
}
 8001d68:	bf00      	nop
 8001d6a:	3720      	adds	r7, #32
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bdb0      	pop	{r4, r5, r7, pc}

08001d70 <lora_mode_sleep>:

void lora_mode_sleep(lora_sx1276 *lora)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_SLEEP);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ff7f 	bl	8001c7e <set_mode>
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <lora_mode_receive_single>:

  set_mode(lora, OPMODE_RX_CONTINUOUS);
}

void lora_mode_receive_single(lora_sx1276 *lora)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  // Update base FIFO address for incoming packets
  write_register(lora, REG_FIFO_RX_BASE_ADDR, lora->rx_base_addr);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7d5b      	ldrb	r3, [r3, #21]
 8001d94:	461a      	mov	r2, r3
 8001d96:	210f      	movs	r1, #15
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff fefa 	bl	8001b92 <write_register>
  // Clear all RX related IRQs
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_RX_ALL);
 8001d9e:	22f0      	movs	r2, #240	@ 0xf0
 8001da0:	2112      	movs	r1, #18
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fef5 	bl	8001b92 <write_register>

  set_mode(lora, OPMODE_RX_SINGLE);
 8001da8:	2106      	movs	r1, #6
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff67 	bl	8001c7e <set_mode>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <lora_mode_standby>:

void lora_mode_standby(lora_sx1276 *lora)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  set_mode(lora, OPMODE_STDBY);
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ff5b 	bl	8001c7e <set_mode>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <lora_set_explicit_header_mode>:
  mc1 |= MC1_IMPLICIT_HEADER_MODE;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_explicit_header_mode(lora_sx1276 *lora)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t mc1 = read_register(lora, REG_MODEM_CONFIG_1);
 8001dd8:	211d      	movs	r1, #29
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fea2 	bl	8001b24 <read_register>
 8001de0:	4603      	mov	r3, r0
 8001de2:	73fb      	strb	r3, [r7, #15]
  mc1 &= ~MC1_IMPLICIT_HEADER_MODE;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	461a      	mov	r2, r3
 8001df0:	211d      	movs	r1, #29
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fecd 	bl	8001b92 <write_register>
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <lora_set_tx_power>:

void lora_set_tx_power(lora_sx1276 *lora, uint8_t level)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	70fb      	strb	r3, [r7, #3]
  assert_param(lora);

  if (lora->pa_mode == LORA_PA_OUTPUT_RFO) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d10e      	bne.n	8001e32 <lora_set_tx_power+0x32>
    // RFO pin
    assert_param(level <= 15);
    if (level > 15) {
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	2b0f      	cmp	r3, #15
 8001e18:	d901      	bls.n	8001e1e <lora_set_tx_power+0x1e>
      level = 15;
 8001e1a:	230f      	movs	r3, #15
 8001e1c:	70fb      	strb	r3, [r7, #3]
    }
    // 7 bit -> PaSelect: 0 for RFO    --- = 0x70
    // 6-4 bits -> MaxPower (select all) --^
    // 3-0 bits -> Output power, dB (max 15)
    write_register(lora, REG_PA_CONFIG, 0x70 | level);
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	2109      	movs	r1, #9
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff feb1 	bl	8001b92 <write_register>
    // Minimum power level is 2 which is 0 for chip
    level -= 2;
    // 7 bit -> PaSelect: 1 for PA_BOOST
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
  }
}
 8001e30:	e02e      	b.n	8001e90 <lora_set_tx_power+0x90>
    if (level > 20) {
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	2b14      	cmp	r3, #20
 8001e36:	d901      	bls.n	8001e3c <lora_set_tx_power+0x3c>
      level = 20;
 8001e38:	2314      	movs	r3, #20
 8001e3a:	70fb      	strb	r3, [r7, #3]
    if (level < 2) {
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d801      	bhi.n	8001e46 <lora_set_tx_power+0x46>
      level = 2;
 8001e42:	2302      	movs	r3, #2
 8001e44:	70fb      	strb	r3, [r7, #3]
    if (level > 17) {
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	2b11      	cmp	r3, #17
 8001e4a:	d90c      	bls.n	8001e66 <lora_set_tx_power+0x66>
      level -= 3;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	3b03      	subs	r3, #3
 8001e50:	70fb      	strb	r3, [r7, #3]
      write_register(lora, REG_PA_DAC, PA_DAC_HIGH_POWER);
 8001e52:	2287      	movs	r2, #135	@ 0x87
 8001e54:	214d      	movs	r1, #77	@ 0x4d
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fe9b 	bl	8001b92 <write_register>
      set_OCP(lora, 140);
 8001e5c:	218c      	movs	r1, #140	@ 0x8c
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff20 	bl	8001ca4 <set_OCP>
 8001e64:	e008      	b.n	8001e78 <lora_set_tx_power+0x78>
      write_register(lora, REG_PA_DAC, PA_DAC_HALF_POWER);
 8001e66:	2284      	movs	r2, #132	@ 0x84
 8001e68:	214d      	movs	r1, #77	@ 0x4d
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff fe91 	bl	8001b92 <write_register>
      set_OCP(lora, 97);
 8001e70:	2161      	movs	r1, #97	@ 0x61
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ff16 	bl	8001ca4 <set_OCP>
    level -= 2;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	3b02      	subs	r3, #2
 8001e7c:	70fb      	strb	r3, [r7, #3]
    write_register(lora, REG_PA_CONFIG, BIT_7 | level);
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	2109      	movs	r1, #9
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fe81 	bl	8001b92 <write_register>
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <lora_set_frequency>:

void lora_set_frequency(lora_sx1276 *lora, uint64_t freq)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(lora);

  // From datasheet: FREQ = (FRF * 32 Mhz) / (2 ^ 19)
  uint64_t frf = (freq << 19) / (32 * MHZ);
 8001ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ea8:	f04f 0000 	mov.w	r0, #0
 8001eac:	f04f 0100 	mov.w	r1, #0
 8001eb0:	04d9      	lsls	r1, r3, #19
 8001eb2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001eb6:	04d0      	lsls	r0, r2, #19
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <lora_set_frequency+0x88>)
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	f7fe fee3 	bl	8000c88 <__aeabi_uldivmod>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	e9c7 2304 	strd	r2, r3, [r7, #16]

  write_register(lora, REG_FRF_MSB, frf >> 16);
 8001eca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	0c02      	lsrs	r2, r0, #16
 8001ed8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001edc:	0c0b      	lsrs	r3, r1, #16
 8001ede:	b2d3      	uxtb	r3, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2106      	movs	r1, #6
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f7ff fe54 	bl	8001b92 <write_register>
  write_register(lora, REG_FRF_MID, (frf & 0xff00) >> 8);
 8001eea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	0a02      	lsrs	r2, r0, #8
 8001ef8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001efc:	0a0b      	lsrs	r3, r1, #8
 8001efe:	b2d3      	uxtb	r3, r2
 8001f00:	461a      	mov	r2, r3
 8001f02:	2107      	movs	r1, #7
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f7ff fe44 	bl	8001b92 <write_register>
  write_register(lora, REG_FRF_LSB, frf & 0xff);
 8001f0a:	7c3b      	ldrb	r3, [r7, #16]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2108      	movs	r1, #8
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff fe3e 	bl	8001b92 <write_register>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	01e84800 	.word	0x01e84800

08001f24 <lora_set_spreading_factor>:

  set_low_data_rate_optimization(lora);
}

void lora_set_spreading_factor(lora_sx1276 *lora, uint8_t sf)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
  assert_param(lora && sf <= 12 && sf >=6);

  if (sf < 6) {
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b05      	cmp	r3, #5
 8001f34:	d802      	bhi.n	8001f3c <lora_set_spreading_factor+0x18>
    sf = 6;
 8001f36:	2306      	movs	r3, #6
 8001f38:	70fb      	strb	r3, [r7, #3]
 8001f3a:	e004      	b.n	8001f46 <lora_set_spreading_factor+0x22>
  } else if (sf > 12) {
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d901      	bls.n	8001f46 <lora_set_spreading_factor+0x22>
    sf = 12;
 8001f42:	230c      	movs	r3, #12
 8001f44:	70fb      	strb	r3, [r7, #3]
  }

  if (sf == 6) {
 8001f46:	78fb      	ldrb	r3, [r7, #3]
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d10a      	bne.n	8001f62 <lora_set_spreading_factor+0x3e>
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc5);
 8001f4c:	22c5      	movs	r2, #197	@ 0xc5
 8001f4e:	2131      	movs	r1, #49	@ 0x31
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fe1e 	bl	8001b92 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0c);
 8001f56:	220c      	movs	r2, #12
 8001f58:	2137      	movs	r1, #55	@ 0x37
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fe19 	bl	8001b92 <write_register>
 8001f60:	e009      	b.n	8001f76 <lora_set_spreading_factor+0x52>
  } else {
    write_register(lora, REG_DETECTION_OPTIMIZE, 0xc3);
 8001f62:	22c3      	movs	r2, #195	@ 0xc3
 8001f64:	2131      	movs	r1, #49	@ 0x31
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fe13 	bl	8001b92 <write_register>
    write_register(lora, REG_DETECTION_THRESHOLD, 0x0a);
 8001f6c:	220a      	movs	r2, #10
 8001f6e:	2137      	movs	r1, #55	@ 0x37
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fe0e 	bl	8001b92 <write_register>
  }
  // Set new spread factor
  uint8_t mc2 = read_register(lora, REG_MODEM_CONFIG_2);
 8001f76:	211e      	movs	r1, #30
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fdd3 	bl	8001b24 <read_register>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	73fb      	strb	r3, [r7, #15]
  mc2 = (mc2 & 0x0F) | (sf << 4);
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	b25a      	sxtb	r2, r3
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	4313      	orrs	r3, r2
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	73fb      	strb	r3, [r7, #15]
  // uint8_t new_config = (current_config & 0x0f) | ((sf << 4) & 0xf0);
  write_register(lora, REG_MODEM_CONFIG_2, mc2);
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	211e      	movs	r1, #30
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fdf7 	bl	8001b92 <write_register>

  set_low_data_rate_optimization(lora);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff feb3 	bl	8001d10 <set_low_data_rate_optimization>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <lora_set_preamble_length>:
  mc1 |= rate << 1;
  write_register(lora, REG_MODEM_CONFIG_1, mc1);
}

void lora_set_preamble_length(lora_sx1276 *lora, uint16_t len)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	807b      	strh	r3, [r7, #2]
  assert_param(lora);

  write_register(lora, REG_PREAMBLE_MSB, len >> 8);
 8001fbe:	887b      	ldrh	r3, [r7, #2]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2120      	movs	r1, #32
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fde1 	bl	8001b92 <write_register>
  write_register(lora, REG_PREAMBLE_LSB, len & 0xf);
 8001fd0:	887b      	ldrh	r3, [r7, #2]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2121      	movs	r1, #33	@ 0x21
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fdd7 	bl	8001b92 <write_register>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <lora_version>:

uint8_t lora_version(lora_sx1276 *lora)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  return read_register(lora, REG_VERSION);
 8001ff4:	2142      	movs	r1, #66	@ 0x42
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fd94 	bl	8001b24 <read_register>
 8001ffc:	4603      	mov	r3, r0
  // TODO: uncomment above line and comment out below
//  return read_register(lora, 0x25);
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <lora_is_transmitting>:

uint8_t lora_is_transmitting(lora_sx1276 *lora)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t opmode = read_register(lora, REG_OP_MODE);
 800200e:	2101      	movs	r1, #1
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fd87 	bl	8001b24 <read_register>
 8002016:	4603      	mov	r3, r0
 8002018:	73fb      	strb	r3, [r7, #15]

  return (opmode & OPMODE_TX) == OPMODE_TX ? LORA_BUSY : LORA_OK;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b03      	cmp	r3, #3
 8002022:	d101      	bne.n	8002028 <lora_is_transmitting+0x22>
 8002024:	2305      	movs	r3, #5
 8002026:	e000      	b.n	800202a <lora_is_transmitting+0x24>
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <lora_send_packet_base>:

static uint8_t lora_send_packet_base(lora_sx1276 *lora, uint8_t *data, uint8_t data_len, uint8_t mode)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b084      	sub	sp, #16
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	4611      	mov	r1, r2
 800203e:	461a      	mov	r2, r3
 8002040:	460b      	mov	r3, r1
 8002042:	71fb      	strb	r3, [r7, #7]
 8002044:	4613      	mov	r3, r2
 8002046:	71bb      	strb	r3, [r7, #6]
  assert_param(lora && data && data_len > 0);

  if (lora_is_transmitting(lora)) {
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff ffdc 	bl	8002006 <lora_is_transmitting>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <lora_send_packet_base+0x26>
    return LORA_BUSY;
 8002054:	2305      	movs	r3, #5
 8002056:	e02a      	b.n	80020ae <lora_send_packet_base+0x7c>
  }

  // Wakeup radio because of FIFO is only available in STANDBY mode
  set_mode(lora, OPMODE_STDBY);
 8002058:	2101      	movs	r1, #1
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff fe0f 	bl	8001c7e <set_mode>

  // Clear TX IRQ flag, to be sure
  lora_clear_interrupt_tx_done(lora);
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f859 	bl	8002118 <lora_clear_interrupt_tx_done>

  // Set FIFO pointer to the beginning of the buffer
  write_register(lora, REG_FIFO_ADDR_PTR, lora->tx_base_addr);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	7d1b      	ldrb	r3, [r3, #20]
 800206a:	461a      	mov	r2, r3
 800206c:	210d      	movs	r1, #13
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f7ff fd8f 	bl	8001b92 <write_register>
  write_register(lora, REG_FIFO_TX_BASE_ADDR, lora->tx_base_addr);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	7d1b      	ldrb	r3, [r3, #20]
 8002078:	461a      	mov	r2, r3
 800207a:	210e      	movs	r1, #14
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff fd88 	bl	8001b92 <write_register>
  write_register(lora, REG_PAYLOAD_LENGTH, data_len);
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	461a      	mov	r2, r3
 8002086:	2122      	movs	r1, #34	@ 0x22
 8002088:	68f8      	ldr	r0, [r7, #12]
 800208a:	f7ff fd82 	bl	8001b92 <write_register>

  // Copy packet into radio FIFO
  write_fifo(lora, data, data_len, mode);
 800208e:	79bb      	ldrb	r3, [r7, #6]
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	68b9      	ldr	r1, [r7, #8]
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7ff fdb0 	bl	8001bfa <write_fifo>
  if (mode == TRANSFER_MODE_DMA) {
 800209a:	79bb      	ldrb	r3, [r7, #6]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <lora_send_packet_base+0x72>
    return LORA_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e004      	b.n	80020ae <lora_send_packet_base+0x7c>
  }

  // Put radio in TX mode - packet will be transmitted ASAP
  set_mode(lora, OPMODE_TX);
 80020a4:	2103      	movs	r1, #3
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff fde9 	bl	8001c7e <set_mode>
  return LORA_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <lora_send_packet>:

uint8_t lora_send_packet(lora_sx1276 *lora, uint8_t *data, uint8_t data_len)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b084      	sub	sp, #16
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71fb      	strb	r3, [r7, #7]
  return lora_send_packet_base(lora, data, data_len, TRANSFER_MODE_BLOCKING);
 80020c4:	79fa      	ldrb	r2, [r7, #7]
 80020c6:	2302      	movs	r3, #2
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7ff ffb1 	bl	8002032 <lora_send_packet_base>
 80020d0:	4603      	mov	r3, r0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <lora_is_packet_available>:
    write_register(lora, REG_MODEM_CONFIG_2, mc2);
  }
}

uint8_t lora_is_packet_available(lora_sx1276 *lora)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
  assert_param(lora);

  uint8_t irqs = read_register(lora, REG_IRQ_FLAGS);
 80020e2:	2112      	movs	r1, #18
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff fd1d 	bl	8001b24 <read_register>
 80020ea:	4603      	mov	r3, r0
 80020ec:	73fb      	strb	r3, [r7, #15]

  // In case of Single receive mode RX_TIMEOUT will be issued
  return  irqs & (IRQ_FLAGS_RX_DONE | IRQ_FLAGS_RX_TIMEOUT);
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020f4:	b2db      	uxtb	r3, r3
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <lora_enable_interrupt_rx_done>:

  return lora_receive_packet(lora, buffer, buffer_len, error);
}

void lora_enable_interrupt_rx_done(lora_sx1276 *lora)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  // Table 63 DIO Mapping LoRaTM Mode:
  // 00 -> (DIO0 rx_done)
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x00);
 8002106:	2200      	movs	r2, #0
 8002108:	2140      	movs	r1, #64	@ 0x40
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fd41 	bl	8001b92 <write_register>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <lora_clear_interrupt_tx_done>:
  // DIO0 uses 6-7 bits of DIO_MAPPING_1
  write_register(lora, REG_DIO_MAPPING_1, 0x40);
}

void lora_clear_interrupt_tx_done(lora_sx1276 *lora)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  write_register(lora, REG_IRQ_FLAGS, IRQ_FLAGS_TX_DONE);
 8002120:	2208      	movs	r2, #8
 8002122:	2112      	movs	r1, #18
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff fd34 	bl	8001b92 <write_register>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <lora_init>:
}


uint8_t lora_init(lora_sx1276 *lora, SPI_HandleTypeDef *spi, GPIO_TypeDef *nss_port,
    uint16_t nss_pin, uint64_t freq)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b086      	sub	sp, #24
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
 800213e:	807b      	strh	r3, [r7, #2]
  assert_param(lora && spi);

  // Init params with default values
  lora->spi = spi;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	601a      	str	r2, [r3, #0]
  lora->nss_port = nss_port;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	605a      	str	r2, [r3, #4]
  lora->nss_pin = nss_pin;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	82da      	strh	r2, [r3, #22]
  lora->frequency = freq;
 8002152:	6a3a      	ldr	r2, [r7, #32]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	60da      	str	r2, [r3, #12]
  lora->pa_mode = LORA_PA_OUTPUT_PA_BOOST;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	611a      	str	r2, [r3, #16]
  lora->tx_base_addr = LORA_DEFAULT_TX_ADDR;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	751a      	strb	r2, [r3, #20]
  lora->rx_base_addr = LORA_DEFAULT_RX_ADDR;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	755a      	strb	r2, [r3, #21]
  lora->spi_timeout = LORA_DEFAULT_SPI_TIMEOUT;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002170:	609a      	str	r2, [r3, #8]

  // Check version
  uint8_t ver = lora_version(lora);
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff ff3a 	bl	8001fec <lora_version>
 8002178:	4603      	mov	r3, r0
 800217a:	75fb      	strb	r3, [r7, #23]
  if (ver != LORA_COMPATIBLE_VERSION) {
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	2b12      	cmp	r3, #18
 8002180:	d001      	beq.n	8002186 <lora_init+0x54>
    DEBUGF("Got wrong radio version 0x%x, expected 0x12", ver);
    return LORA_ERROR;
 8002182:	2304      	movs	r3, #4
 8002184:	e031      	b.n	80021ea <lora_init+0xb8>
  }

  // Modem parameters (freq, mode, etc) must be done in SLEEP mode.
  lora_mode_sleep(lora);
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f7ff fdf2 	bl	8001d70 <lora_mode_sleep>
  // Enable LoRa mode (since it can be switched on only in sleep)
  lora_mode_sleep(lora);
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff fdef 	bl	8001d70 <lora_mode_sleep>

  // Set frequency
  lora_set_frequency(lora, freq);
 8002192:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f7ff fe7e 	bl	8001e98 <lora_set_frequency>
  lora_set_spreading_factor(lora, LORA_DEFAULT_SF);
 800219c:	2107      	movs	r1, #7
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff fec0 	bl	8001f24 <lora_set_spreading_factor>
  lora_set_preamble_length(lora, LORA_DEFAULT_PREAMBLE_LEN);
 80021a4:	210a      	movs	r1, #10
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff ff03 	bl	8001fb2 <lora_set_preamble_length>
  // By default - explicit header mode
  lora_set_explicit_header_mode(lora);
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff fe0f 	bl	8001dd0 <lora_set_explicit_header_mode>
  // Set LNA boost
  uint8_t current_lna = read_register(lora, REG_LNA);
 80021b2:	210c      	movs	r1, #12
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff fcb5 	bl	8001b24 <read_register>
 80021ba:	4603      	mov	r3, r0
 80021bc:	75bb      	strb	r3, [r7, #22]
  write_register(lora, REG_LNA,  current_lna | 0x03);
 80021be:	7dbb      	ldrb	r3, [r7, #22]
 80021c0:	f043 0303 	orr.w	r3, r3, #3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	461a      	mov	r2, r3
 80021c8:	210c      	movs	r1, #12
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f7ff fce1 	bl	8001b92 <write_register>
  // Set auto AGC
  write_register(lora, REG_MODEM_CONFIG_3, 0x04);
 80021d0:	2204      	movs	r2, #4
 80021d2:	2126      	movs	r1, #38	@ 0x26
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f7ff fcdc 	bl	8001b92 <write_register>
  // Set default output power
  lora_set_tx_power(lora, LORA_DEFAULT_TX_POWER);
 80021da:	2111      	movs	r1, #17
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff fe0f 	bl	8001e00 <lora_set_tx_power>
  // Set default mode
  lora_mode_standby(lora);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff fde8 	bl	8001db8 <lora_mode_standby>

  return LORA_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3718      	adds	r7, #24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	0000      	movs	r0, r0
 80021f4:	0000      	movs	r0, r0
	...

080021f8 <lora_infINIT>:
/* USER CODE BEGIN 0 */

/* lora initiation helper, executes up to 100 times */
// AHHHH, why recursion??
// Stack frames, but idk if that matters...
uint8_t lora_infINIT(int init_ctr) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af02      	add	r7, sp, #8
 80021fe:	6078      	str	r0, [r7, #4]
	if (init_ctr < 100) {
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b63      	cmp	r3, #99	@ 0x63
 8002204:	dc18      	bgt.n	8002238 <lora_infINIT+0x40>
		uint8_t res = lora_init(&lora, &hspi1, GPIOB, GPIO_PIN_0, LORA_BASE_FREQUENCY_US+FREQ_OFFSET);
 8002206:	a313      	add	r3, pc, #76	@ (adr r3, 8002254 <lora_infINIT+0x5c>)
 8002208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220c:	e9cd 2300 	strd	r2, r3, [sp]
 8002210:	2301      	movs	r3, #1
 8002212:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <lora_infINIT+0x50>)
 8002214:	490d      	ldr	r1, [pc, #52]	@ (800224c <lora_infINIT+0x54>)
 8002216:	480e      	ldr	r0, [pc, #56]	@ (8002250 <lora_infINIT+0x58>)
 8002218:	f7ff ff8b 	bl	8002132 <lora_init>
 800221c:	4603      	mov	r3, r0
 800221e:	73fb      	strb	r3, [r7, #15]
		if (res != LORA_OK) {
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <lora_infINIT+0x3c>
			// Initialization failed
			// retry lol
			return lora_infINIT(init_ctr + 1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3301      	adds	r3, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ffe4 	bl	80021f8 <lora_infINIT>
 8002230:	4603      	mov	r3, r0
 8002232:	e002      	b.n	800223a <lora_infINIT+0x42>
	  	} else {
	  		return LORA_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <lora_infINIT+0x42>
	  	}
	} else {
		return LORA_ERROR;
 8002238:	2304      	movs	r3, #4
	}
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	f3af 8000 	nop.w
 8002248:	48000400 	.word	0x48000400
 800224c:	20000548 	.word	0x20000548
 8002250:	20000694 	.word	0x20000694
 8002254:	36e55840 	.word	0x36e55840
 8002258:	00000000 	.word	0x00000000

0800225c <IMUcallback>:

/* called @ 200Hz, updates step count based on IMU data */
inline void IMUcallback(void) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
	vec_t acc_vec, gravity_vec;
	lin_acc_vec(&hi2c3, &acc_vec.x);
 8002262:	f107 030c 	add.w	r3, r7, #12
 8002266:	4619      	mov	r1, r3
 8002268:	4812      	ldr	r0, [pc, #72]	@ (80022b4 <IMUcallback+0x58>)
 800226a:	f7fe ffab 	bl	80011c4 <lin_acc_vec>
	grav_vec(&hi2c3, &gravity_vec.x);
 800226e:	463b      	mov	r3, r7
 8002270:	4619      	mov	r1, r3
 8002272:	4810      	ldr	r0, [pc, #64]	@ (80022b4 <IMUcallback+0x58>)
 8002274:	f7ff f822 	bl	80012bc <grav_vec>
	input_step_data(gravity_vec, acc_vec);
 8002278:	ed97 5a03 	vldr	s10, [r7, #12]
 800227c:	edd7 5a04 	vldr	s11, [r7, #16]
 8002280:	ed97 6a05 	vldr	s12, [r7, #20]
 8002284:	edd7 6a00 	vldr	s13, [r7]
 8002288:	ed97 7a01 	vldr	s14, [r7, #4]
 800228c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002290:	eef0 1a45 	vmov.f32	s3, s10
 8002294:	eeb0 2a65 	vmov.f32	s4, s11
 8002298:	eef0 2a46 	vmov.f32	s5, s12
 800229c:	eeb0 0a66 	vmov.f32	s0, s13
 80022a0:	eef0 0a47 	vmov.f32	s1, s14
 80022a4:	eeb0 1a67 	vmov.f32	s2, s15
 80022a8:	f000 fbe2 	bl	8002a70 <input_step_data>
	//input_acc(gravity_vec, acc_vec);
	// do somethign to add to speed vec or acc vec idk
}
 80022ac:	bf00      	nop
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	200003e4 	.word	0x200003e4

080022b8 <loraCallback>:
	}

}

/* loraCallback(): called after gps is read (5s period) to send relevant data */
inline void loraCallback(void) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	// possibly send 5 seconds late
	// before next* gps poll in order
	// to send at a precise times
	// --> 5 second delay should not have large effect

	lora_data.speed = get_velocity();	// speed from gps file
 80022bc:	f7ff fc20 	bl	8001b00 <get_velocity>
 80022c0:	ec53 2b10 	vmov	r2, r3, d0
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe fc8e 	bl	8000be8 <__aeabi_d2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4a10      	ldr	r2, [pc, #64]	@ (8002310 <loraCallback+0x58>)
 80022d0:	6013      	str	r3, [r2, #0]
	lora_data.distance = get_distance();	// distance from gps file
 80022d2:	f7ff fc03 	bl	8001adc <get_distance>
 80022d6:	ec53 2b10 	vmov	r2, r3, d0
 80022da:	4610      	mov	r0, r2
 80022dc:	4619      	mov	r1, r3
 80022de:	f7fe fc83 	bl	8000be8 <__aeabi_d2f>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <loraCallback+0x58>)
 80022e6:	6053      	str	r3, [r2, #4]
	lora_data.heart_rate = get_BPM();	// bpm from pulse sensor file
 80022e8:	f7ff f9b8 	bl	800165c <get_BPM>
 80022ec:	4603      	mov	r3, r0
 80022ee:	4a08      	ldr	r2, [pc, #32]	@ (8002310 <loraCallback+0x58>)
 80022f0:	6093      	str	r3, [r2, #8]
	lora_data.steps = get_step_count();	// step count from steps file
 80022f2:	f000 fd1b 	bl	8002d2c <get_step_count>
 80022f6:	4603      	mov	r3, r0
 80022f8:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <loraCallback+0x58>)
 80022fa:	60d3      	str	r3, [r2, #12]
//	lora_data.speed++;	// speed from gps file
//	lora_data.distance++;	// distance from gps file
//	lora_data.heart_rate++;	// bpm from pulse sensor file
//	lora_data.steps++;	// step count from steps file
	lora_send_packet(&lora, (uint8_t*)&lora_data, sizeof(lora_data));
 80022fc:	2210      	movs	r2, #16
 80022fe:	4904      	ldr	r1, [pc, #16]	@ (8002310 <loraCallback+0x58>)
 8002300:	4804      	ldr	r0, [pc, #16]	@ (8002314 <loraCallback+0x5c>)
 8002302:	f7ff fed8 	bl	80020b6 <lora_send_packet>
	lora_mode_receive_single(&lora);
 8002306:	4803      	ldr	r0, [pc, #12]	@ (8002314 <loraCallback+0x5c>)
 8002308:	f7ff fd3e 	bl	8001d88 <lora_mode_receive_single>
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200006b0 	.word	0x200006b0
 8002314:	20000694 	.word	0x20000694

08002318 <HAL_TIM_PeriodElapsedCallback>:

/* timer checker */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	if (htim == &htim6) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a09      	ldr	r2, [pc, #36]	@ (8002348 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d104      	bne.n	8002332 <HAL_TIM_PeriodElapsedCallback+0x1a>
		IMUcallback();
 8002328:	f7ff ff98 	bl	800225c <IMUcallback>
		updatePulseSensor();
 800232c:	f7ff f810 	bl	8001350 <updatePulseSensor>
	} else if (htim == &htim7) {
		/* timer controlling GPS and LoRa data */
		gps_flag = 1;
		//vibratorCallback();
	}
}
 8002330:	e006      	b.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x28>
	} else if (htim == &htim7) {
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a05      	ldr	r2, [pc, #20]	@ (800234c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d102      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x28>
		gps_flag = 1;
 800233a:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200005f8 	.word	0x200005f8
 800234c:	20000644 	.word	0x20000644
 8002350:	200006ac 	.word	0x200006ac

08002354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b0a2      	sub	sp, #136	@ 0x88
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800235a:	f001 f8dc 	bl	8003516 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800235e:	f000 f887 	bl	8002470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002362:	f000 fb05 	bl	8002970 <MX_GPIO_Init>
  MX_TIM6_Init();
 8002366:	f000 fa95 	bl	8002894 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 800236a:	f000 f995 	bl	8002698 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800236e:	f000 f8c5 	bl	80024fc <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8002372:	f000 f965 	bl	8002640 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002376:	f000 f9bf 	bl	80026f8 <MX_SPI1_Init>
  MX_TIM1_Init();
 800237a:	f000 f9fb 	bl	8002774 <MX_TIM1_Init>
  MX_TIM7_Init();
 800237e:	f000 fabf 	bl	8002900 <MX_TIM7_Init>
  MX_I2C3_Init();
 8002382:	f000 f91f 	bl	80025c4 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  initPulseSensor(&hadc1);
 8002386:	4831      	ldr	r0, [pc, #196]	@ (800244c <main+0xf8>)
 8002388:	f7fe ffd2 	bl	8001330 <initPulseSensor>
  init_IMU(&hi2c3);
 800238c:	4830      	ldr	r0, [pc, #192]	@ (8002450 <main+0xfc>)
 800238e:	f7fe fe63 	bl	8001058 <init_IMU>
  uint8_t res = lora_infINIT(0);
 8002392:	2000      	movs	r0, #0
 8002394:	f7ff ff30 	bl	80021f8 <lora_infINIT>
 8002398:	4603      	mov	r3, r0
 800239a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
  if (res != LORA_OK) {
	  // restart whole system idk
  }

  // start your engines!
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800239e:	2100      	movs	r1, #0
 80023a0:	482c      	ldr	r0, [pc, #176]	@ (8002454 <main+0x100>)
 80023a2:	f005 fdff 	bl	8007fa4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 80023a6:	482c      	ldr	r0, [pc, #176]	@ (8002458 <main+0x104>)
 80023a8:	f005 fd50 	bl	8007e4c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80023ac:	482b      	ldr	r0, [pc, #172]	@ (800245c <main+0x108>)
 80023ae:	f005 fd4d 	bl	8007e4c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t buzz = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  // Wait at least 5 seconds before clearing buzzer
  uint8_t wait = 1;
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
  lora_enable_interrupt_rx_done(&lora);
 80023be:	4828      	ldr	r0, [pc, #160]	@ (8002460 <main+0x10c>)
 80023c0:	f7ff fe9d 	bl	80020fe <lora_enable_interrupt_rx_done>
  char buffer[128];
  lora_mode_receive_single(&lora);
 80023c4:	4826      	ldr	r0, [pc, #152]	@ (8002460 <main+0x10c>)
 80023c6:	f7ff fcdf 	bl	8001d88 <lora_mode_receive_single>

  while (1)
  {

	  /* GPS Polling */
	  if (gps_flag) {
 80023ca:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <main+0x110>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01f      	beq.n	8002412 <main+0xbe>
		  updateGPS();
 80023d2:	f7ff f99d 	bl	8001710 <updateGPS>
		  gps_flag = 0;
 80023d6:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <main+0x110>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
		  loraCallback(); // transmit lora data after GPS bottleneck finishes
 80023dc:	f7ff ff6c 	bl	80022b8 <loraCallback>
		  if (buzz && !wait) {
 80023e0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00d      	beq.n	8002404 <main+0xb0>
 80023e8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d109      	bne.n	8002404 <main+0xb0>
		  		  TIM1->CCR1 = 0;
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <main+0x114>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	635a      	str	r2, [r3, #52]	@ 0x34
		  		  buzz = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		  		  wait = 1;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8002402:	e006      	b.n	8002412 <main+0xbe>
		  } else if (buzz) {
 8002404:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <main+0xbe>
			  wait = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
		  }
	  }
	  if(LoRaRecieve == 1){
 8002412:	4b16      	ldr	r3, [pc, #88]	@ (800246c <main+0x118>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10e      	bne.n	8002438 <main+0xe4>
	  		  //Get data
	  //		  	  lora_mode_receive_continuous(&lora);

//	  		  	  lora_receive_packet_blocking(&lora, buffer, sizeof(buffer), 10000, &res);
	  		  	if (!lora_is_packet_available(&lora)) {
 800241a:	4811      	ldr	r0, [pc, #68]	@ (8002460 <main+0x10c>)
 800241c:	f7ff fe5d 	bl	80020da <lora_is_packet_available>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d108      	bne.n	8002438 <main+0xe4>
	  		  		LoRaRecieve = 0;
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <main+0x118>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
	  		  		buzz = 1;
 800242c:	2301      	movs	r3, #1
 800242e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	  		  		lora_mode_receive_single(&lora);
 8002432:	480b      	ldr	r0, [pc, #44]	@ (8002460 <main+0x10c>)
 8002434:	f7ff fca8 	bl	8001d88 <lora_mode_receive_single>
	  		  	}

	  }
	  if (buzz) {
 8002438:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0c4      	beq.n	80023ca <main+0x76>
		  TIM1->CCR1 = 65534;
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <main+0x114>)
 8002442:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002446:	635a      	str	r2, [r3, #52]	@ 0x34
	  if (gps_flag) {
 8002448:	e7bf      	b.n	80023ca <main+0x76>
 800244a:	bf00      	nop
 800244c:	20000380 	.word	0x20000380
 8002450:	200003e4 	.word	0x200003e4
 8002454:	200005ac 	.word	0x200005ac
 8002458:	200005f8 	.word	0x200005f8
 800245c:	20000644 	.word	0x20000644
 8002460:	20000694 	.word	0x20000694
 8002464:	200006ac 	.word	0x200006ac
 8002468:	40012c00 	.word	0x40012c00
 800246c:	20000690 	.word	0x20000690

08002470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b096      	sub	sp, #88	@ 0x58
 8002474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	2244      	movs	r2, #68	@ 0x44
 800247c:	2100      	movs	r1, #0
 800247e:	4618      	mov	r0, r3
 8002480:	f009 f8ab 	bl	800b5da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002484:	463b      	mov	r3, r7
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]
 800248e:	60da      	str	r2, [r3, #12]
 8002490:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002492:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002496:	f003 fa4d 	bl	8005934 <HAL_PWREx_ControlVoltageScaling>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80024a0:	f000 fae0 	bl	8002a64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80024a4:	2310      	movs	r3, #16
 80024a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80024b0:	2360      	movs	r3, #96	@ 0x60
 80024b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 fa8f 	bl	80059e0 <HAL_RCC_OscConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80024c8:	f000 facc 	bl	8002a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024cc:	230f      	movs	r3, #15
 80024ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80024d0:	2300      	movs	r3, #0
 80024d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024d8:	2300      	movs	r3, #0
 80024da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024dc:	2300      	movs	r3, #0
 80024de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80024e0:	463b      	mov	r3, r7
 80024e2:	2100      	movs	r1, #0
 80024e4:	4618      	mov	r0, r3
 80024e6:	f003 fe8f 	bl	8006208 <HAL_RCC_ClockConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80024f0:	f000 fab8 	bl	8002a64 <Error_Handler>
  }
}
 80024f4:	bf00      	nop
 80024f6:	3758      	adds	r7, #88	@ 0x58
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002502:	463b      	mov	r3, r7
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
 8002510:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002512:	4b29      	ldr	r3, [pc, #164]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002514:	4a29      	ldr	r2, [pc, #164]	@ (80025bc <MX_ADC1_Init+0xc0>)
 8002516:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002518:	4b27      	ldr	r3, [pc, #156]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 800251a:	2200      	movs	r2, #0
 800251c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800251e:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002524:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002526:	2200      	movs	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800252a:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002530:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002532:	2204      	movs	r2, #4
 8002534:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002536:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002538:	2200      	movs	r2, #0
 800253a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800253c:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 800253e:	2200      	movs	r2, #0
 8002540:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002542:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002544:	2201      	movs	r2, #1
 8002546:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002550:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002552:	2200      	movs	r2, #0
 8002554:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002558:	2200      	movs	r2, #0
 800255a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800255c:	4b16      	ldr	r3, [pc, #88]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002566:	2200      	movs	r2, #0
 8002568:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800256a:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002572:	4811      	ldr	r0, [pc, #68]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 8002574:	f001 fa0c 	bl	8003990 <HAL_ADC_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800257e:	f000 fa71 	bl	8002a64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002582:	4b0f      	ldr	r3, [pc, #60]	@ (80025c0 <MX_ADC1_Init+0xc4>)
 8002584:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002586:	2306      	movs	r3, #6
 8002588:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800258a:	2300      	movs	r3, #0
 800258c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800258e:	237f      	movs	r3, #127	@ 0x7f
 8002590:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002592:	2304      	movs	r3, #4
 8002594:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800259a:	463b      	mov	r3, r7
 800259c:	4619      	mov	r1, r3
 800259e:	4806      	ldr	r0, [pc, #24]	@ (80025b8 <MX_ADC1_Init+0xbc>)
 80025a0:	f001 fc38 	bl	8003e14 <HAL_ADC_ConfigChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80025aa:	f000 fa5b 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000380 	.word	0x20000380
 80025bc:	50040000 	.word	0x50040000
 80025c0:	14f00020 	.word	0x14f00020

080025c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <MX_I2C3_Init+0x74>)
 80025ca:	4a1c      	ldr	r2, [pc, #112]	@ (800263c <MX_I2C3_Init+0x78>)
 80025cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <MX_I2C3_Init+0x74>)
 80025d0:	f640 6214 	movw	r2, #3604	@ 0xe14
 80025d4:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80025d6:	4b18      	ldr	r3, [pc, #96]	@ (8002638 <MX_I2C3_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <MX_I2C3_Init+0x74>)
 80025de:	2201      	movs	r2, #1
 80025e0:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e2:	4b15      	ldr	r3, [pc, #84]	@ (8002638 <MX_I2C3_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80025e8:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <MX_I2C3_Init+0x74>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80025ee:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <MX_I2C3_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f4:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <MX_I2C3_Init+0x74>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <MX_I2C3_Init+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002600:	480d      	ldr	r0, [pc, #52]	@ (8002638 <MX_I2C3_Init+0x74>)
 8002602:	f002 fbb6 	bl	8004d72 <HAL_I2C_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800260c:	f000 fa2a 	bl	8002a64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002610:	2100      	movs	r1, #0
 8002612:	4809      	ldr	r0, [pc, #36]	@ (8002638 <MX_I2C3_Init+0x74>)
 8002614:	f003 f8e8 	bl	80057e8 <HAL_I2CEx_ConfigAnalogFilter>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800261e:	f000 fa21 	bl	8002a64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002622:	2100      	movs	r1, #0
 8002624:	4804      	ldr	r0, [pc, #16]	@ (8002638 <MX_I2C3_Init+0x74>)
 8002626:	f003 f92a 	bl	800587e <HAL_I2CEx_ConfigDigitalFilter>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002630:	f000 fa18 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002634:	bf00      	nop
 8002636:	bd80      	pop	{r7, pc}
 8002638:	200003e4 	.word	0x200003e4
 800263c:	40005c00 	.word	0x40005c00

08002640 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002644:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 8002646:	4a13      	ldr	r2, [pc, #76]	@ (8002694 <MX_LPUART1_UART_Init+0x54>)
 8002648:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800264a:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 800264c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002650:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002652:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002658:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800265e:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002664:	4b0a      	ldr	r3, [pc, #40]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 8002666:	220c      	movs	r2, #12
 8002668:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266a:	4b09      	ldr	r3, [pc, #36]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002670:	4b07      	ldr	r3, [pc, #28]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 8002672:	2200      	movs	r2, #0
 8002674:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 8002678:	2200      	movs	r2, #0
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800267c:	4804      	ldr	r0, [pc, #16]	@ (8002690 <MX_LPUART1_UART_Init+0x50>)
 800267e:	f006 fbb1 	bl	8008de4 <HAL_UART_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002688:	f000 f9ec 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000438 	.word	0x20000438
 8002694:	40008000 	.word	0x40008000

08002698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800269c:	4b14      	ldr	r3, [pc, #80]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 800269e:	4a15      	ldr	r2, [pc, #84]	@ (80026f4 <MX_USART1_UART_Init+0x5c>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026a2:	4b13      	ldr	r3, [pc, #76]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80026a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b0c      	ldr	r3, [pc, #48]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ce:	4b08      	ldr	r3, [pc, #32]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026da:	4805      	ldr	r0, [pc, #20]	@ (80026f0 <MX_USART1_UART_Init+0x58>)
 80026dc:	f006 fb82 	bl	8008de4 <HAL_UART_Init>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80026e6:	f000 f9bd 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200004c0 	.word	0x200004c0
 80026f4:	40013800 	.word	0x40013800

080026f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026fc:	4b1b      	ldr	r3, [pc, #108]	@ (800276c <MX_SPI1_Init+0x74>)
 80026fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002770 <MX_SPI1_Init+0x78>)
 8002700:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002702:	4b1a      	ldr	r3, [pc, #104]	@ (800276c <MX_SPI1_Init+0x74>)
 8002704:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002708:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800270a:	4b18      	ldr	r3, [pc, #96]	@ (800276c <MX_SPI1_Init+0x74>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002710:	4b16      	ldr	r3, [pc, #88]	@ (800276c <MX_SPI1_Init+0x74>)
 8002712:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002716:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002718:	4b14      	ldr	r3, [pc, #80]	@ (800276c <MX_SPI1_Init+0x74>)
 800271a:	2200      	movs	r2, #0
 800271c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800271e:	4b13      	ldr	r3, [pc, #76]	@ (800276c <MX_SPI1_Init+0x74>)
 8002720:	2200      	movs	r2, #0
 8002722:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002724:	4b11      	ldr	r3, [pc, #68]	@ (800276c <MX_SPI1_Init+0x74>)
 8002726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800272a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800272c:	4b0f      	ldr	r3, [pc, #60]	@ (800276c <MX_SPI1_Init+0x74>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002732:	4b0e      	ldr	r3, [pc, #56]	@ (800276c <MX_SPI1_Init+0x74>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002738:	4b0c      	ldr	r3, [pc, #48]	@ (800276c <MX_SPI1_Init+0x74>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800273e:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <MX_SPI1_Init+0x74>)
 8002740:	2200      	movs	r2, #0
 8002742:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002744:	4b09      	ldr	r3, [pc, #36]	@ (800276c <MX_SPI1_Init+0x74>)
 8002746:	2207      	movs	r2, #7
 8002748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800274a:	4b08      	ldr	r3, [pc, #32]	@ (800276c <MX_SPI1_Init+0x74>)
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <MX_SPI1_Init+0x74>)
 8002752:	2208      	movs	r2, #8
 8002754:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002756:	4805      	ldr	r0, [pc, #20]	@ (800276c <MX_SPI1_Init+0x74>)
 8002758:	f004 fa62 	bl	8006c20 <HAL_SPI_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002762:	f000 f97f 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	20000548 	.word	0x20000548
 8002770:	40013000 	.word	0x40013000

08002774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b096      	sub	sp, #88	@ 0x58
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002786:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	611a      	str	r2, [r3, #16]
 8002796:	615a      	str	r2, [r3, #20]
 8002798:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800279a:	1d3b      	adds	r3, r7, #4
 800279c:	222c      	movs	r2, #44	@ 0x2c
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f008 ff1a 	bl	800b5da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027a6:	4b39      	ldr	r3, [pc, #228]	@ (800288c <MX_TIM1_Init+0x118>)
 80027a8:	4a39      	ldr	r2, [pc, #228]	@ (8002890 <MX_TIM1_Init+0x11c>)
 80027aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80027ac:	4b37      	ldr	r3, [pc, #220]	@ (800288c <MX_TIM1_Init+0x118>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	4b36      	ldr	r3, [pc, #216]	@ (800288c <MX_TIM1_Init+0x118>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80027b8:	4b34      	ldr	r3, [pc, #208]	@ (800288c <MX_TIM1_Init+0x118>)
 80027ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c0:	4b32      	ldr	r3, [pc, #200]	@ (800288c <MX_TIM1_Init+0x118>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027c6:	4b31      	ldr	r3, [pc, #196]	@ (800288c <MX_TIM1_Init+0x118>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027cc:	4b2f      	ldr	r3, [pc, #188]	@ (800288c <MX_TIM1_Init+0x118>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027d2:	482e      	ldr	r0, [pc, #184]	@ (800288c <MX_TIM1_Init+0x118>)
 80027d4:	f005 fb8e 	bl	8007ef4 <HAL_TIM_PWM_Init>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80027de:	f000 f941 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027e2:	2300      	movs	r3, #0
 80027e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027f2:	4619      	mov	r1, r3
 80027f4:	4825      	ldr	r0, [pc, #148]	@ (800288c <MX_TIM1_Init+0x118>)
 80027f6:	f006 f9f9 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002800:	f000 f930 	bl	8002a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002804:	2360      	movs	r3, #96	@ 0x60
 8002806:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800280c:	2300      	movs	r3, #0
 800280e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002810:	2300      	movs	r3, #0
 8002812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002818:	2300      	movs	r3, #0
 800281a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800281c:	2300      	movs	r3, #0
 800281e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002820:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002824:	2200      	movs	r2, #0
 8002826:	4619      	mov	r1, r3
 8002828:	4818      	ldr	r0, [pc, #96]	@ (800288c <MX_TIM1_Init+0x118>)
 800282a:	f005 fd9b 	bl	8008364 <HAL_TIM_PWM_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002834:	f000 f916 	bl	8002a64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800284c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002850:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800285a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	4619      	mov	r1, r3
 800286c:	4807      	ldr	r0, [pc, #28]	@ (800288c <MX_TIM1_Init+0x118>)
 800286e:	f006 fa23 	bl	8008cb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002878:	f000 f8f4 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800287c:	4803      	ldr	r0, [pc, #12]	@ (800288c <MX_TIM1_Init+0x118>)
 800287e:	f000 fcc1 	bl	8003204 <HAL_TIM_MspPostInit>

}
 8002882:	bf00      	nop
 8002884:	3758      	adds	r7, #88	@ 0x58
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200005ac 	.word	0x200005ac
 8002890:	40012c00 	.word	0x40012c00

08002894 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028a4:	4b14      	ldr	r3, [pc, #80]	@ (80028f8 <MX_TIM6_Init+0x64>)
 80028a6:	4a15      	ldr	r2, [pc, #84]	@ (80028fc <MX_TIM6_Init+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 80028aa:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <MX_TIM6_Init+0x64>)
 80028ac:	2227      	movs	r2, #39	@ 0x27
 80028ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <MX_TIM6_Init+0x64>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <MX_TIM6_Init+0x64>)
 80028b8:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80028bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <MX_TIM6_Init+0x64>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80028c4:	480c      	ldr	r0, [pc, #48]	@ (80028f8 <MX_TIM6_Init+0x64>)
 80028c6:	f005 fa69 	bl	8007d9c <HAL_TIM_Base_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80028d0:	f000 f8c8 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028d4:	2300      	movs	r3, #0
 80028d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	4805      	ldr	r0, [pc, #20]	@ (80028f8 <MX_TIM6_Init+0x64>)
 80028e2:	f006 f983 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80028ec:	f000 f8ba 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028f0:	bf00      	nop
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	200005f8 	.word	0x200005f8
 80028fc:	40001000 	.word	0x40001000

08002900 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002910:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <MX_TIM7_Init+0x68>)
 8002912:	4a16      	ldr	r2, [pc, #88]	@ (800296c <MX_TIM7_Init+0x6c>)
 8002914:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 399;
 8002916:	4b14      	ldr	r3, [pc, #80]	@ (8002968 <MX_TIM7_Init+0x68>)
 8002918:	f240 128f 	movw	r2, #399	@ 0x18f
 800291c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800291e:	4b12      	ldr	r3, [pc, #72]	@ (8002968 <MX_TIM7_Init+0x68>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49999;
 8002924:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <MX_TIM7_Init+0x68>)
 8002926:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800292a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	4b0e      	ldr	r3, [pc, #56]	@ (8002968 <MX_TIM7_Init+0x68>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002932:	480d      	ldr	r0, [pc, #52]	@ (8002968 <MX_TIM7_Init+0x68>)
 8002934:	f005 fa32 	bl	8007d9c <HAL_TIM_Base_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800293e:	f000 f891 	bl	8002a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	4619      	mov	r1, r3
 800294e:	4806      	ldr	r0, [pc, #24]	@ (8002968 <MX_TIM7_Init+0x68>)
 8002950:	f006 f94c 	bl	8008bec <HAL_TIMEx_MasterConfigSynchronization>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800295a:	f000 f883 	bl	8002a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000644 	.word	0x20000644
 800296c:	40001400 	.word	0x40001400

08002970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	4b2c      	ldr	r3, [pc, #176]	@ (8002a38 <MX_GPIO_Init+0xc8>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298a:	4a2b      	ldr	r2, [pc, #172]	@ (8002a38 <MX_GPIO_Init+0xc8>)
 800298c:	f043 0301 	orr.w	r3, r3, #1
 8002990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002992:	4b29      	ldr	r3, [pc, #164]	@ (8002a38 <MX_GPIO_Init+0xc8>)
 8002994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800299e:	4b26      	ldr	r3, [pc, #152]	@ (8002a38 <MX_GPIO_Init+0xc8>)
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	4a25      	ldr	r2, [pc, #148]	@ (8002a38 <MX_GPIO_Init+0xc8>)
 80029a4:	f043 0302 	orr.w	r3, r3, #2
 80029a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029aa:	4b23      	ldr	r3, [pc, #140]	@ (8002a38 <MX_GPIO_Init+0xc8>)
 80029ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2120      	movs	r1, #32
 80029ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029be:	f002 f99d 	bl	8004cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80029c2:	2201      	movs	r2, #1
 80029c4:	2101      	movs	r1, #1
 80029c6:	481d      	ldr	r0, [pc, #116]	@ (8002a3c <MX_GPIO_Init+0xcc>)
 80029c8:	f002 f998 	bl	8004cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029cc:	2320      	movs	r3, #32
 80029ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d0:	2301      	movs	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029dc:	f107 030c 	add.w	r3, r7, #12
 80029e0:	4619      	mov	r1, r3
 80029e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029e6:	f002 f81f 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029ea:	2301      	movs	r3, #1
 80029ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029fa:	f107 030c 	add.w	r3, r7, #12
 80029fe:	4619      	mov	r1, r3
 8002a00:	480e      	ldr	r0, [pc, #56]	@ (8002a3c <MX_GPIO_Init+0xcc>)
 8002a02:	f002 f811 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002a06:	2320      	movs	r3, #32
 8002a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4808      	ldr	r0, [pc, #32]	@ (8002a3c <MX_GPIO_Init+0xcc>)
 8002a1c:	f002 f804 	bl	8004a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a20:	2200      	movs	r2, #0
 8002a22:	2100      	movs	r1, #0
 8002a24:	2017      	movs	r0, #23
 8002a26:	f001 ff38 	bl	800489a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a2a:	2017      	movs	r0, #23
 8002a2c:	f001 ff51 	bl	80048d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a30:	bf00      	nop
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	48000400 	.word	0x48000400

08002a40 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002a48:	1d39      	adds	r1, r7, #4
 8002a4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4803      	ldr	r0, [pc, #12]	@ (8002a60 <__io_putchar+0x20>)
 8002a52:	f006 fa15 	bl	8008e80 <HAL_UART_Transmit>
  return ch;
 8002a56:	687b      	ldr	r3, [r7, #4]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	20000438 	.word	0x20000438

08002a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a68:	b672      	cpsid	i
}
 8002a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a6c:	bf00      	nop
 8002a6e:	e7fd      	b.n	8002a6c <Error_Handler+0x8>

08002a70 <input_step_data>:

static bool first_step = true;		// first beat bool
static bool second_step = false; 	// second beat bool
static bool step = false; 		// pulse recognized bool

void input_step_data(vec_t gravity_vec, vec_t acc_vec) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	eeb0 5a40 	vmov.f32	s10, s0
 8002a7a:	eef0 5a60 	vmov.f32	s11, s1
 8002a7e:	eeb0 6a41 	vmov.f32	s12, s2
 8002a82:	eef0 6a61 	vmov.f32	s13, s3
 8002a86:	eeb0 7a42 	vmov.f32	s14, s4
 8002a8a:	eef0 7a62 	vmov.f32	s15, s5
 8002a8e:	ed87 5a03 	vstr	s10, [r7, #12]
 8002a92:	edc7 5a04 	vstr	s11, [r7, #16]
 8002a96:	ed87 6a05 	vstr	s12, [r7, #20]
 8002a9a:	edc7 6a00 	vstr	s13, [r7]
 8002a9e:	ed87 7a01 	vstr	s14, [r7, #4]
 8002aa2:	edc7 7a02 	vstr	s15, [r7, #8]
	curr_step_mag = 0;
 8002aa6:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <input_step_data+0x110>)
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

	// normalize gravity vector
	gravity_vec.x /= 9.8;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fd49 	bl	8000548 <__aeabi_f2d>
 8002ab6:	a330      	add	r3, pc, #192	@ (adr r3, 8002b78 <input_step_data+0x108>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fec6 	bl	800084c <__aeabi_ddiv>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f88e 	bl	8000be8 <__aeabi_d2f>
 8002acc:	4603      	mov	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
	gravity_vec.y /= 9.8;
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fd38 	bl	8000548 <__aeabi_f2d>
 8002ad8:	a327      	add	r3, pc, #156	@ (adr r3, 8002b78 <input_step_data+0x108>)
 8002ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ade:	f7fd feb5 	bl	800084c <__aeabi_ddiv>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f7fe f87d 	bl	8000be8 <__aeabi_d2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	613b      	str	r3, [r7, #16]
	gravity_vec.z /= 9.8;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fd27 	bl	8000548 <__aeabi_f2d>
 8002afa:	a31f      	add	r3, pc, #124	@ (adr r3, 8002b78 <input_step_data+0x108>)
 8002afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b00:	f7fd fea4 	bl	800084c <__aeabi_ddiv>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	f7fe f86c 	bl	8000be8 <__aeabi_d2f>
 8002b10:	4603      	mov	r3, r0
 8002b12:	617b      	str	r3, [r7, #20]

	// dot product
	curr_step_mag += acc_vec.x * gravity_vec.x;
 8002b14:	ed97 7a00 	vldr	s14, [r7]
 8002b18:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b20:	4b17      	ldr	r3, [pc, #92]	@ (8002b80 <input_step_data+0x110>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b2a:	4b15      	ldr	r3, [pc, #84]	@ (8002b80 <input_step_data+0x110>)
 8002b2c:	edc3 7a00 	vstr	s15, [r3]
	curr_step_mag += acc_vec.y * gravity_vec.y;
 8002b30:	ed97 7a01 	vldr	s14, [r7, #4]
 8002b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b3c:	4b10      	ldr	r3, [pc, #64]	@ (8002b80 <input_step_data+0x110>)
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <input_step_data+0x110>)
 8002b48:	edc3 7a00 	vstr	s15, [r3]
	curr_step_mag += acc_vec.z * gravity_vec.z;
 8002b4c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b50:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b58:	4b09      	ldr	r3, [pc, #36]	@ (8002b80 <input_step_data+0x110>)
 8002b5a:	edd3 7a00 	vldr	s15, [r3]
 8002b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b62:	4b07      	ldr	r3, [pc, #28]	@ (8002b80 <input_step_data+0x110>)
 8002b64:	edc3 7a00 	vstr	s15, [r3]

	get_step();
 8002b68:	f000 f80c 	bl	8002b84 <get_step>
	return steps;
 8002b6c:	bf00      	nop
}
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	f3af 8000 	nop.w
 8002b78:	9999999a 	.word	0x9999999a
 8002b7c:	40239999 	.word	0x40239999
 8002b80:	200006c0 	.word	0x200006c0

08002b84 <get_step>:

void get_step() {
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
	++samples_since_last_step;
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d00 <get_step+0x17c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	4a5b      	ldr	r2, [pc, #364]	@ (8002d00 <get_step+0x17c>)
 8002b92:	6013      	str	r3, [r2, #0]
	int N = samples_since_last_step * STEP_SAMPLE_PERIOD;
 8002b94:	4b5a      	ldr	r3, [pc, #360]	@ (8002d00 <get_step+0x17c>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	607b      	str	r3, [r7, #4]

	if (curr_step_mag < thresh && curr_step_mag < trough_amp) { // update trough
 8002ba0:	4b58      	ldr	r3, [pc, #352]	@ (8002d04 <get_step+0x180>)
 8002ba2:	ed93 7a00 	vldr	s14, [r3]
 8002ba6:	4b58      	ldr	r3, [pc, #352]	@ (8002d08 <get_step+0x184>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb4:	d50e      	bpl.n	8002bd4 <get_step+0x50>
 8002bb6:	4b53      	ldr	r3, [pc, #332]	@ (8002d04 <get_step+0x180>)
 8002bb8:	ed93 7a00 	vldr	s14, [r3]
 8002bbc:	4b53      	ldr	r3, [pc, #332]	@ (8002d0c <get_step+0x188>)
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bca:	d503      	bpl.n	8002bd4 <get_step+0x50>
		trough_amp = curr_step_mag;
 8002bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002d04 <get_step+0x180>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a4e      	ldr	r2, [pc, #312]	@ (8002d0c <get_step+0x188>)
 8002bd2:	6013      	str	r3, [r2, #0]
	}// if.. lower trough

	if (curr_step_mag > thresh && curr_step_mag > peak_amp && curr_step_mag > min_peak_amp) {  // thresh condition helps avoid noise
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8002d04 <get_step+0x180>)
 8002bd6:	ed93 7a00 	vldr	s14, [r3]
 8002bda:	4b4b      	ldr	r3, [pc, #300]	@ (8002d08 <get_step+0x184>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	dd19      	ble.n	8002c1e <get_step+0x9a>
 8002bea:	4b46      	ldr	r3, [pc, #280]	@ (8002d04 <get_step+0x180>)
 8002bec:	ed93 7a00 	vldr	s14, [r3]
 8002bf0:	4b47      	ldr	r3, [pc, #284]	@ (8002d10 <get_step+0x18c>)
 8002bf2:	edd3 7a00 	vldr	s15, [r3]
 8002bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	dd0e      	ble.n	8002c1e <get_step+0x9a>
 8002c00:	4b40      	ldr	r3, [pc, #256]	@ (8002d04 <get_step+0x180>)
 8002c02:	ed93 7a00 	vldr	s14, [r3]
 8002c06:	4b43      	ldr	r3, [pc, #268]	@ (8002d14 <get_step+0x190>)
 8002c08:	edd3 7a00 	vldr	s15, [r3]
 8002c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c14:	dd03      	ble.n	8002c1e <get_step+0x9a>
		peak_amp = curr_step_mag;
 8002c16:	4b3b      	ldr	r3, [pc, #236]	@ (8002d04 <get_step+0x180>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d10 <get_step+0x18c>)
 8002c1c:	6013      	str	r3, [r2, #0]
	}// if.. higher peak

	//  NOW IT'S TIME TO LOOK FOR THE step
	// signal surges up in value every time there is a step
	if (N > 100 && (curr_step_mag > thresh) && (step == false) ) {
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b64      	cmp	r3, #100	@ 0x64
 8002c22:	dd1c      	ble.n	8002c5e <get_step+0xda>
 8002c24:	4b37      	ldr	r3, [pc, #220]	@ (8002d04 <get_step+0x180>)
 8002c26:	ed93 7a00 	vldr	s14, [r3]
 8002c2a:	4b37      	ldr	r3, [pc, #220]	@ (8002d08 <get_step+0x184>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c38:	dd11      	ble.n	8002c5e <get_step+0xda>
 8002c3a:	4b37      	ldr	r3, [pc, #220]	@ (8002d18 <get_step+0x194>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	f083 0301 	eor.w	r3, r3, #1
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <get_step+0xda>
		step = true;                             // set the Pulse flag when we think there is a pulse
 8002c48:	4b33      	ldr	r3, [pc, #204]	@ (8002d18 <get_step+0x194>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
	  	samples_since_last_step = 0;
 8002c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d00 <get_step+0x17c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
	  	++steps;
 8002c54:	4b31      	ldr	r3, [pc, #196]	@ (8002d1c <get_step+0x198>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	4a30      	ldr	r2, [pc, #192]	@ (8002d1c <get_step+0x198>)
 8002c5c:	6013      	str	r3, [r2, #0]
	}// if.. new step

	if (curr_step_mag < thresh && step) {  // when the values are going down, the beat is over
 8002c5e:	4b29      	ldr	r3, [pc, #164]	@ (8002d04 <get_step+0x180>)
 8002c60:	ed93 7a00 	vldr	s14, [r3]
 8002c64:	4b28      	ldr	r3, [pc, #160]	@ (8002d08 <get_step+0x184>)
 8002c66:	edd3 7a00 	vldr	s15, [r3]
 8002c6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c72:	d528      	bpl.n	8002cc6 <get_step+0x142>
 8002c74:	4b28      	ldr	r3, [pc, #160]	@ (8002d18 <get_step+0x194>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d024      	beq.n	8002cc6 <get_step+0x142>
		step = false;                         // reset the Pulse flag so we can do it again
 8002c7c:	4b26      	ldr	r3, [pc, #152]	@ (8002d18 <get_step+0x194>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
		amp = peak_amp - trough_amp;                           // get amplitude of the pulse wave
 8002c82:	4b23      	ldr	r3, [pc, #140]	@ (8002d10 <get_step+0x18c>)
 8002c84:	ed93 7a00 	vldr	s14, [r3]
 8002c88:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <get_step+0x188>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c92:	4b23      	ldr	r3, [pc, #140]	@ (8002d20 <get_step+0x19c>)
 8002c94:	edc3 7a00 	vstr	s15, [r3]
		thresh = amp / 2 + trough_amp;                  // set thresh at 50% of the amplitude
 8002c98:	4b21      	ldr	r3, [pc, #132]	@ (8002d20 <get_step+0x19c>)
 8002c9a:	edd3 7a00 	vldr	s15, [r3]
 8002c9e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002ca2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ca6:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <get_step+0x188>)
 8002ca8:	edd3 7a00 	vldr	s15, [r3]
 8002cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb0:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <get_step+0x184>)
 8002cb2:	edc3 7a00 	vstr	s15, [r3]
	    peak_amp = thresh;                            // reset these for next time
 8002cb6:	4b14      	ldr	r3, [pc, #80]	@ (8002d08 <get_step+0x184>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a15      	ldr	r2, [pc, #84]	@ (8002d10 <get_step+0x18c>)
 8002cbc:	6013      	str	r3, [r2, #0]
	    trough_amp = thresh;
 8002cbe:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <get_step+0x184>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a12      	ldr	r2, [pc, #72]	@ (8002d0c <get_step+0x188>)
 8002cc4:	6013      	str	r3, [r2, #0]
	}// if.. step over

	if (N > 2500) {                          // if 2.5 seconds go by without a beat
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	dd11      	ble.n	8002cf4 <get_step+0x170>
	    thresh = STEP_THRESH_DEFAULT;                // set thresh default
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <get_step+0x184>)
 8002cd2:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <get_step+0x1a0>)
 8002cd4:	601a      	str	r2, [r3, #0]
	    peak_amp = STEP_THRESH_DEFAULT;                               // set P default
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d10 <get_step+0x18c>)
 8002cd8:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <get_step+0x1a0>)
 8002cda:	601a      	str	r2, [r3, #0]
	    trough_amp = STEP_THRESH_DEFAULT;                               // set T default
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <get_step+0x188>)
 8002cde:	4a11      	ldr	r2, [pc, #68]	@ (8002d24 <get_step+0x1a0>)
 8002ce0:	601a      	str	r2, [r3, #0]
	    samples_since_last_step = 0;          // bring the lastBeatTime up to date
 8002ce2:	4b07      	ldr	r3, [pc, #28]	@ (8002d00 <get_step+0x17c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
	    step = false;
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <get_step+0x194>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
	    amp = 20;
 8002cee:	4b0c      	ldr	r3, [pc, #48]	@ (8002d20 <get_step+0x19c>)
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d28 <get_step+0x1a4>)
 8002cf2:	601a      	str	r2, [r3, #0]
	}// if.. N>2500
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	200006c4 	.word	0x200006c4
 8002d04:	200006c0 	.word	0x200006c0
 8002d08:	2000001c 	.word	0x2000001c
 8002d0c:	20000028 	.word	0x20000028
 8002d10:	20000020 	.word	0x20000020
 8002d14:	20000024 	.word	0x20000024
 8002d18:	200006cc 	.word	0x200006cc
 8002d1c:	200006c8 	.word	0x200006c8
 8002d20:	20000018 	.word	0x20000018
 8002d24:	41200000 	.word	0x41200000
 8002d28:	41a00000 	.word	0x41a00000

08002d2c <get_step_count>:

int get_step_count(void) {
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
	return steps;
 8002d30:	4b03      	ldr	r3, [pc, #12]	@ (8002d40 <get_step_count+0x14>)
 8002d32:	681b      	ldr	r3, [r3, #0]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	200006c8 	.word	0x200006c8

08002d44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <HAL_MspInit+0x44>)
 8002d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d88 <HAL_MspInit+0x44>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d56:	4b0c      	ldr	r3, [pc, #48]	@ (8002d88 <HAL_MspInit+0x44>)
 8002d58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	607b      	str	r3, [r7, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	4b09      	ldr	r3, [pc, #36]	@ (8002d88 <HAL_MspInit+0x44>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d66:	4a08      	ldr	r2, [pc, #32]	@ (8002d88 <HAL_MspInit+0x44>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_MspInit+0x44>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000

08002d8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b09e      	sub	sp, #120	@ 0x78
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	2254      	movs	r2, #84	@ 0x54
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f008 fc14 	bl	800b5da <memset>
  if(hadc->Instance==ADC1)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a25      	ldr	r2, [pc, #148]	@ (8002e4c <HAL_ADC_MspInit+0xc0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d143      	bne.n	8002e44 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002dbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002dc0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002dc2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002dc6:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002dd4:	2307      	movs	r3, #7
 8002dd6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002de0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fc30 	bl	8006650 <HAL_RCCEx_PeriphCLKConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8002df6:	f7ff fe35 	bl	8002a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002dfa:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <HAL_ADC_MspInit+0xc4>)
 8002dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfe:	4a14      	ldr	r2, [pc, #80]	@ (8002e50 <HAL_ADC_MspInit+0xc4>)
 8002e00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e06:	4b12      	ldr	r3, [pc, #72]	@ (8002e50 <HAL_ADC_MspInit+0xc4>)
 8002e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <HAL_ADC_MspInit+0xc4>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	4a0e      	ldr	r2, [pc, #56]	@ (8002e50 <HAL_ADC_MspInit+0xc4>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <HAL_ADC_MspInit+0xc4>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
 8002e28:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002e2e:	230b      	movs	r3, #11
 8002e30:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e40:	f001 fdf2 	bl	8004a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e44:	bf00      	nop
 8002e46:	3778      	adds	r7, #120	@ 0x78
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	50040000 	.word	0x50040000
 8002e50:	40021000 	.word	0x40021000

08002e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b0a0      	sub	sp, #128	@ 0x80
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	2254      	movs	r2, #84	@ 0x54
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f008 fbb0 	bl	800b5da <memset>
  if(hi2c->Instance==I2C3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2d      	ldr	r2, [pc, #180]	@ (8002f34 <HAL_I2C_MspInit+0xe0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d153      	bne.n	8002f2c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002e84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e8e:	f107 0318 	add.w	r3, r7, #24
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 fbdc 	bl	8006650 <HAL_RCCEx_PeriphCLKConfig>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e9e:	f7ff fde1 	bl	8002a64 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea2:	4b25      	ldr	r3, [pc, #148]	@ (8002f38 <HAL_I2C_MspInit+0xe4>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ea6:	4a24      	ldr	r2, [pc, #144]	@ (8002f38 <HAL_I2C_MspInit+0xe4>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eae:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <HAL_I2C_MspInit+0xe4>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eba:	4b1f      	ldr	r3, [pc, #124]	@ (8002f38 <HAL_I2C_MspInit+0xe4>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f38 <HAL_I2C_MspInit+0xe4>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8002f38 <HAL_I2C_MspInit+0xe4>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed6:	2312      	movs	r3, #18
 8002ed8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002ee2:	2304      	movs	r3, #4
 8002ee4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ee6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002eea:	4619      	mov	r1, r3
 8002eec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ef0:	f001 fd9a 	bl	8004a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef8:	2312      	movs	r3, #18
 8002efa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f04:	2304      	movs	r3, #4
 8002f06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	480b      	ldr	r0, [pc, #44]	@ (8002f3c <HAL_I2C_MspInit+0xe8>)
 8002f10:	f001 fd8a 	bl	8004a28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f14:	4b08      	ldr	r3, [pc, #32]	@ (8002f38 <HAL_I2C_MspInit+0xe4>)
 8002f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f18:	4a07      	ldr	r2, [pc, #28]	@ (8002f38 <HAL_I2C_MspInit+0xe4>)
 8002f1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f20:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <HAL_I2C_MspInit+0xe4>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f2c:	bf00      	nop
 8002f2e:	3780      	adds	r7, #128	@ 0x80
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40005c00 	.word	0x40005c00
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	48000400 	.word	0x48000400

08002f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b0a2      	sub	sp, #136	@ 0x88
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f48:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	60da      	str	r2, [r3, #12]
 8002f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f58:	f107 0320 	add.w	r3, r7, #32
 8002f5c:	2254      	movs	r2, #84	@ 0x54
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f008 fb3a 	bl	800b5da <memset>
  if(huart->Instance==LPUART1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a4f      	ldr	r2, [pc, #316]	@ (80030a8 <HAL_UART_MspInit+0x168>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d139      	bne.n	8002fe4 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002f70:	2320      	movs	r3, #32
 8002f72:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002f74:	2300      	movs	r3, #0
 8002f76:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f78:	f107 0320 	add.w	r3, r7, #32
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f003 fb67 	bl	8006650 <HAL_RCCEx_PeriphCLKConfig>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f88:	f7ff fd6c 	bl	8002a64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002f8c:	4b47      	ldr	r3, [pc, #284]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8002f8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f90:	4a46      	ldr	r2, [pc, #280]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002f98:	4b44      	ldr	r3, [pc, #272]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa4:	4b41      	ldr	r3, [pc, #260]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8002fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa8:	4a40      	ldr	r2, [pc, #256]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fb0:	4b3e      	ldr	r3, [pc, #248]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	61bb      	str	r3, [r7, #24]
 8002fba:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002fbc:	230c      	movs	r3, #12
 8002fbe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002fce:	2308      	movs	r3, #8
 8002fd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fde:	f001 fd23 	bl	8004a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002fe2:	e05c      	b.n	800309e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a31      	ldr	r2, [pc, #196]	@ (80030b0 <HAL_UART_MspInit+0x170>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d157      	bne.n	800309e <HAL_UART_MspInit+0x15e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff6:	f107 0320 	add.w	r3, r7, #32
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fb28 	bl	8006650 <HAL_RCCEx_PeriphCLKConfig>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_UART_MspInit+0xca>
      Error_Handler();
 8003006:	f7ff fd2d 	bl	8002a64 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800300a:	4b28      	ldr	r3, [pc, #160]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 800300c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300e:	4a27      	ldr	r2, [pc, #156]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8003010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003014:	6613      	str	r3, [r2, #96]	@ 0x60
 8003016:	4b25      	ldr	r3, [pc, #148]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8003018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003022:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8003024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003026:	4a21      	ldr	r2, [pc, #132]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8003028:	f043 0301 	orr.w	r3, r3, #1
 800302c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800302e:	4b1f      	ldr	r3, [pc, #124]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8003030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800303a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 800303c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800303e:	4a1b      	ldr	r2, [pc, #108]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8003040:	f043 0302 	orr.w	r3, r3, #2
 8003044:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <HAL_UART_MspInit+0x16c>)
 8003048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003052:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003056:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003058:	2302      	movs	r3, #2
 800305a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003066:	2307      	movs	r3, #7
 8003068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003070:	4619      	mov	r1, r3
 8003072:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003076:	f001 fcd7 	bl	8004a28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800307a:	2340      	movs	r3, #64	@ 0x40
 800307c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307e:	2302      	movs	r3, #2
 8003080:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003086:	2303      	movs	r3, #3
 8003088:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800308c:	2307      	movs	r3, #7
 800308e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003092:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003096:	4619      	mov	r1, r3
 8003098:	4806      	ldr	r0, [pc, #24]	@ (80030b4 <HAL_UART_MspInit+0x174>)
 800309a:	f001 fcc5 	bl	8004a28 <HAL_GPIO_Init>
}
 800309e:	bf00      	nop
 80030a0:	3788      	adds	r7, #136	@ 0x88
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40008000 	.word	0x40008000
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40013800 	.word	0x40013800
 80030b4:	48000400 	.word	0x48000400

080030b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	@ 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 0314 	add.w	r3, r7, #20
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a18      	ldr	r2, [pc, #96]	@ (8003138 <HAL_SPI_MspInit+0x80>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d129      	bne.n	800312e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030da:	4b18      	ldr	r3, [pc, #96]	@ (800313c <HAL_SPI_MspInit+0x84>)
 80030dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030de:	4a17      	ldr	r2, [pc, #92]	@ (800313c <HAL_SPI_MspInit+0x84>)
 80030e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80030e6:	4b15      	ldr	r3, [pc, #84]	@ (800313c <HAL_SPI_MspInit+0x84>)
 80030e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	4b12      	ldr	r3, [pc, #72]	@ (800313c <HAL_SPI_MspInit+0x84>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030f6:	4a11      	ldr	r2, [pc, #68]	@ (800313c <HAL_SPI_MspInit+0x84>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030fe:	4b0f      	ldr	r3, [pc, #60]	@ (800313c <HAL_SPI_MspInit+0x84>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 800310a:	f641 0302 	movw	r3, #6146	@ 0x1802
 800310e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800311c:	2305      	movs	r3, #5
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	4619      	mov	r1, r3
 8003126:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800312a:	f001 fc7d 	bl	8004a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800312e:	bf00      	nop
 8003130:	3728      	adds	r7, #40	@ 0x28
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40013000 	.word	0x40013000
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <HAL_TIM_PWM_MspInit+0x38>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d10b      	bne.n	800316a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003152:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <HAL_TIM_PWM_MspInit+0x3c>)
 8003154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003156:	4a09      	ldr	r2, [pc, #36]	@ (800317c <HAL_TIM_PWM_MspInit+0x3c>)
 8003158:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800315c:	6613      	str	r3, [r2, #96]	@ 0x60
 800315e:	4b07      	ldr	r3, [pc, #28]	@ (800317c <HAL_TIM_PWM_MspInit+0x3c>)
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40012c00 	.word	0x40012c00
 800317c:	40021000 	.word	0x40021000

08003180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1a      	ldr	r2, [pc, #104]	@ (80031f8 <HAL_TIM_Base_MspInit+0x78>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d114      	bne.n	80031bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003192:	4b1a      	ldr	r3, [pc, #104]	@ (80031fc <HAL_TIM_Base_MspInit+0x7c>)
 8003194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003196:	4a19      	ldr	r2, [pc, #100]	@ (80031fc <HAL_TIM_Base_MspInit+0x7c>)
 8003198:	f043 0310 	orr.w	r3, r3, #16
 800319c:	6593      	str	r3, [r2, #88]	@ 0x58
 800319e:	4b17      	ldr	r3, [pc, #92]	@ (80031fc <HAL_TIM_Base_MspInit+0x7c>)
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2100      	movs	r1, #0
 80031ae:	2036      	movs	r0, #54	@ 0x36
 80031b0:	f001 fb73 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031b4:	2036      	movs	r0, #54	@ 0x36
 80031b6:	f001 fb8c 	bl	80048d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80031ba:	e018      	b.n	80031ee <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003200 <HAL_TIM_Base_MspInit+0x80>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d113      	bne.n	80031ee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031c6:	4b0d      	ldr	r3, [pc, #52]	@ (80031fc <HAL_TIM_Base_MspInit+0x7c>)
 80031c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ca:	4a0c      	ldr	r2, [pc, #48]	@ (80031fc <HAL_TIM_Base_MspInit+0x7c>)
 80031cc:	f043 0320 	orr.w	r3, r3, #32
 80031d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031d2:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <HAL_TIM_Base_MspInit+0x7c>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	2037      	movs	r0, #55	@ 0x37
 80031e4:	f001 fb59 	bl	800489a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031e8:	2037      	movs	r0, #55	@ 0x37
 80031ea:	f001 fb72 	bl	80048d2 <HAL_NVIC_EnableIRQ>
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40001000 	.word	0x40001000
 80031fc:	40021000 	.word	0x40021000
 8003200:	40001400 	.word	0x40001400

08003204 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320c:	f107 030c 	add.w	r3, r7, #12
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	60da      	str	r2, [r3, #12]
 800321a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a12      	ldr	r2, [pc, #72]	@ (800326c <HAL_TIM_MspPostInit+0x68>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d11d      	bne.n	8003262 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003226:	4b12      	ldr	r3, [pc, #72]	@ (8003270 <HAL_TIM_MspPostInit+0x6c>)
 8003228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322a:	4a11      	ldr	r2, [pc, #68]	@ (8003270 <HAL_TIM_MspPostInit+0x6c>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003232:	4b0f      	ldr	r3, [pc, #60]	@ (8003270 <HAL_TIM_MspPostInit+0x6c>)
 8003234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800323e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003242:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	2302      	movs	r3, #2
 8003246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003250:	2301      	movs	r3, #1
 8003252:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	4619      	mov	r1, r3
 800325a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800325e:	f001 fbe3 	bl	8004a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003262:	bf00      	nop
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40012c00 	.word	0x40012c00
 8003270:	40021000 	.word	0x40021000

08003274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003278:	bf00      	nop
 800327a:	e7fd      	b.n	8003278 <NMI_Handler+0x4>

0800327c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003280:	bf00      	nop
 8003282:	e7fd      	b.n	8003280 <HardFault_Handler+0x4>

08003284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003288:	bf00      	nop
 800328a:	e7fd      	b.n	8003288 <MemManage_Handler+0x4>

0800328c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <BusFault_Handler+0x4>

08003294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <UsageFault_Handler+0x4>

0800329c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ca:	f000 f979 	bl	80035c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	LoRaRecieve = 1;
 80032d8:	4b03      	ldr	r3, [pc, #12]	@ (80032e8 <EXTI9_5_IRQHandler+0x14>)
 80032da:	2201      	movs	r2, #1
 80032dc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80032de:	2020      	movs	r0, #32
 80032e0:	f001 fd24 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20000690 	.word	0x20000690

080032ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80032f0:	4802      	ldr	r0, [pc, #8]	@ (80032fc <TIM6_DAC_IRQHandler+0x10>)
 80032f2:	f004 ff35 	bl	8008160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	200005f8 	.word	0x200005f8

08003300 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003304:	4802      	ldr	r0, [pc, #8]	@ (8003310 <TIM7_IRQHandler+0x10>)
 8003306:	f004 ff2b 	bl	8008160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000644 	.word	0x20000644

08003314 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return 1;
 8003318:	2301      	movs	r3, #1
}
 800331a:	4618      	mov	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <_kill>:

int _kill(int pid, int sig)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800332e:	f008 f9b9 	bl	800b6a4 <__errno>
 8003332:	4603      	mov	r3, r0
 8003334:	2216      	movs	r2, #22
 8003336:	601a      	str	r2, [r3, #0]
  return -1;
 8003338:	f04f 33ff 	mov.w	r3, #4294967295
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <_exit>:

void _exit (int status)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800334c:	f04f 31ff 	mov.w	r1, #4294967295
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff ffe7 	bl	8003324 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003356:	bf00      	nop
 8003358:	e7fd      	b.n	8003356 <_exit+0x12>

0800335a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e00a      	b.n	8003382 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800336c:	f3af 8000 	nop.w
 8003370:	4601      	mov	r1, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	60ba      	str	r2, [r7, #8]
 8003378:	b2ca      	uxtb	r2, r1
 800337a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	3301      	adds	r3, #1
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	429a      	cmp	r2, r3
 8003388:	dbf0      	blt.n	800336c <_read+0x12>
  }

  return len;
 800338a:	687b      	ldr	r3, [r7, #4]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e009      	b.n	80033ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	60ba      	str	r2, [r7, #8]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fb46 	bl	8002a40 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3301      	adds	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	dbf1      	blt.n	80033a6 <_write+0x12>
  }
  return len;
 80033c2:	687b      	ldr	r3, [r7, #4]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <_close>:

int _close(int file)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033d8:	4618      	mov	r0, r3
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80033f4:	605a      	str	r2, [r3, #4]
  return 0;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <_isatty>:

int _isatty(int file)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800340c:	2301      	movs	r3, #1
}
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800341a:	b480      	push	{r7}
 800341c:	b085      	sub	sp, #20
 800341e:	af00      	add	r7, sp, #0
 8003420:	60f8      	str	r0, [r7, #12]
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800343c:	4a14      	ldr	r2, [pc, #80]	@ (8003490 <_sbrk+0x5c>)
 800343e:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <_sbrk+0x60>)
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003448:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <_sbrk+0x64>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003450:	4b11      	ldr	r3, [pc, #68]	@ (8003498 <_sbrk+0x64>)
 8003452:	4a12      	ldr	r2, [pc, #72]	@ (800349c <_sbrk+0x68>)
 8003454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003456:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <_sbrk+0x64>)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4413      	add	r3, r2
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	429a      	cmp	r2, r3
 8003462:	d207      	bcs.n	8003474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003464:	f008 f91e 	bl	800b6a4 <__errno>
 8003468:	4603      	mov	r3, r0
 800346a:	220c      	movs	r2, #12
 800346c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800346e:	f04f 33ff 	mov.w	r3, #4294967295
 8003472:	e009      	b.n	8003488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003474:	4b08      	ldr	r3, [pc, #32]	@ (8003498 <_sbrk+0x64>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800347a:	4b07      	ldr	r3, [pc, #28]	@ (8003498 <_sbrk+0x64>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	4a05      	ldr	r2, [pc, #20]	@ (8003498 <_sbrk+0x64>)
 8003484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003486:	68fb      	ldr	r3, [r7, #12]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20010000 	.word	0x20010000
 8003494:	00000400 	.word	0x00000400
 8003498:	200006d0 	.word	0x200006d0
 800349c:	20000828 	.word	0x20000828

080034a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034a4:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <SystemInit+0x20>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	4a05      	ldr	r2, [pc, #20]	@ (80034c0 <SystemInit+0x20>)
 80034ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80034c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80034c8:	f7ff ffea 	bl	80034a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80034cc:	480c      	ldr	r0, [pc, #48]	@ (8003500 <LoopForever+0x6>)
  ldr r1, =_edata
 80034ce:	490d      	ldr	r1, [pc, #52]	@ (8003504 <LoopForever+0xa>)
  ldr r2, =_sidata
 80034d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003508 <LoopForever+0xe>)
  movs r3, #0
 80034d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d4:	e002      	b.n	80034dc <LoopCopyDataInit>

080034d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034da:	3304      	adds	r3, #4

080034dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034e0:	d3f9      	bcc.n	80034d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034e2:	4a0a      	ldr	r2, [pc, #40]	@ (800350c <LoopForever+0x12>)
  ldr r4, =_ebss
 80034e4:	4c0a      	ldr	r4, [pc, #40]	@ (8003510 <LoopForever+0x16>)
  movs r3, #0
 80034e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e8:	e001      	b.n	80034ee <LoopFillZerobss>

080034ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034ec:	3204      	adds	r2, #4

080034ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034f0:	d3fb      	bcc.n	80034ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80034f2:	f008 f8dd 	bl	800b6b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80034f6:	f7fe ff2d 	bl	8002354 <main>

080034fa <LoopForever>:

LoopForever:
    b LoopForever
 80034fa:	e7fe      	b.n	80034fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80034fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003504:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003508:	0800fbe0 	.word	0x0800fbe0
  ldr r2, =_sbss
 800350c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003510:	20000824 	.word	0x20000824

08003514 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003514:	e7fe      	b.n	8003514 <ADC1_IRQHandler>

08003516 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003520:	2003      	movs	r0, #3
 8003522:	f001 f9af 	bl	8004884 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003526:	200f      	movs	r0, #15
 8003528:	f000 f80e 	bl	8003548 <HAL_InitTick>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	71fb      	strb	r3, [r7, #7]
 8003536:	e001      	b.n	800353c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003538:	f7ff fc04 	bl	8002d44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800353c:	79fb      	ldrb	r3, [r7, #7]
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003554:	4b17      	ldr	r3, [pc, #92]	@ (80035b4 <HAL_InitTick+0x6c>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d023      	beq.n	80035a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800355c:	4b16      	ldr	r3, [pc, #88]	@ (80035b8 <HAL_InitTick+0x70>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <HAL_InitTick+0x6c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4619      	mov	r1, r3
 8003566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800356a:	fbb3 f3f1 	udiv	r3, r3, r1
 800356e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003572:	4618      	mov	r0, r3
 8003574:	f001 f9bb 	bl	80048ee <HAL_SYSTICK_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2b0f      	cmp	r3, #15
 8003582:	d809      	bhi.n	8003598 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003584:	2200      	movs	r2, #0
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	f001 f985 	bl	800489a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003590:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <HAL_InitTick+0x74>)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	e007      	b.n	80035a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e004      	b.n	80035a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	73fb      	strb	r3, [r7, #15]
 80035a2:	e001      	b.n	80035a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000034 	.word	0x20000034
 80035b8:	2000002c 	.word	0x2000002c
 80035bc:	20000030 	.word	0x20000030

080035c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_IncTick+0x20>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <HAL_IncTick+0x24>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <HAL_IncTick+0x24>)
 80035d2:	6013      	str	r3, [r2, #0]
}
 80035d4:	bf00      	nop
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000034 	.word	0x20000034
 80035e4:	200006d4 	.word	0x200006d4

080035e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return uwTick;
 80035ec:	4b03      	ldr	r3, [pc, #12]	@ (80035fc <HAL_GetTick+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	200006d4 	.word	0x200006d4

08003600 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	609a      	str	r2, [r3, #8]
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	431a      	orrs	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	609a      	str	r2, [r3, #8]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800365c:	4618      	mov	r0, r3
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	3360      	adds	r3, #96	@ 0x60
 800367a:	461a      	mov	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <LL_ADC_SetOffset+0x44>)
 800368a:	4013      	ands	r3, r2
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	4313      	orrs	r3, r2
 8003698:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80036a0:	bf00      	nop
 80036a2:	371c      	adds	r7, #28
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	03fff000 	.word	0x03fff000

080036b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3360      	adds	r3, #96	@ 0x60
 80036be:	461a      	mov	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036dc:	b480      	push	{r7}
 80036de:	b087      	sub	sp, #28
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3360      	adds	r3, #96	@ 0x60
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	431a      	orrs	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3330      	adds	r3, #48	@ 0x30
 8003748:	461a      	mov	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	0a1b      	lsrs	r3, r3, #8
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	4413      	add	r3, r2
 8003756:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	211f      	movs	r1, #31
 8003764:	fa01 f303 	lsl.w	r3, r1, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	401a      	ands	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	0e9b      	lsrs	r3, r3, #26
 8003770:	f003 011f 	and.w	r1, r3, #31
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	431a      	orrs	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003784:	bf00      	nop
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	3314      	adds	r3, #20
 80037a0:	461a      	mov	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	0e5b      	lsrs	r3, r3, #25
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	4413      	add	r3, r2
 80037ae:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	0d1b      	lsrs	r3, r3, #20
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2107      	movs	r1, #7
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43db      	mvns	r3, r3
 80037c4:	401a      	ands	r2, r3
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	0d1b      	lsrs	r3, r3, #20
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	431a      	orrs	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003800:	43db      	mvns	r3, r3
 8003802:	401a      	ands	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0318 	and.w	r3, r3, #24
 800380a:	4908      	ldr	r1, [pc, #32]	@ (800382c <LL_ADC_SetChannelSingleDiff+0x44>)
 800380c:	40d9      	lsrs	r1, r3
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	400b      	ands	r3, r1
 8003812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003816:	431a      	orrs	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	0007ffff 	.word	0x0007ffff

08003830 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003840:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6093      	str	r3, [r2, #8]
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003868:	d101      	bne.n	800386e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800388c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003890:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038b8:	d101      	bne.n	80038be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <LL_ADC_IsEnabled+0x18>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <LL_ADC_IsEnabled+0x1a>
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800392a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800392e:	f043 0204 	orr.w	r2, r3, #4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d101      	bne.n	800395a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b08      	cmp	r3, #8
 800397a:	d101      	bne.n	8003980 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
	...

08003990 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800399c:	2300      	movs	r3, #0
 800399e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e126      	b.n	8003bf8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d109      	bne.n	80039cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff f9e7 	bl	8002d8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff3f 	bl	8003854 <LL_ADC_IsDeepPowerDownEnabled>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d004      	beq.n	80039e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff ff25 	bl	8003830 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff5a 	bl	80038a4 <LL_ADC_IsInternalRegulatorEnabled>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d115      	bne.n	8003a22 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff3e 	bl	800387c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a00:	4b7f      	ldr	r3, [pc, #508]	@ (8003c00 <HAL_ADC_Init+0x270>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	099b      	lsrs	r3, r3, #6
 8003a06:	4a7f      	ldr	r2, [pc, #508]	@ (8003c04 <HAL_ADC_Init+0x274>)
 8003a08:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0c:	099b      	lsrs	r3, r3, #6
 8003a0e:	3301      	adds	r3, #1
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a14:	e002      	b.n	8003a1c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f9      	bne.n	8003a16 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff3c 	bl	80038a4 <LL_ADC_IsInternalRegulatorEnabled>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a36:	f043 0210 	orr.w	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	f043 0201 	orr.w	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff75 	bl	8003942 <LL_ADC_REG_IsConversionOngoing>
 8003a58:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f040 80bf 	bne.w	8003be6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 80bb 	bne.w	8003be6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a74:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a78:	f043 0202 	orr.w	r2, r3, #2
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff35 	bl	80038f4 <LL_ADC_IsEnabled>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a90:	485d      	ldr	r0, [pc, #372]	@ (8003c08 <HAL_ADC_Init+0x278>)
 8003a92:	f7ff ff2f 	bl	80038f4 <LL_ADC_IsEnabled>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d105      	bne.n	8003aa8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	485a      	ldr	r0, [pc, #360]	@ (8003c0c <HAL_ADC_Init+0x27c>)
 8003aa4:	f7ff fdac 	bl	8003600 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	7e5b      	ldrb	r3, [r3, #25]
 8003aac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ab2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003ab8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003abe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ac6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d106      	bne.n	8003ae4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	3b01      	subs	r3, #1
 8003adc:	045b      	lsls	r3, r3, #17
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	4b42      	ldr	r3, [pc, #264]	@ (8003c10 <HAL_ADC_Init+0x280>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	69b9      	ldr	r1, [r7, #24]
 8003b10:	430b      	orrs	r3, r1
 8003b12:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff25 	bl	8003968 <LL_ADC_INJ_IsConversionOngoing>
 8003b1e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d13d      	bne.n	8003ba2 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d13a      	bne.n	8003ba2 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b30:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b38:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b48:	f023 0302 	bic.w	r3, r3, #2
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	69b9      	ldr	r1, [r7, #24]
 8003b52:	430b      	orrs	r3, r1
 8003b54:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d118      	bne.n	8003b92 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003b6a:	f023 0304 	bic.w	r3, r3, #4
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b76:	4311      	orrs	r1, r2
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b7c:	4311      	orrs	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b82:	430a      	orrs	r2, r1
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	611a      	str	r2, [r3, #16]
 8003b90:	e007      	b.n	8003ba2 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0201 	bic.w	r2, r2, #1
 8003ba0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb0:	f023 010f 	bic.w	r1, r3, #15
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	1e5a      	subs	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003bc2:	e007      	b.n	8003bd4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 020f 	bic.w	r2, r2, #15
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd8:	f023 0303 	bic.w	r3, r3, #3
 8003bdc:	f043 0201 	orr.w	r2, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003be4:	e007      	b.n	8003bf6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bea:	f043 0210 	orr.w	r2, r3, #16
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	2000002c 	.word	0x2000002c
 8003c04:	053e2d63 	.word	0x053e2d63
 8003c08:	50040000 	.word	0x50040000
 8003c0c:	50040300 	.word	0x50040300
 8003c10:	fff0c007 	.word	0xfff0c007

08003c14 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fe8e 	bl	8003942 <LL_ADC_REG_IsConversionOngoing>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d14f      	bne.n	8003ccc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d101      	bne.n	8003c3a <HAL_ADC_Start+0x26>
 8003c36:	2302      	movs	r3, #2
 8003c38:	e04b      	b.n	8003cd2 <HAL_ADC_Start+0xbe>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fcc8 	bl	80045d8 <ADC_Enable>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d137      	bne.n	8003cc2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c5a:	f023 0301 	bic.w	r3, r3, #1
 8003c5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c72:	d106      	bne.n	8003c82 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c78:	f023 0206 	bic.w	r2, r3, #6
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c80:	e002      	b.n	8003c88 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	221c      	movs	r2, #28
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d007      	beq.n	8003cb6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003caa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cae:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fe2d 	bl	800391a <LL_ADC_REG_StartConversion>
 8003cc0:	e006      	b.n	8003cd0 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003cca:	e001      	b.n	8003cd0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d102      	bne.n	8003cf2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003cec:	2308      	movs	r3, #8
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e010      	b.n	8003d14 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e06f      	b.n	8003df0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003d10:	2304      	movs	r3, #4
 8003d12:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d14:	f7ff fc68 	bl	80035e8 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d1a:	e021      	b.n	8003d60 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d22:	d01d      	beq.n	8003d60 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d24:	f7ff fc60 	bl	80035e8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d302      	bcc.n	8003d3a <HAL_ADC_PollForConversion+0x60>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d112      	bne.n	8003d60 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4c:	f043 0204 	orr.w	r2, r3, #4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e047      	b.n	8003df0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0d6      	beq.n	8003d1c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fcc7 	bl	8003712 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d01c      	beq.n	8003dc4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	7e5b      	ldrb	r3, [r3, #25]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d118      	bne.n	8003dc4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0308 	and.w	r3, r3, #8
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d111      	bne.n	8003dc4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d105      	bne.n	8003dc4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbc:	f043 0201 	orr.w	r2, r3, #1
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d104      	bne.n	8003ddc <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e008      	b.n	8003dee <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d103      	bne.n	8003dee <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	220c      	movs	r2, #12
 8003dec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b0b6      	sub	sp, #216	@ 0xd8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x22>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e3bb      	b.n	80045ae <HAL_ADC_ConfigChannel+0x79a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff fd7d 	bl	8003942 <LL_ADC_REG_IsConversionOngoing>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 83a0 	bne.w	8004590 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	d824      	bhi.n	8003eaa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	3b02      	subs	r3, #2
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d81b      	bhi.n	8003ea2 <HAL_ADC_ConfigChannel+0x8e>
 8003e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e70 <HAL_ADC_ConfigChannel+0x5c>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e81 	.word	0x08003e81
 8003e74:	08003e89 	.word	0x08003e89
 8003e78:	08003e91 	.word	0x08003e91
 8003e7c:	08003e99 	.word	0x08003e99
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003e80:	230c      	movs	r3, #12
 8003e82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e86:	e010      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003e88:	2312      	movs	r3, #18
 8003e8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e8e:	e00c      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003e90:	2318      	movs	r3, #24
 8003e92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003e96:	e008      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003ea0:	e003      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003ea2:	2306      	movs	r3, #6
 8003ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8003ea8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8003eb8:	f7ff fc3e 	bl	8003738 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff fd3e 	bl	8003942 <LL_ADC_REG_IsConversionOngoing>
 8003ec6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fd4a 	bl	8003968 <LL_ADC_INJ_IsConversionOngoing>
 8003ed4:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f040 81a4 	bne.w	800422a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f040 819f 	bne.w	800422a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f7ff fc49 	bl	8003790 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d00a      	beq.n	8003f36 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6818      	ldr	r0, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	6919      	ldr	r1, [r3, #16]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f30:	f7ff fb9a 	bl	8003668 <LL_ADC_SetOffset>
 8003f34:	e179      	b.n	800422a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff fbb7 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 8003f42:	4603      	mov	r3, r0
 8003f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x14e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fbac 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	0e9b      	lsrs	r3, r3, #26
 8003f5c:	f003 021f 	and.w	r2, r3, #31
 8003f60:	e01e      	b.n	8003fa0 <HAL_ADC_ConfigChannel+0x18c>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2100      	movs	r1, #0
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fba1 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f78:	fa93 f3a3 	rbit	r3, r3
 8003f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003f80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003f84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003f88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8003f90:	2320      	movs	r3, #32
 8003f92:	e004      	b.n	8003f9e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8003f94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003f98:	fab3 f383 	clz	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d105      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x1a4>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	0e9b      	lsrs	r3, r3, #26
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	e018      	b.n	8003fea <HAL_ADC_ConfigChannel+0x1d6>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003fd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003fdc:	2320      	movs	r3, #32
 8003fde:	e004      	b.n	8003fea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003fe0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003fe4:	fab3 f383 	clz	r3, r3
 8003fe8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d106      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff fb70 	bl	80036dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2101      	movs	r1, #1
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fb54 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 8004008:	4603      	mov	r3, r0
 800400a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <HAL_ADC_ConfigChannel+0x214>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2101      	movs	r1, #1
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fb49 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 800401e:	4603      	mov	r3, r0
 8004020:	0e9b      	lsrs	r3, r3, #26
 8004022:	f003 021f 	and.w	r2, r3, #31
 8004026:	e01e      	b.n	8004066 <HAL_ADC_ConfigChannel+0x252>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fb3e 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 8004034:	4603      	mov	r3, r0
 8004036:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800403e:	fa93 f3a3 	rbit	r3, r3
 8004042:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004046:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800404a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800404e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8004056:	2320      	movs	r3, #32
 8004058:	e004      	b.n	8004064 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800405a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800405e:	fab3 f383 	clz	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800406e:	2b00      	cmp	r3, #0
 8004070:	d105      	bne.n	800407e <HAL_ADC_ConfigChannel+0x26a>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	0e9b      	lsrs	r3, r3, #26
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	e018      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x29c>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004092:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004096:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800409a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80040a2:	2320      	movs	r3, #32
 80040a4:	e004      	b.n	80040b0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80040a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040aa:	fab3 f383 	clz	r3, r3
 80040ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d106      	bne.n	80040c2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2200      	movs	r2, #0
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fb0d 	bl	80036dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2102      	movs	r1, #2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff faf1 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <HAL_ADC_ConfigChannel+0x2da>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2102      	movs	r1, #2
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fae6 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 80040e4:	4603      	mov	r3, r0
 80040e6:	0e9b      	lsrs	r3, r3, #26
 80040e8:	f003 021f 	and.w	r2, r3, #31
 80040ec:	e01e      	b.n	800412c <HAL_ADC_ConfigChannel+0x318>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2102      	movs	r1, #2
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff fadb 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004104:	fa93 f3a3 	rbit	r3, r3
 8004108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 800410c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004110:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800411c:	2320      	movs	r3, #32
 800411e:	e004      	b.n	800412a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8004120:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004124:	fab3 f383 	clz	r3, r3
 8004128:	b2db      	uxtb	r3, r3
 800412a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x330>
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0e9b      	lsrs	r3, r3, #26
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	e014      	b.n	800416e <HAL_ADC_ConfigChannel+0x35a>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800414c:	fa93 f3a3 	rbit	r3, r3
 8004150:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8004152:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004154:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004158:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8004160:	2320      	movs	r3, #32
 8004162:	e004      	b.n	800416e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8004164:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004168:	fab3 f383 	clz	r3, r3
 800416c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800416e:	429a      	cmp	r2, r3
 8004170:	d106      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	2102      	movs	r1, #2
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff faae 	bl	80036dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2103      	movs	r1, #3
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fa92 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 800418c:	4603      	mov	r3, r0
 800418e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x398>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2103      	movs	r1, #3
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fa87 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 80041a2:	4603      	mov	r3, r0
 80041a4:	0e9b      	lsrs	r3, r3, #26
 80041a6:	f003 021f 	and.w	r2, r3, #31
 80041aa:	e017      	b.n	80041dc <HAL_ADC_ConfigChannel+0x3c8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2103      	movs	r1, #3
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fa7c 	bl	80036b0 <LL_ADC_GetOffsetChannel>
 80041b8:	4603      	mov	r3, r0
 80041ba:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80041c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041c6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80041c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80041ce:	2320      	movs	r3, #32
 80041d0:	e003      	b.n	80041da <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80041d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d4:	fab3 f383 	clz	r3, r3
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d105      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x3e0>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	0e9b      	lsrs	r3, r3, #26
 80041ee:	f003 031f 	and.w	r3, r3, #31
 80041f2:	e011      	b.n	8004218 <HAL_ADC_ConfigChannel+0x404>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041fc:	fa93 f3a3 	rbit	r3, r3
 8004200:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004202:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004204:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004206:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800420c:	2320      	movs	r3, #32
 800420e:	e003      	b.n	8004218 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004210:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004212:	fab3 f383 	clz	r3, r3
 8004216:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004218:	429a      	cmp	r2, r3
 800421a:	d106      	bne.n	800422a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2200      	movs	r2, #0
 8004222:	2103      	movs	r1, #3
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fa59 	bl	80036dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff fb60 	bl	80038f4 <LL_ADC_IsEnabled>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 8140 	bne.w	80044bc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	461a      	mov	r2, r3
 800424a:	f7ff facd 	bl	80037e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4a8f      	ldr	r2, [pc, #572]	@ (8004490 <HAL_ADC_ConfigChannel+0x67c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	f040 8131 	bne.w	80044bc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10b      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x46e>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	0e9b      	lsrs	r3, r3, #26
 8004270:	3301      	adds	r3, #1
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2b09      	cmp	r3, #9
 8004278:	bf94      	ite	ls
 800427a:	2301      	movls	r3, #1
 800427c:	2300      	movhi	r3, #0
 800427e:	b2db      	uxtb	r3, r3
 8004280:	e019      	b.n	80042b6 <HAL_ADC_ConfigChannel+0x4a2>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004292:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800429a:	2320      	movs	r3, #32
 800429c:	e003      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800429e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3301      	adds	r3, #1
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	2b09      	cmp	r3, #9
 80042ae:	bf94      	ite	ls
 80042b0:	2301      	movls	r3, #1
 80042b2:	2300      	movhi	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d079      	beq.n	80043ae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d107      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x4c2>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	0e9b      	lsrs	r3, r3, #26
 80042cc:	3301      	adds	r3, #1
 80042ce:	069b      	lsls	r3, r3, #26
 80042d0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042d4:	e015      	b.n	8004302 <HAL_ADC_ConfigChannel+0x4ee>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042de:	fa93 f3a3 	rbit	r3, r3
 80042e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80042e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042e6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80042e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80042ee:	2320      	movs	r3, #32
 80042f0:	e003      	b.n	80042fa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80042f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042f4:	fab3 f383 	clz	r3, r3
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	069b      	lsls	r3, r3, #26
 80042fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800430a:	2b00      	cmp	r3, #0
 800430c:	d109      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x50e>
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	0e9b      	lsrs	r3, r3, #26
 8004314:	3301      	adds	r3, #1
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2101      	movs	r1, #1
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	e017      	b.n	8004352 <HAL_ADC_ConfigChannel+0x53e>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004332:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800433a:	2320      	movs	r3, #32
 800433c:	e003      	b.n	8004346 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800433e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004340:	fab3 f383 	clz	r3, r3
 8004344:	b2db      	uxtb	r3, r3
 8004346:	3301      	adds	r3, #1
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	ea42 0103 	orr.w	r1, r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10a      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x564>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	0e9b      	lsrs	r3, r3, #26
 8004368:	3301      	adds	r3, #1
 800436a:	f003 021f 	and.w	r2, r3, #31
 800436e:	4613      	mov	r3, r2
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	4413      	add	r3, r2
 8004374:	051b      	lsls	r3, r3, #20
 8004376:	e018      	b.n	80043aa <HAL_ADC_ConfigChannel+0x596>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004380:	fa93 f3a3 	rbit	r3, r3
 8004384:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800438a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8004390:	2320      	movs	r3, #32
 8004392:	e003      	b.n	800439c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8004394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004396:	fab3 f383 	clz	r3, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	3301      	adds	r3, #1
 800439e:	f003 021f 	and.w	r2, r3, #31
 80043a2:	4613      	mov	r3, r2
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	4413      	add	r3, r2
 80043a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043aa:	430b      	orrs	r3, r1
 80043ac:	e081      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d107      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x5b6>
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	0e9b      	lsrs	r3, r3, #26
 80043c0:	3301      	adds	r3, #1
 80043c2:	069b      	lsls	r3, r3, #26
 80043c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043c8:	e015      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x5e2>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d2:	fa93 f3a3 	rbit	r3, r3
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80043d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80043e2:	2320      	movs	r3, #32
 80043e4:	e003      	b.n	80043ee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80043e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e8:	fab3 f383 	clz	r3, r3
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	3301      	adds	r3, #1
 80043f0:	069b      	lsls	r3, r3, #26
 80043f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x602>
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	0e9b      	lsrs	r3, r3, #26
 8004408:	3301      	adds	r3, #1
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2101      	movs	r1, #1
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	e017      	b.n	8004446 <HAL_ADC_ConfigChannel+0x632>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	61bb      	str	r3, [r7, #24]
  return result;
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800442e:	2320      	movs	r3, #32
 8004430:	e003      	b.n	800443a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	fab3 f383 	clz	r3, r3
 8004438:	b2db      	uxtb	r3, r3
 800443a:	3301      	adds	r3, #1
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	2101      	movs	r1, #1
 8004442:	fa01 f303 	lsl.w	r3, r1, r3
 8004446:	ea42 0103 	orr.w	r1, r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10d      	bne.n	8004472 <HAL_ADC_ConfigChannel+0x65e>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	0e9b      	lsrs	r3, r3, #26
 800445c:	3301      	adds	r3, #1
 800445e:	f003 021f 	and.w	r2, r3, #31
 8004462:	4613      	mov	r3, r2
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	4413      	add	r3, r2
 8004468:	3b1e      	subs	r3, #30
 800446a:	051b      	lsls	r3, r3, #20
 800446c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004470:	e01e      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x69c>
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	fa93 f3a3 	rbit	r3, r3
 800447e:	60fb      	str	r3, [r7, #12]
  return result;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d104      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e006      	b.n	800449c <HAL_ADC_ConfigChannel+0x688>
 800448e:	bf00      	nop
 8004490:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	fab3 f383 	clz	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	3301      	adds	r3, #1
 800449e:	f003 021f 	and.w	r2, r3, #31
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	3b1e      	subs	r3, #30
 80044aa:	051b      	lsls	r3, r3, #20
 80044ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044b6:	4619      	mov	r1, r3
 80044b8:	f7ff f96a 	bl	8003790 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b3d      	ldr	r3, [pc, #244]	@ (80045b8 <HAL_ADC_ConfigChannel+0x7a4>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d06c      	beq.n	80045a2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044c8:	483c      	ldr	r0, [pc, #240]	@ (80045bc <HAL_ADC_ConfigChannel+0x7a8>)
 80044ca:	f7ff f8bf 	bl	800364c <LL_ADC_GetCommonPathInternalCh>
 80044ce:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a3a      	ldr	r2, [pc, #232]	@ (80045c0 <HAL_ADC_ConfigChannel+0x7ac>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d127      	bne.n	800452c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80044dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d121      	bne.n	800452c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a35      	ldr	r2, [pc, #212]	@ (80045c4 <HAL_ADC_ConfigChannel+0x7b0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d157      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80044f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044fa:	4619      	mov	r1, r3
 80044fc:	482f      	ldr	r0, [pc, #188]	@ (80045bc <HAL_ADC_ConfigChannel+0x7a8>)
 80044fe:	f7ff f892 	bl	8003626 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004502:	4b31      	ldr	r3, [pc, #196]	@ (80045c8 <HAL_ADC_ConfigChannel+0x7b4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	099b      	lsrs	r3, r3, #6
 8004508:	4a30      	ldr	r2, [pc, #192]	@ (80045cc <HAL_ADC_ConfigChannel+0x7b8>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	099b      	lsrs	r3, r3, #6
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	4613      	mov	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800451c:	e002      	b.n	8004524 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	3b01      	subs	r3, #1
 8004522:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f9      	bne.n	800451e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800452a:	e03a      	b.n	80045a2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a27      	ldr	r2, [pc, #156]	@ (80045d0 <HAL_ADC_ConfigChannel+0x7bc>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d113      	bne.n	800455e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004536:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800453a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1f      	ldr	r2, [pc, #124]	@ (80045c4 <HAL_ADC_ConfigChannel+0x7b0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d12a      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800454c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004550:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004554:	4619      	mov	r1, r3
 8004556:	4819      	ldr	r0, [pc, #100]	@ (80045bc <HAL_ADC_ConfigChannel+0x7a8>)
 8004558:	f7ff f865 	bl	8003626 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800455c:	e021      	b.n	80045a2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d11c      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004568:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800456c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d116      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a12      	ldr	r2, [pc, #72]	@ (80045c4 <HAL_ADC_ConfigChannel+0x7b0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d111      	bne.n	80045a2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800457e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004582:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004586:	4619      	mov	r1, r3
 8004588:	480c      	ldr	r0, [pc, #48]	@ (80045bc <HAL_ADC_ConfigChannel+0x7a8>)
 800458a:	f7ff f84c 	bl	8003626 <LL_ADC_SetCommonPathInternalCh>
 800458e:	e008      	b.n	80045a2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80045aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	37d8      	adds	r7, #216	@ 0xd8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	80080000 	.word	0x80080000
 80045bc:	50040300 	.word	0x50040300
 80045c0:	c7520000 	.word	0xc7520000
 80045c4:	50040000 	.word	0x50040000
 80045c8:	2000002c 	.word	0x2000002c
 80045cc:	053e2d63 	.word	0x053e2d63
 80045d0:	cb840000 	.word	0xcb840000
 80045d4:	80000001 	.word	0x80000001

080045d8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff f983 	bl	80038f4 <LL_ADC_IsEnabled>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d169      	bne.n	80046c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	4b36      	ldr	r3, [pc, #216]	@ (80046d4 <ADC_Enable+0xfc>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00d      	beq.n	800461e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004606:	f043 0210 	orr.w	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004612:	f043 0201 	orr.w	r2, r3, #1
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e055      	b.n	80046ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff f952 	bl	80038cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004628:	482b      	ldr	r0, [pc, #172]	@ (80046d8 <ADC_Enable+0x100>)
 800462a:	f7ff f80f 	bl	800364c <LL_ADC_GetCommonPathInternalCh>
 800462e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004630:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004634:	2b00      	cmp	r3, #0
 8004636:	d013      	beq.n	8004660 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004638:	4b28      	ldr	r3, [pc, #160]	@ (80046dc <ADC_Enable+0x104>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	4a28      	ldr	r2, [pc, #160]	@ (80046e0 <ADC_Enable+0x108>)
 8004640:	fba2 2303 	umull	r2, r3, r2, r3
 8004644:	099b      	lsrs	r3, r3, #6
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	4613      	mov	r3, r2
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004652:	e002      	b.n	800465a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	3b01      	subs	r3, #1
 8004658:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1f9      	bne.n	8004654 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004660:	f7fe ffc2 	bl	80035e8 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004666:	e028      	b.n	80046ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff f941 	bl	80038f4 <LL_ADC_IsEnabled>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d104      	bne.n	8004682 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff f925 	bl	80038cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004682:	f7fe ffb1 	bl	80035e8 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d914      	bls.n	80046ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d00d      	beq.n	80046ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a2:	f043 0210 	orr.w	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ae:	f043 0201 	orr.w	r2, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e007      	b.n	80046ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0301 	and.w	r3, r3, #1
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d1cf      	bne.n	8004668 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	8000003f 	.word	0x8000003f
 80046d8:	50040300 	.word	0x50040300
 80046dc:	2000002c 	.word	0x2000002c
 80046e0:	053e2d63 	.word	0x053e2d63

080046e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <__NVIC_SetPriorityGrouping+0x44>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004700:	4013      	ands	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800470c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004716:	4a04      	ldr	r2, [pc, #16]	@ (8004728 <__NVIC_SetPriorityGrouping+0x44>)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	60d3      	str	r3, [r2, #12]
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	e000ed00 	.word	0xe000ed00

0800472c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004730:	4b04      	ldr	r3, [pc, #16]	@ (8004744 <__NVIC_GetPriorityGrouping+0x18>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	0a1b      	lsrs	r3, r3, #8
 8004736:	f003 0307 	and.w	r3, r3, #7
}
 800473a:	4618      	mov	r0, r3
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	e000ed00 	.word	0xe000ed00

08004748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	2b00      	cmp	r3, #0
 8004758:	db0b      	blt.n	8004772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	f003 021f 	and.w	r2, r3, #31
 8004760:	4907      	ldr	r1, [pc, #28]	@ (8004780 <__NVIC_EnableIRQ+0x38>)
 8004762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	2001      	movs	r0, #1
 800476a:	fa00 f202 	lsl.w	r2, r0, r2
 800476e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	e000e100 	.word	0xe000e100

08004784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004794:	2b00      	cmp	r3, #0
 8004796:	db0a      	blt.n	80047ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	b2da      	uxtb	r2, r3
 800479c:	490c      	ldr	r1, [pc, #48]	@ (80047d0 <__NVIC_SetPriority+0x4c>)
 800479e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	440b      	add	r3, r1
 80047a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047ac:	e00a      	b.n	80047c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4908      	ldr	r1, [pc, #32]	@ (80047d4 <__NVIC_SetPriority+0x50>)
 80047b4:	79fb      	ldrb	r3, [r7, #7]
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	3b04      	subs	r3, #4
 80047bc:	0112      	lsls	r2, r2, #4
 80047be:	b2d2      	uxtb	r2, r2
 80047c0:	440b      	add	r3, r1
 80047c2:	761a      	strb	r2, [r3, #24]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	e000e100 	.word	0xe000e100
 80047d4:	e000ed00 	.word	0xe000ed00

080047d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	@ 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f1c3 0307 	rsb	r3, r3, #7
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	bf28      	it	cs
 80047f6:	2304      	movcs	r3, #4
 80047f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3304      	adds	r3, #4
 80047fe:	2b06      	cmp	r3, #6
 8004800:	d902      	bls.n	8004808 <NVIC_EncodePriority+0x30>
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	3b03      	subs	r3, #3
 8004806:	e000      	b.n	800480a <NVIC_EncodePriority+0x32>
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800480c:	f04f 32ff 	mov.w	r2, #4294967295
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43da      	mvns	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	401a      	ands	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004820:	f04f 31ff 	mov.w	r1, #4294967295
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	43d9      	mvns	r1, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004830:	4313      	orrs	r3, r2
         );
}
 8004832:	4618      	mov	r0, r3
 8004834:	3724      	adds	r7, #36	@ 0x24
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
	...

08004840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3b01      	subs	r3, #1
 800484c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004850:	d301      	bcc.n	8004856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004852:	2301      	movs	r3, #1
 8004854:	e00f      	b.n	8004876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004856:	4a0a      	ldr	r2, [pc, #40]	@ (8004880 <SysTick_Config+0x40>)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3b01      	subs	r3, #1
 800485c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800485e:	210f      	movs	r1, #15
 8004860:	f04f 30ff 	mov.w	r0, #4294967295
 8004864:	f7ff ff8e 	bl	8004784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004868:	4b05      	ldr	r3, [pc, #20]	@ (8004880 <SysTick_Config+0x40>)
 800486a:	2200      	movs	r2, #0
 800486c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800486e:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <SysTick_Config+0x40>)
 8004870:	2207      	movs	r2, #7
 8004872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	e000e010 	.word	0xe000e010

08004884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff ff29 	bl	80046e4 <__NVIC_SetPriorityGrouping>
}
 8004892:	bf00      	nop
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	4603      	mov	r3, r0
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80048a8:	2300      	movs	r3, #0
 80048aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048ac:	f7ff ff3e 	bl	800472c <__NVIC_GetPriorityGrouping>
 80048b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	6978      	ldr	r0, [r7, #20]
 80048b8:	f7ff ff8e 	bl	80047d8 <NVIC_EncodePriority>
 80048bc:	4602      	mov	r2, r0
 80048be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048c2:	4611      	mov	r1, r2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff ff5d 	bl	8004784 <__NVIC_SetPriority>
}
 80048ca:	bf00      	nop
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	4603      	mov	r3, r0
 80048da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff ff31 	bl	8004748 <__NVIC_EnableIRQ>
}
 80048e6:	bf00      	nop
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff ffa2 	bl	8004840 <SysTick_Config>
 80048fc:	4603      	mov	r3, r0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	607a      	str	r2, [r7, #4]
 8004912:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_DMA_Start_IT+0x20>
 8004922:	2302      	movs	r3, #2
 8004924:	e04b      	b.n	80049be <HAL_DMA_Start_IT+0xb8>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b01      	cmp	r3, #1
 8004938:	d13a      	bne.n	80049b0 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2202      	movs	r2, #2
 800493e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f831 	bl	80049c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 020e 	orr.w	r2, r2, #14
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e00f      	b.n	800499e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0204 	bic.w	r2, r2, #4
 800498c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 020a 	orr.w	r2, r2, #10
 800499c:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0201 	orr.w	r2, r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e005      	b.n	80049bc <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80049b8:	2302      	movs	r3, #2
 80049ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80049bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d8:	f003 021c 	and.w	r2, r3, #28
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e0:	2101      	movs	r1, #1
 80049e2:	fa01 f202 	lsl.w	r2, r1, r2
 80049e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d108      	bne.n	8004a0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a08:	e007      	b.n	8004a1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	60da      	str	r2, [r3, #12]
}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a36:	e148      	b.n	8004cca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	4013      	ands	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 813a 	beq.w	8004cc4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d005      	beq.n	8004a68 <HAL_GPIO_Init+0x40>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0303 	and.w	r3, r3, #3
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d130      	bne.n	8004aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	2203      	movs	r2, #3
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0201 	and.w	r2, r3, #1
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d017      	beq.n	8004b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4013      	ands	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d123      	bne.n	8004b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	08da      	lsrs	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3208      	adds	r2, #8
 8004b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4013      	ands	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	08da      	lsrs	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3208      	adds	r2, #8
 8004b54:	6939      	ldr	r1, [r7, #16]
 8004b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0203 	and.w	r2, r3, #3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 8094 	beq.w	8004cc4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9c:	4b52      	ldr	r3, [pc, #328]	@ (8004ce8 <HAL_GPIO_Init+0x2c0>)
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ba0:	4a51      	ldr	r2, [pc, #324]	@ (8004ce8 <HAL_GPIO_Init+0x2c0>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8004ce8 <HAL_GPIO_Init+0x2c0>)
 8004baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004bb4:	4a4d      	ldr	r2, [pc, #308]	@ (8004cec <HAL_GPIO_Init+0x2c4>)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	3302      	adds	r3, #2
 8004bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	220f      	movs	r2, #15
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004bde:	d00d      	beq.n	8004bfc <HAL_GPIO_Init+0x1d4>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a43      	ldr	r2, [pc, #268]	@ (8004cf0 <HAL_GPIO_Init+0x2c8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d007      	beq.n	8004bf8 <HAL_GPIO_Init+0x1d0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a42      	ldr	r2, [pc, #264]	@ (8004cf4 <HAL_GPIO_Init+0x2cc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <HAL_GPIO_Init+0x1cc>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	e004      	b.n	8004bfe <HAL_GPIO_Init+0x1d6>
 8004bf4:	2307      	movs	r3, #7
 8004bf6:	e002      	b.n	8004bfe <HAL_GPIO_Init+0x1d6>
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_GPIO_Init+0x1d6>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	f002 0203 	and.w	r2, r2, #3
 8004c04:	0092      	lsls	r2, r2, #2
 8004c06:	4093      	lsls	r3, r2
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c0e:	4937      	ldr	r1, [pc, #220]	@ (8004cec <HAL_GPIO_Init+0x2c4>)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	3302      	adds	r3, #2
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c1c:	4b36      	ldr	r3, [pc, #216]	@ (8004cf8 <HAL_GPIO_Init+0x2d0>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	43db      	mvns	r3, r3
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004c38:	693a      	ldr	r2, [r7, #16]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c40:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf8 <HAL_GPIO_Init+0x2d0>)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c46:	4b2c      	ldr	r3, [pc, #176]	@ (8004cf8 <HAL_GPIO_Init+0x2d0>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	4013      	ands	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c6a:	4a23      	ldr	r2, [pc, #140]	@ (8004cf8 <HAL_GPIO_Init+0x2d0>)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c70:	4b21      	ldr	r3, [pc, #132]	@ (8004cf8 <HAL_GPIO_Init+0x2d0>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c94:	4a18      	ldr	r2, [pc, #96]	@ (8004cf8 <HAL_GPIO_Init+0x2d0>)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004c9a:	4b17      	ldr	r3, [pc, #92]	@ (8004cf8 <HAL_GPIO_Init+0x2d0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf8 <HAL_GPIO_Init+0x2d0>)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f47f aeaf 	bne.w	8004a38 <HAL_GPIO_Init+0x10>
  }
}
 8004cda:	bf00      	nop
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	48000400 	.word	0x48000400
 8004cf4:	48000800 	.word	0x48000800
 8004cf8:	40010400 	.word	0x40010400

08004cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	807b      	strh	r3, [r7, #2]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d0c:	787b      	ldrb	r3, [r7, #1]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d18:	e002      	b.n	8004d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d1a:	887a      	ldrh	r2, [r7, #2]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d36:	4b08      	ldr	r3, [pc, #32]	@ (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	88fb      	ldrh	r3, [r7, #6]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d006      	beq.n	8004d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d42:	4a05      	ldr	r2, [pc, #20]	@ (8004d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d48:	88fb      	ldrh	r3, [r7, #6]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 f806 	bl	8004d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d50:	bf00      	nop
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40010400 	.word	0x40010400

08004d5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	4603      	mov	r3, r0
 8004d64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b082      	sub	sp, #8
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e08d      	b.n	8004ea0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7fe f85b 	bl	8002e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2224      	movs	r2, #36	@ 0x24
 8004da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004dc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d107      	bne.n	8004dec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004de8:	609a      	str	r2, [r3, #8]
 8004dea:	e006      	b.n	8004dfa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004df8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d108      	bne.n	8004e14 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	e007      	b.n	8004e24 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e36:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69d9      	ldr	r1, [r3, #28]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1a      	ldr	r2, [r3, #32]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f042 0201 	orr.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	607a      	str	r2, [r7, #4]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	817b      	strh	r3, [r7, #10]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	f040 80fd 	bne.w	80050c4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_I2C_Master_Transmit+0x30>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e0f6      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x21e>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ee0:	f7fe fb82 	bl	80035e8 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	2319      	movs	r3, #25
 8004eec:	2201      	movs	r2, #1
 8004eee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ef2:	68f8      	ldr	r0, [r7, #12]
 8004ef4:	f000 fa0a 	bl	800530c <I2C_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e0e1      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2221      	movs	r2, #33	@ 0x21
 8004f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	893a      	ldrh	r2, [r7, #8]
 8004f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2bff      	cmp	r3, #255	@ 0xff
 8004f32:	d906      	bls.n	8004f42 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	22ff      	movs	r2, #255	@ 0xff
 8004f38:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e007      	b.n	8004f52 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f50:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d024      	beq.n	8004fa4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	3301      	adds	r3, #1
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	8979      	ldrh	r1, [r7, #10]
 8004f96:	4b4e      	ldr	r3, [pc, #312]	@ (80050d0 <HAL_I2C_Master_Transmit+0x228>)
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 fbf1 	bl	8005784 <I2C_TransferConfig>
 8004fa2:	e066      	b.n	8005072 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	8979      	ldrh	r1, [r7, #10]
 8004fac:	4b48      	ldr	r3, [pc, #288]	@ (80050d0 <HAL_I2C_Master_Transmit+0x228>)
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f000 fbe6 	bl	8005784 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004fb8:	e05b      	b.n	8005072 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	6a39      	ldr	r1, [r7, #32]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f9f3 	bl	80053aa <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e07b      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	781a      	ldrb	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	3b01      	subs	r3, #1
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d034      	beq.n	8005072 <HAL_I2C_Master_Transmit+0x1ca>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500c:	2b00      	cmp	r3, #0
 800500e:	d130      	bne.n	8005072 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	2200      	movs	r2, #0
 8005018:	2180      	movs	r1, #128	@ 0x80
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f000 f976 	bl	800530c <I2C_WaitOnFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e04d      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	2bff      	cmp	r3, #255	@ 0xff
 8005032:	d90e      	bls.n	8005052 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	22ff      	movs	r2, #255	@ 0xff
 8005038:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503e:	b2da      	uxtb	r2, r3
 8005040:	8979      	ldrh	r1, [r7, #10]
 8005042:	2300      	movs	r3, #0
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 fb9a 	bl	8005784 <I2C_TransferConfig>
 8005050:	e00f      	b.n	8005072 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005056:	b29a      	uxth	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005060:	b2da      	uxtb	r2, r3
 8005062:	8979      	ldrh	r1, [r7, #10]
 8005064:	2300      	movs	r3, #0
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fb89 	bl	8005784 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d19e      	bne.n	8004fba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	6a39      	ldr	r1, [r7, #32]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f9d9 	bl	8005438 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e01a      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2220      	movs	r2, #32
 8005096:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b0c      	ldr	r3, [pc, #48]	@ (80050d4 <HAL_I2C_Master_Transmit+0x22c>)
 80050a4:	400b      	ands	r3, r1
 80050a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	e000      	b.n	80050c6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80050c4:	2302      	movs	r3, #2
  }
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3718      	adds	r7, #24
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	80002000 	.word	0x80002000
 80050d4:	fe00e800 	.word	0xfe00e800

080050d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b088      	sub	sp, #32
 80050dc:	af02      	add	r7, sp, #8
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	607a      	str	r2, [r7, #4]
 80050e2:	461a      	mov	r2, r3
 80050e4:	460b      	mov	r3, r1
 80050e6:	817b      	strh	r3, [r7, #10]
 80050e8:	4613      	mov	r3, r2
 80050ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	f040 80db 	bne.w	80052b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005100:	2b01      	cmp	r3, #1
 8005102:	d101      	bne.n	8005108 <HAL_I2C_Master_Receive+0x30>
 8005104:	2302      	movs	r3, #2
 8005106:	e0d4      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005110:	f7fe fa6a 	bl	80035e8 <HAL_GetTick>
 8005114:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	2319      	movs	r3, #25
 800511c:	2201      	movs	r2, #1
 800511e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 f8f2 	bl	800530c <I2C_WaitOnFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e0bf      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2222      	movs	r2, #34	@ 0x22
 8005136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2210      	movs	r2, #16
 800513e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	893a      	ldrh	r2, [r7, #8]
 8005152:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	2bff      	cmp	r3, #255	@ 0xff
 8005162:	d90e      	bls.n	8005182 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	22ff      	movs	r2, #255	@ 0xff
 8005168:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800516e:	b2da      	uxtb	r2, r3
 8005170:	8979      	ldrh	r1, [r7, #10]
 8005172:	4b52      	ldr	r3, [pc, #328]	@ (80052bc <HAL_I2C_Master_Receive+0x1e4>)
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f000 fb02 	bl	8005784 <I2C_TransferConfig>
 8005180:	e06d      	b.n	800525e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005190:	b2da      	uxtb	r2, r3
 8005192:	8979      	ldrh	r1, [r7, #10]
 8005194:	4b49      	ldr	r3, [pc, #292]	@ (80052bc <HAL_I2C_Master_Receive+0x1e4>)
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 faf1 	bl	8005784 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80051a2:	e05c      	b.n	800525e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	6a39      	ldr	r1, [r7, #32]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f989 	bl	80054c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e07c      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d034      	beq.n	800525e <HAL_I2C_Master_Receive+0x186>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d130      	bne.n	800525e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	2200      	movs	r2, #0
 8005204:	2180      	movs	r1, #128	@ 0x80
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f880 	bl	800530c <I2C_WaitOnFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e04d      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800521a:	b29b      	uxth	r3, r3
 800521c:	2bff      	cmp	r3, #255	@ 0xff
 800521e:	d90e      	bls.n	800523e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	22ff      	movs	r2, #255	@ 0xff
 8005224:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522a:	b2da      	uxtb	r2, r3
 800522c:	8979      	ldrh	r1, [r7, #10]
 800522e:	2300      	movs	r3, #0
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 faa4 	bl	8005784 <I2C_TransferConfig>
 800523c:	e00f      	b.n	800525e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524c:	b2da      	uxtb	r2, r3
 800524e:	8979      	ldrh	r1, [r7, #10]
 8005250:	2300      	movs	r3, #0
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 fa93 	bl	8005784 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d19d      	bne.n	80051a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005268:	697a      	ldr	r2, [r7, #20]
 800526a:	6a39      	ldr	r1, [r7, #32]
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f8e3 	bl	8005438 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e01a      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2220      	movs	r2, #32
 8005282:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6859      	ldr	r1, [r3, #4]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b0c      	ldr	r3, [pc, #48]	@ (80052c0 <HAL_I2C_Master_Receive+0x1e8>)
 8005290:	400b      	ands	r3, r1
 8005292:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	e000      	b.n	80052b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
  }
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	80002400 	.word	0x80002400
 80052c0:	fe00e800 	.word	0xfe00e800

080052c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d103      	bne.n	80052e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2200      	movs	r2, #0
 80052e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d007      	beq.n	8005300 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	699a      	ldr	r2, [r3, #24]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	619a      	str	r2, [r3, #24]
  }
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800531c:	e031      	b.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d02d      	beq.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005326:	f7fe f95f 	bl	80035e8 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	429a      	cmp	r2, r3
 8005334:	d302      	bcc.n	800533c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d122      	bne.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4013      	ands	r3, r2
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	429a      	cmp	r2, r3
 800534a:	bf0c      	ite	eq
 800534c:	2301      	moveq	r3, #1
 800534e:	2300      	movne	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	429a      	cmp	r2, r3
 8005358:	d113      	bne.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	f043 0220 	orr.w	r2, r3, #32
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2220      	movs	r2, #32
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e00f      	b.n	80053a2 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4013      	ands	r3, r2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	bf0c      	ite	eq
 8005392:	2301      	moveq	r3, #1
 8005394:	2300      	movne	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	429a      	cmp	r2, r3
 800539e:	d0be      	beq.n	800531e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80053b6:	e033      	b.n	8005420 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f901 	bl	80055c4 <I2C_IsErrorOccurred>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e031      	b.n	8005430 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d2:	d025      	beq.n	8005420 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d4:	f7fe f908 	bl	80035e8 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d11a      	bne.n	8005420 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d013      	beq.n	8005420 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fc:	f043 0220 	orr.w	r2, r3, #32
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e007      	b.n	8005430 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b02      	cmp	r3, #2
 800542c:	d1c4      	bne.n	80053b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005444:	e02f      	b.n	80054a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f8ba 	bl	80055c4 <I2C_IsErrorOccurred>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e02d      	b.n	80054b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800545a:	f7fe f8c5 	bl	80035e8 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	429a      	cmp	r2, r3
 8005468:	d302      	bcc.n	8005470 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d11a      	bne.n	80054a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b20      	cmp	r3, #32
 800547c:	d013      	beq.n	80054a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005482:	f043 0220 	orr.w	r2, r3, #32
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e007      	b.n	80054b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d1c8      	bne.n	8005446 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054cc:	e06b      	b.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f876 	bl	80055c4 <I2C_IsErrorOccurred>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e069      	b.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d138      	bne.n	8005562 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d105      	bne.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e055      	b.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b10      	cmp	r3, #16
 8005516:	d107      	bne.n	8005528 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2210      	movs	r2, #16
 800551e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2204      	movs	r2, #4
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44
 8005526:	e002      	b.n	800552e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2220      	movs	r2, #32
 8005534:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6859      	ldr	r1, [r3, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	4b1f      	ldr	r3, [pc, #124]	@ (80055c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8005542:	400b      	ands	r3, r1
 8005544:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e029      	b.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005562:	f7fe f841 	bl	80035e8 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d116      	bne.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f003 0304 	and.w	r3, r3, #4
 8005582:	2b04      	cmp	r3, #4
 8005584:	d00f      	beq.n	80055a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558a:	f043 0220 	orr.w	r2, r3, #32
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e007      	b.n	80055b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d18c      	bne.n	80054ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	fe00e800 	.word	0xfe00e800

080055c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	@ 0x28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d068      	beq.n	80056c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2210      	movs	r2, #16
 80055f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055f8:	e049      	b.n	800568e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d045      	beq.n	800568e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005602:	f7fd fff1 	bl	80035e8 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	d302      	bcc.n	8005618 <I2C_IsErrorOccurred+0x54>
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d13a      	bne.n	800568e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005622:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800562a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800563a:	d121      	bne.n	8005680 <I2C_IsErrorOccurred+0xbc>
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005642:	d01d      	beq.n	8005680 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	2b20      	cmp	r3, #32
 8005648:	d01a      	beq.n	8005680 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005658:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800565a:	f7fd ffc5 	bl	80035e8 <HAL_GetTick>
 800565e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005660:	e00e      	b.n	8005680 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005662:	f7fd ffc1 	bl	80035e8 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b19      	cmp	r3, #25
 800566e:	d907      	bls.n	8005680 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	f043 0320 	orr.w	r3, r3, #32
 8005676:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800567e:	e006      	b.n	800568e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b20      	cmp	r3, #32
 800568c:	d1e9      	bne.n	8005662 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	f003 0320 	and.w	r3, r3, #32
 8005698:	2b20      	cmp	r3, #32
 800569a:	d003      	beq.n	80056a4 <I2C_IsErrorOccurred+0xe0>
 800569c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d0aa      	beq.n	80055fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d103      	bne.n	80056b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2220      	movs	r2, #32
 80056b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	f043 0304 	orr.w	r3, r3, #4
 80056ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	f043 0301 	orr.w	r3, r3, #1
 80056da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00b      	beq.n	800570e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f043 0308 	orr.w	r3, r3, #8
 80056fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005706:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00b      	beq.n	8005730 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	f043 0302 	orr.w	r3, r3, #2
 800571e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005730:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005734:	2b00      	cmp	r3, #0
 8005736:	d01c      	beq.n	8005772 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7ff fdc3 	bl	80052c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b0d      	ldr	r3, [pc, #52]	@ (8005780 <I2C_IsErrorOccurred+0x1bc>)
 800574a:	400b      	ands	r3, r1
 800574c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	431a      	orrs	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005776:	4618      	mov	r0, r3
 8005778:	3728      	adds	r7, #40	@ 0x28
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	fe00e800 	.word	0xfe00e800

08005784 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	460b      	mov	r3, r1
 8005790:	817b      	strh	r3, [r7, #10]
 8005792:	4613      	mov	r3, r2
 8005794:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005796:	897b      	ldrh	r3, [r7, #10]
 8005798:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800579c:	7a7b      	ldrb	r3, [r7, #9]
 800579e:	041b      	lsls	r3, r3, #16
 80057a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685a      	ldr	r2, [r3, #4]
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	0d5b      	lsrs	r3, r3, #21
 80057be:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80057c2:	4b08      	ldr	r3, [pc, #32]	@ (80057e4 <I2C_TransferConfig+0x60>)
 80057c4:	430b      	orrs	r3, r1
 80057c6:	43db      	mvns	r3, r3
 80057c8:	ea02 0103 	and.w	r1, r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	03ff63ff 	.word	0x03ff63ff

080057e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b20      	cmp	r3, #32
 80057fc:	d138      	bne.n	8005870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005804:	2b01      	cmp	r3, #1
 8005806:	d101      	bne.n	800580c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005808:	2302      	movs	r3, #2
 800580a:	e032      	b.n	8005872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2224      	movs	r2, #36	@ 0x24
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0201 	bic.w	r2, r2, #1
 800582a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800583a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6819      	ldr	r1, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	e000      	b.n	8005872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005870:	2302      	movs	r3, #2
  }
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b20      	cmp	r3, #32
 8005892:	d139      	bne.n	8005908 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800589e:	2302      	movs	r3, #2
 80058a0:	e033      	b.n	800590a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2224      	movs	r2, #36	@ 0x24
 80058ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f022 0201 	bic.w	r2, r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	e000      	b.n	800590a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005908:	2302      	movs	r3, #2
  }
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800591c:	4b04      	ldr	r3, [pc, #16]	@ (8005930 <HAL_PWREx_GetVoltageRange+0x18>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40007000 	.word	0x40007000

08005934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005942:	d130      	bne.n	80059a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005944:	4b23      	ldr	r3, [pc, #140]	@ (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800594c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005950:	d038      	beq.n	80059c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005952:	4b20      	ldr	r3, [pc, #128]	@ (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800595a:	4a1e      	ldr	r2, [pc, #120]	@ (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800595c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005960:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005962:	4b1d      	ldr	r3, [pc, #116]	@ (80059d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2232      	movs	r2, #50	@ 0x32
 8005968:	fb02 f303 	mul.w	r3, r2, r3
 800596c:	4a1b      	ldr	r2, [pc, #108]	@ (80059dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	0c9b      	lsrs	r3, r3, #18
 8005974:	3301      	adds	r3, #1
 8005976:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005978:	e002      	b.n	8005980 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3b01      	subs	r3, #1
 800597e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005980:	4b14      	ldr	r3, [pc, #80]	@ (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800598c:	d102      	bne.n	8005994 <HAL_PWREx_ControlVoltageScaling+0x60>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f2      	bne.n	800597a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005994:	4b0f      	ldr	r3, [pc, #60]	@ (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800599c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a0:	d110      	bne.n	80059c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e00f      	b.n	80059c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80059a6:	4b0b      	ldr	r3, [pc, #44]	@ (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80059ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059b2:	d007      	beq.n	80059c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059b4:	4b07      	ldr	r3, [pc, #28]	@ (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059bc:	4a05      	ldr	r2, [pc, #20]	@ (80059d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80059be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40007000 	.word	0x40007000
 80059d8:	2000002c 	.word	0x2000002c
 80059dc:	431bde83 	.word	0x431bde83

080059e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d102      	bne.n	80059f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	f000 bc02 	b.w	80061f8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059f4:	4b96      	ldr	r3, [pc, #600]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 030c 	and.w	r3, r3, #12
 80059fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059fe:	4b94      	ldr	r3, [pc, #592]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 80e4 	beq.w	8005bde <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d007      	beq.n	8005a2c <HAL_RCC_OscConfig+0x4c>
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b0c      	cmp	r3, #12
 8005a20:	f040 808b 	bne.w	8005b3a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	f040 8087 	bne.w	8005b3a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a2c:	4b88      	ldr	r3, [pc, #544]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_OscConfig+0x64>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d101      	bne.n	8005a44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e3d9      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a1a      	ldr	r2, [r3, #32]
 8005a48:	4b81      	ldr	r3, [pc, #516]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d004      	beq.n	8005a5e <HAL_RCC_OscConfig+0x7e>
 8005a54:	4b7e      	ldr	r3, [pc, #504]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a5c:	e005      	b.n	8005a6a <HAL_RCC_OscConfig+0x8a>
 8005a5e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d223      	bcs.n	8005ab6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fd8c 	bl	8006590 <RCC_SetFlashLatencyFromMSIRange>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e3ba      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a82:	4b73      	ldr	r3, [pc, #460]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a72      	ldr	r2, [pc, #456]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005a88:	f043 0308 	orr.w	r3, r3, #8
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	4b70      	ldr	r3, [pc, #448]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	496d      	ldr	r1, [pc, #436]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aa0:	4b6b      	ldr	r3, [pc, #428]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	4968      	ldr	r1, [pc, #416]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	604b      	str	r3, [r1, #4]
 8005ab4:	e025      	b.n	8005b02 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ab6:	4b66      	ldr	r3, [pc, #408]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a65      	ldr	r2, [pc, #404]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005abc:	f043 0308 	orr.w	r3, r3, #8
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	4b63      	ldr	r3, [pc, #396]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	4960      	ldr	r1, [pc, #384]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ad4:	4b5e      	ldr	r3, [pc, #376]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	69db      	ldr	r3, [r3, #28]
 8005ae0:	021b      	lsls	r3, r3, #8
 8005ae2:	495b      	ldr	r1, [pc, #364]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f000 fd4c 	bl	8006590 <RCC_SetFlashLatencyFromMSIRange>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e37a      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b02:	f000 fc81 	bl	8006408 <HAL_RCC_GetSysClockFreq>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b51      	ldr	r3, [pc, #324]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	4950      	ldr	r1, [pc, #320]	@ (8005c54 <HAL_RCC_OscConfig+0x274>)
 8005b14:	5ccb      	ldrb	r3, [r1, r3]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1e:	4a4e      	ldr	r2, [pc, #312]	@ (8005c58 <HAL_RCC_OscConfig+0x278>)
 8005b20:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b22:	4b4e      	ldr	r3, [pc, #312]	@ (8005c5c <HAL_RCC_OscConfig+0x27c>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fd fd0e 	bl	8003548 <HAL_InitTick>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d052      	beq.n	8005bdc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005b36:	7bfb      	ldrb	r3, [r7, #15]
 8005b38:	e35e      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d032      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b42:	4b43      	ldr	r3, [pc, #268]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a42      	ldr	r2, [pc, #264]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b4e:	f7fd fd4b 	bl	80035e8 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b56:	f7fd fd47 	bl	80035e8 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e347      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b68:	4b39      	ldr	r3, [pc, #228]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b74:	4b36      	ldr	r3, [pc, #216]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a35      	ldr	r2, [pc, #212]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005b7a:	f043 0308 	orr.w	r3, r3, #8
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	4b33      	ldr	r3, [pc, #204]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	4930      	ldr	r1, [pc, #192]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b92:	4b2f      	ldr	r3, [pc, #188]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	492b      	ldr	r1, [pc, #172]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	604b      	str	r3, [r1, #4]
 8005ba6:	e01a      	b.n	8005bde <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005ba8:	4b29      	ldr	r3, [pc, #164]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a28      	ldr	r2, [pc, #160]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005bb4:	f7fd fd18 	bl	80035e8 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005bbc:	f7fd fd14 	bl	80035e8 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e314      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bce:	4b20      	ldr	r3, [pc, #128]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x1dc>
 8005bda:	e000      	b.n	8005bde <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d073      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d005      	beq.n	8005bfc <HAL_RCC_OscConfig+0x21c>
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b0c      	cmp	r3, #12
 8005bf4:	d10e      	bne.n	8005c14 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d10b      	bne.n	8005c14 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bfc:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d063      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x2f0>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d15f      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e2f1      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c1c:	d106      	bne.n	8005c2c <HAL_RCC_OscConfig+0x24c>
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a0b      	ldr	r2, [pc, #44]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	e025      	b.n	8005c78 <HAL_RCC_OscConfig+0x298>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c34:	d114      	bne.n	8005c60 <HAL_RCC_OscConfig+0x280>
 8005c36:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a05      	ldr	r2, [pc, #20]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4b03      	ldr	r3, [pc, #12]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a02      	ldr	r2, [pc, #8]	@ (8005c50 <HAL_RCC_OscConfig+0x270>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e013      	b.n	8005c78 <HAL_RCC_OscConfig+0x298>
 8005c50:	40021000 	.word	0x40021000
 8005c54:	0800f584 	.word	0x0800f584
 8005c58:	2000002c 	.word	0x2000002c
 8005c5c:	20000030 	.word	0x20000030
 8005c60:	4ba0      	ldr	r3, [pc, #640]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a9f      	ldr	r2, [pc, #636]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	4b9d      	ldr	r3, [pc, #628]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a9c      	ldr	r2, [pc, #624]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d013      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c80:	f7fd fcb2 	bl	80035e8 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c88:	f7fd fcae 	bl	80035e8 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b64      	cmp	r3, #100	@ 0x64
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e2ae      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c9a:	4b92      	ldr	r3, [pc, #584]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x2a8>
 8005ca6:	e014      	b.n	8005cd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ca8:	f7fd fc9e 	bl	80035e8 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cb0:	f7fd fc9a 	bl	80035e8 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b64      	cmp	r3, #100	@ 0x64
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e29a      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005cc2:	4b88      	ldr	r3, [pc, #544]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x2d0>
 8005cce:	e000      	b.n	8005cd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d060      	beq.n	8005da0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x310>
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	2b0c      	cmp	r3, #12
 8005ce8:	d119      	bne.n	8005d1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d116      	bne.n	8005d1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cf0:	4b7c      	ldr	r3, [pc, #496]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_OscConfig+0x328>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e277      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d08:	4b76      	ldr	r3, [pc, #472]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	061b      	lsls	r3, r3, #24
 8005d16:	4973      	ldr	r1, [pc, #460]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d1c:	e040      	b.n	8005da0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d023      	beq.n	8005d6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d26:	4b6f      	ldr	r3, [pc, #444]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a6e      	ldr	r2, [pc, #440]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fd fc59 	bl	80035e8 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3a:	f7fd fc55 	bl	80035e8 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e255      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d4c:	4b65      	ldr	r3, [pc, #404]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d58:	4b62      	ldr	r3, [pc, #392]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	061b      	lsls	r3, r3, #24
 8005d66:	495f      	ldr	r1, [pc, #380]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	604b      	str	r3, [r1, #4]
 8005d6c:	e018      	b.n	8005da0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d6e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a5c      	ldr	r2, [pc, #368]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7a:	f7fd fc35 	bl	80035e8 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d82:	f7fd fc31 	bl	80035e8 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e231      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d94:	4b53      	ldr	r3, [pc, #332]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f0      	bne.n	8005d82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0308 	and.w	r3, r3, #8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d03c      	beq.n	8005e26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01c      	beq.n	8005dee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005db4:	4b4b      	ldr	r3, [pc, #300]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dba:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005dbc:	f043 0301 	orr.w	r3, r3, #1
 8005dc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dc4:	f7fd fc10 	bl	80035e8 <HAL_GetTick>
 8005dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dca:	e008      	b.n	8005dde <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dcc:	f7fd fc0c 	bl	80035e8 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d901      	bls.n	8005dde <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e20c      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dde:	4b41      	ldr	r3, [pc, #260]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005de0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0ef      	beq.n	8005dcc <HAL_RCC_OscConfig+0x3ec>
 8005dec:	e01b      	b.n	8005e26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dee:	4b3d      	ldr	r3, [pc, #244]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005df4:	4a3b      	ldr	r2, [pc, #236]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfe:	f7fd fbf3 	bl	80035e8 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e06:	f7fd fbef 	bl	80035e8 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e1ef      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e18:	4b32      	ldr	r3, [pc, #200]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1ef      	bne.n	8005e06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80a6 	beq.w	8005f80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e34:	2300      	movs	r3, #0
 8005e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e38:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10d      	bne.n	8005e60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e44:	4b27      	ldr	r3, [pc, #156]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005e46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e48:	4a26      	ldr	r2, [pc, #152]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005e4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e50:	4b24      	ldr	r3, [pc, #144]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e60:	4b21      	ldr	r3, [pc, #132]	@ (8005ee8 <HAL_RCC_OscConfig+0x508>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d118      	bne.n	8005e9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ee8 <HAL_RCC_OscConfig+0x508>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee8 <HAL_RCC_OscConfig+0x508>)
 8005e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e78:	f7fd fbb6 	bl	80035e8 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e80:	f7fd fbb2 	bl	80035e8 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e1b2      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e92:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <HAL_RCC_OscConfig+0x508>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0f0      	beq.n	8005e80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d108      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x4d8>
 8005ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eac:	4a0d      	ldr	r2, [pc, #52]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005eae:	f043 0301 	orr.w	r3, r3, #1
 8005eb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005eb6:	e029      	b.n	8005f0c <HAL_RCC_OscConfig+0x52c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b05      	cmp	r3, #5
 8005ebe:	d115      	bne.n	8005eec <HAL_RCC_OscConfig+0x50c>
 8005ec0:	4b08      	ldr	r3, [pc, #32]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ec6:	4a07      	ldr	r2, [pc, #28]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005ec8:	f043 0304 	orr.w	r3, r3, #4
 8005ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ed0:	4b04      	ldr	r3, [pc, #16]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed6:	4a03      	ldr	r2, [pc, #12]	@ (8005ee4 <HAL_RCC_OscConfig+0x504>)
 8005ed8:	f043 0301 	orr.w	r3, r3, #1
 8005edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005ee0:	e014      	b.n	8005f0c <HAL_RCC_OscConfig+0x52c>
 8005ee2:	bf00      	nop
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	40007000 	.word	0x40007000
 8005eec:	4b9a      	ldr	r3, [pc, #616]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ef2:	4a99      	ldr	r2, [pc, #612]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005efc:	4b96      	ldr	r3, [pc, #600]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f02:	4a95      	ldr	r2, [pc, #596]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005f04:	f023 0304 	bic.w	r3, r3, #4
 8005f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d016      	beq.n	8005f42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f14:	f7fd fb68 	bl	80035e8 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f1a:	e00a      	b.n	8005f32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1c:	f7fd fb64 	bl	80035e8 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e162      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f32:	4b89      	ldr	r3, [pc, #548]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0ed      	beq.n	8005f1c <HAL_RCC_OscConfig+0x53c>
 8005f40:	e015      	b.n	8005f6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f42:	f7fd fb51 	bl	80035e8 <HAL_GetTick>
 8005f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f48:	e00a      	b.n	8005f60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4a:	f7fd fb4d 	bl	80035e8 <HAL_GetTick>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1ad3      	subs	r3, r2, r3
 8005f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e14b      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f60:	4b7d      	ldr	r3, [pc, #500]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1ed      	bne.n	8005f4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f6e:	7ffb      	ldrb	r3, [r7, #31]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d105      	bne.n	8005f80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f74:	4b78      	ldr	r3, [pc, #480]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f78:	4a77      	ldr	r2, [pc, #476]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005f7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d03c      	beq.n	8006006 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d01c      	beq.n	8005fce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f94:	4b70      	ldr	r3, [pc, #448]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005f9a:	4a6f      	ldr	r2, [pc, #444]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa4:	f7fd fb20 	bl	80035e8 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fac:	f7fd fb1c 	bl	80035e8 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e11c      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fbe:	4b66      	ldr	r3, [pc, #408]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0ef      	beq.n	8005fac <HAL_RCC_OscConfig+0x5cc>
 8005fcc:	e01b      	b.n	8006006 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fce:	4b62      	ldr	r3, [pc, #392]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005fd4:	4a60      	ldr	r2, [pc, #384]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fde:	f7fd fb03 	bl	80035e8 <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fe6:	f7fd faff 	bl	80035e8 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e0ff      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ff8:	4b57      	ldr	r3, [pc, #348]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8005ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1ef      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 80f3 	beq.w	80061f6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006014:	2b02      	cmp	r3, #2
 8006016:	f040 80c9 	bne.w	80061ac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800601a:	4b4f      	ldr	r3, [pc, #316]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f003 0203 	and.w	r2, r3, #3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602a:	429a      	cmp	r2, r3
 800602c:	d12c      	bne.n	8006088 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006038:	3b01      	subs	r3, #1
 800603a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d123      	bne.n	8006088 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800604a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800604c:	429a      	cmp	r2, r3
 800604e:	d11b      	bne.n	8006088 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800605c:	429a      	cmp	r2, r3
 800605e:	d113      	bne.n	8006088 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606a:	085b      	lsrs	r3, r3, #1
 800606c:	3b01      	subs	r3, #1
 800606e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d109      	bne.n	8006088 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	3b01      	subs	r3, #1
 8006082:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006084:	429a      	cmp	r2, r3
 8006086:	d06b      	beq.n	8006160 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	2b0c      	cmp	r3, #12
 800608c:	d062      	beq.n	8006154 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800608e:	4b32      	ldr	r3, [pc, #200]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	e0ac      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800609e:	4b2e      	ldr	r3, [pc, #184]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 80060a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80060aa:	f7fd fa9d 	bl	80035e8 <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b2:	f7fd fa99 	bl	80035e8 <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e099      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060c4:	4b24      	ldr	r3, [pc, #144]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1f0      	bne.n	80060b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060d0:	4b21      	ldr	r3, [pc, #132]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	4b21      	ldr	r3, [pc, #132]	@ (800615c <HAL_RCC_OscConfig+0x77c>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80060e0:	3a01      	subs	r2, #1
 80060e2:	0112      	lsls	r2, r2, #4
 80060e4:	4311      	orrs	r1, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060ea:	0212      	lsls	r2, r2, #8
 80060ec:	4311      	orrs	r1, r2
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060f2:	0852      	lsrs	r2, r2, #1
 80060f4:	3a01      	subs	r2, #1
 80060f6:	0552      	lsls	r2, r2, #21
 80060f8:	4311      	orrs	r1, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80060fe:	0852      	lsrs	r2, r2, #1
 8006100:	3a01      	subs	r2, #1
 8006102:	0652      	lsls	r2, r2, #25
 8006104:	4311      	orrs	r1, r2
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800610a:	06d2      	lsls	r2, r2, #27
 800610c:	430a      	orrs	r2, r1
 800610e:	4912      	ldr	r1, [pc, #72]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8006110:	4313      	orrs	r3, r2
 8006112:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006114:	4b10      	ldr	r3, [pc, #64]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a0f      	ldr	r2, [pc, #60]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 800611a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800611e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006120:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	4a0c      	ldr	r2, [pc, #48]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8006126:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800612a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800612c:	f7fd fa5c 	bl	80035e8 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006134:	f7fd fa58 	bl	80035e8 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e058      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006146:	4b04      	ldr	r3, [pc, #16]	@ (8006158 <HAL_RCC_OscConfig+0x778>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d0f0      	beq.n	8006134 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006152:	e050      	b.n	80061f6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e04f      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
 8006158:	40021000 	.word	0x40021000
 800615c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006160:	4b27      	ldr	r3, [pc, #156]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d144      	bne.n	80061f6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800616c:	4b24      	ldr	r3, [pc, #144]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a23      	ldr	r2, [pc, #140]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 8006172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006176:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006178:	4b21      	ldr	r3, [pc, #132]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4a20      	ldr	r2, [pc, #128]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 800617e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006182:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006184:	f7fd fa30 	bl	80035e8 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618c:	f7fd fa2c 	bl	80035e8 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e02c      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800619e:	4b18      	ldr	r3, [pc, #96]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0x7ac>
 80061aa:	e024      	b.n	80061f6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	2b0c      	cmp	r3, #12
 80061b0:	d01f      	beq.n	80061f2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061b2:	4b13      	ldr	r3, [pc, #76]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a12      	ldr	r2, [pc, #72]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 80061b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061be:	f7fd fa13 	bl	80035e8 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061c6:	f7fd fa0f 	bl	80035e8 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e00f      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061d8:	4b09      	ldr	r3, [pc, #36]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f0      	bne.n	80061c6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80061e4:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	4905      	ldr	r1, [pc, #20]	@ (8006200 <HAL_RCC_OscConfig+0x820>)
 80061ea:	4b06      	ldr	r3, [pc, #24]	@ (8006204 <HAL_RCC_OscConfig+0x824>)
 80061ec:	4013      	ands	r3, r2
 80061ee:	60cb      	str	r3, [r1, #12]
 80061f0:	e001      	b.n	80061f6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40021000 	.word	0x40021000
 8006204:	feeefffc 	.word	0xfeeefffc

08006208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e0e7      	b.n	80063ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800621c:	4b75      	ldr	r3, [pc, #468]	@ (80063f4 <HAL_RCC_ClockConfig+0x1ec>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d910      	bls.n	800624c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622a:	4b72      	ldr	r3, [pc, #456]	@ (80063f4 <HAL_RCC_ClockConfig+0x1ec>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f023 0207 	bic.w	r2, r3, #7
 8006232:	4970      	ldr	r1, [pc, #448]	@ (80063f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	4313      	orrs	r3, r2
 8006238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b6e      	ldr	r3, [pc, #440]	@ (80063f4 <HAL_RCC_ClockConfig+0x1ec>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d001      	beq.n	800624c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0cf      	b.n	80063ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d010      	beq.n	800627a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689a      	ldr	r2, [r3, #8]
 800625c:	4b66      	ldr	r3, [pc, #408]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006264:	429a      	cmp	r2, r3
 8006266:	d908      	bls.n	800627a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006268:	4b63      	ldr	r3, [pc, #396]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	4960      	ldr	r1, [pc, #384]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006276:	4313      	orrs	r3, r2
 8006278:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d04c      	beq.n	8006320 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b03      	cmp	r3, #3
 800628c:	d107      	bne.n	800629e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800628e:	4b5a      	ldr	r3, [pc, #360]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d121      	bne.n	80062de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e0a6      	b.n	80063ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d107      	bne.n	80062b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062a6:	4b54      	ldr	r3, [pc, #336]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d115      	bne.n	80062de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e09a      	b.n	80063ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d107      	bne.n	80062ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80062be:	4b4e      	ldr	r3, [pc, #312]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e08e      	b.n	80063ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062ce:	4b4a      	ldr	r3, [pc, #296]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d101      	bne.n	80062de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e086      	b.n	80063ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062de:	4b46      	ldr	r3, [pc, #280]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f023 0203 	bic.w	r2, r3, #3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	4943      	ldr	r1, [pc, #268]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 80062ec:	4313      	orrs	r3, r2
 80062ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f0:	f7fd f97a 	bl	80035e8 <HAL_GetTick>
 80062f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f6:	e00a      	b.n	800630e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f8:	f7fd f976 	bl	80035e8 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006306:	4293      	cmp	r3, r2
 8006308:	d901      	bls.n	800630e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e06e      	b.n	80063ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630e:	4b3a      	ldr	r3, [pc, #232]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 020c 	and.w	r2, r3, #12
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	429a      	cmp	r2, r3
 800631e:	d1eb      	bne.n	80062f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d010      	beq.n	800634e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	4b31      	ldr	r3, [pc, #196]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006338:	429a      	cmp	r2, r3
 800633a:	d208      	bcs.n	800634e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800633c:	4b2e      	ldr	r3, [pc, #184]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	492b      	ldr	r1, [pc, #172]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 800634a:	4313      	orrs	r3, r2
 800634c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800634e:	4b29      	ldr	r3, [pc, #164]	@ (80063f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d210      	bcs.n	800637e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800635c:	4b25      	ldr	r3, [pc, #148]	@ (80063f4 <HAL_RCC_ClockConfig+0x1ec>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f023 0207 	bic.w	r2, r3, #7
 8006364:	4923      	ldr	r1, [pc, #140]	@ (80063f4 <HAL_RCC_ClockConfig+0x1ec>)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	4313      	orrs	r3, r2
 800636a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800636c:	4b21      	ldr	r3, [pc, #132]	@ (80063f4 <HAL_RCC_ClockConfig+0x1ec>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0307 	and.w	r3, r3, #7
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d001      	beq.n	800637e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e036      	b.n	80063ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0304 	and.w	r3, r3, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d008      	beq.n	800639c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800638a:	4b1b      	ldr	r3, [pc, #108]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	4918      	ldr	r1, [pc, #96]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 8006398:	4313      	orrs	r3, r2
 800639a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063a8:	4b13      	ldr	r3, [pc, #76]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	00db      	lsls	r3, r3, #3
 80063b6:	4910      	ldr	r1, [pc, #64]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063bc:	f000 f824 	bl	8006408 <HAL_RCC_GetSysClockFreq>
 80063c0:	4602      	mov	r2, r0
 80063c2:	4b0d      	ldr	r3, [pc, #52]	@ (80063f8 <HAL_RCC_ClockConfig+0x1f0>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	490b      	ldr	r1, [pc, #44]	@ (80063fc <HAL_RCC_ClockConfig+0x1f4>)
 80063ce:	5ccb      	ldrb	r3, [r1, r3]
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
 80063d8:	4a09      	ldr	r2, [pc, #36]	@ (8006400 <HAL_RCC_ClockConfig+0x1f8>)
 80063da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80063dc:	4b09      	ldr	r3, [pc, #36]	@ (8006404 <HAL_RCC_ClockConfig+0x1fc>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fd f8b1 	bl	8003548 <HAL_InitTick>
 80063e6:	4603      	mov	r3, r0
 80063e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80063ea:	7afb      	ldrb	r3, [r7, #11]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40022000 	.word	0x40022000
 80063f8:	40021000 	.word	0x40021000
 80063fc:	0800f584 	.word	0x0800f584
 8006400:	2000002c 	.word	0x2000002c
 8006404:	20000030 	.word	0x20000030

08006408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006408:	b480      	push	{r7}
 800640a:	b089      	sub	sp, #36	@ 0x24
 800640c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800640e:	2300      	movs	r3, #0
 8006410:	61fb      	str	r3, [r7, #28]
 8006412:	2300      	movs	r3, #0
 8006414:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006416:	4b3e      	ldr	r3, [pc, #248]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x108>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 030c 	and.w	r3, r3, #12
 800641e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006420:	4b3b      	ldr	r3, [pc, #236]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x108>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <HAL_RCC_GetSysClockFreq+0x34>
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	2b0c      	cmp	r3, #12
 8006434:	d121      	bne.n	800647a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d11e      	bne.n	800647a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800643c:	4b34      	ldr	r3, [pc, #208]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x108>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d107      	bne.n	8006458 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006448:	4b31      	ldr	r3, [pc, #196]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x108>)
 800644a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800644e:	0a1b      	lsrs	r3, r3, #8
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	e005      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006458:	4b2d      	ldr	r3, [pc, #180]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x108>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	091b      	lsrs	r3, r3, #4
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006464:	4a2b      	ldr	r2, [pc, #172]	@ (8006514 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800646c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10d      	bne.n	8006490 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006478:	e00a      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b04      	cmp	r3, #4
 800647e:	d102      	bne.n	8006486 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006480:	4b25      	ldr	r3, [pc, #148]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x110>)
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	e004      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d101      	bne.n	8006490 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800648c:	4b23      	ldr	r3, [pc, #140]	@ (800651c <HAL_RCC_GetSysClockFreq+0x114>)
 800648e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b0c      	cmp	r3, #12
 8006494:	d134      	bne.n	8006500 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006496:	4b1e      	ldr	r3, [pc, #120]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x108>)
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d003      	beq.n	80064ae <HAL_RCC_GetSysClockFreq+0xa6>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d003      	beq.n	80064b4 <HAL_RCC_GetSysClockFreq+0xac>
 80064ac:	e005      	b.n	80064ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064ae:	4b1a      	ldr	r3, [pc, #104]	@ (8006518 <HAL_RCC_GetSysClockFreq+0x110>)
 80064b0:	617b      	str	r3, [r7, #20]
      break;
 80064b2:	e005      	b.n	80064c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064b4:	4b19      	ldr	r3, [pc, #100]	@ (800651c <HAL_RCC_GetSysClockFreq+0x114>)
 80064b6:	617b      	str	r3, [r7, #20]
      break;
 80064b8:	e002      	b.n	80064c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	617b      	str	r3, [r7, #20]
      break;
 80064be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064c0:	4b13      	ldr	r3, [pc, #76]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x108>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	3301      	adds	r3, #1
 80064cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80064ce:	4b10      	ldr	r3, [pc, #64]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x108>)
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	0a1b      	lsrs	r3, r3, #8
 80064d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	fb03 f202 	mul.w	r2, r3, r2
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x108>)
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	0e5b      	lsrs	r3, r3, #25
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	3301      	adds	r3, #1
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006500:	69bb      	ldr	r3, [r7, #24]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3724      	adds	r7, #36	@ 0x24
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40021000 	.word	0x40021000
 8006514:	0800f59c 	.word	0x0800f59c
 8006518:	00f42400 	.word	0x00f42400
 800651c:	007a1200 	.word	0x007a1200

08006520 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006524:	4b03      	ldr	r3, [pc, #12]	@ (8006534 <HAL_RCC_GetHCLKFreq+0x14>)
 8006526:	681b      	ldr	r3, [r3, #0]
}
 8006528:	4618      	mov	r0, r3
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	2000002c 	.word	0x2000002c

08006538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800653c:	f7ff fff0 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 8006540:	4602      	mov	r2, r0
 8006542:	4b06      	ldr	r3, [pc, #24]	@ (800655c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	0a1b      	lsrs	r3, r3, #8
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	4904      	ldr	r1, [pc, #16]	@ (8006560 <HAL_RCC_GetPCLK1Freq+0x28>)
 800654e:	5ccb      	ldrb	r3, [r1, r3]
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006558:	4618      	mov	r0, r3
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40021000 	.word	0x40021000
 8006560:	0800f594 	.word	0x0800f594

08006564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006568:	f7ff ffda 	bl	8006520 <HAL_RCC_GetHCLKFreq>
 800656c:	4602      	mov	r2, r0
 800656e:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	0adb      	lsrs	r3, r3, #11
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	4904      	ldr	r1, [pc, #16]	@ (800658c <HAL_RCC_GetPCLK2Freq+0x28>)
 800657a:	5ccb      	ldrb	r3, [r1, r3]
 800657c:	f003 031f 	and.w	r3, r3, #31
 8006580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006584:	4618      	mov	r0, r3
 8006586:	bd80      	pop	{r7, pc}
 8006588:	40021000 	.word	0x40021000
 800658c:	0800f594 	.word	0x0800f594

08006590 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800659c:	4b2a      	ldr	r3, [pc, #168]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800659e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80065a8:	f7ff f9b6 	bl	8005918 <HAL_PWREx_GetVoltageRange>
 80065ac:	6178      	str	r0, [r7, #20]
 80065ae:	e014      	b.n	80065da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065b0:	4b25      	ldr	r3, [pc, #148]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b4:	4a24      	ldr	r2, [pc, #144]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80065bc:	4b22      	ldr	r3, [pc, #136]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065c8:	f7ff f9a6 	bl	8005918 <HAL_PWREx_GetVoltageRange>
 80065cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80065ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065d8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e0:	d10b      	bne.n	80065fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2b80      	cmp	r3, #128	@ 0x80
 80065e6:	d919      	bls.n	800661c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80065ec:	d902      	bls.n	80065f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80065ee:	2302      	movs	r3, #2
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	e013      	b.n	800661c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80065f4:	2301      	movs	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	e010      	b.n	800661c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b80      	cmp	r3, #128	@ 0x80
 80065fe:	d902      	bls.n	8006606 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006600:	2303      	movs	r3, #3
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	e00a      	b.n	800661c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b80      	cmp	r3, #128	@ 0x80
 800660a:	d102      	bne.n	8006612 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800660c:	2302      	movs	r3, #2
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	e004      	b.n	800661c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b70      	cmp	r3, #112	@ 0x70
 8006616:	d101      	bne.n	800661c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006618:	2301      	movs	r3, #1
 800661a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800661c:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f023 0207 	bic.w	r2, r3, #7
 8006624:	4909      	ldr	r1, [pc, #36]	@ (800664c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	4313      	orrs	r3, r2
 800662a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800662c:	4b07      	ldr	r3, [pc, #28]	@ (800664c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	429a      	cmp	r2, r3
 8006638:	d001      	beq.n	800663e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40021000 	.word	0x40021000
 800664c:	40022000 	.word	0x40022000

08006650 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006658:	2300      	movs	r3, #0
 800665a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800665c:	2300      	movs	r3, #0
 800665e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006668:	2b00      	cmp	r3, #0
 800666a:	d031      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006670:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006674:	d01a      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006676:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800667a:	d814      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d009      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006680:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006684:	d10f      	bne.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006686:	4b5d      	ldr	r3, [pc, #372]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	4a5c      	ldr	r2, [pc, #368]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800668c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006690:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006692:	e00c      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f000 f9ce 	bl	8006a3c <RCCEx_PLLSAI1_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066a4:	e003      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	74fb      	strb	r3, [r7, #19]
      break;
 80066aa:	e000      	b.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80066ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ae:	7cfb      	ldrb	r3, [r7, #19]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d10b      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066b4:	4b51      	ldr	r3, [pc, #324]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066c2:	494e      	ldr	r1, [pc, #312]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80066ca:	e001      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066cc:	7cfb      	ldrb	r3, [r7, #19]
 80066ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 809e 	beq.w	800681a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066de:	2300      	movs	r3, #0
 80066e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066e2:	4b46      	ldr	r3, [pc, #280]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80066f2:	2300      	movs	r3, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00d      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f8:	4b40      	ldr	r3, [pc, #256]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066fc:	4a3f      	ldr	r2, [pc, #252]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80066fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006702:	6593      	str	r3, [r2, #88]	@ 0x58
 8006704:	4b3d      	ldr	r3, [pc, #244]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006710:	2301      	movs	r3, #1
 8006712:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006714:	4b3a      	ldr	r3, [pc, #232]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a39      	ldr	r2, [pc, #228]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800671a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800671e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006720:	f7fc ff62 	bl	80035e8 <HAL_GetTick>
 8006724:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006726:	e009      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006728:	f7fc ff5e 	bl	80035e8 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d902      	bls.n	800673c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	74fb      	strb	r3, [r7, #19]
        break;
 800673a:	e005      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800673c:	4b30      	ldr	r3, [pc, #192]	@ (8006800 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0ef      	beq.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006748:	7cfb      	ldrb	r3, [r7, #19]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d15a      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800674e:	4b2b      	ldr	r3, [pc, #172]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006758:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01e      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	429a      	cmp	r2, r3
 8006768:	d019      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800676a:	4b24      	ldr	r3, [pc, #144]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800676c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006774:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006776:	4b21      	ldr	r3, [pc, #132]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677c:	4a1f      	ldr	r2, [pc, #124]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800677e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006786:	4b1d      	ldr	r3, [pc, #116]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800678c:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800678e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006796:	4a19      	ldr	r2, [pc, #100]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d016      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fc ff1e 	bl	80035e8 <HAL_GetTick>
 80067ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067ae:	e00b      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b0:	f7fc ff1a 	bl	80035e8 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067be:	4293      	cmp	r3, r2
 80067c0:	d902      	bls.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	74fb      	strb	r3, [r7, #19]
            break;
 80067c6:	e006      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c8:	4b0c      	ldr	r3, [pc, #48]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0ec      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80067d6:	7cfb      	ldrb	r3, [r7, #19]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d10b      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067dc:	4b07      	ldr	r3, [pc, #28]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ea:	4904      	ldr	r1, [pc, #16]	@ (80067fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80067f2:	e009      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067f4:	7cfb      	ldrb	r3, [r7, #19]
 80067f6:	74bb      	strb	r3, [r7, #18]
 80067f8:	e006      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80067fa:	bf00      	nop
 80067fc:	40021000 	.word	0x40021000
 8006800:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006804:	7cfb      	ldrb	r3, [r7, #19]
 8006806:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006808:	7c7b      	ldrb	r3, [r7, #17]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d105      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800680e:	4b8a      	ldr	r3, [pc, #552]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006812:	4a89      	ldr	r2, [pc, #548]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006814:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006818:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006826:	4b84      	ldr	r3, [pc, #528]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800682c:	f023 0203 	bic.w	r2, r3, #3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	4980      	ldr	r1, [pc, #512]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006836:	4313      	orrs	r3, r2
 8006838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00a      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006848:	4b7b      	ldr	r3, [pc, #492]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684e:	f023 020c 	bic.w	r2, r3, #12
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006856:	4978      	ldr	r1, [pc, #480]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006858:	4313      	orrs	r3, r2
 800685a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800686a:	4b73      	ldr	r3, [pc, #460]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800686c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006870:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006878:	496f      	ldr	r1, [pc, #444]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800687a:	4313      	orrs	r3, r2
 800687c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800688c:	4b6a      	ldr	r3, [pc, #424]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800688e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006892:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800689a:	4967      	ldr	r1, [pc, #412]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800689c:	4313      	orrs	r3, r2
 800689e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80068ae:	4b62      	ldr	r3, [pc, #392]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068bc:	495e      	ldr	r1, [pc, #376]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00a      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068d0:	4b59      	ldr	r3, [pc, #356]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068d6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068de:	4956      	ldr	r1, [pc, #344]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80068f2:	4b51      	ldr	r3, [pc, #324]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80068f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006900:	494d      	ldr	r1, [pc, #308]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006902:	4313      	orrs	r3, r2
 8006904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d028      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006914:	4b48      	ldr	r3, [pc, #288]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800691a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006922:	4945      	ldr	r1, [pc, #276]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006924:	4313      	orrs	r3, r2
 8006926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006932:	d106      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006934:	4b40      	ldr	r3, [pc, #256]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4a3f      	ldr	r2, [pc, #252]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800693a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800693e:	60d3      	str	r3, [r2, #12]
 8006940:	e011      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800694a:	d10c      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	3304      	adds	r3, #4
 8006950:	2101      	movs	r1, #1
 8006952:	4618      	mov	r0, r3
 8006954:	f000 f872 	bl	8006a3c <RCCEx_PLLSAI1_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800695c:	7cfb      	ldrb	r3, [r7, #19]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006962:	7cfb      	ldrb	r3, [r7, #19]
 8006964:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d028      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006972:	4b31      	ldr	r3, [pc, #196]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006978:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006980:	492d      	ldr	r1, [pc, #180]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006990:	d106      	bne.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006992:	4b29      	ldr	r3, [pc, #164]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	4a28      	ldr	r2, [pc, #160]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006998:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800699c:	60d3      	str	r3, [r2, #12]
 800699e:	e011      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069a8:	d10c      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	3304      	adds	r3, #4
 80069ae:	2101      	movs	r1, #1
 80069b0:	4618      	mov	r0, r3
 80069b2:	f000 f843 	bl	8006a3c <RCCEx_PLLSAI1_Config>
 80069b6:	4603      	mov	r3, r0
 80069b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80069ba:	7cfb      	ldrb	r3, [r7, #19]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80069c0:	7cfb      	ldrb	r3, [r7, #19]
 80069c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01c      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80069d0:	4b19      	ldr	r3, [pc, #100]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069de:	4916      	ldr	r1, [pc, #88]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069ee:	d10c      	bne.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3304      	adds	r3, #4
 80069f4:	2102      	movs	r1, #2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 f820 	bl	8006a3c <RCCEx_PLLSAI1_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a00:	7cfb      	ldrb	r3, [r7, #19]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006a06:	7cfb      	ldrb	r3, [r7, #19]
 8006a08:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006a16:	4b08      	ldr	r3, [pc, #32]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a24:	4904      	ldr	r1, [pc, #16]	@ (8006a38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006a2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	40021000 	.word	0x40021000

08006a3c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006a4a:	4b74      	ldr	r3, [pc, #464]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d018      	beq.n	8006a88 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006a56:	4b71      	ldr	r3, [pc, #452]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	f003 0203 	and.w	r2, r3, #3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d10d      	bne.n	8006a82 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
       ||
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006a6e:	4b6b      	ldr	r3, [pc, #428]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	091b      	lsrs	r3, r3, #4
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
       ||
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d047      	beq.n	8006b12 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	73fb      	strb	r3, [r7, #15]
 8006a86:	e044      	b.n	8006b12 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2b03      	cmp	r3, #3
 8006a8e:	d018      	beq.n	8006ac2 <RCCEx_PLLSAI1_Config+0x86>
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d825      	bhi.n	8006ae0 <RCCEx_PLLSAI1_Config+0xa4>
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d002      	beq.n	8006a9e <RCCEx_PLLSAI1_Config+0x62>
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d009      	beq.n	8006ab0 <RCCEx_PLLSAI1_Config+0x74>
 8006a9c:	e020      	b.n	8006ae0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d11d      	bne.n	8006ae6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006aae:	e01a      	b.n	8006ae6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ab0:	4b5a      	ldr	r3, [pc, #360]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d116      	bne.n	8006aea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ac0:	e013      	b.n	8006aea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ac2:	4b56      	ldr	r3, [pc, #344]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10f      	bne.n	8006aee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ace:	4b53      	ldr	r3, [pc, #332]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006ade:	e006      	b.n	8006aee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8006ae4:	e004      	b.n	8006af0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e002      	b.n	8006af0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aea:	bf00      	nop
 8006aec:	e000      	b.n	8006af0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006aee:	bf00      	nop
    }

    if(status == HAL_OK)
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10d      	bne.n	8006b12 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006af6:	4b49      	ldr	r3, [pc, #292]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6819      	ldr	r1, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	430b      	orrs	r3, r1
 8006b0c:	4943      	ldr	r1, [pc, #268]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006b12:	7bfb      	ldrb	r3, [r7, #15]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d17c      	bne.n	8006c12 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006b18:	4b40      	ldr	r3, [pc, #256]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b24:	f7fc fd60 	bl	80035e8 <HAL_GetTick>
 8006b28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b2a:	e009      	b.n	8006b40 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b2c:	f7fc fd5c 	bl	80035e8 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d902      	bls.n	8006b40 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	73fb      	strb	r3, [r7, #15]
        break;
 8006b3e:	e005      	b.n	8006b4c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006b40:	4b36      	ldr	r3, [pc, #216]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1ef      	bne.n	8006b2c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d15f      	bne.n	8006c12 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d110      	bne.n	8006b7a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b58:	4b30      	ldr	r3, [pc, #192]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006b60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6892      	ldr	r2, [r2, #8]
 8006b68:	0211      	lsls	r1, r2, #8
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	68d2      	ldr	r2, [r2, #12]
 8006b6e:	06d2      	lsls	r2, r2, #27
 8006b70:	430a      	orrs	r2, r1
 8006b72:	492a      	ldr	r1, [pc, #168]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	610b      	str	r3, [r1, #16]
 8006b78:	e027      	b.n	8006bca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d112      	bne.n	8006ba6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b80:	4b26      	ldr	r3, [pc, #152]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006b88:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6892      	ldr	r2, [r2, #8]
 8006b90:	0211      	lsls	r1, r2, #8
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	6912      	ldr	r2, [r2, #16]
 8006b96:	0852      	lsrs	r2, r2, #1
 8006b98:	3a01      	subs	r2, #1
 8006b9a:	0552      	lsls	r2, r2, #21
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	491f      	ldr	r1, [pc, #124]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	610b      	str	r3, [r1, #16]
 8006ba4:	e011      	b.n	8006bca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006bae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6892      	ldr	r2, [r2, #8]
 8006bb6:	0211      	lsls	r1, r2, #8
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6952      	ldr	r2, [r2, #20]
 8006bbc:	0852      	lsrs	r2, r2, #1
 8006bbe:	3a01      	subs	r2, #1
 8006bc0:	0652      	lsls	r2, r2, #25
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	4915      	ldr	r1, [pc, #84]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006bca:	4b14      	ldr	r3, [pc, #80]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a13      	ldr	r2, [pc, #76]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bd4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd6:	f7fc fd07 	bl	80035e8 <HAL_GetTick>
 8006bda:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bdc:	e009      	b.n	8006bf2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bde:	f7fc fd03 	bl	80035e8 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d902      	bls.n	8006bf2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	73fb      	strb	r3, [r7, #15]
          break;
 8006bf0:	e005      	b.n	8006bfe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0ef      	beq.n	8006bde <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d106      	bne.n	8006c12 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006c04:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c06:	691a      	ldr	r2, [r3, #16]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	4903      	ldr	r1, [pc, #12]	@ (8006c1c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3710      	adds	r7, #16
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40021000 	.word	0x40021000

08006c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e095      	b.n	8006d5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d108      	bne.n	8006c4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c42:	d009      	beq.n	8006c58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	61da      	str	r2, [r3, #28]
 8006c4a:	e005      	b.n	8006c58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d106      	bne.n	8006c78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fc fa20 	bl	80030b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006c98:	d902      	bls.n	8006ca0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	e002      	b.n	8006ca6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ca4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006cae:	d007      	beq.n	8006cc0 <HAL_SPI_Init+0xa0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006cb8:	d002      	beq.n	8006cc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d02:	ea42 0103 	orr.w	r1, r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	0c1b      	lsrs	r3, r3, #16
 8006d1c:	f003 0204 	and.w	r2, r3, #4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d2e:	f003 0308 	and.w	r3, r3, #8
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006d3c:	ea42 0103 	orr.w	r1, r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b088      	sub	sp, #32
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	60f8      	str	r0, [r7, #12]
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	603b      	str	r3, [r7, #0]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_SPI_Transmit+0x22>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e15f      	b.n	8007048 <HAL_SPI_Transmit+0x2e2>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d90:	f7fc fc2a 	bl	80035e8 <HAL_GetTick>
 8006d94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d96:	88fb      	ldrh	r3, [r7, #6]
 8006d98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d002      	beq.n	8006dac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006da6:	2302      	movs	r3, #2
 8006da8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006daa:	e148      	b.n	800703e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_SPI_Transmit+0x52>
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dbc:	e13f      	b.n	800703e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	88fa      	ldrh	r2, [r7, #6]
 8006dd6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	88fa      	ldrh	r2, [r7, #6]
 8006ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e08:	d10f      	bne.n	8006e2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e34:	2b40      	cmp	r3, #64	@ 0x40
 8006e36:	d007      	beq.n	8006e48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006e50:	d94f      	bls.n	8006ef2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_SPI_Transmit+0xfa>
 8006e5a:	8afb      	ldrh	r3, [r7, #22]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d142      	bne.n	8006ee6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e64:	881a      	ldrh	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e70:	1c9a      	adds	r2, r3, #2
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e84:	e02f      	b.n	8006ee6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d112      	bne.n	8006eba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e98:	881a      	ldrh	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea4:	1c9a      	adds	r2, r3, #2
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006eb8:	e015      	b.n	8006ee6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eba:	f7fc fb95 	bl	80035e8 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d803      	bhi.n	8006ed2 <HAL_SPI_Transmit+0x16c>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d102      	bne.n	8006ed8 <HAL_SPI_Transmit+0x172>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006ee4:	e0ab      	b.n	800703e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1ca      	bne.n	8006e86 <HAL_SPI_Transmit+0x120>
 8006ef0:	e080      	b.n	8006ff4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_SPI_Transmit+0x19a>
 8006efa:	8afb      	ldrh	r3, [r7, #22]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d174      	bne.n	8006fea <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d912      	bls.n	8006f30 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1a:	1c9a      	adds	r2, r3, #2
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b02      	subs	r3, #2
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f2e:	e05c      	b.n	8006fea <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	330c      	adds	r3, #12
 8006f3a:	7812      	ldrb	r2, [r2, #0]
 8006f3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006f56:	e048      	b.n	8006fea <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d12b      	bne.n	8006fbe <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d912      	bls.n	8006f96 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f80:	1c9a      	adds	r2, r3, #2
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	3b02      	subs	r3, #2
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f94:	e029      	b.n	8006fea <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	330c      	adds	r3, #12
 8006fa0:	7812      	ldrb	r2, [r2, #0]
 8006fa2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	b29a      	uxth	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006fbc:	e015      	b.n	8006fea <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fbe:	f7fc fb13 	bl	80035e8 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d803      	bhi.n	8006fd6 <HAL_SPI_Transmit+0x270>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d102      	bne.n	8006fdc <HAL_SPI_Transmit+0x276>
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d106      	bne.n	8006fea <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006fe8:	e029      	b.n	800703e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1b1      	bne.n	8006f58 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fe89 	bl	8007d10 <SPI_EndRxTxTransaction>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007012:	2300      	movs	r3, #0
 8007014:	613b      	str	r3, [r7, #16]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	613b      	str	r3, [r7, #16]
 8007026:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800702c:	2b00      	cmp	r3, #0
 800702e:	d002      	beq.n	8007036 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	77fb      	strb	r3, [r7, #31]
 8007034:	e003      	b.n	800703e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007046:	7ffb      	ldrb	r3, [r7, #31]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3720      	adds	r7, #32
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af02      	add	r7, sp, #8
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	4613      	mov	r3, r2
 800705e:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d002      	beq.n	8007076 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007070:	2302      	movs	r3, #2
 8007072:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007074:	e11a      	b.n	80072ac <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800707e:	d112      	bne.n	80070a6 <HAL_SPI_Receive+0x56>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10e      	bne.n	80070a6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2204      	movs	r2, #4
 800708c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007090:	88fa      	ldrh	r2, [r7, #6]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	68b9      	ldr	r1, [r7, #8]
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f90e 	bl	80072be <HAL_SPI_TransmitReceive>
 80070a2:	4603      	mov	r3, r0
 80070a4:	e107      	b.n	80072b6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d101      	bne.n	80070b4 <HAL_SPI_Receive+0x64>
 80070b0:	2302      	movs	r3, #2
 80070b2:	e100      	b.n	80072b6 <HAL_SPI_Receive+0x266>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070bc:	f7fc fa94 	bl	80035e8 <HAL_GetTick>
 80070c0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <HAL_SPI_Receive+0x7e>
 80070c8:	88fb      	ldrh	r3, [r7, #6]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80070d2:	e0eb      	b.n	80072ac <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2204      	movs	r2, #4
 80070d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2200      	movs	r2, #0
 80070fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800711e:	d908      	bls.n	8007132 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800712e:	605a      	str	r2, [r3, #4]
 8007130:	e007      	b.n	8007142 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007140:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800714a:	d10f      	bne.n	800716c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800715a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800716a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007176:	2b40      	cmp	r3, #64	@ 0x40
 8007178:	d007      	beq.n	800718a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007188:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007192:	d86f      	bhi.n	8007274 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007194:	e034      	b.n	8007200 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d117      	bne.n	80071d4 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f103 020c 	add.w	r2, r3, #12
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b0:	7812      	ldrb	r2, [r2, #0]
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	3b01      	subs	r3, #1
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80071d2:	e015      	b.n	8007200 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d4:	f7fc fa08 	bl	80035e8 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d803      	bhi.n	80071ec <HAL_SPI_Receive+0x19c>
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d102      	bne.n	80071f2 <HAL_SPI_Receive+0x1a2>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d106      	bne.n	8007200 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80071fe:	e055      	b.n	80072ac <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1c4      	bne.n	8007196 <HAL_SPI_Receive+0x146>
 800720c:	e038      	b.n	8007280 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b01      	cmp	r3, #1
 800721a:	d115      	bne.n	8007248 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68da      	ldr	r2, [r3, #12]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007226:	b292      	uxth	r2, r2
 8007228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722e:	1c9a      	adds	r2, r3, #2
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8007246:	e015      	b.n	8007274 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007248:	f7fc f9ce 	bl	80035e8 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d803      	bhi.n	8007260 <HAL_SPI_Receive+0x210>
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725e:	d102      	bne.n	8007266 <HAL_SPI_Receive+0x216>
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d106      	bne.n	8007274 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007272:	e01b      	b.n	80072ac <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800727a:	b29b      	uxth	r3, r3
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1c6      	bne.n	800720e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 fceb 	bl	8007c60 <SPI_EndRxTransaction>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d002      	beq.n	8007296 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2220      	movs	r2, #32
 8007294:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	75fb      	strb	r3, [r7, #23]
 80072a2:	e003      	b.n	80072ac <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80072b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b08a      	sub	sp, #40	@ 0x28
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072cc:	2301      	movs	r3, #1
 80072ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072d0:	2300      	movs	r3, #0
 80072d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d101      	bne.n	80072e4 <HAL_SPI_TransmitReceive+0x26>
 80072e0:	2302      	movs	r3, #2
 80072e2:	e20a      	b.n	80076fa <HAL_SPI_TransmitReceive+0x43c>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072ec:	f7fc f97c 	bl	80035e8 <HAL_GetTick>
 80072f0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80072f8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007300:	887b      	ldrh	r3, [r7, #2]
 8007302:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007304:	887b      	ldrh	r3, [r7, #2]
 8007306:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007308:	7efb      	ldrb	r3, [r7, #27]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d00e      	beq.n	800732c <HAL_SPI_TransmitReceive+0x6e>
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007314:	d106      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d102      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x66>
 800731e:	7efb      	ldrb	r3, [r7, #27]
 8007320:	2b04      	cmp	r3, #4
 8007322:	d003      	beq.n	800732c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007324:	2302      	movs	r3, #2
 8007326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800732a:	e1e0      	b.n	80076ee <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d005      	beq.n	800733e <HAL_SPI_TransmitReceive+0x80>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <HAL_SPI_TransmitReceive+0x80>
 8007338:	887b      	ldrh	r3, [r7, #2]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d103      	bne.n	8007346 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007344:	e1d3      	b.n	80076ee <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b04      	cmp	r3, #4
 8007350:	d003      	beq.n	800735a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2205      	movs	r2, #5
 8007356:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	887a      	ldrh	r2, [r7, #2]
 800736a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	887a      	ldrh	r2, [r7, #2]
 8007372:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	887a      	ldrh	r2, [r7, #2]
 8007380:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	887a      	ldrh	r2, [r7, #2]
 8007386:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800739c:	d802      	bhi.n	80073a4 <HAL_SPI_TransmitReceive+0xe6>
 800739e:	8a3b      	ldrh	r3, [r7, #16]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d908      	bls.n	80073b6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80073b2:	605a      	str	r2, [r3, #4]
 80073b4:	e007      	b.n	80073c6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80073c4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d0:	2b40      	cmp	r3, #64	@ 0x40
 80073d2:	d007      	beq.n	80073e4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073ec:	f240 8081 	bls.w	80074f2 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_SPI_TransmitReceive+0x140>
 80073f8:	8a7b      	ldrh	r3, [r7, #18]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d16d      	bne.n	80074da <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007402:	881a      	ldrh	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740e:	1c9a      	adds	r2, r3, #2
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007422:	e05a      	b.n	80074da <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b02      	cmp	r3, #2
 8007430:	d11b      	bne.n	800746a <HAL_SPI_TransmitReceive+0x1ac>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d016      	beq.n	800746a <HAL_SPI_TransmitReceive+0x1ac>
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	2b01      	cmp	r3, #1
 8007440:	d113      	bne.n	800746a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007446:	881a      	ldrh	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007452:	1c9a      	adds	r2, r3, #2
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800745c:	b29b      	uxth	r3, r3
 800745e:	3b01      	subs	r3, #1
 8007460:	b29a      	uxth	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b01      	cmp	r3, #1
 8007476:	d11c      	bne.n	80074b2 <HAL_SPI_TransmitReceive+0x1f4>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800747e:	b29b      	uxth	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d016      	beq.n	80074b2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748e:	b292      	uxth	r2, r2
 8007490:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	1c9a      	adds	r2, r3, #2
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074ae:	2301      	movs	r3, #1
 80074b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074b2:	f7fc f899 	bl	80035e8 <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074be:	429a      	cmp	r2, r3
 80074c0:	d80b      	bhi.n	80074da <HAL_SPI_TransmitReceive+0x21c>
 80074c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c8:	d007      	beq.n	80074da <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80074d8:	e109      	b.n	80076ee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d19f      	bne.n	8007424 <HAL_SPI_TransmitReceive+0x166>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d199      	bne.n	8007424 <HAL_SPI_TransmitReceive+0x166>
 80074f0:	e0e3      	b.n	80076ba <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d003      	beq.n	8007502 <HAL_SPI_TransmitReceive+0x244>
 80074fa:	8a7b      	ldrh	r3, [r7, #18]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	f040 80cf 	bne.w	80076a0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007506:	b29b      	uxth	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d912      	bls.n	8007532 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007510:	881a      	ldrh	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	1c9a      	adds	r2, r3, #2
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b02      	subs	r3, #2
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007530:	e0b6      	b.n	80076a0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	330c      	adds	r3, #12
 800753c:	7812      	ldrb	r2, [r2, #0]
 800753e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007544:	1c5a      	adds	r2, r3, #1
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800754e:	b29b      	uxth	r3, r3
 8007550:	3b01      	subs	r3, #1
 8007552:	b29a      	uxth	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007558:	e0a2      	b.n	80076a0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 0302 	and.w	r3, r3, #2
 8007564:	2b02      	cmp	r3, #2
 8007566:	d134      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x314>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d02f      	beq.n	80075d2 <HAL_SPI_TransmitReceive+0x314>
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	2b01      	cmp	r3, #1
 8007576:	d12c      	bne.n	80075d2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b01      	cmp	r3, #1
 8007580:	d912      	bls.n	80075a8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	881a      	ldrh	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007592:	1c9a      	adds	r2, r3, #2
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800759c:	b29b      	uxth	r3, r3
 800759e:	3b02      	subs	r3, #2
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075a6:	e012      	b.n	80075ce <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	330c      	adds	r3, #12
 80075b2:	7812      	ldrb	r2, [r2, #0]
 80075b4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ba:	1c5a      	adds	r2, r3, #1
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d148      	bne.n	8007672 <HAL_SPI_TransmitReceive+0x3b4>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d042      	beq.n	8007672 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d923      	bls.n	8007640 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007602:	b292      	uxth	r2, r2
 8007604:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800760a:	1c9a      	adds	r2, r3, #2
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b02      	subs	r3, #2
 800761a:	b29a      	uxth	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b01      	cmp	r3, #1
 800762c:	d81f      	bhi.n	800766e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	e016      	b.n	800766e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f103 020c 	add.w	r2, r3, #12
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800764c:	7812      	ldrb	r2, [r2, #0]
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800766e:	2301      	movs	r3, #1
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007672:	f7fb ffb9 	bl	80035e8 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800767e:	429a      	cmp	r2, r3
 8007680:	d803      	bhi.n	800768a <HAL_SPI_TransmitReceive+0x3cc>
 8007682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007688:	d102      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x3d2>
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	2b00      	cmp	r3, #0
 800768e:	d107      	bne.n	80076a0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2201      	movs	r2, #1
 800769a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800769e:	e026      	b.n	80076ee <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f47f af57 	bne.w	800755a <HAL_SPI_TransmitReceive+0x29c>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f47f af50 	bne.w	800755a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fb26 	bl	8007d10 <SPI_EndRxTxTransaction>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80076e4:	e003      	b.n	80076ee <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80076f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3728      	adds	r7, #40	@ 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	4613      	mov	r3, r2
 8007710:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_SPI_Transmit_DMA+0x20>
 8007720:	2302      	movs	r3, #2
 8007722:	e0d4      	b.n	80078ce <HAL_SPI_Transmit_DMA+0x1ca>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b01      	cmp	r3, #1
 8007736:	d002      	beq.n	800773e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8007738:	2302      	movs	r3, #2
 800773a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800773c:	e0c2      	b.n	80078c4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <HAL_SPI_Transmit_DMA+0x46>
 8007744:	88fb      	ldrh	r3, [r7, #6]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d102      	bne.n	8007750 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800774e:	e0b9      	b.n	80078c4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2203      	movs	r2, #3
 8007754:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	88fa      	ldrh	r2, [r7, #6]
 8007768:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	88fa      	ldrh	r2, [r7, #6]
 800776e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2200      	movs	r2, #0
 8007786:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800779a:	d10f      	bne.n	80077bc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c0:	4a45      	ldr	r2, [pc, #276]	@ (80078d8 <HAL_SPI_Transmit_DMA+0x1d4>)
 80077c2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077c8:	4a44      	ldr	r2, [pc, #272]	@ (80078dc <HAL_SPI_Transmit_DMA+0x1d8>)
 80077ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d0:	4a43      	ldr	r2, [pc, #268]	@ (80078e0 <HAL_SPI_Transmit_DMA+0x1dc>)
 80077d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d8:	2200      	movs	r2, #0
 80077da:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80077ea:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077f4:	d82d      	bhi.n	8007852 <HAL_SPI_Transmit_DMA+0x14e>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007800:	d127      	bne.n	8007852 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007806:	b29b      	uxth	r3, r3
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10f      	bne.n	8007830 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800781e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007824:	b29b      	uxth	r3, r3
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800782e:	e010      	b.n	8007852 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800783e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007844:	b29b      	uxth	r3, r3
 8007846:	085b      	lsrs	r3, r3, #1
 8007848:	b29b      	uxth	r3, r3
 800784a:	3301      	adds	r3, #1
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800785a:	4619      	mov	r1, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330c      	adds	r3, #12
 8007862:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007868:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800786a:	f7fd f84c 	bl	8004906 <HAL_DMA_Start_IT>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d008      	beq.n	8007886 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007878:	f043 0210 	orr.w	r2, r3, #16
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	75fb      	strb	r3, [r7, #23]

    goto error;
 8007884:	e01e      	b.n	80078c4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007890:	2b40      	cmp	r3, #64	@ 0x40
 8007892:	d007      	beq.n	80078a4 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078a2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0220 	orr.w	r2, r2, #32
 80078b2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0202 	orr.w	r2, r2, #2
 80078c2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3718      	adds	r7, #24
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	080079c7 	.word	0x080079c7
 80078dc:	08007921 	.word	0x08007921
 80078e0:	080079e3 	.word	0x080079e3

080078e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800792e:	f7fb fe5b 	bl	80035e8 <HAL_GetTick>
 8007932:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b20      	cmp	r3, #32
 8007940:	d03b      	beq.n	80079ba <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f022 0220 	bic.w	r2, r2, #32
 8007950:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	685a      	ldr	r2, [r3, #4]
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f022 0202 	bic.w	r2, r2, #2
 8007960:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007962:	693a      	ldr	r2, [r7, #16]
 8007964:	2164      	movs	r1, #100	@ 0x64
 8007966:	6978      	ldr	r0, [r7, #20]
 8007968:	f000 f9d2 	bl	8007d10 <SPI_EndRxTxTransaction>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007976:	f043 0220 	orr.w	r2, r3, #32
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10a      	bne.n	800799c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	2200      	movs	r2, #0
 80079a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80079b2:	6978      	ldr	r0, [r7, #20]
 80079b4:	f7ff ffaa 	bl	800790c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80079b8:	e002      	b.n	80079c0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80079ba:	6978      	ldr	r0, [r7, #20]
 80079bc:	f7ff ff92 	bl	80078e4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f7ff ff8f 	bl	80078f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079da:	bf00      	nop
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b084      	sub	sp, #16
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ee:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0203 	bic.w	r2, r2, #3
 80079fe:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a04:	f043 0210 	orr.w	r2, r3, #16
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f7ff ff79 	bl	800790c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	603b      	str	r3, [r7, #0]
 8007a30:	4613      	mov	r3, r2
 8007a32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a34:	f7fb fdd8 	bl	80035e8 <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3c:	1a9b      	subs	r3, r3, r2
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4413      	add	r3, r2
 8007a42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a44:	f7fb fdd0 	bl	80035e8 <HAL_GetTick>
 8007a48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007a4a:	4b39      	ldr	r3, [pc, #228]	@ (8007b30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	015b      	lsls	r3, r3, #5
 8007a50:	0d1b      	lsrs	r3, r3, #20
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	fb02 f303 	mul.w	r3, r2, r3
 8007a58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a5a:	e054      	b.n	8007b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a62:	d050      	beq.n	8007b06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a64:	f7fb fdc0 	bl	80035e8 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d902      	bls.n	8007a7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d13d      	bne.n	8007af6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a92:	d111      	bne.n	8007ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a9c:	d004      	beq.n	8007aa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	689b      	ldr	r3, [r3, #8]
 8007aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa6:	d107      	bne.n	8007ab8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ab6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ac0:	d10f      	bne.n	8007ae2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ae0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e017      	b.n	8007b26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4013      	ands	r3, r2
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	bf0c      	ite	eq
 8007b16:	2301      	moveq	r3, #1
 8007b18:	2300      	movne	r3, #0
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	79fb      	ldrb	r3, [r7, #7]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d19b      	bne.n	8007a5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	2000002c 	.word	0x2000002c

08007b34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08a      	sub	sp, #40	@ 0x28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007b46:	f7fb fd4f 	bl	80035e8 <HAL_GetTick>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4e:	1a9b      	subs	r3, r3, r2
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	4413      	add	r3, r2
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007b56:	f7fb fd47 	bl	80035e8 <HAL_GetTick>
 8007b5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	330c      	adds	r3, #12
 8007b62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007b64:	4b3d      	ldr	r3, [pc, #244]	@ (8007c5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4413      	add	r3, r2
 8007b6e:	00da      	lsls	r2, r3, #3
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	0d1b      	lsrs	r3, r3, #20
 8007b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b76:	fb02 f303 	mul.w	r3, r2, r3
 8007b7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007b7c:	e060      	b.n	8007c40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007b84:	d107      	bne.n	8007b96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007b94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9c:	d050      	beq.n	8007c40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007b9e:	f7fb fd23 	bl	80035e8 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d902      	bls.n	8007bb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d13d      	bne.n	8007c30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685a      	ldr	r2, [r3, #4]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007bc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bcc:	d111      	bne.n	8007bf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd6:	d004      	beq.n	8007be2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007be0:	d107      	bne.n	8007bf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007bfa:	d10f      	bne.n	8007c1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e010      	b.n	8007c52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007c36:	2300      	movs	r3, #0
 8007c38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	4013      	ands	r3, r2
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d196      	bne.n	8007b7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3728      	adds	r7, #40	@ 0x28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	2000002c 	.word	0x2000002c

08007c60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007c74:	d111      	bne.n	8007c9a <SPI_EndRxTransaction+0x3a>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c7e:	d004      	beq.n	8007c8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c88:	d107      	bne.n	8007c9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c98:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2180      	movs	r1, #128	@ 0x80
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f7ff febd 	bl	8007a24 <SPI_WaitFlagStateUntilTimeout>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d007      	beq.n	8007cc0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cb4:	f043 0220 	orr.w	r2, r3, #32
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e023      	b.n	8007d08 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cc8:	d11d      	bne.n	8007d06 <SPI_EndRxTransaction+0xa6>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd2:	d004      	beq.n	8007cde <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cdc:	d113      	bne.n	8007d06 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f7ff ff22 	bl	8007b34 <SPI_WaitFifoStateUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cfa:	f043 0220 	orr.w	r2, r3, #32
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e000      	b.n	8007d08 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007d06:	2300      	movs	r3, #0
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b086      	sub	sp, #24
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f7ff ff03 	bl	8007b34 <SPI_WaitFifoStateUntilTimeout>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d007      	beq.n	8007d44 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d38:	f043 0220 	orr.w	r2, r3, #32
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e027      	b.n	8007d94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	2180      	movs	r1, #128	@ 0x80
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7ff fe68 	bl	8007a24 <SPI_WaitFlagStateUntilTimeout>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d5e:	f043 0220 	orr.w	r2, r3, #32
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e014      	b.n	8007d94 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7ff fedc 	bl	8007b34 <SPI_WaitFifoStateUntilTimeout>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d86:	f043 0220 	orr.w	r2, r3, #32
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e000      	b.n	8007d94 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d101      	bne.n	8007dae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e049      	b.n	8007e42 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d106      	bne.n	8007dc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7fb f9dc 	bl	8003180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3304      	adds	r3, #4
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4610      	mov	r0, r2
 8007ddc:	f000 fbfe 	bl	80085dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
	...

08007e4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d001      	beq.n	8007e64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e03b      	b.n	8007edc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68da      	ldr	r2, [r3, #12]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f042 0201 	orr.w	r2, r2, #1
 8007e7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a19      	ldr	r2, [pc, #100]	@ (8007ee8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d009      	beq.n	8007e9a <HAL_TIM_Base_Start_IT+0x4e>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e8e:	d004      	beq.n	8007e9a <HAL_TIM_Base_Start_IT+0x4e>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a15      	ldr	r2, [pc, #84]	@ (8007eec <HAL_TIM_Base_Start_IT+0xa0>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d115      	bne.n	8007ec6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689a      	ldr	r2, [r3, #8]
 8007ea0:	4b13      	ldr	r3, [pc, #76]	@ (8007ef0 <HAL_TIM_Base_Start_IT+0xa4>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b06      	cmp	r3, #6
 8007eaa:	d015      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x8c>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eb2:	d011      	beq.n	8007ed8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec4:	e008      	b.n	8007ed8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f042 0201 	orr.w	r2, r2, #1
 8007ed4:	601a      	str	r2, [r3, #0]
 8007ed6:	e000      	b.n	8007eda <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ed8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3714      	adds	r7, #20
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	40012c00 	.word	0x40012c00
 8007eec:	40014000 	.word	0x40014000
 8007ef0:	00010007 	.word	0x00010007

08007ef4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e049      	b.n	8007f9a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d106      	bne.n	8007f20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7fb f910 	bl	8003140 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	4610      	mov	r0, r2
 8007f34:	f000 fb52 	bl	80085dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f98:	2300      	movs	r3, #0
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d109      	bne.n	8007fc8 <HAL_TIM_PWM_Start+0x24>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	bf14      	ite	ne
 8007fc0:	2301      	movne	r3, #1
 8007fc2:	2300      	moveq	r3, #0
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	e03c      	b.n	8008042 <HAL_TIM_PWM_Start+0x9e>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	2b04      	cmp	r3, #4
 8007fcc:	d109      	bne.n	8007fe2 <HAL_TIM_PWM_Start+0x3e>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	bf14      	ite	ne
 8007fda:	2301      	movne	r3, #1
 8007fdc:	2300      	moveq	r3, #0
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	e02f      	b.n	8008042 <HAL_TIM_PWM_Start+0x9e>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b08      	cmp	r3, #8
 8007fe6:	d109      	bne.n	8007ffc <HAL_TIM_PWM_Start+0x58>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	bf14      	ite	ne
 8007ff4:	2301      	movne	r3, #1
 8007ff6:	2300      	moveq	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	e022      	b.n	8008042 <HAL_TIM_PWM_Start+0x9e>
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	2b0c      	cmp	r3, #12
 8008000:	d109      	bne.n	8008016 <HAL_TIM_PWM_Start+0x72>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b01      	cmp	r3, #1
 800800c:	bf14      	ite	ne
 800800e:	2301      	movne	r3, #1
 8008010:	2300      	moveq	r3, #0
 8008012:	b2db      	uxtb	r3, r3
 8008014:	e015      	b.n	8008042 <HAL_TIM_PWM_Start+0x9e>
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b10      	cmp	r3, #16
 800801a:	d109      	bne.n	8008030 <HAL_TIM_PWM_Start+0x8c>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b01      	cmp	r3, #1
 8008026:	bf14      	ite	ne
 8008028:	2301      	movne	r3, #1
 800802a:	2300      	moveq	r3, #0
 800802c:	b2db      	uxtb	r3, r3
 800802e:	e008      	b.n	8008042 <HAL_TIM_PWM_Start+0x9e>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b01      	cmp	r3, #1
 800803a:	bf14      	ite	ne
 800803c:	2301      	movne	r3, #1
 800803e:	2300      	moveq	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e07e      	b.n	8008148 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <HAL_TIM_PWM_Start+0xb6>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008058:	e023      	b.n	80080a2 <HAL_TIM_PWM_Start+0xfe>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b04      	cmp	r3, #4
 800805e:	d104      	bne.n	800806a <HAL_TIM_PWM_Start+0xc6>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008068:	e01b      	b.n	80080a2 <HAL_TIM_PWM_Start+0xfe>
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	2b08      	cmp	r3, #8
 800806e:	d104      	bne.n	800807a <HAL_TIM_PWM_Start+0xd6>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008078:	e013      	b.n	80080a2 <HAL_TIM_PWM_Start+0xfe>
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	2b0c      	cmp	r3, #12
 800807e:	d104      	bne.n	800808a <HAL_TIM_PWM_Start+0xe6>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2202      	movs	r2, #2
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008088:	e00b      	b.n	80080a2 <HAL_TIM_PWM_Start+0xfe>
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	2b10      	cmp	r3, #16
 800808e:	d104      	bne.n	800809a <HAL_TIM_PWM_Start+0xf6>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008098:	e003      	b.n	80080a2 <HAL_TIM_PWM_Start+0xfe>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2202      	movs	r2, #2
 800809e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2201      	movs	r2, #1
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 fd78 	bl	8008ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a26      	ldr	r2, [pc, #152]	@ (8008150 <HAL_TIM_PWM_Start+0x1ac>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d009      	beq.n	80080ce <HAL_TIM_PWM_Start+0x12a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a25      	ldr	r2, [pc, #148]	@ (8008154 <HAL_TIM_PWM_Start+0x1b0>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d004      	beq.n	80080ce <HAL_TIM_PWM_Start+0x12a>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a23      	ldr	r2, [pc, #140]	@ (8008158 <HAL_TIM_PWM_Start+0x1b4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d101      	bne.n	80080d2 <HAL_TIM_PWM_Start+0x12e>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e000      	b.n	80080d4 <HAL_TIM_PWM_Start+0x130>
 80080d2:	2300      	movs	r3, #0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a18      	ldr	r2, [pc, #96]	@ (8008150 <HAL_TIM_PWM_Start+0x1ac>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d009      	beq.n	8008106 <HAL_TIM_PWM_Start+0x162>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080fa:	d004      	beq.n	8008106 <HAL_TIM_PWM_Start+0x162>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a14      	ldr	r2, [pc, #80]	@ (8008154 <HAL_TIM_PWM_Start+0x1b0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d115      	bne.n	8008132 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	4b13      	ldr	r3, [pc, #76]	@ (800815c <HAL_TIM_PWM_Start+0x1b8>)
 800810e:	4013      	ands	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b06      	cmp	r3, #6
 8008116:	d015      	beq.n	8008144 <HAL_TIM_PWM_Start+0x1a0>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800811e:	d011      	beq.n	8008144 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008130:	e008      	b.n	8008144 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f042 0201 	orr.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	e000      	b.n	8008146 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008144:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3710      	adds	r7, #16
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	40012c00 	.word	0x40012c00
 8008154:	40014000 	.word	0x40014000
 8008158:	40014400 	.word	0x40014400
 800815c:	00010007 	.word	0x00010007

08008160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d020      	beq.n	80081c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d01b      	beq.n	80081c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f06f 0202 	mvn.w	r2, #2
 8008194:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	699b      	ldr	r3, [r3, #24]
 80081a2:	f003 0303 	and.w	r3, r3, #3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f9f8 	bl	80085a0 <HAL_TIM_IC_CaptureCallback>
 80081b0:	e005      	b.n	80081be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f9ea 	bl	800858c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f9fb 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f003 0304 	and.w	r3, r3, #4
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d020      	beq.n	8008210 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01b      	beq.n	8008210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f06f 0204 	mvn.w	r2, #4
 80081e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2202      	movs	r2, #2
 80081e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f9d2 	bl	80085a0 <HAL_TIM_IC_CaptureCallback>
 80081fc:	e005      	b.n	800820a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f9c4 	bl	800858c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f9d5 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	f003 0308 	and.w	r3, r3, #8
 8008216:	2b00      	cmp	r3, #0
 8008218:	d020      	beq.n	800825c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f003 0308 	and.w	r3, r3, #8
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01b      	beq.n	800825c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f06f 0208 	mvn.w	r2, #8
 800822c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2204      	movs	r2, #4
 8008232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	69db      	ldr	r3, [r3, #28]
 800823a:	f003 0303 	and.w	r3, r3, #3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f9ac 	bl	80085a0 <HAL_TIM_IC_CaptureCallback>
 8008248:	e005      	b.n	8008256 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f99e 	bl	800858c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f9af 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	f003 0310 	and.w	r3, r3, #16
 8008262:	2b00      	cmp	r3, #0
 8008264:	d020      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b00      	cmp	r3, #0
 800826e:	d01b      	beq.n	80082a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0210 	mvn.w	r2, #16
 8008278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2208      	movs	r2, #8
 800827e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f986 	bl	80085a0 <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f978 	bl	800858c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f989 	bl	80085b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00c      	beq.n	80082cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d007      	beq.n	80082cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f06f 0201 	mvn.w	r2, #1
 80082c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7fa f826 	bl	8002318 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00c      	beq.n	80082f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80082e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fd66 	bl	8008dbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00c      	beq.n	8008314 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008300:	2b00      	cmp	r3, #0
 8008302:	d007      	beq.n	8008314 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800830c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fd5e 	bl	8008dd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00c      	beq.n	8008338 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d007      	beq.n	8008338 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f948 	bl	80085c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00c      	beq.n	800835c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d007      	beq.n	800835c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0220 	mvn.w	r2, #32
 8008354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 fd26 	bl	8008da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800835c:	bf00      	nop
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b086      	sub	sp, #24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800837a:	2b01      	cmp	r3, #1
 800837c:	d101      	bne.n	8008382 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800837e:	2302      	movs	r3, #2
 8008380:	e0ff      	b.n	8008582 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b14      	cmp	r3, #20
 800838e:	f200 80f0 	bhi.w	8008572 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008392:	a201      	add	r2, pc, #4	@ (adr r2, 8008398 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008398:	080083ed 	.word	0x080083ed
 800839c:	08008573 	.word	0x08008573
 80083a0:	08008573 	.word	0x08008573
 80083a4:	08008573 	.word	0x08008573
 80083a8:	0800842d 	.word	0x0800842d
 80083ac:	08008573 	.word	0x08008573
 80083b0:	08008573 	.word	0x08008573
 80083b4:	08008573 	.word	0x08008573
 80083b8:	0800846f 	.word	0x0800846f
 80083bc:	08008573 	.word	0x08008573
 80083c0:	08008573 	.word	0x08008573
 80083c4:	08008573 	.word	0x08008573
 80083c8:	080084af 	.word	0x080084af
 80083cc:	08008573 	.word	0x08008573
 80083d0:	08008573 	.word	0x08008573
 80083d4:	08008573 	.word	0x08008573
 80083d8:	080084f1 	.word	0x080084f1
 80083dc:	08008573 	.word	0x08008573
 80083e0:	08008573 	.word	0x08008573
 80083e4:	08008573 	.word	0x08008573
 80083e8:	08008531 	.word	0x08008531
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 f956 	bl	80086a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699a      	ldr	r2, [r3, #24]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0208 	orr.w	r2, r2, #8
 8008406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	699a      	ldr	r2, [r3, #24]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0204 	bic.w	r2, r2, #4
 8008416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6999      	ldr	r1, [r3, #24]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	691a      	ldr	r2, [r3, #16]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	619a      	str	r2, [r3, #24]
      break;
 800842a:	e0a5      	b.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68b9      	ldr	r1, [r7, #8]
 8008432:	4618      	mov	r0, r3
 8008434:	f000 f9b2 	bl	800879c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008446:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699a      	ldr	r2, [r3, #24]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008456:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6999      	ldr	r1, [r3, #24]
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	021a      	lsls	r2, r3, #8
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	619a      	str	r2, [r3, #24]
      break;
 800846c:	e084      	b.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68b9      	ldr	r1, [r7, #8]
 8008474:	4618      	mov	r0, r3
 8008476:	f000 fa0b 	bl	8008890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69da      	ldr	r2, [r3, #28]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f042 0208 	orr.w	r2, r2, #8
 8008488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	69da      	ldr	r2, [r3, #28]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0204 	bic.w	r2, r2, #4
 8008498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	69d9      	ldr	r1, [r3, #28]
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	61da      	str	r2, [r3, #28]
      break;
 80084ac:	e064      	b.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f000 fa63 	bl	8008980 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69da      	ldr	r2, [r3, #28]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69d9      	ldr	r1, [r3, #28]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	021a      	lsls	r2, r3, #8
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	61da      	str	r2, [r3, #28]
      break;
 80084ee:	e043      	b.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68b9      	ldr	r1, [r7, #8]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 faa0 	bl	8008a3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f042 0208 	orr.w	r2, r2, #8
 800850a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f022 0204 	bic.w	r2, r2, #4
 800851a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	691a      	ldr	r2, [r3, #16]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800852e:	e023      	b.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	68b9      	ldr	r1, [r7, #8]
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fad8 	bl	8008aec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800854a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800855a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	021a      	lsls	r2, r3, #8
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008570:	e002      	b.n	8008578 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	75fb      	strb	r3, [r7, #23]
      break;
 8008576:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008580:	7dfb      	ldrb	r3, [r7, #23]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop

0800858c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085d0:	bf00      	nop
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008698 <TIM_Base_SetConfig+0xbc>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d003      	beq.n	80085fc <TIM_Base_SetConfig+0x20>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085fa:	d108      	bne.n	800860e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4313      	orrs	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a21      	ldr	r2, [pc, #132]	@ (8008698 <TIM_Base_SetConfig+0xbc>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d00b      	beq.n	800862e <TIM_Base_SetConfig+0x52>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800861c:	d007      	beq.n	800862e <TIM_Base_SetConfig+0x52>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a1e      	ldr	r2, [pc, #120]	@ (800869c <TIM_Base_SetConfig+0xc0>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d003      	beq.n	800862e <TIM_Base_SetConfig+0x52>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a1d      	ldr	r2, [pc, #116]	@ (80086a0 <TIM_Base_SetConfig+0xc4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d108      	bne.n	8008640 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4313      	orrs	r3, r2
 800863e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	4313      	orrs	r3, r2
 800864c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68fa      	ldr	r2, [r7, #12]
 8008652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	689a      	ldr	r2, [r3, #8]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a0c      	ldr	r2, [pc, #48]	@ (8008698 <TIM_Base_SetConfig+0xbc>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d007      	beq.n	800867c <TIM_Base_SetConfig+0xa0>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a0b      	ldr	r2, [pc, #44]	@ (800869c <TIM_Base_SetConfig+0xc0>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d003      	beq.n	800867c <TIM_Base_SetConfig+0xa0>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a0a      	ldr	r2, [pc, #40]	@ (80086a0 <TIM_Base_SetConfig+0xc4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d103      	bne.n	8008684 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	691a      	ldr	r2, [r3, #16]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	615a      	str	r2, [r3, #20]
}
 800868a:	bf00      	nop
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40012c00 	.word	0x40012c00
 800869c:	40014000 	.word	0x40014000
 80086a0:	40014400 	.word	0x40014400

080086a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a1b      	ldr	r3, [r3, #32]
 80086b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a1b      	ldr	r3, [r3, #32]
 80086b8:	f023 0201 	bic.w	r2, r3, #1
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0303 	bic.w	r3, r3, #3
 80086de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f023 0302 	bic.w	r3, r3, #2
 80086f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a24      	ldr	r2, [pc, #144]	@ (8008790 <TIM_OC1_SetConfig+0xec>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d007      	beq.n	8008714 <TIM_OC1_SetConfig+0x70>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a23      	ldr	r2, [pc, #140]	@ (8008794 <TIM_OC1_SetConfig+0xf0>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d003      	beq.n	8008714 <TIM_OC1_SetConfig+0x70>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a22      	ldr	r2, [pc, #136]	@ (8008798 <TIM_OC1_SetConfig+0xf4>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d10c      	bne.n	800872e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	f023 0308 	bic.w	r3, r3, #8
 800871a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f023 0304 	bic.w	r3, r3, #4
 800872c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a17      	ldr	r2, [pc, #92]	@ (8008790 <TIM_OC1_SetConfig+0xec>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d007      	beq.n	8008746 <TIM_OC1_SetConfig+0xa2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a16      	ldr	r2, [pc, #88]	@ (8008794 <TIM_OC1_SetConfig+0xf0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d003      	beq.n	8008746 <TIM_OC1_SetConfig+0xa2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a15      	ldr	r2, [pc, #84]	@ (8008798 <TIM_OC1_SetConfig+0xf4>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d111      	bne.n	800876a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800874c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	693a      	ldr	r2, [r7, #16]
 800875c:	4313      	orrs	r3, r2
 800875e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	699b      	ldr	r3, [r3, #24]
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	621a      	str	r2, [r3, #32]
}
 8008784:	bf00      	nop
 8008786:	371c      	adds	r7, #28
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	40012c00 	.word	0x40012c00
 8008794:	40014000 	.word	0x40014000
 8008798:	40014400 	.word	0x40014400

0800879c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a1b      	ldr	r3, [r3, #32]
 80087b0:	f023 0210 	bic.w	r2, r3, #16
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80087ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	021b      	lsls	r3, r3, #8
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f023 0320 	bic.w	r3, r3, #32
 80087ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	011b      	lsls	r3, r3, #4
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a22      	ldr	r2, [pc, #136]	@ (8008884 <TIM_OC2_SetConfig+0xe8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d10d      	bne.n	800881c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	4313      	orrs	r3, r2
 8008812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800881a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a19      	ldr	r2, [pc, #100]	@ (8008884 <TIM_OC2_SetConfig+0xe8>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d007      	beq.n	8008834 <TIM_OC2_SetConfig+0x98>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	4a18      	ldr	r2, [pc, #96]	@ (8008888 <TIM_OC2_SetConfig+0xec>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d003      	beq.n	8008834 <TIM_OC2_SetConfig+0x98>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4a17      	ldr	r2, [pc, #92]	@ (800888c <TIM_OC2_SetConfig+0xf0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d113      	bne.n	800885c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800883a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	4313      	orrs	r3, r2
 800884e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	4313      	orrs	r3, r2
 800885a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685a      	ldr	r2, [r3, #4]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	697a      	ldr	r2, [r7, #20]
 8008874:	621a      	str	r2, [r3, #32]
}
 8008876:	bf00      	nop
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	40012c00 	.word	0x40012c00
 8008888:	40014000 	.word	0x40014000
 800888c:	40014400 	.word	0x40014400

08008890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6a1b      	ldr	r3, [r3, #32]
 80088a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f023 0303 	bic.w	r3, r3, #3
 80088ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68fa      	ldr	r2, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80088dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	021b      	lsls	r3, r3, #8
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a21      	ldr	r2, [pc, #132]	@ (8008974 <TIM_OC3_SetConfig+0xe4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d10d      	bne.n	800890e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80088f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	021b      	lsls	r3, r3, #8
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	4313      	orrs	r3, r2
 8008904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800890c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a18      	ldr	r2, [pc, #96]	@ (8008974 <TIM_OC3_SetConfig+0xe4>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d007      	beq.n	8008926 <TIM_OC3_SetConfig+0x96>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a17      	ldr	r2, [pc, #92]	@ (8008978 <TIM_OC3_SetConfig+0xe8>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d003      	beq.n	8008926 <TIM_OC3_SetConfig+0x96>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a16      	ldr	r2, [pc, #88]	@ (800897c <TIM_OC3_SetConfig+0xec>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d113      	bne.n	800894e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800892c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008934:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	011b      	lsls	r3, r3, #4
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	4313      	orrs	r3, r2
 800894c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	621a      	str	r2, [r3, #32]
}
 8008968:	bf00      	nop
 800896a:	371c      	adds	r7, #28
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	40012c00 	.word	0x40012c00
 8008978:	40014000 	.word	0x40014000
 800897c:	40014400 	.word	0x40014400

08008980 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008980:	b480      	push	{r7}
 8008982:	b087      	sub	sp, #28
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a1b      	ldr	r3, [r3, #32]
 800898e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a1b      	ldr	r3, [r3, #32]
 8008994:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80089ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	021b      	lsls	r3, r3, #8
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80089ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	031b      	lsls	r3, r3, #12
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	4313      	orrs	r3, r2
 80089da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a14      	ldr	r2, [pc, #80]	@ (8008a30 <TIM_OC4_SetConfig+0xb0>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d007      	beq.n	80089f4 <TIM_OC4_SetConfig+0x74>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a13      	ldr	r2, [pc, #76]	@ (8008a34 <TIM_OC4_SetConfig+0xb4>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d003      	beq.n	80089f4 <TIM_OC4_SetConfig+0x74>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a12      	ldr	r2, [pc, #72]	@ (8008a38 <TIM_OC4_SetConfig+0xb8>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d109      	bne.n	8008a08 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	019b      	lsls	r3, r3, #6
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	621a      	str	r2, [r3, #32]
}
 8008a22:	bf00      	nop
 8008a24:	371c      	adds	r7, #28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	40012c00 	.word	0x40012c00
 8008a34:	40014000 	.word	0x40014000
 8008a38:	40014400 	.word	0x40014400

08008a3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b087      	sub	sp, #28
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a1b      	ldr	r3, [r3, #32]
 8008a50:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	68fa      	ldr	r2, [r7, #12]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008a80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	041b      	lsls	r3, r3, #16
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a13      	ldr	r2, [pc, #76]	@ (8008ae0 <TIM_OC5_SetConfig+0xa4>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d007      	beq.n	8008aa6 <TIM_OC5_SetConfig+0x6a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a12      	ldr	r2, [pc, #72]	@ (8008ae4 <TIM_OC5_SetConfig+0xa8>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d003      	beq.n	8008aa6 <TIM_OC5_SetConfig+0x6a>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a11      	ldr	r2, [pc, #68]	@ (8008ae8 <TIM_OC5_SetConfig+0xac>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d109      	bne.n	8008aba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008aac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	695b      	ldr	r3, [r3, #20]
 8008ab2:	021b      	lsls	r3, r3, #8
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	693a      	ldr	r2, [r7, #16]
 8008ad2:	621a      	str	r2, [r3, #32]
}
 8008ad4:	bf00      	nop
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	40012c00 	.word	0x40012c00
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40014400 	.word	0x40014400

08008aec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	021b      	lsls	r3, r3, #8
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	689b      	ldr	r3, [r3, #8]
 8008b38:	051b      	lsls	r3, r3, #20
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a14      	ldr	r2, [pc, #80]	@ (8008b94 <TIM_OC6_SetConfig+0xa8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d007      	beq.n	8008b58 <TIM_OC6_SetConfig+0x6c>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a13      	ldr	r2, [pc, #76]	@ (8008b98 <TIM_OC6_SetConfig+0xac>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d003      	beq.n	8008b58 <TIM_OC6_SetConfig+0x6c>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a12      	ldr	r2, [pc, #72]	@ (8008b9c <TIM_OC6_SetConfig+0xb0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d109      	bne.n	8008b6c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	029b      	lsls	r3, r3, #10
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	621a      	str	r2, [r3, #32]
}
 8008b86:	bf00      	nop
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40012c00 	.word	0x40012c00
 8008b98:	40014000 	.word	0x40014000
 8008b9c:	40014400 	.word	0x40014400

08008ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	f003 031f 	and.w	r3, r3, #31
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	6a1a      	ldr	r2, [r3, #32]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	401a      	ands	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	6a1a      	ldr	r2, [r3, #32]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f003 031f 	and.w	r3, r3, #31
 8008bd2:	6879      	ldr	r1, [r7, #4]
 8008bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	621a      	str	r2, [r3, #32]
}
 8008bde:	bf00      	nop
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
	...

08008bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c00:	2302      	movs	r3, #2
 8008c02:	e04f      	b.n	8008ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2202      	movs	r2, #2
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a21      	ldr	r2, [pc, #132]	@ (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d108      	bne.n	8008c40 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008c34:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a14      	ldr	r2, [pc, #80]	@ (8008cb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d009      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c6c:	d004      	beq.n	8008c78 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a10      	ldr	r2, [pc, #64]	@ (8008cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d10c      	bne.n	8008c92 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	689b      	ldr	r3, [r3, #8]
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	4313      	orrs	r3, r2
 8008c88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68ba      	ldr	r2, [r7, #8]
 8008c90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	40012c00 	.word	0x40012c00
 8008cb4:	40014000 	.word	0x40014000

08008cb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d101      	bne.n	8008cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008cd0:	2302      	movs	r3, #2
 8008cd2:	e060      	b.n	8008d96 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	695b      	ldr	r3, [r3, #20]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	041b      	lsls	r3, r3, #16
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a14      	ldr	r2, [pc, #80]	@ (8008da4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d115      	bne.n	8008d84 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d62:	051b      	lsls	r3, r3, #20
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	40012c00 	.word	0x40012c00

08008da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b083      	sub	sp, #12
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e040      	b.n	8008e78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d106      	bne.n	8008e0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7fa f89a 	bl	8002f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2224      	movs	r2, #36	@ 0x24
 8008e10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0201 	bic.w	r2, r2, #1
 8008e20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fba6 	bl	800957c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 f977 	bl	8009124 <UART_SetConfig>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e01b      	b.n	8008e78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f042 0201 	orr.w	r2, r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fc25 	bl	80096c0 <UART_CheckIdleState>
 8008e76:	4603      	mov	r3, r0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08a      	sub	sp, #40	@ 0x28
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008e94:	2b20      	cmp	r3, #32
 8008e96:	d177      	bne.n	8008f88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <HAL_UART_Transmit+0x24>
 8008e9e:	88fb      	ldrh	r3, [r7, #6]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d101      	bne.n	8008ea8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e070      	b.n	8008f8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2221      	movs	r2, #33	@ 0x21
 8008eb4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008eb6:	f7fa fb97 	bl	80035e8 <HAL_GetTick>
 8008eba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	88fa      	ldrh	r2, [r7, #6]
 8008ec0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	88fa      	ldrh	r2, [r7, #6]
 8008ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ed4:	d108      	bne.n	8008ee8 <HAL_UART_Transmit+0x68>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	691b      	ldr	r3, [r3, #16]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d104      	bne.n	8008ee8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	61bb      	str	r3, [r7, #24]
 8008ee6:	e003      	b.n	8008ef0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008eec:	2300      	movs	r3, #0
 8008eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ef0:	e02f      	b.n	8008f52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	9300      	str	r3, [sp, #0]
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2180      	movs	r1, #128	@ 0x80
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f000 fc87 	bl	8009810 <UART_WaitOnFlagUntilTimeout>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d004      	beq.n	8008f12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2220      	movs	r2, #32
 8008f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	e03b      	b.n	8008f8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10b      	bne.n	8008f30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f18:	69bb      	ldr	r3, [r7, #24]
 8008f1a:	881a      	ldrh	r2, [r3, #0]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f24:	b292      	uxth	r2, r2
 8008f26:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	3302      	adds	r3, #2
 8008f2c:	61bb      	str	r3, [r7, #24]
 8008f2e:	e007      	b.n	8008f40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	781a      	ldrb	r2, [r3, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	3b01      	subs	r3, #1
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1c9      	bne.n	8008ef2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	2200      	movs	r2, #0
 8008f66:	2140      	movs	r1, #64	@ 0x40
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 fc51 	bl	8009810 <UART_WaitOnFlagUntilTimeout>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d004      	beq.n	8008f7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2220      	movs	r2, #32
 8008f78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e005      	b.n	8008f8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8008f84:	2300      	movs	r3, #0
 8008f86:	e000      	b.n	8008f8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008f88:	2302      	movs	r3, #2
  }
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3720      	adds	r7, #32
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b08a      	sub	sp, #40	@ 0x28
 8008f96:	af02      	add	r7, sp, #8
 8008f98:	60f8      	str	r0, [r7, #12]
 8008f9a:	60b9      	str	r1, [r7, #8]
 8008f9c:	603b      	str	r3, [r7, #0]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa8:	2b20      	cmp	r3, #32
 8008faa:	f040 80b6 	bne.w	800911a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <HAL_UART_Receive+0x28>
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e0ae      	b.n	800911c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2222      	movs	r2, #34	@ 0x22
 8008fca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008fd4:	f7fa fb08 	bl	80035e8 <HAL_GetTick>
 8008fd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	88fa      	ldrh	r2, [r7, #6]
 8008fde:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	88fa      	ldrh	r2, [r7, #6]
 8008fe6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff2:	d10e      	bne.n	8009012 <HAL_UART_Receive+0x80>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <HAL_UART_Receive+0x76>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8009002:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009006:	e02d      	b.n	8009064 <HAL_UART_Receive+0xd2>
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	22ff      	movs	r2, #255	@ 0xff
 800900c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009010:	e028      	b.n	8009064 <HAL_UART_Receive+0xd2>
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10d      	bne.n	8009036 <HAL_UART_Receive+0xa4>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <HAL_UART_Receive+0x9a>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	22ff      	movs	r2, #255	@ 0xff
 8009026:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800902a:	e01b      	b.n	8009064 <HAL_UART_Receive+0xd2>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	227f      	movs	r2, #127	@ 0x7f
 8009030:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009034:	e016      	b.n	8009064 <HAL_UART_Receive+0xd2>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800903e:	d10d      	bne.n	800905c <HAL_UART_Receive+0xca>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d104      	bne.n	8009052 <HAL_UART_Receive+0xc0>
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	227f      	movs	r2, #127	@ 0x7f
 800904c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8009050:	e008      	b.n	8009064 <HAL_UART_Receive+0xd2>
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	223f      	movs	r2, #63	@ 0x3f
 8009056:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800905a:	e003      	b.n	8009064 <HAL_UART_Receive+0xd2>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800906a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009074:	d108      	bne.n	8009088 <HAL_UART_Receive+0xf6>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d104      	bne.n	8009088 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800907e:	2300      	movs	r3, #0
 8009080:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	61bb      	str	r3, [r7, #24]
 8009086:	e003      	b.n	8009090 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800908c:	2300      	movs	r3, #0
 800908e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009090:	e037      	b.n	8009102 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2200      	movs	r2, #0
 800909a:	2120      	movs	r1, #32
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fbb7 	bl	8009810 <UART_WaitOnFlagUntilTimeout>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d005      	beq.n	80090b4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2220      	movs	r2, #32
 80090ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e033      	b.n	800911c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10c      	bne.n	80090d4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	8a7b      	ldrh	r3, [r7, #18]
 80090c4:	4013      	ands	r3, r2
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	3302      	adds	r3, #2
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	e00d      	b.n	80090f0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80090da:	b29b      	uxth	r3, r3
 80090dc:	b2da      	uxtb	r2, r3
 80090de:	8a7b      	ldrh	r3, [r7, #18]
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	4013      	ands	r3, r2
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	3301      	adds	r3, #1
 80090ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	3b01      	subs	r3, #1
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1c1      	bne.n	8009092 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2220      	movs	r2, #32
 8009112:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	e000      	b.n	800911c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800911a:	2302      	movs	r3, #2
  }
}
 800911c:	4618      	mov	r0, r3
 800911e:	3720      	adds	r7, #32
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009128:	b08a      	sub	sp, #40	@ 0x28
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800912e:	2300      	movs	r3, #0
 8009130:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	689a      	ldr	r2, [r3, #8]
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	431a      	orrs	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	695b      	ldr	r3, [r3, #20]
 8009142:	431a      	orrs	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	4313      	orrs	r3, r2
 800914a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4bb4      	ldr	r3, [pc, #720]	@ (8009424 <UART_SetConfig+0x300>)
 8009154:	4013      	ands	r3, r2
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	6812      	ldr	r2, [r2, #0]
 800915a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800915c:	430b      	orrs	r3, r1
 800915e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	430a      	orrs	r2, r1
 8009174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4aa9      	ldr	r2, [pc, #676]	@ (8009428 <UART_SetConfig+0x304>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d004      	beq.n	8009190 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800918c:	4313      	orrs	r3, r2
 800918e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a0:	430a      	orrs	r2, r1
 80091a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4aa0      	ldr	r2, [pc, #640]	@ (800942c <UART_SetConfig+0x308>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d126      	bne.n	80091fc <UART_SetConfig+0xd8>
 80091ae:	4ba0      	ldr	r3, [pc, #640]	@ (8009430 <UART_SetConfig+0x30c>)
 80091b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b4:	f003 0303 	and.w	r3, r3, #3
 80091b8:	2b03      	cmp	r3, #3
 80091ba:	d81b      	bhi.n	80091f4 <UART_SetConfig+0xd0>
 80091bc:	a201      	add	r2, pc, #4	@ (adr r2, 80091c4 <UART_SetConfig+0xa0>)
 80091be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091c2:	bf00      	nop
 80091c4:	080091d5 	.word	0x080091d5
 80091c8:	080091e5 	.word	0x080091e5
 80091cc:	080091dd 	.word	0x080091dd
 80091d0:	080091ed 	.word	0x080091ed
 80091d4:	2301      	movs	r3, #1
 80091d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091da:	e080      	b.n	80092de <UART_SetConfig+0x1ba>
 80091dc:	2302      	movs	r3, #2
 80091de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091e2:	e07c      	b.n	80092de <UART_SetConfig+0x1ba>
 80091e4:	2304      	movs	r3, #4
 80091e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091ea:	e078      	b.n	80092de <UART_SetConfig+0x1ba>
 80091ec:	2308      	movs	r3, #8
 80091ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091f2:	e074      	b.n	80092de <UART_SetConfig+0x1ba>
 80091f4:	2310      	movs	r3, #16
 80091f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80091fa:	e070      	b.n	80092de <UART_SetConfig+0x1ba>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a8c      	ldr	r2, [pc, #560]	@ (8009434 <UART_SetConfig+0x310>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d138      	bne.n	8009278 <UART_SetConfig+0x154>
 8009206:	4b8a      	ldr	r3, [pc, #552]	@ (8009430 <UART_SetConfig+0x30c>)
 8009208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800920c:	f003 030c 	and.w	r3, r3, #12
 8009210:	2b0c      	cmp	r3, #12
 8009212:	d82d      	bhi.n	8009270 <UART_SetConfig+0x14c>
 8009214:	a201      	add	r2, pc, #4	@ (adr r2, 800921c <UART_SetConfig+0xf8>)
 8009216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921a:	bf00      	nop
 800921c:	08009251 	.word	0x08009251
 8009220:	08009271 	.word	0x08009271
 8009224:	08009271 	.word	0x08009271
 8009228:	08009271 	.word	0x08009271
 800922c:	08009261 	.word	0x08009261
 8009230:	08009271 	.word	0x08009271
 8009234:	08009271 	.word	0x08009271
 8009238:	08009271 	.word	0x08009271
 800923c:	08009259 	.word	0x08009259
 8009240:	08009271 	.word	0x08009271
 8009244:	08009271 	.word	0x08009271
 8009248:	08009271 	.word	0x08009271
 800924c:	08009269 	.word	0x08009269
 8009250:	2300      	movs	r3, #0
 8009252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009256:	e042      	b.n	80092de <UART_SetConfig+0x1ba>
 8009258:	2302      	movs	r3, #2
 800925a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800925e:	e03e      	b.n	80092de <UART_SetConfig+0x1ba>
 8009260:	2304      	movs	r3, #4
 8009262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009266:	e03a      	b.n	80092de <UART_SetConfig+0x1ba>
 8009268:	2308      	movs	r3, #8
 800926a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800926e:	e036      	b.n	80092de <UART_SetConfig+0x1ba>
 8009270:	2310      	movs	r3, #16
 8009272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009276:	e032      	b.n	80092de <UART_SetConfig+0x1ba>
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a6a      	ldr	r2, [pc, #424]	@ (8009428 <UART_SetConfig+0x304>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d12a      	bne.n	80092d8 <UART_SetConfig+0x1b4>
 8009282:	4b6b      	ldr	r3, [pc, #428]	@ (8009430 <UART_SetConfig+0x30c>)
 8009284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009288:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800928c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009290:	d01a      	beq.n	80092c8 <UART_SetConfig+0x1a4>
 8009292:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009296:	d81b      	bhi.n	80092d0 <UART_SetConfig+0x1ac>
 8009298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800929c:	d00c      	beq.n	80092b8 <UART_SetConfig+0x194>
 800929e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092a2:	d815      	bhi.n	80092d0 <UART_SetConfig+0x1ac>
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d003      	beq.n	80092b0 <UART_SetConfig+0x18c>
 80092a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092ac:	d008      	beq.n	80092c0 <UART_SetConfig+0x19c>
 80092ae:	e00f      	b.n	80092d0 <UART_SetConfig+0x1ac>
 80092b0:	2300      	movs	r3, #0
 80092b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092b6:	e012      	b.n	80092de <UART_SetConfig+0x1ba>
 80092b8:	2302      	movs	r3, #2
 80092ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092be:	e00e      	b.n	80092de <UART_SetConfig+0x1ba>
 80092c0:	2304      	movs	r3, #4
 80092c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092c6:	e00a      	b.n	80092de <UART_SetConfig+0x1ba>
 80092c8:	2308      	movs	r3, #8
 80092ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092ce:	e006      	b.n	80092de <UART_SetConfig+0x1ba>
 80092d0:	2310      	movs	r3, #16
 80092d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80092d6:	e002      	b.n	80092de <UART_SetConfig+0x1ba>
 80092d8:	2310      	movs	r3, #16
 80092da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a51      	ldr	r2, [pc, #324]	@ (8009428 <UART_SetConfig+0x304>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d17a      	bne.n	80093de <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80092e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d824      	bhi.n	800933a <UART_SetConfig+0x216>
 80092f0:	a201      	add	r2, pc, #4	@ (adr r2, 80092f8 <UART_SetConfig+0x1d4>)
 80092f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f6:	bf00      	nop
 80092f8:	0800931d 	.word	0x0800931d
 80092fc:	0800933b 	.word	0x0800933b
 8009300:	08009325 	.word	0x08009325
 8009304:	0800933b 	.word	0x0800933b
 8009308:	0800932b 	.word	0x0800932b
 800930c:	0800933b 	.word	0x0800933b
 8009310:	0800933b 	.word	0x0800933b
 8009314:	0800933b 	.word	0x0800933b
 8009318:	08009333 	.word	0x08009333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800931c:	f7fd f90c 	bl	8006538 <HAL_RCC_GetPCLK1Freq>
 8009320:	61f8      	str	r0, [r7, #28]
        break;
 8009322:	e010      	b.n	8009346 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009324:	4b44      	ldr	r3, [pc, #272]	@ (8009438 <UART_SetConfig+0x314>)
 8009326:	61fb      	str	r3, [r7, #28]
        break;
 8009328:	e00d      	b.n	8009346 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800932a:	f7fd f86d 	bl	8006408 <HAL_RCC_GetSysClockFreq>
 800932e:	61f8      	str	r0, [r7, #28]
        break;
 8009330:	e009      	b.n	8009346 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009332:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009336:	61fb      	str	r3, [r7, #28]
        break;
 8009338:	e005      	b.n	8009346 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009344:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009346:	69fb      	ldr	r3, [r7, #28]
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8107 	beq.w	800955c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	685a      	ldr	r2, [r3, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	4413      	add	r3, r2
 8009358:	69fa      	ldr	r2, [r7, #28]
 800935a:	429a      	cmp	r2, r3
 800935c:	d305      	bcc.n	800936a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009364:	69fa      	ldr	r2, [r7, #28]
 8009366:	429a      	cmp	r2, r3
 8009368:	d903      	bls.n	8009372 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009370:	e0f4      	b.n	800955c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	2200      	movs	r2, #0
 8009376:	461c      	mov	r4, r3
 8009378:	4615      	mov	r5, r2
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	f04f 0300 	mov.w	r3, #0
 8009382:	022b      	lsls	r3, r5, #8
 8009384:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009388:	0222      	lsls	r2, r4, #8
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	6849      	ldr	r1, [r1, #4]
 800938e:	0849      	lsrs	r1, r1, #1
 8009390:	2000      	movs	r0, #0
 8009392:	4688      	mov	r8, r1
 8009394:	4681      	mov	r9, r0
 8009396:	eb12 0a08 	adds.w	sl, r2, r8
 800939a:	eb43 0b09 	adc.w	fp, r3, r9
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	603b      	str	r3, [r7, #0]
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093ac:	4650      	mov	r0, sl
 80093ae:	4659      	mov	r1, fp
 80093b0:	f7f7 fc6a 	bl	8000c88 <__aeabi_uldivmod>
 80093b4:	4602      	mov	r2, r0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4613      	mov	r3, r2
 80093ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093c2:	d308      	bcc.n	80093d6 <UART_SetConfig+0x2b2>
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093ca:	d204      	bcs.n	80093d6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	60da      	str	r2, [r3, #12]
 80093d4:	e0c2      	b.n	800955c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80093dc:	e0be      	b.n	800955c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093e6:	d16a      	bne.n	80094be <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80093e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80093ec:	2b08      	cmp	r3, #8
 80093ee:	d834      	bhi.n	800945a <UART_SetConfig+0x336>
 80093f0:	a201      	add	r2, pc, #4	@ (adr r2, 80093f8 <UART_SetConfig+0x2d4>)
 80093f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f6:	bf00      	nop
 80093f8:	0800941d 	.word	0x0800941d
 80093fc:	0800943d 	.word	0x0800943d
 8009400:	08009445 	.word	0x08009445
 8009404:	0800945b 	.word	0x0800945b
 8009408:	0800944b 	.word	0x0800944b
 800940c:	0800945b 	.word	0x0800945b
 8009410:	0800945b 	.word	0x0800945b
 8009414:	0800945b 	.word	0x0800945b
 8009418:	08009453 	.word	0x08009453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800941c:	f7fd f88c 	bl	8006538 <HAL_RCC_GetPCLK1Freq>
 8009420:	61f8      	str	r0, [r7, #28]
        break;
 8009422:	e020      	b.n	8009466 <UART_SetConfig+0x342>
 8009424:	efff69f3 	.word	0xefff69f3
 8009428:	40008000 	.word	0x40008000
 800942c:	40013800 	.word	0x40013800
 8009430:	40021000 	.word	0x40021000
 8009434:	40004400 	.word	0x40004400
 8009438:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800943c:	f7fd f892 	bl	8006564 <HAL_RCC_GetPCLK2Freq>
 8009440:	61f8      	str	r0, [r7, #28]
        break;
 8009442:	e010      	b.n	8009466 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009444:	4b4c      	ldr	r3, [pc, #304]	@ (8009578 <UART_SetConfig+0x454>)
 8009446:	61fb      	str	r3, [r7, #28]
        break;
 8009448:	e00d      	b.n	8009466 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800944a:	f7fc ffdd 	bl	8006408 <HAL_RCC_GetSysClockFreq>
 800944e:	61f8      	str	r0, [r7, #28]
        break;
 8009450:	e009      	b.n	8009466 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009452:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009456:	61fb      	str	r3, [r7, #28]
        break;
 8009458:	e005      	b.n	8009466 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009466:	69fb      	ldr	r3, [r7, #28]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d077      	beq.n	800955c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	005a      	lsls	r2, r3, #1
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	085b      	lsrs	r3, r3, #1
 8009476:	441a      	add	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009480:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2b0f      	cmp	r3, #15
 8009486:	d916      	bls.n	80094b6 <UART_SetConfig+0x392>
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800948e:	d212      	bcs.n	80094b6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	b29b      	uxth	r3, r3
 8009494:	f023 030f 	bic.w	r3, r3, #15
 8009498:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	085b      	lsrs	r3, r3, #1
 800949e:	b29b      	uxth	r3, r3
 80094a0:	f003 0307 	and.w	r3, r3, #7
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	8afb      	ldrh	r3, [r7, #22]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	8afa      	ldrh	r2, [r7, #22]
 80094b2:	60da      	str	r2, [r3, #12]
 80094b4:	e052      	b.n	800955c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80094b6:	2301      	movs	r3, #1
 80094b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80094bc:	e04e      	b.n	800955c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80094be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80094c2:	2b08      	cmp	r3, #8
 80094c4:	d827      	bhi.n	8009516 <UART_SetConfig+0x3f2>
 80094c6:	a201      	add	r2, pc, #4	@ (adr r2, 80094cc <UART_SetConfig+0x3a8>)
 80094c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094cc:	080094f1 	.word	0x080094f1
 80094d0:	080094f9 	.word	0x080094f9
 80094d4:	08009501 	.word	0x08009501
 80094d8:	08009517 	.word	0x08009517
 80094dc:	08009507 	.word	0x08009507
 80094e0:	08009517 	.word	0x08009517
 80094e4:	08009517 	.word	0x08009517
 80094e8:	08009517 	.word	0x08009517
 80094ec:	0800950f 	.word	0x0800950f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094f0:	f7fd f822 	bl	8006538 <HAL_RCC_GetPCLK1Freq>
 80094f4:	61f8      	str	r0, [r7, #28]
        break;
 80094f6:	e014      	b.n	8009522 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094f8:	f7fd f834 	bl	8006564 <HAL_RCC_GetPCLK2Freq>
 80094fc:	61f8      	str	r0, [r7, #28]
        break;
 80094fe:	e010      	b.n	8009522 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009500:	4b1d      	ldr	r3, [pc, #116]	@ (8009578 <UART_SetConfig+0x454>)
 8009502:	61fb      	str	r3, [r7, #28]
        break;
 8009504:	e00d      	b.n	8009522 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009506:	f7fc ff7f 	bl	8006408 <HAL_RCC_GetSysClockFreq>
 800950a:	61f8      	str	r0, [r7, #28]
        break;
 800950c:	e009      	b.n	8009522 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800950e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009512:	61fb      	str	r3, [r7, #28]
        break;
 8009514:	e005      	b.n	8009522 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009520:	bf00      	nop
    }

    if (pclk != 0U)
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d019      	beq.n	800955c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	085a      	lsrs	r2, r3, #1
 800952e:	69fb      	ldr	r3, [r7, #28]
 8009530:	441a      	add	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	fbb2 f3f3 	udiv	r3, r2, r3
 800953a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	2b0f      	cmp	r3, #15
 8009540:	d909      	bls.n	8009556 <UART_SetConfig+0x432>
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009548:	d205      	bcs.n	8009556 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	b29a      	uxth	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	60da      	str	r2, [r3, #12]
 8009554:	e002      	b.n	800955c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2200      	movs	r2, #0
 8009560:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2200      	movs	r2, #0
 8009566:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8009568:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800956c:	4618      	mov	r0, r3
 800956e:	3728      	adds	r7, #40	@ 0x28
 8009570:	46bd      	mov	sp, r7
 8009572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009576:	bf00      	nop
 8009578:	00f42400 	.word	0x00f42400

0800957c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009588:	f003 0308 	and.w	r3, r3, #8
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00a      	beq.n	80095ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009610:	f003 0310 	and.w	r3, r3, #16
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00a      	beq.n	800962e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009632:	f003 0320 	and.w	r3, r3, #32
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	430a      	orrs	r2, r1
 800964e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009658:	2b00      	cmp	r3, #0
 800965a:	d01a      	beq.n	8009692 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	430a      	orrs	r2, r1
 8009670:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009676:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800967a:	d10a      	bne.n	8009692 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	605a      	str	r2, [r3, #4]
  }
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b098      	sub	sp, #96	@ 0x60
 80096c4:	af02      	add	r7, sp, #8
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096d0:	f7f9 ff8a 	bl	80035e8 <HAL_GetTick>
 80096d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0308 	and.w	r3, r3, #8
 80096e0:	2b08      	cmp	r3, #8
 80096e2:	d12e      	bne.n	8009742 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096ec:	2200      	movs	r2, #0
 80096ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f88c 	bl	8009810 <UART_WaitOnFlagUntilTimeout>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d021      	beq.n	8009742 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800970c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800970e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009712:	653b      	str	r3, [r7, #80]	@ 0x50
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800971c:	647b      	str	r3, [r7, #68]	@ 0x44
 800971e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800972a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e6      	bne.n	80096fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2220      	movs	r2, #32
 8009734:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800973e:	2303      	movs	r3, #3
 8009740:	e062      	b.n	8009808 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b04      	cmp	r3, #4
 800974e:	d149      	bne.n	80097e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009750:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009758:	2200      	movs	r2, #0
 800975a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f856 	bl	8009810 <UART_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d03c      	beq.n	80097e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009772:	e853 3f00 	ldrex	r3, [r3]
 8009776:	623b      	str	r3, [r7, #32]
   return(result);
 8009778:	6a3b      	ldr	r3, [r7, #32]
 800977a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800977e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009788:	633b      	str	r3, [r7, #48]	@ 0x30
 800978a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800978e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009790:	e841 2300 	strex	r3, r2, [r1]
 8009794:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1e6      	bne.n	800976a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	3308      	adds	r3, #8
 80097a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	e853 3f00 	ldrex	r3, [r3]
 80097aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 0301 	bic.w	r3, r3, #1
 80097b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3308      	adds	r3, #8
 80097ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097bc:	61fa      	str	r2, [r7, #28]
 80097be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	69b9      	ldr	r1, [r7, #24]
 80097c2:	69fa      	ldr	r2, [r7, #28]
 80097c4:	e841 2300 	strex	r3, r2, [r1]
 80097c8:	617b      	str	r3, [r7, #20]
   return(result);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d1e5      	bne.n	800979c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2220      	movs	r2, #32
 80097d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e011      	b.n	8009808 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2220      	movs	r2, #32
 80097e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2220      	movs	r2, #32
 80097ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3758      	adds	r7, #88	@ 0x58
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	603b      	str	r3, [r7, #0]
 800981c:	4613      	mov	r3, r2
 800981e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009820:	e049      	b.n	80098b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009828:	d045      	beq.n	80098b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800982a:	f7f9 fedd 	bl	80035e8 <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	69ba      	ldr	r2, [r7, #24]
 8009836:	429a      	cmp	r2, r3
 8009838:	d302      	bcc.n	8009840 <UART_WaitOnFlagUntilTimeout+0x30>
 800983a:	69bb      	ldr	r3, [r7, #24]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e048      	b.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f003 0304 	and.w	r3, r3, #4
 800984e:	2b00      	cmp	r3, #0
 8009850:	d031      	beq.n	80098b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	69db      	ldr	r3, [r3, #28]
 8009858:	f003 0308 	and.w	r3, r3, #8
 800985c:	2b08      	cmp	r3, #8
 800985e:	d110      	bne.n	8009882 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2208      	movs	r2, #8
 8009866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f838 	bl	80098de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2208      	movs	r2, #8
 8009872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e029      	b.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	69db      	ldr	r3, [r3, #28]
 8009888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800988c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009890:	d111      	bne.n	80098b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800989a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f81e 	bl	80098de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80098b2:	2303      	movs	r3, #3
 80098b4:	e00f      	b.n	80098d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69da      	ldr	r2, [r3, #28]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	4013      	ands	r3, r2
 80098c0:	68ba      	ldr	r2, [r7, #8]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	bf0c      	ite	eq
 80098c6:	2301      	moveq	r3, #1
 80098c8:	2300      	movne	r3, #0
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	461a      	mov	r2, r3
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d0a6      	beq.n	8009822 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098de:	b480      	push	{r7}
 80098e0:	b095      	sub	sp, #84	@ 0x54
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098ee:	e853 3f00 	ldrex	r3, [r3]
 80098f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	461a      	mov	r2, r3
 8009902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009904:	643b      	str	r3, [r7, #64]	@ 0x40
 8009906:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009908:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800990a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800990c:	e841 2300 	strex	r3, r2, [r1]
 8009910:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1e6      	bne.n	80098e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	3308      	adds	r3, #8
 800991e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	e853 3f00 	ldrex	r3, [r3]
 8009926:	61fb      	str	r3, [r7, #28]
   return(result);
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	f023 0301 	bic.w	r3, r3, #1
 800992e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	3308      	adds	r3, #8
 8009936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009938:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800993a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800993e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009940:	e841 2300 	strex	r3, r2, [r1]
 8009944:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1e5      	bne.n	8009918 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009950:	2b01      	cmp	r3, #1
 8009952:	d118      	bne.n	8009986 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	e853 3f00 	ldrex	r3, [r3]
 8009960:	60bb      	str	r3, [r7, #8]
   return(result);
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f023 0310 	bic.w	r3, r3, #16
 8009968:	647b      	str	r3, [r7, #68]	@ 0x44
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009972:	61bb      	str	r3, [r7, #24]
 8009974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009976:	6979      	ldr	r1, [r7, #20]
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	e841 2300 	strex	r3, r2, [r1]
 800997e:	613b      	str	r3, [r7, #16]
   return(result);
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1e6      	bne.n	8009954 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2220      	movs	r2, #32
 800998a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800999a:	bf00      	nop
 800999c:	3754      	adds	r7, #84	@ 0x54
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <sulp>:
 80099a6:	b570      	push	{r4, r5, r6, lr}
 80099a8:	4604      	mov	r4, r0
 80099aa:	460d      	mov	r5, r1
 80099ac:	ec45 4b10 	vmov	d0, r4, r5
 80099b0:	4616      	mov	r6, r2
 80099b2:	f003 fcd1 	bl	800d358 <__ulp>
 80099b6:	ec51 0b10 	vmov	r0, r1, d0
 80099ba:	b17e      	cbz	r6, 80099dc <sulp+0x36>
 80099bc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80099c0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	dd09      	ble.n	80099dc <sulp+0x36>
 80099c8:	051b      	lsls	r3, r3, #20
 80099ca:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80099ce:	2400      	movs	r4, #0
 80099d0:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80099d4:	4622      	mov	r2, r4
 80099d6:	462b      	mov	r3, r5
 80099d8:	f7f6 fe0e 	bl	80005f8 <__aeabi_dmul>
 80099dc:	ec41 0b10 	vmov	d0, r0, r1
 80099e0:	bd70      	pop	{r4, r5, r6, pc}
 80099e2:	0000      	movs	r0, r0
 80099e4:	0000      	movs	r0, r0
	...

080099e8 <_strtod_l>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	b09f      	sub	sp, #124	@ 0x7c
 80099ee:	460c      	mov	r4, r1
 80099f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80099f2:	2200      	movs	r2, #0
 80099f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80099f6:	9005      	str	r0, [sp, #20]
 80099f8:	f04f 0a00 	mov.w	sl, #0
 80099fc:	f04f 0b00 	mov.w	fp, #0
 8009a00:	460a      	mov	r2, r1
 8009a02:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a04:	7811      	ldrb	r1, [r2, #0]
 8009a06:	292b      	cmp	r1, #43	@ 0x2b
 8009a08:	d04a      	beq.n	8009aa0 <_strtod_l+0xb8>
 8009a0a:	d838      	bhi.n	8009a7e <_strtod_l+0x96>
 8009a0c:	290d      	cmp	r1, #13
 8009a0e:	d832      	bhi.n	8009a76 <_strtod_l+0x8e>
 8009a10:	2908      	cmp	r1, #8
 8009a12:	d832      	bhi.n	8009a7a <_strtod_l+0x92>
 8009a14:	2900      	cmp	r1, #0
 8009a16:	d03b      	beq.n	8009a90 <_strtod_l+0xa8>
 8009a18:	2200      	movs	r2, #0
 8009a1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009a1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a1e:	782a      	ldrb	r2, [r5, #0]
 8009a20:	2a30      	cmp	r2, #48	@ 0x30
 8009a22:	f040 80b3 	bne.w	8009b8c <_strtod_l+0x1a4>
 8009a26:	786a      	ldrb	r2, [r5, #1]
 8009a28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a2c:	2a58      	cmp	r2, #88	@ 0x58
 8009a2e:	d16e      	bne.n	8009b0e <_strtod_l+0x126>
 8009a30:	9302      	str	r3, [sp, #8]
 8009a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	4a8e      	ldr	r2, [pc, #568]	@ (8009c74 <_strtod_l+0x28c>)
 8009a3c:	9805      	ldr	r0, [sp, #20]
 8009a3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a40:	a919      	add	r1, sp, #100	@ 0x64
 8009a42:	f002 fd7b 	bl	800c53c <__gethex>
 8009a46:	f010 060f 	ands.w	r6, r0, #15
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	d005      	beq.n	8009a5a <_strtod_l+0x72>
 8009a4e:	2e06      	cmp	r6, #6
 8009a50:	d128      	bne.n	8009aa4 <_strtod_l+0xbc>
 8009a52:	3501      	adds	r5, #1
 8009a54:	2300      	movs	r3, #0
 8009a56:	9519      	str	r5, [sp, #100]	@ 0x64
 8009a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 858e 	bne.w	800a57e <_strtod_l+0xb96>
 8009a62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a64:	b1cb      	cbz	r3, 8009a9a <_strtod_l+0xb2>
 8009a66:	4652      	mov	r2, sl
 8009a68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009a6c:	ec43 2b10 	vmov	d0, r2, r3
 8009a70:	b01f      	add	sp, #124	@ 0x7c
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	2920      	cmp	r1, #32
 8009a78:	d1ce      	bne.n	8009a18 <_strtod_l+0x30>
 8009a7a:	3201      	adds	r2, #1
 8009a7c:	e7c1      	b.n	8009a02 <_strtod_l+0x1a>
 8009a7e:	292d      	cmp	r1, #45	@ 0x2d
 8009a80:	d1ca      	bne.n	8009a18 <_strtod_l+0x30>
 8009a82:	2101      	movs	r1, #1
 8009a84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009a86:	1c51      	adds	r1, r2, #1
 8009a88:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a8a:	7852      	ldrb	r2, [r2, #1]
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	d1c5      	bne.n	8009a1c <_strtod_l+0x34>
 8009a90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a92:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 8570 	bne.w	800a57a <_strtod_l+0xb92>
 8009a9a:	4652      	mov	r2, sl
 8009a9c:	465b      	mov	r3, fp
 8009a9e:	e7e5      	b.n	8009a6c <_strtod_l+0x84>
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	e7ef      	b.n	8009a84 <_strtod_l+0x9c>
 8009aa4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009aa6:	b13a      	cbz	r2, 8009ab8 <_strtod_l+0xd0>
 8009aa8:	2135      	movs	r1, #53	@ 0x35
 8009aaa:	a81c      	add	r0, sp, #112	@ 0x70
 8009aac:	f003 fd4e 	bl	800d54c <__copybits>
 8009ab0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ab2:	9805      	ldr	r0, [sp, #20]
 8009ab4:	f003 f91c 	bl	800ccf0 <_Bfree>
 8009ab8:	3e01      	subs	r6, #1
 8009aba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009abc:	2e04      	cmp	r6, #4
 8009abe:	d806      	bhi.n	8009ace <_strtod_l+0xe6>
 8009ac0:	e8df f006 	tbb	[pc, r6]
 8009ac4:	201d0314 	.word	0x201d0314
 8009ac8:	14          	.byte	0x14
 8009ac9:	00          	.byte	0x00
 8009aca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ace:	05e1      	lsls	r1, r4, #23
 8009ad0:	bf48      	it	mi
 8009ad2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ada:	0d1b      	lsrs	r3, r3, #20
 8009adc:	051b      	lsls	r3, r3, #20
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1bb      	bne.n	8009a5a <_strtod_l+0x72>
 8009ae2:	f001 fddf 	bl	800b6a4 <__errno>
 8009ae6:	2322      	movs	r3, #34	@ 0x22
 8009ae8:	6003      	str	r3, [r0, #0]
 8009aea:	e7b6      	b.n	8009a5a <_strtod_l+0x72>
 8009aec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009af0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009af4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009af8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009afc:	e7e7      	b.n	8009ace <_strtod_l+0xe6>
 8009afe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009c7c <_strtod_l+0x294>
 8009b02:	e7e4      	b.n	8009ace <_strtod_l+0xe6>
 8009b04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b08:	f04f 3aff 	mov.w	sl, #4294967295
 8009b0c:	e7df      	b.n	8009ace <_strtod_l+0xe6>
 8009b0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	2b30      	cmp	r3, #48	@ 0x30
 8009b18:	d0f9      	beq.n	8009b0e <_strtod_l+0x126>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d09d      	beq.n	8009a5a <_strtod_l+0x72>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b24:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b26:	2300      	movs	r3, #0
 8009b28:	9308      	str	r3, [sp, #32]
 8009b2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b2c:	461f      	mov	r7, r3
 8009b2e:	220a      	movs	r2, #10
 8009b30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b32:	7805      	ldrb	r5, [r0, #0]
 8009b34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009b38:	b2d9      	uxtb	r1, r3
 8009b3a:	2909      	cmp	r1, #9
 8009b3c:	d928      	bls.n	8009b90 <_strtod_l+0x1a8>
 8009b3e:	494e      	ldr	r1, [pc, #312]	@ (8009c78 <_strtod_l+0x290>)
 8009b40:	2201      	movs	r2, #1
 8009b42:	f001 fd52 	bl	800b5ea <strncmp>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d032      	beq.n	8009bb0 <_strtod_l+0x1c8>
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	462a      	mov	r2, r5
 8009b4e:	4681      	mov	r9, r0
 8009b50:	463d      	mov	r5, r7
 8009b52:	4603      	mov	r3, r0
 8009b54:	2a65      	cmp	r2, #101	@ 0x65
 8009b56:	d001      	beq.n	8009b5c <_strtod_l+0x174>
 8009b58:	2a45      	cmp	r2, #69	@ 0x45
 8009b5a:	d114      	bne.n	8009b86 <_strtod_l+0x19e>
 8009b5c:	b91d      	cbnz	r5, 8009b66 <_strtod_l+0x17e>
 8009b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b60:	4302      	orrs	r2, r0
 8009b62:	d095      	beq.n	8009a90 <_strtod_l+0xa8>
 8009b64:	2500      	movs	r5, #0
 8009b66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009b68:	1c62      	adds	r2, r4, #1
 8009b6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b6c:	7862      	ldrb	r2, [r4, #1]
 8009b6e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009b70:	d077      	beq.n	8009c62 <_strtod_l+0x27a>
 8009b72:	2a2d      	cmp	r2, #45	@ 0x2d
 8009b74:	d07b      	beq.n	8009c6e <_strtod_l+0x286>
 8009b76:	f04f 0c00 	mov.w	ip, #0
 8009b7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009b7e:	2909      	cmp	r1, #9
 8009b80:	f240 8082 	bls.w	8009c88 <_strtod_l+0x2a0>
 8009b84:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b86:	f04f 0800 	mov.w	r8, #0
 8009b8a:	e0a2      	b.n	8009cd2 <_strtod_l+0x2ea>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e7c7      	b.n	8009b20 <_strtod_l+0x138>
 8009b90:	2f08      	cmp	r7, #8
 8009b92:	bfd5      	itete	le
 8009b94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009b96:	9908      	ldrgt	r1, [sp, #32]
 8009b98:	fb02 3301 	mlale	r3, r2, r1, r3
 8009b9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009ba0:	f100 0001 	add.w	r0, r0, #1
 8009ba4:	bfd4      	ite	le
 8009ba6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009ba8:	9308      	strgt	r3, [sp, #32]
 8009baa:	3701      	adds	r7, #1
 8009bac:	9019      	str	r0, [sp, #100]	@ 0x64
 8009bae:	e7bf      	b.n	8009b30 <_strtod_l+0x148>
 8009bb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bb2:	1c5a      	adds	r2, r3, #1
 8009bb4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bb6:	785a      	ldrb	r2, [r3, #1]
 8009bb8:	b37f      	cbz	r7, 8009c1a <_strtod_l+0x232>
 8009bba:	4681      	mov	r9, r0
 8009bbc:	463d      	mov	r5, r7
 8009bbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009bc2:	2b09      	cmp	r3, #9
 8009bc4:	d912      	bls.n	8009bec <_strtod_l+0x204>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e7c4      	b.n	8009b54 <_strtod_l+0x16c>
 8009bca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bcc:	1c5a      	adds	r2, r3, #1
 8009bce:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bd0:	785a      	ldrb	r2, [r3, #1]
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	2a30      	cmp	r2, #48	@ 0x30
 8009bd6:	d0f8      	beq.n	8009bca <_strtod_l+0x1e2>
 8009bd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009bdc:	2b08      	cmp	r3, #8
 8009bde:	f200 84d3 	bhi.w	800a588 <_strtod_l+0xba0>
 8009be2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009be4:	930c      	str	r3, [sp, #48]	@ 0x30
 8009be6:	4681      	mov	r9, r0
 8009be8:	2000      	movs	r0, #0
 8009bea:	4605      	mov	r5, r0
 8009bec:	3a30      	subs	r2, #48	@ 0x30
 8009bee:	f100 0301 	add.w	r3, r0, #1
 8009bf2:	d02a      	beq.n	8009c4a <_strtod_l+0x262>
 8009bf4:	4499      	add	r9, r3
 8009bf6:	eb00 0c05 	add.w	ip, r0, r5
 8009bfa:	462b      	mov	r3, r5
 8009bfc:	210a      	movs	r1, #10
 8009bfe:	4563      	cmp	r3, ip
 8009c00:	d10d      	bne.n	8009c1e <_strtod_l+0x236>
 8009c02:	1c69      	adds	r1, r5, #1
 8009c04:	4401      	add	r1, r0
 8009c06:	4428      	add	r0, r5
 8009c08:	2808      	cmp	r0, #8
 8009c0a:	dc16      	bgt.n	8009c3a <_strtod_l+0x252>
 8009c0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009c0e:	230a      	movs	r3, #10
 8009c10:	fb03 2300 	mla	r3, r3, r0, r2
 8009c14:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c16:	2300      	movs	r3, #0
 8009c18:	e018      	b.n	8009c4c <_strtod_l+0x264>
 8009c1a:	4638      	mov	r0, r7
 8009c1c:	e7da      	b.n	8009bd4 <_strtod_l+0x1ec>
 8009c1e:	2b08      	cmp	r3, #8
 8009c20:	f103 0301 	add.w	r3, r3, #1
 8009c24:	dc03      	bgt.n	8009c2e <_strtod_l+0x246>
 8009c26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009c28:	434e      	muls	r6, r1
 8009c2a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009c2c:	e7e7      	b.n	8009bfe <_strtod_l+0x216>
 8009c2e:	2b10      	cmp	r3, #16
 8009c30:	bfde      	ittt	le
 8009c32:	9e08      	ldrle	r6, [sp, #32]
 8009c34:	434e      	mulle	r6, r1
 8009c36:	9608      	strle	r6, [sp, #32]
 8009c38:	e7e1      	b.n	8009bfe <_strtod_l+0x216>
 8009c3a:	280f      	cmp	r0, #15
 8009c3c:	dceb      	bgt.n	8009c16 <_strtod_l+0x22e>
 8009c3e:	9808      	ldr	r0, [sp, #32]
 8009c40:	230a      	movs	r3, #10
 8009c42:	fb03 2300 	mla	r3, r3, r0, r2
 8009c46:	9308      	str	r3, [sp, #32]
 8009c48:	e7e5      	b.n	8009c16 <_strtod_l+0x22e>
 8009c4a:	4629      	mov	r1, r5
 8009c4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c4e:	1c50      	adds	r0, r2, #1
 8009c50:	9019      	str	r0, [sp, #100]	@ 0x64
 8009c52:	7852      	ldrb	r2, [r2, #1]
 8009c54:	4618      	mov	r0, r3
 8009c56:	460d      	mov	r5, r1
 8009c58:	e7b1      	b.n	8009bbe <_strtod_l+0x1d6>
 8009c5a:	f04f 0900 	mov.w	r9, #0
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e77d      	b.n	8009b5e <_strtod_l+0x176>
 8009c62:	f04f 0c00 	mov.w	ip, #0
 8009c66:	1ca2      	adds	r2, r4, #2
 8009c68:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c6a:	78a2      	ldrb	r2, [r4, #2]
 8009c6c:	e785      	b.n	8009b7a <_strtod_l+0x192>
 8009c6e:	f04f 0c01 	mov.w	ip, #1
 8009c72:	e7f8      	b.n	8009c66 <_strtod_l+0x27e>
 8009c74:	0800f5e4 	.word	0x0800f5e4
 8009c78:	0800f5cc 	.word	0x0800f5cc
 8009c7c:	7ff00000 	.word	0x7ff00000
 8009c80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c82:	1c51      	adds	r1, r2, #1
 8009c84:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c86:	7852      	ldrb	r2, [r2, #1]
 8009c88:	2a30      	cmp	r2, #48	@ 0x30
 8009c8a:	d0f9      	beq.n	8009c80 <_strtod_l+0x298>
 8009c8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009c90:	2908      	cmp	r1, #8
 8009c92:	f63f af78 	bhi.w	8009b86 <_strtod_l+0x19e>
 8009c96:	3a30      	subs	r2, #48	@ 0x30
 8009c98:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009c9e:	f04f 080a 	mov.w	r8, #10
 8009ca2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ca4:	1c56      	adds	r6, r2, #1
 8009ca6:	9619      	str	r6, [sp, #100]	@ 0x64
 8009ca8:	7852      	ldrb	r2, [r2, #1]
 8009caa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009cae:	f1be 0f09 	cmp.w	lr, #9
 8009cb2:	d939      	bls.n	8009d28 <_strtod_l+0x340>
 8009cb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009cb6:	1a76      	subs	r6, r6, r1
 8009cb8:	2e08      	cmp	r6, #8
 8009cba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009cbe:	dc03      	bgt.n	8009cc8 <_strtod_l+0x2e0>
 8009cc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009cc2:	4588      	cmp	r8, r1
 8009cc4:	bfa8      	it	ge
 8009cc6:	4688      	movge	r8, r1
 8009cc8:	f1bc 0f00 	cmp.w	ip, #0
 8009ccc:	d001      	beq.n	8009cd2 <_strtod_l+0x2ea>
 8009cce:	f1c8 0800 	rsb	r8, r8, #0
 8009cd2:	2d00      	cmp	r5, #0
 8009cd4:	d14e      	bne.n	8009d74 <_strtod_l+0x38c>
 8009cd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009cd8:	4308      	orrs	r0, r1
 8009cda:	f47f aebe 	bne.w	8009a5a <_strtod_l+0x72>
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f47f aed6 	bne.w	8009a90 <_strtod_l+0xa8>
 8009ce4:	2a69      	cmp	r2, #105	@ 0x69
 8009ce6:	d028      	beq.n	8009d3a <_strtod_l+0x352>
 8009ce8:	dc25      	bgt.n	8009d36 <_strtod_l+0x34e>
 8009cea:	2a49      	cmp	r2, #73	@ 0x49
 8009cec:	d025      	beq.n	8009d3a <_strtod_l+0x352>
 8009cee:	2a4e      	cmp	r2, #78	@ 0x4e
 8009cf0:	f47f aece 	bne.w	8009a90 <_strtod_l+0xa8>
 8009cf4:	499b      	ldr	r1, [pc, #620]	@ (8009f64 <_strtod_l+0x57c>)
 8009cf6:	a819      	add	r0, sp, #100	@ 0x64
 8009cf8:	f002 fe42 	bl	800c980 <__match>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f43f aec7 	beq.w	8009a90 <_strtod_l+0xa8>
 8009d02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b28      	cmp	r3, #40	@ 0x28
 8009d08:	d12e      	bne.n	8009d68 <_strtod_l+0x380>
 8009d0a:	4997      	ldr	r1, [pc, #604]	@ (8009f68 <_strtod_l+0x580>)
 8009d0c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d0e:	a819      	add	r0, sp, #100	@ 0x64
 8009d10:	f002 fe4a 	bl	800c9a8 <__hexnan>
 8009d14:	2805      	cmp	r0, #5
 8009d16:	d127      	bne.n	8009d68 <_strtod_l+0x380>
 8009d18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d26:	e698      	b.n	8009a5a <_strtod_l+0x72>
 8009d28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009d2a:	fb08 2101 	mla	r1, r8, r1, r2
 8009d2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d32:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d34:	e7b5      	b.n	8009ca2 <_strtod_l+0x2ba>
 8009d36:	2a6e      	cmp	r2, #110	@ 0x6e
 8009d38:	e7da      	b.n	8009cf0 <_strtod_l+0x308>
 8009d3a:	498c      	ldr	r1, [pc, #560]	@ (8009f6c <_strtod_l+0x584>)
 8009d3c:	a819      	add	r0, sp, #100	@ 0x64
 8009d3e:	f002 fe1f 	bl	800c980 <__match>
 8009d42:	2800      	cmp	r0, #0
 8009d44:	f43f aea4 	beq.w	8009a90 <_strtod_l+0xa8>
 8009d48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d4a:	4989      	ldr	r1, [pc, #548]	@ (8009f70 <_strtod_l+0x588>)
 8009d4c:	3b01      	subs	r3, #1
 8009d4e:	a819      	add	r0, sp, #100	@ 0x64
 8009d50:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d52:	f002 fe15 	bl	800c980 <__match>
 8009d56:	b910      	cbnz	r0, 8009d5e <_strtod_l+0x376>
 8009d58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009f80 <_strtod_l+0x598>
 8009d62:	f04f 0a00 	mov.w	sl, #0
 8009d66:	e678      	b.n	8009a5a <_strtod_l+0x72>
 8009d68:	4882      	ldr	r0, [pc, #520]	@ (8009f74 <_strtod_l+0x58c>)
 8009d6a:	f001 fcd9 	bl	800b720 <nan>
 8009d6e:	ec5b ab10 	vmov	sl, fp, d0
 8009d72:	e672      	b.n	8009a5a <_strtod_l+0x72>
 8009d74:	eba8 0309 	sub.w	r3, r8, r9
 8009d78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d7c:	2f00      	cmp	r7, #0
 8009d7e:	bf08      	it	eq
 8009d80:	462f      	moveq	r7, r5
 8009d82:	2d10      	cmp	r5, #16
 8009d84:	462c      	mov	r4, r5
 8009d86:	bfa8      	it	ge
 8009d88:	2410      	movge	r4, #16
 8009d8a:	f7f6 fbbb 	bl	8000504 <__aeabi_ui2d>
 8009d8e:	2d09      	cmp	r5, #9
 8009d90:	4682      	mov	sl, r0
 8009d92:	468b      	mov	fp, r1
 8009d94:	dc13      	bgt.n	8009dbe <_strtod_l+0x3d6>
 8009d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f43f ae5e 	beq.w	8009a5a <_strtod_l+0x72>
 8009d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da0:	dd78      	ble.n	8009e94 <_strtod_l+0x4ac>
 8009da2:	2b16      	cmp	r3, #22
 8009da4:	dc5f      	bgt.n	8009e66 <_strtod_l+0x47e>
 8009da6:	4974      	ldr	r1, [pc, #464]	@ (8009f78 <_strtod_l+0x590>)
 8009da8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009dac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db0:	4652      	mov	r2, sl
 8009db2:	465b      	mov	r3, fp
 8009db4:	f7f6 fc20 	bl	80005f8 <__aeabi_dmul>
 8009db8:	4682      	mov	sl, r0
 8009dba:	468b      	mov	fp, r1
 8009dbc:	e64d      	b.n	8009a5a <_strtod_l+0x72>
 8009dbe:	4b6e      	ldr	r3, [pc, #440]	@ (8009f78 <_strtod_l+0x590>)
 8009dc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009dc8:	f7f6 fc16 	bl	80005f8 <__aeabi_dmul>
 8009dcc:	4682      	mov	sl, r0
 8009dce:	9808      	ldr	r0, [sp, #32]
 8009dd0:	468b      	mov	fp, r1
 8009dd2:	f7f6 fb97 	bl	8000504 <__aeabi_ui2d>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4650      	mov	r0, sl
 8009ddc:	4659      	mov	r1, fp
 8009dde:	f7f6 fa55 	bl	800028c <__adddf3>
 8009de2:	2d0f      	cmp	r5, #15
 8009de4:	4682      	mov	sl, r0
 8009de6:	468b      	mov	fp, r1
 8009de8:	ddd5      	ble.n	8009d96 <_strtod_l+0x3ae>
 8009dea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dec:	1b2c      	subs	r4, r5, r4
 8009dee:	441c      	add	r4, r3
 8009df0:	2c00      	cmp	r4, #0
 8009df2:	f340 8096 	ble.w	8009f22 <_strtod_l+0x53a>
 8009df6:	f014 030f 	ands.w	r3, r4, #15
 8009dfa:	d00a      	beq.n	8009e12 <_strtod_l+0x42a>
 8009dfc:	495e      	ldr	r1, [pc, #376]	@ (8009f78 <_strtod_l+0x590>)
 8009dfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e02:	4652      	mov	r2, sl
 8009e04:	465b      	mov	r3, fp
 8009e06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e0a:	f7f6 fbf5 	bl	80005f8 <__aeabi_dmul>
 8009e0e:	4682      	mov	sl, r0
 8009e10:	468b      	mov	fp, r1
 8009e12:	f034 040f 	bics.w	r4, r4, #15
 8009e16:	d073      	beq.n	8009f00 <_strtod_l+0x518>
 8009e18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e1c:	dd48      	ble.n	8009eb0 <_strtod_l+0x4c8>
 8009e1e:	2400      	movs	r4, #0
 8009e20:	46a0      	mov	r8, r4
 8009e22:	940a      	str	r4, [sp, #40]	@ 0x28
 8009e24:	46a1      	mov	r9, r4
 8009e26:	9a05      	ldr	r2, [sp, #20]
 8009e28:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009f80 <_strtod_l+0x598>
 8009e2c:	2322      	movs	r3, #34	@ 0x22
 8009e2e:	6013      	str	r3, [r2, #0]
 8009e30:	f04f 0a00 	mov.w	sl, #0
 8009e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f43f ae0f 	beq.w	8009a5a <_strtod_l+0x72>
 8009e3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e3e:	9805      	ldr	r0, [sp, #20]
 8009e40:	f002 ff56 	bl	800ccf0 <_Bfree>
 8009e44:	9805      	ldr	r0, [sp, #20]
 8009e46:	4649      	mov	r1, r9
 8009e48:	f002 ff52 	bl	800ccf0 <_Bfree>
 8009e4c:	9805      	ldr	r0, [sp, #20]
 8009e4e:	4641      	mov	r1, r8
 8009e50:	f002 ff4e 	bl	800ccf0 <_Bfree>
 8009e54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e56:	9805      	ldr	r0, [sp, #20]
 8009e58:	f002 ff4a 	bl	800ccf0 <_Bfree>
 8009e5c:	9805      	ldr	r0, [sp, #20]
 8009e5e:	4621      	mov	r1, r4
 8009e60:	f002 ff46 	bl	800ccf0 <_Bfree>
 8009e64:	e5f9      	b.n	8009a5a <_strtod_l+0x72>
 8009e66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	dbbc      	blt.n	8009dea <_strtod_l+0x402>
 8009e70:	4c41      	ldr	r4, [pc, #260]	@ (8009f78 <_strtod_l+0x590>)
 8009e72:	f1c5 050f 	rsb	r5, r5, #15
 8009e76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e7a:	4652      	mov	r2, sl
 8009e7c:	465b      	mov	r3, fp
 8009e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e82:	f7f6 fbb9 	bl	80005f8 <__aeabi_dmul>
 8009e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e88:	1b5d      	subs	r5, r3, r5
 8009e8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e92:	e78f      	b.n	8009db4 <_strtod_l+0x3cc>
 8009e94:	3316      	adds	r3, #22
 8009e96:	dba8      	blt.n	8009dea <_strtod_l+0x402>
 8009e98:	4b37      	ldr	r3, [pc, #220]	@ (8009f78 <_strtod_l+0x590>)
 8009e9a:	eba9 0808 	sub.w	r8, r9, r8
 8009e9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009ea2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009ea6:	4650      	mov	r0, sl
 8009ea8:	4659      	mov	r1, fp
 8009eaa:	f7f6 fccf 	bl	800084c <__aeabi_ddiv>
 8009eae:	e783      	b.n	8009db8 <_strtod_l+0x3d0>
 8009eb0:	4b32      	ldr	r3, [pc, #200]	@ (8009f7c <_strtod_l+0x594>)
 8009eb2:	9308      	str	r3, [sp, #32]
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	1124      	asrs	r4, r4, #4
 8009eb8:	4650      	mov	r0, sl
 8009eba:	4659      	mov	r1, fp
 8009ebc:	461e      	mov	r6, r3
 8009ebe:	2c01      	cmp	r4, #1
 8009ec0:	dc21      	bgt.n	8009f06 <_strtod_l+0x51e>
 8009ec2:	b10b      	cbz	r3, 8009ec8 <_strtod_l+0x4e0>
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	468b      	mov	fp, r1
 8009ec8:	492c      	ldr	r1, [pc, #176]	@ (8009f7c <_strtod_l+0x594>)
 8009eca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009ece:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009ed2:	4652      	mov	r2, sl
 8009ed4:	465b      	mov	r3, fp
 8009ed6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eda:	f7f6 fb8d 	bl	80005f8 <__aeabi_dmul>
 8009ede:	4b28      	ldr	r3, [pc, #160]	@ (8009f80 <_strtod_l+0x598>)
 8009ee0:	460a      	mov	r2, r1
 8009ee2:	400b      	ands	r3, r1
 8009ee4:	4927      	ldr	r1, [pc, #156]	@ (8009f84 <_strtod_l+0x59c>)
 8009ee6:	428b      	cmp	r3, r1
 8009ee8:	4682      	mov	sl, r0
 8009eea:	d898      	bhi.n	8009e1e <_strtod_l+0x436>
 8009eec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	bf86      	itte	hi
 8009ef4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009f88 <_strtod_l+0x5a0>
 8009ef8:	f04f 3aff 	movhi.w	sl, #4294967295
 8009efc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f00:	2300      	movs	r3, #0
 8009f02:	9308      	str	r3, [sp, #32]
 8009f04:	e07a      	b.n	8009ffc <_strtod_l+0x614>
 8009f06:	07e2      	lsls	r2, r4, #31
 8009f08:	d505      	bpl.n	8009f16 <_strtod_l+0x52e>
 8009f0a:	9b08      	ldr	r3, [sp, #32]
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f7f6 fb72 	bl	80005f8 <__aeabi_dmul>
 8009f14:	2301      	movs	r3, #1
 8009f16:	9a08      	ldr	r2, [sp, #32]
 8009f18:	3208      	adds	r2, #8
 8009f1a:	3601      	adds	r6, #1
 8009f1c:	1064      	asrs	r4, r4, #1
 8009f1e:	9208      	str	r2, [sp, #32]
 8009f20:	e7cd      	b.n	8009ebe <_strtod_l+0x4d6>
 8009f22:	d0ed      	beq.n	8009f00 <_strtod_l+0x518>
 8009f24:	4264      	negs	r4, r4
 8009f26:	f014 020f 	ands.w	r2, r4, #15
 8009f2a:	d00a      	beq.n	8009f42 <_strtod_l+0x55a>
 8009f2c:	4b12      	ldr	r3, [pc, #72]	@ (8009f78 <_strtod_l+0x590>)
 8009f2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f32:	4650      	mov	r0, sl
 8009f34:	4659      	mov	r1, fp
 8009f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3a:	f7f6 fc87 	bl	800084c <__aeabi_ddiv>
 8009f3e:	4682      	mov	sl, r0
 8009f40:	468b      	mov	fp, r1
 8009f42:	1124      	asrs	r4, r4, #4
 8009f44:	d0dc      	beq.n	8009f00 <_strtod_l+0x518>
 8009f46:	2c1f      	cmp	r4, #31
 8009f48:	dd20      	ble.n	8009f8c <_strtod_l+0x5a4>
 8009f4a:	2400      	movs	r4, #0
 8009f4c:	46a0      	mov	r8, r4
 8009f4e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f50:	46a1      	mov	r9, r4
 8009f52:	9a05      	ldr	r2, [sp, #20]
 8009f54:	2322      	movs	r3, #34	@ 0x22
 8009f56:	f04f 0a00 	mov.w	sl, #0
 8009f5a:	f04f 0b00 	mov.w	fp, #0
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	e768      	b.n	8009e34 <_strtod_l+0x44c>
 8009f62:	bf00      	nop
 8009f64:	0800f62d 	.word	0x0800f62d
 8009f68:	0800f5d0 	.word	0x0800f5d0
 8009f6c:	0800f625 	.word	0x0800f625
 8009f70:	0800f664 	.word	0x0800f664
 8009f74:	0800f9f5 	.word	0x0800f9f5
 8009f78:	0800f7e0 	.word	0x0800f7e0
 8009f7c:	0800f7b8 	.word	0x0800f7b8
 8009f80:	7ff00000 	.word	0x7ff00000
 8009f84:	7ca00000 	.word	0x7ca00000
 8009f88:	7fefffff 	.word	0x7fefffff
 8009f8c:	f014 0310 	ands.w	r3, r4, #16
 8009f90:	bf18      	it	ne
 8009f92:	236a      	movne	r3, #106	@ 0x6a
 8009f94:	4ea9      	ldr	r6, [pc, #676]	@ (800a23c <_strtod_l+0x854>)
 8009f96:	9308      	str	r3, [sp, #32]
 8009f98:	4650      	mov	r0, sl
 8009f9a:	4659      	mov	r1, fp
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	07e2      	lsls	r2, r4, #31
 8009fa0:	d504      	bpl.n	8009fac <_strtod_l+0x5c4>
 8009fa2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fa6:	f7f6 fb27 	bl	80005f8 <__aeabi_dmul>
 8009faa:	2301      	movs	r3, #1
 8009fac:	1064      	asrs	r4, r4, #1
 8009fae:	f106 0608 	add.w	r6, r6, #8
 8009fb2:	d1f4      	bne.n	8009f9e <_strtod_l+0x5b6>
 8009fb4:	b10b      	cbz	r3, 8009fba <_strtod_l+0x5d2>
 8009fb6:	4682      	mov	sl, r0
 8009fb8:	468b      	mov	fp, r1
 8009fba:	9b08      	ldr	r3, [sp, #32]
 8009fbc:	b1b3      	cbz	r3, 8009fec <_strtod_l+0x604>
 8009fbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009fc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	4659      	mov	r1, fp
 8009fca:	dd0f      	ble.n	8009fec <_strtod_l+0x604>
 8009fcc:	2b1f      	cmp	r3, #31
 8009fce:	dd55      	ble.n	800a07c <_strtod_l+0x694>
 8009fd0:	2b34      	cmp	r3, #52	@ 0x34
 8009fd2:	bfde      	ittt	le
 8009fd4:	f04f 33ff 	movle.w	r3, #4294967295
 8009fd8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009fdc:	4093      	lslle	r3, r2
 8009fde:	f04f 0a00 	mov.w	sl, #0
 8009fe2:	bfcc      	ite	gt
 8009fe4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009fe8:	ea03 0b01 	andle.w	fp, r3, r1
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	f7f6 fd68 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1a6      	bne.n	8009f4a <_strtod_l+0x562>
 8009ffc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a002:	9805      	ldr	r0, [sp, #20]
 800a004:	462b      	mov	r3, r5
 800a006:	463a      	mov	r2, r7
 800a008:	f002 feda 	bl	800cdc0 <__s2b>
 800a00c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a00e:	2800      	cmp	r0, #0
 800a010:	f43f af05 	beq.w	8009e1e <_strtod_l+0x436>
 800a014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a016:	2a00      	cmp	r2, #0
 800a018:	eba9 0308 	sub.w	r3, r9, r8
 800a01c:	bfa8      	it	ge
 800a01e:	2300      	movge	r3, #0
 800a020:	9312      	str	r3, [sp, #72]	@ 0x48
 800a022:	2400      	movs	r4, #0
 800a024:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a028:	9316      	str	r3, [sp, #88]	@ 0x58
 800a02a:	46a0      	mov	r8, r4
 800a02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a02e:	9805      	ldr	r0, [sp, #20]
 800a030:	6859      	ldr	r1, [r3, #4]
 800a032:	f002 fe1d 	bl	800cc70 <_Balloc>
 800a036:	4681      	mov	r9, r0
 800a038:	2800      	cmp	r0, #0
 800a03a:	f43f aef4 	beq.w	8009e26 <_strtod_l+0x43e>
 800a03e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a040:	691a      	ldr	r2, [r3, #16]
 800a042:	3202      	adds	r2, #2
 800a044:	f103 010c 	add.w	r1, r3, #12
 800a048:	0092      	lsls	r2, r2, #2
 800a04a:	300c      	adds	r0, #12
 800a04c:	f001 fb57 	bl	800b6fe <memcpy>
 800a050:	ec4b ab10 	vmov	d0, sl, fp
 800a054:	9805      	ldr	r0, [sp, #20]
 800a056:	aa1c      	add	r2, sp, #112	@ 0x70
 800a058:	a91b      	add	r1, sp, #108	@ 0x6c
 800a05a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a05e:	f003 f9eb 	bl	800d438 <__d2b>
 800a062:	901a      	str	r0, [sp, #104]	@ 0x68
 800a064:	2800      	cmp	r0, #0
 800a066:	f43f aede 	beq.w	8009e26 <_strtod_l+0x43e>
 800a06a:	9805      	ldr	r0, [sp, #20]
 800a06c:	2101      	movs	r1, #1
 800a06e:	f002 ff3d 	bl	800ceec <__i2b>
 800a072:	4680      	mov	r8, r0
 800a074:	b948      	cbnz	r0, 800a08a <_strtod_l+0x6a2>
 800a076:	f04f 0800 	mov.w	r8, #0
 800a07a:	e6d4      	b.n	8009e26 <_strtod_l+0x43e>
 800a07c:	f04f 32ff 	mov.w	r2, #4294967295
 800a080:	fa02 f303 	lsl.w	r3, r2, r3
 800a084:	ea03 0a0a 	and.w	sl, r3, sl
 800a088:	e7b0      	b.n	8009fec <_strtod_l+0x604>
 800a08a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a08c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a08e:	2d00      	cmp	r5, #0
 800a090:	bfab      	itete	ge
 800a092:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a094:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a096:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a098:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a09a:	bfac      	ite	ge
 800a09c:	18ef      	addge	r7, r5, r3
 800a09e:	1b5e      	sublt	r6, r3, r5
 800a0a0:	9b08      	ldr	r3, [sp, #32]
 800a0a2:	1aed      	subs	r5, r5, r3
 800a0a4:	4415      	add	r5, r2
 800a0a6:	4b66      	ldr	r3, [pc, #408]	@ (800a240 <_strtod_l+0x858>)
 800a0a8:	3d01      	subs	r5, #1
 800a0aa:	429d      	cmp	r5, r3
 800a0ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a0b0:	da50      	bge.n	800a154 <_strtod_l+0x76c>
 800a0b2:	1b5b      	subs	r3, r3, r5
 800a0b4:	2b1f      	cmp	r3, #31
 800a0b6:	eba2 0203 	sub.w	r2, r2, r3
 800a0ba:	f04f 0101 	mov.w	r1, #1
 800a0be:	dc3d      	bgt.n	800a13c <_strtod_l+0x754>
 800a0c0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0ca:	18bd      	adds	r5, r7, r2
 800a0cc:	9b08      	ldr	r3, [sp, #32]
 800a0ce:	42af      	cmp	r7, r5
 800a0d0:	4416      	add	r6, r2
 800a0d2:	441e      	add	r6, r3
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	bfa8      	it	ge
 800a0d8:	462b      	movge	r3, r5
 800a0da:	42b3      	cmp	r3, r6
 800a0dc:	bfa8      	it	ge
 800a0de:	4633      	movge	r3, r6
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfc2      	ittt	gt
 800a0e4:	1aed      	subgt	r5, r5, r3
 800a0e6:	1af6      	subgt	r6, r6, r3
 800a0e8:	1aff      	subgt	r7, r7, r3
 800a0ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	dd16      	ble.n	800a11e <_strtod_l+0x736>
 800a0f0:	4641      	mov	r1, r8
 800a0f2:	9805      	ldr	r0, [sp, #20]
 800a0f4:	461a      	mov	r2, r3
 800a0f6:	f002 ffb9 	bl	800d06c <__pow5mult>
 800a0fa:	4680      	mov	r8, r0
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d0ba      	beq.n	800a076 <_strtod_l+0x68e>
 800a100:	4601      	mov	r1, r0
 800a102:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a104:	9805      	ldr	r0, [sp, #20]
 800a106:	f002 ff07 	bl	800cf18 <__multiply>
 800a10a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a10c:	2800      	cmp	r0, #0
 800a10e:	f43f ae8a 	beq.w	8009e26 <_strtod_l+0x43e>
 800a112:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a114:	9805      	ldr	r0, [sp, #20]
 800a116:	f002 fdeb 	bl	800ccf0 <_Bfree>
 800a11a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a11c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a11e:	2d00      	cmp	r5, #0
 800a120:	dc1d      	bgt.n	800a15e <_strtod_l+0x776>
 800a122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a124:	2b00      	cmp	r3, #0
 800a126:	dd23      	ble.n	800a170 <_strtod_l+0x788>
 800a128:	4649      	mov	r1, r9
 800a12a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a12c:	9805      	ldr	r0, [sp, #20]
 800a12e:	f002 ff9d 	bl	800d06c <__pow5mult>
 800a132:	4681      	mov	r9, r0
 800a134:	b9e0      	cbnz	r0, 800a170 <_strtod_l+0x788>
 800a136:	f04f 0900 	mov.w	r9, #0
 800a13a:	e674      	b.n	8009e26 <_strtod_l+0x43e>
 800a13c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a140:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a144:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a148:	35e2      	adds	r5, #226	@ 0xe2
 800a14a:	fa01 f305 	lsl.w	r3, r1, r5
 800a14e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a150:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a152:	e7ba      	b.n	800a0ca <_strtod_l+0x6e2>
 800a154:	2300      	movs	r3, #0
 800a156:	9310      	str	r3, [sp, #64]	@ 0x40
 800a158:	2301      	movs	r3, #1
 800a15a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a15c:	e7b5      	b.n	800a0ca <_strtod_l+0x6e2>
 800a15e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a160:	9805      	ldr	r0, [sp, #20]
 800a162:	462a      	mov	r2, r5
 800a164:	f002 ffdc 	bl	800d120 <__lshift>
 800a168:	901a      	str	r0, [sp, #104]	@ 0x68
 800a16a:	2800      	cmp	r0, #0
 800a16c:	d1d9      	bne.n	800a122 <_strtod_l+0x73a>
 800a16e:	e65a      	b.n	8009e26 <_strtod_l+0x43e>
 800a170:	2e00      	cmp	r6, #0
 800a172:	dd07      	ble.n	800a184 <_strtod_l+0x79c>
 800a174:	4649      	mov	r1, r9
 800a176:	9805      	ldr	r0, [sp, #20]
 800a178:	4632      	mov	r2, r6
 800a17a:	f002 ffd1 	bl	800d120 <__lshift>
 800a17e:	4681      	mov	r9, r0
 800a180:	2800      	cmp	r0, #0
 800a182:	d0d8      	beq.n	800a136 <_strtod_l+0x74e>
 800a184:	2f00      	cmp	r7, #0
 800a186:	dd08      	ble.n	800a19a <_strtod_l+0x7b2>
 800a188:	4641      	mov	r1, r8
 800a18a:	9805      	ldr	r0, [sp, #20]
 800a18c:	463a      	mov	r2, r7
 800a18e:	f002 ffc7 	bl	800d120 <__lshift>
 800a192:	4680      	mov	r8, r0
 800a194:	2800      	cmp	r0, #0
 800a196:	f43f ae46 	beq.w	8009e26 <_strtod_l+0x43e>
 800a19a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a19c:	9805      	ldr	r0, [sp, #20]
 800a19e:	464a      	mov	r2, r9
 800a1a0:	f003 f846 	bl	800d230 <__mdiff>
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	f43f ae3d 	beq.w	8009e26 <_strtod_l+0x43e>
 800a1ac:	68c3      	ldr	r3, [r0, #12]
 800a1ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	60c3      	str	r3, [r0, #12]
 800a1b4:	4641      	mov	r1, r8
 800a1b6:	f003 f81f 	bl	800d1f8 <__mcmp>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	da46      	bge.n	800a24c <_strtod_l+0x864>
 800a1be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1c0:	ea53 030a 	orrs.w	r3, r3, sl
 800a1c4:	d16c      	bne.n	800a2a0 <_strtod_l+0x8b8>
 800a1c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d168      	bne.n	800a2a0 <_strtod_l+0x8b8>
 800a1ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1d2:	0d1b      	lsrs	r3, r3, #20
 800a1d4:	051b      	lsls	r3, r3, #20
 800a1d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a1da:	d961      	bls.n	800a2a0 <_strtod_l+0x8b8>
 800a1dc:	6963      	ldr	r3, [r4, #20]
 800a1de:	b913      	cbnz	r3, 800a1e6 <_strtod_l+0x7fe>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	dd5c      	ble.n	800a2a0 <_strtod_l+0x8b8>
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	9805      	ldr	r0, [sp, #20]
 800a1ec:	f002 ff98 	bl	800d120 <__lshift>
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	f003 f800 	bl	800d1f8 <__mcmp>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	dd51      	ble.n	800a2a0 <_strtod_l+0x8b8>
 800a1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a200:	9a08      	ldr	r2, [sp, #32]
 800a202:	0d1b      	lsrs	r3, r3, #20
 800a204:	051b      	lsls	r3, r3, #20
 800a206:	2a00      	cmp	r2, #0
 800a208:	d06b      	beq.n	800a2e2 <_strtod_l+0x8fa>
 800a20a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a20e:	d868      	bhi.n	800a2e2 <_strtod_l+0x8fa>
 800a210:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a214:	f67f ae9d 	bls.w	8009f52 <_strtod_l+0x56a>
 800a218:	4b0a      	ldr	r3, [pc, #40]	@ (800a244 <_strtod_l+0x85c>)
 800a21a:	4650      	mov	r0, sl
 800a21c:	4659      	mov	r1, fp
 800a21e:	2200      	movs	r2, #0
 800a220:	f7f6 f9ea 	bl	80005f8 <__aeabi_dmul>
 800a224:	4b08      	ldr	r3, [pc, #32]	@ (800a248 <_strtod_l+0x860>)
 800a226:	400b      	ands	r3, r1
 800a228:	4682      	mov	sl, r0
 800a22a:	468b      	mov	fp, r1
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f47f ae05 	bne.w	8009e3c <_strtod_l+0x454>
 800a232:	9a05      	ldr	r2, [sp, #20]
 800a234:	2322      	movs	r3, #34	@ 0x22
 800a236:	6013      	str	r3, [r2, #0]
 800a238:	e600      	b.n	8009e3c <_strtod_l+0x454>
 800a23a:	bf00      	nop
 800a23c:	0800f5f8 	.word	0x0800f5f8
 800a240:	fffffc02 	.word	0xfffffc02
 800a244:	39500000 	.word	0x39500000
 800a248:	7ff00000 	.word	0x7ff00000
 800a24c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a250:	d165      	bne.n	800a31e <_strtod_l+0x936>
 800a252:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a254:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a258:	b35a      	cbz	r2, 800a2b2 <_strtod_l+0x8ca>
 800a25a:	4a9f      	ldr	r2, [pc, #636]	@ (800a4d8 <_strtod_l+0xaf0>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d12b      	bne.n	800a2b8 <_strtod_l+0x8d0>
 800a260:	9b08      	ldr	r3, [sp, #32]
 800a262:	4651      	mov	r1, sl
 800a264:	b303      	cbz	r3, 800a2a8 <_strtod_l+0x8c0>
 800a266:	4b9d      	ldr	r3, [pc, #628]	@ (800a4dc <_strtod_l+0xaf4>)
 800a268:	465a      	mov	r2, fp
 800a26a:	4013      	ands	r3, r2
 800a26c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a270:	f04f 32ff 	mov.w	r2, #4294967295
 800a274:	d81b      	bhi.n	800a2ae <_strtod_l+0x8c6>
 800a276:	0d1b      	lsrs	r3, r3, #20
 800a278:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a27c:	fa02 f303 	lsl.w	r3, r2, r3
 800a280:	4299      	cmp	r1, r3
 800a282:	d119      	bne.n	800a2b8 <_strtod_l+0x8d0>
 800a284:	4b96      	ldr	r3, [pc, #600]	@ (800a4e0 <_strtod_l+0xaf8>)
 800a286:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a288:	429a      	cmp	r2, r3
 800a28a:	d102      	bne.n	800a292 <_strtod_l+0x8aa>
 800a28c:	3101      	adds	r1, #1
 800a28e:	f43f adca 	beq.w	8009e26 <_strtod_l+0x43e>
 800a292:	4b92      	ldr	r3, [pc, #584]	@ (800a4dc <_strtod_l+0xaf4>)
 800a294:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a296:	401a      	ands	r2, r3
 800a298:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a29c:	f04f 0a00 	mov.w	sl, #0
 800a2a0:	9b08      	ldr	r3, [sp, #32]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1b8      	bne.n	800a218 <_strtod_l+0x830>
 800a2a6:	e5c9      	b.n	8009e3c <_strtod_l+0x454>
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	e7e8      	b.n	800a280 <_strtod_l+0x898>
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	e7e6      	b.n	800a280 <_strtod_l+0x898>
 800a2b2:	ea53 030a 	orrs.w	r3, r3, sl
 800a2b6:	d0a1      	beq.n	800a1fc <_strtod_l+0x814>
 800a2b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2ba:	b1db      	cbz	r3, 800a2f4 <_strtod_l+0x90c>
 800a2bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2be:	4213      	tst	r3, r2
 800a2c0:	d0ee      	beq.n	800a2a0 <_strtod_l+0x8b8>
 800a2c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2c4:	9a08      	ldr	r2, [sp, #32]
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	b1bb      	cbz	r3, 800a2fc <_strtod_l+0x914>
 800a2cc:	f7ff fb6b 	bl	80099a6 <sulp>
 800a2d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2d4:	ec53 2b10 	vmov	r2, r3, d0
 800a2d8:	f7f5 ffd8 	bl	800028c <__adddf3>
 800a2dc:	4682      	mov	sl, r0
 800a2de:	468b      	mov	fp, r1
 800a2e0:	e7de      	b.n	800a2a0 <_strtod_l+0x8b8>
 800a2e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a2e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a2ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a2ee:	f04f 3aff 	mov.w	sl, #4294967295
 800a2f2:	e7d5      	b.n	800a2a0 <_strtod_l+0x8b8>
 800a2f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2f6:	ea13 0f0a 	tst.w	r3, sl
 800a2fa:	e7e1      	b.n	800a2c0 <_strtod_l+0x8d8>
 800a2fc:	f7ff fb53 	bl	80099a6 <sulp>
 800a300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a304:	ec53 2b10 	vmov	r2, r3, d0
 800a308:	f7f5 ffbe 	bl	8000288 <__aeabi_dsub>
 800a30c:	2200      	movs	r2, #0
 800a30e:	2300      	movs	r3, #0
 800a310:	4682      	mov	sl, r0
 800a312:	468b      	mov	fp, r1
 800a314:	f7f6 fbd8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d0c1      	beq.n	800a2a0 <_strtod_l+0x8b8>
 800a31c:	e619      	b.n	8009f52 <_strtod_l+0x56a>
 800a31e:	4641      	mov	r1, r8
 800a320:	4620      	mov	r0, r4
 800a322:	f003 f8e1 	bl	800d4e8 <__ratio>
 800a326:	ec57 6b10 	vmov	r6, r7, d0
 800a32a:	2200      	movs	r2, #0
 800a32c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f6 fbdc 	bl	8000af0 <__aeabi_dcmple>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d06f      	beq.n	800a41c <_strtod_l+0xa34>
 800a33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d17a      	bne.n	800a438 <_strtod_l+0xa50>
 800a342:	f1ba 0f00 	cmp.w	sl, #0
 800a346:	d158      	bne.n	800a3fa <_strtod_l+0xa12>
 800a348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a34a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d15a      	bne.n	800a408 <_strtod_l+0xa20>
 800a352:	4b64      	ldr	r3, [pc, #400]	@ (800a4e4 <_strtod_l+0xafc>)
 800a354:	2200      	movs	r2, #0
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	f7f6 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	d159      	bne.n	800a416 <_strtod_l+0xa2e>
 800a362:	4630      	mov	r0, r6
 800a364:	4639      	mov	r1, r7
 800a366:	4b60      	ldr	r3, [pc, #384]	@ (800a4e8 <_strtod_l+0xb00>)
 800a368:	2200      	movs	r2, #0
 800a36a:	f7f6 f945 	bl	80005f8 <__aeabi_dmul>
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a376:	9606      	str	r6, [sp, #24]
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a37e:	4d57      	ldr	r5, [pc, #348]	@ (800a4dc <_strtod_l+0xaf4>)
 800a380:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a384:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a386:	401d      	ands	r5, r3
 800a388:	4b58      	ldr	r3, [pc, #352]	@ (800a4ec <_strtod_l+0xb04>)
 800a38a:	429d      	cmp	r5, r3
 800a38c:	f040 80b2 	bne.w	800a4f4 <_strtod_l+0xb0c>
 800a390:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a392:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a396:	ec4b ab10 	vmov	d0, sl, fp
 800a39a:	f002 ffdd 	bl	800d358 <__ulp>
 800a39e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3a2:	ec51 0b10 	vmov	r0, r1, d0
 800a3a6:	f7f6 f927 	bl	80005f8 <__aeabi_dmul>
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	f7f5 ff6d 	bl	800028c <__adddf3>
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4949      	ldr	r1, [pc, #292]	@ (800a4dc <_strtod_l+0xaf4>)
 800a3b6:	4a4e      	ldr	r2, [pc, #312]	@ (800a4f0 <_strtod_l+0xb08>)
 800a3b8:	4019      	ands	r1, r3
 800a3ba:	4291      	cmp	r1, r2
 800a3bc:	4682      	mov	sl, r0
 800a3be:	d942      	bls.n	800a446 <_strtod_l+0xa5e>
 800a3c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a3c2:	4b47      	ldr	r3, [pc, #284]	@ (800a4e0 <_strtod_l+0xaf8>)
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d103      	bne.n	800a3d0 <_strtod_l+0x9e8>
 800a3c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	f43f ad2b 	beq.w	8009e26 <_strtod_l+0x43e>
 800a3d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a4e0 <_strtod_l+0xaf8>
 800a3d4:	f04f 3aff 	mov.w	sl, #4294967295
 800a3d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3da:	9805      	ldr	r0, [sp, #20]
 800a3dc:	f002 fc88 	bl	800ccf0 <_Bfree>
 800a3e0:	9805      	ldr	r0, [sp, #20]
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f002 fc84 	bl	800ccf0 <_Bfree>
 800a3e8:	9805      	ldr	r0, [sp, #20]
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	f002 fc80 	bl	800ccf0 <_Bfree>
 800a3f0:	9805      	ldr	r0, [sp, #20]
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	f002 fc7c 	bl	800ccf0 <_Bfree>
 800a3f8:	e618      	b.n	800a02c <_strtod_l+0x644>
 800a3fa:	f1ba 0f01 	cmp.w	sl, #1
 800a3fe:	d103      	bne.n	800a408 <_strtod_l+0xa20>
 800a400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a402:	2b00      	cmp	r3, #0
 800a404:	f43f ada5 	beq.w	8009f52 <_strtod_l+0x56a>
 800a408:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a4b8 <_strtod_l+0xad0>
 800a40c:	4f35      	ldr	r7, [pc, #212]	@ (800a4e4 <_strtod_l+0xafc>)
 800a40e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a412:	2600      	movs	r6, #0
 800a414:	e7b1      	b.n	800a37a <_strtod_l+0x992>
 800a416:	4f34      	ldr	r7, [pc, #208]	@ (800a4e8 <_strtod_l+0xb00>)
 800a418:	2600      	movs	r6, #0
 800a41a:	e7aa      	b.n	800a372 <_strtod_l+0x98a>
 800a41c:	4b32      	ldr	r3, [pc, #200]	@ (800a4e8 <_strtod_l+0xb00>)
 800a41e:	4630      	mov	r0, r6
 800a420:	4639      	mov	r1, r7
 800a422:	2200      	movs	r2, #0
 800a424:	f7f6 f8e8 	bl	80005f8 <__aeabi_dmul>
 800a428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d09f      	beq.n	800a372 <_strtod_l+0x98a>
 800a432:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a436:	e7a0      	b.n	800a37a <_strtod_l+0x992>
 800a438:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a4c0 <_strtod_l+0xad8>
 800a43c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a440:	ec57 6b17 	vmov	r6, r7, d7
 800a444:	e799      	b.n	800a37a <_strtod_l+0x992>
 800a446:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a44a:	9b08      	ldr	r3, [sp, #32]
 800a44c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1c1      	bne.n	800a3d8 <_strtod_l+0x9f0>
 800a454:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a458:	0d1b      	lsrs	r3, r3, #20
 800a45a:	051b      	lsls	r3, r3, #20
 800a45c:	429d      	cmp	r5, r3
 800a45e:	d1bb      	bne.n	800a3d8 <_strtod_l+0x9f0>
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fc28 	bl	8000cb8 <__aeabi_d2lz>
 800a468:	f7f6 f898 	bl	800059c <__aeabi_l2d>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f5 ff08 	bl	8000288 <__aeabi_dsub>
 800a478:	460b      	mov	r3, r1
 800a47a:	4602      	mov	r2, r0
 800a47c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a480:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a486:	ea46 060a 	orr.w	r6, r6, sl
 800a48a:	431e      	orrs	r6, r3
 800a48c:	d06f      	beq.n	800a56e <_strtod_l+0xb86>
 800a48e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4c8 <_strtod_l+0xae0>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f6 fb22 	bl	8000adc <__aeabi_dcmplt>
 800a498:	2800      	cmp	r0, #0
 800a49a:	f47f accf 	bne.w	8009e3c <_strtod_l+0x454>
 800a49e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a4d0 <_strtod_l+0xae8>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4a8:	f7f6 fb36 	bl	8000b18 <__aeabi_dcmpgt>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d093      	beq.n	800a3d8 <_strtod_l+0x9f0>
 800a4b0:	e4c4      	b.n	8009e3c <_strtod_l+0x454>
 800a4b2:	bf00      	nop
 800a4b4:	f3af 8000 	nop.w
 800a4b8:	00000000 	.word	0x00000000
 800a4bc:	bff00000 	.word	0xbff00000
 800a4c0:	00000000 	.word	0x00000000
 800a4c4:	3ff00000 	.word	0x3ff00000
 800a4c8:	94a03595 	.word	0x94a03595
 800a4cc:	3fdfffff 	.word	0x3fdfffff
 800a4d0:	35afe535 	.word	0x35afe535
 800a4d4:	3fe00000 	.word	0x3fe00000
 800a4d8:	000fffff 	.word	0x000fffff
 800a4dc:	7ff00000 	.word	0x7ff00000
 800a4e0:	7fefffff 	.word	0x7fefffff
 800a4e4:	3ff00000 	.word	0x3ff00000
 800a4e8:	3fe00000 	.word	0x3fe00000
 800a4ec:	7fe00000 	.word	0x7fe00000
 800a4f0:	7c9fffff 	.word	0x7c9fffff
 800a4f4:	9b08      	ldr	r3, [sp, #32]
 800a4f6:	b323      	cbz	r3, 800a542 <_strtod_l+0xb5a>
 800a4f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a4fc:	d821      	bhi.n	800a542 <_strtod_l+0xb5a>
 800a4fe:	a328      	add	r3, pc, #160	@ (adr r3, 800a5a0 <_strtod_l+0xbb8>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	f7f6 faf2 	bl	8000af0 <__aeabi_dcmple>
 800a50c:	b1a0      	cbz	r0, 800a538 <_strtod_l+0xb50>
 800a50e:	4639      	mov	r1, r7
 800a510:	4630      	mov	r0, r6
 800a512:	f7f6 fb49 	bl	8000ba8 <__aeabi_d2uiz>
 800a516:	2801      	cmp	r0, #1
 800a518:	bf38      	it	cc
 800a51a:	2001      	movcc	r0, #1
 800a51c:	f7f5 fff2 	bl	8000504 <__aeabi_ui2d>
 800a520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a522:	4606      	mov	r6, r0
 800a524:	460f      	mov	r7, r1
 800a526:	b9fb      	cbnz	r3, 800a568 <_strtod_l+0xb80>
 800a528:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a52c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a52e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a530:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a534:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a538:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a53a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a53e:	1b5b      	subs	r3, r3, r5
 800a540:	9311      	str	r3, [sp, #68]	@ 0x44
 800a542:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a546:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a54a:	f002 ff05 	bl	800d358 <__ulp>
 800a54e:	4650      	mov	r0, sl
 800a550:	ec53 2b10 	vmov	r2, r3, d0
 800a554:	4659      	mov	r1, fp
 800a556:	f7f6 f84f 	bl	80005f8 <__aeabi_dmul>
 800a55a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a55e:	f7f5 fe95 	bl	800028c <__adddf3>
 800a562:	4682      	mov	sl, r0
 800a564:	468b      	mov	fp, r1
 800a566:	e770      	b.n	800a44a <_strtod_l+0xa62>
 800a568:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a56c:	e7e0      	b.n	800a530 <_strtod_l+0xb48>
 800a56e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a5a8 <_strtod_l+0xbc0>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f6 fab2 	bl	8000adc <__aeabi_dcmplt>
 800a578:	e798      	b.n	800a4ac <_strtod_l+0xac4>
 800a57a:	2300      	movs	r3, #0
 800a57c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a57e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	f7ff ba6d 	b.w	8009a62 <_strtod_l+0x7a>
 800a588:	2a65      	cmp	r2, #101	@ 0x65
 800a58a:	f43f ab66 	beq.w	8009c5a <_strtod_l+0x272>
 800a58e:	2a45      	cmp	r2, #69	@ 0x45
 800a590:	f43f ab63 	beq.w	8009c5a <_strtod_l+0x272>
 800a594:	2301      	movs	r3, #1
 800a596:	f7ff bb9e 	b.w	8009cd6 <_strtod_l+0x2ee>
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w
 800a5a0:	ffc00000 	.word	0xffc00000
 800a5a4:	41dfffff 	.word	0x41dfffff
 800a5a8:	94a03595 	.word	0x94a03595
 800a5ac:	3fcfffff 	.word	0x3fcfffff

0800a5b0 <_strtod_r>:
 800a5b0:	4b01      	ldr	r3, [pc, #4]	@ (800a5b8 <_strtod_r+0x8>)
 800a5b2:	f7ff ba19 	b.w	80099e8 <_strtod_l>
 800a5b6:	bf00      	nop
 800a5b8:	20000044 	.word	0x20000044

0800a5bc <strtof>:
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800a680 <strtof+0xc4>
 800a5c4:	4b29      	ldr	r3, [pc, #164]	@ (800a66c <strtof+0xb0>)
 800a5c6:	460a      	mov	r2, r1
 800a5c8:	ed2d 8b02 	vpush	{d8}
 800a5cc:	4601      	mov	r1, r0
 800a5ce:	f8d8 0000 	ldr.w	r0, [r8]
 800a5d2:	f7ff fa09 	bl	80099e8 <_strtod_l>
 800a5d6:	ec55 4b10 	vmov	r4, r5, d0
 800a5da:	4622      	mov	r2, r4
 800a5dc:	462b      	mov	r3, r5
 800a5de:	4620      	mov	r0, r4
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	f7f6 faa3 	bl	8000b2c <__aeabi_dcmpun>
 800a5e6:	b190      	cbz	r0, 800a60e <strtof+0x52>
 800a5e8:	2d00      	cmp	r5, #0
 800a5ea:	4821      	ldr	r0, [pc, #132]	@ (800a670 <strtof+0xb4>)
 800a5ec:	da09      	bge.n	800a602 <strtof+0x46>
 800a5ee:	f001 f89f 	bl	800b730 <nanf>
 800a5f2:	eeb1 8a40 	vneg.f32	s16, s0
 800a5f6:	eeb0 0a48 	vmov.f32	s0, s16
 800a5fa:	ecbd 8b02 	vpop	{d8}
 800a5fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a602:	ecbd 8b02 	vpop	{d8}
 800a606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a60a:	f001 b891 	b.w	800b730 <nanf>
 800a60e:	4620      	mov	r0, r4
 800a610:	4629      	mov	r1, r5
 800a612:	f7f6 fae9 	bl	8000be8 <__aeabi_d2f>
 800a616:	ee08 0a10 	vmov	s16, r0
 800a61a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800a674 <strtof+0xb8>
 800a61e:	eeb0 7ac8 	vabs.f32	s14, s16
 800a622:	eeb4 7a67 	vcmp.f32	s14, s15
 800a626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a62a:	dd11      	ble.n	800a650 <strtof+0x94>
 800a62c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800a630:	4b11      	ldr	r3, [pc, #68]	@ (800a678 <strtof+0xbc>)
 800a632:	f04f 32ff 	mov.w	r2, #4294967295
 800a636:	4620      	mov	r0, r4
 800a638:	4639      	mov	r1, r7
 800a63a:	f7f6 fa77 	bl	8000b2c <__aeabi_dcmpun>
 800a63e:	b980      	cbnz	r0, 800a662 <strtof+0xa6>
 800a640:	4b0d      	ldr	r3, [pc, #52]	@ (800a678 <strtof+0xbc>)
 800a642:	f04f 32ff 	mov.w	r2, #4294967295
 800a646:	4620      	mov	r0, r4
 800a648:	4639      	mov	r1, r7
 800a64a:	f7f6 fa51 	bl	8000af0 <__aeabi_dcmple>
 800a64e:	b940      	cbnz	r0, 800a662 <strtof+0xa6>
 800a650:	ee18 3a10 	vmov	r3, s16
 800a654:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a658:	d1cd      	bne.n	800a5f6 <strtof+0x3a>
 800a65a:	4b08      	ldr	r3, [pc, #32]	@ (800a67c <strtof+0xc0>)
 800a65c:	402b      	ands	r3, r5
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d0c9      	beq.n	800a5f6 <strtof+0x3a>
 800a662:	f8d8 3000 	ldr.w	r3, [r8]
 800a666:	2222      	movs	r2, #34	@ 0x22
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	e7c4      	b.n	800a5f6 <strtof+0x3a>
 800a66c:	20000044 	.word	0x20000044
 800a670:	0800f9f5 	.word	0x0800f9f5
 800a674:	7f7fffff 	.word	0x7f7fffff
 800a678:	7fefffff 	.word	0x7fefffff
 800a67c:	7ff00000 	.word	0x7ff00000
 800a680:	200001b0 	.word	0x200001b0

0800a684 <__cvt>:
 800a684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a688:	ec57 6b10 	vmov	r6, r7, d0
 800a68c:	2f00      	cmp	r7, #0
 800a68e:	460c      	mov	r4, r1
 800a690:	4619      	mov	r1, r3
 800a692:	463b      	mov	r3, r7
 800a694:	bfbb      	ittet	lt
 800a696:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a69a:	461f      	movlt	r7, r3
 800a69c:	2300      	movge	r3, #0
 800a69e:	232d      	movlt	r3, #45	@ 0x2d
 800a6a0:	700b      	strb	r3, [r1, #0]
 800a6a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a6a8:	4691      	mov	r9, r2
 800a6aa:	f023 0820 	bic.w	r8, r3, #32
 800a6ae:	bfbc      	itt	lt
 800a6b0:	4632      	movlt	r2, r6
 800a6b2:	4616      	movlt	r6, r2
 800a6b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a6b8:	d005      	beq.n	800a6c6 <__cvt+0x42>
 800a6ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a6be:	d100      	bne.n	800a6c2 <__cvt+0x3e>
 800a6c0:	3401      	adds	r4, #1
 800a6c2:	2102      	movs	r1, #2
 800a6c4:	e000      	b.n	800a6c8 <__cvt+0x44>
 800a6c6:	2103      	movs	r1, #3
 800a6c8:	ab03      	add	r3, sp, #12
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	ab02      	add	r3, sp, #8
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	ec47 6b10 	vmov	d0, r6, r7
 800a6d4:	4653      	mov	r3, sl
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	f001 f8ba 	bl	800b850 <_dtoa_r>
 800a6dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	d119      	bne.n	800a718 <__cvt+0x94>
 800a6e4:	f019 0f01 	tst.w	r9, #1
 800a6e8:	d00e      	beq.n	800a708 <__cvt+0x84>
 800a6ea:	eb00 0904 	add.w	r9, r0, r4
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	4639      	mov	r1, r7
 800a6f6:	f7f6 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6fa:	b108      	cbz	r0, 800a700 <__cvt+0x7c>
 800a6fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a700:	2230      	movs	r2, #48	@ 0x30
 800a702:	9b03      	ldr	r3, [sp, #12]
 800a704:	454b      	cmp	r3, r9
 800a706:	d31e      	bcc.n	800a746 <__cvt+0xc2>
 800a708:	9b03      	ldr	r3, [sp, #12]
 800a70a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a70c:	1b5b      	subs	r3, r3, r5
 800a70e:	4628      	mov	r0, r5
 800a710:	6013      	str	r3, [r2, #0]
 800a712:	b004      	add	sp, #16
 800a714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a718:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a71c:	eb00 0904 	add.w	r9, r0, r4
 800a720:	d1e5      	bne.n	800a6ee <__cvt+0x6a>
 800a722:	7803      	ldrb	r3, [r0, #0]
 800a724:	2b30      	cmp	r3, #48	@ 0x30
 800a726:	d10a      	bne.n	800a73e <__cvt+0xba>
 800a728:	2200      	movs	r2, #0
 800a72a:	2300      	movs	r3, #0
 800a72c:	4630      	mov	r0, r6
 800a72e:	4639      	mov	r1, r7
 800a730:	f7f6 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 800a734:	b918      	cbnz	r0, 800a73e <__cvt+0xba>
 800a736:	f1c4 0401 	rsb	r4, r4, #1
 800a73a:	f8ca 4000 	str.w	r4, [sl]
 800a73e:	f8da 3000 	ldr.w	r3, [sl]
 800a742:	4499      	add	r9, r3
 800a744:	e7d3      	b.n	800a6ee <__cvt+0x6a>
 800a746:	1c59      	adds	r1, r3, #1
 800a748:	9103      	str	r1, [sp, #12]
 800a74a:	701a      	strb	r2, [r3, #0]
 800a74c:	e7d9      	b.n	800a702 <__cvt+0x7e>

0800a74e <__exponent>:
 800a74e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a750:	2900      	cmp	r1, #0
 800a752:	bfba      	itte	lt
 800a754:	4249      	neglt	r1, r1
 800a756:	232d      	movlt	r3, #45	@ 0x2d
 800a758:	232b      	movge	r3, #43	@ 0x2b
 800a75a:	2909      	cmp	r1, #9
 800a75c:	7002      	strb	r2, [r0, #0]
 800a75e:	7043      	strb	r3, [r0, #1]
 800a760:	dd29      	ble.n	800a7b6 <__exponent+0x68>
 800a762:	f10d 0307 	add.w	r3, sp, #7
 800a766:	461d      	mov	r5, r3
 800a768:	270a      	movs	r7, #10
 800a76a:	461a      	mov	r2, r3
 800a76c:	fbb1 f6f7 	udiv	r6, r1, r7
 800a770:	fb07 1416 	mls	r4, r7, r6, r1
 800a774:	3430      	adds	r4, #48	@ 0x30
 800a776:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a77a:	460c      	mov	r4, r1
 800a77c:	2c63      	cmp	r4, #99	@ 0x63
 800a77e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a782:	4631      	mov	r1, r6
 800a784:	dcf1      	bgt.n	800a76a <__exponent+0x1c>
 800a786:	3130      	adds	r1, #48	@ 0x30
 800a788:	1e94      	subs	r4, r2, #2
 800a78a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a78e:	1c41      	adds	r1, r0, #1
 800a790:	4623      	mov	r3, r4
 800a792:	42ab      	cmp	r3, r5
 800a794:	d30a      	bcc.n	800a7ac <__exponent+0x5e>
 800a796:	f10d 0309 	add.w	r3, sp, #9
 800a79a:	1a9b      	subs	r3, r3, r2
 800a79c:	42ac      	cmp	r4, r5
 800a79e:	bf88      	it	hi
 800a7a0:	2300      	movhi	r3, #0
 800a7a2:	3302      	adds	r3, #2
 800a7a4:	4403      	add	r3, r0
 800a7a6:	1a18      	subs	r0, r3, r0
 800a7a8:	b003      	add	sp, #12
 800a7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a7b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a7b4:	e7ed      	b.n	800a792 <__exponent+0x44>
 800a7b6:	2330      	movs	r3, #48	@ 0x30
 800a7b8:	3130      	adds	r1, #48	@ 0x30
 800a7ba:	7083      	strb	r3, [r0, #2]
 800a7bc:	70c1      	strb	r1, [r0, #3]
 800a7be:	1d03      	adds	r3, r0, #4
 800a7c0:	e7f1      	b.n	800a7a6 <__exponent+0x58>
	...

0800a7c4 <_printf_float>:
 800a7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c8:	b08d      	sub	sp, #52	@ 0x34
 800a7ca:	460c      	mov	r4, r1
 800a7cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a7d0:	4616      	mov	r6, r2
 800a7d2:	461f      	mov	r7, r3
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	f000 ff1b 	bl	800b610 <_localeconv_r>
 800a7da:	6803      	ldr	r3, [r0, #0]
 800a7dc:	9304      	str	r3, [sp, #16]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7f5 fd46 	bl	8000270 <strlen>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ec:	9005      	str	r0, [sp, #20]
 800a7ee:	3307      	adds	r3, #7
 800a7f0:	f023 0307 	bic.w	r3, r3, #7
 800a7f4:	f103 0208 	add.w	r2, r3, #8
 800a7f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a7fc:	f8d4 b000 	ldr.w	fp, [r4]
 800a800:	f8c8 2000 	str.w	r2, [r8]
 800a804:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a808:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a80c:	9307      	str	r3, [sp, #28]
 800a80e:	f8cd 8018 	str.w	r8, [sp, #24]
 800a812:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a81a:	4b9c      	ldr	r3, [pc, #624]	@ (800aa8c <_printf_float+0x2c8>)
 800a81c:	f04f 32ff 	mov.w	r2, #4294967295
 800a820:	f7f6 f984 	bl	8000b2c <__aeabi_dcmpun>
 800a824:	bb70      	cbnz	r0, 800a884 <_printf_float+0xc0>
 800a826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a82a:	4b98      	ldr	r3, [pc, #608]	@ (800aa8c <_printf_float+0x2c8>)
 800a82c:	f04f 32ff 	mov.w	r2, #4294967295
 800a830:	f7f6 f95e 	bl	8000af0 <__aeabi_dcmple>
 800a834:	bb30      	cbnz	r0, 800a884 <_printf_float+0xc0>
 800a836:	2200      	movs	r2, #0
 800a838:	2300      	movs	r3, #0
 800a83a:	4640      	mov	r0, r8
 800a83c:	4649      	mov	r1, r9
 800a83e:	f7f6 f94d 	bl	8000adc <__aeabi_dcmplt>
 800a842:	b110      	cbz	r0, 800a84a <_printf_float+0x86>
 800a844:	232d      	movs	r3, #45	@ 0x2d
 800a846:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a84a:	4a91      	ldr	r2, [pc, #580]	@ (800aa90 <_printf_float+0x2cc>)
 800a84c:	4b91      	ldr	r3, [pc, #580]	@ (800aa94 <_printf_float+0x2d0>)
 800a84e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a852:	bf94      	ite	ls
 800a854:	4690      	movls	r8, r2
 800a856:	4698      	movhi	r8, r3
 800a858:	2303      	movs	r3, #3
 800a85a:	6123      	str	r3, [r4, #16]
 800a85c:	f02b 0304 	bic.w	r3, fp, #4
 800a860:	6023      	str	r3, [r4, #0]
 800a862:	f04f 0900 	mov.w	r9, #0
 800a866:	9700      	str	r7, [sp, #0]
 800a868:	4633      	mov	r3, r6
 800a86a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a86c:	4621      	mov	r1, r4
 800a86e:	4628      	mov	r0, r5
 800a870:	f000 f9d2 	bl	800ac18 <_printf_common>
 800a874:	3001      	adds	r0, #1
 800a876:	f040 808d 	bne.w	800a994 <_printf_float+0x1d0>
 800a87a:	f04f 30ff 	mov.w	r0, #4294967295
 800a87e:	b00d      	add	sp, #52	@ 0x34
 800a880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a884:	4642      	mov	r2, r8
 800a886:	464b      	mov	r3, r9
 800a888:	4640      	mov	r0, r8
 800a88a:	4649      	mov	r1, r9
 800a88c:	f7f6 f94e 	bl	8000b2c <__aeabi_dcmpun>
 800a890:	b140      	cbz	r0, 800a8a4 <_printf_float+0xe0>
 800a892:	464b      	mov	r3, r9
 800a894:	2b00      	cmp	r3, #0
 800a896:	bfbc      	itt	lt
 800a898:	232d      	movlt	r3, #45	@ 0x2d
 800a89a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a89e:	4a7e      	ldr	r2, [pc, #504]	@ (800aa98 <_printf_float+0x2d4>)
 800a8a0:	4b7e      	ldr	r3, [pc, #504]	@ (800aa9c <_printf_float+0x2d8>)
 800a8a2:	e7d4      	b.n	800a84e <_printf_float+0x8a>
 800a8a4:	6863      	ldr	r3, [r4, #4]
 800a8a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a8aa:	9206      	str	r2, [sp, #24]
 800a8ac:	1c5a      	adds	r2, r3, #1
 800a8ae:	d13b      	bne.n	800a928 <_printf_float+0x164>
 800a8b0:	2306      	movs	r3, #6
 800a8b2:	6063      	str	r3, [r4, #4]
 800a8b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	6022      	str	r2, [r4, #0]
 800a8bc:	9303      	str	r3, [sp, #12]
 800a8be:	ab0a      	add	r3, sp, #40	@ 0x28
 800a8c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a8c4:	ab09      	add	r3, sp, #36	@ 0x24
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	6861      	ldr	r1, [r4, #4]
 800a8ca:	ec49 8b10 	vmov	d0, r8, r9
 800a8ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	f7ff fed6 	bl	800a684 <__cvt>
 800a8d8:	9b06      	ldr	r3, [sp, #24]
 800a8da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a8dc:	2b47      	cmp	r3, #71	@ 0x47
 800a8de:	4680      	mov	r8, r0
 800a8e0:	d129      	bne.n	800a936 <_printf_float+0x172>
 800a8e2:	1cc8      	adds	r0, r1, #3
 800a8e4:	db02      	blt.n	800a8ec <_printf_float+0x128>
 800a8e6:	6863      	ldr	r3, [r4, #4]
 800a8e8:	4299      	cmp	r1, r3
 800a8ea:	dd41      	ble.n	800a970 <_printf_float+0x1ac>
 800a8ec:	f1aa 0a02 	sub.w	sl, sl, #2
 800a8f0:	fa5f fa8a 	uxtb.w	sl, sl
 800a8f4:	3901      	subs	r1, #1
 800a8f6:	4652      	mov	r2, sl
 800a8f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a8fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800a8fe:	f7ff ff26 	bl	800a74e <__exponent>
 800a902:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a904:	1813      	adds	r3, r2, r0
 800a906:	2a01      	cmp	r2, #1
 800a908:	4681      	mov	r9, r0
 800a90a:	6123      	str	r3, [r4, #16]
 800a90c:	dc02      	bgt.n	800a914 <_printf_float+0x150>
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	07d2      	lsls	r2, r2, #31
 800a912:	d501      	bpl.n	800a918 <_printf_float+0x154>
 800a914:	3301      	adds	r3, #1
 800a916:	6123      	str	r3, [r4, #16]
 800a918:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0a2      	beq.n	800a866 <_printf_float+0xa2>
 800a920:	232d      	movs	r3, #45	@ 0x2d
 800a922:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a926:	e79e      	b.n	800a866 <_printf_float+0xa2>
 800a928:	9a06      	ldr	r2, [sp, #24]
 800a92a:	2a47      	cmp	r2, #71	@ 0x47
 800a92c:	d1c2      	bne.n	800a8b4 <_printf_float+0xf0>
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1c0      	bne.n	800a8b4 <_printf_float+0xf0>
 800a932:	2301      	movs	r3, #1
 800a934:	e7bd      	b.n	800a8b2 <_printf_float+0xee>
 800a936:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a93a:	d9db      	bls.n	800a8f4 <_printf_float+0x130>
 800a93c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a940:	d118      	bne.n	800a974 <_printf_float+0x1b0>
 800a942:	2900      	cmp	r1, #0
 800a944:	6863      	ldr	r3, [r4, #4]
 800a946:	dd0b      	ble.n	800a960 <_printf_float+0x19c>
 800a948:	6121      	str	r1, [r4, #16]
 800a94a:	b913      	cbnz	r3, 800a952 <_printf_float+0x18e>
 800a94c:	6822      	ldr	r2, [r4, #0]
 800a94e:	07d0      	lsls	r0, r2, #31
 800a950:	d502      	bpl.n	800a958 <_printf_float+0x194>
 800a952:	3301      	adds	r3, #1
 800a954:	440b      	add	r3, r1
 800a956:	6123      	str	r3, [r4, #16]
 800a958:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a95a:	f04f 0900 	mov.w	r9, #0
 800a95e:	e7db      	b.n	800a918 <_printf_float+0x154>
 800a960:	b913      	cbnz	r3, 800a968 <_printf_float+0x1a4>
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	07d2      	lsls	r2, r2, #31
 800a966:	d501      	bpl.n	800a96c <_printf_float+0x1a8>
 800a968:	3302      	adds	r3, #2
 800a96a:	e7f4      	b.n	800a956 <_printf_float+0x192>
 800a96c:	2301      	movs	r3, #1
 800a96e:	e7f2      	b.n	800a956 <_printf_float+0x192>
 800a970:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a976:	4299      	cmp	r1, r3
 800a978:	db05      	blt.n	800a986 <_printf_float+0x1c2>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	6121      	str	r1, [r4, #16]
 800a97e:	07d8      	lsls	r0, r3, #31
 800a980:	d5ea      	bpl.n	800a958 <_printf_float+0x194>
 800a982:	1c4b      	adds	r3, r1, #1
 800a984:	e7e7      	b.n	800a956 <_printf_float+0x192>
 800a986:	2900      	cmp	r1, #0
 800a988:	bfd4      	ite	le
 800a98a:	f1c1 0202 	rsble	r2, r1, #2
 800a98e:	2201      	movgt	r2, #1
 800a990:	4413      	add	r3, r2
 800a992:	e7e0      	b.n	800a956 <_printf_float+0x192>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	055a      	lsls	r2, r3, #21
 800a998:	d407      	bmi.n	800a9aa <_printf_float+0x1e6>
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	4642      	mov	r2, r8
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	d12b      	bne.n	800aa00 <_printf_float+0x23c>
 800a9a8:	e767      	b.n	800a87a <_printf_float+0xb6>
 800a9aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a9ae:	f240 80dd 	bls.w	800ab6c <_printf_float+0x3a8>
 800a9b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	f7f6 f885 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d033      	beq.n	800aa2a <_printf_float+0x266>
 800a9c2:	4a37      	ldr	r2, [pc, #220]	@ (800aaa0 <_printf_float+0x2dc>)
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	4631      	mov	r1, r6
 800a9c8:	4628      	mov	r0, r5
 800a9ca:	47b8      	blx	r7
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	f43f af54 	beq.w	800a87a <_printf_float+0xb6>
 800a9d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a9d6:	4543      	cmp	r3, r8
 800a9d8:	db02      	blt.n	800a9e0 <_printf_float+0x21c>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	07d8      	lsls	r0, r3, #31
 800a9de:	d50f      	bpl.n	800aa00 <_printf_float+0x23c>
 800a9e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9e4:	4631      	mov	r1, r6
 800a9e6:	4628      	mov	r0, r5
 800a9e8:	47b8      	blx	r7
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	f43f af45 	beq.w	800a87a <_printf_float+0xb6>
 800a9f0:	f04f 0900 	mov.w	r9, #0
 800a9f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9f8:	f104 0a1a 	add.w	sl, r4, #26
 800a9fc:	45c8      	cmp	r8, r9
 800a9fe:	dc09      	bgt.n	800aa14 <_printf_float+0x250>
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	079b      	lsls	r3, r3, #30
 800aa04:	f100 8103 	bmi.w	800ac0e <_printf_float+0x44a>
 800aa08:	68e0      	ldr	r0, [r4, #12]
 800aa0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa0c:	4298      	cmp	r0, r3
 800aa0e:	bfb8      	it	lt
 800aa10:	4618      	movlt	r0, r3
 800aa12:	e734      	b.n	800a87e <_printf_float+0xba>
 800aa14:	2301      	movs	r3, #1
 800aa16:	4652      	mov	r2, sl
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f43f af2b 	beq.w	800a87a <_printf_float+0xb6>
 800aa24:	f109 0901 	add.w	r9, r9, #1
 800aa28:	e7e8      	b.n	800a9fc <_printf_float+0x238>
 800aa2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	dc39      	bgt.n	800aaa4 <_printf_float+0x2e0>
 800aa30:	4a1b      	ldr	r2, [pc, #108]	@ (800aaa0 <_printf_float+0x2dc>)
 800aa32:	2301      	movs	r3, #1
 800aa34:	4631      	mov	r1, r6
 800aa36:	4628      	mov	r0, r5
 800aa38:	47b8      	blx	r7
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	f43f af1d 	beq.w	800a87a <_printf_float+0xb6>
 800aa40:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aa44:	ea59 0303 	orrs.w	r3, r9, r3
 800aa48:	d102      	bne.n	800aa50 <_printf_float+0x28c>
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	07d9      	lsls	r1, r3, #31
 800aa4e:	d5d7      	bpl.n	800aa00 <_printf_float+0x23c>
 800aa50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa54:	4631      	mov	r1, r6
 800aa56:	4628      	mov	r0, r5
 800aa58:	47b8      	blx	r7
 800aa5a:	3001      	adds	r0, #1
 800aa5c:	f43f af0d 	beq.w	800a87a <_printf_float+0xb6>
 800aa60:	f04f 0a00 	mov.w	sl, #0
 800aa64:	f104 0b1a 	add.w	fp, r4, #26
 800aa68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa6a:	425b      	negs	r3, r3
 800aa6c:	4553      	cmp	r3, sl
 800aa6e:	dc01      	bgt.n	800aa74 <_printf_float+0x2b0>
 800aa70:	464b      	mov	r3, r9
 800aa72:	e793      	b.n	800a99c <_printf_float+0x1d8>
 800aa74:	2301      	movs	r3, #1
 800aa76:	465a      	mov	r2, fp
 800aa78:	4631      	mov	r1, r6
 800aa7a:	4628      	mov	r0, r5
 800aa7c:	47b8      	blx	r7
 800aa7e:	3001      	adds	r0, #1
 800aa80:	f43f aefb 	beq.w	800a87a <_printf_float+0xb6>
 800aa84:	f10a 0a01 	add.w	sl, sl, #1
 800aa88:	e7ee      	b.n	800aa68 <_printf_float+0x2a4>
 800aa8a:	bf00      	nop
 800aa8c:	7fefffff 	.word	0x7fefffff
 800aa90:	0800f620 	.word	0x0800f620
 800aa94:	0800f624 	.word	0x0800f624
 800aa98:	0800f628 	.word	0x0800f628
 800aa9c:	0800f62c 	.word	0x0800f62c
 800aaa0:	0800f630 	.word	0x0800f630
 800aaa4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aaa6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aaaa:	4553      	cmp	r3, sl
 800aaac:	bfa8      	it	ge
 800aaae:	4653      	movge	r3, sl
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	4699      	mov	r9, r3
 800aab4:	dc36      	bgt.n	800ab24 <_printf_float+0x360>
 800aab6:	f04f 0b00 	mov.w	fp, #0
 800aaba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aabe:	f104 021a 	add.w	r2, r4, #26
 800aac2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800aac4:	9306      	str	r3, [sp, #24]
 800aac6:	eba3 0309 	sub.w	r3, r3, r9
 800aaca:	455b      	cmp	r3, fp
 800aacc:	dc31      	bgt.n	800ab32 <_printf_float+0x36e>
 800aace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad0:	459a      	cmp	sl, r3
 800aad2:	dc3a      	bgt.n	800ab4a <_printf_float+0x386>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	07da      	lsls	r2, r3, #31
 800aad8:	d437      	bmi.n	800ab4a <_printf_float+0x386>
 800aada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aadc:	ebaa 0903 	sub.w	r9, sl, r3
 800aae0:	9b06      	ldr	r3, [sp, #24]
 800aae2:	ebaa 0303 	sub.w	r3, sl, r3
 800aae6:	4599      	cmp	r9, r3
 800aae8:	bfa8      	it	ge
 800aaea:	4699      	movge	r9, r3
 800aaec:	f1b9 0f00 	cmp.w	r9, #0
 800aaf0:	dc33      	bgt.n	800ab5a <_printf_float+0x396>
 800aaf2:	f04f 0800 	mov.w	r8, #0
 800aaf6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aafa:	f104 0b1a 	add.w	fp, r4, #26
 800aafe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab00:	ebaa 0303 	sub.w	r3, sl, r3
 800ab04:	eba3 0309 	sub.w	r3, r3, r9
 800ab08:	4543      	cmp	r3, r8
 800ab0a:	f77f af79 	ble.w	800aa00 <_printf_float+0x23c>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	465a      	mov	r2, fp
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b8      	blx	r7
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f43f aeae 	beq.w	800a87a <_printf_float+0xb6>
 800ab1e:	f108 0801 	add.w	r8, r8, #1
 800ab22:	e7ec      	b.n	800aafe <_printf_float+0x33a>
 800ab24:	4642      	mov	r2, r8
 800ab26:	4631      	mov	r1, r6
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b8      	blx	r7
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	d1c2      	bne.n	800aab6 <_printf_float+0x2f2>
 800ab30:	e6a3      	b.n	800a87a <_printf_float+0xb6>
 800ab32:	2301      	movs	r3, #1
 800ab34:	4631      	mov	r1, r6
 800ab36:	4628      	mov	r0, r5
 800ab38:	9206      	str	r2, [sp, #24]
 800ab3a:	47b8      	blx	r7
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	f43f ae9c 	beq.w	800a87a <_printf_float+0xb6>
 800ab42:	9a06      	ldr	r2, [sp, #24]
 800ab44:	f10b 0b01 	add.w	fp, fp, #1
 800ab48:	e7bb      	b.n	800aac2 <_printf_float+0x2fe>
 800ab4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4628      	mov	r0, r5
 800ab52:	47b8      	blx	r7
 800ab54:	3001      	adds	r0, #1
 800ab56:	d1c0      	bne.n	800aada <_printf_float+0x316>
 800ab58:	e68f      	b.n	800a87a <_printf_float+0xb6>
 800ab5a:	9a06      	ldr	r2, [sp, #24]
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	4442      	add	r2, r8
 800ab60:	4631      	mov	r1, r6
 800ab62:	4628      	mov	r0, r5
 800ab64:	47b8      	blx	r7
 800ab66:	3001      	adds	r0, #1
 800ab68:	d1c3      	bne.n	800aaf2 <_printf_float+0x32e>
 800ab6a:	e686      	b.n	800a87a <_printf_float+0xb6>
 800ab6c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab70:	f1ba 0f01 	cmp.w	sl, #1
 800ab74:	dc01      	bgt.n	800ab7a <_printf_float+0x3b6>
 800ab76:	07db      	lsls	r3, r3, #31
 800ab78:	d536      	bpl.n	800abe8 <_printf_float+0x424>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	4642      	mov	r2, r8
 800ab7e:	4631      	mov	r1, r6
 800ab80:	4628      	mov	r0, r5
 800ab82:	47b8      	blx	r7
 800ab84:	3001      	adds	r0, #1
 800ab86:	f43f ae78 	beq.w	800a87a <_printf_float+0xb6>
 800ab8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab8e:	4631      	mov	r1, r6
 800ab90:	4628      	mov	r0, r5
 800ab92:	47b8      	blx	r7
 800ab94:	3001      	adds	r0, #1
 800ab96:	f43f ae70 	beq.w	800a87a <_printf_float+0xb6>
 800ab9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2300      	movs	r3, #0
 800aba2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aba6:	f7f5 ff8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800abaa:	b9c0      	cbnz	r0, 800abde <_printf_float+0x41a>
 800abac:	4653      	mov	r3, sl
 800abae:	f108 0201 	add.w	r2, r8, #1
 800abb2:	4631      	mov	r1, r6
 800abb4:	4628      	mov	r0, r5
 800abb6:	47b8      	blx	r7
 800abb8:	3001      	adds	r0, #1
 800abba:	d10c      	bne.n	800abd6 <_printf_float+0x412>
 800abbc:	e65d      	b.n	800a87a <_printf_float+0xb6>
 800abbe:	2301      	movs	r3, #1
 800abc0:	465a      	mov	r2, fp
 800abc2:	4631      	mov	r1, r6
 800abc4:	4628      	mov	r0, r5
 800abc6:	47b8      	blx	r7
 800abc8:	3001      	adds	r0, #1
 800abca:	f43f ae56 	beq.w	800a87a <_printf_float+0xb6>
 800abce:	f108 0801 	add.w	r8, r8, #1
 800abd2:	45d0      	cmp	r8, sl
 800abd4:	dbf3      	blt.n	800abbe <_printf_float+0x3fa>
 800abd6:	464b      	mov	r3, r9
 800abd8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800abdc:	e6df      	b.n	800a99e <_printf_float+0x1da>
 800abde:	f04f 0800 	mov.w	r8, #0
 800abe2:	f104 0b1a 	add.w	fp, r4, #26
 800abe6:	e7f4      	b.n	800abd2 <_printf_float+0x40e>
 800abe8:	2301      	movs	r3, #1
 800abea:	4642      	mov	r2, r8
 800abec:	e7e1      	b.n	800abb2 <_printf_float+0x3ee>
 800abee:	2301      	movs	r3, #1
 800abf0:	464a      	mov	r2, r9
 800abf2:	4631      	mov	r1, r6
 800abf4:	4628      	mov	r0, r5
 800abf6:	47b8      	blx	r7
 800abf8:	3001      	adds	r0, #1
 800abfa:	f43f ae3e 	beq.w	800a87a <_printf_float+0xb6>
 800abfe:	f108 0801 	add.w	r8, r8, #1
 800ac02:	68e3      	ldr	r3, [r4, #12]
 800ac04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ac06:	1a5b      	subs	r3, r3, r1
 800ac08:	4543      	cmp	r3, r8
 800ac0a:	dcf0      	bgt.n	800abee <_printf_float+0x42a>
 800ac0c:	e6fc      	b.n	800aa08 <_printf_float+0x244>
 800ac0e:	f04f 0800 	mov.w	r8, #0
 800ac12:	f104 0919 	add.w	r9, r4, #25
 800ac16:	e7f4      	b.n	800ac02 <_printf_float+0x43e>

0800ac18 <_printf_common>:
 800ac18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac1c:	4616      	mov	r6, r2
 800ac1e:	4698      	mov	r8, r3
 800ac20:	688a      	ldr	r2, [r1, #8]
 800ac22:	690b      	ldr	r3, [r1, #16]
 800ac24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	bfb8      	it	lt
 800ac2c:	4613      	movlt	r3, r2
 800ac2e:	6033      	str	r3, [r6, #0]
 800ac30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ac34:	4607      	mov	r7, r0
 800ac36:	460c      	mov	r4, r1
 800ac38:	b10a      	cbz	r2, 800ac3e <_printf_common+0x26>
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	6033      	str	r3, [r6, #0]
 800ac3e:	6823      	ldr	r3, [r4, #0]
 800ac40:	0699      	lsls	r1, r3, #26
 800ac42:	bf42      	ittt	mi
 800ac44:	6833      	ldrmi	r3, [r6, #0]
 800ac46:	3302      	addmi	r3, #2
 800ac48:	6033      	strmi	r3, [r6, #0]
 800ac4a:	6825      	ldr	r5, [r4, #0]
 800ac4c:	f015 0506 	ands.w	r5, r5, #6
 800ac50:	d106      	bne.n	800ac60 <_printf_common+0x48>
 800ac52:	f104 0a19 	add.w	sl, r4, #25
 800ac56:	68e3      	ldr	r3, [r4, #12]
 800ac58:	6832      	ldr	r2, [r6, #0]
 800ac5a:	1a9b      	subs	r3, r3, r2
 800ac5c:	42ab      	cmp	r3, r5
 800ac5e:	dc26      	bgt.n	800acae <_printf_common+0x96>
 800ac60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ac64:	6822      	ldr	r2, [r4, #0]
 800ac66:	3b00      	subs	r3, #0
 800ac68:	bf18      	it	ne
 800ac6a:	2301      	movne	r3, #1
 800ac6c:	0692      	lsls	r2, r2, #26
 800ac6e:	d42b      	bmi.n	800acc8 <_printf_common+0xb0>
 800ac70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ac74:	4641      	mov	r1, r8
 800ac76:	4638      	mov	r0, r7
 800ac78:	47c8      	blx	r9
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	d01e      	beq.n	800acbc <_printf_common+0xa4>
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	6922      	ldr	r2, [r4, #16]
 800ac82:	f003 0306 	and.w	r3, r3, #6
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	bf02      	ittt	eq
 800ac8a:	68e5      	ldreq	r5, [r4, #12]
 800ac8c:	6833      	ldreq	r3, [r6, #0]
 800ac8e:	1aed      	subeq	r5, r5, r3
 800ac90:	68a3      	ldr	r3, [r4, #8]
 800ac92:	bf0c      	ite	eq
 800ac94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac98:	2500      	movne	r5, #0
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	bfc4      	itt	gt
 800ac9e:	1a9b      	subgt	r3, r3, r2
 800aca0:	18ed      	addgt	r5, r5, r3
 800aca2:	2600      	movs	r6, #0
 800aca4:	341a      	adds	r4, #26
 800aca6:	42b5      	cmp	r5, r6
 800aca8:	d11a      	bne.n	800ace0 <_printf_common+0xc8>
 800acaa:	2000      	movs	r0, #0
 800acac:	e008      	b.n	800acc0 <_printf_common+0xa8>
 800acae:	2301      	movs	r3, #1
 800acb0:	4652      	mov	r2, sl
 800acb2:	4641      	mov	r1, r8
 800acb4:	4638      	mov	r0, r7
 800acb6:	47c8      	blx	r9
 800acb8:	3001      	adds	r0, #1
 800acba:	d103      	bne.n	800acc4 <_printf_common+0xac>
 800acbc:	f04f 30ff 	mov.w	r0, #4294967295
 800acc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc4:	3501      	adds	r5, #1
 800acc6:	e7c6      	b.n	800ac56 <_printf_common+0x3e>
 800acc8:	18e1      	adds	r1, r4, r3
 800acca:	1c5a      	adds	r2, r3, #1
 800accc:	2030      	movs	r0, #48	@ 0x30
 800acce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800acd2:	4422      	add	r2, r4
 800acd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800acd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800acdc:	3302      	adds	r3, #2
 800acde:	e7c7      	b.n	800ac70 <_printf_common+0x58>
 800ace0:	2301      	movs	r3, #1
 800ace2:	4622      	mov	r2, r4
 800ace4:	4641      	mov	r1, r8
 800ace6:	4638      	mov	r0, r7
 800ace8:	47c8      	blx	r9
 800acea:	3001      	adds	r0, #1
 800acec:	d0e6      	beq.n	800acbc <_printf_common+0xa4>
 800acee:	3601      	adds	r6, #1
 800acf0:	e7d9      	b.n	800aca6 <_printf_common+0x8e>
	...

0800acf4 <_printf_i>:
 800acf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acf8:	7e0f      	ldrb	r7, [r1, #24]
 800acfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800acfc:	2f78      	cmp	r7, #120	@ 0x78
 800acfe:	4691      	mov	r9, r2
 800ad00:	4680      	mov	r8, r0
 800ad02:	460c      	mov	r4, r1
 800ad04:	469a      	mov	sl, r3
 800ad06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ad0a:	d807      	bhi.n	800ad1c <_printf_i+0x28>
 800ad0c:	2f62      	cmp	r7, #98	@ 0x62
 800ad0e:	d80a      	bhi.n	800ad26 <_printf_i+0x32>
 800ad10:	2f00      	cmp	r7, #0
 800ad12:	f000 80d2 	beq.w	800aeba <_printf_i+0x1c6>
 800ad16:	2f58      	cmp	r7, #88	@ 0x58
 800ad18:	f000 80b9 	beq.w	800ae8e <_printf_i+0x19a>
 800ad1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ad24:	e03a      	b.n	800ad9c <_printf_i+0xa8>
 800ad26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ad2a:	2b15      	cmp	r3, #21
 800ad2c:	d8f6      	bhi.n	800ad1c <_printf_i+0x28>
 800ad2e:	a101      	add	r1, pc, #4	@ (adr r1, 800ad34 <_printf_i+0x40>)
 800ad30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad34:	0800ad8d 	.word	0x0800ad8d
 800ad38:	0800ada1 	.word	0x0800ada1
 800ad3c:	0800ad1d 	.word	0x0800ad1d
 800ad40:	0800ad1d 	.word	0x0800ad1d
 800ad44:	0800ad1d 	.word	0x0800ad1d
 800ad48:	0800ad1d 	.word	0x0800ad1d
 800ad4c:	0800ada1 	.word	0x0800ada1
 800ad50:	0800ad1d 	.word	0x0800ad1d
 800ad54:	0800ad1d 	.word	0x0800ad1d
 800ad58:	0800ad1d 	.word	0x0800ad1d
 800ad5c:	0800ad1d 	.word	0x0800ad1d
 800ad60:	0800aea1 	.word	0x0800aea1
 800ad64:	0800adcb 	.word	0x0800adcb
 800ad68:	0800ae5b 	.word	0x0800ae5b
 800ad6c:	0800ad1d 	.word	0x0800ad1d
 800ad70:	0800ad1d 	.word	0x0800ad1d
 800ad74:	0800aec3 	.word	0x0800aec3
 800ad78:	0800ad1d 	.word	0x0800ad1d
 800ad7c:	0800adcb 	.word	0x0800adcb
 800ad80:	0800ad1d 	.word	0x0800ad1d
 800ad84:	0800ad1d 	.word	0x0800ad1d
 800ad88:	0800ae63 	.word	0x0800ae63
 800ad8c:	6833      	ldr	r3, [r6, #0]
 800ad8e:	1d1a      	adds	r2, r3, #4
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6032      	str	r2, [r6, #0]
 800ad94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ad98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e09d      	b.n	800aedc <_printf_i+0x1e8>
 800ada0:	6833      	ldr	r3, [r6, #0]
 800ada2:	6820      	ldr	r0, [r4, #0]
 800ada4:	1d19      	adds	r1, r3, #4
 800ada6:	6031      	str	r1, [r6, #0]
 800ada8:	0606      	lsls	r6, r0, #24
 800adaa:	d501      	bpl.n	800adb0 <_printf_i+0xbc>
 800adac:	681d      	ldr	r5, [r3, #0]
 800adae:	e003      	b.n	800adb8 <_printf_i+0xc4>
 800adb0:	0645      	lsls	r5, r0, #25
 800adb2:	d5fb      	bpl.n	800adac <_printf_i+0xb8>
 800adb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800adb8:	2d00      	cmp	r5, #0
 800adba:	da03      	bge.n	800adc4 <_printf_i+0xd0>
 800adbc:	232d      	movs	r3, #45	@ 0x2d
 800adbe:	426d      	negs	r5, r5
 800adc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800adc4:	4859      	ldr	r0, [pc, #356]	@ (800af2c <_printf_i+0x238>)
 800adc6:	230a      	movs	r3, #10
 800adc8:	e011      	b.n	800adee <_printf_i+0xfa>
 800adca:	6821      	ldr	r1, [r4, #0]
 800adcc:	6833      	ldr	r3, [r6, #0]
 800adce:	0608      	lsls	r0, r1, #24
 800add0:	f853 5b04 	ldr.w	r5, [r3], #4
 800add4:	d402      	bmi.n	800addc <_printf_i+0xe8>
 800add6:	0649      	lsls	r1, r1, #25
 800add8:	bf48      	it	mi
 800adda:	b2ad      	uxthmi	r5, r5
 800addc:	2f6f      	cmp	r7, #111	@ 0x6f
 800adde:	4853      	ldr	r0, [pc, #332]	@ (800af2c <_printf_i+0x238>)
 800ade0:	6033      	str	r3, [r6, #0]
 800ade2:	bf14      	ite	ne
 800ade4:	230a      	movne	r3, #10
 800ade6:	2308      	moveq	r3, #8
 800ade8:	2100      	movs	r1, #0
 800adea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800adee:	6866      	ldr	r6, [r4, #4]
 800adf0:	60a6      	str	r6, [r4, #8]
 800adf2:	2e00      	cmp	r6, #0
 800adf4:	bfa2      	ittt	ge
 800adf6:	6821      	ldrge	r1, [r4, #0]
 800adf8:	f021 0104 	bicge.w	r1, r1, #4
 800adfc:	6021      	strge	r1, [r4, #0]
 800adfe:	b90d      	cbnz	r5, 800ae04 <_printf_i+0x110>
 800ae00:	2e00      	cmp	r6, #0
 800ae02:	d04b      	beq.n	800ae9c <_printf_i+0x1a8>
 800ae04:	4616      	mov	r6, r2
 800ae06:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae0a:	fb03 5711 	mls	r7, r3, r1, r5
 800ae0e:	5dc7      	ldrb	r7, [r0, r7]
 800ae10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae14:	462f      	mov	r7, r5
 800ae16:	42bb      	cmp	r3, r7
 800ae18:	460d      	mov	r5, r1
 800ae1a:	d9f4      	bls.n	800ae06 <_printf_i+0x112>
 800ae1c:	2b08      	cmp	r3, #8
 800ae1e:	d10b      	bne.n	800ae38 <_printf_i+0x144>
 800ae20:	6823      	ldr	r3, [r4, #0]
 800ae22:	07df      	lsls	r7, r3, #31
 800ae24:	d508      	bpl.n	800ae38 <_printf_i+0x144>
 800ae26:	6923      	ldr	r3, [r4, #16]
 800ae28:	6861      	ldr	r1, [r4, #4]
 800ae2a:	4299      	cmp	r1, r3
 800ae2c:	bfde      	ittt	le
 800ae2e:	2330      	movle	r3, #48	@ 0x30
 800ae30:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae34:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae38:	1b92      	subs	r2, r2, r6
 800ae3a:	6122      	str	r2, [r4, #16]
 800ae3c:	f8cd a000 	str.w	sl, [sp]
 800ae40:	464b      	mov	r3, r9
 800ae42:	aa03      	add	r2, sp, #12
 800ae44:	4621      	mov	r1, r4
 800ae46:	4640      	mov	r0, r8
 800ae48:	f7ff fee6 	bl	800ac18 <_printf_common>
 800ae4c:	3001      	adds	r0, #1
 800ae4e:	d14a      	bne.n	800aee6 <_printf_i+0x1f2>
 800ae50:	f04f 30ff 	mov.w	r0, #4294967295
 800ae54:	b004      	add	sp, #16
 800ae56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	f043 0320 	orr.w	r3, r3, #32
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	4833      	ldr	r0, [pc, #204]	@ (800af30 <_printf_i+0x23c>)
 800ae64:	2778      	movs	r7, #120	@ 0x78
 800ae66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	6831      	ldr	r1, [r6, #0]
 800ae6e:	061f      	lsls	r7, r3, #24
 800ae70:	f851 5b04 	ldr.w	r5, [r1], #4
 800ae74:	d402      	bmi.n	800ae7c <_printf_i+0x188>
 800ae76:	065f      	lsls	r7, r3, #25
 800ae78:	bf48      	it	mi
 800ae7a:	b2ad      	uxthmi	r5, r5
 800ae7c:	6031      	str	r1, [r6, #0]
 800ae7e:	07d9      	lsls	r1, r3, #31
 800ae80:	bf44      	itt	mi
 800ae82:	f043 0320 	orrmi.w	r3, r3, #32
 800ae86:	6023      	strmi	r3, [r4, #0]
 800ae88:	b11d      	cbz	r5, 800ae92 <_printf_i+0x19e>
 800ae8a:	2310      	movs	r3, #16
 800ae8c:	e7ac      	b.n	800ade8 <_printf_i+0xf4>
 800ae8e:	4827      	ldr	r0, [pc, #156]	@ (800af2c <_printf_i+0x238>)
 800ae90:	e7e9      	b.n	800ae66 <_printf_i+0x172>
 800ae92:	6823      	ldr	r3, [r4, #0]
 800ae94:	f023 0320 	bic.w	r3, r3, #32
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	e7f6      	b.n	800ae8a <_printf_i+0x196>
 800ae9c:	4616      	mov	r6, r2
 800ae9e:	e7bd      	b.n	800ae1c <_printf_i+0x128>
 800aea0:	6833      	ldr	r3, [r6, #0]
 800aea2:	6825      	ldr	r5, [r4, #0]
 800aea4:	6961      	ldr	r1, [r4, #20]
 800aea6:	1d18      	adds	r0, r3, #4
 800aea8:	6030      	str	r0, [r6, #0]
 800aeaa:	062e      	lsls	r6, r5, #24
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	d501      	bpl.n	800aeb4 <_printf_i+0x1c0>
 800aeb0:	6019      	str	r1, [r3, #0]
 800aeb2:	e002      	b.n	800aeba <_printf_i+0x1c6>
 800aeb4:	0668      	lsls	r0, r5, #25
 800aeb6:	d5fb      	bpl.n	800aeb0 <_printf_i+0x1bc>
 800aeb8:	8019      	strh	r1, [r3, #0]
 800aeba:	2300      	movs	r3, #0
 800aebc:	6123      	str	r3, [r4, #16]
 800aebe:	4616      	mov	r6, r2
 800aec0:	e7bc      	b.n	800ae3c <_printf_i+0x148>
 800aec2:	6833      	ldr	r3, [r6, #0]
 800aec4:	1d1a      	adds	r2, r3, #4
 800aec6:	6032      	str	r2, [r6, #0]
 800aec8:	681e      	ldr	r6, [r3, #0]
 800aeca:	6862      	ldr	r2, [r4, #4]
 800aecc:	2100      	movs	r1, #0
 800aece:	4630      	mov	r0, r6
 800aed0:	f7f5 f97e 	bl	80001d0 <memchr>
 800aed4:	b108      	cbz	r0, 800aeda <_printf_i+0x1e6>
 800aed6:	1b80      	subs	r0, r0, r6
 800aed8:	6060      	str	r0, [r4, #4]
 800aeda:	6863      	ldr	r3, [r4, #4]
 800aedc:	6123      	str	r3, [r4, #16]
 800aede:	2300      	movs	r3, #0
 800aee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aee4:	e7aa      	b.n	800ae3c <_printf_i+0x148>
 800aee6:	6923      	ldr	r3, [r4, #16]
 800aee8:	4632      	mov	r2, r6
 800aeea:	4649      	mov	r1, r9
 800aeec:	4640      	mov	r0, r8
 800aeee:	47d0      	blx	sl
 800aef0:	3001      	adds	r0, #1
 800aef2:	d0ad      	beq.n	800ae50 <_printf_i+0x15c>
 800aef4:	6823      	ldr	r3, [r4, #0]
 800aef6:	079b      	lsls	r3, r3, #30
 800aef8:	d413      	bmi.n	800af22 <_printf_i+0x22e>
 800aefa:	68e0      	ldr	r0, [r4, #12]
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	4298      	cmp	r0, r3
 800af00:	bfb8      	it	lt
 800af02:	4618      	movlt	r0, r3
 800af04:	e7a6      	b.n	800ae54 <_printf_i+0x160>
 800af06:	2301      	movs	r3, #1
 800af08:	4632      	mov	r2, r6
 800af0a:	4649      	mov	r1, r9
 800af0c:	4640      	mov	r0, r8
 800af0e:	47d0      	blx	sl
 800af10:	3001      	adds	r0, #1
 800af12:	d09d      	beq.n	800ae50 <_printf_i+0x15c>
 800af14:	3501      	adds	r5, #1
 800af16:	68e3      	ldr	r3, [r4, #12]
 800af18:	9903      	ldr	r1, [sp, #12]
 800af1a:	1a5b      	subs	r3, r3, r1
 800af1c:	42ab      	cmp	r3, r5
 800af1e:	dcf2      	bgt.n	800af06 <_printf_i+0x212>
 800af20:	e7eb      	b.n	800aefa <_printf_i+0x206>
 800af22:	2500      	movs	r5, #0
 800af24:	f104 0619 	add.w	r6, r4, #25
 800af28:	e7f5      	b.n	800af16 <_printf_i+0x222>
 800af2a:	bf00      	nop
 800af2c:	0800f632 	.word	0x0800f632
 800af30:	0800f643 	.word	0x0800f643

0800af34 <_scanf_float>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	b087      	sub	sp, #28
 800af3a:	4617      	mov	r7, r2
 800af3c:	9303      	str	r3, [sp, #12]
 800af3e:	688b      	ldr	r3, [r1, #8]
 800af40:	1e5a      	subs	r2, r3, #1
 800af42:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800af46:	bf81      	itttt	hi
 800af48:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800af4c:	eb03 0b05 	addhi.w	fp, r3, r5
 800af50:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af54:	608b      	strhi	r3, [r1, #8]
 800af56:	680b      	ldr	r3, [r1, #0]
 800af58:	460a      	mov	r2, r1
 800af5a:	f04f 0500 	mov.w	r5, #0
 800af5e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800af62:	f842 3b1c 	str.w	r3, [r2], #28
 800af66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800af6a:	4680      	mov	r8, r0
 800af6c:	460c      	mov	r4, r1
 800af6e:	bf98      	it	ls
 800af70:	f04f 0b00 	movls.w	fp, #0
 800af74:	9201      	str	r2, [sp, #4]
 800af76:	4616      	mov	r6, r2
 800af78:	46aa      	mov	sl, r5
 800af7a:	46a9      	mov	r9, r5
 800af7c:	9502      	str	r5, [sp, #8]
 800af7e:	68a2      	ldr	r2, [r4, #8]
 800af80:	b152      	cbz	r2, 800af98 <_scanf_float+0x64>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	2b4e      	cmp	r3, #78	@ 0x4e
 800af88:	d864      	bhi.n	800b054 <_scanf_float+0x120>
 800af8a:	2b40      	cmp	r3, #64	@ 0x40
 800af8c:	d83c      	bhi.n	800b008 <_scanf_float+0xd4>
 800af8e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800af92:	b2c8      	uxtb	r0, r1
 800af94:	280e      	cmp	r0, #14
 800af96:	d93a      	bls.n	800b00e <_scanf_float+0xda>
 800af98:	f1b9 0f00 	cmp.w	r9, #0
 800af9c:	d003      	beq.n	800afa6 <_scanf_float+0x72>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afaa:	f1ba 0f01 	cmp.w	sl, #1
 800afae:	f200 8117 	bhi.w	800b1e0 <_scanf_float+0x2ac>
 800afb2:	9b01      	ldr	r3, [sp, #4]
 800afb4:	429e      	cmp	r6, r3
 800afb6:	f200 8108 	bhi.w	800b1ca <_scanf_float+0x296>
 800afba:	2001      	movs	r0, #1
 800afbc:	b007      	add	sp, #28
 800afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800afc6:	2a0d      	cmp	r2, #13
 800afc8:	d8e6      	bhi.n	800af98 <_scanf_float+0x64>
 800afca:	a101      	add	r1, pc, #4	@ (adr r1, 800afd0 <_scanf_float+0x9c>)
 800afcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800afd0:	0800b117 	.word	0x0800b117
 800afd4:	0800af99 	.word	0x0800af99
 800afd8:	0800af99 	.word	0x0800af99
 800afdc:	0800af99 	.word	0x0800af99
 800afe0:	0800b177 	.word	0x0800b177
 800afe4:	0800b14f 	.word	0x0800b14f
 800afe8:	0800af99 	.word	0x0800af99
 800afec:	0800af99 	.word	0x0800af99
 800aff0:	0800b125 	.word	0x0800b125
 800aff4:	0800af99 	.word	0x0800af99
 800aff8:	0800af99 	.word	0x0800af99
 800affc:	0800af99 	.word	0x0800af99
 800b000:	0800af99 	.word	0x0800af99
 800b004:	0800b0dd 	.word	0x0800b0dd
 800b008:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b00c:	e7db      	b.n	800afc6 <_scanf_float+0x92>
 800b00e:	290e      	cmp	r1, #14
 800b010:	d8c2      	bhi.n	800af98 <_scanf_float+0x64>
 800b012:	a001      	add	r0, pc, #4	@ (adr r0, 800b018 <_scanf_float+0xe4>)
 800b014:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b018:	0800b0cd 	.word	0x0800b0cd
 800b01c:	0800af99 	.word	0x0800af99
 800b020:	0800b0cd 	.word	0x0800b0cd
 800b024:	0800b163 	.word	0x0800b163
 800b028:	0800af99 	.word	0x0800af99
 800b02c:	0800b075 	.word	0x0800b075
 800b030:	0800b0b3 	.word	0x0800b0b3
 800b034:	0800b0b3 	.word	0x0800b0b3
 800b038:	0800b0b3 	.word	0x0800b0b3
 800b03c:	0800b0b3 	.word	0x0800b0b3
 800b040:	0800b0b3 	.word	0x0800b0b3
 800b044:	0800b0b3 	.word	0x0800b0b3
 800b048:	0800b0b3 	.word	0x0800b0b3
 800b04c:	0800b0b3 	.word	0x0800b0b3
 800b050:	0800b0b3 	.word	0x0800b0b3
 800b054:	2b6e      	cmp	r3, #110	@ 0x6e
 800b056:	d809      	bhi.n	800b06c <_scanf_float+0x138>
 800b058:	2b60      	cmp	r3, #96	@ 0x60
 800b05a:	d8b2      	bhi.n	800afc2 <_scanf_float+0x8e>
 800b05c:	2b54      	cmp	r3, #84	@ 0x54
 800b05e:	d07b      	beq.n	800b158 <_scanf_float+0x224>
 800b060:	2b59      	cmp	r3, #89	@ 0x59
 800b062:	d199      	bne.n	800af98 <_scanf_float+0x64>
 800b064:	2d07      	cmp	r5, #7
 800b066:	d197      	bne.n	800af98 <_scanf_float+0x64>
 800b068:	2508      	movs	r5, #8
 800b06a:	e02c      	b.n	800b0c6 <_scanf_float+0x192>
 800b06c:	2b74      	cmp	r3, #116	@ 0x74
 800b06e:	d073      	beq.n	800b158 <_scanf_float+0x224>
 800b070:	2b79      	cmp	r3, #121	@ 0x79
 800b072:	e7f6      	b.n	800b062 <_scanf_float+0x12e>
 800b074:	6821      	ldr	r1, [r4, #0]
 800b076:	05c8      	lsls	r0, r1, #23
 800b078:	d51b      	bpl.n	800b0b2 <_scanf_float+0x17e>
 800b07a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b07e:	6021      	str	r1, [r4, #0]
 800b080:	f109 0901 	add.w	r9, r9, #1
 800b084:	f1bb 0f00 	cmp.w	fp, #0
 800b088:	d003      	beq.n	800b092 <_scanf_float+0x15e>
 800b08a:	3201      	adds	r2, #1
 800b08c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b090:	60a2      	str	r2, [r4, #8]
 800b092:	68a3      	ldr	r3, [r4, #8]
 800b094:	3b01      	subs	r3, #1
 800b096:	60a3      	str	r3, [r4, #8]
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	3301      	adds	r3, #1
 800b09c:	6123      	str	r3, [r4, #16]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	607b      	str	r3, [r7, #4]
 800b0a6:	f340 8087 	ble.w	800b1b8 <_scanf_float+0x284>
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	e765      	b.n	800af7e <_scanf_float+0x4a>
 800b0b2:	eb1a 0105 	adds.w	r1, sl, r5
 800b0b6:	f47f af6f 	bne.w	800af98 <_scanf_float+0x64>
 800b0ba:	6822      	ldr	r2, [r4, #0]
 800b0bc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b0c0:	6022      	str	r2, [r4, #0]
 800b0c2:	460d      	mov	r5, r1
 800b0c4:	468a      	mov	sl, r1
 800b0c6:	f806 3b01 	strb.w	r3, [r6], #1
 800b0ca:	e7e2      	b.n	800b092 <_scanf_float+0x15e>
 800b0cc:	6822      	ldr	r2, [r4, #0]
 800b0ce:	0610      	lsls	r0, r2, #24
 800b0d0:	f57f af62 	bpl.w	800af98 <_scanf_float+0x64>
 800b0d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b0d8:	6022      	str	r2, [r4, #0]
 800b0da:	e7f4      	b.n	800b0c6 <_scanf_float+0x192>
 800b0dc:	f1ba 0f00 	cmp.w	sl, #0
 800b0e0:	d10e      	bne.n	800b100 <_scanf_float+0x1cc>
 800b0e2:	f1b9 0f00 	cmp.w	r9, #0
 800b0e6:	d10e      	bne.n	800b106 <_scanf_float+0x1d2>
 800b0e8:	6822      	ldr	r2, [r4, #0]
 800b0ea:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b0ee:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b0f2:	d108      	bne.n	800b106 <_scanf_float+0x1d2>
 800b0f4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b0f8:	6022      	str	r2, [r4, #0]
 800b0fa:	f04f 0a01 	mov.w	sl, #1
 800b0fe:	e7e2      	b.n	800b0c6 <_scanf_float+0x192>
 800b100:	f1ba 0f02 	cmp.w	sl, #2
 800b104:	d055      	beq.n	800b1b2 <_scanf_float+0x27e>
 800b106:	2d01      	cmp	r5, #1
 800b108:	d002      	beq.n	800b110 <_scanf_float+0x1dc>
 800b10a:	2d04      	cmp	r5, #4
 800b10c:	f47f af44 	bne.w	800af98 <_scanf_float+0x64>
 800b110:	3501      	adds	r5, #1
 800b112:	b2ed      	uxtb	r5, r5
 800b114:	e7d7      	b.n	800b0c6 <_scanf_float+0x192>
 800b116:	f1ba 0f01 	cmp.w	sl, #1
 800b11a:	f47f af3d 	bne.w	800af98 <_scanf_float+0x64>
 800b11e:	f04f 0a02 	mov.w	sl, #2
 800b122:	e7d0      	b.n	800b0c6 <_scanf_float+0x192>
 800b124:	b97d      	cbnz	r5, 800b146 <_scanf_float+0x212>
 800b126:	f1b9 0f00 	cmp.w	r9, #0
 800b12a:	f47f af38 	bne.w	800af9e <_scanf_float+0x6a>
 800b12e:	6822      	ldr	r2, [r4, #0]
 800b130:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b134:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b138:	f040 8108 	bne.w	800b34c <_scanf_float+0x418>
 800b13c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b140:	6022      	str	r2, [r4, #0]
 800b142:	2501      	movs	r5, #1
 800b144:	e7bf      	b.n	800b0c6 <_scanf_float+0x192>
 800b146:	2d03      	cmp	r5, #3
 800b148:	d0e2      	beq.n	800b110 <_scanf_float+0x1dc>
 800b14a:	2d05      	cmp	r5, #5
 800b14c:	e7de      	b.n	800b10c <_scanf_float+0x1d8>
 800b14e:	2d02      	cmp	r5, #2
 800b150:	f47f af22 	bne.w	800af98 <_scanf_float+0x64>
 800b154:	2503      	movs	r5, #3
 800b156:	e7b6      	b.n	800b0c6 <_scanf_float+0x192>
 800b158:	2d06      	cmp	r5, #6
 800b15a:	f47f af1d 	bne.w	800af98 <_scanf_float+0x64>
 800b15e:	2507      	movs	r5, #7
 800b160:	e7b1      	b.n	800b0c6 <_scanf_float+0x192>
 800b162:	6822      	ldr	r2, [r4, #0]
 800b164:	0591      	lsls	r1, r2, #22
 800b166:	f57f af17 	bpl.w	800af98 <_scanf_float+0x64>
 800b16a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b16e:	6022      	str	r2, [r4, #0]
 800b170:	f8cd 9008 	str.w	r9, [sp, #8]
 800b174:	e7a7      	b.n	800b0c6 <_scanf_float+0x192>
 800b176:	6822      	ldr	r2, [r4, #0]
 800b178:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b17c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b180:	d006      	beq.n	800b190 <_scanf_float+0x25c>
 800b182:	0550      	lsls	r0, r2, #21
 800b184:	f57f af08 	bpl.w	800af98 <_scanf_float+0x64>
 800b188:	f1b9 0f00 	cmp.w	r9, #0
 800b18c:	f000 80de 	beq.w	800b34c <_scanf_float+0x418>
 800b190:	0591      	lsls	r1, r2, #22
 800b192:	bf58      	it	pl
 800b194:	9902      	ldrpl	r1, [sp, #8]
 800b196:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b19a:	bf58      	it	pl
 800b19c:	eba9 0101 	subpl.w	r1, r9, r1
 800b1a0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b1a4:	bf58      	it	pl
 800b1a6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b1aa:	6022      	str	r2, [r4, #0]
 800b1ac:	f04f 0900 	mov.w	r9, #0
 800b1b0:	e789      	b.n	800b0c6 <_scanf_float+0x192>
 800b1b2:	f04f 0a03 	mov.w	sl, #3
 800b1b6:	e786      	b.n	800b0c6 <_scanf_float+0x192>
 800b1b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b1bc:	4639      	mov	r1, r7
 800b1be:	4640      	mov	r0, r8
 800b1c0:	4798      	blx	r3
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	f43f aedb 	beq.w	800af7e <_scanf_float+0x4a>
 800b1c8:	e6e6      	b.n	800af98 <_scanf_float+0x64>
 800b1ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1d2:	463a      	mov	r2, r7
 800b1d4:	4640      	mov	r0, r8
 800b1d6:	4798      	blx	r3
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	3b01      	subs	r3, #1
 800b1dc:	6123      	str	r3, [r4, #16]
 800b1de:	e6e8      	b.n	800afb2 <_scanf_float+0x7e>
 800b1e0:	1e6b      	subs	r3, r5, #1
 800b1e2:	2b06      	cmp	r3, #6
 800b1e4:	d824      	bhi.n	800b230 <_scanf_float+0x2fc>
 800b1e6:	2d02      	cmp	r5, #2
 800b1e8:	d836      	bhi.n	800b258 <_scanf_float+0x324>
 800b1ea:	9b01      	ldr	r3, [sp, #4]
 800b1ec:	429e      	cmp	r6, r3
 800b1ee:	f67f aee4 	bls.w	800afba <_scanf_float+0x86>
 800b1f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b1f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b1fa:	463a      	mov	r2, r7
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4798      	blx	r3
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	3b01      	subs	r3, #1
 800b204:	6123      	str	r3, [r4, #16]
 800b206:	e7f0      	b.n	800b1ea <_scanf_float+0x2b6>
 800b208:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b20c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b210:	463a      	mov	r2, r7
 800b212:	4640      	mov	r0, r8
 800b214:	4798      	blx	r3
 800b216:	6923      	ldr	r3, [r4, #16]
 800b218:	3b01      	subs	r3, #1
 800b21a:	6123      	str	r3, [r4, #16]
 800b21c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b220:	fa5f fa8a 	uxtb.w	sl, sl
 800b224:	f1ba 0f02 	cmp.w	sl, #2
 800b228:	d1ee      	bne.n	800b208 <_scanf_float+0x2d4>
 800b22a:	3d03      	subs	r5, #3
 800b22c:	b2ed      	uxtb	r5, r5
 800b22e:	1b76      	subs	r6, r6, r5
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	05da      	lsls	r2, r3, #23
 800b234:	d530      	bpl.n	800b298 <_scanf_float+0x364>
 800b236:	055b      	lsls	r3, r3, #21
 800b238:	d511      	bpl.n	800b25e <_scanf_float+0x32a>
 800b23a:	9b01      	ldr	r3, [sp, #4]
 800b23c:	429e      	cmp	r6, r3
 800b23e:	f67f aebc 	bls.w	800afba <_scanf_float+0x86>
 800b242:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b246:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b24a:	463a      	mov	r2, r7
 800b24c:	4640      	mov	r0, r8
 800b24e:	4798      	blx	r3
 800b250:	6923      	ldr	r3, [r4, #16]
 800b252:	3b01      	subs	r3, #1
 800b254:	6123      	str	r3, [r4, #16]
 800b256:	e7f0      	b.n	800b23a <_scanf_float+0x306>
 800b258:	46aa      	mov	sl, r5
 800b25a:	46b3      	mov	fp, r6
 800b25c:	e7de      	b.n	800b21c <_scanf_float+0x2e8>
 800b25e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b262:	6923      	ldr	r3, [r4, #16]
 800b264:	2965      	cmp	r1, #101	@ 0x65
 800b266:	f103 33ff 	add.w	r3, r3, #4294967295
 800b26a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b26e:	6123      	str	r3, [r4, #16]
 800b270:	d00c      	beq.n	800b28c <_scanf_float+0x358>
 800b272:	2945      	cmp	r1, #69	@ 0x45
 800b274:	d00a      	beq.n	800b28c <_scanf_float+0x358>
 800b276:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b27a:	463a      	mov	r2, r7
 800b27c:	4640      	mov	r0, r8
 800b27e:	4798      	blx	r3
 800b280:	6923      	ldr	r3, [r4, #16]
 800b282:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b286:	3b01      	subs	r3, #1
 800b288:	1eb5      	subs	r5, r6, #2
 800b28a:	6123      	str	r3, [r4, #16]
 800b28c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b290:	463a      	mov	r2, r7
 800b292:	4640      	mov	r0, r8
 800b294:	4798      	blx	r3
 800b296:	462e      	mov	r6, r5
 800b298:	6822      	ldr	r2, [r4, #0]
 800b29a:	f012 0210 	ands.w	r2, r2, #16
 800b29e:	d001      	beq.n	800b2a4 <_scanf_float+0x370>
 800b2a0:	2000      	movs	r0, #0
 800b2a2:	e68b      	b.n	800afbc <_scanf_float+0x88>
 800b2a4:	7032      	strb	r2, [r6, #0]
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b2ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2b0:	d11c      	bne.n	800b2ec <_scanf_float+0x3b8>
 800b2b2:	9b02      	ldr	r3, [sp, #8]
 800b2b4:	454b      	cmp	r3, r9
 800b2b6:	eba3 0209 	sub.w	r2, r3, r9
 800b2ba:	d123      	bne.n	800b304 <_scanf_float+0x3d0>
 800b2bc:	9901      	ldr	r1, [sp, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	f7ff f975 	bl	800a5b0 <_strtod_r>
 800b2c6:	9b03      	ldr	r3, [sp, #12]
 800b2c8:	6821      	ldr	r1, [r4, #0]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f011 0f02 	tst.w	r1, #2
 800b2d0:	ec57 6b10 	vmov	r6, r7, d0
 800b2d4:	f103 0204 	add.w	r2, r3, #4
 800b2d8:	d01f      	beq.n	800b31a <_scanf_float+0x3e6>
 800b2da:	9903      	ldr	r1, [sp, #12]
 800b2dc:	600a      	str	r2, [r1, #0]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	e9c3 6700 	strd	r6, r7, [r3]
 800b2e4:	68e3      	ldr	r3, [r4, #12]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	60e3      	str	r3, [r4, #12]
 800b2ea:	e7d9      	b.n	800b2a0 <_scanf_float+0x36c>
 800b2ec:	9b04      	ldr	r3, [sp, #16]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d0e4      	beq.n	800b2bc <_scanf_float+0x388>
 800b2f2:	9905      	ldr	r1, [sp, #20]
 800b2f4:	230a      	movs	r3, #10
 800b2f6:	3101      	adds	r1, #1
 800b2f8:	4640      	mov	r0, r8
 800b2fa:	f002 f9e5 	bl	800d6c8 <_strtol_r>
 800b2fe:	9b04      	ldr	r3, [sp, #16]
 800b300:	9e05      	ldr	r6, [sp, #20]
 800b302:	1ac2      	subs	r2, r0, r3
 800b304:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b308:	429e      	cmp	r6, r3
 800b30a:	bf28      	it	cs
 800b30c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b310:	4910      	ldr	r1, [pc, #64]	@ (800b354 <_scanf_float+0x420>)
 800b312:	4630      	mov	r0, r6
 800b314:	f000 f8fe 	bl	800b514 <siprintf>
 800b318:	e7d0      	b.n	800b2bc <_scanf_float+0x388>
 800b31a:	f011 0f04 	tst.w	r1, #4
 800b31e:	9903      	ldr	r1, [sp, #12]
 800b320:	600a      	str	r2, [r1, #0]
 800b322:	d1dc      	bne.n	800b2de <_scanf_float+0x3aa>
 800b324:	681d      	ldr	r5, [r3, #0]
 800b326:	4632      	mov	r2, r6
 800b328:	463b      	mov	r3, r7
 800b32a:	4630      	mov	r0, r6
 800b32c:	4639      	mov	r1, r7
 800b32e:	f7f5 fbfd 	bl	8000b2c <__aeabi_dcmpun>
 800b332:	b128      	cbz	r0, 800b340 <_scanf_float+0x40c>
 800b334:	4808      	ldr	r0, [pc, #32]	@ (800b358 <_scanf_float+0x424>)
 800b336:	f000 f9fb 	bl	800b730 <nanf>
 800b33a:	ed85 0a00 	vstr	s0, [r5]
 800b33e:	e7d1      	b.n	800b2e4 <_scanf_float+0x3b0>
 800b340:	4630      	mov	r0, r6
 800b342:	4639      	mov	r1, r7
 800b344:	f7f5 fc50 	bl	8000be8 <__aeabi_d2f>
 800b348:	6028      	str	r0, [r5, #0]
 800b34a:	e7cb      	b.n	800b2e4 <_scanf_float+0x3b0>
 800b34c:	f04f 0900 	mov.w	r9, #0
 800b350:	e629      	b.n	800afa6 <_scanf_float+0x72>
 800b352:	bf00      	nop
 800b354:	0800f654 	.word	0x0800f654
 800b358:	0800f9f5 	.word	0x0800f9f5

0800b35c <std>:
 800b35c:	2300      	movs	r3, #0
 800b35e:	b510      	push	{r4, lr}
 800b360:	4604      	mov	r4, r0
 800b362:	e9c0 3300 	strd	r3, r3, [r0]
 800b366:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b36a:	6083      	str	r3, [r0, #8]
 800b36c:	8181      	strh	r1, [r0, #12]
 800b36e:	6643      	str	r3, [r0, #100]	@ 0x64
 800b370:	81c2      	strh	r2, [r0, #14]
 800b372:	6183      	str	r3, [r0, #24]
 800b374:	4619      	mov	r1, r3
 800b376:	2208      	movs	r2, #8
 800b378:	305c      	adds	r0, #92	@ 0x5c
 800b37a:	f000 f92e 	bl	800b5da <memset>
 800b37e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b4 <std+0x58>)
 800b380:	6263      	str	r3, [r4, #36]	@ 0x24
 800b382:	4b0d      	ldr	r3, [pc, #52]	@ (800b3b8 <std+0x5c>)
 800b384:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b386:	4b0d      	ldr	r3, [pc, #52]	@ (800b3bc <std+0x60>)
 800b388:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b38a:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c0 <std+0x64>)
 800b38c:	6323      	str	r3, [r4, #48]	@ 0x30
 800b38e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c4 <std+0x68>)
 800b390:	6224      	str	r4, [r4, #32]
 800b392:	429c      	cmp	r4, r3
 800b394:	d006      	beq.n	800b3a4 <std+0x48>
 800b396:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b39a:	4294      	cmp	r4, r2
 800b39c:	d002      	beq.n	800b3a4 <std+0x48>
 800b39e:	33d0      	adds	r3, #208	@ 0xd0
 800b3a0:	429c      	cmp	r4, r3
 800b3a2:	d105      	bne.n	800b3b0 <std+0x54>
 800b3a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3ac:	f000 b9a4 	b.w	800b6f8 <__retarget_lock_init_recursive>
 800b3b0:	bd10      	pop	{r4, pc}
 800b3b2:	bf00      	nop
 800b3b4:	0800b555 	.word	0x0800b555
 800b3b8:	0800b577 	.word	0x0800b577
 800b3bc:	0800b5af 	.word	0x0800b5af
 800b3c0:	0800b5d3 	.word	0x0800b5d3
 800b3c4:	200006d8 	.word	0x200006d8

0800b3c8 <stdio_exit_handler>:
 800b3c8:	4a02      	ldr	r2, [pc, #8]	@ (800b3d4 <stdio_exit_handler+0xc>)
 800b3ca:	4903      	ldr	r1, [pc, #12]	@ (800b3d8 <stdio_exit_handler+0x10>)
 800b3cc:	4803      	ldr	r0, [pc, #12]	@ (800b3dc <stdio_exit_handler+0x14>)
 800b3ce:	f000 b869 	b.w	800b4a4 <_fwalk_sglue>
 800b3d2:	bf00      	nop
 800b3d4:	20000038 	.word	0x20000038
 800b3d8:	0800dd21 	.word	0x0800dd21
 800b3dc:	200001b4 	.word	0x200001b4

0800b3e0 <cleanup_stdio>:
 800b3e0:	6841      	ldr	r1, [r0, #4]
 800b3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800b414 <cleanup_stdio+0x34>)
 800b3e4:	4299      	cmp	r1, r3
 800b3e6:	b510      	push	{r4, lr}
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	d001      	beq.n	800b3f0 <cleanup_stdio+0x10>
 800b3ec:	f002 fc98 	bl	800dd20 <_fflush_r>
 800b3f0:	68a1      	ldr	r1, [r4, #8]
 800b3f2:	4b09      	ldr	r3, [pc, #36]	@ (800b418 <cleanup_stdio+0x38>)
 800b3f4:	4299      	cmp	r1, r3
 800b3f6:	d002      	beq.n	800b3fe <cleanup_stdio+0x1e>
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f002 fc91 	bl	800dd20 <_fflush_r>
 800b3fe:	68e1      	ldr	r1, [r4, #12]
 800b400:	4b06      	ldr	r3, [pc, #24]	@ (800b41c <cleanup_stdio+0x3c>)
 800b402:	4299      	cmp	r1, r3
 800b404:	d004      	beq.n	800b410 <cleanup_stdio+0x30>
 800b406:	4620      	mov	r0, r4
 800b408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b40c:	f002 bc88 	b.w	800dd20 <_fflush_r>
 800b410:	bd10      	pop	{r4, pc}
 800b412:	bf00      	nop
 800b414:	200006d8 	.word	0x200006d8
 800b418:	20000740 	.word	0x20000740
 800b41c:	200007a8 	.word	0x200007a8

0800b420 <global_stdio_init.part.0>:
 800b420:	b510      	push	{r4, lr}
 800b422:	4b0b      	ldr	r3, [pc, #44]	@ (800b450 <global_stdio_init.part.0+0x30>)
 800b424:	4c0b      	ldr	r4, [pc, #44]	@ (800b454 <global_stdio_init.part.0+0x34>)
 800b426:	4a0c      	ldr	r2, [pc, #48]	@ (800b458 <global_stdio_init.part.0+0x38>)
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	4620      	mov	r0, r4
 800b42c:	2200      	movs	r2, #0
 800b42e:	2104      	movs	r1, #4
 800b430:	f7ff ff94 	bl	800b35c <std>
 800b434:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b438:	2201      	movs	r2, #1
 800b43a:	2109      	movs	r1, #9
 800b43c:	f7ff ff8e 	bl	800b35c <std>
 800b440:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b444:	2202      	movs	r2, #2
 800b446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b44a:	2112      	movs	r1, #18
 800b44c:	f7ff bf86 	b.w	800b35c <std>
 800b450:	20000810 	.word	0x20000810
 800b454:	200006d8 	.word	0x200006d8
 800b458:	0800b3c9 	.word	0x0800b3c9

0800b45c <__sfp_lock_acquire>:
 800b45c:	4801      	ldr	r0, [pc, #4]	@ (800b464 <__sfp_lock_acquire+0x8>)
 800b45e:	f000 b94c 	b.w	800b6fa <__retarget_lock_acquire_recursive>
 800b462:	bf00      	nop
 800b464:	20000819 	.word	0x20000819

0800b468 <__sfp_lock_release>:
 800b468:	4801      	ldr	r0, [pc, #4]	@ (800b470 <__sfp_lock_release+0x8>)
 800b46a:	f000 b947 	b.w	800b6fc <__retarget_lock_release_recursive>
 800b46e:	bf00      	nop
 800b470:	20000819 	.word	0x20000819

0800b474 <__sinit>:
 800b474:	b510      	push	{r4, lr}
 800b476:	4604      	mov	r4, r0
 800b478:	f7ff fff0 	bl	800b45c <__sfp_lock_acquire>
 800b47c:	6a23      	ldr	r3, [r4, #32]
 800b47e:	b11b      	cbz	r3, 800b488 <__sinit+0x14>
 800b480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b484:	f7ff bff0 	b.w	800b468 <__sfp_lock_release>
 800b488:	4b04      	ldr	r3, [pc, #16]	@ (800b49c <__sinit+0x28>)
 800b48a:	6223      	str	r3, [r4, #32]
 800b48c:	4b04      	ldr	r3, [pc, #16]	@ (800b4a0 <__sinit+0x2c>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1f5      	bne.n	800b480 <__sinit+0xc>
 800b494:	f7ff ffc4 	bl	800b420 <global_stdio_init.part.0>
 800b498:	e7f2      	b.n	800b480 <__sinit+0xc>
 800b49a:	bf00      	nop
 800b49c:	0800b3e1 	.word	0x0800b3e1
 800b4a0:	20000810 	.word	0x20000810

0800b4a4 <_fwalk_sglue>:
 800b4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4a8:	4607      	mov	r7, r0
 800b4aa:	4688      	mov	r8, r1
 800b4ac:	4614      	mov	r4, r2
 800b4ae:	2600      	movs	r6, #0
 800b4b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b4b4:	f1b9 0901 	subs.w	r9, r9, #1
 800b4b8:	d505      	bpl.n	800b4c6 <_fwalk_sglue+0x22>
 800b4ba:	6824      	ldr	r4, [r4, #0]
 800b4bc:	2c00      	cmp	r4, #0
 800b4be:	d1f7      	bne.n	800b4b0 <_fwalk_sglue+0xc>
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4c6:	89ab      	ldrh	r3, [r5, #12]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d907      	bls.n	800b4dc <_fwalk_sglue+0x38>
 800b4cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	d003      	beq.n	800b4dc <_fwalk_sglue+0x38>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	47c0      	blx	r8
 800b4da:	4306      	orrs	r6, r0
 800b4dc:	3568      	adds	r5, #104	@ 0x68
 800b4de:	e7e9      	b.n	800b4b4 <_fwalk_sglue+0x10>

0800b4e0 <iprintf>:
 800b4e0:	b40f      	push	{r0, r1, r2, r3}
 800b4e2:	b507      	push	{r0, r1, r2, lr}
 800b4e4:	4906      	ldr	r1, [pc, #24]	@ (800b500 <iprintf+0x20>)
 800b4e6:	ab04      	add	r3, sp, #16
 800b4e8:	6808      	ldr	r0, [r1, #0]
 800b4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ee:	6881      	ldr	r1, [r0, #8]
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	f002 fa79 	bl	800d9e8 <_vfiprintf_r>
 800b4f6:	b003      	add	sp, #12
 800b4f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4fc:	b004      	add	sp, #16
 800b4fe:	4770      	bx	lr
 800b500:	200001b0 	.word	0x200001b0

0800b504 <putchar>:
 800b504:	4b02      	ldr	r3, [pc, #8]	@ (800b510 <putchar+0xc>)
 800b506:	4601      	mov	r1, r0
 800b508:	6818      	ldr	r0, [r3, #0]
 800b50a:	6882      	ldr	r2, [r0, #8]
 800b50c:	f002 bc30 	b.w	800dd70 <_putc_r>
 800b510:	200001b0 	.word	0x200001b0

0800b514 <siprintf>:
 800b514:	b40e      	push	{r1, r2, r3}
 800b516:	b500      	push	{lr}
 800b518:	b09c      	sub	sp, #112	@ 0x70
 800b51a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b51c:	9002      	str	r0, [sp, #8]
 800b51e:	9006      	str	r0, [sp, #24]
 800b520:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b524:	4809      	ldr	r0, [pc, #36]	@ (800b54c <siprintf+0x38>)
 800b526:	9107      	str	r1, [sp, #28]
 800b528:	9104      	str	r1, [sp, #16]
 800b52a:	4909      	ldr	r1, [pc, #36]	@ (800b550 <siprintf+0x3c>)
 800b52c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b530:	9105      	str	r1, [sp, #20]
 800b532:	6800      	ldr	r0, [r0, #0]
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	a902      	add	r1, sp, #8
 800b538:	f002 f930 	bl	800d79c <_svfiprintf_r>
 800b53c:	9b02      	ldr	r3, [sp, #8]
 800b53e:	2200      	movs	r2, #0
 800b540:	701a      	strb	r2, [r3, #0]
 800b542:	b01c      	add	sp, #112	@ 0x70
 800b544:	f85d eb04 	ldr.w	lr, [sp], #4
 800b548:	b003      	add	sp, #12
 800b54a:	4770      	bx	lr
 800b54c:	200001b0 	.word	0x200001b0
 800b550:	ffff0208 	.word	0xffff0208

0800b554 <__sread>:
 800b554:	b510      	push	{r4, lr}
 800b556:	460c      	mov	r4, r1
 800b558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b55c:	f000 f87e 	bl	800b65c <_read_r>
 800b560:	2800      	cmp	r0, #0
 800b562:	bfab      	itete	ge
 800b564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b566:	89a3      	ldrhlt	r3, [r4, #12]
 800b568:	181b      	addge	r3, r3, r0
 800b56a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b56e:	bfac      	ite	ge
 800b570:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b572:	81a3      	strhlt	r3, [r4, #12]
 800b574:	bd10      	pop	{r4, pc}

0800b576 <__swrite>:
 800b576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57a:	461f      	mov	r7, r3
 800b57c:	898b      	ldrh	r3, [r1, #12]
 800b57e:	05db      	lsls	r3, r3, #23
 800b580:	4605      	mov	r5, r0
 800b582:	460c      	mov	r4, r1
 800b584:	4616      	mov	r6, r2
 800b586:	d505      	bpl.n	800b594 <__swrite+0x1e>
 800b588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b58c:	2302      	movs	r3, #2
 800b58e:	2200      	movs	r2, #0
 800b590:	f000 f852 	bl	800b638 <_lseek_r>
 800b594:	89a3      	ldrh	r3, [r4, #12]
 800b596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b59a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b59e:	81a3      	strh	r3, [r4, #12]
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	463b      	mov	r3, r7
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5aa:	f000 b869 	b.w	800b680 <_write_r>

0800b5ae <__sseek>:
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	460c      	mov	r4, r1
 800b5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5b6:	f000 f83f 	bl	800b638 <_lseek_r>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	bf15      	itete	ne
 800b5c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5ca:	81a3      	strheq	r3, [r4, #12]
 800b5cc:	bf18      	it	ne
 800b5ce:	81a3      	strhne	r3, [r4, #12]
 800b5d0:	bd10      	pop	{r4, pc}

0800b5d2 <__sclose>:
 800b5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d6:	f000 b81f 	b.w	800b618 <_close_r>

0800b5da <memset>:
 800b5da:	4402      	add	r2, r0
 800b5dc:	4603      	mov	r3, r0
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d100      	bne.n	800b5e4 <memset+0xa>
 800b5e2:	4770      	bx	lr
 800b5e4:	f803 1b01 	strb.w	r1, [r3], #1
 800b5e8:	e7f9      	b.n	800b5de <memset+0x4>

0800b5ea <strncmp>:
 800b5ea:	b510      	push	{r4, lr}
 800b5ec:	b16a      	cbz	r2, 800b60a <strncmp+0x20>
 800b5ee:	3901      	subs	r1, #1
 800b5f0:	1884      	adds	r4, r0, r2
 800b5f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d103      	bne.n	800b606 <strncmp+0x1c>
 800b5fe:	42a0      	cmp	r0, r4
 800b600:	d001      	beq.n	800b606 <strncmp+0x1c>
 800b602:	2a00      	cmp	r2, #0
 800b604:	d1f5      	bne.n	800b5f2 <strncmp+0x8>
 800b606:	1ad0      	subs	r0, r2, r3
 800b608:	bd10      	pop	{r4, pc}
 800b60a:	4610      	mov	r0, r2
 800b60c:	e7fc      	b.n	800b608 <strncmp+0x1e>
	...

0800b610 <_localeconv_r>:
 800b610:	4800      	ldr	r0, [pc, #0]	@ (800b614 <_localeconv_r+0x4>)
 800b612:	4770      	bx	lr
 800b614:	20000134 	.word	0x20000134

0800b618 <_close_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4d06      	ldr	r5, [pc, #24]	@ (800b634 <_close_r+0x1c>)
 800b61c:	2300      	movs	r3, #0
 800b61e:	4604      	mov	r4, r0
 800b620:	4608      	mov	r0, r1
 800b622:	602b      	str	r3, [r5, #0]
 800b624:	f7f7 fed2 	bl	80033cc <_close>
 800b628:	1c43      	adds	r3, r0, #1
 800b62a:	d102      	bne.n	800b632 <_close_r+0x1a>
 800b62c:	682b      	ldr	r3, [r5, #0]
 800b62e:	b103      	cbz	r3, 800b632 <_close_r+0x1a>
 800b630:	6023      	str	r3, [r4, #0]
 800b632:	bd38      	pop	{r3, r4, r5, pc}
 800b634:	20000814 	.word	0x20000814

0800b638 <_lseek_r>:
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	4d07      	ldr	r5, [pc, #28]	@ (800b658 <_lseek_r+0x20>)
 800b63c:	4604      	mov	r4, r0
 800b63e:	4608      	mov	r0, r1
 800b640:	4611      	mov	r1, r2
 800b642:	2200      	movs	r2, #0
 800b644:	602a      	str	r2, [r5, #0]
 800b646:	461a      	mov	r2, r3
 800b648:	f7f7 fee7 	bl	800341a <_lseek>
 800b64c:	1c43      	adds	r3, r0, #1
 800b64e:	d102      	bne.n	800b656 <_lseek_r+0x1e>
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	b103      	cbz	r3, 800b656 <_lseek_r+0x1e>
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	bd38      	pop	{r3, r4, r5, pc}
 800b658:	20000814 	.word	0x20000814

0800b65c <_read_r>:
 800b65c:	b538      	push	{r3, r4, r5, lr}
 800b65e:	4d07      	ldr	r5, [pc, #28]	@ (800b67c <_read_r+0x20>)
 800b660:	4604      	mov	r4, r0
 800b662:	4608      	mov	r0, r1
 800b664:	4611      	mov	r1, r2
 800b666:	2200      	movs	r2, #0
 800b668:	602a      	str	r2, [r5, #0]
 800b66a:	461a      	mov	r2, r3
 800b66c:	f7f7 fe75 	bl	800335a <_read>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_read_r+0x1e>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_read_r+0x1e>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	20000814 	.word	0x20000814

0800b680 <_write_r>:
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4d07      	ldr	r5, [pc, #28]	@ (800b6a0 <_write_r+0x20>)
 800b684:	4604      	mov	r4, r0
 800b686:	4608      	mov	r0, r1
 800b688:	4611      	mov	r1, r2
 800b68a:	2200      	movs	r2, #0
 800b68c:	602a      	str	r2, [r5, #0]
 800b68e:	461a      	mov	r2, r3
 800b690:	f7f7 fe80 	bl	8003394 <_write>
 800b694:	1c43      	adds	r3, r0, #1
 800b696:	d102      	bne.n	800b69e <_write_r+0x1e>
 800b698:	682b      	ldr	r3, [r5, #0]
 800b69a:	b103      	cbz	r3, 800b69e <_write_r+0x1e>
 800b69c:	6023      	str	r3, [r4, #0]
 800b69e:	bd38      	pop	{r3, r4, r5, pc}
 800b6a0:	20000814 	.word	0x20000814

0800b6a4 <__errno>:
 800b6a4:	4b01      	ldr	r3, [pc, #4]	@ (800b6ac <__errno+0x8>)
 800b6a6:	6818      	ldr	r0, [r3, #0]
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop
 800b6ac:	200001b0 	.word	0x200001b0

0800b6b0 <__libc_init_array>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	4d0d      	ldr	r5, [pc, #52]	@ (800b6e8 <__libc_init_array+0x38>)
 800b6b4:	4c0d      	ldr	r4, [pc, #52]	@ (800b6ec <__libc_init_array+0x3c>)
 800b6b6:	1b64      	subs	r4, r4, r5
 800b6b8:	10a4      	asrs	r4, r4, #2
 800b6ba:	2600      	movs	r6, #0
 800b6bc:	42a6      	cmp	r6, r4
 800b6be:	d109      	bne.n	800b6d4 <__libc_init_array+0x24>
 800b6c0:	4d0b      	ldr	r5, [pc, #44]	@ (800b6f0 <__libc_init_array+0x40>)
 800b6c2:	4c0c      	ldr	r4, [pc, #48]	@ (800b6f4 <__libc_init_array+0x44>)
 800b6c4:	f003 fec8 	bl	800f458 <_init>
 800b6c8:	1b64      	subs	r4, r4, r5
 800b6ca:	10a4      	asrs	r4, r4, #2
 800b6cc:	2600      	movs	r6, #0
 800b6ce:	42a6      	cmp	r6, r4
 800b6d0:	d105      	bne.n	800b6de <__libc_init_array+0x2e>
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}
 800b6d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6d8:	4798      	blx	r3
 800b6da:	3601      	adds	r6, #1
 800b6dc:	e7ee      	b.n	800b6bc <__libc_init_array+0xc>
 800b6de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e2:	4798      	blx	r3
 800b6e4:	3601      	adds	r6, #1
 800b6e6:	e7f2      	b.n	800b6ce <__libc_init_array+0x1e>
 800b6e8:	0800fbd8 	.word	0x0800fbd8
 800b6ec:	0800fbd8 	.word	0x0800fbd8
 800b6f0:	0800fbd8 	.word	0x0800fbd8
 800b6f4:	0800fbdc 	.word	0x0800fbdc

0800b6f8 <__retarget_lock_init_recursive>:
 800b6f8:	4770      	bx	lr

0800b6fa <__retarget_lock_acquire_recursive>:
 800b6fa:	4770      	bx	lr

0800b6fc <__retarget_lock_release_recursive>:
 800b6fc:	4770      	bx	lr

0800b6fe <memcpy>:
 800b6fe:	440a      	add	r2, r1
 800b700:	4291      	cmp	r1, r2
 800b702:	f100 33ff 	add.w	r3, r0, #4294967295
 800b706:	d100      	bne.n	800b70a <memcpy+0xc>
 800b708:	4770      	bx	lr
 800b70a:	b510      	push	{r4, lr}
 800b70c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b710:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b714:	4291      	cmp	r1, r2
 800b716:	d1f9      	bne.n	800b70c <memcpy+0xe>
 800b718:	bd10      	pop	{r4, pc}
 800b71a:	0000      	movs	r0, r0
 800b71c:	0000      	movs	r0, r0
	...

0800b720 <nan>:
 800b720:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b728 <nan+0x8>
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	00000000 	.word	0x00000000
 800b72c:	7ff80000 	.word	0x7ff80000

0800b730 <nanf>:
 800b730:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b738 <nanf+0x8>
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	7fc00000 	.word	0x7fc00000

0800b73c <quorem>:
 800b73c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	6903      	ldr	r3, [r0, #16]
 800b742:	690c      	ldr	r4, [r1, #16]
 800b744:	42a3      	cmp	r3, r4
 800b746:	4607      	mov	r7, r0
 800b748:	db7e      	blt.n	800b848 <quorem+0x10c>
 800b74a:	3c01      	subs	r4, #1
 800b74c:	f101 0814 	add.w	r8, r1, #20
 800b750:	00a3      	lsls	r3, r4, #2
 800b752:	f100 0514 	add.w	r5, r0, #20
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b75c:	9301      	str	r3, [sp, #4]
 800b75e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b762:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b766:	3301      	adds	r3, #1
 800b768:	429a      	cmp	r2, r3
 800b76a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b76e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b772:	d32e      	bcc.n	800b7d2 <quorem+0x96>
 800b774:	f04f 0a00 	mov.w	sl, #0
 800b778:	46c4      	mov	ip, r8
 800b77a:	46ae      	mov	lr, r5
 800b77c:	46d3      	mov	fp, sl
 800b77e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b782:	b298      	uxth	r0, r3
 800b784:	fb06 a000 	mla	r0, r6, r0, sl
 800b788:	0c02      	lsrs	r2, r0, #16
 800b78a:	0c1b      	lsrs	r3, r3, #16
 800b78c:	fb06 2303 	mla	r3, r6, r3, r2
 800b790:	f8de 2000 	ldr.w	r2, [lr]
 800b794:	b280      	uxth	r0, r0
 800b796:	b292      	uxth	r2, r2
 800b798:	1a12      	subs	r2, r2, r0
 800b79a:	445a      	add	r2, fp
 800b79c:	f8de 0000 	ldr.w	r0, [lr]
 800b7a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b7aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b7ae:	b292      	uxth	r2, r2
 800b7b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b7b4:	45e1      	cmp	r9, ip
 800b7b6:	f84e 2b04 	str.w	r2, [lr], #4
 800b7ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b7be:	d2de      	bcs.n	800b77e <quorem+0x42>
 800b7c0:	9b00      	ldr	r3, [sp, #0]
 800b7c2:	58eb      	ldr	r3, [r5, r3]
 800b7c4:	b92b      	cbnz	r3, 800b7d2 <quorem+0x96>
 800b7c6:	9b01      	ldr	r3, [sp, #4]
 800b7c8:	3b04      	subs	r3, #4
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	d32f      	bcc.n	800b830 <quorem+0xf4>
 800b7d0:	613c      	str	r4, [r7, #16]
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f001 fd10 	bl	800d1f8 <__mcmp>
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	db25      	blt.n	800b828 <quorem+0xec>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	2000      	movs	r0, #0
 800b7e0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7e4:	f8d1 c000 	ldr.w	ip, [r1]
 800b7e8:	fa1f fe82 	uxth.w	lr, r2
 800b7ec:	fa1f f38c 	uxth.w	r3, ip
 800b7f0:	eba3 030e 	sub.w	r3, r3, lr
 800b7f4:	4403      	add	r3, r0
 800b7f6:	0c12      	lsrs	r2, r2, #16
 800b7f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b7fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b800:	b29b      	uxth	r3, r3
 800b802:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b806:	45c1      	cmp	r9, r8
 800b808:	f841 3b04 	str.w	r3, [r1], #4
 800b80c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b810:	d2e6      	bcs.n	800b7e0 <quorem+0xa4>
 800b812:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b816:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b81a:	b922      	cbnz	r2, 800b826 <quorem+0xea>
 800b81c:	3b04      	subs	r3, #4
 800b81e:	429d      	cmp	r5, r3
 800b820:	461a      	mov	r2, r3
 800b822:	d30b      	bcc.n	800b83c <quorem+0x100>
 800b824:	613c      	str	r4, [r7, #16]
 800b826:	3601      	adds	r6, #1
 800b828:	4630      	mov	r0, r6
 800b82a:	b003      	add	sp, #12
 800b82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b830:	6812      	ldr	r2, [r2, #0]
 800b832:	3b04      	subs	r3, #4
 800b834:	2a00      	cmp	r2, #0
 800b836:	d1cb      	bne.n	800b7d0 <quorem+0x94>
 800b838:	3c01      	subs	r4, #1
 800b83a:	e7c6      	b.n	800b7ca <quorem+0x8e>
 800b83c:	6812      	ldr	r2, [r2, #0]
 800b83e:	3b04      	subs	r3, #4
 800b840:	2a00      	cmp	r2, #0
 800b842:	d1ef      	bne.n	800b824 <quorem+0xe8>
 800b844:	3c01      	subs	r4, #1
 800b846:	e7ea      	b.n	800b81e <quorem+0xe2>
 800b848:	2000      	movs	r0, #0
 800b84a:	e7ee      	b.n	800b82a <quorem+0xee>
 800b84c:	0000      	movs	r0, r0
	...

0800b850 <_dtoa_r>:
 800b850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b854:	69c7      	ldr	r7, [r0, #28]
 800b856:	b099      	sub	sp, #100	@ 0x64
 800b858:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b85c:	ec55 4b10 	vmov	r4, r5, d0
 800b860:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b862:	9109      	str	r1, [sp, #36]	@ 0x24
 800b864:	4683      	mov	fp, r0
 800b866:	920e      	str	r2, [sp, #56]	@ 0x38
 800b868:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b86a:	b97f      	cbnz	r7, 800b88c <_dtoa_r+0x3c>
 800b86c:	2010      	movs	r0, #16
 800b86e:	f001 f937 	bl	800cae0 <malloc>
 800b872:	4602      	mov	r2, r0
 800b874:	f8cb 001c 	str.w	r0, [fp, #28]
 800b878:	b920      	cbnz	r0, 800b884 <_dtoa_r+0x34>
 800b87a:	4ba7      	ldr	r3, [pc, #668]	@ (800bb18 <_dtoa_r+0x2c8>)
 800b87c:	21ef      	movs	r1, #239	@ 0xef
 800b87e:	48a7      	ldr	r0, [pc, #668]	@ (800bb1c <_dtoa_r+0x2cc>)
 800b880:	f002 fb68 	bl	800df54 <__assert_func>
 800b884:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b888:	6007      	str	r7, [r0, #0]
 800b88a:	60c7      	str	r7, [r0, #12]
 800b88c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b890:	6819      	ldr	r1, [r3, #0]
 800b892:	b159      	cbz	r1, 800b8ac <_dtoa_r+0x5c>
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	604a      	str	r2, [r1, #4]
 800b898:	2301      	movs	r3, #1
 800b89a:	4093      	lsls	r3, r2
 800b89c:	608b      	str	r3, [r1, #8]
 800b89e:	4658      	mov	r0, fp
 800b8a0:	f001 fa26 	bl	800ccf0 <_Bfree>
 800b8a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	601a      	str	r2, [r3, #0]
 800b8ac:	1e2b      	subs	r3, r5, #0
 800b8ae:	bfb9      	ittee	lt
 800b8b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b8b4:	9303      	strlt	r3, [sp, #12]
 800b8b6:	2300      	movge	r3, #0
 800b8b8:	6033      	strge	r3, [r6, #0]
 800b8ba:	9f03      	ldr	r7, [sp, #12]
 800b8bc:	4b98      	ldr	r3, [pc, #608]	@ (800bb20 <_dtoa_r+0x2d0>)
 800b8be:	bfbc      	itt	lt
 800b8c0:	2201      	movlt	r2, #1
 800b8c2:	6032      	strlt	r2, [r6, #0]
 800b8c4:	43bb      	bics	r3, r7
 800b8c6:	d112      	bne.n	800b8ee <_dtoa_r+0x9e>
 800b8c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b8ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b8ce:	6013      	str	r3, [r2, #0]
 800b8d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8d4:	4323      	orrs	r3, r4
 800b8d6:	f000 854d 	beq.w	800c374 <_dtoa_r+0xb24>
 800b8da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b8dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bb34 <_dtoa_r+0x2e4>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 854f 	beq.w	800c384 <_dtoa_r+0xb34>
 800b8e6:	f10a 0303 	add.w	r3, sl, #3
 800b8ea:	f000 bd49 	b.w	800c380 <_dtoa_r+0xb30>
 800b8ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	ec51 0b17 	vmov	r0, r1, d7
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b8fe:	f7f5 f8e3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b902:	4680      	mov	r8, r0
 800b904:	b158      	cbz	r0, 800b91e <_dtoa_r+0xce>
 800b906:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b908:	2301      	movs	r3, #1
 800b90a:	6013      	str	r3, [r2, #0]
 800b90c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b90e:	b113      	cbz	r3, 800b916 <_dtoa_r+0xc6>
 800b910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b912:	4b84      	ldr	r3, [pc, #528]	@ (800bb24 <_dtoa_r+0x2d4>)
 800b914:	6013      	str	r3, [r2, #0]
 800b916:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bb38 <_dtoa_r+0x2e8>
 800b91a:	f000 bd33 	b.w	800c384 <_dtoa_r+0xb34>
 800b91e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b922:	aa16      	add	r2, sp, #88	@ 0x58
 800b924:	a917      	add	r1, sp, #92	@ 0x5c
 800b926:	4658      	mov	r0, fp
 800b928:	f001 fd86 	bl	800d438 <__d2b>
 800b92c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b930:	4681      	mov	r9, r0
 800b932:	2e00      	cmp	r6, #0
 800b934:	d077      	beq.n	800ba26 <_dtoa_r+0x1d6>
 800b936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b938:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b93c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b944:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b948:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b94c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b950:	4619      	mov	r1, r3
 800b952:	2200      	movs	r2, #0
 800b954:	4b74      	ldr	r3, [pc, #464]	@ (800bb28 <_dtoa_r+0x2d8>)
 800b956:	f7f4 fc97 	bl	8000288 <__aeabi_dsub>
 800b95a:	a369      	add	r3, pc, #420	@ (adr r3, 800bb00 <_dtoa_r+0x2b0>)
 800b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b960:	f7f4 fe4a 	bl	80005f8 <__aeabi_dmul>
 800b964:	a368      	add	r3, pc, #416	@ (adr r3, 800bb08 <_dtoa_r+0x2b8>)
 800b966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96a:	f7f4 fc8f 	bl	800028c <__adddf3>
 800b96e:	4604      	mov	r4, r0
 800b970:	4630      	mov	r0, r6
 800b972:	460d      	mov	r5, r1
 800b974:	f7f4 fdd6 	bl	8000524 <__aeabi_i2d>
 800b978:	a365      	add	r3, pc, #404	@ (adr r3, 800bb10 <_dtoa_r+0x2c0>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f4 fe3b 	bl	80005f8 <__aeabi_dmul>
 800b982:	4602      	mov	r2, r0
 800b984:	460b      	mov	r3, r1
 800b986:	4620      	mov	r0, r4
 800b988:	4629      	mov	r1, r5
 800b98a:	f7f4 fc7f 	bl	800028c <__adddf3>
 800b98e:	4604      	mov	r4, r0
 800b990:	460d      	mov	r5, r1
 800b992:	f7f5 f8e1 	bl	8000b58 <__aeabi_d2iz>
 800b996:	2200      	movs	r2, #0
 800b998:	4607      	mov	r7, r0
 800b99a:	2300      	movs	r3, #0
 800b99c:	4620      	mov	r0, r4
 800b99e:	4629      	mov	r1, r5
 800b9a0:	f7f5 f89c 	bl	8000adc <__aeabi_dcmplt>
 800b9a4:	b140      	cbz	r0, 800b9b8 <_dtoa_r+0x168>
 800b9a6:	4638      	mov	r0, r7
 800b9a8:	f7f4 fdbc 	bl	8000524 <__aeabi_i2d>
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	462b      	mov	r3, r5
 800b9b0:	f7f5 f88a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9b4:	b900      	cbnz	r0, 800b9b8 <_dtoa_r+0x168>
 800b9b6:	3f01      	subs	r7, #1
 800b9b8:	2f16      	cmp	r7, #22
 800b9ba:	d851      	bhi.n	800ba60 <_dtoa_r+0x210>
 800b9bc:	4b5b      	ldr	r3, [pc, #364]	@ (800bb2c <_dtoa_r+0x2dc>)
 800b9be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9ca:	f7f5 f887 	bl	8000adc <__aeabi_dcmplt>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d048      	beq.n	800ba64 <_dtoa_r+0x214>
 800b9d2:	3f01      	subs	r7, #1
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b9d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b9da:	1b9b      	subs	r3, r3, r6
 800b9dc:	1e5a      	subs	r2, r3, #1
 800b9de:	bf44      	itt	mi
 800b9e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b9e4:	2300      	movmi	r3, #0
 800b9e6:	9208      	str	r2, [sp, #32]
 800b9e8:	bf54      	ite	pl
 800b9ea:	f04f 0800 	movpl.w	r8, #0
 800b9ee:	9308      	strmi	r3, [sp, #32]
 800b9f0:	2f00      	cmp	r7, #0
 800b9f2:	db39      	blt.n	800ba68 <_dtoa_r+0x218>
 800b9f4:	9b08      	ldr	r3, [sp, #32]
 800b9f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b9f8:	443b      	add	r3, r7
 800b9fa:	9308      	str	r3, [sp, #32]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba02:	2b09      	cmp	r3, #9
 800ba04:	d864      	bhi.n	800bad0 <_dtoa_r+0x280>
 800ba06:	2b05      	cmp	r3, #5
 800ba08:	bfc4      	itt	gt
 800ba0a:	3b04      	subgt	r3, #4
 800ba0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ba0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba10:	f1a3 0302 	sub.w	r3, r3, #2
 800ba14:	bfcc      	ite	gt
 800ba16:	2400      	movgt	r4, #0
 800ba18:	2401      	movle	r4, #1
 800ba1a:	2b03      	cmp	r3, #3
 800ba1c:	d863      	bhi.n	800bae6 <_dtoa_r+0x296>
 800ba1e:	e8df f003 	tbb	[pc, r3]
 800ba22:	372a      	.short	0x372a
 800ba24:	5535      	.short	0x5535
 800ba26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ba2a:	441e      	add	r6, r3
 800ba2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ba30:	2b20      	cmp	r3, #32
 800ba32:	bfc1      	itttt	gt
 800ba34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ba38:	409f      	lslgt	r7, r3
 800ba3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ba3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ba42:	bfd6      	itet	le
 800ba44:	f1c3 0320 	rsble	r3, r3, #32
 800ba48:	ea47 0003 	orrgt.w	r0, r7, r3
 800ba4c:	fa04 f003 	lslle.w	r0, r4, r3
 800ba50:	f7f4 fd58 	bl	8000504 <__aeabi_ui2d>
 800ba54:	2201      	movs	r2, #1
 800ba56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ba5a:	3e01      	subs	r6, #1
 800ba5c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ba5e:	e777      	b.n	800b950 <_dtoa_r+0x100>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e7b8      	b.n	800b9d6 <_dtoa_r+0x186>
 800ba64:	9012      	str	r0, [sp, #72]	@ 0x48
 800ba66:	e7b7      	b.n	800b9d8 <_dtoa_r+0x188>
 800ba68:	427b      	negs	r3, r7
 800ba6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	eba8 0807 	sub.w	r8, r8, r7
 800ba72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba74:	e7c4      	b.n	800ba00 <_dtoa_r+0x1b0>
 800ba76:	2300      	movs	r3, #0
 800ba78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	dc35      	bgt.n	800baec <_dtoa_r+0x29c>
 800ba80:	2301      	movs	r3, #1
 800ba82:	9300      	str	r3, [sp, #0]
 800ba84:	9307      	str	r3, [sp, #28]
 800ba86:	461a      	mov	r2, r3
 800ba88:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba8a:	e00b      	b.n	800baa4 <_dtoa_r+0x254>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e7f3      	b.n	800ba78 <_dtoa_r+0x228>
 800ba90:	2300      	movs	r3, #0
 800ba92:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ba96:	18fb      	adds	r3, r7, r3
 800ba98:	9300      	str	r3, [sp, #0]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	9307      	str	r3, [sp, #28]
 800baa0:	bfb8      	it	lt
 800baa2:	2301      	movlt	r3, #1
 800baa4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800baa8:	2100      	movs	r1, #0
 800baaa:	2204      	movs	r2, #4
 800baac:	f102 0514 	add.w	r5, r2, #20
 800bab0:	429d      	cmp	r5, r3
 800bab2:	d91f      	bls.n	800baf4 <_dtoa_r+0x2a4>
 800bab4:	6041      	str	r1, [r0, #4]
 800bab6:	4658      	mov	r0, fp
 800bab8:	f001 f8da 	bl	800cc70 <_Balloc>
 800babc:	4682      	mov	sl, r0
 800babe:	2800      	cmp	r0, #0
 800bac0:	d13c      	bne.n	800bb3c <_dtoa_r+0x2ec>
 800bac2:	4b1b      	ldr	r3, [pc, #108]	@ (800bb30 <_dtoa_r+0x2e0>)
 800bac4:	4602      	mov	r2, r0
 800bac6:	f240 11af 	movw	r1, #431	@ 0x1af
 800baca:	e6d8      	b.n	800b87e <_dtoa_r+0x2e>
 800bacc:	2301      	movs	r3, #1
 800bace:	e7e0      	b.n	800ba92 <_dtoa_r+0x242>
 800bad0:	2401      	movs	r4, #1
 800bad2:	2300      	movs	r3, #0
 800bad4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bad6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bad8:	f04f 33ff 	mov.w	r3, #4294967295
 800badc:	9300      	str	r3, [sp, #0]
 800bade:	9307      	str	r3, [sp, #28]
 800bae0:	2200      	movs	r2, #0
 800bae2:	2312      	movs	r3, #18
 800bae4:	e7d0      	b.n	800ba88 <_dtoa_r+0x238>
 800bae6:	2301      	movs	r3, #1
 800bae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baea:	e7f5      	b.n	800bad8 <_dtoa_r+0x288>
 800baec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	9307      	str	r3, [sp, #28]
 800baf2:	e7d7      	b.n	800baa4 <_dtoa_r+0x254>
 800baf4:	3101      	adds	r1, #1
 800baf6:	0052      	lsls	r2, r2, #1
 800baf8:	e7d8      	b.n	800baac <_dtoa_r+0x25c>
 800bafa:	bf00      	nop
 800bafc:	f3af 8000 	nop.w
 800bb00:	636f4361 	.word	0x636f4361
 800bb04:	3fd287a7 	.word	0x3fd287a7
 800bb08:	8b60c8b3 	.word	0x8b60c8b3
 800bb0c:	3fc68a28 	.word	0x3fc68a28
 800bb10:	509f79fb 	.word	0x509f79fb
 800bb14:	3fd34413 	.word	0x3fd34413
 800bb18:	0800f66e 	.word	0x0800f66e
 800bb1c:	0800f685 	.word	0x0800f685
 800bb20:	7ff00000 	.word	0x7ff00000
 800bb24:	0800f631 	.word	0x0800f631
 800bb28:	3ff80000 	.word	0x3ff80000
 800bb2c:	0800f7e0 	.word	0x0800f7e0
 800bb30:	0800f6dd 	.word	0x0800f6dd
 800bb34:	0800f66a 	.word	0x0800f66a
 800bb38:	0800f630 	.word	0x0800f630
 800bb3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb40:	6018      	str	r0, [r3, #0]
 800bb42:	9b07      	ldr	r3, [sp, #28]
 800bb44:	2b0e      	cmp	r3, #14
 800bb46:	f200 80a4 	bhi.w	800bc92 <_dtoa_r+0x442>
 800bb4a:	2c00      	cmp	r4, #0
 800bb4c:	f000 80a1 	beq.w	800bc92 <_dtoa_r+0x442>
 800bb50:	2f00      	cmp	r7, #0
 800bb52:	dd33      	ble.n	800bbbc <_dtoa_r+0x36c>
 800bb54:	4bad      	ldr	r3, [pc, #692]	@ (800be0c <_dtoa_r+0x5bc>)
 800bb56:	f007 020f 	and.w	r2, r7, #15
 800bb5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb5e:	ed93 7b00 	vldr	d7, [r3]
 800bb62:	05f8      	lsls	r0, r7, #23
 800bb64:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bb68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bb6c:	d516      	bpl.n	800bb9c <_dtoa_r+0x34c>
 800bb6e:	4ba8      	ldr	r3, [pc, #672]	@ (800be10 <_dtoa_r+0x5c0>)
 800bb70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bb74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb78:	f7f4 fe68 	bl	800084c <__aeabi_ddiv>
 800bb7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb80:	f004 040f 	and.w	r4, r4, #15
 800bb84:	2603      	movs	r6, #3
 800bb86:	4da2      	ldr	r5, [pc, #648]	@ (800be10 <_dtoa_r+0x5c0>)
 800bb88:	b954      	cbnz	r4, 800bba0 <_dtoa_r+0x350>
 800bb8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb92:	f7f4 fe5b 	bl	800084c <__aeabi_ddiv>
 800bb96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb9a:	e028      	b.n	800bbee <_dtoa_r+0x39e>
 800bb9c:	2602      	movs	r6, #2
 800bb9e:	e7f2      	b.n	800bb86 <_dtoa_r+0x336>
 800bba0:	07e1      	lsls	r1, r4, #31
 800bba2:	d508      	bpl.n	800bbb6 <_dtoa_r+0x366>
 800bba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bba8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbac:	f7f4 fd24 	bl	80005f8 <__aeabi_dmul>
 800bbb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbb4:	3601      	adds	r6, #1
 800bbb6:	1064      	asrs	r4, r4, #1
 800bbb8:	3508      	adds	r5, #8
 800bbba:	e7e5      	b.n	800bb88 <_dtoa_r+0x338>
 800bbbc:	f000 80d2 	beq.w	800bd64 <_dtoa_r+0x514>
 800bbc0:	427c      	negs	r4, r7
 800bbc2:	4b92      	ldr	r3, [pc, #584]	@ (800be0c <_dtoa_r+0x5bc>)
 800bbc4:	4d92      	ldr	r5, [pc, #584]	@ (800be10 <_dtoa_r+0x5c0>)
 800bbc6:	f004 020f 	and.w	r2, r4, #15
 800bbca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bbd6:	f7f4 fd0f 	bl	80005f8 <__aeabi_dmul>
 800bbda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbde:	1124      	asrs	r4, r4, #4
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	2602      	movs	r6, #2
 800bbe4:	2c00      	cmp	r4, #0
 800bbe6:	f040 80b2 	bne.w	800bd4e <_dtoa_r+0x4fe>
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d1d3      	bne.n	800bb96 <_dtoa_r+0x346>
 800bbee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbf0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f000 80b7 	beq.w	800bd68 <_dtoa_r+0x518>
 800bbfa:	4b86      	ldr	r3, [pc, #536]	@ (800be14 <_dtoa_r+0x5c4>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	4620      	mov	r0, r4
 800bc00:	4629      	mov	r1, r5
 800bc02:	f7f4 ff6b 	bl	8000adc <__aeabi_dcmplt>
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f000 80ae 	beq.w	800bd68 <_dtoa_r+0x518>
 800bc0c:	9b07      	ldr	r3, [sp, #28]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 80aa 	beq.w	800bd68 <_dtoa_r+0x518>
 800bc14:	9b00      	ldr	r3, [sp, #0]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	dd37      	ble.n	800bc8a <_dtoa_r+0x43a>
 800bc1a:	1e7b      	subs	r3, r7, #1
 800bc1c:	9304      	str	r3, [sp, #16]
 800bc1e:	4620      	mov	r0, r4
 800bc20:	4b7d      	ldr	r3, [pc, #500]	@ (800be18 <_dtoa_r+0x5c8>)
 800bc22:	2200      	movs	r2, #0
 800bc24:	4629      	mov	r1, r5
 800bc26:	f7f4 fce7 	bl	80005f8 <__aeabi_dmul>
 800bc2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc2e:	9c00      	ldr	r4, [sp, #0]
 800bc30:	3601      	adds	r6, #1
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7f4 fc76 	bl	8000524 <__aeabi_i2d>
 800bc38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc3c:	f7f4 fcdc 	bl	80005f8 <__aeabi_dmul>
 800bc40:	4b76      	ldr	r3, [pc, #472]	@ (800be1c <_dtoa_r+0x5cc>)
 800bc42:	2200      	movs	r2, #0
 800bc44:	f7f4 fb22 	bl	800028c <__adddf3>
 800bc48:	4605      	mov	r5, r0
 800bc4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bc4e:	2c00      	cmp	r4, #0
 800bc50:	f040 808d 	bne.w	800bd6e <_dtoa_r+0x51e>
 800bc54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc58:	4b71      	ldr	r3, [pc, #452]	@ (800be20 <_dtoa_r+0x5d0>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f7f4 fb14 	bl	8000288 <__aeabi_dsub>
 800bc60:	4602      	mov	r2, r0
 800bc62:	460b      	mov	r3, r1
 800bc64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc68:	462a      	mov	r2, r5
 800bc6a:	4633      	mov	r3, r6
 800bc6c:	f7f4 ff54 	bl	8000b18 <__aeabi_dcmpgt>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	f040 828b 	bne.w	800c18c <_dtoa_r+0x93c>
 800bc76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc7a:	462a      	mov	r2, r5
 800bc7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bc80:	f7f4 ff2c 	bl	8000adc <__aeabi_dcmplt>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	f040 8128 	bne.w	800beda <_dtoa_r+0x68a>
 800bc8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bc8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f2c0 815a 	blt.w	800bf4e <_dtoa_r+0x6fe>
 800bc9a:	2f0e      	cmp	r7, #14
 800bc9c:	f300 8157 	bgt.w	800bf4e <_dtoa_r+0x6fe>
 800bca0:	4b5a      	ldr	r3, [pc, #360]	@ (800be0c <_dtoa_r+0x5bc>)
 800bca2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bca6:	ed93 7b00 	vldr	d7, [r3]
 800bcaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	ed8d 7b00 	vstr	d7, [sp]
 800bcb2:	da03      	bge.n	800bcbc <_dtoa_r+0x46c>
 800bcb4:	9b07      	ldr	r3, [sp, #28]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f340 8101 	ble.w	800bebe <_dtoa_r+0x66e>
 800bcbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bcc0:	4656      	mov	r6, sl
 800bcc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	4629      	mov	r1, r5
 800bcca:	f7f4 fdbf 	bl	800084c <__aeabi_ddiv>
 800bcce:	f7f4 ff43 	bl	8000b58 <__aeabi_d2iz>
 800bcd2:	4680      	mov	r8, r0
 800bcd4:	f7f4 fc26 	bl	8000524 <__aeabi_i2d>
 800bcd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcdc:	f7f4 fc8c 	bl	80005f8 <__aeabi_dmul>
 800bce0:	4602      	mov	r2, r0
 800bce2:	460b      	mov	r3, r1
 800bce4:	4620      	mov	r0, r4
 800bce6:	4629      	mov	r1, r5
 800bce8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bcec:	f7f4 facc 	bl	8000288 <__aeabi_dsub>
 800bcf0:	f806 4b01 	strb.w	r4, [r6], #1
 800bcf4:	9d07      	ldr	r5, [sp, #28]
 800bcf6:	eba6 040a 	sub.w	r4, r6, sl
 800bcfa:	42a5      	cmp	r5, r4
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	f040 8117 	bne.w	800bf32 <_dtoa_r+0x6e2>
 800bd04:	f7f4 fac2 	bl	800028c <__adddf3>
 800bd08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	460d      	mov	r5, r1
 800bd10:	f7f4 ff02 	bl	8000b18 <__aeabi_dcmpgt>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	f040 80f9 	bne.w	800bf0c <_dtoa_r+0x6bc>
 800bd1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd1e:	4620      	mov	r0, r4
 800bd20:	4629      	mov	r1, r5
 800bd22:	f7f4 fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd26:	b118      	cbz	r0, 800bd30 <_dtoa_r+0x4e0>
 800bd28:	f018 0f01 	tst.w	r8, #1
 800bd2c:	f040 80ee 	bne.w	800bf0c <_dtoa_r+0x6bc>
 800bd30:	4649      	mov	r1, r9
 800bd32:	4658      	mov	r0, fp
 800bd34:	f000 ffdc 	bl	800ccf0 <_Bfree>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	7033      	strb	r3, [r6, #0]
 800bd3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd3e:	3701      	adds	r7, #1
 800bd40:	601f      	str	r7, [r3, #0]
 800bd42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 831d 	beq.w	800c384 <_dtoa_r+0xb34>
 800bd4a:	601e      	str	r6, [r3, #0]
 800bd4c:	e31a      	b.n	800c384 <_dtoa_r+0xb34>
 800bd4e:	07e2      	lsls	r2, r4, #31
 800bd50:	d505      	bpl.n	800bd5e <_dtoa_r+0x50e>
 800bd52:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bd56:	f7f4 fc4f 	bl	80005f8 <__aeabi_dmul>
 800bd5a:	3601      	adds	r6, #1
 800bd5c:	2301      	movs	r3, #1
 800bd5e:	1064      	asrs	r4, r4, #1
 800bd60:	3508      	adds	r5, #8
 800bd62:	e73f      	b.n	800bbe4 <_dtoa_r+0x394>
 800bd64:	2602      	movs	r6, #2
 800bd66:	e742      	b.n	800bbee <_dtoa_r+0x39e>
 800bd68:	9c07      	ldr	r4, [sp, #28]
 800bd6a:	9704      	str	r7, [sp, #16]
 800bd6c:	e761      	b.n	800bc32 <_dtoa_r+0x3e2>
 800bd6e:	4b27      	ldr	r3, [pc, #156]	@ (800be0c <_dtoa_r+0x5bc>)
 800bd70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bd7a:	4454      	add	r4, sl
 800bd7c:	2900      	cmp	r1, #0
 800bd7e:	d053      	beq.n	800be28 <_dtoa_r+0x5d8>
 800bd80:	4928      	ldr	r1, [pc, #160]	@ (800be24 <_dtoa_r+0x5d4>)
 800bd82:	2000      	movs	r0, #0
 800bd84:	f7f4 fd62 	bl	800084c <__aeabi_ddiv>
 800bd88:	4633      	mov	r3, r6
 800bd8a:	462a      	mov	r2, r5
 800bd8c:	f7f4 fa7c 	bl	8000288 <__aeabi_dsub>
 800bd90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bd94:	4656      	mov	r6, sl
 800bd96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd9a:	f7f4 fedd 	bl	8000b58 <__aeabi_d2iz>
 800bd9e:	4605      	mov	r5, r0
 800bda0:	f7f4 fbc0 	bl	8000524 <__aeabi_i2d>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdac:	f7f4 fa6c 	bl	8000288 <__aeabi_dsub>
 800bdb0:	3530      	adds	r5, #48	@ 0x30
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdba:	f806 5b01 	strb.w	r5, [r6], #1
 800bdbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdc2:	f7f4 fe8b 	bl	8000adc <__aeabi_dcmplt>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d171      	bne.n	800beae <_dtoa_r+0x65e>
 800bdca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bdce:	4911      	ldr	r1, [pc, #68]	@ (800be14 <_dtoa_r+0x5c4>)
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	f7f4 fa59 	bl	8000288 <__aeabi_dsub>
 800bdd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bdda:	f7f4 fe7f 	bl	8000adc <__aeabi_dcmplt>
 800bdde:	2800      	cmp	r0, #0
 800bde0:	f040 8095 	bne.w	800bf0e <_dtoa_r+0x6be>
 800bde4:	42a6      	cmp	r6, r4
 800bde6:	f43f af50 	beq.w	800bc8a <_dtoa_r+0x43a>
 800bdea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bdee:	4b0a      	ldr	r3, [pc, #40]	@ (800be18 <_dtoa_r+0x5c8>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f7f4 fc01 	bl	80005f8 <__aeabi_dmul>
 800bdf6:	4b08      	ldr	r3, [pc, #32]	@ (800be18 <_dtoa_r+0x5c8>)
 800bdf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be02:	f7f4 fbf9 	bl	80005f8 <__aeabi_dmul>
 800be06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be0a:	e7c4      	b.n	800bd96 <_dtoa_r+0x546>
 800be0c:	0800f7e0 	.word	0x0800f7e0
 800be10:	0800f7b8 	.word	0x0800f7b8
 800be14:	3ff00000 	.word	0x3ff00000
 800be18:	40240000 	.word	0x40240000
 800be1c:	401c0000 	.word	0x401c0000
 800be20:	40140000 	.word	0x40140000
 800be24:	3fe00000 	.word	0x3fe00000
 800be28:	4631      	mov	r1, r6
 800be2a:	4628      	mov	r0, r5
 800be2c:	f7f4 fbe4 	bl	80005f8 <__aeabi_dmul>
 800be30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800be34:	9415      	str	r4, [sp, #84]	@ 0x54
 800be36:	4656      	mov	r6, sl
 800be38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3c:	f7f4 fe8c 	bl	8000b58 <__aeabi_d2iz>
 800be40:	4605      	mov	r5, r0
 800be42:	f7f4 fb6f 	bl	8000524 <__aeabi_i2d>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be4e:	f7f4 fa1b 	bl	8000288 <__aeabi_dsub>
 800be52:	3530      	adds	r5, #48	@ 0x30
 800be54:	f806 5b01 	strb.w	r5, [r6], #1
 800be58:	4602      	mov	r2, r0
 800be5a:	460b      	mov	r3, r1
 800be5c:	42a6      	cmp	r6, r4
 800be5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800be62:	f04f 0200 	mov.w	r2, #0
 800be66:	d124      	bne.n	800beb2 <_dtoa_r+0x662>
 800be68:	4bac      	ldr	r3, [pc, #688]	@ (800c11c <_dtoa_r+0x8cc>)
 800be6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800be6e:	f7f4 fa0d 	bl	800028c <__adddf3>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be7a:	f7f4 fe4d 	bl	8000b18 <__aeabi_dcmpgt>
 800be7e:	2800      	cmp	r0, #0
 800be80:	d145      	bne.n	800bf0e <_dtoa_r+0x6be>
 800be82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800be86:	49a5      	ldr	r1, [pc, #660]	@ (800c11c <_dtoa_r+0x8cc>)
 800be88:	2000      	movs	r0, #0
 800be8a:	f7f4 f9fd 	bl	8000288 <__aeabi_dsub>
 800be8e:	4602      	mov	r2, r0
 800be90:	460b      	mov	r3, r1
 800be92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be96:	f7f4 fe21 	bl	8000adc <__aeabi_dcmplt>
 800be9a:	2800      	cmp	r0, #0
 800be9c:	f43f aef5 	beq.w	800bc8a <_dtoa_r+0x43a>
 800bea0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bea2:	1e73      	subs	r3, r6, #1
 800bea4:	9315      	str	r3, [sp, #84]	@ 0x54
 800bea6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800beaa:	2b30      	cmp	r3, #48	@ 0x30
 800beac:	d0f8      	beq.n	800bea0 <_dtoa_r+0x650>
 800beae:	9f04      	ldr	r7, [sp, #16]
 800beb0:	e73e      	b.n	800bd30 <_dtoa_r+0x4e0>
 800beb2:	4b9b      	ldr	r3, [pc, #620]	@ (800c120 <_dtoa_r+0x8d0>)
 800beb4:	f7f4 fba0 	bl	80005f8 <__aeabi_dmul>
 800beb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bebc:	e7bc      	b.n	800be38 <_dtoa_r+0x5e8>
 800bebe:	d10c      	bne.n	800beda <_dtoa_r+0x68a>
 800bec0:	4b98      	ldr	r3, [pc, #608]	@ (800c124 <_dtoa_r+0x8d4>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bec8:	f7f4 fb96 	bl	80005f8 <__aeabi_dmul>
 800becc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bed0:	f7f4 fe18 	bl	8000b04 <__aeabi_dcmpge>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	f000 8157 	beq.w	800c188 <_dtoa_r+0x938>
 800beda:	2400      	movs	r4, #0
 800bedc:	4625      	mov	r5, r4
 800bede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bee0:	43db      	mvns	r3, r3
 800bee2:	9304      	str	r3, [sp, #16]
 800bee4:	4656      	mov	r6, sl
 800bee6:	2700      	movs	r7, #0
 800bee8:	4621      	mov	r1, r4
 800beea:	4658      	mov	r0, fp
 800beec:	f000 ff00 	bl	800ccf0 <_Bfree>
 800bef0:	2d00      	cmp	r5, #0
 800bef2:	d0dc      	beq.n	800beae <_dtoa_r+0x65e>
 800bef4:	b12f      	cbz	r7, 800bf02 <_dtoa_r+0x6b2>
 800bef6:	42af      	cmp	r7, r5
 800bef8:	d003      	beq.n	800bf02 <_dtoa_r+0x6b2>
 800befa:	4639      	mov	r1, r7
 800befc:	4658      	mov	r0, fp
 800befe:	f000 fef7 	bl	800ccf0 <_Bfree>
 800bf02:	4629      	mov	r1, r5
 800bf04:	4658      	mov	r0, fp
 800bf06:	f000 fef3 	bl	800ccf0 <_Bfree>
 800bf0a:	e7d0      	b.n	800beae <_dtoa_r+0x65e>
 800bf0c:	9704      	str	r7, [sp, #16]
 800bf0e:	4633      	mov	r3, r6
 800bf10:	461e      	mov	r6, r3
 800bf12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf16:	2a39      	cmp	r2, #57	@ 0x39
 800bf18:	d107      	bne.n	800bf2a <_dtoa_r+0x6da>
 800bf1a:	459a      	cmp	sl, r3
 800bf1c:	d1f8      	bne.n	800bf10 <_dtoa_r+0x6c0>
 800bf1e:	9a04      	ldr	r2, [sp, #16]
 800bf20:	3201      	adds	r2, #1
 800bf22:	9204      	str	r2, [sp, #16]
 800bf24:	2230      	movs	r2, #48	@ 0x30
 800bf26:	f88a 2000 	strb.w	r2, [sl]
 800bf2a:	781a      	ldrb	r2, [r3, #0]
 800bf2c:	3201      	adds	r2, #1
 800bf2e:	701a      	strb	r2, [r3, #0]
 800bf30:	e7bd      	b.n	800beae <_dtoa_r+0x65e>
 800bf32:	4b7b      	ldr	r3, [pc, #492]	@ (800c120 <_dtoa_r+0x8d0>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	f7f4 fb5f 	bl	80005f8 <__aeabi_dmul>
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	4604      	mov	r4, r0
 800bf40:	460d      	mov	r5, r1
 800bf42:	f7f4 fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f43f aebb 	beq.w	800bcc2 <_dtoa_r+0x472>
 800bf4c:	e6f0      	b.n	800bd30 <_dtoa_r+0x4e0>
 800bf4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bf50:	2a00      	cmp	r2, #0
 800bf52:	f000 80db 	beq.w	800c10c <_dtoa_r+0x8bc>
 800bf56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf58:	2a01      	cmp	r2, #1
 800bf5a:	f300 80bf 	bgt.w	800c0dc <_dtoa_r+0x88c>
 800bf5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bf60:	2a00      	cmp	r2, #0
 800bf62:	f000 80b7 	beq.w	800c0d4 <_dtoa_r+0x884>
 800bf66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bf6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf6c:	4646      	mov	r6, r8
 800bf6e:	9a08      	ldr	r2, [sp, #32]
 800bf70:	2101      	movs	r1, #1
 800bf72:	441a      	add	r2, r3
 800bf74:	4658      	mov	r0, fp
 800bf76:	4498      	add	r8, r3
 800bf78:	9208      	str	r2, [sp, #32]
 800bf7a:	f000 ffb7 	bl	800ceec <__i2b>
 800bf7e:	4605      	mov	r5, r0
 800bf80:	b15e      	cbz	r6, 800bf9a <_dtoa_r+0x74a>
 800bf82:	9b08      	ldr	r3, [sp, #32]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	dd08      	ble.n	800bf9a <_dtoa_r+0x74a>
 800bf88:	42b3      	cmp	r3, r6
 800bf8a:	9a08      	ldr	r2, [sp, #32]
 800bf8c:	bfa8      	it	ge
 800bf8e:	4633      	movge	r3, r6
 800bf90:	eba8 0803 	sub.w	r8, r8, r3
 800bf94:	1af6      	subs	r6, r6, r3
 800bf96:	1ad3      	subs	r3, r2, r3
 800bf98:	9308      	str	r3, [sp, #32]
 800bf9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf9c:	b1f3      	cbz	r3, 800bfdc <_dtoa_r+0x78c>
 800bf9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 80b7 	beq.w	800c114 <_dtoa_r+0x8c4>
 800bfa6:	b18c      	cbz	r4, 800bfcc <_dtoa_r+0x77c>
 800bfa8:	4629      	mov	r1, r5
 800bfaa:	4622      	mov	r2, r4
 800bfac:	4658      	mov	r0, fp
 800bfae:	f001 f85d 	bl	800d06c <__pow5mult>
 800bfb2:	464a      	mov	r2, r9
 800bfb4:	4601      	mov	r1, r0
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	4658      	mov	r0, fp
 800bfba:	f000 ffad 	bl	800cf18 <__multiply>
 800bfbe:	4649      	mov	r1, r9
 800bfc0:	9004      	str	r0, [sp, #16]
 800bfc2:	4658      	mov	r0, fp
 800bfc4:	f000 fe94 	bl	800ccf0 <_Bfree>
 800bfc8:	9b04      	ldr	r3, [sp, #16]
 800bfca:	4699      	mov	r9, r3
 800bfcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfce:	1b1a      	subs	r2, r3, r4
 800bfd0:	d004      	beq.n	800bfdc <_dtoa_r+0x78c>
 800bfd2:	4649      	mov	r1, r9
 800bfd4:	4658      	mov	r0, fp
 800bfd6:	f001 f849 	bl	800d06c <__pow5mult>
 800bfda:	4681      	mov	r9, r0
 800bfdc:	2101      	movs	r1, #1
 800bfde:	4658      	mov	r0, fp
 800bfe0:	f000 ff84 	bl	800ceec <__i2b>
 800bfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 81cf 	beq.w	800c38c <_dtoa_r+0xb3c>
 800bfee:	461a      	mov	r2, r3
 800bff0:	4601      	mov	r1, r0
 800bff2:	4658      	mov	r0, fp
 800bff4:	f001 f83a 	bl	800d06c <__pow5mult>
 800bff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	4604      	mov	r4, r0
 800bffe:	f300 8095 	bgt.w	800c12c <_dtoa_r+0x8dc>
 800c002:	9b02      	ldr	r3, [sp, #8]
 800c004:	2b00      	cmp	r3, #0
 800c006:	f040 8087 	bne.w	800c118 <_dtoa_r+0x8c8>
 800c00a:	9b03      	ldr	r3, [sp, #12]
 800c00c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c010:	2b00      	cmp	r3, #0
 800c012:	f040 8089 	bne.w	800c128 <_dtoa_r+0x8d8>
 800c016:	9b03      	ldr	r3, [sp, #12]
 800c018:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c01c:	0d1b      	lsrs	r3, r3, #20
 800c01e:	051b      	lsls	r3, r3, #20
 800c020:	b12b      	cbz	r3, 800c02e <_dtoa_r+0x7de>
 800c022:	9b08      	ldr	r3, [sp, #32]
 800c024:	3301      	adds	r3, #1
 800c026:	9308      	str	r3, [sp, #32]
 800c028:	f108 0801 	add.w	r8, r8, #1
 800c02c:	2301      	movs	r3, #1
 800c02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c032:	2b00      	cmp	r3, #0
 800c034:	f000 81b0 	beq.w	800c398 <_dtoa_r+0xb48>
 800c038:	6923      	ldr	r3, [r4, #16]
 800c03a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c03e:	6918      	ldr	r0, [r3, #16]
 800c040:	f000 ff08 	bl	800ce54 <__hi0bits>
 800c044:	f1c0 0020 	rsb	r0, r0, #32
 800c048:	9b08      	ldr	r3, [sp, #32]
 800c04a:	4418      	add	r0, r3
 800c04c:	f010 001f 	ands.w	r0, r0, #31
 800c050:	d077      	beq.n	800c142 <_dtoa_r+0x8f2>
 800c052:	f1c0 0320 	rsb	r3, r0, #32
 800c056:	2b04      	cmp	r3, #4
 800c058:	dd6b      	ble.n	800c132 <_dtoa_r+0x8e2>
 800c05a:	9b08      	ldr	r3, [sp, #32]
 800c05c:	f1c0 001c 	rsb	r0, r0, #28
 800c060:	4403      	add	r3, r0
 800c062:	4480      	add	r8, r0
 800c064:	4406      	add	r6, r0
 800c066:	9308      	str	r3, [sp, #32]
 800c068:	f1b8 0f00 	cmp.w	r8, #0
 800c06c:	dd05      	ble.n	800c07a <_dtoa_r+0x82a>
 800c06e:	4649      	mov	r1, r9
 800c070:	4642      	mov	r2, r8
 800c072:	4658      	mov	r0, fp
 800c074:	f001 f854 	bl	800d120 <__lshift>
 800c078:	4681      	mov	r9, r0
 800c07a:	9b08      	ldr	r3, [sp, #32]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	dd05      	ble.n	800c08c <_dtoa_r+0x83c>
 800c080:	4621      	mov	r1, r4
 800c082:	461a      	mov	r2, r3
 800c084:	4658      	mov	r0, fp
 800c086:	f001 f84b 	bl	800d120 <__lshift>
 800c08a:	4604      	mov	r4, r0
 800c08c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d059      	beq.n	800c146 <_dtoa_r+0x8f6>
 800c092:	4621      	mov	r1, r4
 800c094:	4648      	mov	r0, r9
 800c096:	f001 f8af 	bl	800d1f8 <__mcmp>
 800c09a:	2800      	cmp	r0, #0
 800c09c:	da53      	bge.n	800c146 <_dtoa_r+0x8f6>
 800c09e:	1e7b      	subs	r3, r7, #1
 800c0a0:	9304      	str	r3, [sp, #16]
 800c0a2:	4649      	mov	r1, r9
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	220a      	movs	r2, #10
 800c0a8:	4658      	mov	r0, fp
 800c0aa:	f000 fe43 	bl	800cd34 <__multadd>
 800c0ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0b0:	4681      	mov	r9, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f000 8172 	beq.w	800c39c <_dtoa_r+0xb4c>
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4629      	mov	r1, r5
 800c0bc:	220a      	movs	r2, #10
 800c0be:	4658      	mov	r0, fp
 800c0c0:	f000 fe38 	bl	800cd34 <__multadd>
 800c0c4:	9b00      	ldr	r3, [sp, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	4605      	mov	r5, r0
 800c0ca:	dc67      	bgt.n	800c19c <_dtoa_r+0x94c>
 800c0cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	dc41      	bgt.n	800c156 <_dtoa_r+0x906>
 800c0d2:	e063      	b.n	800c19c <_dtoa_r+0x94c>
 800c0d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c0d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c0da:	e746      	b.n	800bf6a <_dtoa_r+0x71a>
 800c0dc:	9b07      	ldr	r3, [sp, #28]
 800c0de:	1e5c      	subs	r4, r3, #1
 800c0e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0e2:	42a3      	cmp	r3, r4
 800c0e4:	bfbf      	itttt	lt
 800c0e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c0e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c0ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c0ec:	1ae3      	sublt	r3, r4, r3
 800c0ee:	bfb4      	ite	lt
 800c0f0:	18d2      	addlt	r2, r2, r3
 800c0f2:	1b1c      	subge	r4, r3, r4
 800c0f4:	9b07      	ldr	r3, [sp, #28]
 800c0f6:	bfbc      	itt	lt
 800c0f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c0fa:	2400      	movlt	r4, #0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	bfb5      	itete	lt
 800c100:	eba8 0603 	sublt.w	r6, r8, r3
 800c104:	9b07      	ldrge	r3, [sp, #28]
 800c106:	2300      	movlt	r3, #0
 800c108:	4646      	movge	r6, r8
 800c10a:	e730      	b.n	800bf6e <_dtoa_r+0x71e>
 800c10c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c10e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c110:	4646      	mov	r6, r8
 800c112:	e735      	b.n	800bf80 <_dtoa_r+0x730>
 800c114:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c116:	e75c      	b.n	800bfd2 <_dtoa_r+0x782>
 800c118:	2300      	movs	r3, #0
 800c11a:	e788      	b.n	800c02e <_dtoa_r+0x7de>
 800c11c:	3fe00000 	.word	0x3fe00000
 800c120:	40240000 	.word	0x40240000
 800c124:	40140000 	.word	0x40140000
 800c128:	9b02      	ldr	r3, [sp, #8]
 800c12a:	e780      	b.n	800c02e <_dtoa_r+0x7de>
 800c12c:	2300      	movs	r3, #0
 800c12e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c130:	e782      	b.n	800c038 <_dtoa_r+0x7e8>
 800c132:	d099      	beq.n	800c068 <_dtoa_r+0x818>
 800c134:	9a08      	ldr	r2, [sp, #32]
 800c136:	331c      	adds	r3, #28
 800c138:	441a      	add	r2, r3
 800c13a:	4498      	add	r8, r3
 800c13c:	441e      	add	r6, r3
 800c13e:	9208      	str	r2, [sp, #32]
 800c140:	e792      	b.n	800c068 <_dtoa_r+0x818>
 800c142:	4603      	mov	r3, r0
 800c144:	e7f6      	b.n	800c134 <_dtoa_r+0x8e4>
 800c146:	9b07      	ldr	r3, [sp, #28]
 800c148:	9704      	str	r7, [sp, #16]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	dc20      	bgt.n	800c190 <_dtoa_r+0x940>
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c152:	2b02      	cmp	r3, #2
 800c154:	dd1e      	ble.n	800c194 <_dtoa_r+0x944>
 800c156:	9b00      	ldr	r3, [sp, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	f47f aec0 	bne.w	800bede <_dtoa_r+0x68e>
 800c15e:	4621      	mov	r1, r4
 800c160:	2205      	movs	r2, #5
 800c162:	4658      	mov	r0, fp
 800c164:	f000 fde6 	bl	800cd34 <__multadd>
 800c168:	4601      	mov	r1, r0
 800c16a:	4604      	mov	r4, r0
 800c16c:	4648      	mov	r0, r9
 800c16e:	f001 f843 	bl	800d1f8 <__mcmp>
 800c172:	2800      	cmp	r0, #0
 800c174:	f77f aeb3 	ble.w	800bede <_dtoa_r+0x68e>
 800c178:	4656      	mov	r6, sl
 800c17a:	2331      	movs	r3, #49	@ 0x31
 800c17c:	f806 3b01 	strb.w	r3, [r6], #1
 800c180:	9b04      	ldr	r3, [sp, #16]
 800c182:	3301      	adds	r3, #1
 800c184:	9304      	str	r3, [sp, #16]
 800c186:	e6ae      	b.n	800bee6 <_dtoa_r+0x696>
 800c188:	9c07      	ldr	r4, [sp, #28]
 800c18a:	9704      	str	r7, [sp, #16]
 800c18c:	4625      	mov	r5, r4
 800c18e:	e7f3      	b.n	800c178 <_dtoa_r+0x928>
 800c190:	9b07      	ldr	r3, [sp, #28]
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c196:	2b00      	cmp	r3, #0
 800c198:	f000 8104 	beq.w	800c3a4 <_dtoa_r+0xb54>
 800c19c:	2e00      	cmp	r6, #0
 800c19e:	dd05      	ble.n	800c1ac <_dtoa_r+0x95c>
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	4632      	mov	r2, r6
 800c1a4:	4658      	mov	r0, fp
 800c1a6:	f000 ffbb 	bl	800d120 <__lshift>
 800c1aa:	4605      	mov	r5, r0
 800c1ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d05a      	beq.n	800c268 <_dtoa_r+0xa18>
 800c1b2:	6869      	ldr	r1, [r5, #4]
 800c1b4:	4658      	mov	r0, fp
 800c1b6:	f000 fd5b 	bl	800cc70 <_Balloc>
 800c1ba:	4606      	mov	r6, r0
 800c1bc:	b928      	cbnz	r0, 800c1ca <_dtoa_r+0x97a>
 800c1be:	4b84      	ldr	r3, [pc, #528]	@ (800c3d0 <_dtoa_r+0xb80>)
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c1c6:	f7ff bb5a 	b.w	800b87e <_dtoa_r+0x2e>
 800c1ca:	692a      	ldr	r2, [r5, #16]
 800c1cc:	3202      	adds	r2, #2
 800c1ce:	0092      	lsls	r2, r2, #2
 800c1d0:	f105 010c 	add.w	r1, r5, #12
 800c1d4:	300c      	adds	r0, #12
 800c1d6:	f7ff fa92 	bl	800b6fe <memcpy>
 800c1da:	2201      	movs	r2, #1
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4658      	mov	r0, fp
 800c1e0:	f000 ff9e 	bl	800d120 <__lshift>
 800c1e4:	f10a 0301 	add.w	r3, sl, #1
 800c1e8:	9307      	str	r3, [sp, #28]
 800c1ea:	9b00      	ldr	r3, [sp, #0]
 800c1ec:	4453      	add	r3, sl
 800c1ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1f0:	9b02      	ldr	r3, [sp, #8]
 800c1f2:	f003 0301 	and.w	r3, r3, #1
 800c1f6:	462f      	mov	r7, r5
 800c1f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c1fa:	4605      	mov	r5, r0
 800c1fc:	9b07      	ldr	r3, [sp, #28]
 800c1fe:	4621      	mov	r1, r4
 800c200:	3b01      	subs	r3, #1
 800c202:	4648      	mov	r0, r9
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	f7ff fa99 	bl	800b73c <quorem>
 800c20a:	4639      	mov	r1, r7
 800c20c:	9002      	str	r0, [sp, #8]
 800c20e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c212:	4648      	mov	r0, r9
 800c214:	f000 fff0 	bl	800d1f8 <__mcmp>
 800c218:	462a      	mov	r2, r5
 800c21a:	9008      	str	r0, [sp, #32]
 800c21c:	4621      	mov	r1, r4
 800c21e:	4658      	mov	r0, fp
 800c220:	f001 f806 	bl	800d230 <__mdiff>
 800c224:	68c2      	ldr	r2, [r0, #12]
 800c226:	4606      	mov	r6, r0
 800c228:	bb02      	cbnz	r2, 800c26c <_dtoa_r+0xa1c>
 800c22a:	4601      	mov	r1, r0
 800c22c:	4648      	mov	r0, r9
 800c22e:	f000 ffe3 	bl	800d1f8 <__mcmp>
 800c232:	4602      	mov	r2, r0
 800c234:	4631      	mov	r1, r6
 800c236:	4658      	mov	r0, fp
 800c238:	920e      	str	r2, [sp, #56]	@ 0x38
 800c23a:	f000 fd59 	bl	800ccf0 <_Bfree>
 800c23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c240:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c242:	9e07      	ldr	r6, [sp, #28]
 800c244:	ea43 0102 	orr.w	r1, r3, r2
 800c248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c24a:	4319      	orrs	r1, r3
 800c24c:	d110      	bne.n	800c270 <_dtoa_r+0xa20>
 800c24e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c252:	d029      	beq.n	800c2a8 <_dtoa_r+0xa58>
 800c254:	9b08      	ldr	r3, [sp, #32]
 800c256:	2b00      	cmp	r3, #0
 800c258:	dd02      	ble.n	800c260 <_dtoa_r+0xa10>
 800c25a:	9b02      	ldr	r3, [sp, #8]
 800c25c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c260:	9b00      	ldr	r3, [sp, #0]
 800c262:	f883 8000 	strb.w	r8, [r3]
 800c266:	e63f      	b.n	800bee8 <_dtoa_r+0x698>
 800c268:	4628      	mov	r0, r5
 800c26a:	e7bb      	b.n	800c1e4 <_dtoa_r+0x994>
 800c26c:	2201      	movs	r2, #1
 800c26e:	e7e1      	b.n	800c234 <_dtoa_r+0x9e4>
 800c270:	9b08      	ldr	r3, [sp, #32]
 800c272:	2b00      	cmp	r3, #0
 800c274:	db04      	blt.n	800c280 <_dtoa_r+0xa30>
 800c276:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c278:	430b      	orrs	r3, r1
 800c27a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c27c:	430b      	orrs	r3, r1
 800c27e:	d120      	bne.n	800c2c2 <_dtoa_r+0xa72>
 800c280:	2a00      	cmp	r2, #0
 800c282:	dded      	ble.n	800c260 <_dtoa_r+0xa10>
 800c284:	4649      	mov	r1, r9
 800c286:	2201      	movs	r2, #1
 800c288:	4658      	mov	r0, fp
 800c28a:	f000 ff49 	bl	800d120 <__lshift>
 800c28e:	4621      	mov	r1, r4
 800c290:	4681      	mov	r9, r0
 800c292:	f000 ffb1 	bl	800d1f8 <__mcmp>
 800c296:	2800      	cmp	r0, #0
 800c298:	dc03      	bgt.n	800c2a2 <_dtoa_r+0xa52>
 800c29a:	d1e1      	bne.n	800c260 <_dtoa_r+0xa10>
 800c29c:	f018 0f01 	tst.w	r8, #1
 800c2a0:	d0de      	beq.n	800c260 <_dtoa_r+0xa10>
 800c2a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2a6:	d1d8      	bne.n	800c25a <_dtoa_r+0xa0a>
 800c2a8:	9a00      	ldr	r2, [sp, #0]
 800c2aa:	2339      	movs	r3, #57	@ 0x39
 800c2ac:	7013      	strb	r3, [r2, #0]
 800c2ae:	4633      	mov	r3, r6
 800c2b0:	461e      	mov	r6, r3
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c2b8:	2a39      	cmp	r2, #57	@ 0x39
 800c2ba:	d052      	beq.n	800c362 <_dtoa_r+0xb12>
 800c2bc:	3201      	adds	r2, #1
 800c2be:	701a      	strb	r2, [r3, #0]
 800c2c0:	e612      	b.n	800bee8 <_dtoa_r+0x698>
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	dd07      	ble.n	800c2d6 <_dtoa_r+0xa86>
 800c2c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c2ca:	d0ed      	beq.n	800c2a8 <_dtoa_r+0xa58>
 800c2cc:	9a00      	ldr	r2, [sp, #0]
 800c2ce:	f108 0301 	add.w	r3, r8, #1
 800c2d2:	7013      	strb	r3, [r2, #0]
 800c2d4:	e608      	b.n	800bee8 <_dtoa_r+0x698>
 800c2d6:	9b07      	ldr	r3, [sp, #28]
 800c2d8:	9a07      	ldr	r2, [sp, #28]
 800c2da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d028      	beq.n	800c336 <_dtoa_r+0xae6>
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	220a      	movs	r2, #10
 800c2ea:	4658      	mov	r0, fp
 800c2ec:	f000 fd22 	bl	800cd34 <__multadd>
 800c2f0:	42af      	cmp	r7, r5
 800c2f2:	4681      	mov	r9, r0
 800c2f4:	f04f 0300 	mov.w	r3, #0
 800c2f8:	f04f 020a 	mov.w	r2, #10
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4658      	mov	r0, fp
 800c300:	d107      	bne.n	800c312 <_dtoa_r+0xac2>
 800c302:	f000 fd17 	bl	800cd34 <__multadd>
 800c306:	4607      	mov	r7, r0
 800c308:	4605      	mov	r5, r0
 800c30a:	9b07      	ldr	r3, [sp, #28]
 800c30c:	3301      	adds	r3, #1
 800c30e:	9307      	str	r3, [sp, #28]
 800c310:	e774      	b.n	800c1fc <_dtoa_r+0x9ac>
 800c312:	f000 fd0f 	bl	800cd34 <__multadd>
 800c316:	4629      	mov	r1, r5
 800c318:	4607      	mov	r7, r0
 800c31a:	2300      	movs	r3, #0
 800c31c:	220a      	movs	r2, #10
 800c31e:	4658      	mov	r0, fp
 800c320:	f000 fd08 	bl	800cd34 <__multadd>
 800c324:	4605      	mov	r5, r0
 800c326:	e7f0      	b.n	800c30a <_dtoa_r+0xaba>
 800c328:	9b00      	ldr	r3, [sp, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	bfcc      	ite	gt
 800c32e:	461e      	movgt	r6, r3
 800c330:	2601      	movle	r6, #1
 800c332:	4456      	add	r6, sl
 800c334:	2700      	movs	r7, #0
 800c336:	4649      	mov	r1, r9
 800c338:	2201      	movs	r2, #1
 800c33a:	4658      	mov	r0, fp
 800c33c:	f000 fef0 	bl	800d120 <__lshift>
 800c340:	4621      	mov	r1, r4
 800c342:	4681      	mov	r9, r0
 800c344:	f000 ff58 	bl	800d1f8 <__mcmp>
 800c348:	2800      	cmp	r0, #0
 800c34a:	dcb0      	bgt.n	800c2ae <_dtoa_r+0xa5e>
 800c34c:	d102      	bne.n	800c354 <_dtoa_r+0xb04>
 800c34e:	f018 0f01 	tst.w	r8, #1
 800c352:	d1ac      	bne.n	800c2ae <_dtoa_r+0xa5e>
 800c354:	4633      	mov	r3, r6
 800c356:	461e      	mov	r6, r3
 800c358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c35c:	2a30      	cmp	r2, #48	@ 0x30
 800c35e:	d0fa      	beq.n	800c356 <_dtoa_r+0xb06>
 800c360:	e5c2      	b.n	800bee8 <_dtoa_r+0x698>
 800c362:	459a      	cmp	sl, r3
 800c364:	d1a4      	bne.n	800c2b0 <_dtoa_r+0xa60>
 800c366:	9b04      	ldr	r3, [sp, #16]
 800c368:	3301      	adds	r3, #1
 800c36a:	9304      	str	r3, [sp, #16]
 800c36c:	2331      	movs	r3, #49	@ 0x31
 800c36e:	f88a 3000 	strb.w	r3, [sl]
 800c372:	e5b9      	b.n	800bee8 <_dtoa_r+0x698>
 800c374:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c376:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c3d4 <_dtoa_r+0xb84>
 800c37a:	b11b      	cbz	r3, 800c384 <_dtoa_r+0xb34>
 800c37c:	f10a 0308 	add.w	r3, sl, #8
 800c380:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c382:	6013      	str	r3, [r2, #0]
 800c384:	4650      	mov	r0, sl
 800c386:	b019      	add	sp, #100	@ 0x64
 800c388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c38e:	2b01      	cmp	r3, #1
 800c390:	f77f ae37 	ble.w	800c002 <_dtoa_r+0x7b2>
 800c394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c396:	930a      	str	r3, [sp, #40]	@ 0x28
 800c398:	2001      	movs	r0, #1
 800c39a:	e655      	b.n	800c048 <_dtoa_r+0x7f8>
 800c39c:	9b00      	ldr	r3, [sp, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	f77f aed6 	ble.w	800c150 <_dtoa_r+0x900>
 800c3a4:	4656      	mov	r6, sl
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	4648      	mov	r0, r9
 800c3aa:	f7ff f9c7 	bl	800b73c <quorem>
 800c3ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c3b2:	f806 8b01 	strb.w	r8, [r6], #1
 800c3b6:	9b00      	ldr	r3, [sp, #0]
 800c3b8:	eba6 020a 	sub.w	r2, r6, sl
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	ddb3      	ble.n	800c328 <_dtoa_r+0xad8>
 800c3c0:	4649      	mov	r1, r9
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	220a      	movs	r2, #10
 800c3c6:	4658      	mov	r0, fp
 800c3c8:	f000 fcb4 	bl	800cd34 <__multadd>
 800c3cc:	4681      	mov	r9, r0
 800c3ce:	e7ea      	b.n	800c3a6 <_dtoa_r+0xb56>
 800c3d0:	0800f6dd 	.word	0x0800f6dd
 800c3d4:	0800f661 	.word	0x0800f661

0800c3d8 <_free_r>:
 800c3d8:	b538      	push	{r3, r4, r5, lr}
 800c3da:	4605      	mov	r5, r0
 800c3dc:	2900      	cmp	r1, #0
 800c3de:	d041      	beq.n	800c464 <_free_r+0x8c>
 800c3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3e4:	1f0c      	subs	r4, r1, #4
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	bfb8      	it	lt
 800c3ea:	18e4      	addlt	r4, r4, r3
 800c3ec:	f000 fc34 	bl	800cc58 <__malloc_lock>
 800c3f0:	4a1d      	ldr	r2, [pc, #116]	@ (800c468 <_free_r+0x90>)
 800c3f2:	6813      	ldr	r3, [r2, #0]
 800c3f4:	b933      	cbnz	r3, 800c404 <_free_r+0x2c>
 800c3f6:	6063      	str	r3, [r4, #4]
 800c3f8:	6014      	str	r4, [r2, #0]
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c400:	f000 bc30 	b.w	800cc64 <__malloc_unlock>
 800c404:	42a3      	cmp	r3, r4
 800c406:	d908      	bls.n	800c41a <_free_r+0x42>
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	1821      	adds	r1, r4, r0
 800c40c:	428b      	cmp	r3, r1
 800c40e:	bf01      	itttt	eq
 800c410:	6819      	ldreq	r1, [r3, #0]
 800c412:	685b      	ldreq	r3, [r3, #4]
 800c414:	1809      	addeq	r1, r1, r0
 800c416:	6021      	streq	r1, [r4, #0]
 800c418:	e7ed      	b.n	800c3f6 <_free_r+0x1e>
 800c41a:	461a      	mov	r2, r3
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	b10b      	cbz	r3, 800c424 <_free_r+0x4c>
 800c420:	42a3      	cmp	r3, r4
 800c422:	d9fa      	bls.n	800c41a <_free_r+0x42>
 800c424:	6811      	ldr	r1, [r2, #0]
 800c426:	1850      	adds	r0, r2, r1
 800c428:	42a0      	cmp	r0, r4
 800c42a:	d10b      	bne.n	800c444 <_free_r+0x6c>
 800c42c:	6820      	ldr	r0, [r4, #0]
 800c42e:	4401      	add	r1, r0
 800c430:	1850      	adds	r0, r2, r1
 800c432:	4283      	cmp	r3, r0
 800c434:	6011      	str	r1, [r2, #0]
 800c436:	d1e0      	bne.n	800c3fa <_free_r+0x22>
 800c438:	6818      	ldr	r0, [r3, #0]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	6053      	str	r3, [r2, #4]
 800c43e:	4408      	add	r0, r1
 800c440:	6010      	str	r0, [r2, #0]
 800c442:	e7da      	b.n	800c3fa <_free_r+0x22>
 800c444:	d902      	bls.n	800c44c <_free_r+0x74>
 800c446:	230c      	movs	r3, #12
 800c448:	602b      	str	r3, [r5, #0]
 800c44a:	e7d6      	b.n	800c3fa <_free_r+0x22>
 800c44c:	6820      	ldr	r0, [r4, #0]
 800c44e:	1821      	adds	r1, r4, r0
 800c450:	428b      	cmp	r3, r1
 800c452:	bf04      	itt	eq
 800c454:	6819      	ldreq	r1, [r3, #0]
 800c456:	685b      	ldreq	r3, [r3, #4]
 800c458:	6063      	str	r3, [r4, #4]
 800c45a:	bf04      	itt	eq
 800c45c:	1809      	addeq	r1, r1, r0
 800c45e:	6021      	streq	r1, [r4, #0]
 800c460:	6054      	str	r4, [r2, #4]
 800c462:	e7ca      	b.n	800c3fa <_free_r+0x22>
 800c464:	bd38      	pop	{r3, r4, r5, pc}
 800c466:	bf00      	nop
 800c468:	20000820 	.word	0x20000820

0800c46c <rshift>:
 800c46c:	6903      	ldr	r3, [r0, #16]
 800c46e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c476:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c47a:	f100 0414 	add.w	r4, r0, #20
 800c47e:	dd45      	ble.n	800c50c <rshift+0xa0>
 800c480:	f011 011f 	ands.w	r1, r1, #31
 800c484:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c488:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c48c:	d10c      	bne.n	800c4a8 <rshift+0x3c>
 800c48e:	f100 0710 	add.w	r7, r0, #16
 800c492:	4629      	mov	r1, r5
 800c494:	42b1      	cmp	r1, r6
 800c496:	d334      	bcc.n	800c502 <rshift+0x96>
 800c498:	1a9b      	subs	r3, r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	1eea      	subs	r2, r5, #3
 800c49e:	4296      	cmp	r6, r2
 800c4a0:	bf38      	it	cc
 800c4a2:	2300      	movcc	r3, #0
 800c4a4:	4423      	add	r3, r4
 800c4a6:	e015      	b.n	800c4d4 <rshift+0x68>
 800c4a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c4ac:	f1c1 0820 	rsb	r8, r1, #32
 800c4b0:	40cf      	lsrs	r7, r1
 800c4b2:	f105 0e04 	add.w	lr, r5, #4
 800c4b6:	46a1      	mov	r9, r4
 800c4b8:	4576      	cmp	r6, lr
 800c4ba:	46f4      	mov	ip, lr
 800c4bc:	d815      	bhi.n	800c4ea <rshift+0x7e>
 800c4be:	1a9a      	subs	r2, r3, r2
 800c4c0:	0092      	lsls	r2, r2, #2
 800c4c2:	3a04      	subs	r2, #4
 800c4c4:	3501      	adds	r5, #1
 800c4c6:	42ae      	cmp	r6, r5
 800c4c8:	bf38      	it	cc
 800c4ca:	2200      	movcc	r2, #0
 800c4cc:	18a3      	adds	r3, r4, r2
 800c4ce:	50a7      	str	r7, [r4, r2]
 800c4d0:	b107      	cbz	r7, 800c4d4 <rshift+0x68>
 800c4d2:	3304      	adds	r3, #4
 800c4d4:	1b1a      	subs	r2, r3, r4
 800c4d6:	42a3      	cmp	r3, r4
 800c4d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4dc:	bf08      	it	eq
 800c4de:	2300      	moveq	r3, #0
 800c4e0:	6102      	str	r2, [r0, #16]
 800c4e2:	bf08      	it	eq
 800c4e4:	6143      	streq	r3, [r0, #20]
 800c4e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4ea:	f8dc c000 	ldr.w	ip, [ip]
 800c4ee:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4f2:	ea4c 0707 	orr.w	r7, ip, r7
 800c4f6:	f849 7b04 	str.w	r7, [r9], #4
 800c4fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4fe:	40cf      	lsrs	r7, r1
 800c500:	e7da      	b.n	800c4b8 <rshift+0x4c>
 800c502:	f851 cb04 	ldr.w	ip, [r1], #4
 800c506:	f847 cf04 	str.w	ip, [r7, #4]!
 800c50a:	e7c3      	b.n	800c494 <rshift+0x28>
 800c50c:	4623      	mov	r3, r4
 800c50e:	e7e1      	b.n	800c4d4 <rshift+0x68>

0800c510 <__hexdig_fun>:
 800c510:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c514:	2b09      	cmp	r3, #9
 800c516:	d802      	bhi.n	800c51e <__hexdig_fun+0xe>
 800c518:	3820      	subs	r0, #32
 800c51a:	b2c0      	uxtb	r0, r0
 800c51c:	4770      	bx	lr
 800c51e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c522:	2b05      	cmp	r3, #5
 800c524:	d801      	bhi.n	800c52a <__hexdig_fun+0x1a>
 800c526:	3847      	subs	r0, #71	@ 0x47
 800c528:	e7f7      	b.n	800c51a <__hexdig_fun+0xa>
 800c52a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c52e:	2b05      	cmp	r3, #5
 800c530:	d801      	bhi.n	800c536 <__hexdig_fun+0x26>
 800c532:	3827      	subs	r0, #39	@ 0x27
 800c534:	e7f1      	b.n	800c51a <__hexdig_fun+0xa>
 800c536:	2000      	movs	r0, #0
 800c538:	4770      	bx	lr
	...

0800c53c <__gethex>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	b085      	sub	sp, #20
 800c542:	468a      	mov	sl, r1
 800c544:	9302      	str	r3, [sp, #8]
 800c546:	680b      	ldr	r3, [r1, #0]
 800c548:	9001      	str	r0, [sp, #4]
 800c54a:	4690      	mov	r8, r2
 800c54c:	1c9c      	adds	r4, r3, #2
 800c54e:	46a1      	mov	r9, r4
 800c550:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c554:	2830      	cmp	r0, #48	@ 0x30
 800c556:	d0fa      	beq.n	800c54e <__gethex+0x12>
 800c558:	eba9 0303 	sub.w	r3, r9, r3
 800c55c:	f1a3 0b02 	sub.w	fp, r3, #2
 800c560:	f7ff ffd6 	bl	800c510 <__hexdig_fun>
 800c564:	4605      	mov	r5, r0
 800c566:	2800      	cmp	r0, #0
 800c568:	d168      	bne.n	800c63c <__gethex+0x100>
 800c56a:	49a0      	ldr	r1, [pc, #640]	@ (800c7ec <__gethex+0x2b0>)
 800c56c:	2201      	movs	r2, #1
 800c56e:	4648      	mov	r0, r9
 800c570:	f7ff f83b 	bl	800b5ea <strncmp>
 800c574:	4607      	mov	r7, r0
 800c576:	2800      	cmp	r0, #0
 800c578:	d167      	bne.n	800c64a <__gethex+0x10e>
 800c57a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c57e:	4626      	mov	r6, r4
 800c580:	f7ff ffc6 	bl	800c510 <__hexdig_fun>
 800c584:	2800      	cmp	r0, #0
 800c586:	d062      	beq.n	800c64e <__gethex+0x112>
 800c588:	4623      	mov	r3, r4
 800c58a:	7818      	ldrb	r0, [r3, #0]
 800c58c:	2830      	cmp	r0, #48	@ 0x30
 800c58e:	4699      	mov	r9, r3
 800c590:	f103 0301 	add.w	r3, r3, #1
 800c594:	d0f9      	beq.n	800c58a <__gethex+0x4e>
 800c596:	f7ff ffbb 	bl	800c510 <__hexdig_fun>
 800c59a:	fab0 f580 	clz	r5, r0
 800c59e:	096d      	lsrs	r5, r5, #5
 800c5a0:	f04f 0b01 	mov.w	fp, #1
 800c5a4:	464a      	mov	r2, r9
 800c5a6:	4616      	mov	r6, r2
 800c5a8:	3201      	adds	r2, #1
 800c5aa:	7830      	ldrb	r0, [r6, #0]
 800c5ac:	f7ff ffb0 	bl	800c510 <__hexdig_fun>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d1f8      	bne.n	800c5a6 <__gethex+0x6a>
 800c5b4:	498d      	ldr	r1, [pc, #564]	@ (800c7ec <__gethex+0x2b0>)
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7ff f816 	bl	800b5ea <strncmp>
 800c5be:	2800      	cmp	r0, #0
 800c5c0:	d13f      	bne.n	800c642 <__gethex+0x106>
 800c5c2:	b944      	cbnz	r4, 800c5d6 <__gethex+0x9a>
 800c5c4:	1c74      	adds	r4, r6, #1
 800c5c6:	4622      	mov	r2, r4
 800c5c8:	4616      	mov	r6, r2
 800c5ca:	3201      	adds	r2, #1
 800c5cc:	7830      	ldrb	r0, [r6, #0]
 800c5ce:	f7ff ff9f 	bl	800c510 <__hexdig_fun>
 800c5d2:	2800      	cmp	r0, #0
 800c5d4:	d1f8      	bne.n	800c5c8 <__gethex+0x8c>
 800c5d6:	1ba4      	subs	r4, r4, r6
 800c5d8:	00a7      	lsls	r7, r4, #2
 800c5da:	7833      	ldrb	r3, [r6, #0]
 800c5dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c5e0:	2b50      	cmp	r3, #80	@ 0x50
 800c5e2:	d13e      	bne.n	800c662 <__gethex+0x126>
 800c5e4:	7873      	ldrb	r3, [r6, #1]
 800c5e6:	2b2b      	cmp	r3, #43	@ 0x2b
 800c5e8:	d033      	beq.n	800c652 <__gethex+0x116>
 800c5ea:	2b2d      	cmp	r3, #45	@ 0x2d
 800c5ec:	d034      	beq.n	800c658 <__gethex+0x11c>
 800c5ee:	1c71      	adds	r1, r6, #1
 800c5f0:	2400      	movs	r4, #0
 800c5f2:	7808      	ldrb	r0, [r1, #0]
 800c5f4:	f7ff ff8c 	bl	800c510 <__hexdig_fun>
 800c5f8:	1e43      	subs	r3, r0, #1
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b18      	cmp	r3, #24
 800c5fe:	d830      	bhi.n	800c662 <__gethex+0x126>
 800c600:	f1a0 0210 	sub.w	r2, r0, #16
 800c604:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c608:	f7ff ff82 	bl	800c510 <__hexdig_fun>
 800c60c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c610:	fa5f fc8c 	uxtb.w	ip, ip
 800c614:	f1bc 0f18 	cmp.w	ip, #24
 800c618:	f04f 030a 	mov.w	r3, #10
 800c61c:	d91e      	bls.n	800c65c <__gethex+0x120>
 800c61e:	b104      	cbz	r4, 800c622 <__gethex+0xe6>
 800c620:	4252      	negs	r2, r2
 800c622:	4417      	add	r7, r2
 800c624:	f8ca 1000 	str.w	r1, [sl]
 800c628:	b1ed      	cbz	r5, 800c666 <__gethex+0x12a>
 800c62a:	f1bb 0f00 	cmp.w	fp, #0
 800c62e:	bf0c      	ite	eq
 800c630:	2506      	moveq	r5, #6
 800c632:	2500      	movne	r5, #0
 800c634:	4628      	mov	r0, r5
 800c636:	b005      	add	sp, #20
 800c638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63c:	2500      	movs	r5, #0
 800c63e:	462c      	mov	r4, r5
 800c640:	e7b0      	b.n	800c5a4 <__gethex+0x68>
 800c642:	2c00      	cmp	r4, #0
 800c644:	d1c7      	bne.n	800c5d6 <__gethex+0x9a>
 800c646:	4627      	mov	r7, r4
 800c648:	e7c7      	b.n	800c5da <__gethex+0x9e>
 800c64a:	464e      	mov	r6, r9
 800c64c:	462f      	mov	r7, r5
 800c64e:	2501      	movs	r5, #1
 800c650:	e7c3      	b.n	800c5da <__gethex+0x9e>
 800c652:	2400      	movs	r4, #0
 800c654:	1cb1      	adds	r1, r6, #2
 800c656:	e7cc      	b.n	800c5f2 <__gethex+0xb6>
 800c658:	2401      	movs	r4, #1
 800c65a:	e7fb      	b.n	800c654 <__gethex+0x118>
 800c65c:	fb03 0002 	mla	r0, r3, r2, r0
 800c660:	e7ce      	b.n	800c600 <__gethex+0xc4>
 800c662:	4631      	mov	r1, r6
 800c664:	e7de      	b.n	800c624 <__gethex+0xe8>
 800c666:	eba6 0309 	sub.w	r3, r6, r9
 800c66a:	3b01      	subs	r3, #1
 800c66c:	4629      	mov	r1, r5
 800c66e:	2b07      	cmp	r3, #7
 800c670:	dc0a      	bgt.n	800c688 <__gethex+0x14c>
 800c672:	9801      	ldr	r0, [sp, #4]
 800c674:	f000 fafc 	bl	800cc70 <_Balloc>
 800c678:	4604      	mov	r4, r0
 800c67a:	b940      	cbnz	r0, 800c68e <__gethex+0x152>
 800c67c:	4b5c      	ldr	r3, [pc, #368]	@ (800c7f0 <__gethex+0x2b4>)
 800c67e:	4602      	mov	r2, r0
 800c680:	21e4      	movs	r1, #228	@ 0xe4
 800c682:	485c      	ldr	r0, [pc, #368]	@ (800c7f4 <__gethex+0x2b8>)
 800c684:	f001 fc66 	bl	800df54 <__assert_func>
 800c688:	3101      	adds	r1, #1
 800c68a:	105b      	asrs	r3, r3, #1
 800c68c:	e7ef      	b.n	800c66e <__gethex+0x132>
 800c68e:	f100 0a14 	add.w	sl, r0, #20
 800c692:	2300      	movs	r3, #0
 800c694:	4655      	mov	r5, sl
 800c696:	469b      	mov	fp, r3
 800c698:	45b1      	cmp	r9, r6
 800c69a:	d337      	bcc.n	800c70c <__gethex+0x1d0>
 800c69c:	f845 bb04 	str.w	fp, [r5], #4
 800c6a0:	eba5 050a 	sub.w	r5, r5, sl
 800c6a4:	10ad      	asrs	r5, r5, #2
 800c6a6:	6125      	str	r5, [r4, #16]
 800c6a8:	4658      	mov	r0, fp
 800c6aa:	f000 fbd3 	bl	800ce54 <__hi0bits>
 800c6ae:	016d      	lsls	r5, r5, #5
 800c6b0:	f8d8 6000 	ldr.w	r6, [r8]
 800c6b4:	1a2d      	subs	r5, r5, r0
 800c6b6:	42b5      	cmp	r5, r6
 800c6b8:	dd54      	ble.n	800c764 <__gethex+0x228>
 800c6ba:	1bad      	subs	r5, r5, r6
 800c6bc:	4629      	mov	r1, r5
 800c6be:	4620      	mov	r0, r4
 800c6c0:	f000 ff67 	bl	800d592 <__any_on>
 800c6c4:	4681      	mov	r9, r0
 800c6c6:	b178      	cbz	r0, 800c6e8 <__gethex+0x1ac>
 800c6c8:	1e6b      	subs	r3, r5, #1
 800c6ca:	1159      	asrs	r1, r3, #5
 800c6cc:	f003 021f 	and.w	r2, r3, #31
 800c6d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6d4:	f04f 0901 	mov.w	r9, #1
 800c6d8:	fa09 f202 	lsl.w	r2, r9, r2
 800c6dc:	420a      	tst	r2, r1
 800c6de:	d003      	beq.n	800c6e8 <__gethex+0x1ac>
 800c6e0:	454b      	cmp	r3, r9
 800c6e2:	dc36      	bgt.n	800c752 <__gethex+0x216>
 800c6e4:	f04f 0902 	mov.w	r9, #2
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f7ff febe 	bl	800c46c <rshift>
 800c6f0:	442f      	add	r7, r5
 800c6f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c6f6:	42bb      	cmp	r3, r7
 800c6f8:	da42      	bge.n	800c780 <__gethex+0x244>
 800c6fa:	9801      	ldr	r0, [sp, #4]
 800c6fc:	4621      	mov	r1, r4
 800c6fe:	f000 faf7 	bl	800ccf0 <_Bfree>
 800c702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c704:	2300      	movs	r3, #0
 800c706:	6013      	str	r3, [r2, #0]
 800c708:	25a3      	movs	r5, #163	@ 0xa3
 800c70a:	e793      	b.n	800c634 <__gethex+0xf8>
 800c70c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c710:	2a2e      	cmp	r2, #46	@ 0x2e
 800c712:	d012      	beq.n	800c73a <__gethex+0x1fe>
 800c714:	2b20      	cmp	r3, #32
 800c716:	d104      	bne.n	800c722 <__gethex+0x1e6>
 800c718:	f845 bb04 	str.w	fp, [r5], #4
 800c71c:	f04f 0b00 	mov.w	fp, #0
 800c720:	465b      	mov	r3, fp
 800c722:	7830      	ldrb	r0, [r6, #0]
 800c724:	9303      	str	r3, [sp, #12]
 800c726:	f7ff fef3 	bl	800c510 <__hexdig_fun>
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	f000 000f 	and.w	r0, r0, #15
 800c730:	4098      	lsls	r0, r3
 800c732:	ea4b 0b00 	orr.w	fp, fp, r0
 800c736:	3304      	adds	r3, #4
 800c738:	e7ae      	b.n	800c698 <__gethex+0x15c>
 800c73a:	45b1      	cmp	r9, r6
 800c73c:	d8ea      	bhi.n	800c714 <__gethex+0x1d8>
 800c73e:	492b      	ldr	r1, [pc, #172]	@ (800c7ec <__gethex+0x2b0>)
 800c740:	9303      	str	r3, [sp, #12]
 800c742:	2201      	movs	r2, #1
 800c744:	4630      	mov	r0, r6
 800c746:	f7fe ff50 	bl	800b5ea <strncmp>
 800c74a:	9b03      	ldr	r3, [sp, #12]
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1e1      	bne.n	800c714 <__gethex+0x1d8>
 800c750:	e7a2      	b.n	800c698 <__gethex+0x15c>
 800c752:	1ea9      	subs	r1, r5, #2
 800c754:	4620      	mov	r0, r4
 800c756:	f000 ff1c 	bl	800d592 <__any_on>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d0c2      	beq.n	800c6e4 <__gethex+0x1a8>
 800c75e:	f04f 0903 	mov.w	r9, #3
 800c762:	e7c1      	b.n	800c6e8 <__gethex+0x1ac>
 800c764:	da09      	bge.n	800c77a <__gethex+0x23e>
 800c766:	1b75      	subs	r5, r6, r5
 800c768:	4621      	mov	r1, r4
 800c76a:	9801      	ldr	r0, [sp, #4]
 800c76c:	462a      	mov	r2, r5
 800c76e:	f000 fcd7 	bl	800d120 <__lshift>
 800c772:	1b7f      	subs	r7, r7, r5
 800c774:	4604      	mov	r4, r0
 800c776:	f100 0a14 	add.w	sl, r0, #20
 800c77a:	f04f 0900 	mov.w	r9, #0
 800c77e:	e7b8      	b.n	800c6f2 <__gethex+0x1b6>
 800c780:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c784:	42bd      	cmp	r5, r7
 800c786:	dd6f      	ble.n	800c868 <__gethex+0x32c>
 800c788:	1bed      	subs	r5, r5, r7
 800c78a:	42ae      	cmp	r6, r5
 800c78c:	dc34      	bgt.n	800c7f8 <__gethex+0x2bc>
 800c78e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c792:	2b02      	cmp	r3, #2
 800c794:	d022      	beq.n	800c7dc <__gethex+0x2a0>
 800c796:	2b03      	cmp	r3, #3
 800c798:	d024      	beq.n	800c7e4 <__gethex+0x2a8>
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d115      	bne.n	800c7ca <__gethex+0x28e>
 800c79e:	42ae      	cmp	r6, r5
 800c7a0:	d113      	bne.n	800c7ca <__gethex+0x28e>
 800c7a2:	2e01      	cmp	r6, #1
 800c7a4:	d10b      	bne.n	800c7be <__gethex+0x282>
 800c7a6:	9a02      	ldr	r2, [sp, #8]
 800c7a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7ac:	6013      	str	r3, [r2, #0]
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	6123      	str	r3, [r4, #16]
 800c7b2:	f8ca 3000 	str.w	r3, [sl]
 800c7b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c7b8:	2562      	movs	r5, #98	@ 0x62
 800c7ba:	601c      	str	r4, [r3, #0]
 800c7bc:	e73a      	b.n	800c634 <__gethex+0xf8>
 800c7be:	1e71      	subs	r1, r6, #1
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f000 fee6 	bl	800d592 <__any_on>
 800c7c6:	2800      	cmp	r0, #0
 800c7c8:	d1ed      	bne.n	800c7a6 <__gethex+0x26a>
 800c7ca:	9801      	ldr	r0, [sp, #4]
 800c7cc:	4621      	mov	r1, r4
 800c7ce:	f000 fa8f 	bl	800ccf0 <_Bfree>
 800c7d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	6013      	str	r3, [r2, #0]
 800c7d8:	2550      	movs	r5, #80	@ 0x50
 800c7da:	e72b      	b.n	800c634 <__gethex+0xf8>
 800c7dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d1f3      	bne.n	800c7ca <__gethex+0x28e>
 800c7e2:	e7e0      	b.n	800c7a6 <__gethex+0x26a>
 800c7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1dd      	bne.n	800c7a6 <__gethex+0x26a>
 800c7ea:	e7ee      	b.n	800c7ca <__gethex+0x28e>
 800c7ec:	0800f5cc 	.word	0x0800f5cc
 800c7f0:	0800f6dd 	.word	0x0800f6dd
 800c7f4:	0800f6ee 	.word	0x0800f6ee
 800c7f8:	1e6f      	subs	r7, r5, #1
 800c7fa:	f1b9 0f00 	cmp.w	r9, #0
 800c7fe:	d130      	bne.n	800c862 <__gethex+0x326>
 800c800:	b127      	cbz	r7, 800c80c <__gethex+0x2d0>
 800c802:	4639      	mov	r1, r7
 800c804:	4620      	mov	r0, r4
 800c806:	f000 fec4 	bl	800d592 <__any_on>
 800c80a:	4681      	mov	r9, r0
 800c80c:	117a      	asrs	r2, r7, #5
 800c80e:	2301      	movs	r3, #1
 800c810:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c814:	f007 071f 	and.w	r7, r7, #31
 800c818:	40bb      	lsls	r3, r7
 800c81a:	4213      	tst	r3, r2
 800c81c:	4629      	mov	r1, r5
 800c81e:	4620      	mov	r0, r4
 800c820:	bf18      	it	ne
 800c822:	f049 0902 	orrne.w	r9, r9, #2
 800c826:	f7ff fe21 	bl	800c46c <rshift>
 800c82a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c82e:	1b76      	subs	r6, r6, r5
 800c830:	2502      	movs	r5, #2
 800c832:	f1b9 0f00 	cmp.w	r9, #0
 800c836:	d047      	beq.n	800c8c8 <__gethex+0x38c>
 800c838:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d015      	beq.n	800c86c <__gethex+0x330>
 800c840:	2b03      	cmp	r3, #3
 800c842:	d017      	beq.n	800c874 <__gethex+0x338>
 800c844:	2b01      	cmp	r3, #1
 800c846:	d109      	bne.n	800c85c <__gethex+0x320>
 800c848:	f019 0f02 	tst.w	r9, #2
 800c84c:	d006      	beq.n	800c85c <__gethex+0x320>
 800c84e:	f8da 3000 	ldr.w	r3, [sl]
 800c852:	ea49 0903 	orr.w	r9, r9, r3
 800c856:	f019 0f01 	tst.w	r9, #1
 800c85a:	d10e      	bne.n	800c87a <__gethex+0x33e>
 800c85c:	f045 0510 	orr.w	r5, r5, #16
 800c860:	e032      	b.n	800c8c8 <__gethex+0x38c>
 800c862:	f04f 0901 	mov.w	r9, #1
 800c866:	e7d1      	b.n	800c80c <__gethex+0x2d0>
 800c868:	2501      	movs	r5, #1
 800c86a:	e7e2      	b.n	800c832 <__gethex+0x2f6>
 800c86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c86e:	f1c3 0301 	rsb	r3, r3, #1
 800c872:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c876:	2b00      	cmp	r3, #0
 800c878:	d0f0      	beq.n	800c85c <__gethex+0x320>
 800c87a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c87e:	f104 0314 	add.w	r3, r4, #20
 800c882:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c886:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c88a:	f04f 0c00 	mov.w	ip, #0
 800c88e:	4618      	mov	r0, r3
 800c890:	f853 2b04 	ldr.w	r2, [r3], #4
 800c894:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c898:	d01b      	beq.n	800c8d2 <__gethex+0x396>
 800c89a:	3201      	adds	r2, #1
 800c89c:	6002      	str	r2, [r0, #0]
 800c89e:	2d02      	cmp	r5, #2
 800c8a0:	f104 0314 	add.w	r3, r4, #20
 800c8a4:	d13c      	bne.n	800c920 <__gethex+0x3e4>
 800c8a6:	f8d8 2000 	ldr.w	r2, [r8]
 800c8aa:	3a01      	subs	r2, #1
 800c8ac:	42b2      	cmp	r2, r6
 800c8ae:	d109      	bne.n	800c8c4 <__gethex+0x388>
 800c8b0:	1171      	asrs	r1, r6, #5
 800c8b2:	2201      	movs	r2, #1
 800c8b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c8b8:	f006 061f 	and.w	r6, r6, #31
 800c8bc:	fa02 f606 	lsl.w	r6, r2, r6
 800c8c0:	421e      	tst	r6, r3
 800c8c2:	d13a      	bne.n	800c93a <__gethex+0x3fe>
 800c8c4:	f045 0520 	orr.w	r5, r5, #32
 800c8c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8ca:	601c      	str	r4, [r3, #0]
 800c8cc:	9b02      	ldr	r3, [sp, #8]
 800c8ce:	601f      	str	r7, [r3, #0]
 800c8d0:	e6b0      	b.n	800c634 <__gethex+0xf8>
 800c8d2:	4299      	cmp	r1, r3
 800c8d4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c8d8:	d8d9      	bhi.n	800c88e <__gethex+0x352>
 800c8da:	68a3      	ldr	r3, [r4, #8]
 800c8dc:	459b      	cmp	fp, r3
 800c8de:	db17      	blt.n	800c910 <__gethex+0x3d4>
 800c8e0:	6861      	ldr	r1, [r4, #4]
 800c8e2:	9801      	ldr	r0, [sp, #4]
 800c8e4:	3101      	adds	r1, #1
 800c8e6:	f000 f9c3 	bl	800cc70 <_Balloc>
 800c8ea:	4681      	mov	r9, r0
 800c8ec:	b918      	cbnz	r0, 800c8f6 <__gethex+0x3ba>
 800c8ee:	4b1a      	ldr	r3, [pc, #104]	@ (800c958 <__gethex+0x41c>)
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	2184      	movs	r1, #132	@ 0x84
 800c8f4:	e6c5      	b.n	800c682 <__gethex+0x146>
 800c8f6:	6922      	ldr	r2, [r4, #16]
 800c8f8:	3202      	adds	r2, #2
 800c8fa:	f104 010c 	add.w	r1, r4, #12
 800c8fe:	0092      	lsls	r2, r2, #2
 800c900:	300c      	adds	r0, #12
 800c902:	f7fe fefc 	bl	800b6fe <memcpy>
 800c906:	4621      	mov	r1, r4
 800c908:	9801      	ldr	r0, [sp, #4]
 800c90a:	f000 f9f1 	bl	800ccf0 <_Bfree>
 800c90e:	464c      	mov	r4, r9
 800c910:	6923      	ldr	r3, [r4, #16]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c918:	6122      	str	r2, [r4, #16]
 800c91a:	2201      	movs	r2, #1
 800c91c:	615a      	str	r2, [r3, #20]
 800c91e:	e7be      	b.n	800c89e <__gethex+0x362>
 800c920:	6922      	ldr	r2, [r4, #16]
 800c922:	455a      	cmp	r2, fp
 800c924:	dd0b      	ble.n	800c93e <__gethex+0x402>
 800c926:	2101      	movs	r1, #1
 800c928:	4620      	mov	r0, r4
 800c92a:	f7ff fd9f 	bl	800c46c <rshift>
 800c92e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c932:	3701      	adds	r7, #1
 800c934:	42bb      	cmp	r3, r7
 800c936:	f6ff aee0 	blt.w	800c6fa <__gethex+0x1be>
 800c93a:	2501      	movs	r5, #1
 800c93c:	e7c2      	b.n	800c8c4 <__gethex+0x388>
 800c93e:	f016 061f 	ands.w	r6, r6, #31
 800c942:	d0fa      	beq.n	800c93a <__gethex+0x3fe>
 800c944:	4453      	add	r3, sl
 800c946:	f1c6 0620 	rsb	r6, r6, #32
 800c94a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c94e:	f000 fa81 	bl	800ce54 <__hi0bits>
 800c952:	42b0      	cmp	r0, r6
 800c954:	dbe7      	blt.n	800c926 <__gethex+0x3ea>
 800c956:	e7f0      	b.n	800c93a <__gethex+0x3fe>
 800c958:	0800f6dd 	.word	0x0800f6dd

0800c95c <L_shift>:
 800c95c:	f1c2 0208 	rsb	r2, r2, #8
 800c960:	0092      	lsls	r2, r2, #2
 800c962:	b570      	push	{r4, r5, r6, lr}
 800c964:	f1c2 0620 	rsb	r6, r2, #32
 800c968:	6843      	ldr	r3, [r0, #4]
 800c96a:	6804      	ldr	r4, [r0, #0]
 800c96c:	fa03 f506 	lsl.w	r5, r3, r6
 800c970:	432c      	orrs	r4, r5
 800c972:	40d3      	lsrs	r3, r2
 800c974:	6004      	str	r4, [r0, #0]
 800c976:	f840 3f04 	str.w	r3, [r0, #4]!
 800c97a:	4288      	cmp	r0, r1
 800c97c:	d3f4      	bcc.n	800c968 <L_shift+0xc>
 800c97e:	bd70      	pop	{r4, r5, r6, pc}

0800c980 <__match>:
 800c980:	b530      	push	{r4, r5, lr}
 800c982:	6803      	ldr	r3, [r0, #0]
 800c984:	3301      	adds	r3, #1
 800c986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c98a:	b914      	cbnz	r4, 800c992 <__match+0x12>
 800c98c:	6003      	str	r3, [r0, #0]
 800c98e:	2001      	movs	r0, #1
 800c990:	bd30      	pop	{r4, r5, pc}
 800c992:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c996:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c99a:	2d19      	cmp	r5, #25
 800c99c:	bf98      	it	ls
 800c99e:	3220      	addls	r2, #32
 800c9a0:	42a2      	cmp	r2, r4
 800c9a2:	d0f0      	beq.n	800c986 <__match+0x6>
 800c9a4:	2000      	movs	r0, #0
 800c9a6:	e7f3      	b.n	800c990 <__match+0x10>

0800c9a8 <__hexnan>:
 800c9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ac:	680b      	ldr	r3, [r1, #0]
 800c9ae:	6801      	ldr	r1, [r0, #0]
 800c9b0:	115e      	asrs	r6, r3, #5
 800c9b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9b6:	f013 031f 	ands.w	r3, r3, #31
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	bf18      	it	ne
 800c9be:	3604      	addne	r6, #4
 800c9c0:	2500      	movs	r5, #0
 800c9c2:	1f37      	subs	r7, r6, #4
 800c9c4:	4682      	mov	sl, r0
 800c9c6:	4690      	mov	r8, r2
 800c9c8:	9301      	str	r3, [sp, #4]
 800c9ca:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9ce:	46b9      	mov	r9, r7
 800c9d0:	463c      	mov	r4, r7
 800c9d2:	9502      	str	r5, [sp, #8]
 800c9d4:	46ab      	mov	fp, r5
 800c9d6:	784a      	ldrb	r2, [r1, #1]
 800c9d8:	1c4b      	adds	r3, r1, #1
 800c9da:	9303      	str	r3, [sp, #12]
 800c9dc:	b342      	cbz	r2, 800ca30 <__hexnan+0x88>
 800c9de:	4610      	mov	r0, r2
 800c9e0:	9105      	str	r1, [sp, #20]
 800c9e2:	9204      	str	r2, [sp, #16]
 800c9e4:	f7ff fd94 	bl	800c510 <__hexdig_fun>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d151      	bne.n	800ca90 <__hexnan+0xe8>
 800c9ec:	9a04      	ldr	r2, [sp, #16]
 800c9ee:	9905      	ldr	r1, [sp, #20]
 800c9f0:	2a20      	cmp	r2, #32
 800c9f2:	d818      	bhi.n	800ca26 <__hexnan+0x7e>
 800c9f4:	9b02      	ldr	r3, [sp, #8]
 800c9f6:	459b      	cmp	fp, r3
 800c9f8:	dd13      	ble.n	800ca22 <__hexnan+0x7a>
 800c9fa:	454c      	cmp	r4, r9
 800c9fc:	d206      	bcs.n	800ca0c <__hexnan+0x64>
 800c9fe:	2d07      	cmp	r5, #7
 800ca00:	dc04      	bgt.n	800ca0c <__hexnan+0x64>
 800ca02:	462a      	mov	r2, r5
 800ca04:	4649      	mov	r1, r9
 800ca06:	4620      	mov	r0, r4
 800ca08:	f7ff ffa8 	bl	800c95c <L_shift>
 800ca0c:	4544      	cmp	r4, r8
 800ca0e:	d952      	bls.n	800cab6 <__hexnan+0x10e>
 800ca10:	2300      	movs	r3, #0
 800ca12:	f1a4 0904 	sub.w	r9, r4, #4
 800ca16:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca1a:	f8cd b008 	str.w	fp, [sp, #8]
 800ca1e:	464c      	mov	r4, r9
 800ca20:	461d      	mov	r5, r3
 800ca22:	9903      	ldr	r1, [sp, #12]
 800ca24:	e7d7      	b.n	800c9d6 <__hexnan+0x2e>
 800ca26:	2a29      	cmp	r2, #41	@ 0x29
 800ca28:	d157      	bne.n	800cada <__hexnan+0x132>
 800ca2a:	3102      	adds	r1, #2
 800ca2c:	f8ca 1000 	str.w	r1, [sl]
 800ca30:	f1bb 0f00 	cmp.w	fp, #0
 800ca34:	d051      	beq.n	800cada <__hexnan+0x132>
 800ca36:	454c      	cmp	r4, r9
 800ca38:	d206      	bcs.n	800ca48 <__hexnan+0xa0>
 800ca3a:	2d07      	cmp	r5, #7
 800ca3c:	dc04      	bgt.n	800ca48 <__hexnan+0xa0>
 800ca3e:	462a      	mov	r2, r5
 800ca40:	4649      	mov	r1, r9
 800ca42:	4620      	mov	r0, r4
 800ca44:	f7ff ff8a 	bl	800c95c <L_shift>
 800ca48:	4544      	cmp	r4, r8
 800ca4a:	d936      	bls.n	800caba <__hexnan+0x112>
 800ca4c:	f1a8 0204 	sub.w	r2, r8, #4
 800ca50:	4623      	mov	r3, r4
 800ca52:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca56:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca5a:	429f      	cmp	r7, r3
 800ca5c:	d2f9      	bcs.n	800ca52 <__hexnan+0xaa>
 800ca5e:	1b3b      	subs	r3, r7, r4
 800ca60:	f023 0303 	bic.w	r3, r3, #3
 800ca64:	3304      	adds	r3, #4
 800ca66:	3401      	adds	r4, #1
 800ca68:	3e03      	subs	r6, #3
 800ca6a:	42b4      	cmp	r4, r6
 800ca6c:	bf88      	it	hi
 800ca6e:	2304      	movhi	r3, #4
 800ca70:	4443      	add	r3, r8
 800ca72:	2200      	movs	r2, #0
 800ca74:	f843 2b04 	str.w	r2, [r3], #4
 800ca78:	429f      	cmp	r7, r3
 800ca7a:	d2fb      	bcs.n	800ca74 <__hexnan+0xcc>
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	b91b      	cbnz	r3, 800ca88 <__hexnan+0xe0>
 800ca80:	4547      	cmp	r7, r8
 800ca82:	d128      	bne.n	800cad6 <__hexnan+0x12e>
 800ca84:	2301      	movs	r3, #1
 800ca86:	603b      	str	r3, [r7, #0]
 800ca88:	2005      	movs	r0, #5
 800ca8a:	b007      	add	sp, #28
 800ca8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca90:	3501      	adds	r5, #1
 800ca92:	2d08      	cmp	r5, #8
 800ca94:	f10b 0b01 	add.w	fp, fp, #1
 800ca98:	dd06      	ble.n	800caa8 <__hexnan+0x100>
 800ca9a:	4544      	cmp	r4, r8
 800ca9c:	d9c1      	bls.n	800ca22 <__hexnan+0x7a>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f844 3c04 	str.w	r3, [r4, #-4]
 800caa4:	2501      	movs	r5, #1
 800caa6:	3c04      	subs	r4, #4
 800caa8:	6822      	ldr	r2, [r4, #0]
 800caaa:	f000 000f 	and.w	r0, r0, #15
 800caae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cab2:	6020      	str	r0, [r4, #0]
 800cab4:	e7b5      	b.n	800ca22 <__hexnan+0x7a>
 800cab6:	2508      	movs	r5, #8
 800cab8:	e7b3      	b.n	800ca22 <__hexnan+0x7a>
 800caba:	9b01      	ldr	r3, [sp, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d0dd      	beq.n	800ca7c <__hexnan+0xd4>
 800cac0:	f1c3 0320 	rsb	r3, r3, #32
 800cac4:	f04f 32ff 	mov.w	r2, #4294967295
 800cac8:	40da      	lsrs	r2, r3
 800caca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cace:	4013      	ands	r3, r2
 800cad0:	f846 3c04 	str.w	r3, [r6, #-4]
 800cad4:	e7d2      	b.n	800ca7c <__hexnan+0xd4>
 800cad6:	3f04      	subs	r7, #4
 800cad8:	e7d0      	b.n	800ca7c <__hexnan+0xd4>
 800cada:	2004      	movs	r0, #4
 800cadc:	e7d5      	b.n	800ca8a <__hexnan+0xe2>
	...

0800cae0 <malloc>:
 800cae0:	4b02      	ldr	r3, [pc, #8]	@ (800caec <malloc+0xc>)
 800cae2:	4601      	mov	r1, r0
 800cae4:	6818      	ldr	r0, [r3, #0]
 800cae6:	f000 b825 	b.w	800cb34 <_malloc_r>
 800caea:	bf00      	nop
 800caec:	200001b0 	.word	0x200001b0

0800caf0 <sbrk_aligned>:
 800caf0:	b570      	push	{r4, r5, r6, lr}
 800caf2:	4e0f      	ldr	r6, [pc, #60]	@ (800cb30 <sbrk_aligned+0x40>)
 800caf4:	460c      	mov	r4, r1
 800caf6:	6831      	ldr	r1, [r6, #0]
 800caf8:	4605      	mov	r5, r0
 800cafa:	b911      	cbnz	r1, 800cb02 <sbrk_aligned+0x12>
 800cafc:	f001 fa1a 	bl	800df34 <_sbrk_r>
 800cb00:	6030      	str	r0, [r6, #0]
 800cb02:	4621      	mov	r1, r4
 800cb04:	4628      	mov	r0, r5
 800cb06:	f001 fa15 	bl	800df34 <_sbrk_r>
 800cb0a:	1c43      	adds	r3, r0, #1
 800cb0c:	d103      	bne.n	800cb16 <sbrk_aligned+0x26>
 800cb0e:	f04f 34ff 	mov.w	r4, #4294967295
 800cb12:	4620      	mov	r0, r4
 800cb14:	bd70      	pop	{r4, r5, r6, pc}
 800cb16:	1cc4      	adds	r4, r0, #3
 800cb18:	f024 0403 	bic.w	r4, r4, #3
 800cb1c:	42a0      	cmp	r0, r4
 800cb1e:	d0f8      	beq.n	800cb12 <sbrk_aligned+0x22>
 800cb20:	1a21      	subs	r1, r4, r0
 800cb22:	4628      	mov	r0, r5
 800cb24:	f001 fa06 	bl	800df34 <_sbrk_r>
 800cb28:	3001      	adds	r0, #1
 800cb2a:	d1f2      	bne.n	800cb12 <sbrk_aligned+0x22>
 800cb2c:	e7ef      	b.n	800cb0e <sbrk_aligned+0x1e>
 800cb2e:	bf00      	nop
 800cb30:	2000081c 	.word	0x2000081c

0800cb34 <_malloc_r>:
 800cb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb38:	1ccd      	adds	r5, r1, #3
 800cb3a:	f025 0503 	bic.w	r5, r5, #3
 800cb3e:	3508      	adds	r5, #8
 800cb40:	2d0c      	cmp	r5, #12
 800cb42:	bf38      	it	cc
 800cb44:	250c      	movcc	r5, #12
 800cb46:	2d00      	cmp	r5, #0
 800cb48:	4606      	mov	r6, r0
 800cb4a:	db01      	blt.n	800cb50 <_malloc_r+0x1c>
 800cb4c:	42a9      	cmp	r1, r5
 800cb4e:	d904      	bls.n	800cb5a <_malloc_r+0x26>
 800cb50:	230c      	movs	r3, #12
 800cb52:	6033      	str	r3, [r6, #0]
 800cb54:	2000      	movs	r0, #0
 800cb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cc30 <_malloc_r+0xfc>
 800cb5e:	f000 f87b 	bl	800cc58 <__malloc_lock>
 800cb62:	f8d8 3000 	ldr.w	r3, [r8]
 800cb66:	461c      	mov	r4, r3
 800cb68:	bb44      	cbnz	r4, 800cbbc <_malloc_r+0x88>
 800cb6a:	4629      	mov	r1, r5
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7ff ffbf 	bl	800caf0 <sbrk_aligned>
 800cb72:	1c43      	adds	r3, r0, #1
 800cb74:	4604      	mov	r4, r0
 800cb76:	d158      	bne.n	800cc2a <_malloc_r+0xf6>
 800cb78:	f8d8 4000 	ldr.w	r4, [r8]
 800cb7c:	4627      	mov	r7, r4
 800cb7e:	2f00      	cmp	r7, #0
 800cb80:	d143      	bne.n	800cc0a <_malloc_r+0xd6>
 800cb82:	2c00      	cmp	r4, #0
 800cb84:	d04b      	beq.n	800cc1e <_malloc_r+0xea>
 800cb86:	6823      	ldr	r3, [r4, #0]
 800cb88:	4639      	mov	r1, r7
 800cb8a:	4630      	mov	r0, r6
 800cb8c:	eb04 0903 	add.w	r9, r4, r3
 800cb90:	f001 f9d0 	bl	800df34 <_sbrk_r>
 800cb94:	4581      	cmp	r9, r0
 800cb96:	d142      	bne.n	800cc1e <_malloc_r+0xea>
 800cb98:	6821      	ldr	r1, [r4, #0]
 800cb9a:	1a6d      	subs	r5, r5, r1
 800cb9c:	4629      	mov	r1, r5
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f7ff ffa6 	bl	800caf0 <sbrk_aligned>
 800cba4:	3001      	adds	r0, #1
 800cba6:	d03a      	beq.n	800cc1e <_malloc_r+0xea>
 800cba8:	6823      	ldr	r3, [r4, #0]
 800cbaa:	442b      	add	r3, r5
 800cbac:	6023      	str	r3, [r4, #0]
 800cbae:	f8d8 3000 	ldr.w	r3, [r8]
 800cbb2:	685a      	ldr	r2, [r3, #4]
 800cbb4:	bb62      	cbnz	r2, 800cc10 <_malloc_r+0xdc>
 800cbb6:	f8c8 7000 	str.w	r7, [r8]
 800cbba:	e00f      	b.n	800cbdc <_malloc_r+0xa8>
 800cbbc:	6822      	ldr	r2, [r4, #0]
 800cbbe:	1b52      	subs	r2, r2, r5
 800cbc0:	d420      	bmi.n	800cc04 <_malloc_r+0xd0>
 800cbc2:	2a0b      	cmp	r2, #11
 800cbc4:	d917      	bls.n	800cbf6 <_malloc_r+0xc2>
 800cbc6:	1961      	adds	r1, r4, r5
 800cbc8:	42a3      	cmp	r3, r4
 800cbca:	6025      	str	r5, [r4, #0]
 800cbcc:	bf18      	it	ne
 800cbce:	6059      	strne	r1, [r3, #4]
 800cbd0:	6863      	ldr	r3, [r4, #4]
 800cbd2:	bf08      	it	eq
 800cbd4:	f8c8 1000 	streq.w	r1, [r8]
 800cbd8:	5162      	str	r2, [r4, r5]
 800cbda:	604b      	str	r3, [r1, #4]
 800cbdc:	4630      	mov	r0, r6
 800cbde:	f000 f841 	bl	800cc64 <__malloc_unlock>
 800cbe2:	f104 000b 	add.w	r0, r4, #11
 800cbe6:	1d23      	adds	r3, r4, #4
 800cbe8:	f020 0007 	bic.w	r0, r0, #7
 800cbec:	1ac2      	subs	r2, r0, r3
 800cbee:	bf1c      	itt	ne
 800cbf0:	1a1b      	subne	r3, r3, r0
 800cbf2:	50a3      	strne	r3, [r4, r2]
 800cbf4:	e7af      	b.n	800cb56 <_malloc_r+0x22>
 800cbf6:	6862      	ldr	r2, [r4, #4]
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	bf0c      	ite	eq
 800cbfc:	f8c8 2000 	streq.w	r2, [r8]
 800cc00:	605a      	strne	r2, [r3, #4]
 800cc02:	e7eb      	b.n	800cbdc <_malloc_r+0xa8>
 800cc04:	4623      	mov	r3, r4
 800cc06:	6864      	ldr	r4, [r4, #4]
 800cc08:	e7ae      	b.n	800cb68 <_malloc_r+0x34>
 800cc0a:	463c      	mov	r4, r7
 800cc0c:	687f      	ldr	r7, [r7, #4]
 800cc0e:	e7b6      	b.n	800cb7e <_malloc_r+0x4a>
 800cc10:	461a      	mov	r2, r3
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	42a3      	cmp	r3, r4
 800cc16:	d1fb      	bne.n	800cc10 <_malloc_r+0xdc>
 800cc18:	2300      	movs	r3, #0
 800cc1a:	6053      	str	r3, [r2, #4]
 800cc1c:	e7de      	b.n	800cbdc <_malloc_r+0xa8>
 800cc1e:	230c      	movs	r3, #12
 800cc20:	6033      	str	r3, [r6, #0]
 800cc22:	4630      	mov	r0, r6
 800cc24:	f000 f81e 	bl	800cc64 <__malloc_unlock>
 800cc28:	e794      	b.n	800cb54 <_malloc_r+0x20>
 800cc2a:	6005      	str	r5, [r0, #0]
 800cc2c:	e7d6      	b.n	800cbdc <_malloc_r+0xa8>
 800cc2e:	bf00      	nop
 800cc30:	20000820 	.word	0x20000820

0800cc34 <__ascii_mbtowc>:
 800cc34:	b082      	sub	sp, #8
 800cc36:	b901      	cbnz	r1, 800cc3a <__ascii_mbtowc+0x6>
 800cc38:	a901      	add	r1, sp, #4
 800cc3a:	b142      	cbz	r2, 800cc4e <__ascii_mbtowc+0x1a>
 800cc3c:	b14b      	cbz	r3, 800cc52 <__ascii_mbtowc+0x1e>
 800cc3e:	7813      	ldrb	r3, [r2, #0]
 800cc40:	600b      	str	r3, [r1, #0]
 800cc42:	7812      	ldrb	r2, [r2, #0]
 800cc44:	1e10      	subs	r0, r2, #0
 800cc46:	bf18      	it	ne
 800cc48:	2001      	movne	r0, #1
 800cc4a:	b002      	add	sp, #8
 800cc4c:	4770      	bx	lr
 800cc4e:	4610      	mov	r0, r2
 800cc50:	e7fb      	b.n	800cc4a <__ascii_mbtowc+0x16>
 800cc52:	f06f 0001 	mvn.w	r0, #1
 800cc56:	e7f8      	b.n	800cc4a <__ascii_mbtowc+0x16>

0800cc58 <__malloc_lock>:
 800cc58:	4801      	ldr	r0, [pc, #4]	@ (800cc60 <__malloc_lock+0x8>)
 800cc5a:	f7fe bd4e 	b.w	800b6fa <__retarget_lock_acquire_recursive>
 800cc5e:	bf00      	nop
 800cc60:	20000818 	.word	0x20000818

0800cc64 <__malloc_unlock>:
 800cc64:	4801      	ldr	r0, [pc, #4]	@ (800cc6c <__malloc_unlock+0x8>)
 800cc66:	f7fe bd49 	b.w	800b6fc <__retarget_lock_release_recursive>
 800cc6a:	bf00      	nop
 800cc6c:	20000818 	.word	0x20000818

0800cc70 <_Balloc>:
 800cc70:	b570      	push	{r4, r5, r6, lr}
 800cc72:	69c6      	ldr	r6, [r0, #28]
 800cc74:	4604      	mov	r4, r0
 800cc76:	460d      	mov	r5, r1
 800cc78:	b976      	cbnz	r6, 800cc98 <_Balloc+0x28>
 800cc7a:	2010      	movs	r0, #16
 800cc7c:	f7ff ff30 	bl	800cae0 <malloc>
 800cc80:	4602      	mov	r2, r0
 800cc82:	61e0      	str	r0, [r4, #28]
 800cc84:	b920      	cbnz	r0, 800cc90 <_Balloc+0x20>
 800cc86:	4b18      	ldr	r3, [pc, #96]	@ (800cce8 <_Balloc+0x78>)
 800cc88:	4818      	ldr	r0, [pc, #96]	@ (800ccec <_Balloc+0x7c>)
 800cc8a:	216b      	movs	r1, #107	@ 0x6b
 800cc8c:	f001 f962 	bl	800df54 <__assert_func>
 800cc90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc94:	6006      	str	r6, [r0, #0]
 800cc96:	60c6      	str	r6, [r0, #12]
 800cc98:	69e6      	ldr	r6, [r4, #28]
 800cc9a:	68f3      	ldr	r3, [r6, #12]
 800cc9c:	b183      	cbz	r3, 800ccc0 <_Balloc+0x50>
 800cc9e:	69e3      	ldr	r3, [r4, #28]
 800cca0:	68db      	ldr	r3, [r3, #12]
 800cca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cca6:	b9b8      	cbnz	r0, 800ccd8 <_Balloc+0x68>
 800cca8:	2101      	movs	r1, #1
 800ccaa:	fa01 f605 	lsl.w	r6, r1, r5
 800ccae:	1d72      	adds	r2, r6, #5
 800ccb0:	0092      	lsls	r2, r2, #2
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f001 f96c 	bl	800df90 <_calloc_r>
 800ccb8:	b160      	cbz	r0, 800ccd4 <_Balloc+0x64>
 800ccba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccbe:	e00e      	b.n	800ccde <_Balloc+0x6e>
 800ccc0:	2221      	movs	r2, #33	@ 0x21
 800ccc2:	2104      	movs	r1, #4
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	f001 f963 	bl	800df90 <_calloc_r>
 800ccca:	69e3      	ldr	r3, [r4, #28]
 800cccc:	60f0      	str	r0, [r6, #12]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d1e4      	bne.n	800cc9e <_Balloc+0x2e>
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	bd70      	pop	{r4, r5, r6, pc}
 800ccd8:	6802      	ldr	r2, [r0, #0]
 800ccda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ccde:	2300      	movs	r3, #0
 800cce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cce4:	e7f7      	b.n	800ccd6 <_Balloc+0x66>
 800cce6:	bf00      	nop
 800cce8:	0800f66e 	.word	0x0800f66e
 800ccec:	0800f74e 	.word	0x0800f74e

0800ccf0 <_Bfree>:
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	69c6      	ldr	r6, [r0, #28]
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	460c      	mov	r4, r1
 800ccf8:	b976      	cbnz	r6, 800cd18 <_Bfree+0x28>
 800ccfa:	2010      	movs	r0, #16
 800ccfc:	f7ff fef0 	bl	800cae0 <malloc>
 800cd00:	4602      	mov	r2, r0
 800cd02:	61e8      	str	r0, [r5, #28]
 800cd04:	b920      	cbnz	r0, 800cd10 <_Bfree+0x20>
 800cd06:	4b09      	ldr	r3, [pc, #36]	@ (800cd2c <_Bfree+0x3c>)
 800cd08:	4809      	ldr	r0, [pc, #36]	@ (800cd30 <_Bfree+0x40>)
 800cd0a:	218f      	movs	r1, #143	@ 0x8f
 800cd0c:	f001 f922 	bl	800df54 <__assert_func>
 800cd10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd14:	6006      	str	r6, [r0, #0]
 800cd16:	60c6      	str	r6, [r0, #12]
 800cd18:	b13c      	cbz	r4, 800cd2a <_Bfree+0x3a>
 800cd1a:	69eb      	ldr	r3, [r5, #28]
 800cd1c:	6862      	ldr	r2, [r4, #4]
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd24:	6021      	str	r1, [r4, #0]
 800cd26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd2a:	bd70      	pop	{r4, r5, r6, pc}
 800cd2c:	0800f66e 	.word	0x0800f66e
 800cd30:	0800f74e 	.word	0x0800f74e

0800cd34 <__multadd>:
 800cd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd38:	690d      	ldr	r5, [r1, #16]
 800cd3a:	4607      	mov	r7, r0
 800cd3c:	460c      	mov	r4, r1
 800cd3e:	461e      	mov	r6, r3
 800cd40:	f101 0c14 	add.w	ip, r1, #20
 800cd44:	2000      	movs	r0, #0
 800cd46:	f8dc 3000 	ldr.w	r3, [ip]
 800cd4a:	b299      	uxth	r1, r3
 800cd4c:	fb02 6101 	mla	r1, r2, r1, r6
 800cd50:	0c1e      	lsrs	r6, r3, #16
 800cd52:	0c0b      	lsrs	r3, r1, #16
 800cd54:	fb02 3306 	mla	r3, r2, r6, r3
 800cd58:	b289      	uxth	r1, r1
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd60:	4285      	cmp	r5, r0
 800cd62:	f84c 1b04 	str.w	r1, [ip], #4
 800cd66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd6a:	dcec      	bgt.n	800cd46 <__multadd+0x12>
 800cd6c:	b30e      	cbz	r6, 800cdb2 <__multadd+0x7e>
 800cd6e:	68a3      	ldr	r3, [r4, #8]
 800cd70:	42ab      	cmp	r3, r5
 800cd72:	dc19      	bgt.n	800cda8 <__multadd+0x74>
 800cd74:	6861      	ldr	r1, [r4, #4]
 800cd76:	4638      	mov	r0, r7
 800cd78:	3101      	adds	r1, #1
 800cd7a:	f7ff ff79 	bl	800cc70 <_Balloc>
 800cd7e:	4680      	mov	r8, r0
 800cd80:	b928      	cbnz	r0, 800cd8e <__multadd+0x5a>
 800cd82:	4602      	mov	r2, r0
 800cd84:	4b0c      	ldr	r3, [pc, #48]	@ (800cdb8 <__multadd+0x84>)
 800cd86:	480d      	ldr	r0, [pc, #52]	@ (800cdbc <__multadd+0x88>)
 800cd88:	21ba      	movs	r1, #186	@ 0xba
 800cd8a:	f001 f8e3 	bl	800df54 <__assert_func>
 800cd8e:	6922      	ldr	r2, [r4, #16]
 800cd90:	3202      	adds	r2, #2
 800cd92:	f104 010c 	add.w	r1, r4, #12
 800cd96:	0092      	lsls	r2, r2, #2
 800cd98:	300c      	adds	r0, #12
 800cd9a:	f7fe fcb0 	bl	800b6fe <memcpy>
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4638      	mov	r0, r7
 800cda2:	f7ff ffa5 	bl	800ccf0 <_Bfree>
 800cda6:	4644      	mov	r4, r8
 800cda8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdac:	3501      	adds	r5, #1
 800cdae:	615e      	str	r6, [r3, #20]
 800cdb0:	6125      	str	r5, [r4, #16]
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb8:	0800f6dd 	.word	0x0800f6dd
 800cdbc:	0800f74e 	.word	0x0800f74e

0800cdc0 <__s2b>:
 800cdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdc4:	460c      	mov	r4, r1
 800cdc6:	4615      	mov	r5, r2
 800cdc8:	461f      	mov	r7, r3
 800cdca:	2209      	movs	r2, #9
 800cdcc:	3308      	adds	r3, #8
 800cdce:	4606      	mov	r6, r0
 800cdd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	db09      	blt.n	800cdf0 <__s2b+0x30>
 800cddc:	4630      	mov	r0, r6
 800cdde:	f7ff ff47 	bl	800cc70 <_Balloc>
 800cde2:	b940      	cbnz	r0, 800cdf6 <__s2b+0x36>
 800cde4:	4602      	mov	r2, r0
 800cde6:	4b19      	ldr	r3, [pc, #100]	@ (800ce4c <__s2b+0x8c>)
 800cde8:	4819      	ldr	r0, [pc, #100]	@ (800ce50 <__s2b+0x90>)
 800cdea:	21d3      	movs	r1, #211	@ 0xd3
 800cdec:	f001 f8b2 	bl	800df54 <__assert_func>
 800cdf0:	0052      	lsls	r2, r2, #1
 800cdf2:	3101      	adds	r1, #1
 800cdf4:	e7f0      	b.n	800cdd8 <__s2b+0x18>
 800cdf6:	9b08      	ldr	r3, [sp, #32]
 800cdf8:	6143      	str	r3, [r0, #20]
 800cdfa:	2d09      	cmp	r5, #9
 800cdfc:	f04f 0301 	mov.w	r3, #1
 800ce00:	6103      	str	r3, [r0, #16]
 800ce02:	dd16      	ble.n	800ce32 <__s2b+0x72>
 800ce04:	f104 0909 	add.w	r9, r4, #9
 800ce08:	46c8      	mov	r8, r9
 800ce0a:	442c      	add	r4, r5
 800ce0c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ce10:	4601      	mov	r1, r0
 800ce12:	3b30      	subs	r3, #48	@ 0x30
 800ce14:	220a      	movs	r2, #10
 800ce16:	4630      	mov	r0, r6
 800ce18:	f7ff ff8c 	bl	800cd34 <__multadd>
 800ce1c:	45a0      	cmp	r8, r4
 800ce1e:	d1f5      	bne.n	800ce0c <__s2b+0x4c>
 800ce20:	f1a5 0408 	sub.w	r4, r5, #8
 800ce24:	444c      	add	r4, r9
 800ce26:	1b2d      	subs	r5, r5, r4
 800ce28:	1963      	adds	r3, r4, r5
 800ce2a:	42bb      	cmp	r3, r7
 800ce2c:	db04      	blt.n	800ce38 <__s2b+0x78>
 800ce2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce32:	340a      	adds	r4, #10
 800ce34:	2509      	movs	r5, #9
 800ce36:	e7f6      	b.n	800ce26 <__s2b+0x66>
 800ce38:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ce3c:	4601      	mov	r1, r0
 800ce3e:	3b30      	subs	r3, #48	@ 0x30
 800ce40:	220a      	movs	r2, #10
 800ce42:	4630      	mov	r0, r6
 800ce44:	f7ff ff76 	bl	800cd34 <__multadd>
 800ce48:	e7ee      	b.n	800ce28 <__s2b+0x68>
 800ce4a:	bf00      	nop
 800ce4c:	0800f6dd 	.word	0x0800f6dd
 800ce50:	0800f74e 	.word	0x0800f74e

0800ce54 <__hi0bits>:
 800ce54:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce58:	4603      	mov	r3, r0
 800ce5a:	bf36      	itet	cc
 800ce5c:	0403      	lslcc	r3, r0, #16
 800ce5e:	2000      	movcs	r0, #0
 800ce60:	2010      	movcc	r0, #16
 800ce62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce66:	bf3c      	itt	cc
 800ce68:	021b      	lslcc	r3, r3, #8
 800ce6a:	3008      	addcc	r0, #8
 800ce6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce70:	bf3c      	itt	cc
 800ce72:	011b      	lslcc	r3, r3, #4
 800ce74:	3004      	addcc	r0, #4
 800ce76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce7a:	bf3c      	itt	cc
 800ce7c:	009b      	lslcc	r3, r3, #2
 800ce7e:	3002      	addcc	r0, #2
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	db05      	blt.n	800ce90 <__hi0bits+0x3c>
 800ce84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ce88:	f100 0001 	add.w	r0, r0, #1
 800ce8c:	bf08      	it	eq
 800ce8e:	2020      	moveq	r0, #32
 800ce90:	4770      	bx	lr

0800ce92 <__lo0bits>:
 800ce92:	6803      	ldr	r3, [r0, #0]
 800ce94:	4602      	mov	r2, r0
 800ce96:	f013 0007 	ands.w	r0, r3, #7
 800ce9a:	d00b      	beq.n	800ceb4 <__lo0bits+0x22>
 800ce9c:	07d9      	lsls	r1, r3, #31
 800ce9e:	d421      	bmi.n	800cee4 <__lo0bits+0x52>
 800cea0:	0798      	lsls	r0, r3, #30
 800cea2:	bf49      	itett	mi
 800cea4:	085b      	lsrmi	r3, r3, #1
 800cea6:	089b      	lsrpl	r3, r3, #2
 800cea8:	2001      	movmi	r0, #1
 800ceaa:	6013      	strmi	r3, [r2, #0]
 800ceac:	bf5c      	itt	pl
 800ceae:	6013      	strpl	r3, [r2, #0]
 800ceb0:	2002      	movpl	r0, #2
 800ceb2:	4770      	bx	lr
 800ceb4:	b299      	uxth	r1, r3
 800ceb6:	b909      	cbnz	r1, 800cebc <__lo0bits+0x2a>
 800ceb8:	0c1b      	lsrs	r3, r3, #16
 800ceba:	2010      	movs	r0, #16
 800cebc:	b2d9      	uxtb	r1, r3
 800cebe:	b909      	cbnz	r1, 800cec4 <__lo0bits+0x32>
 800cec0:	3008      	adds	r0, #8
 800cec2:	0a1b      	lsrs	r3, r3, #8
 800cec4:	0719      	lsls	r1, r3, #28
 800cec6:	bf04      	itt	eq
 800cec8:	091b      	lsreq	r3, r3, #4
 800ceca:	3004      	addeq	r0, #4
 800cecc:	0799      	lsls	r1, r3, #30
 800cece:	bf04      	itt	eq
 800ced0:	089b      	lsreq	r3, r3, #2
 800ced2:	3002      	addeq	r0, #2
 800ced4:	07d9      	lsls	r1, r3, #31
 800ced6:	d403      	bmi.n	800cee0 <__lo0bits+0x4e>
 800ced8:	085b      	lsrs	r3, r3, #1
 800ceda:	f100 0001 	add.w	r0, r0, #1
 800cede:	d003      	beq.n	800cee8 <__lo0bits+0x56>
 800cee0:	6013      	str	r3, [r2, #0]
 800cee2:	4770      	bx	lr
 800cee4:	2000      	movs	r0, #0
 800cee6:	4770      	bx	lr
 800cee8:	2020      	movs	r0, #32
 800ceea:	4770      	bx	lr

0800ceec <__i2b>:
 800ceec:	b510      	push	{r4, lr}
 800ceee:	460c      	mov	r4, r1
 800cef0:	2101      	movs	r1, #1
 800cef2:	f7ff febd 	bl	800cc70 <_Balloc>
 800cef6:	4602      	mov	r2, r0
 800cef8:	b928      	cbnz	r0, 800cf06 <__i2b+0x1a>
 800cefa:	4b05      	ldr	r3, [pc, #20]	@ (800cf10 <__i2b+0x24>)
 800cefc:	4805      	ldr	r0, [pc, #20]	@ (800cf14 <__i2b+0x28>)
 800cefe:	f240 1145 	movw	r1, #325	@ 0x145
 800cf02:	f001 f827 	bl	800df54 <__assert_func>
 800cf06:	2301      	movs	r3, #1
 800cf08:	6144      	str	r4, [r0, #20]
 800cf0a:	6103      	str	r3, [r0, #16]
 800cf0c:	bd10      	pop	{r4, pc}
 800cf0e:	bf00      	nop
 800cf10:	0800f6dd 	.word	0x0800f6dd
 800cf14:	0800f74e 	.word	0x0800f74e

0800cf18 <__multiply>:
 800cf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1c:	4614      	mov	r4, r2
 800cf1e:	690a      	ldr	r2, [r1, #16]
 800cf20:	6923      	ldr	r3, [r4, #16]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	bfa8      	it	ge
 800cf26:	4623      	movge	r3, r4
 800cf28:	460f      	mov	r7, r1
 800cf2a:	bfa4      	itt	ge
 800cf2c:	460c      	movge	r4, r1
 800cf2e:	461f      	movge	r7, r3
 800cf30:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cf34:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cf38:	68a3      	ldr	r3, [r4, #8]
 800cf3a:	6861      	ldr	r1, [r4, #4]
 800cf3c:	eb0a 0609 	add.w	r6, sl, r9
 800cf40:	42b3      	cmp	r3, r6
 800cf42:	b085      	sub	sp, #20
 800cf44:	bfb8      	it	lt
 800cf46:	3101      	addlt	r1, #1
 800cf48:	f7ff fe92 	bl	800cc70 <_Balloc>
 800cf4c:	b930      	cbnz	r0, 800cf5c <__multiply+0x44>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	4b44      	ldr	r3, [pc, #272]	@ (800d064 <__multiply+0x14c>)
 800cf52:	4845      	ldr	r0, [pc, #276]	@ (800d068 <__multiply+0x150>)
 800cf54:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cf58:	f000 fffc 	bl	800df54 <__assert_func>
 800cf5c:	f100 0514 	add.w	r5, r0, #20
 800cf60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf64:	462b      	mov	r3, r5
 800cf66:	2200      	movs	r2, #0
 800cf68:	4543      	cmp	r3, r8
 800cf6a:	d321      	bcc.n	800cfb0 <__multiply+0x98>
 800cf6c:	f107 0114 	add.w	r1, r7, #20
 800cf70:	f104 0214 	add.w	r2, r4, #20
 800cf74:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cf78:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cf7c:	9302      	str	r3, [sp, #8]
 800cf7e:	1b13      	subs	r3, r2, r4
 800cf80:	3b15      	subs	r3, #21
 800cf82:	f023 0303 	bic.w	r3, r3, #3
 800cf86:	3304      	adds	r3, #4
 800cf88:	f104 0715 	add.w	r7, r4, #21
 800cf8c:	42ba      	cmp	r2, r7
 800cf8e:	bf38      	it	cc
 800cf90:	2304      	movcc	r3, #4
 800cf92:	9301      	str	r3, [sp, #4]
 800cf94:	9b02      	ldr	r3, [sp, #8]
 800cf96:	9103      	str	r1, [sp, #12]
 800cf98:	428b      	cmp	r3, r1
 800cf9a:	d80c      	bhi.n	800cfb6 <__multiply+0x9e>
 800cf9c:	2e00      	cmp	r6, #0
 800cf9e:	dd03      	ble.n	800cfa8 <__multiply+0x90>
 800cfa0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d05b      	beq.n	800d060 <__multiply+0x148>
 800cfa8:	6106      	str	r6, [r0, #16]
 800cfaa:	b005      	add	sp, #20
 800cfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfb0:	f843 2b04 	str.w	r2, [r3], #4
 800cfb4:	e7d8      	b.n	800cf68 <__multiply+0x50>
 800cfb6:	f8b1 a000 	ldrh.w	sl, [r1]
 800cfba:	f1ba 0f00 	cmp.w	sl, #0
 800cfbe:	d024      	beq.n	800d00a <__multiply+0xf2>
 800cfc0:	f104 0e14 	add.w	lr, r4, #20
 800cfc4:	46a9      	mov	r9, r5
 800cfc6:	f04f 0c00 	mov.w	ip, #0
 800cfca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cfce:	f8d9 3000 	ldr.w	r3, [r9]
 800cfd2:	fa1f fb87 	uxth.w	fp, r7
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	fb0a 330b 	mla	r3, sl, fp, r3
 800cfdc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cfe0:	f8d9 7000 	ldr.w	r7, [r9]
 800cfe4:	4463      	add	r3, ip
 800cfe6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cfea:	fb0a c70b 	mla	r7, sl, fp, ip
 800cfee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cff8:	4572      	cmp	r2, lr
 800cffa:	f849 3b04 	str.w	r3, [r9], #4
 800cffe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d002:	d8e2      	bhi.n	800cfca <__multiply+0xb2>
 800d004:	9b01      	ldr	r3, [sp, #4]
 800d006:	f845 c003 	str.w	ip, [r5, r3]
 800d00a:	9b03      	ldr	r3, [sp, #12]
 800d00c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d010:	3104      	adds	r1, #4
 800d012:	f1b9 0f00 	cmp.w	r9, #0
 800d016:	d021      	beq.n	800d05c <__multiply+0x144>
 800d018:	682b      	ldr	r3, [r5, #0]
 800d01a:	f104 0c14 	add.w	ip, r4, #20
 800d01e:	46ae      	mov	lr, r5
 800d020:	f04f 0a00 	mov.w	sl, #0
 800d024:	f8bc b000 	ldrh.w	fp, [ip]
 800d028:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d02c:	fb09 770b 	mla	r7, r9, fp, r7
 800d030:	4457      	add	r7, sl
 800d032:	b29b      	uxth	r3, r3
 800d034:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d038:	f84e 3b04 	str.w	r3, [lr], #4
 800d03c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d040:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d044:	f8be 3000 	ldrh.w	r3, [lr]
 800d048:	fb09 330a 	mla	r3, r9, sl, r3
 800d04c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d050:	4562      	cmp	r2, ip
 800d052:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d056:	d8e5      	bhi.n	800d024 <__multiply+0x10c>
 800d058:	9f01      	ldr	r7, [sp, #4]
 800d05a:	51eb      	str	r3, [r5, r7]
 800d05c:	3504      	adds	r5, #4
 800d05e:	e799      	b.n	800cf94 <__multiply+0x7c>
 800d060:	3e01      	subs	r6, #1
 800d062:	e79b      	b.n	800cf9c <__multiply+0x84>
 800d064:	0800f6dd 	.word	0x0800f6dd
 800d068:	0800f74e 	.word	0x0800f74e

0800d06c <__pow5mult>:
 800d06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d070:	4615      	mov	r5, r2
 800d072:	f012 0203 	ands.w	r2, r2, #3
 800d076:	4607      	mov	r7, r0
 800d078:	460e      	mov	r6, r1
 800d07a:	d007      	beq.n	800d08c <__pow5mult+0x20>
 800d07c:	4c25      	ldr	r4, [pc, #148]	@ (800d114 <__pow5mult+0xa8>)
 800d07e:	3a01      	subs	r2, #1
 800d080:	2300      	movs	r3, #0
 800d082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d086:	f7ff fe55 	bl	800cd34 <__multadd>
 800d08a:	4606      	mov	r6, r0
 800d08c:	10ad      	asrs	r5, r5, #2
 800d08e:	d03d      	beq.n	800d10c <__pow5mult+0xa0>
 800d090:	69fc      	ldr	r4, [r7, #28]
 800d092:	b97c      	cbnz	r4, 800d0b4 <__pow5mult+0x48>
 800d094:	2010      	movs	r0, #16
 800d096:	f7ff fd23 	bl	800cae0 <malloc>
 800d09a:	4602      	mov	r2, r0
 800d09c:	61f8      	str	r0, [r7, #28]
 800d09e:	b928      	cbnz	r0, 800d0ac <__pow5mult+0x40>
 800d0a0:	4b1d      	ldr	r3, [pc, #116]	@ (800d118 <__pow5mult+0xac>)
 800d0a2:	481e      	ldr	r0, [pc, #120]	@ (800d11c <__pow5mult+0xb0>)
 800d0a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d0a8:	f000 ff54 	bl	800df54 <__assert_func>
 800d0ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d0b0:	6004      	str	r4, [r0, #0]
 800d0b2:	60c4      	str	r4, [r0, #12]
 800d0b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d0b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d0bc:	b94c      	cbnz	r4, 800d0d2 <__pow5mult+0x66>
 800d0be:	f240 2171 	movw	r1, #625	@ 0x271
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	f7ff ff12 	bl	800ceec <__i2b>
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	6003      	str	r3, [r0, #0]
 800d0d2:	f04f 0900 	mov.w	r9, #0
 800d0d6:	07eb      	lsls	r3, r5, #31
 800d0d8:	d50a      	bpl.n	800d0f0 <__pow5mult+0x84>
 800d0da:	4631      	mov	r1, r6
 800d0dc:	4622      	mov	r2, r4
 800d0de:	4638      	mov	r0, r7
 800d0e0:	f7ff ff1a 	bl	800cf18 <__multiply>
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4680      	mov	r8, r0
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	f7ff fe01 	bl	800ccf0 <_Bfree>
 800d0ee:	4646      	mov	r6, r8
 800d0f0:	106d      	asrs	r5, r5, #1
 800d0f2:	d00b      	beq.n	800d10c <__pow5mult+0xa0>
 800d0f4:	6820      	ldr	r0, [r4, #0]
 800d0f6:	b938      	cbnz	r0, 800d108 <__pow5mult+0x9c>
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	4621      	mov	r1, r4
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	f7ff ff0b 	bl	800cf18 <__multiply>
 800d102:	6020      	str	r0, [r4, #0]
 800d104:	f8c0 9000 	str.w	r9, [r0]
 800d108:	4604      	mov	r4, r0
 800d10a:	e7e4      	b.n	800d0d6 <__pow5mult+0x6a>
 800d10c:	4630      	mov	r0, r6
 800d10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d112:	bf00      	nop
 800d114:	0800f7a8 	.word	0x0800f7a8
 800d118:	0800f66e 	.word	0x0800f66e
 800d11c:	0800f74e 	.word	0x0800f74e

0800d120 <__lshift>:
 800d120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d124:	460c      	mov	r4, r1
 800d126:	6849      	ldr	r1, [r1, #4]
 800d128:	6923      	ldr	r3, [r4, #16]
 800d12a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	4607      	mov	r7, r0
 800d132:	4691      	mov	r9, r2
 800d134:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d138:	f108 0601 	add.w	r6, r8, #1
 800d13c:	42b3      	cmp	r3, r6
 800d13e:	db0b      	blt.n	800d158 <__lshift+0x38>
 800d140:	4638      	mov	r0, r7
 800d142:	f7ff fd95 	bl	800cc70 <_Balloc>
 800d146:	4605      	mov	r5, r0
 800d148:	b948      	cbnz	r0, 800d15e <__lshift+0x3e>
 800d14a:	4602      	mov	r2, r0
 800d14c:	4b28      	ldr	r3, [pc, #160]	@ (800d1f0 <__lshift+0xd0>)
 800d14e:	4829      	ldr	r0, [pc, #164]	@ (800d1f4 <__lshift+0xd4>)
 800d150:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d154:	f000 fefe 	bl	800df54 <__assert_func>
 800d158:	3101      	adds	r1, #1
 800d15a:	005b      	lsls	r3, r3, #1
 800d15c:	e7ee      	b.n	800d13c <__lshift+0x1c>
 800d15e:	2300      	movs	r3, #0
 800d160:	f100 0114 	add.w	r1, r0, #20
 800d164:	f100 0210 	add.w	r2, r0, #16
 800d168:	4618      	mov	r0, r3
 800d16a:	4553      	cmp	r3, sl
 800d16c:	db33      	blt.n	800d1d6 <__lshift+0xb6>
 800d16e:	6920      	ldr	r0, [r4, #16]
 800d170:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d174:	f104 0314 	add.w	r3, r4, #20
 800d178:	f019 091f 	ands.w	r9, r9, #31
 800d17c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d180:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d184:	d02b      	beq.n	800d1de <__lshift+0xbe>
 800d186:	f1c9 0e20 	rsb	lr, r9, #32
 800d18a:	468a      	mov	sl, r1
 800d18c:	2200      	movs	r2, #0
 800d18e:	6818      	ldr	r0, [r3, #0]
 800d190:	fa00 f009 	lsl.w	r0, r0, r9
 800d194:	4310      	orrs	r0, r2
 800d196:	f84a 0b04 	str.w	r0, [sl], #4
 800d19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d19e:	459c      	cmp	ip, r3
 800d1a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800d1a4:	d8f3      	bhi.n	800d18e <__lshift+0x6e>
 800d1a6:	ebac 0304 	sub.w	r3, ip, r4
 800d1aa:	3b15      	subs	r3, #21
 800d1ac:	f023 0303 	bic.w	r3, r3, #3
 800d1b0:	3304      	adds	r3, #4
 800d1b2:	f104 0015 	add.w	r0, r4, #21
 800d1b6:	4584      	cmp	ip, r0
 800d1b8:	bf38      	it	cc
 800d1ba:	2304      	movcc	r3, #4
 800d1bc:	50ca      	str	r2, [r1, r3]
 800d1be:	b10a      	cbz	r2, 800d1c4 <__lshift+0xa4>
 800d1c0:	f108 0602 	add.w	r6, r8, #2
 800d1c4:	3e01      	subs	r6, #1
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	612e      	str	r6, [r5, #16]
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	f7ff fd90 	bl	800ccf0 <_Bfree>
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1da:	3301      	adds	r3, #1
 800d1dc:	e7c5      	b.n	800d16a <__lshift+0x4a>
 800d1de:	3904      	subs	r1, #4
 800d1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1e8:	459c      	cmp	ip, r3
 800d1ea:	d8f9      	bhi.n	800d1e0 <__lshift+0xc0>
 800d1ec:	e7ea      	b.n	800d1c4 <__lshift+0xa4>
 800d1ee:	bf00      	nop
 800d1f0:	0800f6dd 	.word	0x0800f6dd
 800d1f4:	0800f74e 	.word	0x0800f74e

0800d1f8 <__mcmp>:
 800d1f8:	690a      	ldr	r2, [r1, #16]
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	6900      	ldr	r0, [r0, #16]
 800d1fe:	1a80      	subs	r0, r0, r2
 800d200:	b530      	push	{r4, r5, lr}
 800d202:	d10e      	bne.n	800d222 <__mcmp+0x2a>
 800d204:	3314      	adds	r3, #20
 800d206:	3114      	adds	r1, #20
 800d208:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d20c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d210:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d214:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d218:	4295      	cmp	r5, r2
 800d21a:	d003      	beq.n	800d224 <__mcmp+0x2c>
 800d21c:	d205      	bcs.n	800d22a <__mcmp+0x32>
 800d21e:	f04f 30ff 	mov.w	r0, #4294967295
 800d222:	bd30      	pop	{r4, r5, pc}
 800d224:	42a3      	cmp	r3, r4
 800d226:	d3f3      	bcc.n	800d210 <__mcmp+0x18>
 800d228:	e7fb      	b.n	800d222 <__mcmp+0x2a>
 800d22a:	2001      	movs	r0, #1
 800d22c:	e7f9      	b.n	800d222 <__mcmp+0x2a>
	...

0800d230 <__mdiff>:
 800d230:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d234:	4689      	mov	r9, r1
 800d236:	4606      	mov	r6, r0
 800d238:	4611      	mov	r1, r2
 800d23a:	4648      	mov	r0, r9
 800d23c:	4614      	mov	r4, r2
 800d23e:	f7ff ffdb 	bl	800d1f8 <__mcmp>
 800d242:	1e05      	subs	r5, r0, #0
 800d244:	d112      	bne.n	800d26c <__mdiff+0x3c>
 800d246:	4629      	mov	r1, r5
 800d248:	4630      	mov	r0, r6
 800d24a:	f7ff fd11 	bl	800cc70 <_Balloc>
 800d24e:	4602      	mov	r2, r0
 800d250:	b928      	cbnz	r0, 800d25e <__mdiff+0x2e>
 800d252:	4b3f      	ldr	r3, [pc, #252]	@ (800d350 <__mdiff+0x120>)
 800d254:	f240 2137 	movw	r1, #567	@ 0x237
 800d258:	483e      	ldr	r0, [pc, #248]	@ (800d354 <__mdiff+0x124>)
 800d25a:	f000 fe7b 	bl	800df54 <__assert_func>
 800d25e:	2301      	movs	r3, #1
 800d260:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d264:	4610      	mov	r0, r2
 800d266:	b003      	add	sp, #12
 800d268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26c:	bfbc      	itt	lt
 800d26e:	464b      	movlt	r3, r9
 800d270:	46a1      	movlt	r9, r4
 800d272:	4630      	mov	r0, r6
 800d274:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d278:	bfba      	itte	lt
 800d27a:	461c      	movlt	r4, r3
 800d27c:	2501      	movlt	r5, #1
 800d27e:	2500      	movge	r5, #0
 800d280:	f7ff fcf6 	bl	800cc70 <_Balloc>
 800d284:	4602      	mov	r2, r0
 800d286:	b918      	cbnz	r0, 800d290 <__mdiff+0x60>
 800d288:	4b31      	ldr	r3, [pc, #196]	@ (800d350 <__mdiff+0x120>)
 800d28a:	f240 2145 	movw	r1, #581	@ 0x245
 800d28e:	e7e3      	b.n	800d258 <__mdiff+0x28>
 800d290:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d294:	6926      	ldr	r6, [r4, #16]
 800d296:	60c5      	str	r5, [r0, #12]
 800d298:	f109 0310 	add.w	r3, r9, #16
 800d29c:	f109 0514 	add.w	r5, r9, #20
 800d2a0:	f104 0e14 	add.w	lr, r4, #20
 800d2a4:	f100 0b14 	add.w	fp, r0, #20
 800d2a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d2ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	46d9      	mov	r9, fp
 800d2b4:	f04f 0c00 	mov.w	ip, #0
 800d2b8:	9b01      	ldr	r3, [sp, #4]
 800d2ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d2be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d2c2:	9301      	str	r3, [sp, #4]
 800d2c4:	fa1f f38a 	uxth.w	r3, sl
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	b283      	uxth	r3, r0
 800d2cc:	1acb      	subs	r3, r1, r3
 800d2ce:	0c00      	lsrs	r0, r0, #16
 800d2d0:	4463      	add	r3, ip
 800d2d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d2d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d2e0:	4576      	cmp	r6, lr
 800d2e2:	f849 3b04 	str.w	r3, [r9], #4
 800d2e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2ea:	d8e5      	bhi.n	800d2b8 <__mdiff+0x88>
 800d2ec:	1b33      	subs	r3, r6, r4
 800d2ee:	3b15      	subs	r3, #21
 800d2f0:	f023 0303 	bic.w	r3, r3, #3
 800d2f4:	3415      	adds	r4, #21
 800d2f6:	3304      	adds	r3, #4
 800d2f8:	42a6      	cmp	r6, r4
 800d2fa:	bf38      	it	cc
 800d2fc:	2304      	movcc	r3, #4
 800d2fe:	441d      	add	r5, r3
 800d300:	445b      	add	r3, fp
 800d302:	461e      	mov	r6, r3
 800d304:	462c      	mov	r4, r5
 800d306:	4544      	cmp	r4, r8
 800d308:	d30e      	bcc.n	800d328 <__mdiff+0xf8>
 800d30a:	f108 0103 	add.w	r1, r8, #3
 800d30e:	1b49      	subs	r1, r1, r5
 800d310:	f021 0103 	bic.w	r1, r1, #3
 800d314:	3d03      	subs	r5, #3
 800d316:	45a8      	cmp	r8, r5
 800d318:	bf38      	it	cc
 800d31a:	2100      	movcc	r1, #0
 800d31c:	440b      	add	r3, r1
 800d31e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d322:	b191      	cbz	r1, 800d34a <__mdiff+0x11a>
 800d324:	6117      	str	r7, [r2, #16]
 800d326:	e79d      	b.n	800d264 <__mdiff+0x34>
 800d328:	f854 1b04 	ldr.w	r1, [r4], #4
 800d32c:	46e6      	mov	lr, ip
 800d32e:	0c08      	lsrs	r0, r1, #16
 800d330:	fa1c fc81 	uxtah	ip, ip, r1
 800d334:	4471      	add	r1, lr
 800d336:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d33a:	b289      	uxth	r1, r1
 800d33c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d340:	f846 1b04 	str.w	r1, [r6], #4
 800d344:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d348:	e7dd      	b.n	800d306 <__mdiff+0xd6>
 800d34a:	3f01      	subs	r7, #1
 800d34c:	e7e7      	b.n	800d31e <__mdiff+0xee>
 800d34e:	bf00      	nop
 800d350:	0800f6dd 	.word	0x0800f6dd
 800d354:	0800f74e 	.word	0x0800f74e

0800d358 <__ulp>:
 800d358:	b082      	sub	sp, #8
 800d35a:	ed8d 0b00 	vstr	d0, [sp]
 800d35e:	9a01      	ldr	r2, [sp, #4]
 800d360:	4b0f      	ldr	r3, [pc, #60]	@ (800d3a0 <__ulp+0x48>)
 800d362:	4013      	ands	r3, r2
 800d364:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d368:	2b00      	cmp	r3, #0
 800d36a:	dc08      	bgt.n	800d37e <__ulp+0x26>
 800d36c:	425b      	negs	r3, r3
 800d36e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d372:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d376:	da04      	bge.n	800d382 <__ulp+0x2a>
 800d378:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d37c:	4113      	asrs	r3, r2
 800d37e:	2200      	movs	r2, #0
 800d380:	e008      	b.n	800d394 <__ulp+0x3c>
 800d382:	f1a2 0314 	sub.w	r3, r2, #20
 800d386:	2b1e      	cmp	r3, #30
 800d388:	bfda      	itte	le
 800d38a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d38e:	40da      	lsrle	r2, r3
 800d390:	2201      	movgt	r2, #1
 800d392:	2300      	movs	r3, #0
 800d394:	4619      	mov	r1, r3
 800d396:	4610      	mov	r0, r2
 800d398:	ec41 0b10 	vmov	d0, r0, r1
 800d39c:	b002      	add	sp, #8
 800d39e:	4770      	bx	lr
 800d3a0:	7ff00000 	.word	0x7ff00000

0800d3a4 <__b2d>:
 800d3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a8:	6906      	ldr	r6, [r0, #16]
 800d3aa:	f100 0814 	add.w	r8, r0, #20
 800d3ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d3b2:	1f37      	subs	r7, r6, #4
 800d3b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	f7ff fd4b 	bl	800ce54 <__hi0bits>
 800d3be:	f1c0 0320 	rsb	r3, r0, #32
 800d3c2:	280a      	cmp	r0, #10
 800d3c4:	600b      	str	r3, [r1, #0]
 800d3c6:	491b      	ldr	r1, [pc, #108]	@ (800d434 <__b2d+0x90>)
 800d3c8:	dc15      	bgt.n	800d3f6 <__b2d+0x52>
 800d3ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800d3ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800d3d2:	45b8      	cmp	r8, r7
 800d3d4:	ea43 0501 	orr.w	r5, r3, r1
 800d3d8:	bf34      	ite	cc
 800d3da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d3de:	2300      	movcs	r3, #0
 800d3e0:	3015      	adds	r0, #21
 800d3e2:	fa02 f000 	lsl.w	r0, r2, r0
 800d3e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800d3ea:	4303      	orrs	r3, r0
 800d3ec:	461c      	mov	r4, r3
 800d3ee:	ec45 4b10 	vmov	d0, r4, r5
 800d3f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3f6:	45b8      	cmp	r8, r7
 800d3f8:	bf3a      	itte	cc
 800d3fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d3fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800d402:	2300      	movcs	r3, #0
 800d404:	380b      	subs	r0, #11
 800d406:	d012      	beq.n	800d42e <__b2d+0x8a>
 800d408:	f1c0 0120 	rsb	r1, r0, #32
 800d40c:	fa23 f401 	lsr.w	r4, r3, r1
 800d410:	4082      	lsls	r2, r0
 800d412:	4322      	orrs	r2, r4
 800d414:	4547      	cmp	r7, r8
 800d416:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d41a:	bf8c      	ite	hi
 800d41c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d420:	2200      	movls	r2, #0
 800d422:	4083      	lsls	r3, r0
 800d424:	40ca      	lsrs	r2, r1
 800d426:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d42a:	4313      	orrs	r3, r2
 800d42c:	e7de      	b.n	800d3ec <__b2d+0x48>
 800d42e:	ea42 0501 	orr.w	r5, r2, r1
 800d432:	e7db      	b.n	800d3ec <__b2d+0x48>
 800d434:	3ff00000 	.word	0x3ff00000

0800d438 <__d2b>:
 800d438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d43c:	460f      	mov	r7, r1
 800d43e:	2101      	movs	r1, #1
 800d440:	ec59 8b10 	vmov	r8, r9, d0
 800d444:	4616      	mov	r6, r2
 800d446:	f7ff fc13 	bl	800cc70 <_Balloc>
 800d44a:	4604      	mov	r4, r0
 800d44c:	b930      	cbnz	r0, 800d45c <__d2b+0x24>
 800d44e:	4602      	mov	r2, r0
 800d450:	4b23      	ldr	r3, [pc, #140]	@ (800d4e0 <__d2b+0xa8>)
 800d452:	4824      	ldr	r0, [pc, #144]	@ (800d4e4 <__d2b+0xac>)
 800d454:	f240 310f 	movw	r1, #783	@ 0x30f
 800d458:	f000 fd7c 	bl	800df54 <__assert_func>
 800d45c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d460:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d464:	b10d      	cbz	r5, 800d46a <__d2b+0x32>
 800d466:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d46a:	9301      	str	r3, [sp, #4]
 800d46c:	f1b8 0300 	subs.w	r3, r8, #0
 800d470:	d023      	beq.n	800d4ba <__d2b+0x82>
 800d472:	4668      	mov	r0, sp
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	f7ff fd0c 	bl	800ce92 <__lo0bits>
 800d47a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d47e:	b1d0      	cbz	r0, 800d4b6 <__d2b+0x7e>
 800d480:	f1c0 0320 	rsb	r3, r0, #32
 800d484:	fa02 f303 	lsl.w	r3, r2, r3
 800d488:	430b      	orrs	r3, r1
 800d48a:	40c2      	lsrs	r2, r0
 800d48c:	6163      	str	r3, [r4, #20]
 800d48e:	9201      	str	r2, [sp, #4]
 800d490:	9b01      	ldr	r3, [sp, #4]
 800d492:	61a3      	str	r3, [r4, #24]
 800d494:	2b00      	cmp	r3, #0
 800d496:	bf0c      	ite	eq
 800d498:	2201      	moveq	r2, #1
 800d49a:	2202      	movne	r2, #2
 800d49c:	6122      	str	r2, [r4, #16]
 800d49e:	b1a5      	cbz	r5, 800d4ca <__d2b+0x92>
 800d4a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d4a4:	4405      	add	r5, r0
 800d4a6:	603d      	str	r5, [r7, #0]
 800d4a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d4ac:	6030      	str	r0, [r6, #0]
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	b003      	add	sp, #12
 800d4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4b6:	6161      	str	r1, [r4, #20]
 800d4b8:	e7ea      	b.n	800d490 <__d2b+0x58>
 800d4ba:	a801      	add	r0, sp, #4
 800d4bc:	f7ff fce9 	bl	800ce92 <__lo0bits>
 800d4c0:	9b01      	ldr	r3, [sp, #4]
 800d4c2:	6163      	str	r3, [r4, #20]
 800d4c4:	3020      	adds	r0, #32
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	e7e8      	b.n	800d49c <__d2b+0x64>
 800d4ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d4d2:	6038      	str	r0, [r7, #0]
 800d4d4:	6918      	ldr	r0, [r3, #16]
 800d4d6:	f7ff fcbd 	bl	800ce54 <__hi0bits>
 800d4da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4de:	e7e5      	b.n	800d4ac <__d2b+0x74>
 800d4e0:	0800f6dd 	.word	0x0800f6dd
 800d4e4:	0800f74e 	.word	0x0800f74e

0800d4e8 <__ratio>:
 800d4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4ec:	b085      	sub	sp, #20
 800d4ee:	e9cd 1000 	strd	r1, r0, [sp]
 800d4f2:	a902      	add	r1, sp, #8
 800d4f4:	f7ff ff56 	bl	800d3a4 <__b2d>
 800d4f8:	9800      	ldr	r0, [sp, #0]
 800d4fa:	a903      	add	r1, sp, #12
 800d4fc:	ec55 4b10 	vmov	r4, r5, d0
 800d500:	f7ff ff50 	bl	800d3a4 <__b2d>
 800d504:	9b01      	ldr	r3, [sp, #4]
 800d506:	6919      	ldr	r1, [r3, #16]
 800d508:	9b00      	ldr	r3, [sp, #0]
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	1ac9      	subs	r1, r1, r3
 800d50e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d512:	1a9b      	subs	r3, r3, r2
 800d514:	ec5b ab10 	vmov	sl, fp, d0
 800d518:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	bfce      	itee	gt
 800d520:	462a      	movgt	r2, r5
 800d522:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d526:	465a      	movle	r2, fp
 800d528:	462f      	mov	r7, r5
 800d52a:	46d9      	mov	r9, fp
 800d52c:	bfcc      	ite	gt
 800d52e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d532:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d536:	464b      	mov	r3, r9
 800d538:	4652      	mov	r2, sl
 800d53a:	4620      	mov	r0, r4
 800d53c:	4639      	mov	r1, r7
 800d53e:	f7f3 f985 	bl	800084c <__aeabi_ddiv>
 800d542:	ec41 0b10 	vmov	d0, r0, r1
 800d546:	b005      	add	sp, #20
 800d548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d54c <__copybits>:
 800d54c:	3901      	subs	r1, #1
 800d54e:	b570      	push	{r4, r5, r6, lr}
 800d550:	1149      	asrs	r1, r1, #5
 800d552:	6914      	ldr	r4, [r2, #16]
 800d554:	3101      	adds	r1, #1
 800d556:	f102 0314 	add.w	r3, r2, #20
 800d55a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d55e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d562:	1f05      	subs	r5, r0, #4
 800d564:	42a3      	cmp	r3, r4
 800d566:	d30c      	bcc.n	800d582 <__copybits+0x36>
 800d568:	1aa3      	subs	r3, r4, r2
 800d56a:	3b11      	subs	r3, #17
 800d56c:	f023 0303 	bic.w	r3, r3, #3
 800d570:	3211      	adds	r2, #17
 800d572:	42a2      	cmp	r2, r4
 800d574:	bf88      	it	hi
 800d576:	2300      	movhi	r3, #0
 800d578:	4418      	add	r0, r3
 800d57a:	2300      	movs	r3, #0
 800d57c:	4288      	cmp	r0, r1
 800d57e:	d305      	bcc.n	800d58c <__copybits+0x40>
 800d580:	bd70      	pop	{r4, r5, r6, pc}
 800d582:	f853 6b04 	ldr.w	r6, [r3], #4
 800d586:	f845 6f04 	str.w	r6, [r5, #4]!
 800d58a:	e7eb      	b.n	800d564 <__copybits+0x18>
 800d58c:	f840 3b04 	str.w	r3, [r0], #4
 800d590:	e7f4      	b.n	800d57c <__copybits+0x30>

0800d592 <__any_on>:
 800d592:	f100 0214 	add.w	r2, r0, #20
 800d596:	6900      	ldr	r0, [r0, #16]
 800d598:	114b      	asrs	r3, r1, #5
 800d59a:	4298      	cmp	r0, r3
 800d59c:	b510      	push	{r4, lr}
 800d59e:	db11      	blt.n	800d5c4 <__any_on+0x32>
 800d5a0:	dd0a      	ble.n	800d5b8 <__any_on+0x26>
 800d5a2:	f011 011f 	ands.w	r1, r1, #31
 800d5a6:	d007      	beq.n	800d5b8 <__any_on+0x26>
 800d5a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d5ac:	fa24 f001 	lsr.w	r0, r4, r1
 800d5b0:	fa00 f101 	lsl.w	r1, r0, r1
 800d5b4:	428c      	cmp	r4, r1
 800d5b6:	d10b      	bne.n	800d5d0 <__any_on+0x3e>
 800d5b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d803      	bhi.n	800d5c8 <__any_on+0x36>
 800d5c0:	2000      	movs	r0, #0
 800d5c2:	bd10      	pop	{r4, pc}
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	e7f7      	b.n	800d5b8 <__any_on+0x26>
 800d5c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d5cc:	2900      	cmp	r1, #0
 800d5ce:	d0f5      	beq.n	800d5bc <__any_on+0x2a>
 800d5d0:	2001      	movs	r0, #1
 800d5d2:	e7f6      	b.n	800d5c2 <__any_on+0x30>

0800d5d4 <_strtol_l.constprop.0>:
 800d5d4:	2b24      	cmp	r3, #36	@ 0x24
 800d5d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5da:	4686      	mov	lr, r0
 800d5dc:	4690      	mov	r8, r2
 800d5de:	d801      	bhi.n	800d5e4 <_strtol_l.constprop.0+0x10>
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d106      	bne.n	800d5f2 <_strtol_l.constprop.0+0x1e>
 800d5e4:	f7fe f85e 	bl	800b6a4 <__errno>
 800d5e8:	2316      	movs	r3, #22
 800d5ea:	6003      	str	r3, [r0, #0]
 800d5ec:	2000      	movs	r0, #0
 800d5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5f2:	4834      	ldr	r0, [pc, #208]	@ (800d6c4 <_strtol_l.constprop.0+0xf0>)
 800d5f4:	460d      	mov	r5, r1
 800d5f6:	462a      	mov	r2, r5
 800d5f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5fc:	5d06      	ldrb	r6, [r0, r4]
 800d5fe:	f016 0608 	ands.w	r6, r6, #8
 800d602:	d1f8      	bne.n	800d5f6 <_strtol_l.constprop.0+0x22>
 800d604:	2c2d      	cmp	r4, #45	@ 0x2d
 800d606:	d12d      	bne.n	800d664 <_strtol_l.constprop.0+0x90>
 800d608:	782c      	ldrb	r4, [r5, #0]
 800d60a:	2601      	movs	r6, #1
 800d60c:	1c95      	adds	r5, r2, #2
 800d60e:	f033 0210 	bics.w	r2, r3, #16
 800d612:	d109      	bne.n	800d628 <_strtol_l.constprop.0+0x54>
 800d614:	2c30      	cmp	r4, #48	@ 0x30
 800d616:	d12a      	bne.n	800d66e <_strtol_l.constprop.0+0x9a>
 800d618:	782a      	ldrb	r2, [r5, #0]
 800d61a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d61e:	2a58      	cmp	r2, #88	@ 0x58
 800d620:	d125      	bne.n	800d66e <_strtol_l.constprop.0+0x9a>
 800d622:	786c      	ldrb	r4, [r5, #1]
 800d624:	2310      	movs	r3, #16
 800d626:	3502      	adds	r5, #2
 800d628:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d62c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d630:	2200      	movs	r2, #0
 800d632:	fbbc f9f3 	udiv	r9, ip, r3
 800d636:	4610      	mov	r0, r2
 800d638:	fb03 ca19 	mls	sl, r3, r9, ip
 800d63c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d640:	2f09      	cmp	r7, #9
 800d642:	d81b      	bhi.n	800d67c <_strtol_l.constprop.0+0xa8>
 800d644:	463c      	mov	r4, r7
 800d646:	42a3      	cmp	r3, r4
 800d648:	dd27      	ble.n	800d69a <_strtol_l.constprop.0+0xc6>
 800d64a:	1c57      	adds	r7, r2, #1
 800d64c:	d007      	beq.n	800d65e <_strtol_l.constprop.0+0x8a>
 800d64e:	4581      	cmp	r9, r0
 800d650:	d320      	bcc.n	800d694 <_strtol_l.constprop.0+0xc0>
 800d652:	d101      	bne.n	800d658 <_strtol_l.constprop.0+0x84>
 800d654:	45a2      	cmp	sl, r4
 800d656:	db1d      	blt.n	800d694 <_strtol_l.constprop.0+0xc0>
 800d658:	fb00 4003 	mla	r0, r0, r3, r4
 800d65c:	2201      	movs	r2, #1
 800d65e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d662:	e7eb      	b.n	800d63c <_strtol_l.constprop.0+0x68>
 800d664:	2c2b      	cmp	r4, #43	@ 0x2b
 800d666:	bf04      	itt	eq
 800d668:	782c      	ldrbeq	r4, [r5, #0]
 800d66a:	1c95      	addeq	r5, r2, #2
 800d66c:	e7cf      	b.n	800d60e <_strtol_l.constprop.0+0x3a>
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1da      	bne.n	800d628 <_strtol_l.constprop.0+0x54>
 800d672:	2c30      	cmp	r4, #48	@ 0x30
 800d674:	bf0c      	ite	eq
 800d676:	2308      	moveq	r3, #8
 800d678:	230a      	movne	r3, #10
 800d67a:	e7d5      	b.n	800d628 <_strtol_l.constprop.0+0x54>
 800d67c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d680:	2f19      	cmp	r7, #25
 800d682:	d801      	bhi.n	800d688 <_strtol_l.constprop.0+0xb4>
 800d684:	3c37      	subs	r4, #55	@ 0x37
 800d686:	e7de      	b.n	800d646 <_strtol_l.constprop.0+0x72>
 800d688:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d68c:	2f19      	cmp	r7, #25
 800d68e:	d804      	bhi.n	800d69a <_strtol_l.constprop.0+0xc6>
 800d690:	3c57      	subs	r4, #87	@ 0x57
 800d692:	e7d8      	b.n	800d646 <_strtol_l.constprop.0+0x72>
 800d694:	f04f 32ff 	mov.w	r2, #4294967295
 800d698:	e7e1      	b.n	800d65e <_strtol_l.constprop.0+0x8a>
 800d69a:	1c53      	adds	r3, r2, #1
 800d69c:	d108      	bne.n	800d6b0 <_strtol_l.constprop.0+0xdc>
 800d69e:	2322      	movs	r3, #34	@ 0x22
 800d6a0:	f8ce 3000 	str.w	r3, [lr]
 800d6a4:	4660      	mov	r0, ip
 800d6a6:	f1b8 0f00 	cmp.w	r8, #0
 800d6aa:	d0a0      	beq.n	800d5ee <_strtol_l.constprop.0+0x1a>
 800d6ac:	1e69      	subs	r1, r5, #1
 800d6ae:	e006      	b.n	800d6be <_strtol_l.constprop.0+0xea>
 800d6b0:	b106      	cbz	r6, 800d6b4 <_strtol_l.constprop.0+0xe0>
 800d6b2:	4240      	negs	r0, r0
 800d6b4:	f1b8 0f00 	cmp.w	r8, #0
 800d6b8:	d099      	beq.n	800d5ee <_strtol_l.constprop.0+0x1a>
 800d6ba:	2a00      	cmp	r2, #0
 800d6bc:	d1f6      	bne.n	800d6ac <_strtol_l.constprop.0+0xd8>
 800d6be:	f8c8 1000 	str.w	r1, [r8]
 800d6c2:	e794      	b.n	800d5ee <_strtol_l.constprop.0+0x1a>
 800d6c4:	0800f8a9 	.word	0x0800f8a9

0800d6c8 <_strtol_r>:
 800d6c8:	f7ff bf84 	b.w	800d5d4 <_strtol_l.constprop.0>

0800d6cc <__ascii_wctomb>:
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	4608      	mov	r0, r1
 800d6d0:	b141      	cbz	r1, 800d6e4 <__ascii_wctomb+0x18>
 800d6d2:	2aff      	cmp	r2, #255	@ 0xff
 800d6d4:	d904      	bls.n	800d6e0 <__ascii_wctomb+0x14>
 800d6d6:	228a      	movs	r2, #138	@ 0x8a
 800d6d8:	601a      	str	r2, [r3, #0]
 800d6da:	f04f 30ff 	mov.w	r0, #4294967295
 800d6de:	4770      	bx	lr
 800d6e0:	700a      	strb	r2, [r1, #0]
 800d6e2:	2001      	movs	r0, #1
 800d6e4:	4770      	bx	lr

0800d6e6 <__ssputs_r>:
 800d6e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ea:	688e      	ldr	r6, [r1, #8]
 800d6ec:	461f      	mov	r7, r3
 800d6ee:	42be      	cmp	r6, r7
 800d6f0:	680b      	ldr	r3, [r1, #0]
 800d6f2:	4682      	mov	sl, r0
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	4690      	mov	r8, r2
 800d6f8:	d82d      	bhi.n	800d756 <__ssputs_r+0x70>
 800d6fa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d6fe:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d702:	d026      	beq.n	800d752 <__ssputs_r+0x6c>
 800d704:	6965      	ldr	r5, [r4, #20]
 800d706:	6909      	ldr	r1, [r1, #16]
 800d708:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d70c:	eba3 0901 	sub.w	r9, r3, r1
 800d710:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d714:	1c7b      	adds	r3, r7, #1
 800d716:	444b      	add	r3, r9
 800d718:	106d      	asrs	r5, r5, #1
 800d71a:	429d      	cmp	r5, r3
 800d71c:	bf38      	it	cc
 800d71e:	461d      	movcc	r5, r3
 800d720:	0553      	lsls	r3, r2, #21
 800d722:	d527      	bpl.n	800d774 <__ssputs_r+0x8e>
 800d724:	4629      	mov	r1, r5
 800d726:	f7ff fa05 	bl	800cb34 <_malloc_r>
 800d72a:	4606      	mov	r6, r0
 800d72c:	b360      	cbz	r0, 800d788 <__ssputs_r+0xa2>
 800d72e:	6921      	ldr	r1, [r4, #16]
 800d730:	464a      	mov	r2, r9
 800d732:	f7fd ffe4 	bl	800b6fe <memcpy>
 800d736:	89a3      	ldrh	r3, [r4, #12]
 800d738:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d73c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d740:	81a3      	strh	r3, [r4, #12]
 800d742:	6126      	str	r6, [r4, #16]
 800d744:	6165      	str	r5, [r4, #20]
 800d746:	444e      	add	r6, r9
 800d748:	eba5 0509 	sub.w	r5, r5, r9
 800d74c:	6026      	str	r6, [r4, #0]
 800d74e:	60a5      	str	r5, [r4, #8]
 800d750:	463e      	mov	r6, r7
 800d752:	42be      	cmp	r6, r7
 800d754:	d900      	bls.n	800d758 <__ssputs_r+0x72>
 800d756:	463e      	mov	r6, r7
 800d758:	6820      	ldr	r0, [r4, #0]
 800d75a:	4632      	mov	r2, r6
 800d75c:	4641      	mov	r1, r8
 800d75e:	f000 fbcf 	bl	800df00 <memmove>
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	1b9b      	subs	r3, r3, r6
 800d766:	60a3      	str	r3, [r4, #8]
 800d768:	6823      	ldr	r3, [r4, #0]
 800d76a:	4433      	add	r3, r6
 800d76c:	6023      	str	r3, [r4, #0]
 800d76e:	2000      	movs	r0, #0
 800d770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d774:	462a      	mov	r2, r5
 800d776:	f000 fc1f 	bl	800dfb8 <_realloc_r>
 800d77a:	4606      	mov	r6, r0
 800d77c:	2800      	cmp	r0, #0
 800d77e:	d1e0      	bne.n	800d742 <__ssputs_r+0x5c>
 800d780:	6921      	ldr	r1, [r4, #16]
 800d782:	4650      	mov	r0, sl
 800d784:	f7fe fe28 	bl	800c3d8 <_free_r>
 800d788:	230c      	movs	r3, #12
 800d78a:	f8ca 3000 	str.w	r3, [sl]
 800d78e:	89a3      	ldrh	r3, [r4, #12]
 800d790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d794:	81a3      	strh	r3, [r4, #12]
 800d796:	f04f 30ff 	mov.w	r0, #4294967295
 800d79a:	e7e9      	b.n	800d770 <__ssputs_r+0x8a>

0800d79c <_svfiprintf_r>:
 800d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a0:	4698      	mov	r8, r3
 800d7a2:	898b      	ldrh	r3, [r1, #12]
 800d7a4:	061b      	lsls	r3, r3, #24
 800d7a6:	b09d      	sub	sp, #116	@ 0x74
 800d7a8:	4607      	mov	r7, r0
 800d7aa:	460d      	mov	r5, r1
 800d7ac:	4614      	mov	r4, r2
 800d7ae:	d510      	bpl.n	800d7d2 <_svfiprintf_r+0x36>
 800d7b0:	690b      	ldr	r3, [r1, #16]
 800d7b2:	b973      	cbnz	r3, 800d7d2 <_svfiprintf_r+0x36>
 800d7b4:	2140      	movs	r1, #64	@ 0x40
 800d7b6:	f7ff f9bd 	bl	800cb34 <_malloc_r>
 800d7ba:	6028      	str	r0, [r5, #0]
 800d7bc:	6128      	str	r0, [r5, #16]
 800d7be:	b930      	cbnz	r0, 800d7ce <_svfiprintf_r+0x32>
 800d7c0:	230c      	movs	r3, #12
 800d7c2:	603b      	str	r3, [r7, #0]
 800d7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c8:	b01d      	add	sp, #116	@ 0x74
 800d7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ce:	2340      	movs	r3, #64	@ 0x40
 800d7d0:	616b      	str	r3, [r5, #20]
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7d6:	2320      	movs	r3, #32
 800d7d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7e0:	2330      	movs	r3, #48	@ 0x30
 800d7e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d980 <_svfiprintf_r+0x1e4>
 800d7e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7ea:	f04f 0901 	mov.w	r9, #1
 800d7ee:	4623      	mov	r3, r4
 800d7f0:	469a      	mov	sl, r3
 800d7f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7f6:	b10a      	cbz	r2, 800d7fc <_svfiprintf_r+0x60>
 800d7f8:	2a25      	cmp	r2, #37	@ 0x25
 800d7fa:	d1f9      	bne.n	800d7f0 <_svfiprintf_r+0x54>
 800d7fc:	ebba 0b04 	subs.w	fp, sl, r4
 800d800:	d00b      	beq.n	800d81a <_svfiprintf_r+0x7e>
 800d802:	465b      	mov	r3, fp
 800d804:	4622      	mov	r2, r4
 800d806:	4629      	mov	r1, r5
 800d808:	4638      	mov	r0, r7
 800d80a:	f7ff ff6c 	bl	800d6e6 <__ssputs_r>
 800d80e:	3001      	adds	r0, #1
 800d810:	f000 80a7 	beq.w	800d962 <_svfiprintf_r+0x1c6>
 800d814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d816:	445a      	add	r2, fp
 800d818:	9209      	str	r2, [sp, #36]	@ 0x24
 800d81a:	f89a 3000 	ldrb.w	r3, [sl]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f000 809f 	beq.w	800d962 <_svfiprintf_r+0x1c6>
 800d824:	2300      	movs	r3, #0
 800d826:	f04f 32ff 	mov.w	r2, #4294967295
 800d82a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d82e:	f10a 0a01 	add.w	sl, sl, #1
 800d832:	9304      	str	r3, [sp, #16]
 800d834:	9307      	str	r3, [sp, #28]
 800d836:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d83a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d83c:	4654      	mov	r4, sl
 800d83e:	2205      	movs	r2, #5
 800d840:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d844:	484e      	ldr	r0, [pc, #312]	@ (800d980 <_svfiprintf_r+0x1e4>)
 800d846:	f7f2 fcc3 	bl	80001d0 <memchr>
 800d84a:	9a04      	ldr	r2, [sp, #16]
 800d84c:	b9d8      	cbnz	r0, 800d886 <_svfiprintf_r+0xea>
 800d84e:	06d0      	lsls	r0, r2, #27
 800d850:	bf44      	itt	mi
 800d852:	2320      	movmi	r3, #32
 800d854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d858:	0711      	lsls	r1, r2, #28
 800d85a:	bf44      	itt	mi
 800d85c:	232b      	movmi	r3, #43	@ 0x2b
 800d85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d862:	f89a 3000 	ldrb.w	r3, [sl]
 800d866:	2b2a      	cmp	r3, #42	@ 0x2a
 800d868:	d015      	beq.n	800d896 <_svfiprintf_r+0xfa>
 800d86a:	9a07      	ldr	r2, [sp, #28]
 800d86c:	4654      	mov	r4, sl
 800d86e:	2000      	movs	r0, #0
 800d870:	f04f 0c0a 	mov.w	ip, #10
 800d874:	4621      	mov	r1, r4
 800d876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d87a:	3b30      	subs	r3, #48	@ 0x30
 800d87c:	2b09      	cmp	r3, #9
 800d87e:	d94b      	bls.n	800d918 <_svfiprintf_r+0x17c>
 800d880:	b1b0      	cbz	r0, 800d8b0 <_svfiprintf_r+0x114>
 800d882:	9207      	str	r2, [sp, #28]
 800d884:	e014      	b.n	800d8b0 <_svfiprintf_r+0x114>
 800d886:	eba0 0308 	sub.w	r3, r0, r8
 800d88a:	fa09 f303 	lsl.w	r3, r9, r3
 800d88e:	4313      	orrs	r3, r2
 800d890:	9304      	str	r3, [sp, #16]
 800d892:	46a2      	mov	sl, r4
 800d894:	e7d2      	b.n	800d83c <_svfiprintf_r+0xa0>
 800d896:	9b03      	ldr	r3, [sp, #12]
 800d898:	1d19      	adds	r1, r3, #4
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	9103      	str	r1, [sp, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	bfbb      	ittet	lt
 800d8a2:	425b      	neglt	r3, r3
 800d8a4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8a8:	9307      	strge	r3, [sp, #28]
 800d8aa:	9307      	strlt	r3, [sp, #28]
 800d8ac:	bfb8      	it	lt
 800d8ae:	9204      	strlt	r2, [sp, #16]
 800d8b0:	7823      	ldrb	r3, [r4, #0]
 800d8b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8b4:	d10a      	bne.n	800d8cc <_svfiprintf_r+0x130>
 800d8b6:	7863      	ldrb	r3, [r4, #1]
 800d8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8ba:	d132      	bne.n	800d922 <_svfiprintf_r+0x186>
 800d8bc:	9b03      	ldr	r3, [sp, #12]
 800d8be:	1d1a      	adds	r2, r3, #4
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	9203      	str	r2, [sp, #12]
 800d8c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8c8:	3402      	adds	r4, #2
 800d8ca:	9305      	str	r3, [sp, #20]
 800d8cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d990 <_svfiprintf_r+0x1f4>
 800d8d0:	7821      	ldrb	r1, [r4, #0]
 800d8d2:	2203      	movs	r2, #3
 800d8d4:	4650      	mov	r0, sl
 800d8d6:	f7f2 fc7b 	bl	80001d0 <memchr>
 800d8da:	b138      	cbz	r0, 800d8ec <_svfiprintf_r+0x150>
 800d8dc:	9b04      	ldr	r3, [sp, #16]
 800d8de:	eba0 000a 	sub.w	r0, r0, sl
 800d8e2:	2240      	movs	r2, #64	@ 0x40
 800d8e4:	4082      	lsls	r2, r0
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	3401      	adds	r4, #1
 800d8ea:	9304      	str	r3, [sp, #16]
 800d8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8f0:	4824      	ldr	r0, [pc, #144]	@ (800d984 <_svfiprintf_r+0x1e8>)
 800d8f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8f6:	2206      	movs	r2, #6
 800d8f8:	f7f2 fc6a 	bl	80001d0 <memchr>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d036      	beq.n	800d96e <_svfiprintf_r+0x1d2>
 800d900:	4b21      	ldr	r3, [pc, #132]	@ (800d988 <_svfiprintf_r+0x1ec>)
 800d902:	bb1b      	cbnz	r3, 800d94c <_svfiprintf_r+0x1b0>
 800d904:	9b03      	ldr	r3, [sp, #12]
 800d906:	3307      	adds	r3, #7
 800d908:	f023 0307 	bic.w	r3, r3, #7
 800d90c:	3308      	adds	r3, #8
 800d90e:	9303      	str	r3, [sp, #12]
 800d910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d912:	4433      	add	r3, r6
 800d914:	9309      	str	r3, [sp, #36]	@ 0x24
 800d916:	e76a      	b.n	800d7ee <_svfiprintf_r+0x52>
 800d918:	fb0c 3202 	mla	r2, ip, r2, r3
 800d91c:	460c      	mov	r4, r1
 800d91e:	2001      	movs	r0, #1
 800d920:	e7a8      	b.n	800d874 <_svfiprintf_r+0xd8>
 800d922:	2300      	movs	r3, #0
 800d924:	3401      	adds	r4, #1
 800d926:	9305      	str	r3, [sp, #20]
 800d928:	4619      	mov	r1, r3
 800d92a:	f04f 0c0a 	mov.w	ip, #10
 800d92e:	4620      	mov	r0, r4
 800d930:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d934:	3a30      	subs	r2, #48	@ 0x30
 800d936:	2a09      	cmp	r2, #9
 800d938:	d903      	bls.n	800d942 <_svfiprintf_r+0x1a6>
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d0c6      	beq.n	800d8cc <_svfiprintf_r+0x130>
 800d93e:	9105      	str	r1, [sp, #20]
 800d940:	e7c4      	b.n	800d8cc <_svfiprintf_r+0x130>
 800d942:	fb0c 2101 	mla	r1, ip, r1, r2
 800d946:	4604      	mov	r4, r0
 800d948:	2301      	movs	r3, #1
 800d94a:	e7f0      	b.n	800d92e <_svfiprintf_r+0x192>
 800d94c:	ab03      	add	r3, sp, #12
 800d94e:	9300      	str	r3, [sp, #0]
 800d950:	462a      	mov	r2, r5
 800d952:	4b0e      	ldr	r3, [pc, #56]	@ (800d98c <_svfiprintf_r+0x1f0>)
 800d954:	a904      	add	r1, sp, #16
 800d956:	4638      	mov	r0, r7
 800d958:	f7fc ff34 	bl	800a7c4 <_printf_float>
 800d95c:	1c42      	adds	r2, r0, #1
 800d95e:	4606      	mov	r6, r0
 800d960:	d1d6      	bne.n	800d910 <_svfiprintf_r+0x174>
 800d962:	89ab      	ldrh	r3, [r5, #12]
 800d964:	065b      	lsls	r3, r3, #25
 800d966:	f53f af2d 	bmi.w	800d7c4 <_svfiprintf_r+0x28>
 800d96a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d96c:	e72c      	b.n	800d7c8 <_svfiprintf_r+0x2c>
 800d96e:	ab03      	add	r3, sp, #12
 800d970:	9300      	str	r3, [sp, #0]
 800d972:	462a      	mov	r2, r5
 800d974:	4b05      	ldr	r3, [pc, #20]	@ (800d98c <_svfiprintf_r+0x1f0>)
 800d976:	a904      	add	r1, sp, #16
 800d978:	4638      	mov	r0, r7
 800d97a:	f7fd f9bb 	bl	800acf4 <_printf_i>
 800d97e:	e7ed      	b.n	800d95c <_svfiprintf_r+0x1c0>
 800d980:	0800f9a9 	.word	0x0800f9a9
 800d984:	0800f9b3 	.word	0x0800f9b3
 800d988:	0800a7c5 	.word	0x0800a7c5
 800d98c:	0800d6e7 	.word	0x0800d6e7
 800d990:	0800f9af 	.word	0x0800f9af

0800d994 <__sfputc_r>:
 800d994:	6893      	ldr	r3, [r2, #8]
 800d996:	3b01      	subs	r3, #1
 800d998:	2b00      	cmp	r3, #0
 800d99a:	b410      	push	{r4}
 800d99c:	6093      	str	r3, [r2, #8]
 800d99e:	da08      	bge.n	800d9b2 <__sfputc_r+0x1e>
 800d9a0:	6994      	ldr	r4, [r2, #24]
 800d9a2:	42a3      	cmp	r3, r4
 800d9a4:	db01      	blt.n	800d9aa <__sfputc_r+0x16>
 800d9a6:	290a      	cmp	r1, #10
 800d9a8:	d103      	bne.n	800d9b2 <__sfputc_r+0x1e>
 800d9aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ae:	f000 ba13 	b.w	800ddd8 <__swbuf_r>
 800d9b2:	6813      	ldr	r3, [r2, #0]
 800d9b4:	1c58      	adds	r0, r3, #1
 800d9b6:	6010      	str	r0, [r2, #0]
 800d9b8:	7019      	strb	r1, [r3, #0]
 800d9ba:	4608      	mov	r0, r1
 800d9bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <__sfputs_r>:
 800d9c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	460f      	mov	r7, r1
 800d9c8:	4614      	mov	r4, r2
 800d9ca:	18d5      	adds	r5, r2, r3
 800d9cc:	42ac      	cmp	r4, r5
 800d9ce:	d101      	bne.n	800d9d4 <__sfputs_r+0x12>
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	e007      	b.n	800d9e4 <__sfputs_r+0x22>
 800d9d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9d8:	463a      	mov	r2, r7
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f7ff ffda 	bl	800d994 <__sfputc_r>
 800d9e0:	1c43      	adds	r3, r0, #1
 800d9e2:	d1f3      	bne.n	800d9cc <__sfputs_r+0xa>
 800d9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d9e8 <_vfiprintf_r>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	460d      	mov	r5, r1
 800d9ee:	b09d      	sub	sp, #116	@ 0x74
 800d9f0:	4614      	mov	r4, r2
 800d9f2:	4698      	mov	r8, r3
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	b118      	cbz	r0, 800da00 <_vfiprintf_r+0x18>
 800d9f8:	6a03      	ldr	r3, [r0, #32]
 800d9fa:	b90b      	cbnz	r3, 800da00 <_vfiprintf_r+0x18>
 800d9fc:	f7fd fd3a 	bl	800b474 <__sinit>
 800da00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da02:	07d9      	lsls	r1, r3, #31
 800da04:	d405      	bmi.n	800da12 <_vfiprintf_r+0x2a>
 800da06:	89ab      	ldrh	r3, [r5, #12]
 800da08:	059a      	lsls	r2, r3, #22
 800da0a:	d402      	bmi.n	800da12 <_vfiprintf_r+0x2a>
 800da0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da0e:	f7fd fe74 	bl	800b6fa <__retarget_lock_acquire_recursive>
 800da12:	89ab      	ldrh	r3, [r5, #12]
 800da14:	071b      	lsls	r3, r3, #28
 800da16:	d501      	bpl.n	800da1c <_vfiprintf_r+0x34>
 800da18:	692b      	ldr	r3, [r5, #16]
 800da1a:	b99b      	cbnz	r3, 800da44 <_vfiprintf_r+0x5c>
 800da1c:	4629      	mov	r1, r5
 800da1e:	4630      	mov	r0, r6
 800da20:	f000 fa18 	bl	800de54 <__swsetup_r>
 800da24:	b170      	cbz	r0, 800da44 <_vfiprintf_r+0x5c>
 800da26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da28:	07dc      	lsls	r4, r3, #31
 800da2a:	d504      	bpl.n	800da36 <_vfiprintf_r+0x4e>
 800da2c:	f04f 30ff 	mov.w	r0, #4294967295
 800da30:	b01d      	add	sp, #116	@ 0x74
 800da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	0598      	lsls	r0, r3, #22
 800da3a:	d4f7      	bmi.n	800da2c <_vfiprintf_r+0x44>
 800da3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da3e:	f7fd fe5d 	bl	800b6fc <__retarget_lock_release_recursive>
 800da42:	e7f3      	b.n	800da2c <_vfiprintf_r+0x44>
 800da44:	2300      	movs	r3, #0
 800da46:	9309      	str	r3, [sp, #36]	@ 0x24
 800da48:	2320      	movs	r3, #32
 800da4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800da4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800da52:	2330      	movs	r3, #48	@ 0x30
 800da54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dc04 <_vfiprintf_r+0x21c>
 800da58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800da5c:	f04f 0901 	mov.w	r9, #1
 800da60:	4623      	mov	r3, r4
 800da62:	469a      	mov	sl, r3
 800da64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da68:	b10a      	cbz	r2, 800da6e <_vfiprintf_r+0x86>
 800da6a:	2a25      	cmp	r2, #37	@ 0x25
 800da6c:	d1f9      	bne.n	800da62 <_vfiprintf_r+0x7a>
 800da6e:	ebba 0b04 	subs.w	fp, sl, r4
 800da72:	d00b      	beq.n	800da8c <_vfiprintf_r+0xa4>
 800da74:	465b      	mov	r3, fp
 800da76:	4622      	mov	r2, r4
 800da78:	4629      	mov	r1, r5
 800da7a:	4630      	mov	r0, r6
 800da7c:	f7ff ffa1 	bl	800d9c2 <__sfputs_r>
 800da80:	3001      	adds	r0, #1
 800da82:	f000 80a7 	beq.w	800dbd4 <_vfiprintf_r+0x1ec>
 800da86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800da88:	445a      	add	r2, fp
 800da8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800da8c:	f89a 3000 	ldrb.w	r3, [sl]
 800da90:	2b00      	cmp	r3, #0
 800da92:	f000 809f 	beq.w	800dbd4 <_vfiprintf_r+0x1ec>
 800da96:	2300      	movs	r3, #0
 800da98:	f04f 32ff 	mov.w	r2, #4294967295
 800da9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800daa0:	f10a 0a01 	add.w	sl, sl, #1
 800daa4:	9304      	str	r3, [sp, #16]
 800daa6:	9307      	str	r3, [sp, #28]
 800daa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800daac:	931a      	str	r3, [sp, #104]	@ 0x68
 800daae:	4654      	mov	r4, sl
 800dab0:	2205      	movs	r2, #5
 800dab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dab6:	4853      	ldr	r0, [pc, #332]	@ (800dc04 <_vfiprintf_r+0x21c>)
 800dab8:	f7f2 fb8a 	bl	80001d0 <memchr>
 800dabc:	9a04      	ldr	r2, [sp, #16]
 800dabe:	b9d8      	cbnz	r0, 800daf8 <_vfiprintf_r+0x110>
 800dac0:	06d1      	lsls	r1, r2, #27
 800dac2:	bf44      	itt	mi
 800dac4:	2320      	movmi	r3, #32
 800dac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800daca:	0713      	lsls	r3, r2, #28
 800dacc:	bf44      	itt	mi
 800dace:	232b      	movmi	r3, #43	@ 0x2b
 800dad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dad4:	f89a 3000 	ldrb.w	r3, [sl]
 800dad8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dada:	d015      	beq.n	800db08 <_vfiprintf_r+0x120>
 800dadc:	9a07      	ldr	r2, [sp, #28]
 800dade:	4654      	mov	r4, sl
 800dae0:	2000      	movs	r0, #0
 800dae2:	f04f 0c0a 	mov.w	ip, #10
 800dae6:	4621      	mov	r1, r4
 800dae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800daec:	3b30      	subs	r3, #48	@ 0x30
 800daee:	2b09      	cmp	r3, #9
 800daf0:	d94b      	bls.n	800db8a <_vfiprintf_r+0x1a2>
 800daf2:	b1b0      	cbz	r0, 800db22 <_vfiprintf_r+0x13a>
 800daf4:	9207      	str	r2, [sp, #28]
 800daf6:	e014      	b.n	800db22 <_vfiprintf_r+0x13a>
 800daf8:	eba0 0308 	sub.w	r3, r0, r8
 800dafc:	fa09 f303 	lsl.w	r3, r9, r3
 800db00:	4313      	orrs	r3, r2
 800db02:	9304      	str	r3, [sp, #16]
 800db04:	46a2      	mov	sl, r4
 800db06:	e7d2      	b.n	800daae <_vfiprintf_r+0xc6>
 800db08:	9b03      	ldr	r3, [sp, #12]
 800db0a:	1d19      	adds	r1, r3, #4
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	9103      	str	r1, [sp, #12]
 800db10:	2b00      	cmp	r3, #0
 800db12:	bfbb      	ittet	lt
 800db14:	425b      	neglt	r3, r3
 800db16:	f042 0202 	orrlt.w	r2, r2, #2
 800db1a:	9307      	strge	r3, [sp, #28]
 800db1c:	9307      	strlt	r3, [sp, #28]
 800db1e:	bfb8      	it	lt
 800db20:	9204      	strlt	r2, [sp, #16]
 800db22:	7823      	ldrb	r3, [r4, #0]
 800db24:	2b2e      	cmp	r3, #46	@ 0x2e
 800db26:	d10a      	bne.n	800db3e <_vfiprintf_r+0x156>
 800db28:	7863      	ldrb	r3, [r4, #1]
 800db2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800db2c:	d132      	bne.n	800db94 <_vfiprintf_r+0x1ac>
 800db2e:	9b03      	ldr	r3, [sp, #12]
 800db30:	1d1a      	adds	r2, r3, #4
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	9203      	str	r2, [sp, #12]
 800db36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800db3a:	3402      	adds	r4, #2
 800db3c:	9305      	str	r3, [sp, #20]
 800db3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dc14 <_vfiprintf_r+0x22c>
 800db42:	7821      	ldrb	r1, [r4, #0]
 800db44:	2203      	movs	r2, #3
 800db46:	4650      	mov	r0, sl
 800db48:	f7f2 fb42 	bl	80001d0 <memchr>
 800db4c:	b138      	cbz	r0, 800db5e <_vfiprintf_r+0x176>
 800db4e:	9b04      	ldr	r3, [sp, #16]
 800db50:	eba0 000a 	sub.w	r0, r0, sl
 800db54:	2240      	movs	r2, #64	@ 0x40
 800db56:	4082      	lsls	r2, r0
 800db58:	4313      	orrs	r3, r2
 800db5a:	3401      	adds	r4, #1
 800db5c:	9304      	str	r3, [sp, #16]
 800db5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db62:	4829      	ldr	r0, [pc, #164]	@ (800dc08 <_vfiprintf_r+0x220>)
 800db64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800db68:	2206      	movs	r2, #6
 800db6a:	f7f2 fb31 	bl	80001d0 <memchr>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d03f      	beq.n	800dbf2 <_vfiprintf_r+0x20a>
 800db72:	4b26      	ldr	r3, [pc, #152]	@ (800dc0c <_vfiprintf_r+0x224>)
 800db74:	bb1b      	cbnz	r3, 800dbbe <_vfiprintf_r+0x1d6>
 800db76:	9b03      	ldr	r3, [sp, #12]
 800db78:	3307      	adds	r3, #7
 800db7a:	f023 0307 	bic.w	r3, r3, #7
 800db7e:	3308      	adds	r3, #8
 800db80:	9303      	str	r3, [sp, #12]
 800db82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db84:	443b      	add	r3, r7
 800db86:	9309      	str	r3, [sp, #36]	@ 0x24
 800db88:	e76a      	b.n	800da60 <_vfiprintf_r+0x78>
 800db8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800db8e:	460c      	mov	r4, r1
 800db90:	2001      	movs	r0, #1
 800db92:	e7a8      	b.n	800dae6 <_vfiprintf_r+0xfe>
 800db94:	2300      	movs	r3, #0
 800db96:	3401      	adds	r4, #1
 800db98:	9305      	str	r3, [sp, #20]
 800db9a:	4619      	mov	r1, r3
 800db9c:	f04f 0c0a 	mov.w	ip, #10
 800dba0:	4620      	mov	r0, r4
 800dba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dba6:	3a30      	subs	r2, #48	@ 0x30
 800dba8:	2a09      	cmp	r2, #9
 800dbaa:	d903      	bls.n	800dbb4 <_vfiprintf_r+0x1cc>
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d0c6      	beq.n	800db3e <_vfiprintf_r+0x156>
 800dbb0:	9105      	str	r1, [sp, #20]
 800dbb2:	e7c4      	b.n	800db3e <_vfiprintf_r+0x156>
 800dbb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbb8:	4604      	mov	r4, r0
 800dbba:	2301      	movs	r3, #1
 800dbbc:	e7f0      	b.n	800dba0 <_vfiprintf_r+0x1b8>
 800dbbe:	ab03      	add	r3, sp, #12
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	4b12      	ldr	r3, [pc, #72]	@ (800dc10 <_vfiprintf_r+0x228>)
 800dbc6:	a904      	add	r1, sp, #16
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7fc fdfb 	bl	800a7c4 <_printf_float>
 800dbce:	4607      	mov	r7, r0
 800dbd0:	1c78      	adds	r0, r7, #1
 800dbd2:	d1d6      	bne.n	800db82 <_vfiprintf_r+0x19a>
 800dbd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dbd6:	07d9      	lsls	r1, r3, #31
 800dbd8:	d405      	bmi.n	800dbe6 <_vfiprintf_r+0x1fe>
 800dbda:	89ab      	ldrh	r3, [r5, #12]
 800dbdc:	059a      	lsls	r2, r3, #22
 800dbde:	d402      	bmi.n	800dbe6 <_vfiprintf_r+0x1fe>
 800dbe0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dbe2:	f7fd fd8b 	bl	800b6fc <__retarget_lock_release_recursive>
 800dbe6:	89ab      	ldrh	r3, [r5, #12]
 800dbe8:	065b      	lsls	r3, r3, #25
 800dbea:	f53f af1f 	bmi.w	800da2c <_vfiprintf_r+0x44>
 800dbee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dbf0:	e71e      	b.n	800da30 <_vfiprintf_r+0x48>
 800dbf2:	ab03      	add	r3, sp, #12
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	462a      	mov	r2, r5
 800dbf8:	4b05      	ldr	r3, [pc, #20]	@ (800dc10 <_vfiprintf_r+0x228>)
 800dbfa:	a904      	add	r1, sp, #16
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7fd f879 	bl	800acf4 <_printf_i>
 800dc02:	e7e4      	b.n	800dbce <_vfiprintf_r+0x1e6>
 800dc04:	0800f9a9 	.word	0x0800f9a9
 800dc08:	0800f9b3 	.word	0x0800f9b3
 800dc0c:	0800a7c5 	.word	0x0800a7c5
 800dc10:	0800d9c3 	.word	0x0800d9c3
 800dc14:	0800f9af 	.word	0x0800f9af

0800dc18 <__sflush_r>:
 800dc18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc20:	0716      	lsls	r6, r2, #28
 800dc22:	4605      	mov	r5, r0
 800dc24:	460c      	mov	r4, r1
 800dc26:	d454      	bmi.n	800dcd2 <__sflush_r+0xba>
 800dc28:	684b      	ldr	r3, [r1, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	dc02      	bgt.n	800dc34 <__sflush_r+0x1c>
 800dc2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	dd48      	ble.n	800dcc6 <__sflush_r+0xae>
 800dc34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc36:	2e00      	cmp	r6, #0
 800dc38:	d045      	beq.n	800dcc6 <__sflush_r+0xae>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dc40:	682f      	ldr	r7, [r5, #0]
 800dc42:	6a21      	ldr	r1, [r4, #32]
 800dc44:	602b      	str	r3, [r5, #0]
 800dc46:	d030      	beq.n	800dcaa <__sflush_r+0x92>
 800dc48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dc4a:	89a3      	ldrh	r3, [r4, #12]
 800dc4c:	0759      	lsls	r1, r3, #29
 800dc4e:	d505      	bpl.n	800dc5c <__sflush_r+0x44>
 800dc50:	6863      	ldr	r3, [r4, #4]
 800dc52:	1ad2      	subs	r2, r2, r3
 800dc54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dc56:	b10b      	cbz	r3, 800dc5c <__sflush_r+0x44>
 800dc58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dc5a:	1ad2      	subs	r2, r2, r3
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dc60:	6a21      	ldr	r1, [r4, #32]
 800dc62:	4628      	mov	r0, r5
 800dc64:	47b0      	blx	r6
 800dc66:	1c43      	adds	r3, r0, #1
 800dc68:	89a3      	ldrh	r3, [r4, #12]
 800dc6a:	d106      	bne.n	800dc7a <__sflush_r+0x62>
 800dc6c:	6829      	ldr	r1, [r5, #0]
 800dc6e:	291d      	cmp	r1, #29
 800dc70:	d82b      	bhi.n	800dcca <__sflush_r+0xb2>
 800dc72:	4a2a      	ldr	r2, [pc, #168]	@ (800dd1c <__sflush_r+0x104>)
 800dc74:	410a      	asrs	r2, r1
 800dc76:	07d6      	lsls	r6, r2, #31
 800dc78:	d427      	bmi.n	800dcca <__sflush_r+0xb2>
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	6062      	str	r2, [r4, #4]
 800dc7e:	04d9      	lsls	r1, r3, #19
 800dc80:	6922      	ldr	r2, [r4, #16]
 800dc82:	6022      	str	r2, [r4, #0]
 800dc84:	d504      	bpl.n	800dc90 <__sflush_r+0x78>
 800dc86:	1c42      	adds	r2, r0, #1
 800dc88:	d101      	bne.n	800dc8e <__sflush_r+0x76>
 800dc8a:	682b      	ldr	r3, [r5, #0]
 800dc8c:	b903      	cbnz	r3, 800dc90 <__sflush_r+0x78>
 800dc8e:	6560      	str	r0, [r4, #84]	@ 0x54
 800dc90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800dc92:	602f      	str	r7, [r5, #0]
 800dc94:	b1b9      	cbz	r1, 800dcc6 <__sflush_r+0xae>
 800dc96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800dc9a:	4299      	cmp	r1, r3
 800dc9c:	d002      	beq.n	800dca4 <__sflush_r+0x8c>
 800dc9e:	4628      	mov	r0, r5
 800dca0:	f7fe fb9a 	bl	800c3d8 <_free_r>
 800dca4:	2300      	movs	r3, #0
 800dca6:	6363      	str	r3, [r4, #52]	@ 0x34
 800dca8:	e00d      	b.n	800dcc6 <__sflush_r+0xae>
 800dcaa:	2301      	movs	r3, #1
 800dcac:	4628      	mov	r0, r5
 800dcae:	47b0      	blx	r6
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	1c50      	adds	r0, r2, #1
 800dcb4:	d1c9      	bne.n	800dc4a <__sflush_r+0x32>
 800dcb6:	682b      	ldr	r3, [r5, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d0c6      	beq.n	800dc4a <__sflush_r+0x32>
 800dcbc:	2b1d      	cmp	r3, #29
 800dcbe:	d001      	beq.n	800dcc4 <__sflush_r+0xac>
 800dcc0:	2b16      	cmp	r3, #22
 800dcc2:	d11e      	bne.n	800dd02 <__sflush_r+0xea>
 800dcc4:	602f      	str	r7, [r5, #0]
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	e022      	b.n	800dd10 <__sflush_r+0xf8>
 800dcca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcce:	b21b      	sxth	r3, r3
 800dcd0:	e01b      	b.n	800dd0a <__sflush_r+0xf2>
 800dcd2:	690f      	ldr	r7, [r1, #16]
 800dcd4:	2f00      	cmp	r7, #0
 800dcd6:	d0f6      	beq.n	800dcc6 <__sflush_r+0xae>
 800dcd8:	0793      	lsls	r3, r2, #30
 800dcda:	680e      	ldr	r6, [r1, #0]
 800dcdc:	bf08      	it	eq
 800dcde:	694b      	ldreq	r3, [r1, #20]
 800dce0:	600f      	str	r7, [r1, #0]
 800dce2:	bf18      	it	ne
 800dce4:	2300      	movne	r3, #0
 800dce6:	eba6 0807 	sub.w	r8, r6, r7
 800dcea:	608b      	str	r3, [r1, #8]
 800dcec:	f1b8 0f00 	cmp.w	r8, #0
 800dcf0:	dde9      	ble.n	800dcc6 <__sflush_r+0xae>
 800dcf2:	6a21      	ldr	r1, [r4, #32]
 800dcf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800dcf6:	4643      	mov	r3, r8
 800dcf8:	463a      	mov	r2, r7
 800dcfa:	4628      	mov	r0, r5
 800dcfc:	47b0      	blx	r6
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	dc08      	bgt.n	800dd14 <__sflush_r+0xfc>
 800dd02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd0a:	81a3      	strh	r3, [r4, #12]
 800dd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd14:	4407      	add	r7, r0
 800dd16:	eba8 0800 	sub.w	r8, r8, r0
 800dd1a:	e7e7      	b.n	800dcec <__sflush_r+0xd4>
 800dd1c:	dfbffffe 	.word	0xdfbffffe

0800dd20 <_fflush_r>:
 800dd20:	b538      	push	{r3, r4, r5, lr}
 800dd22:	690b      	ldr	r3, [r1, #16]
 800dd24:	4605      	mov	r5, r0
 800dd26:	460c      	mov	r4, r1
 800dd28:	b913      	cbnz	r3, 800dd30 <_fflush_r+0x10>
 800dd2a:	2500      	movs	r5, #0
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	bd38      	pop	{r3, r4, r5, pc}
 800dd30:	b118      	cbz	r0, 800dd3a <_fflush_r+0x1a>
 800dd32:	6a03      	ldr	r3, [r0, #32]
 800dd34:	b90b      	cbnz	r3, 800dd3a <_fflush_r+0x1a>
 800dd36:	f7fd fb9d 	bl	800b474 <__sinit>
 800dd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0f3      	beq.n	800dd2a <_fflush_r+0xa>
 800dd42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800dd44:	07d0      	lsls	r0, r2, #31
 800dd46:	d404      	bmi.n	800dd52 <_fflush_r+0x32>
 800dd48:	0599      	lsls	r1, r3, #22
 800dd4a:	d402      	bmi.n	800dd52 <_fflush_r+0x32>
 800dd4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd4e:	f7fd fcd4 	bl	800b6fa <__retarget_lock_acquire_recursive>
 800dd52:	4628      	mov	r0, r5
 800dd54:	4621      	mov	r1, r4
 800dd56:	f7ff ff5f 	bl	800dc18 <__sflush_r>
 800dd5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd5c:	07da      	lsls	r2, r3, #31
 800dd5e:	4605      	mov	r5, r0
 800dd60:	d4e4      	bmi.n	800dd2c <_fflush_r+0xc>
 800dd62:	89a3      	ldrh	r3, [r4, #12]
 800dd64:	059b      	lsls	r3, r3, #22
 800dd66:	d4e1      	bmi.n	800dd2c <_fflush_r+0xc>
 800dd68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd6a:	f7fd fcc7 	bl	800b6fc <__retarget_lock_release_recursive>
 800dd6e:	e7dd      	b.n	800dd2c <_fflush_r+0xc>

0800dd70 <_putc_r>:
 800dd70:	b570      	push	{r4, r5, r6, lr}
 800dd72:	460d      	mov	r5, r1
 800dd74:	4614      	mov	r4, r2
 800dd76:	4606      	mov	r6, r0
 800dd78:	b118      	cbz	r0, 800dd82 <_putc_r+0x12>
 800dd7a:	6a03      	ldr	r3, [r0, #32]
 800dd7c:	b90b      	cbnz	r3, 800dd82 <_putc_r+0x12>
 800dd7e:	f7fd fb79 	bl	800b474 <__sinit>
 800dd82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dd84:	07d8      	lsls	r0, r3, #31
 800dd86:	d405      	bmi.n	800dd94 <_putc_r+0x24>
 800dd88:	89a3      	ldrh	r3, [r4, #12]
 800dd8a:	0599      	lsls	r1, r3, #22
 800dd8c:	d402      	bmi.n	800dd94 <_putc_r+0x24>
 800dd8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dd90:	f7fd fcb3 	bl	800b6fa <__retarget_lock_acquire_recursive>
 800dd94:	68a3      	ldr	r3, [r4, #8]
 800dd96:	3b01      	subs	r3, #1
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	60a3      	str	r3, [r4, #8]
 800dd9c:	da05      	bge.n	800ddaa <_putc_r+0x3a>
 800dd9e:	69a2      	ldr	r2, [r4, #24]
 800dda0:	4293      	cmp	r3, r2
 800dda2:	db12      	blt.n	800ddca <_putc_r+0x5a>
 800dda4:	b2eb      	uxtb	r3, r5
 800dda6:	2b0a      	cmp	r3, #10
 800dda8:	d00f      	beq.n	800ddca <_putc_r+0x5a>
 800ddaa:	6823      	ldr	r3, [r4, #0]
 800ddac:	1c5a      	adds	r2, r3, #1
 800ddae:	6022      	str	r2, [r4, #0]
 800ddb0:	701d      	strb	r5, [r3, #0]
 800ddb2:	b2ed      	uxtb	r5, r5
 800ddb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddb6:	07da      	lsls	r2, r3, #31
 800ddb8:	d405      	bmi.n	800ddc6 <_putc_r+0x56>
 800ddba:	89a3      	ldrh	r3, [r4, #12]
 800ddbc:	059b      	lsls	r3, r3, #22
 800ddbe:	d402      	bmi.n	800ddc6 <_putc_r+0x56>
 800ddc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddc2:	f7fd fc9b 	bl	800b6fc <__retarget_lock_release_recursive>
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	bd70      	pop	{r4, r5, r6, pc}
 800ddca:	4629      	mov	r1, r5
 800ddcc:	4622      	mov	r2, r4
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f000 f802 	bl	800ddd8 <__swbuf_r>
 800ddd4:	4605      	mov	r5, r0
 800ddd6:	e7ed      	b.n	800ddb4 <_putc_r+0x44>

0800ddd8 <__swbuf_r>:
 800ddd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddda:	460e      	mov	r6, r1
 800dddc:	4614      	mov	r4, r2
 800ddde:	4605      	mov	r5, r0
 800dde0:	b118      	cbz	r0, 800ddea <__swbuf_r+0x12>
 800dde2:	6a03      	ldr	r3, [r0, #32]
 800dde4:	b90b      	cbnz	r3, 800ddea <__swbuf_r+0x12>
 800dde6:	f7fd fb45 	bl	800b474 <__sinit>
 800ddea:	69a3      	ldr	r3, [r4, #24]
 800ddec:	60a3      	str	r3, [r4, #8]
 800ddee:	89a3      	ldrh	r3, [r4, #12]
 800ddf0:	071a      	lsls	r2, r3, #28
 800ddf2:	d501      	bpl.n	800ddf8 <__swbuf_r+0x20>
 800ddf4:	6923      	ldr	r3, [r4, #16]
 800ddf6:	b943      	cbnz	r3, 800de0a <__swbuf_r+0x32>
 800ddf8:	4621      	mov	r1, r4
 800ddfa:	4628      	mov	r0, r5
 800ddfc:	f000 f82a 	bl	800de54 <__swsetup_r>
 800de00:	b118      	cbz	r0, 800de0a <__swbuf_r+0x32>
 800de02:	f04f 37ff 	mov.w	r7, #4294967295
 800de06:	4638      	mov	r0, r7
 800de08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de0a:	6823      	ldr	r3, [r4, #0]
 800de0c:	6922      	ldr	r2, [r4, #16]
 800de0e:	1a98      	subs	r0, r3, r2
 800de10:	6963      	ldr	r3, [r4, #20]
 800de12:	b2f6      	uxtb	r6, r6
 800de14:	4283      	cmp	r3, r0
 800de16:	4637      	mov	r7, r6
 800de18:	dc05      	bgt.n	800de26 <__swbuf_r+0x4e>
 800de1a:	4621      	mov	r1, r4
 800de1c:	4628      	mov	r0, r5
 800de1e:	f7ff ff7f 	bl	800dd20 <_fflush_r>
 800de22:	2800      	cmp	r0, #0
 800de24:	d1ed      	bne.n	800de02 <__swbuf_r+0x2a>
 800de26:	68a3      	ldr	r3, [r4, #8]
 800de28:	3b01      	subs	r3, #1
 800de2a:	60a3      	str	r3, [r4, #8]
 800de2c:	6823      	ldr	r3, [r4, #0]
 800de2e:	1c5a      	adds	r2, r3, #1
 800de30:	6022      	str	r2, [r4, #0]
 800de32:	701e      	strb	r6, [r3, #0]
 800de34:	6962      	ldr	r2, [r4, #20]
 800de36:	1c43      	adds	r3, r0, #1
 800de38:	429a      	cmp	r2, r3
 800de3a:	d004      	beq.n	800de46 <__swbuf_r+0x6e>
 800de3c:	89a3      	ldrh	r3, [r4, #12]
 800de3e:	07db      	lsls	r3, r3, #31
 800de40:	d5e1      	bpl.n	800de06 <__swbuf_r+0x2e>
 800de42:	2e0a      	cmp	r6, #10
 800de44:	d1df      	bne.n	800de06 <__swbuf_r+0x2e>
 800de46:	4621      	mov	r1, r4
 800de48:	4628      	mov	r0, r5
 800de4a:	f7ff ff69 	bl	800dd20 <_fflush_r>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d0d9      	beq.n	800de06 <__swbuf_r+0x2e>
 800de52:	e7d6      	b.n	800de02 <__swbuf_r+0x2a>

0800de54 <__swsetup_r>:
 800de54:	b538      	push	{r3, r4, r5, lr}
 800de56:	4b29      	ldr	r3, [pc, #164]	@ (800defc <__swsetup_r+0xa8>)
 800de58:	4605      	mov	r5, r0
 800de5a:	6818      	ldr	r0, [r3, #0]
 800de5c:	460c      	mov	r4, r1
 800de5e:	b118      	cbz	r0, 800de68 <__swsetup_r+0x14>
 800de60:	6a03      	ldr	r3, [r0, #32]
 800de62:	b90b      	cbnz	r3, 800de68 <__swsetup_r+0x14>
 800de64:	f7fd fb06 	bl	800b474 <__sinit>
 800de68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de6c:	0719      	lsls	r1, r3, #28
 800de6e:	d422      	bmi.n	800deb6 <__swsetup_r+0x62>
 800de70:	06da      	lsls	r2, r3, #27
 800de72:	d407      	bmi.n	800de84 <__swsetup_r+0x30>
 800de74:	2209      	movs	r2, #9
 800de76:	602a      	str	r2, [r5, #0]
 800de78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de7c:	81a3      	strh	r3, [r4, #12]
 800de7e:	f04f 30ff 	mov.w	r0, #4294967295
 800de82:	e033      	b.n	800deec <__swsetup_r+0x98>
 800de84:	0758      	lsls	r0, r3, #29
 800de86:	d512      	bpl.n	800deae <__swsetup_r+0x5a>
 800de88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800de8a:	b141      	cbz	r1, 800de9e <__swsetup_r+0x4a>
 800de8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de90:	4299      	cmp	r1, r3
 800de92:	d002      	beq.n	800de9a <__swsetup_r+0x46>
 800de94:	4628      	mov	r0, r5
 800de96:	f7fe fa9f 	bl	800c3d8 <_free_r>
 800de9a:	2300      	movs	r3, #0
 800de9c:	6363      	str	r3, [r4, #52]	@ 0x34
 800de9e:	89a3      	ldrh	r3, [r4, #12]
 800dea0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800dea4:	81a3      	strh	r3, [r4, #12]
 800dea6:	2300      	movs	r3, #0
 800dea8:	6063      	str	r3, [r4, #4]
 800deaa:	6923      	ldr	r3, [r4, #16]
 800deac:	6023      	str	r3, [r4, #0]
 800deae:	89a3      	ldrh	r3, [r4, #12]
 800deb0:	f043 0308 	orr.w	r3, r3, #8
 800deb4:	81a3      	strh	r3, [r4, #12]
 800deb6:	6923      	ldr	r3, [r4, #16]
 800deb8:	b94b      	cbnz	r3, 800dece <__swsetup_r+0x7a>
 800deba:	89a3      	ldrh	r3, [r4, #12]
 800debc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dec4:	d003      	beq.n	800dece <__swsetup_r+0x7a>
 800dec6:	4621      	mov	r1, r4
 800dec8:	4628      	mov	r0, r5
 800deca:	f000 f8db 	bl	800e084 <__smakebuf_r>
 800dece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ded2:	f013 0201 	ands.w	r2, r3, #1
 800ded6:	d00a      	beq.n	800deee <__swsetup_r+0x9a>
 800ded8:	2200      	movs	r2, #0
 800deda:	60a2      	str	r2, [r4, #8]
 800dedc:	6962      	ldr	r2, [r4, #20]
 800dede:	4252      	negs	r2, r2
 800dee0:	61a2      	str	r2, [r4, #24]
 800dee2:	6922      	ldr	r2, [r4, #16]
 800dee4:	b942      	cbnz	r2, 800def8 <__swsetup_r+0xa4>
 800dee6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800deea:	d1c5      	bne.n	800de78 <__swsetup_r+0x24>
 800deec:	bd38      	pop	{r3, r4, r5, pc}
 800deee:	0799      	lsls	r1, r3, #30
 800def0:	bf58      	it	pl
 800def2:	6962      	ldrpl	r2, [r4, #20]
 800def4:	60a2      	str	r2, [r4, #8]
 800def6:	e7f4      	b.n	800dee2 <__swsetup_r+0x8e>
 800def8:	2000      	movs	r0, #0
 800defa:	e7f7      	b.n	800deec <__swsetup_r+0x98>
 800defc:	200001b0 	.word	0x200001b0

0800df00 <memmove>:
 800df00:	4288      	cmp	r0, r1
 800df02:	b510      	push	{r4, lr}
 800df04:	eb01 0402 	add.w	r4, r1, r2
 800df08:	d902      	bls.n	800df10 <memmove+0x10>
 800df0a:	4284      	cmp	r4, r0
 800df0c:	4623      	mov	r3, r4
 800df0e:	d807      	bhi.n	800df20 <memmove+0x20>
 800df10:	1e43      	subs	r3, r0, #1
 800df12:	42a1      	cmp	r1, r4
 800df14:	d008      	beq.n	800df28 <memmove+0x28>
 800df16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df1e:	e7f8      	b.n	800df12 <memmove+0x12>
 800df20:	4402      	add	r2, r0
 800df22:	4601      	mov	r1, r0
 800df24:	428a      	cmp	r2, r1
 800df26:	d100      	bne.n	800df2a <memmove+0x2a>
 800df28:	bd10      	pop	{r4, pc}
 800df2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df32:	e7f7      	b.n	800df24 <memmove+0x24>

0800df34 <_sbrk_r>:
 800df34:	b538      	push	{r3, r4, r5, lr}
 800df36:	4d06      	ldr	r5, [pc, #24]	@ (800df50 <_sbrk_r+0x1c>)
 800df38:	2300      	movs	r3, #0
 800df3a:	4604      	mov	r4, r0
 800df3c:	4608      	mov	r0, r1
 800df3e:	602b      	str	r3, [r5, #0]
 800df40:	f7f5 fa78 	bl	8003434 <_sbrk>
 800df44:	1c43      	adds	r3, r0, #1
 800df46:	d102      	bne.n	800df4e <_sbrk_r+0x1a>
 800df48:	682b      	ldr	r3, [r5, #0]
 800df4a:	b103      	cbz	r3, 800df4e <_sbrk_r+0x1a>
 800df4c:	6023      	str	r3, [r4, #0]
 800df4e:	bd38      	pop	{r3, r4, r5, pc}
 800df50:	20000814 	.word	0x20000814

0800df54 <__assert_func>:
 800df54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df56:	4614      	mov	r4, r2
 800df58:	461a      	mov	r2, r3
 800df5a:	4b09      	ldr	r3, [pc, #36]	@ (800df80 <__assert_func+0x2c>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4605      	mov	r5, r0
 800df60:	68d8      	ldr	r0, [r3, #12]
 800df62:	b954      	cbnz	r4, 800df7a <__assert_func+0x26>
 800df64:	4b07      	ldr	r3, [pc, #28]	@ (800df84 <__assert_func+0x30>)
 800df66:	461c      	mov	r4, r3
 800df68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df6c:	9100      	str	r1, [sp, #0]
 800df6e:	462b      	mov	r3, r5
 800df70:	4905      	ldr	r1, [pc, #20]	@ (800df88 <__assert_func+0x34>)
 800df72:	f000 f84f 	bl	800e014 <fiprintf>
 800df76:	f000 f8e3 	bl	800e140 <abort>
 800df7a:	4b04      	ldr	r3, [pc, #16]	@ (800df8c <__assert_func+0x38>)
 800df7c:	e7f4      	b.n	800df68 <__assert_func+0x14>
 800df7e:	bf00      	nop
 800df80:	200001b0 	.word	0x200001b0
 800df84:	0800f9f5 	.word	0x0800f9f5
 800df88:	0800f9c7 	.word	0x0800f9c7
 800df8c:	0800f9ba 	.word	0x0800f9ba

0800df90 <_calloc_r>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	fba1 5402 	umull	r5, r4, r1, r2
 800df96:	b93c      	cbnz	r4, 800dfa8 <_calloc_r+0x18>
 800df98:	4629      	mov	r1, r5
 800df9a:	f7fe fdcb 	bl	800cb34 <_malloc_r>
 800df9e:	4606      	mov	r6, r0
 800dfa0:	b928      	cbnz	r0, 800dfae <_calloc_r+0x1e>
 800dfa2:	2600      	movs	r6, #0
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	bd70      	pop	{r4, r5, r6, pc}
 800dfa8:	220c      	movs	r2, #12
 800dfaa:	6002      	str	r2, [r0, #0]
 800dfac:	e7f9      	b.n	800dfa2 <_calloc_r+0x12>
 800dfae:	462a      	mov	r2, r5
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	f7fd fb12 	bl	800b5da <memset>
 800dfb6:	e7f5      	b.n	800dfa4 <_calloc_r+0x14>

0800dfb8 <_realloc_r>:
 800dfb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfbc:	4680      	mov	r8, r0
 800dfbe:	4615      	mov	r5, r2
 800dfc0:	460c      	mov	r4, r1
 800dfc2:	b921      	cbnz	r1, 800dfce <_realloc_r+0x16>
 800dfc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc8:	4611      	mov	r1, r2
 800dfca:	f7fe bdb3 	b.w	800cb34 <_malloc_r>
 800dfce:	b92a      	cbnz	r2, 800dfdc <_realloc_r+0x24>
 800dfd0:	f7fe fa02 	bl	800c3d8 <_free_r>
 800dfd4:	2400      	movs	r4, #0
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfdc:	f000 f8b7 	bl	800e14e <_malloc_usable_size_r>
 800dfe0:	4285      	cmp	r5, r0
 800dfe2:	4606      	mov	r6, r0
 800dfe4:	d802      	bhi.n	800dfec <_realloc_r+0x34>
 800dfe6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dfea:	d8f4      	bhi.n	800dfd6 <_realloc_r+0x1e>
 800dfec:	4629      	mov	r1, r5
 800dfee:	4640      	mov	r0, r8
 800dff0:	f7fe fda0 	bl	800cb34 <_malloc_r>
 800dff4:	4607      	mov	r7, r0
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d0ec      	beq.n	800dfd4 <_realloc_r+0x1c>
 800dffa:	42b5      	cmp	r5, r6
 800dffc:	462a      	mov	r2, r5
 800dffe:	4621      	mov	r1, r4
 800e000:	bf28      	it	cs
 800e002:	4632      	movcs	r2, r6
 800e004:	f7fd fb7b 	bl	800b6fe <memcpy>
 800e008:	4621      	mov	r1, r4
 800e00a:	4640      	mov	r0, r8
 800e00c:	f7fe f9e4 	bl	800c3d8 <_free_r>
 800e010:	463c      	mov	r4, r7
 800e012:	e7e0      	b.n	800dfd6 <_realloc_r+0x1e>

0800e014 <fiprintf>:
 800e014:	b40e      	push	{r1, r2, r3}
 800e016:	b503      	push	{r0, r1, lr}
 800e018:	4601      	mov	r1, r0
 800e01a:	ab03      	add	r3, sp, #12
 800e01c:	4805      	ldr	r0, [pc, #20]	@ (800e034 <fiprintf+0x20>)
 800e01e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e022:	6800      	ldr	r0, [r0, #0]
 800e024:	9301      	str	r3, [sp, #4]
 800e026:	f7ff fcdf 	bl	800d9e8 <_vfiprintf_r>
 800e02a:	b002      	add	sp, #8
 800e02c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e030:	b003      	add	sp, #12
 800e032:	4770      	bx	lr
 800e034:	200001b0 	.word	0x200001b0

0800e038 <__swhatbuf_r>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	460c      	mov	r4, r1
 800e03c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e040:	2900      	cmp	r1, #0
 800e042:	b096      	sub	sp, #88	@ 0x58
 800e044:	4615      	mov	r5, r2
 800e046:	461e      	mov	r6, r3
 800e048:	da0d      	bge.n	800e066 <__swhatbuf_r+0x2e>
 800e04a:	89a3      	ldrh	r3, [r4, #12]
 800e04c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e050:	f04f 0100 	mov.w	r1, #0
 800e054:	bf14      	ite	ne
 800e056:	2340      	movne	r3, #64	@ 0x40
 800e058:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e05c:	2000      	movs	r0, #0
 800e05e:	6031      	str	r1, [r6, #0]
 800e060:	602b      	str	r3, [r5, #0]
 800e062:	b016      	add	sp, #88	@ 0x58
 800e064:	bd70      	pop	{r4, r5, r6, pc}
 800e066:	466a      	mov	r2, sp
 800e068:	f000 f848 	bl	800e0fc <_fstat_r>
 800e06c:	2800      	cmp	r0, #0
 800e06e:	dbec      	blt.n	800e04a <__swhatbuf_r+0x12>
 800e070:	9901      	ldr	r1, [sp, #4]
 800e072:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e076:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e07a:	4259      	negs	r1, r3
 800e07c:	4159      	adcs	r1, r3
 800e07e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e082:	e7eb      	b.n	800e05c <__swhatbuf_r+0x24>

0800e084 <__smakebuf_r>:
 800e084:	898b      	ldrh	r3, [r1, #12]
 800e086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e088:	079d      	lsls	r5, r3, #30
 800e08a:	4606      	mov	r6, r0
 800e08c:	460c      	mov	r4, r1
 800e08e:	d507      	bpl.n	800e0a0 <__smakebuf_r+0x1c>
 800e090:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e094:	6023      	str	r3, [r4, #0]
 800e096:	6123      	str	r3, [r4, #16]
 800e098:	2301      	movs	r3, #1
 800e09a:	6163      	str	r3, [r4, #20]
 800e09c:	b003      	add	sp, #12
 800e09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0a0:	ab01      	add	r3, sp, #4
 800e0a2:	466a      	mov	r2, sp
 800e0a4:	f7ff ffc8 	bl	800e038 <__swhatbuf_r>
 800e0a8:	9f00      	ldr	r7, [sp, #0]
 800e0aa:	4605      	mov	r5, r0
 800e0ac:	4639      	mov	r1, r7
 800e0ae:	4630      	mov	r0, r6
 800e0b0:	f7fe fd40 	bl	800cb34 <_malloc_r>
 800e0b4:	b948      	cbnz	r0, 800e0ca <__smakebuf_r+0x46>
 800e0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0ba:	059a      	lsls	r2, r3, #22
 800e0bc:	d4ee      	bmi.n	800e09c <__smakebuf_r+0x18>
 800e0be:	f023 0303 	bic.w	r3, r3, #3
 800e0c2:	f043 0302 	orr.w	r3, r3, #2
 800e0c6:	81a3      	strh	r3, [r4, #12]
 800e0c8:	e7e2      	b.n	800e090 <__smakebuf_r+0xc>
 800e0ca:	89a3      	ldrh	r3, [r4, #12]
 800e0cc:	6020      	str	r0, [r4, #0]
 800e0ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0d2:	81a3      	strh	r3, [r4, #12]
 800e0d4:	9b01      	ldr	r3, [sp, #4]
 800e0d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e0da:	b15b      	cbz	r3, 800e0f4 <__smakebuf_r+0x70>
 800e0dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	f000 f81d 	bl	800e120 <_isatty_r>
 800e0e6:	b128      	cbz	r0, 800e0f4 <__smakebuf_r+0x70>
 800e0e8:	89a3      	ldrh	r3, [r4, #12]
 800e0ea:	f023 0303 	bic.w	r3, r3, #3
 800e0ee:	f043 0301 	orr.w	r3, r3, #1
 800e0f2:	81a3      	strh	r3, [r4, #12]
 800e0f4:	89a3      	ldrh	r3, [r4, #12]
 800e0f6:	431d      	orrs	r5, r3
 800e0f8:	81a5      	strh	r5, [r4, #12]
 800e0fa:	e7cf      	b.n	800e09c <__smakebuf_r+0x18>

0800e0fc <_fstat_r>:
 800e0fc:	b538      	push	{r3, r4, r5, lr}
 800e0fe:	4d07      	ldr	r5, [pc, #28]	@ (800e11c <_fstat_r+0x20>)
 800e100:	2300      	movs	r3, #0
 800e102:	4604      	mov	r4, r0
 800e104:	4608      	mov	r0, r1
 800e106:	4611      	mov	r1, r2
 800e108:	602b      	str	r3, [r5, #0]
 800e10a:	f7f5 f96b 	bl	80033e4 <_fstat>
 800e10e:	1c43      	adds	r3, r0, #1
 800e110:	d102      	bne.n	800e118 <_fstat_r+0x1c>
 800e112:	682b      	ldr	r3, [r5, #0]
 800e114:	b103      	cbz	r3, 800e118 <_fstat_r+0x1c>
 800e116:	6023      	str	r3, [r4, #0]
 800e118:	bd38      	pop	{r3, r4, r5, pc}
 800e11a:	bf00      	nop
 800e11c:	20000814 	.word	0x20000814

0800e120 <_isatty_r>:
 800e120:	b538      	push	{r3, r4, r5, lr}
 800e122:	4d06      	ldr	r5, [pc, #24]	@ (800e13c <_isatty_r+0x1c>)
 800e124:	2300      	movs	r3, #0
 800e126:	4604      	mov	r4, r0
 800e128:	4608      	mov	r0, r1
 800e12a:	602b      	str	r3, [r5, #0]
 800e12c:	f7f5 f96a 	bl	8003404 <_isatty>
 800e130:	1c43      	adds	r3, r0, #1
 800e132:	d102      	bne.n	800e13a <_isatty_r+0x1a>
 800e134:	682b      	ldr	r3, [r5, #0]
 800e136:	b103      	cbz	r3, 800e13a <_isatty_r+0x1a>
 800e138:	6023      	str	r3, [r4, #0]
 800e13a:	bd38      	pop	{r3, r4, r5, pc}
 800e13c:	20000814 	.word	0x20000814

0800e140 <abort>:
 800e140:	b508      	push	{r3, lr}
 800e142:	2006      	movs	r0, #6
 800e144:	f000 f834 	bl	800e1b0 <raise>
 800e148:	2001      	movs	r0, #1
 800e14a:	f7f5 f8fb 	bl	8003344 <_exit>

0800e14e <_malloc_usable_size_r>:
 800e14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e152:	1f18      	subs	r0, r3, #4
 800e154:	2b00      	cmp	r3, #0
 800e156:	bfbc      	itt	lt
 800e158:	580b      	ldrlt	r3, [r1, r0]
 800e15a:	18c0      	addlt	r0, r0, r3
 800e15c:	4770      	bx	lr

0800e15e <_raise_r>:
 800e15e:	291f      	cmp	r1, #31
 800e160:	b538      	push	{r3, r4, r5, lr}
 800e162:	4605      	mov	r5, r0
 800e164:	460c      	mov	r4, r1
 800e166:	d904      	bls.n	800e172 <_raise_r+0x14>
 800e168:	2316      	movs	r3, #22
 800e16a:	6003      	str	r3, [r0, #0]
 800e16c:	f04f 30ff 	mov.w	r0, #4294967295
 800e170:	bd38      	pop	{r3, r4, r5, pc}
 800e172:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e174:	b112      	cbz	r2, 800e17c <_raise_r+0x1e>
 800e176:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e17a:	b94b      	cbnz	r3, 800e190 <_raise_r+0x32>
 800e17c:	4628      	mov	r0, r5
 800e17e:	f000 f831 	bl	800e1e4 <_getpid_r>
 800e182:	4622      	mov	r2, r4
 800e184:	4601      	mov	r1, r0
 800e186:	4628      	mov	r0, r5
 800e188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e18c:	f000 b818 	b.w	800e1c0 <_kill_r>
 800e190:	2b01      	cmp	r3, #1
 800e192:	d00a      	beq.n	800e1aa <_raise_r+0x4c>
 800e194:	1c59      	adds	r1, r3, #1
 800e196:	d103      	bne.n	800e1a0 <_raise_r+0x42>
 800e198:	2316      	movs	r3, #22
 800e19a:	6003      	str	r3, [r0, #0]
 800e19c:	2001      	movs	r0, #1
 800e19e:	e7e7      	b.n	800e170 <_raise_r+0x12>
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	4798      	blx	r3
 800e1aa:	2000      	movs	r0, #0
 800e1ac:	e7e0      	b.n	800e170 <_raise_r+0x12>
	...

0800e1b0 <raise>:
 800e1b0:	4b02      	ldr	r3, [pc, #8]	@ (800e1bc <raise+0xc>)
 800e1b2:	4601      	mov	r1, r0
 800e1b4:	6818      	ldr	r0, [r3, #0]
 800e1b6:	f7ff bfd2 	b.w	800e15e <_raise_r>
 800e1ba:	bf00      	nop
 800e1bc:	200001b0 	.word	0x200001b0

0800e1c0 <_kill_r>:
 800e1c0:	b538      	push	{r3, r4, r5, lr}
 800e1c2:	4d07      	ldr	r5, [pc, #28]	@ (800e1e0 <_kill_r+0x20>)
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	4608      	mov	r0, r1
 800e1ca:	4611      	mov	r1, r2
 800e1cc:	602b      	str	r3, [r5, #0]
 800e1ce:	f7f5 f8a9 	bl	8003324 <_kill>
 800e1d2:	1c43      	adds	r3, r0, #1
 800e1d4:	d102      	bne.n	800e1dc <_kill_r+0x1c>
 800e1d6:	682b      	ldr	r3, [r5, #0]
 800e1d8:	b103      	cbz	r3, 800e1dc <_kill_r+0x1c>
 800e1da:	6023      	str	r3, [r4, #0]
 800e1dc:	bd38      	pop	{r3, r4, r5, pc}
 800e1de:	bf00      	nop
 800e1e0:	20000814 	.word	0x20000814

0800e1e4 <_getpid_r>:
 800e1e4:	f7f5 b896 	b.w	8003314 <_getpid>

0800e1e8 <sqrt>:
 800e1e8:	b538      	push	{r3, r4, r5, lr}
 800e1ea:	ed2d 8b02 	vpush	{d8}
 800e1ee:	ec55 4b10 	vmov	r4, r5, d0
 800e1f2:	f000 f879 	bl	800e2e8 <__ieee754_sqrt>
 800e1f6:	4622      	mov	r2, r4
 800e1f8:	462b      	mov	r3, r5
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	4629      	mov	r1, r5
 800e1fe:	eeb0 8a40 	vmov.f32	s16, s0
 800e202:	eef0 8a60 	vmov.f32	s17, s1
 800e206:	f7f2 fc91 	bl	8000b2c <__aeabi_dcmpun>
 800e20a:	b990      	cbnz	r0, 800e232 <sqrt+0x4a>
 800e20c:	2200      	movs	r2, #0
 800e20e:	2300      	movs	r3, #0
 800e210:	4620      	mov	r0, r4
 800e212:	4629      	mov	r1, r5
 800e214:	f7f2 fc62 	bl	8000adc <__aeabi_dcmplt>
 800e218:	b158      	cbz	r0, 800e232 <sqrt+0x4a>
 800e21a:	f7fd fa43 	bl	800b6a4 <__errno>
 800e21e:	2321      	movs	r3, #33	@ 0x21
 800e220:	6003      	str	r3, [r0, #0]
 800e222:	2200      	movs	r2, #0
 800e224:	2300      	movs	r3, #0
 800e226:	4610      	mov	r0, r2
 800e228:	4619      	mov	r1, r3
 800e22a:	f7f2 fb0f 	bl	800084c <__aeabi_ddiv>
 800e22e:	ec41 0b18 	vmov	d8, r0, r1
 800e232:	eeb0 0a48 	vmov.f32	s0, s16
 800e236:	eef0 0a68 	vmov.f32	s1, s17
 800e23a:	ecbd 8b02 	vpop	{d8}
 800e23e:	bd38      	pop	{r3, r4, r5, pc}

0800e240 <cos>:
 800e240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e242:	ec53 2b10 	vmov	r2, r3, d0
 800e246:	4826      	ldr	r0, [pc, #152]	@ (800e2e0 <cos+0xa0>)
 800e248:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e24c:	4281      	cmp	r1, r0
 800e24e:	d806      	bhi.n	800e25e <cos+0x1e>
 800e250:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e2d8 <cos+0x98>
 800e254:	b005      	add	sp, #20
 800e256:	f85d eb04 	ldr.w	lr, [sp], #4
 800e25a:	f000 b921 	b.w	800e4a0 <__kernel_cos>
 800e25e:	4821      	ldr	r0, [pc, #132]	@ (800e2e4 <cos+0xa4>)
 800e260:	4281      	cmp	r1, r0
 800e262:	d908      	bls.n	800e276 <cos+0x36>
 800e264:	4610      	mov	r0, r2
 800e266:	4619      	mov	r1, r3
 800e268:	f7f2 f80e 	bl	8000288 <__aeabi_dsub>
 800e26c:	ec41 0b10 	vmov	d0, r0, r1
 800e270:	b005      	add	sp, #20
 800e272:	f85d fb04 	ldr.w	pc, [sp], #4
 800e276:	4668      	mov	r0, sp
 800e278:	f000 fa96 	bl	800e7a8 <__ieee754_rem_pio2>
 800e27c:	f000 0003 	and.w	r0, r0, #3
 800e280:	2801      	cmp	r0, #1
 800e282:	d00b      	beq.n	800e29c <cos+0x5c>
 800e284:	2802      	cmp	r0, #2
 800e286:	d015      	beq.n	800e2b4 <cos+0x74>
 800e288:	b9d8      	cbnz	r0, 800e2c2 <cos+0x82>
 800e28a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e28e:	ed9d 0b00 	vldr	d0, [sp]
 800e292:	f000 f905 	bl	800e4a0 <__kernel_cos>
 800e296:	ec51 0b10 	vmov	r0, r1, d0
 800e29a:	e7e7      	b.n	800e26c <cos+0x2c>
 800e29c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2a0:	ed9d 0b00 	vldr	d0, [sp]
 800e2a4:	f000 f9c4 	bl	800e630 <__kernel_sin>
 800e2a8:	ec53 2b10 	vmov	r2, r3, d0
 800e2ac:	4610      	mov	r0, r2
 800e2ae:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e2b2:	e7db      	b.n	800e26c <cos+0x2c>
 800e2b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2b8:	ed9d 0b00 	vldr	d0, [sp]
 800e2bc:	f000 f8f0 	bl	800e4a0 <__kernel_cos>
 800e2c0:	e7f2      	b.n	800e2a8 <cos+0x68>
 800e2c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e2c6:	ed9d 0b00 	vldr	d0, [sp]
 800e2ca:	2001      	movs	r0, #1
 800e2cc:	f000 f9b0 	bl	800e630 <__kernel_sin>
 800e2d0:	e7e1      	b.n	800e296 <cos+0x56>
 800e2d2:	bf00      	nop
 800e2d4:	f3af 8000 	nop.w
	...
 800e2e0:	3fe921fb 	.word	0x3fe921fb
 800e2e4:	7fefffff 	.word	0x7fefffff

0800e2e8 <__ieee754_sqrt>:
 800e2e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	4a68      	ldr	r2, [pc, #416]	@ (800e490 <__ieee754_sqrt+0x1a8>)
 800e2ee:	ec55 4b10 	vmov	r4, r5, d0
 800e2f2:	43aa      	bics	r2, r5
 800e2f4:	462b      	mov	r3, r5
 800e2f6:	4621      	mov	r1, r4
 800e2f8:	d110      	bne.n	800e31c <__ieee754_sqrt+0x34>
 800e2fa:	4622      	mov	r2, r4
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	4629      	mov	r1, r5
 800e300:	f7f2 f97a 	bl	80005f8 <__aeabi_dmul>
 800e304:	4602      	mov	r2, r0
 800e306:	460b      	mov	r3, r1
 800e308:	4620      	mov	r0, r4
 800e30a:	4629      	mov	r1, r5
 800e30c:	f7f1 ffbe 	bl	800028c <__adddf3>
 800e310:	4604      	mov	r4, r0
 800e312:	460d      	mov	r5, r1
 800e314:	ec45 4b10 	vmov	d0, r4, r5
 800e318:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31c:	2d00      	cmp	r5, #0
 800e31e:	dc0e      	bgt.n	800e33e <__ieee754_sqrt+0x56>
 800e320:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e324:	4322      	orrs	r2, r4
 800e326:	d0f5      	beq.n	800e314 <__ieee754_sqrt+0x2c>
 800e328:	b19d      	cbz	r5, 800e352 <__ieee754_sqrt+0x6a>
 800e32a:	4622      	mov	r2, r4
 800e32c:	4620      	mov	r0, r4
 800e32e:	4629      	mov	r1, r5
 800e330:	f7f1 ffaa 	bl	8000288 <__aeabi_dsub>
 800e334:	4602      	mov	r2, r0
 800e336:	460b      	mov	r3, r1
 800e338:	f7f2 fa88 	bl	800084c <__aeabi_ddiv>
 800e33c:	e7e8      	b.n	800e310 <__ieee754_sqrt+0x28>
 800e33e:	152a      	asrs	r2, r5, #20
 800e340:	d115      	bne.n	800e36e <__ieee754_sqrt+0x86>
 800e342:	2000      	movs	r0, #0
 800e344:	e009      	b.n	800e35a <__ieee754_sqrt+0x72>
 800e346:	0acb      	lsrs	r3, r1, #11
 800e348:	3a15      	subs	r2, #21
 800e34a:	0549      	lsls	r1, r1, #21
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d0fa      	beq.n	800e346 <__ieee754_sqrt+0x5e>
 800e350:	e7f7      	b.n	800e342 <__ieee754_sqrt+0x5a>
 800e352:	462a      	mov	r2, r5
 800e354:	e7fa      	b.n	800e34c <__ieee754_sqrt+0x64>
 800e356:	005b      	lsls	r3, r3, #1
 800e358:	3001      	adds	r0, #1
 800e35a:	02dc      	lsls	r4, r3, #11
 800e35c:	d5fb      	bpl.n	800e356 <__ieee754_sqrt+0x6e>
 800e35e:	1e44      	subs	r4, r0, #1
 800e360:	1b12      	subs	r2, r2, r4
 800e362:	f1c0 0420 	rsb	r4, r0, #32
 800e366:	fa21 f404 	lsr.w	r4, r1, r4
 800e36a:	4323      	orrs	r3, r4
 800e36c:	4081      	lsls	r1, r0
 800e36e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e372:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e376:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e37a:	07d2      	lsls	r2, r2, #31
 800e37c:	bf5c      	itt	pl
 800e37e:	005b      	lslpl	r3, r3, #1
 800e380:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e384:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e388:	bf58      	it	pl
 800e38a:	0049      	lslpl	r1, r1, #1
 800e38c:	2600      	movs	r6, #0
 800e38e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e392:	106d      	asrs	r5, r5, #1
 800e394:	0049      	lsls	r1, r1, #1
 800e396:	2016      	movs	r0, #22
 800e398:	4632      	mov	r2, r6
 800e39a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e39e:	1917      	adds	r7, r2, r4
 800e3a0:	429f      	cmp	r7, r3
 800e3a2:	bfde      	ittt	le
 800e3a4:	193a      	addle	r2, r7, r4
 800e3a6:	1bdb      	suble	r3, r3, r7
 800e3a8:	1936      	addle	r6, r6, r4
 800e3aa:	0fcf      	lsrs	r7, r1, #31
 800e3ac:	3801      	subs	r0, #1
 800e3ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e3b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e3b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e3ba:	d1f0      	bne.n	800e39e <__ieee754_sqrt+0xb6>
 800e3bc:	4604      	mov	r4, r0
 800e3be:	2720      	movs	r7, #32
 800e3c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	eb00 0e0c 	add.w	lr, r0, ip
 800e3ca:	db02      	blt.n	800e3d2 <__ieee754_sqrt+0xea>
 800e3cc:	d113      	bne.n	800e3f6 <__ieee754_sqrt+0x10e>
 800e3ce:	458e      	cmp	lr, r1
 800e3d0:	d811      	bhi.n	800e3f6 <__ieee754_sqrt+0x10e>
 800e3d2:	f1be 0f00 	cmp.w	lr, #0
 800e3d6:	eb0e 000c 	add.w	r0, lr, ip
 800e3da:	da42      	bge.n	800e462 <__ieee754_sqrt+0x17a>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	db40      	blt.n	800e462 <__ieee754_sqrt+0x17a>
 800e3e0:	f102 0801 	add.w	r8, r2, #1
 800e3e4:	1a9b      	subs	r3, r3, r2
 800e3e6:	458e      	cmp	lr, r1
 800e3e8:	bf88      	it	hi
 800e3ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e3ee:	eba1 010e 	sub.w	r1, r1, lr
 800e3f2:	4464      	add	r4, ip
 800e3f4:	4642      	mov	r2, r8
 800e3f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e3fa:	3f01      	subs	r7, #1
 800e3fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e400:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e404:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e408:	d1dc      	bne.n	800e3c4 <__ieee754_sqrt+0xdc>
 800e40a:	4319      	orrs	r1, r3
 800e40c:	d01b      	beq.n	800e446 <__ieee754_sqrt+0x15e>
 800e40e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e494 <__ieee754_sqrt+0x1ac>
 800e412:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e498 <__ieee754_sqrt+0x1b0>
 800e416:	e9da 0100 	ldrd	r0, r1, [sl]
 800e41a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e41e:	f7f1 ff33 	bl	8000288 <__aeabi_dsub>
 800e422:	e9da 8900 	ldrd	r8, r9, [sl]
 800e426:	4602      	mov	r2, r0
 800e428:	460b      	mov	r3, r1
 800e42a:	4640      	mov	r0, r8
 800e42c:	4649      	mov	r1, r9
 800e42e:	f7f2 fb5f 	bl	8000af0 <__aeabi_dcmple>
 800e432:	b140      	cbz	r0, 800e446 <__ieee754_sqrt+0x15e>
 800e434:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e438:	e9da 0100 	ldrd	r0, r1, [sl]
 800e43c:	e9db 2300 	ldrd	r2, r3, [fp]
 800e440:	d111      	bne.n	800e466 <__ieee754_sqrt+0x17e>
 800e442:	3601      	adds	r6, #1
 800e444:	463c      	mov	r4, r7
 800e446:	1072      	asrs	r2, r6, #1
 800e448:	0863      	lsrs	r3, r4, #1
 800e44a:	07f1      	lsls	r1, r6, #31
 800e44c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e450:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e454:	bf48      	it	mi
 800e456:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e45a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e45e:	4618      	mov	r0, r3
 800e460:	e756      	b.n	800e310 <__ieee754_sqrt+0x28>
 800e462:	4690      	mov	r8, r2
 800e464:	e7be      	b.n	800e3e4 <__ieee754_sqrt+0xfc>
 800e466:	f7f1 ff11 	bl	800028c <__adddf3>
 800e46a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e46e:	4602      	mov	r2, r0
 800e470:	460b      	mov	r3, r1
 800e472:	4640      	mov	r0, r8
 800e474:	4649      	mov	r1, r9
 800e476:	f7f2 fb31 	bl	8000adc <__aeabi_dcmplt>
 800e47a:	b120      	cbz	r0, 800e486 <__ieee754_sqrt+0x19e>
 800e47c:	1ca0      	adds	r0, r4, #2
 800e47e:	bf08      	it	eq
 800e480:	3601      	addeq	r6, #1
 800e482:	3402      	adds	r4, #2
 800e484:	e7df      	b.n	800e446 <__ieee754_sqrt+0x15e>
 800e486:	1c63      	adds	r3, r4, #1
 800e488:	f023 0401 	bic.w	r4, r3, #1
 800e48c:	e7db      	b.n	800e446 <__ieee754_sqrt+0x15e>
 800e48e:	bf00      	nop
 800e490:	7ff00000 	.word	0x7ff00000
 800e494:	20000208 	.word	0x20000208
 800e498:	20000200 	.word	0x20000200
 800e49c:	00000000 	.word	0x00000000

0800e4a0 <__kernel_cos>:
 800e4a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	ec57 6b10 	vmov	r6, r7, d0
 800e4a8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e4ac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e4b0:	ed8d 1b00 	vstr	d1, [sp]
 800e4b4:	d206      	bcs.n	800e4c4 <__kernel_cos+0x24>
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	4639      	mov	r1, r7
 800e4ba:	f7f2 fb4d 	bl	8000b58 <__aeabi_d2iz>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	f000 8088 	beq.w	800e5d4 <__kernel_cos+0x134>
 800e4c4:	4632      	mov	r2, r6
 800e4c6:	463b      	mov	r3, r7
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	4639      	mov	r1, r7
 800e4cc:	f7f2 f894 	bl	80005f8 <__aeabi_dmul>
 800e4d0:	4b51      	ldr	r3, [pc, #324]	@ (800e618 <__kernel_cos+0x178>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	4604      	mov	r4, r0
 800e4d6:	460d      	mov	r5, r1
 800e4d8:	f7f2 f88e 	bl	80005f8 <__aeabi_dmul>
 800e4dc:	a340      	add	r3, pc, #256	@ (adr r3, 800e5e0 <__kernel_cos+0x140>)
 800e4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e2:	4682      	mov	sl, r0
 800e4e4:	468b      	mov	fp, r1
 800e4e6:	4620      	mov	r0, r4
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	f7f2 f885 	bl	80005f8 <__aeabi_dmul>
 800e4ee:	a33e      	add	r3, pc, #248	@ (adr r3, 800e5e8 <__kernel_cos+0x148>)
 800e4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f4:	f7f1 feca 	bl	800028c <__adddf3>
 800e4f8:	4622      	mov	r2, r4
 800e4fa:	462b      	mov	r3, r5
 800e4fc:	f7f2 f87c 	bl	80005f8 <__aeabi_dmul>
 800e500:	a33b      	add	r3, pc, #236	@ (adr r3, 800e5f0 <__kernel_cos+0x150>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f1 febf 	bl	8000288 <__aeabi_dsub>
 800e50a:	4622      	mov	r2, r4
 800e50c:	462b      	mov	r3, r5
 800e50e:	f7f2 f873 	bl	80005f8 <__aeabi_dmul>
 800e512:	a339      	add	r3, pc, #228	@ (adr r3, 800e5f8 <__kernel_cos+0x158>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	f7f1 feb8 	bl	800028c <__adddf3>
 800e51c:	4622      	mov	r2, r4
 800e51e:	462b      	mov	r3, r5
 800e520:	f7f2 f86a 	bl	80005f8 <__aeabi_dmul>
 800e524:	a336      	add	r3, pc, #216	@ (adr r3, 800e600 <__kernel_cos+0x160>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	f7f1 fead 	bl	8000288 <__aeabi_dsub>
 800e52e:	4622      	mov	r2, r4
 800e530:	462b      	mov	r3, r5
 800e532:	f7f2 f861 	bl	80005f8 <__aeabi_dmul>
 800e536:	a334      	add	r3, pc, #208	@ (adr r3, 800e608 <__kernel_cos+0x168>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	f7f1 fea6 	bl	800028c <__adddf3>
 800e540:	4622      	mov	r2, r4
 800e542:	462b      	mov	r3, r5
 800e544:	f7f2 f858 	bl	80005f8 <__aeabi_dmul>
 800e548:	4622      	mov	r2, r4
 800e54a:	462b      	mov	r3, r5
 800e54c:	f7f2 f854 	bl	80005f8 <__aeabi_dmul>
 800e550:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e554:	4604      	mov	r4, r0
 800e556:	460d      	mov	r5, r1
 800e558:	4630      	mov	r0, r6
 800e55a:	4639      	mov	r1, r7
 800e55c:	f7f2 f84c 	bl	80005f8 <__aeabi_dmul>
 800e560:	460b      	mov	r3, r1
 800e562:	4602      	mov	r2, r0
 800e564:	4629      	mov	r1, r5
 800e566:	4620      	mov	r0, r4
 800e568:	f7f1 fe8e 	bl	8000288 <__aeabi_dsub>
 800e56c:	4b2b      	ldr	r3, [pc, #172]	@ (800e61c <__kernel_cos+0x17c>)
 800e56e:	4598      	cmp	r8, r3
 800e570:	4606      	mov	r6, r0
 800e572:	460f      	mov	r7, r1
 800e574:	d810      	bhi.n	800e598 <__kernel_cos+0xf8>
 800e576:	4602      	mov	r2, r0
 800e578:	460b      	mov	r3, r1
 800e57a:	4650      	mov	r0, sl
 800e57c:	4659      	mov	r1, fp
 800e57e:	f7f1 fe83 	bl	8000288 <__aeabi_dsub>
 800e582:	460b      	mov	r3, r1
 800e584:	4926      	ldr	r1, [pc, #152]	@ (800e620 <__kernel_cos+0x180>)
 800e586:	4602      	mov	r2, r0
 800e588:	2000      	movs	r0, #0
 800e58a:	f7f1 fe7d 	bl	8000288 <__aeabi_dsub>
 800e58e:	ec41 0b10 	vmov	d0, r0, r1
 800e592:	b003      	add	sp, #12
 800e594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e598:	4b22      	ldr	r3, [pc, #136]	@ (800e624 <__kernel_cos+0x184>)
 800e59a:	4921      	ldr	r1, [pc, #132]	@ (800e620 <__kernel_cos+0x180>)
 800e59c:	4598      	cmp	r8, r3
 800e59e:	bf8c      	ite	hi
 800e5a0:	4d21      	ldrhi	r5, [pc, #132]	@ (800e628 <__kernel_cos+0x188>)
 800e5a2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e5a6:	2400      	movs	r4, #0
 800e5a8:	4622      	mov	r2, r4
 800e5aa:	462b      	mov	r3, r5
 800e5ac:	2000      	movs	r0, #0
 800e5ae:	f7f1 fe6b 	bl	8000288 <__aeabi_dsub>
 800e5b2:	4622      	mov	r2, r4
 800e5b4:	4680      	mov	r8, r0
 800e5b6:	4689      	mov	r9, r1
 800e5b8:	462b      	mov	r3, r5
 800e5ba:	4650      	mov	r0, sl
 800e5bc:	4659      	mov	r1, fp
 800e5be:	f7f1 fe63 	bl	8000288 <__aeabi_dsub>
 800e5c2:	4632      	mov	r2, r6
 800e5c4:	463b      	mov	r3, r7
 800e5c6:	f7f1 fe5f 	bl	8000288 <__aeabi_dsub>
 800e5ca:	4602      	mov	r2, r0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	4640      	mov	r0, r8
 800e5d0:	4649      	mov	r1, r9
 800e5d2:	e7da      	b.n	800e58a <__kernel_cos+0xea>
 800e5d4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e610 <__kernel_cos+0x170>
 800e5d8:	e7db      	b.n	800e592 <__kernel_cos+0xf2>
 800e5da:	bf00      	nop
 800e5dc:	f3af 8000 	nop.w
 800e5e0:	be8838d4 	.word	0xbe8838d4
 800e5e4:	bda8fae9 	.word	0xbda8fae9
 800e5e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e5ec:	3e21ee9e 	.word	0x3e21ee9e
 800e5f0:	809c52ad 	.word	0x809c52ad
 800e5f4:	3e927e4f 	.word	0x3e927e4f
 800e5f8:	19cb1590 	.word	0x19cb1590
 800e5fc:	3efa01a0 	.word	0x3efa01a0
 800e600:	16c15177 	.word	0x16c15177
 800e604:	3f56c16c 	.word	0x3f56c16c
 800e608:	5555554c 	.word	0x5555554c
 800e60c:	3fa55555 	.word	0x3fa55555
 800e610:	00000000 	.word	0x00000000
 800e614:	3ff00000 	.word	0x3ff00000
 800e618:	3fe00000 	.word	0x3fe00000
 800e61c:	3fd33332 	.word	0x3fd33332
 800e620:	3ff00000 	.word	0x3ff00000
 800e624:	3fe90000 	.word	0x3fe90000
 800e628:	3fd20000 	.word	0x3fd20000
 800e62c:	00000000 	.word	0x00000000

0800e630 <__kernel_sin>:
 800e630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e634:	ec55 4b10 	vmov	r4, r5, d0
 800e638:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e63c:	b085      	sub	sp, #20
 800e63e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e642:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e646:	4680      	mov	r8, r0
 800e648:	d205      	bcs.n	800e656 <__kernel_sin+0x26>
 800e64a:	4620      	mov	r0, r4
 800e64c:	4629      	mov	r1, r5
 800e64e:	f7f2 fa83 	bl	8000b58 <__aeabi_d2iz>
 800e652:	2800      	cmp	r0, #0
 800e654:	d052      	beq.n	800e6fc <__kernel_sin+0xcc>
 800e656:	4622      	mov	r2, r4
 800e658:	462b      	mov	r3, r5
 800e65a:	4620      	mov	r0, r4
 800e65c:	4629      	mov	r1, r5
 800e65e:	f7f1 ffcb 	bl	80005f8 <__aeabi_dmul>
 800e662:	4682      	mov	sl, r0
 800e664:	468b      	mov	fp, r1
 800e666:	4602      	mov	r2, r0
 800e668:	460b      	mov	r3, r1
 800e66a:	4620      	mov	r0, r4
 800e66c:	4629      	mov	r1, r5
 800e66e:	f7f1 ffc3 	bl	80005f8 <__aeabi_dmul>
 800e672:	a342      	add	r3, pc, #264	@ (adr r3, 800e77c <__kernel_sin+0x14c>)
 800e674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e678:	e9cd 0100 	strd	r0, r1, [sp]
 800e67c:	4650      	mov	r0, sl
 800e67e:	4659      	mov	r1, fp
 800e680:	f7f1 ffba 	bl	80005f8 <__aeabi_dmul>
 800e684:	a33f      	add	r3, pc, #252	@ (adr r3, 800e784 <__kernel_sin+0x154>)
 800e686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68a:	f7f1 fdfd 	bl	8000288 <__aeabi_dsub>
 800e68e:	4652      	mov	r2, sl
 800e690:	465b      	mov	r3, fp
 800e692:	f7f1 ffb1 	bl	80005f8 <__aeabi_dmul>
 800e696:	a33d      	add	r3, pc, #244	@ (adr r3, 800e78c <__kernel_sin+0x15c>)
 800e698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69c:	f7f1 fdf6 	bl	800028c <__adddf3>
 800e6a0:	4652      	mov	r2, sl
 800e6a2:	465b      	mov	r3, fp
 800e6a4:	f7f1 ffa8 	bl	80005f8 <__aeabi_dmul>
 800e6a8:	a33a      	add	r3, pc, #232	@ (adr r3, 800e794 <__kernel_sin+0x164>)
 800e6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ae:	f7f1 fdeb 	bl	8000288 <__aeabi_dsub>
 800e6b2:	4652      	mov	r2, sl
 800e6b4:	465b      	mov	r3, fp
 800e6b6:	f7f1 ff9f 	bl	80005f8 <__aeabi_dmul>
 800e6ba:	a338      	add	r3, pc, #224	@ (adr r3, 800e79c <__kernel_sin+0x16c>)
 800e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c0:	f7f1 fde4 	bl	800028c <__adddf3>
 800e6c4:	4606      	mov	r6, r0
 800e6c6:	460f      	mov	r7, r1
 800e6c8:	f1b8 0f00 	cmp.w	r8, #0
 800e6cc:	d11b      	bne.n	800e706 <__kernel_sin+0xd6>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4650      	mov	r0, sl
 800e6d4:	4659      	mov	r1, fp
 800e6d6:	f7f1 ff8f 	bl	80005f8 <__aeabi_dmul>
 800e6da:	a325      	add	r3, pc, #148	@ (adr r3, 800e770 <__kernel_sin+0x140>)
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	f7f1 fdd2 	bl	8000288 <__aeabi_dsub>
 800e6e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6e8:	f7f1 ff86 	bl	80005f8 <__aeabi_dmul>
 800e6ec:	4602      	mov	r2, r0
 800e6ee:	460b      	mov	r3, r1
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	f7f1 fdca 	bl	800028c <__adddf3>
 800e6f8:	4604      	mov	r4, r0
 800e6fa:	460d      	mov	r5, r1
 800e6fc:	ec45 4b10 	vmov	d0, r4, r5
 800e700:	b005      	add	sp, #20
 800e702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e70a:	4b1b      	ldr	r3, [pc, #108]	@ (800e778 <__kernel_sin+0x148>)
 800e70c:	2200      	movs	r2, #0
 800e70e:	f7f1 ff73 	bl	80005f8 <__aeabi_dmul>
 800e712:	4632      	mov	r2, r6
 800e714:	4680      	mov	r8, r0
 800e716:	4689      	mov	r9, r1
 800e718:	463b      	mov	r3, r7
 800e71a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e71e:	f7f1 ff6b 	bl	80005f8 <__aeabi_dmul>
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	4640      	mov	r0, r8
 800e728:	4649      	mov	r1, r9
 800e72a:	f7f1 fdad 	bl	8000288 <__aeabi_dsub>
 800e72e:	4652      	mov	r2, sl
 800e730:	465b      	mov	r3, fp
 800e732:	f7f1 ff61 	bl	80005f8 <__aeabi_dmul>
 800e736:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e73a:	f7f1 fda5 	bl	8000288 <__aeabi_dsub>
 800e73e:	a30c      	add	r3, pc, #48	@ (adr r3, 800e770 <__kernel_sin+0x140>)
 800e740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e744:	4606      	mov	r6, r0
 800e746:	460f      	mov	r7, r1
 800e748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e74c:	f7f1 ff54 	bl	80005f8 <__aeabi_dmul>
 800e750:	4602      	mov	r2, r0
 800e752:	460b      	mov	r3, r1
 800e754:	4630      	mov	r0, r6
 800e756:	4639      	mov	r1, r7
 800e758:	f7f1 fd98 	bl	800028c <__adddf3>
 800e75c:	4602      	mov	r2, r0
 800e75e:	460b      	mov	r3, r1
 800e760:	4620      	mov	r0, r4
 800e762:	4629      	mov	r1, r5
 800e764:	f7f1 fd90 	bl	8000288 <__aeabi_dsub>
 800e768:	e7c6      	b.n	800e6f8 <__kernel_sin+0xc8>
 800e76a:	bf00      	nop
 800e76c:	f3af 8000 	nop.w
 800e770:	55555549 	.word	0x55555549
 800e774:	3fc55555 	.word	0x3fc55555
 800e778:	3fe00000 	.word	0x3fe00000
 800e77c:	5acfd57c 	.word	0x5acfd57c
 800e780:	3de5d93a 	.word	0x3de5d93a
 800e784:	8a2b9ceb 	.word	0x8a2b9ceb
 800e788:	3e5ae5e6 	.word	0x3e5ae5e6
 800e78c:	57b1fe7d 	.word	0x57b1fe7d
 800e790:	3ec71de3 	.word	0x3ec71de3
 800e794:	19c161d5 	.word	0x19c161d5
 800e798:	3f2a01a0 	.word	0x3f2a01a0
 800e79c:	1110f8a6 	.word	0x1110f8a6
 800e7a0:	3f811111 	.word	0x3f811111
 800e7a4:	00000000 	.word	0x00000000

0800e7a8 <__ieee754_rem_pio2>:
 800e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	ec57 6b10 	vmov	r6, r7, d0
 800e7b0:	4bc5      	ldr	r3, [pc, #788]	@ (800eac8 <__ieee754_rem_pio2+0x320>)
 800e7b2:	b08d      	sub	sp, #52	@ 0x34
 800e7b4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e7b8:	4598      	cmp	r8, r3
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	9704      	str	r7, [sp, #16]
 800e7be:	d807      	bhi.n	800e7d0 <__ieee754_rem_pio2+0x28>
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	ed80 0b00 	vstr	d0, [r0]
 800e7c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e7cc:	2500      	movs	r5, #0
 800e7ce:	e028      	b.n	800e822 <__ieee754_rem_pio2+0x7a>
 800e7d0:	4bbe      	ldr	r3, [pc, #760]	@ (800eacc <__ieee754_rem_pio2+0x324>)
 800e7d2:	4598      	cmp	r8, r3
 800e7d4:	d878      	bhi.n	800e8c8 <__ieee754_rem_pio2+0x120>
 800e7d6:	9b04      	ldr	r3, [sp, #16]
 800e7d8:	4dbd      	ldr	r5, [pc, #756]	@ (800ead0 <__ieee754_rem_pio2+0x328>)
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	4630      	mov	r0, r6
 800e7de:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ea90 <__ieee754_rem_pio2+0x2e8>)
 800e7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	dd38      	ble.n	800e85a <__ieee754_rem_pio2+0xb2>
 800e7e8:	f7f1 fd4e 	bl	8000288 <__aeabi_dsub>
 800e7ec:	45a8      	cmp	r8, r5
 800e7ee:	4606      	mov	r6, r0
 800e7f0:	460f      	mov	r7, r1
 800e7f2:	d01a      	beq.n	800e82a <__ieee754_rem_pio2+0x82>
 800e7f4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ea98 <__ieee754_rem_pio2+0x2f0>)
 800e7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fa:	f7f1 fd45 	bl	8000288 <__aeabi_dsub>
 800e7fe:	4602      	mov	r2, r0
 800e800:	460b      	mov	r3, r1
 800e802:	4680      	mov	r8, r0
 800e804:	4689      	mov	r9, r1
 800e806:	4630      	mov	r0, r6
 800e808:	4639      	mov	r1, r7
 800e80a:	f7f1 fd3d 	bl	8000288 <__aeabi_dsub>
 800e80e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ea98 <__ieee754_rem_pio2+0x2f0>)
 800e810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e814:	f7f1 fd38 	bl	8000288 <__aeabi_dsub>
 800e818:	e9c4 8900 	strd	r8, r9, [r4]
 800e81c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e820:	2501      	movs	r5, #1
 800e822:	4628      	mov	r0, r5
 800e824:	b00d      	add	sp, #52	@ 0x34
 800e826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e82a:	a39d      	add	r3, pc, #628	@ (adr r3, 800eaa0 <__ieee754_rem_pio2+0x2f8>)
 800e82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e830:	f7f1 fd2a 	bl	8000288 <__aeabi_dsub>
 800e834:	a39c      	add	r3, pc, #624	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x300>)
 800e836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83a:	4606      	mov	r6, r0
 800e83c:	460f      	mov	r7, r1
 800e83e:	f7f1 fd23 	bl	8000288 <__aeabi_dsub>
 800e842:	4602      	mov	r2, r0
 800e844:	460b      	mov	r3, r1
 800e846:	4680      	mov	r8, r0
 800e848:	4689      	mov	r9, r1
 800e84a:	4630      	mov	r0, r6
 800e84c:	4639      	mov	r1, r7
 800e84e:	f7f1 fd1b 	bl	8000288 <__aeabi_dsub>
 800e852:	a395      	add	r3, pc, #596	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x300>)
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	e7dc      	b.n	800e814 <__ieee754_rem_pio2+0x6c>
 800e85a:	f7f1 fd17 	bl	800028c <__adddf3>
 800e85e:	45a8      	cmp	r8, r5
 800e860:	4606      	mov	r6, r0
 800e862:	460f      	mov	r7, r1
 800e864:	d018      	beq.n	800e898 <__ieee754_rem_pio2+0xf0>
 800e866:	a38c      	add	r3, pc, #560	@ (adr r3, 800ea98 <__ieee754_rem_pio2+0x2f0>)
 800e868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86c:	f7f1 fd0e 	bl	800028c <__adddf3>
 800e870:	4602      	mov	r2, r0
 800e872:	460b      	mov	r3, r1
 800e874:	4680      	mov	r8, r0
 800e876:	4689      	mov	r9, r1
 800e878:	4630      	mov	r0, r6
 800e87a:	4639      	mov	r1, r7
 800e87c:	f7f1 fd04 	bl	8000288 <__aeabi_dsub>
 800e880:	a385      	add	r3, pc, #532	@ (adr r3, 800ea98 <__ieee754_rem_pio2+0x2f0>)
 800e882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e886:	f7f1 fd01 	bl	800028c <__adddf3>
 800e88a:	f04f 35ff 	mov.w	r5, #4294967295
 800e88e:	e9c4 8900 	strd	r8, r9, [r4]
 800e892:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e896:	e7c4      	b.n	800e822 <__ieee754_rem_pio2+0x7a>
 800e898:	a381      	add	r3, pc, #516	@ (adr r3, 800eaa0 <__ieee754_rem_pio2+0x2f8>)
 800e89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89e:	f7f1 fcf5 	bl	800028c <__adddf3>
 800e8a2:	a381      	add	r3, pc, #516	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x300>)
 800e8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a8:	4606      	mov	r6, r0
 800e8aa:	460f      	mov	r7, r1
 800e8ac:	f7f1 fcee 	bl	800028c <__adddf3>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	4680      	mov	r8, r0
 800e8b6:	4689      	mov	r9, r1
 800e8b8:	4630      	mov	r0, r6
 800e8ba:	4639      	mov	r1, r7
 800e8bc:	f7f1 fce4 	bl	8000288 <__aeabi_dsub>
 800e8c0:	a379      	add	r3, pc, #484	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x300>)
 800e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c6:	e7de      	b.n	800e886 <__ieee754_rem_pio2+0xde>
 800e8c8:	4b82      	ldr	r3, [pc, #520]	@ (800ead4 <__ieee754_rem_pio2+0x32c>)
 800e8ca:	4598      	cmp	r8, r3
 800e8cc:	f200 80d1 	bhi.w	800ea72 <__ieee754_rem_pio2+0x2ca>
 800e8d0:	f000 f966 	bl	800eba0 <fabs>
 800e8d4:	ec57 6b10 	vmov	r6, r7, d0
 800e8d8:	a375      	add	r3, pc, #468	@ (adr r3, 800eab0 <__ieee754_rem_pio2+0x308>)
 800e8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8de:	4630      	mov	r0, r6
 800e8e0:	4639      	mov	r1, r7
 800e8e2:	f7f1 fe89 	bl	80005f8 <__aeabi_dmul>
 800e8e6:	4b7c      	ldr	r3, [pc, #496]	@ (800ead8 <__ieee754_rem_pio2+0x330>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	f7f1 fccf 	bl	800028c <__adddf3>
 800e8ee:	f7f2 f933 	bl	8000b58 <__aeabi_d2iz>
 800e8f2:	4605      	mov	r5, r0
 800e8f4:	f7f1 fe16 	bl	8000524 <__aeabi_i2d>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e900:	a363      	add	r3, pc, #396	@ (adr r3, 800ea90 <__ieee754_rem_pio2+0x2e8>)
 800e902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e906:	f7f1 fe77 	bl	80005f8 <__aeabi_dmul>
 800e90a:	4602      	mov	r2, r0
 800e90c:	460b      	mov	r3, r1
 800e90e:	4630      	mov	r0, r6
 800e910:	4639      	mov	r1, r7
 800e912:	f7f1 fcb9 	bl	8000288 <__aeabi_dsub>
 800e916:	a360      	add	r3, pc, #384	@ (adr r3, 800ea98 <__ieee754_rem_pio2+0x2f0>)
 800e918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91c:	4682      	mov	sl, r0
 800e91e:	468b      	mov	fp, r1
 800e920:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e924:	f7f1 fe68 	bl	80005f8 <__aeabi_dmul>
 800e928:	2d1f      	cmp	r5, #31
 800e92a:	4606      	mov	r6, r0
 800e92c:	460f      	mov	r7, r1
 800e92e:	dc0c      	bgt.n	800e94a <__ieee754_rem_pio2+0x1a2>
 800e930:	4b6a      	ldr	r3, [pc, #424]	@ (800eadc <__ieee754_rem_pio2+0x334>)
 800e932:	1e6a      	subs	r2, r5, #1
 800e934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e938:	4543      	cmp	r3, r8
 800e93a:	d006      	beq.n	800e94a <__ieee754_rem_pio2+0x1a2>
 800e93c:	4632      	mov	r2, r6
 800e93e:	463b      	mov	r3, r7
 800e940:	4650      	mov	r0, sl
 800e942:	4659      	mov	r1, fp
 800e944:	f7f1 fca0 	bl	8000288 <__aeabi_dsub>
 800e948:	e00e      	b.n	800e968 <__ieee754_rem_pio2+0x1c0>
 800e94a:	463b      	mov	r3, r7
 800e94c:	4632      	mov	r2, r6
 800e94e:	4650      	mov	r0, sl
 800e950:	4659      	mov	r1, fp
 800e952:	f7f1 fc99 	bl	8000288 <__aeabi_dsub>
 800e956:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e95a:	9305      	str	r3, [sp, #20]
 800e95c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e960:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e964:	2b10      	cmp	r3, #16
 800e966:	dc02      	bgt.n	800e96e <__ieee754_rem_pio2+0x1c6>
 800e968:	e9c4 0100 	strd	r0, r1, [r4]
 800e96c:	e039      	b.n	800e9e2 <__ieee754_rem_pio2+0x23a>
 800e96e:	a34c      	add	r3, pc, #304	@ (adr r3, 800eaa0 <__ieee754_rem_pio2+0x2f8>)
 800e970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e978:	f7f1 fe3e 	bl	80005f8 <__aeabi_dmul>
 800e97c:	4606      	mov	r6, r0
 800e97e:	460f      	mov	r7, r1
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
 800e984:	4650      	mov	r0, sl
 800e986:	4659      	mov	r1, fp
 800e988:	f7f1 fc7e 	bl	8000288 <__aeabi_dsub>
 800e98c:	4602      	mov	r2, r0
 800e98e:	460b      	mov	r3, r1
 800e990:	4680      	mov	r8, r0
 800e992:	4689      	mov	r9, r1
 800e994:	4650      	mov	r0, sl
 800e996:	4659      	mov	r1, fp
 800e998:	f7f1 fc76 	bl	8000288 <__aeabi_dsub>
 800e99c:	4632      	mov	r2, r6
 800e99e:	463b      	mov	r3, r7
 800e9a0:	f7f1 fc72 	bl	8000288 <__aeabi_dsub>
 800e9a4:	a340      	add	r3, pc, #256	@ (adr r3, 800eaa8 <__ieee754_rem_pio2+0x300>)
 800e9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	460f      	mov	r7, r1
 800e9ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e9b2:	f7f1 fe21 	bl	80005f8 <__aeabi_dmul>
 800e9b6:	4632      	mov	r2, r6
 800e9b8:	463b      	mov	r3, r7
 800e9ba:	f7f1 fc65 	bl	8000288 <__aeabi_dsub>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	460f      	mov	r7, r1
 800e9c6:	4640      	mov	r0, r8
 800e9c8:	4649      	mov	r1, r9
 800e9ca:	f7f1 fc5d 	bl	8000288 <__aeabi_dsub>
 800e9ce:	9a05      	ldr	r2, [sp, #20]
 800e9d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	2b31      	cmp	r3, #49	@ 0x31
 800e9d8:	dc20      	bgt.n	800ea1c <__ieee754_rem_pio2+0x274>
 800e9da:	e9c4 0100 	strd	r0, r1, [r4]
 800e9de:	46c2      	mov	sl, r8
 800e9e0:	46cb      	mov	fp, r9
 800e9e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e9e6:	4650      	mov	r0, sl
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	464b      	mov	r3, r9
 800e9ec:	4659      	mov	r1, fp
 800e9ee:	f7f1 fc4b 	bl	8000288 <__aeabi_dsub>
 800e9f2:	463b      	mov	r3, r7
 800e9f4:	4632      	mov	r2, r6
 800e9f6:	f7f1 fc47 	bl	8000288 <__aeabi_dsub>
 800e9fa:	9b04      	ldr	r3, [sp, #16]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea02:	f6bf af0e 	bge.w	800e822 <__ieee754_rem_pio2+0x7a>
 800ea06:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800ea0a:	6063      	str	r3, [r4, #4]
 800ea0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ea10:	f8c4 8000 	str.w	r8, [r4]
 800ea14:	60a0      	str	r0, [r4, #8]
 800ea16:	60e3      	str	r3, [r4, #12]
 800ea18:	426d      	negs	r5, r5
 800ea1a:	e702      	b.n	800e822 <__ieee754_rem_pio2+0x7a>
 800ea1c:	a326      	add	r3, pc, #152	@ (adr r3, 800eab8 <__ieee754_rem_pio2+0x310>)
 800ea1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea26:	f7f1 fde7 	bl	80005f8 <__aeabi_dmul>
 800ea2a:	4606      	mov	r6, r0
 800ea2c:	460f      	mov	r7, r1
 800ea2e:	4602      	mov	r2, r0
 800ea30:	460b      	mov	r3, r1
 800ea32:	4640      	mov	r0, r8
 800ea34:	4649      	mov	r1, r9
 800ea36:	f7f1 fc27 	bl	8000288 <__aeabi_dsub>
 800ea3a:	4602      	mov	r2, r0
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4682      	mov	sl, r0
 800ea40:	468b      	mov	fp, r1
 800ea42:	4640      	mov	r0, r8
 800ea44:	4649      	mov	r1, r9
 800ea46:	f7f1 fc1f 	bl	8000288 <__aeabi_dsub>
 800ea4a:	4632      	mov	r2, r6
 800ea4c:	463b      	mov	r3, r7
 800ea4e:	f7f1 fc1b 	bl	8000288 <__aeabi_dsub>
 800ea52:	a31b      	add	r3, pc, #108	@ (adr r3, 800eac0 <__ieee754_rem_pio2+0x318>)
 800ea54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea58:	4606      	mov	r6, r0
 800ea5a:	460f      	mov	r7, r1
 800ea5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea60:	f7f1 fdca 	bl	80005f8 <__aeabi_dmul>
 800ea64:	4632      	mov	r2, r6
 800ea66:	463b      	mov	r3, r7
 800ea68:	f7f1 fc0e 	bl	8000288 <__aeabi_dsub>
 800ea6c:	4606      	mov	r6, r0
 800ea6e:	460f      	mov	r7, r1
 800ea70:	e764      	b.n	800e93c <__ieee754_rem_pio2+0x194>
 800ea72:	4b1b      	ldr	r3, [pc, #108]	@ (800eae0 <__ieee754_rem_pio2+0x338>)
 800ea74:	4598      	cmp	r8, r3
 800ea76:	d935      	bls.n	800eae4 <__ieee754_rem_pio2+0x33c>
 800ea78:	4632      	mov	r2, r6
 800ea7a:	463b      	mov	r3, r7
 800ea7c:	4630      	mov	r0, r6
 800ea7e:	4639      	mov	r1, r7
 800ea80:	f7f1 fc02 	bl	8000288 <__aeabi_dsub>
 800ea84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ea88:	e9c4 0100 	strd	r0, r1, [r4]
 800ea8c:	e69e      	b.n	800e7cc <__ieee754_rem_pio2+0x24>
 800ea8e:	bf00      	nop
 800ea90:	54400000 	.word	0x54400000
 800ea94:	3ff921fb 	.word	0x3ff921fb
 800ea98:	1a626331 	.word	0x1a626331
 800ea9c:	3dd0b461 	.word	0x3dd0b461
 800eaa0:	1a600000 	.word	0x1a600000
 800eaa4:	3dd0b461 	.word	0x3dd0b461
 800eaa8:	2e037073 	.word	0x2e037073
 800eaac:	3ba3198a 	.word	0x3ba3198a
 800eab0:	6dc9c883 	.word	0x6dc9c883
 800eab4:	3fe45f30 	.word	0x3fe45f30
 800eab8:	2e000000 	.word	0x2e000000
 800eabc:	3ba3198a 	.word	0x3ba3198a
 800eac0:	252049c1 	.word	0x252049c1
 800eac4:	397b839a 	.word	0x397b839a
 800eac8:	3fe921fb 	.word	0x3fe921fb
 800eacc:	4002d97b 	.word	0x4002d97b
 800ead0:	3ff921fb 	.word	0x3ff921fb
 800ead4:	413921fb 	.word	0x413921fb
 800ead8:	3fe00000 	.word	0x3fe00000
 800eadc:	0800f9f8 	.word	0x0800f9f8
 800eae0:	7fefffff 	.word	0x7fefffff
 800eae4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800eae8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800eaec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	460f      	mov	r7, r1
 800eaf4:	f7f2 f830 	bl	8000b58 <__aeabi_d2iz>
 800eaf8:	f7f1 fd14 	bl	8000524 <__aeabi_i2d>
 800eafc:	4602      	mov	r2, r0
 800eafe:	460b      	mov	r3, r1
 800eb00:	4630      	mov	r0, r6
 800eb02:	4639      	mov	r1, r7
 800eb04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb08:	f7f1 fbbe 	bl	8000288 <__aeabi_dsub>
 800eb0c:	4b22      	ldr	r3, [pc, #136]	@ (800eb98 <__ieee754_rem_pio2+0x3f0>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f7f1 fd72 	bl	80005f8 <__aeabi_dmul>
 800eb14:	460f      	mov	r7, r1
 800eb16:	4606      	mov	r6, r0
 800eb18:	f7f2 f81e 	bl	8000b58 <__aeabi_d2iz>
 800eb1c:	f7f1 fd02 	bl	8000524 <__aeabi_i2d>
 800eb20:	4602      	mov	r2, r0
 800eb22:	460b      	mov	r3, r1
 800eb24:	4630      	mov	r0, r6
 800eb26:	4639      	mov	r1, r7
 800eb28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800eb2c:	f7f1 fbac 	bl	8000288 <__aeabi_dsub>
 800eb30:	4b19      	ldr	r3, [pc, #100]	@ (800eb98 <__ieee754_rem_pio2+0x3f0>)
 800eb32:	2200      	movs	r2, #0
 800eb34:	f7f1 fd60 	bl	80005f8 <__aeabi_dmul>
 800eb38:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800eb3c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800eb40:	f04f 0803 	mov.w	r8, #3
 800eb44:	2600      	movs	r6, #0
 800eb46:	2700      	movs	r7, #0
 800eb48:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800eb4c:	4632      	mov	r2, r6
 800eb4e:	463b      	mov	r3, r7
 800eb50:	46c2      	mov	sl, r8
 800eb52:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb56:	f7f1 ffb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	d1f4      	bne.n	800eb48 <__ieee754_rem_pio2+0x3a0>
 800eb5e:	4b0f      	ldr	r3, [pc, #60]	@ (800eb9c <__ieee754_rem_pio2+0x3f4>)
 800eb60:	9301      	str	r3, [sp, #4]
 800eb62:	2302      	movs	r3, #2
 800eb64:	9300      	str	r3, [sp, #0]
 800eb66:	462a      	mov	r2, r5
 800eb68:	4653      	mov	r3, sl
 800eb6a:	4621      	mov	r1, r4
 800eb6c:	a806      	add	r0, sp, #24
 800eb6e:	f000 f81f 	bl	800ebb0 <__kernel_rem_pio2>
 800eb72:	9b04      	ldr	r3, [sp, #16]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	4605      	mov	r5, r0
 800eb78:	f6bf ae53 	bge.w	800e822 <__ieee754_rem_pio2+0x7a>
 800eb7c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800eb80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eb84:	e9c4 2300 	strd	r2, r3, [r4]
 800eb88:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800eb8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eb90:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800eb94:	e740      	b.n	800ea18 <__ieee754_rem_pio2+0x270>
 800eb96:	bf00      	nop
 800eb98:	41700000 	.word	0x41700000
 800eb9c:	0800fa78 	.word	0x0800fa78

0800eba0 <fabs>:
 800eba0:	ec51 0b10 	vmov	r0, r1, d0
 800eba4:	4602      	mov	r2, r0
 800eba6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ebaa:	ec43 2b10 	vmov	d0, r2, r3
 800ebae:	4770      	bx	lr

0800ebb0 <__kernel_rem_pio2>:
 800ebb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebb4:	ed2d 8b02 	vpush	{d8}
 800ebb8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ebbc:	f112 0f14 	cmn.w	r2, #20
 800ebc0:	9306      	str	r3, [sp, #24]
 800ebc2:	9104      	str	r1, [sp, #16]
 800ebc4:	4bbe      	ldr	r3, [pc, #760]	@ (800eec0 <__kernel_rem_pio2+0x310>)
 800ebc6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800ebc8:	9008      	str	r0, [sp, #32]
 800ebca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ebce:	9300      	str	r3, [sp, #0]
 800ebd0:	9b06      	ldr	r3, [sp, #24]
 800ebd2:	f103 33ff 	add.w	r3, r3, #4294967295
 800ebd6:	bfa8      	it	ge
 800ebd8:	1ed4      	subge	r4, r2, #3
 800ebda:	9305      	str	r3, [sp, #20]
 800ebdc:	bfb2      	itee	lt
 800ebde:	2400      	movlt	r4, #0
 800ebe0:	2318      	movge	r3, #24
 800ebe2:	fb94 f4f3 	sdivge	r4, r4, r3
 800ebe6:	f06f 0317 	mvn.w	r3, #23
 800ebea:	fb04 3303 	mla	r3, r4, r3, r3
 800ebee:	eb03 0b02 	add.w	fp, r3, r2
 800ebf2:	9b00      	ldr	r3, [sp, #0]
 800ebf4:	9a05      	ldr	r2, [sp, #20]
 800ebf6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800eeb0 <__kernel_rem_pio2+0x300>
 800ebfa:	eb03 0802 	add.w	r8, r3, r2
 800ebfe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ec00:	1aa7      	subs	r7, r4, r2
 800ec02:	ae20      	add	r6, sp, #128	@ 0x80
 800ec04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ec08:	2500      	movs	r5, #0
 800ec0a:	4545      	cmp	r5, r8
 800ec0c:	dd13      	ble.n	800ec36 <__kernel_rem_pio2+0x86>
 800ec0e:	9b06      	ldr	r3, [sp, #24]
 800ec10:	aa20      	add	r2, sp, #128	@ 0x80
 800ec12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ec16:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800ec1a:	f04f 0800 	mov.w	r8, #0
 800ec1e:	9b00      	ldr	r3, [sp, #0]
 800ec20:	4598      	cmp	r8, r3
 800ec22:	dc31      	bgt.n	800ec88 <__kernel_rem_pio2+0xd8>
 800ec24:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800eeb0 <__kernel_rem_pio2+0x300>
 800ec28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ec2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec30:	462f      	mov	r7, r5
 800ec32:	2600      	movs	r6, #0
 800ec34:	e01b      	b.n	800ec6e <__kernel_rem_pio2+0xbe>
 800ec36:	42ef      	cmn	r7, r5
 800ec38:	d407      	bmi.n	800ec4a <__kernel_rem_pio2+0x9a>
 800ec3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ec3e:	f7f1 fc71 	bl	8000524 <__aeabi_i2d>
 800ec42:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ec46:	3501      	adds	r5, #1
 800ec48:	e7df      	b.n	800ec0a <__kernel_rem_pio2+0x5a>
 800ec4a:	ec51 0b18 	vmov	r0, r1, d8
 800ec4e:	e7f8      	b.n	800ec42 <__kernel_rem_pio2+0x92>
 800ec50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ec58:	f7f1 fcce 	bl	80005f8 <__aeabi_dmul>
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec64:	f7f1 fb12 	bl	800028c <__adddf3>
 800ec68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec6c:	3601      	adds	r6, #1
 800ec6e:	9b05      	ldr	r3, [sp, #20]
 800ec70:	429e      	cmp	r6, r3
 800ec72:	f1a7 0708 	sub.w	r7, r7, #8
 800ec76:	ddeb      	ble.n	800ec50 <__kernel_rem_pio2+0xa0>
 800ec78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ec7c:	f108 0801 	add.w	r8, r8, #1
 800ec80:	ecaa 7b02 	vstmia	sl!, {d7}
 800ec84:	3508      	adds	r5, #8
 800ec86:	e7ca      	b.n	800ec1e <__kernel_rem_pio2+0x6e>
 800ec88:	9b00      	ldr	r3, [sp, #0]
 800ec8a:	f8dd 8000 	ldr.w	r8, [sp]
 800ec8e:	aa0c      	add	r2, sp, #48	@ 0x30
 800ec90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec94:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ec98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ec9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec9e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800eca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eca4:	ab98      	add	r3, sp, #608	@ 0x260
 800eca6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ecaa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ecae:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ecb2:	ac0c      	add	r4, sp, #48	@ 0x30
 800ecb4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ecb6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ecba:	46a1      	mov	r9, r4
 800ecbc:	46c2      	mov	sl, r8
 800ecbe:	f1ba 0f00 	cmp.w	sl, #0
 800ecc2:	f1a5 0508 	sub.w	r5, r5, #8
 800ecc6:	dc77      	bgt.n	800edb8 <__kernel_rem_pio2+0x208>
 800ecc8:	4658      	mov	r0, fp
 800ecca:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ecce:	f000 fac7 	bl	800f260 <scalbn>
 800ecd2:	ec57 6b10 	vmov	r6, r7, d0
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ecdc:	4630      	mov	r0, r6
 800ecde:	4639      	mov	r1, r7
 800ece0:	f7f1 fc8a 	bl	80005f8 <__aeabi_dmul>
 800ece4:	ec41 0b10 	vmov	d0, r0, r1
 800ece8:	f000 fb3a 	bl	800f360 <floor>
 800ecec:	4b75      	ldr	r3, [pc, #468]	@ (800eec4 <__kernel_rem_pio2+0x314>)
 800ecee:	ec51 0b10 	vmov	r0, r1, d0
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f7f1 fc80 	bl	80005f8 <__aeabi_dmul>
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	4630      	mov	r0, r6
 800ecfe:	4639      	mov	r1, r7
 800ed00:	f7f1 fac2 	bl	8000288 <__aeabi_dsub>
 800ed04:	460f      	mov	r7, r1
 800ed06:	4606      	mov	r6, r0
 800ed08:	f7f1 ff26 	bl	8000b58 <__aeabi_d2iz>
 800ed0c:	9002      	str	r0, [sp, #8]
 800ed0e:	f7f1 fc09 	bl	8000524 <__aeabi_i2d>
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	4630      	mov	r0, r6
 800ed18:	4639      	mov	r1, r7
 800ed1a:	f7f1 fab5 	bl	8000288 <__aeabi_dsub>
 800ed1e:	f1bb 0f00 	cmp.w	fp, #0
 800ed22:	4606      	mov	r6, r0
 800ed24:	460f      	mov	r7, r1
 800ed26:	dd6c      	ble.n	800ee02 <__kernel_rem_pio2+0x252>
 800ed28:	f108 31ff 	add.w	r1, r8, #4294967295
 800ed2c:	ab0c      	add	r3, sp, #48	@ 0x30
 800ed2e:	9d02      	ldr	r5, [sp, #8]
 800ed30:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed34:	f1cb 0018 	rsb	r0, fp, #24
 800ed38:	fa43 f200 	asr.w	r2, r3, r0
 800ed3c:	4415      	add	r5, r2
 800ed3e:	4082      	lsls	r2, r0
 800ed40:	1a9b      	subs	r3, r3, r2
 800ed42:	aa0c      	add	r2, sp, #48	@ 0x30
 800ed44:	9502      	str	r5, [sp, #8]
 800ed46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ed4a:	f1cb 0217 	rsb	r2, fp, #23
 800ed4e:	fa43 f902 	asr.w	r9, r3, r2
 800ed52:	f1b9 0f00 	cmp.w	r9, #0
 800ed56:	dd64      	ble.n	800ee22 <__kernel_rem_pio2+0x272>
 800ed58:	9b02      	ldr	r3, [sp, #8]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	9302      	str	r3, [sp, #8]
 800ed60:	4615      	mov	r5, r2
 800ed62:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800ed66:	4590      	cmp	r8, r2
 800ed68:	f300 80b8 	bgt.w	800eedc <__kernel_rem_pio2+0x32c>
 800ed6c:	f1bb 0f00 	cmp.w	fp, #0
 800ed70:	dd07      	ble.n	800ed82 <__kernel_rem_pio2+0x1d2>
 800ed72:	f1bb 0f01 	cmp.w	fp, #1
 800ed76:	f000 80bf 	beq.w	800eef8 <__kernel_rem_pio2+0x348>
 800ed7a:	f1bb 0f02 	cmp.w	fp, #2
 800ed7e:	f000 80c6 	beq.w	800ef0e <__kernel_rem_pio2+0x35e>
 800ed82:	f1b9 0f02 	cmp.w	r9, #2
 800ed86:	d14c      	bne.n	800ee22 <__kernel_rem_pio2+0x272>
 800ed88:	4632      	mov	r2, r6
 800ed8a:	463b      	mov	r3, r7
 800ed8c:	494e      	ldr	r1, [pc, #312]	@ (800eec8 <__kernel_rem_pio2+0x318>)
 800ed8e:	2000      	movs	r0, #0
 800ed90:	f7f1 fa7a 	bl	8000288 <__aeabi_dsub>
 800ed94:	4606      	mov	r6, r0
 800ed96:	460f      	mov	r7, r1
 800ed98:	2d00      	cmp	r5, #0
 800ed9a:	d042      	beq.n	800ee22 <__kernel_rem_pio2+0x272>
 800ed9c:	4658      	mov	r0, fp
 800ed9e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800eeb8 <__kernel_rem_pio2+0x308>
 800eda2:	f000 fa5d 	bl	800f260 <scalbn>
 800eda6:	4630      	mov	r0, r6
 800eda8:	4639      	mov	r1, r7
 800edaa:	ec53 2b10 	vmov	r2, r3, d0
 800edae:	f7f1 fa6b 	bl	8000288 <__aeabi_dsub>
 800edb2:	4606      	mov	r6, r0
 800edb4:	460f      	mov	r7, r1
 800edb6:	e034      	b.n	800ee22 <__kernel_rem_pio2+0x272>
 800edb8:	4b44      	ldr	r3, [pc, #272]	@ (800eecc <__kernel_rem_pio2+0x31c>)
 800edba:	2200      	movs	r2, #0
 800edbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edc0:	f7f1 fc1a 	bl	80005f8 <__aeabi_dmul>
 800edc4:	f7f1 fec8 	bl	8000b58 <__aeabi_d2iz>
 800edc8:	f7f1 fbac 	bl	8000524 <__aeabi_i2d>
 800edcc:	4b40      	ldr	r3, [pc, #256]	@ (800eed0 <__kernel_rem_pio2+0x320>)
 800edce:	2200      	movs	r2, #0
 800edd0:	4606      	mov	r6, r0
 800edd2:	460f      	mov	r7, r1
 800edd4:	f7f1 fc10 	bl	80005f8 <__aeabi_dmul>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ede0:	f7f1 fa52 	bl	8000288 <__aeabi_dsub>
 800ede4:	f7f1 feb8 	bl	8000b58 <__aeabi_d2iz>
 800ede8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800edec:	f849 0b04 	str.w	r0, [r9], #4
 800edf0:	4639      	mov	r1, r7
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7f1 fa4a 	bl	800028c <__adddf3>
 800edf8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800edfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee00:	e75d      	b.n	800ecbe <__kernel_rem_pio2+0x10e>
 800ee02:	d107      	bne.n	800ee14 <__kernel_rem_pio2+0x264>
 800ee04:	f108 33ff 	add.w	r3, r8, #4294967295
 800ee08:	aa0c      	add	r2, sp, #48	@ 0x30
 800ee0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee0e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800ee12:	e79e      	b.n	800ed52 <__kernel_rem_pio2+0x1a2>
 800ee14:	4b2f      	ldr	r3, [pc, #188]	@ (800eed4 <__kernel_rem_pio2+0x324>)
 800ee16:	2200      	movs	r2, #0
 800ee18:	f7f1 fe74 	bl	8000b04 <__aeabi_dcmpge>
 800ee1c:	2800      	cmp	r0, #0
 800ee1e:	d143      	bne.n	800eea8 <__kernel_rem_pio2+0x2f8>
 800ee20:	4681      	mov	r9, r0
 800ee22:	2200      	movs	r2, #0
 800ee24:	2300      	movs	r3, #0
 800ee26:	4630      	mov	r0, r6
 800ee28:	4639      	mov	r1, r7
 800ee2a:	f7f1 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee2e:	2800      	cmp	r0, #0
 800ee30:	f000 80bf 	beq.w	800efb2 <__kernel_rem_pio2+0x402>
 800ee34:	f108 33ff 	add.w	r3, r8, #4294967295
 800ee38:	2200      	movs	r2, #0
 800ee3a:	9900      	ldr	r1, [sp, #0]
 800ee3c:	428b      	cmp	r3, r1
 800ee3e:	da6e      	bge.n	800ef1e <__kernel_rem_pio2+0x36e>
 800ee40:	2a00      	cmp	r2, #0
 800ee42:	f000 8089 	beq.w	800ef58 <__kernel_rem_pio2+0x3a8>
 800ee46:	f108 38ff 	add.w	r8, r8, #4294967295
 800ee4a:	ab0c      	add	r3, sp, #48	@ 0x30
 800ee4c:	f1ab 0b18 	sub.w	fp, fp, #24
 800ee50:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d0f6      	beq.n	800ee46 <__kernel_rem_pio2+0x296>
 800ee58:	4658      	mov	r0, fp
 800ee5a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800eeb8 <__kernel_rem_pio2+0x308>
 800ee5e:	f000 f9ff 	bl	800f260 <scalbn>
 800ee62:	f108 0301 	add.w	r3, r8, #1
 800ee66:	00da      	lsls	r2, r3, #3
 800ee68:	9205      	str	r2, [sp, #20]
 800ee6a:	ec55 4b10 	vmov	r4, r5, d0
 800ee6e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800ee70:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800eecc <__kernel_rem_pio2+0x31c>
 800ee74:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800ee78:	4646      	mov	r6, r8
 800ee7a:	f04f 0a00 	mov.w	sl, #0
 800ee7e:	2e00      	cmp	r6, #0
 800ee80:	f280 80cf 	bge.w	800f022 <__kernel_rem_pio2+0x472>
 800ee84:	4644      	mov	r4, r8
 800ee86:	2c00      	cmp	r4, #0
 800ee88:	f2c0 80fd 	blt.w	800f086 <__kernel_rem_pio2+0x4d6>
 800ee8c:	4b12      	ldr	r3, [pc, #72]	@ (800eed8 <__kernel_rem_pio2+0x328>)
 800ee8e:	461f      	mov	r7, r3
 800ee90:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ee92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee96:	9306      	str	r3, [sp, #24]
 800ee98:	f04f 0a00 	mov.w	sl, #0
 800ee9c:	f04f 0b00 	mov.w	fp, #0
 800eea0:	2600      	movs	r6, #0
 800eea2:	eba8 0504 	sub.w	r5, r8, r4
 800eea6:	e0e2      	b.n	800f06e <__kernel_rem_pio2+0x4be>
 800eea8:	f04f 0902 	mov.w	r9, #2
 800eeac:	e754      	b.n	800ed58 <__kernel_rem_pio2+0x1a8>
 800eeae:	bf00      	nop
	...
 800eebc:	3ff00000 	.word	0x3ff00000
 800eec0:	0800fbc0 	.word	0x0800fbc0
 800eec4:	40200000 	.word	0x40200000
 800eec8:	3ff00000 	.word	0x3ff00000
 800eecc:	3e700000 	.word	0x3e700000
 800eed0:	41700000 	.word	0x41700000
 800eed4:	3fe00000 	.word	0x3fe00000
 800eed8:	0800fb80 	.word	0x0800fb80
 800eedc:	f854 3b04 	ldr.w	r3, [r4], #4
 800eee0:	b945      	cbnz	r5, 800eef4 <__kernel_rem_pio2+0x344>
 800eee2:	b123      	cbz	r3, 800eeee <__kernel_rem_pio2+0x33e>
 800eee4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800eee8:	f844 3c04 	str.w	r3, [r4, #-4]
 800eeec:	2301      	movs	r3, #1
 800eeee:	3201      	adds	r2, #1
 800eef0:	461d      	mov	r5, r3
 800eef2:	e738      	b.n	800ed66 <__kernel_rem_pio2+0x1b6>
 800eef4:	1acb      	subs	r3, r1, r3
 800eef6:	e7f7      	b.n	800eee8 <__kernel_rem_pio2+0x338>
 800eef8:	f108 32ff 	add.w	r2, r8, #4294967295
 800eefc:	ab0c      	add	r3, sp, #48	@ 0x30
 800eefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef02:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ef06:	a90c      	add	r1, sp, #48	@ 0x30
 800ef08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ef0c:	e739      	b.n	800ed82 <__kernel_rem_pio2+0x1d2>
 800ef0e:	f108 32ff 	add.w	r2, r8, #4294967295
 800ef12:	ab0c      	add	r3, sp, #48	@ 0x30
 800ef14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ef1c:	e7f3      	b.n	800ef06 <__kernel_rem_pio2+0x356>
 800ef1e:	a90c      	add	r1, sp, #48	@ 0x30
 800ef20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ef24:	3b01      	subs	r3, #1
 800ef26:	430a      	orrs	r2, r1
 800ef28:	e787      	b.n	800ee3a <__kernel_rem_pio2+0x28a>
 800ef2a:	3401      	adds	r4, #1
 800ef2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ef30:	2a00      	cmp	r2, #0
 800ef32:	d0fa      	beq.n	800ef2a <__kernel_rem_pio2+0x37a>
 800ef34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ef36:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ef3a:	eb0d 0503 	add.w	r5, sp, r3
 800ef3e:	9b06      	ldr	r3, [sp, #24]
 800ef40:	aa20      	add	r2, sp, #128	@ 0x80
 800ef42:	4443      	add	r3, r8
 800ef44:	f108 0701 	add.w	r7, r8, #1
 800ef48:	3d98      	subs	r5, #152	@ 0x98
 800ef4a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ef4e:	4444      	add	r4, r8
 800ef50:	42bc      	cmp	r4, r7
 800ef52:	da04      	bge.n	800ef5e <__kernel_rem_pio2+0x3ae>
 800ef54:	46a0      	mov	r8, r4
 800ef56:	e6a2      	b.n	800ec9e <__kernel_rem_pio2+0xee>
 800ef58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef5a:	2401      	movs	r4, #1
 800ef5c:	e7e6      	b.n	800ef2c <__kernel_rem_pio2+0x37c>
 800ef5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef60:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ef64:	f7f1 fade 	bl	8000524 <__aeabi_i2d>
 800ef68:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800f230 <__kernel_rem_pio2+0x680>
 800ef6c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ef70:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ef74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef78:	46b2      	mov	sl, r6
 800ef7a:	f04f 0800 	mov.w	r8, #0
 800ef7e:	9b05      	ldr	r3, [sp, #20]
 800ef80:	4598      	cmp	r8, r3
 800ef82:	dd05      	ble.n	800ef90 <__kernel_rem_pio2+0x3e0>
 800ef84:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ef88:	3701      	adds	r7, #1
 800ef8a:	eca5 7b02 	vstmia	r5!, {d7}
 800ef8e:	e7df      	b.n	800ef50 <__kernel_rem_pio2+0x3a0>
 800ef90:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800ef94:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ef98:	f7f1 fb2e 	bl	80005f8 <__aeabi_dmul>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	460b      	mov	r3, r1
 800efa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efa4:	f7f1 f972 	bl	800028c <__adddf3>
 800efa8:	f108 0801 	add.w	r8, r8, #1
 800efac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efb0:	e7e5      	b.n	800ef7e <__kernel_rem_pio2+0x3ce>
 800efb2:	f1cb 0000 	rsb	r0, fp, #0
 800efb6:	ec47 6b10 	vmov	d0, r6, r7
 800efba:	f000 f951 	bl	800f260 <scalbn>
 800efbe:	ec55 4b10 	vmov	r4, r5, d0
 800efc2:	4b9d      	ldr	r3, [pc, #628]	@ (800f238 <__kernel_rem_pio2+0x688>)
 800efc4:	2200      	movs	r2, #0
 800efc6:	4620      	mov	r0, r4
 800efc8:	4629      	mov	r1, r5
 800efca:	f7f1 fd9b 	bl	8000b04 <__aeabi_dcmpge>
 800efce:	b300      	cbz	r0, 800f012 <__kernel_rem_pio2+0x462>
 800efd0:	4b9a      	ldr	r3, [pc, #616]	@ (800f23c <__kernel_rem_pio2+0x68c>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	4620      	mov	r0, r4
 800efd6:	4629      	mov	r1, r5
 800efd8:	f7f1 fb0e 	bl	80005f8 <__aeabi_dmul>
 800efdc:	f7f1 fdbc 	bl	8000b58 <__aeabi_d2iz>
 800efe0:	4606      	mov	r6, r0
 800efe2:	f7f1 fa9f 	bl	8000524 <__aeabi_i2d>
 800efe6:	4b94      	ldr	r3, [pc, #592]	@ (800f238 <__kernel_rem_pio2+0x688>)
 800efe8:	2200      	movs	r2, #0
 800efea:	f7f1 fb05 	bl	80005f8 <__aeabi_dmul>
 800efee:	460b      	mov	r3, r1
 800eff0:	4602      	mov	r2, r0
 800eff2:	4629      	mov	r1, r5
 800eff4:	4620      	mov	r0, r4
 800eff6:	f7f1 f947 	bl	8000288 <__aeabi_dsub>
 800effa:	f7f1 fdad 	bl	8000b58 <__aeabi_d2iz>
 800effe:	ab0c      	add	r3, sp, #48	@ 0x30
 800f000:	f10b 0b18 	add.w	fp, fp, #24
 800f004:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f008:	f108 0801 	add.w	r8, r8, #1
 800f00c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f010:	e722      	b.n	800ee58 <__kernel_rem_pio2+0x2a8>
 800f012:	4620      	mov	r0, r4
 800f014:	4629      	mov	r1, r5
 800f016:	f7f1 fd9f 	bl	8000b58 <__aeabi_d2iz>
 800f01a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f01c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f020:	e71a      	b.n	800ee58 <__kernel_rem_pio2+0x2a8>
 800f022:	ab0c      	add	r3, sp, #48	@ 0x30
 800f024:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f028:	f7f1 fa7c 	bl	8000524 <__aeabi_i2d>
 800f02c:	4622      	mov	r2, r4
 800f02e:	462b      	mov	r3, r5
 800f030:	f7f1 fae2 	bl	80005f8 <__aeabi_dmul>
 800f034:	4652      	mov	r2, sl
 800f036:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f03a:	465b      	mov	r3, fp
 800f03c:	4620      	mov	r0, r4
 800f03e:	4629      	mov	r1, r5
 800f040:	f7f1 fada 	bl	80005f8 <__aeabi_dmul>
 800f044:	3e01      	subs	r6, #1
 800f046:	4604      	mov	r4, r0
 800f048:	460d      	mov	r5, r1
 800f04a:	e718      	b.n	800ee7e <__kernel_rem_pio2+0x2ce>
 800f04c:	9906      	ldr	r1, [sp, #24]
 800f04e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f052:	9106      	str	r1, [sp, #24]
 800f054:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f058:	f7f1 face 	bl	80005f8 <__aeabi_dmul>
 800f05c:	4602      	mov	r2, r0
 800f05e:	460b      	mov	r3, r1
 800f060:	4650      	mov	r0, sl
 800f062:	4659      	mov	r1, fp
 800f064:	f7f1 f912 	bl	800028c <__adddf3>
 800f068:	3601      	adds	r6, #1
 800f06a:	4682      	mov	sl, r0
 800f06c:	468b      	mov	fp, r1
 800f06e:	9b00      	ldr	r3, [sp, #0]
 800f070:	429e      	cmp	r6, r3
 800f072:	dc01      	bgt.n	800f078 <__kernel_rem_pio2+0x4c8>
 800f074:	42b5      	cmp	r5, r6
 800f076:	dae9      	bge.n	800f04c <__kernel_rem_pio2+0x49c>
 800f078:	ab48      	add	r3, sp, #288	@ 0x120
 800f07a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f07e:	e9c5 ab00 	strd	sl, fp, [r5]
 800f082:	3c01      	subs	r4, #1
 800f084:	e6ff      	b.n	800ee86 <__kernel_rem_pio2+0x2d6>
 800f086:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f088:	2b02      	cmp	r3, #2
 800f08a:	dc0b      	bgt.n	800f0a4 <__kernel_rem_pio2+0x4f4>
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	dc39      	bgt.n	800f104 <__kernel_rem_pio2+0x554>
 800f090:	d05d      	beq.n	800f14e <__kernel_rem_pio2+0x59e>
 800f092:	9b02      	ldr	r3, [sp, #8]
 800f094:	f003 0007 	and.w	r0, r3, #7
 800f098:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f09c:	ecbd 8b02 	vpop	{d8}
 800f0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f0a6:	2b03      	cmp	r3, #3
 800f0a8:	d1f3      	bne.n	800f092 <__kernel_rem_pio2+0x4e2>
 800f0aa:	9b05      	ldr	r3, [sp, #20]
 800f0ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f0b0:	eb0d 0403 	add.w	r4, sp, r3
 800f0b4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f0b8:	4625      	mov	r5, r4
 800f0ba:	46c2      	mov	sl, r8
 800f0bc:	f1ba 0f00 	cmp.w	sl, #0
 800f0c0:	f1a5 0508 	sub.w	r5, r5, #8
 800f0c4:	dc6b      	bgt.n	800f19e <__kernel_rem_pio2+0x5ee>
 800f0c6:	4645      	mov	r5, r8
 800f0c8:	2d01      	cmp	r5, #1
 800f0ca:	f1a4 0408 	sub.w	r4, r4, #8
 800f0ce:	f300 8087 	bgt.w	800f1e0 <__kernel_rem_pio2+0x630>
 800f0d2:	9c05      	ldr	r4, [sp, #20]
 800f0d4:	ab48      	add	r3, sp, #288	@ 0x120
 800f0d6:	441c      	add	r4, r3
 800f0d8:	2000      	movs	r0, #0
 800f0da:	2100      	movs	r1, #0
 800f0dc:	f1b8 0f01 	cmp.w	r8, #1
 800f0e0:	f300 809c 	bgt.w	800f21c <__kernel_rem_pio2+0x66c>
 800f0e4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800f0e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800f0ec:	f1b9 0f00 	cmp.w	r9, #0
 800f0f0:	f040 80a6 	bne.w	800f240 <__kernel_rem_pio2+0x690>
 800f0f4:	9b04      	ldr	r3, [sp, #16]
 800f0f6:	e9c3 7800 	strd	r7, r8, [r3]
 800f0fa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f0fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f102:	e7c6      	b.n	800f092 <__kernel_rem_pio2+0x4e2>
 800f104:	9d05      	ldr	r5, [sp, #20]
 800f106:	ab48      	add	r3, sp, #288	@ 0x120
 800f108:	441d      	add	r5, r3
 800f10a:	4644      	mov	r4, r8
 800f10c:	2000      	movs	r0, #0
 800f10e:	2100      	movs	r1, #0
 800f110:	2c00      	cmp	r4, #0
 800f112:	da35      	bge.n	800f180 <__kernel_rem_pio2+0x5d0>
 800f114:	f1b9 0f00 	cmp.w	r9, #0
 800f118:	d038      	beq.n	800f18c <__kernel_rem_pio2+0x5dc>
 800f11a:	4602      	mov	r2, r0
 800f11c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f120:	9c04      	ldr	r4, [sp, #16]
 800f122:	e9c4 2300 	strd	r2, r3, [r4]
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f12e:	f7f1 f8ab 	bl	8000288 <__aeabi_dsub>
 800f132:	ad4a      	add	r5, sp, #296	@ 0x128
 800f134:	2401      	movs	r4, #1
 800f136:	45a0      	cmp	r8, r4
 800f138:	da2b      	bge.n	800f192 <__kernel_rem_pio2+0x5e2>
 800f13a:	f1b9 0f00 	cmp.w	r9, #0
 800f13e:	d002      	beq.n	800f146 <__kernel_rem_pio2+0x596>
 800f140:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f144:	4619      	mov	r1, r3
 800f146:	9b04      	ldr	r3, [sp, #16]
 800f148:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f14c:	e7a1      	b.n	800f092 <__kernel_rem_pio2+0x4e2>
 800f14e:	9c05      	ldr	r4, [sp, #20]
 800f150:	ab48      	add	r3, sp, #288	@ 0x120
 800f152:	441c      	add	r4, r3
 800f154:	2000      	movs	r0, #0
 800f156:	2100      	movs	r1, #0
 800f158:	f1b8 0f00 	cmp.w	r8, #0
 800f15c:	da09      	bge.n	800f172 <__kernel_rem_pio2+0x5c2>
 800f15e:	f1b9 0f00 	cmp.w	r9, #0
 800f162:	d002      	beq.n	800f16a <__kernel_rem_pio2+0x5ba>
 800f164:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f168:	4619      	mov	r1, r3
 800f16a:	9b04      	ldr	r3, [sp, #16]
 800f16c:	e9c3 0100 	strd	r0, r1, [r3]
 800f170:	e78f      	b.n	800f092 <__kernel_rem_pio2+0x4e2>
 800f172:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f176:	f7f1 f889 	bl	800028c <__adddf3>
 800f17a:	f108 38ff 	add.w	r8, r8, #4294967295
 800f17e:	e7eb      	b.n	800f158 <__kernel_rem_pio2+0x5a8>
 800f180:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f184:	f7f1 f882 	bl	800028c <__adddf3>
 800f188:	3c01      	subs	r4, #1
 800f18a:	e7c1      	b.n	800f110 <__kernel_rem_pio2+0x560>
 800f18c:	4602      	mov	r2, r0
 800f18e:	460b      	mov	r3, r1
 800f190:	e7c6      	b.n	800f120 <__kernel_rem_pio2+0x570>
 800f192:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f196:	f7f1 f879 	bl	800028c <__adddf3>
 800f19a:	3401      	adds	r4, #1
 800f19c:	e7cb      	b.n	800f136 <__kernel_rem_pio2+0x586>
 800f19e:	ed95 7b00 	vldr	d7, [r5]
 800f1a2:	ed8d 7b00 	vstr	d7, [sp]
 800f1a6:	ed95 7b02 	vldr	d7, [r5, #8]
 800f1aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1ae:	ec53 2b17 	vmov	r2, r3, d7
 800f1b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f1b6:	f7f1 f869 	bl	800028c <__adddf3>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	460b      	mov	r3, r1
 800f1be:	4606      	mov	r6, r0
 800f1c0:	460f      	mov	r7, r1
 800f1c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1c6:	f7f1 f85f 	bl	8000288 <__aeabi_dsub>
 800f1ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1ce:	f7f1 f85d 	bl	800028c <__adddf3>
 800f1d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f1da:	e9c5 6700 	strd	r6, r7, [r5]
 800f1de:	e76d      	b.n	800f0bc <__kernel_rem_pio2+0x50c>
 800f1e0:	ed94 7b00 	vldr	d7, [r4]
 800f1e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f1e8:	ec51 0b17 	vmov	r0, r1, d7
 800f1ec:	4652      	mov	r2, sl
 800f1ee:	465b      	mov	r3, fp
 800f1f0:	ed8d 7b00 	vstr	d7, [sp]
 800f1f4:	f7f1 f84a 	bl	800028c <__adddf3>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	4606      	mov	r6, r0
 800f1fe:	460f      	mov	r7, r1
 800f200:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f204:	f7f1 f840 	bl	8000288 <__aeabi_dsub>
 800f208:	4652      	mov	r2, sl
 800f20a:	465b      	mov	r3, fp
 800f20c:	f7f1 f83e 	bl	800028c <__adddf3>
 800f210:	3d01      	subs	r5, #1
 800f212:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f216:	e9c4 6700 	strd	r6, r7, [r4]
 800f21a:	e755      	b.n	800f0c8 <__kernel_rem_pio2+0x518>
 800f21c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f220:	f7f1 f834 	bl	800028c <__adddf3>
 800f224:	f108 38ff 	add.w	r8, r8, #4294967295
 800f228:	e758      	b.n	800f0dc <__kernel_rem_pio2+0x52c>
 800f22a:	bf00      	nop
 800f22c:	f3af 8000 	nop.w
	...
 800f238:	41700000 	.word	0x41700000
 800f23c:	3e700000 	.word	0x3e700000
 800f240:	9b04      	ldr	r3, [sp, #16]
 800f242:	9a04      	ldr	r2, [sp, #16]
 800f244:	601f      	str	r7, [r3, #0]
 800f246:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800f24a:	605c      	str	r4, [r3, #4]
 800f24c:	609d      	str	r5, [r3, #8]
 800f24e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f252:	60d3      	str	r3, [r2, #12]
 800f254:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f258:	6110      	str	r0, [r2, #16]
 800f25a:	6153      	str	r3, [r2, #20]
 800f25c:	e719      	b.n	800f092 <__kernel_rem_pio2+0x4e2>
 800f25e:	bf00      	nop

0800f260 <scalbn>:
 800f260:	b570      	push	{r4, r5, r6, lr}
 800f262:	ec55 4b10 	vmov	r4, r5, d0
 800f266:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f26a:	4606      	mov	r6, r0
 800f26c:	462b      	mov	r3, r5
 800f26e:	b991      	cbnz	r1, 800f296 <scalbn+0x36>
 800f270:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f274:	4323      	orrs	r3, r4
 800f276:	d03d      	beq.n	800f2f4 <scalbn+0x94>
 800f278:	4b35      	ldr	r3, [pc, #212]	@ (800f350 <scalbn+0xf0>)
 800f27a:	4620      	mov	r0, r4
 800f27c:	4629      	mov	r1, r5
 800f27e:	2200      	movs	r2, #0
 800f280:	f7f1 f9ba 	bl	80005f8 <__aeabi_dmul>
 800f284:	4b33      	ldr	r3, [pc, #204]	@ (800f354 <scalbn+0xf4>)
 800f286:	429e      	cmp	r6, r3
 800f288:	4604      	mov	r4, r0
 800f28a:	460d      	mov	r5, r1
 800f28c:	da0f      	bge.n	800f2ae <scalbn+0x4e>
 800f28e:	a328      	add	r3, pc, #160	@ (adr r3, 800f330 <scalbn+0xd0>)
 800f290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f294:	e01e      	b.n	800f2d4 <scalbn+0x74>
 800f296:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f29a:	4291      	cmp	r1, r2
 800f29c:	d10b      	bne.n	800f2b6 <scalbn+0x56>
 800f29e:	4622      	mov	r2, r4
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	4629      	mov	r1, r5
 800f2a4:	f7f0 fff2 	bl	800028c <__adddf3>
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	460d      	mov	r5, r1
 800f2ac:	e022      	b.n	800f2f4 <scalbn+0x94>
 800f2ae:	460b      	mov	r3, r1
 800f2b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f2b4:	3936      	subs	r1, #54	@ 0x36
 800f2b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f2ba:	4296      	cmp	r6, r2
 800f2bc:	dd0d      	ble.n	800f2da <scalbn+0x7a>
 800f2be:	2d00      	cmp	r5, #0
 800f2c0:	a11d      	add	r1, pc, #116	@ (adr r1, 800f338 <scalbn+0xd8>)
 800f2c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2c6:	da02      	bge.n	800f2ce <scalbn+0x6e>
 800f2c8:	a11d      	add	r1, pc, #116	@ (adr r1, 800f340 <scalbn+0xe0>)
 800f2ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2ce:	a31a      	add	r3, pc, #104	@ (adr r3, 800f338 <scalbn+0xd8>)
 800f2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d4:	f7f1 f990 	bl	80005f8 <__aeabi_dmul>
 800f2d8:	e7e6      	b.n	800f2a8 <scalbn+0x48>
 800f2da:	1872      	adds	r2, r6, r1
 800f2dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f2e0:	428a      	cmp	r2, r1
 800f2e2:	dcec      	bgt.n	800f2be <scalbn+0x5e>
 800f2e4:	2a00      	cmp	r2, #0
 800f2e6:	dd08      	ble.n	800f2fa <scalbn+0x9a>
 800f2e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f2ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f2f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f2f4:	ec45 4b10 	vmov	d0, r4, r5
 800f2f8:	bd70      	pop	{r4, r5, r6, pc}
 800f2fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f2fe:	da08      	bge.n	800f312 <scalbn+0xb2>
 800f300:	2d00      	cmp	r5, #0
 800f302:	a10b      	add	r1, pc, #44	@ (adr r1, 800f330 <scalbn+0xd0>)
 800f304:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f308:	dac1      	bge.n	800f28e <scalbn+0x2e>
 800f30a:	a10f      	add	r1, pc, #60	@ (adr r1, 800f348 <scalbn+0xe8>)
 800f30c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f310:	e7bd      	b.n	800f28e <scalbn+0x2e>
 800f312:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f316:	3236      	adds	r2, #54	@ 0x36
 800f318:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f31c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f320:	4620      	mov	r0, r4
 800f322:	4b0d      	ldr	r3, [pc, #52]	@ (800f358 <scalbn+0xf8>)
 800f324:	4629      	mov	r1, r5
 800f326:	2200      	movs	r2, #0
 800f328:	e7d4      	b.n	800f2d4 <scalbn+0x74>
 800f32a:	bf00      	nop
 800f32c:	f3af 8000 	nop.w
 800f330:	c2f8f359 	.word	0xc2f8f359
 800f334:	01a56e1f 	.word	0x01a56e1f
 800f338:	8800759c 	.word	0x8800759c
 800f33c:	7e37e43c 	.word	0x7e37e43c
 800f340:	8800759c 	.word	0x8800759c
 800f344:	fe37e43c 	.word	0xfe37e43c
 800f348:	c2f8f359 	.word	0xc2f8f359
 800f34c:	81a56e1f 	.word	0x81a56e1f
 800f350:	43500000 	.word	0x43500000
 800f354:	ffff3cb0 	.word	0xffff3cb0
 800f358:	3c900000 	.word	0x3c900000
 800f35c:	00000000 	.word	0x00000000

0800f360 <floor>:
 800f360:	ec51 0b10 	vmov	r0, r1, d0
 800f364:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f370:	2e13      	cmp	r6, #19
 800f372:	460c      	mov	r4, r1
 800f374:	4605      	mov	r5, r0
 800f376:	4680      	mov	r8, r0
 800f378:	dc34      	bgt.n	800f3e4 <floor+0x84>
 800f37a:	2e00      	cmp	r6, #0
 800f37c:	da17      	bge.n	800f3ae <floor+0x4e>
 800f37e:	a332      	add	r3, pc, #200	@ (adr r3, 800f448 <floor+0xe8>)
 800f380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f384:	f7f0 ff82 	bl	800028c <__adddf3>
 800f388:	2200      	movs	r2, #0
 800f38a:	2300      	movs	r3, #0
 800f38c:	f7f1 fbc4 	bl	8000b18 <__aeabi_dcmpgt>
 800f390:	b150      	cbz	r0, 800f3a8 <floor+0x48>
 800f392:	2c00      	cmp	r4, #0
 800f394:	da55      	bge.n	800f442 <floor+0xe2>
 800f396:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f39a:	432c      	orrs	r4, r5
 800f39c:	2500      	movs	r5, #0
 800f39e:	42ac      	cmp	r4, r5
 800f3a0:	4c2b      	ldr	r4, [pc, #172]	@ (800f450 <floor+0xf0>)
 800f3a2:	bf08      	it	eq
 800f3a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f3a8:	4621      	mov	r1, r4
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	e023      	b.n	800f3f6 <floor+0x96>
 800f3ae:	4f29      	ldr	r7, [pc, #164]	@ (800f454 <floor+0xf4>)
 800f3b0:	4137      	asrs	r7, r6
 800f3b2:	ea01 0307 	and.w	r3, r1, r7
 800f3b6:	4303      	orrs	r3, r0
 800f3b8:	d01d      	beq.n	800f3f6 <floor+0x96>
 800f3ba:	a323      	add	r3, pc, #140	@ (adr r3, 800f448 <floor+0xe8>)
 800f3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c0:	f7f0 ff64 	bl	800028c <__adddf3>
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	f7f1 fba6 	bl	8000b18 <__aeabi_dcmpgt>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d0eb      	beq.n	800f3a8 <floor+0x48>
 800f3d0:	2c00      	cmp	r4, #0
 800f3d2:	bfbe      	ittt	lt
 800f3d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f3d8:	4133      	asrlt	r3, r6
 800f3da:	18e4      	addlt	r4, r4, r3
 800f3dc:	ea24 0407 	bic.w	r4, r4, r7
 800f3e0:	2500      	movs	r5, #0
 800f3e2:	e7e1      	b.n	800f3a8 <floor+0x48>
 800f3e4:	2e33      	cmp	r6, #51	@ 0x33
 800f3e6:	dd0a      	ble.n	800f3fe <floor+0x9e>
 800f3e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f3ec:	d103      	bne.n	800f3f6 <floor+0x96>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	f7f0 ff4b 	bl	800028c <__adddf3>
 800f3f6:	ec41 0b10 	vmov	d0, r0, r1
 800f3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f402:	f04f 37ff 	mov.w	r7, #4294967295
 800f406:	40df      	lsrs	r7, r3
 800f408:	4207      	tst	r7, r0
 800f40a:	d0f4      	beq.n	800f3f6 <floor+0x96>
 800f40c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f448 <floor+0xe8>)
 800f40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f412:	f7f0 ff3b 	bl	800028c <__adddf3>
 800f416:	2200      	movs	r2, #0
 800f418:	2300      	movs	r3, #0
 800f41a:	f7f1 fb7d 	bl	8000b18 <__aeabi_dcmpgt>
 800f41e:	2800      	cmp	r0, #0
 800f420:	d0c2      	beq.n	800f3a8 <floor+0x48>
 800f422:	2c00      	cmp	r4, #0
 800f424:	da0a      	bge.n	800f43c <floor+0xdc>
 800f426:	2e14      	cmp	r6, #20
 800f428:	d101      	bne.n	800f42e <floor+0xce>
 800f42a:	3401      	adds	r4, #1
 800f42c:	e006      	b.n	800f43c <floor+0xdc>
 800f42e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f432:	2301      	movs	r3, #1
 800f434:	40b3      	lsls	r3, r6
 800f436:	441d      	add	r5, r3
 800f438:	4545      	cmp	r5, r8
 800f43a:	d3f6      	bcc.n	800f42a <floor+0xca>
 800f43c:	ea25 0507 	bic.w	r5, r5, r7
 800f440:	e7b2      	b.n	800f3a8 <floor+0x48>
 800f442:	2500      	movs	r5, #0
 800f444:	462c      	mov	r4, r5
 800f446:	e7af      	b.n	800f3a8 <floor+0x48>
 800f448:	8800759c 	.word	0x8800759c
 800f44c:	7e37e43c 	.word	0x7e37e43c
 800f450:	bff00000 	.word	0xbff00000
 800f454:	000fffff 	.word	0x000fffff

0800f458 <_init>:
 800f458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45a:	bf00      	nop
 800f45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f45e:	bc08      	pop	{r3}
 800f460:	469e      	mov	lr, r3
 800f462:	4770      	bx	lr

0800f464 <_fini>:
 800f464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f466:	bf00      	nop
 800f468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f46a:	bc08      	pop	{r3}
 800f46c:	469e      	mov	lr, r3
 800f46e:	4770      	bx	lr

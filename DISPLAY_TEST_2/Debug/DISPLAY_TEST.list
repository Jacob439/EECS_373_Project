
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aeec  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014f8  0800b0a8  0800b0a8  0001b0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5a0  0800c5a0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5a0  0800c5a0  0001c5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5a8  0800c5a8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5a8  0800c5a8  0001c5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5ac  0800c5ac  0001c5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  2000001c  0800c5cc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  0800c5cc  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ffa0  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037c6  00000000  00000000  0004002f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d68  00000000  00000000  000437f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f756  00000000  00000000  00045560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224fc  00000000  00000000  00074cb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012810c  00000000  00000000  000971b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000170b  00000000  00000000  001bf2be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008068  00000000  00000000  001c09cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001c8a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000001c 	.word	0x2000001c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800b090 	.word	0x0800b090

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000020 	.word	0x20000020
 80001f8:	0800b090 	.word	0x0800b090

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b970 	b.w	80004f4 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9e08      	ldr	r6, [sp, #32]
 8000232:	460d      	mov	r5, r1
 8000234:	4604      	mov	r4, r0
 8000236:	460f      	mov	r7, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4694      	mov	ip, r2
 8000240:	d965      	bls.n	800030e <__udivmoddi4+0xe2>
 8000242:	fab2 f382 	clz	r3, r2
 8000246:	b143      	cbz	r3, 800025a <__udivmoddi4+0x2e>
 8000248:	fa02 fc03 	lsl.w	ip, r2, r3
 800024c:	f1c3 0220 	rsb	r2, r3, #32
 8000250:	409f      	lsls	r7, r3
 8000252:	fa20 f202 	lsr.w	r2, r0, r2
 8000256:	4317      	orrs	r7, r2
 8000258:	409c      	lsls	r4, r3
 800025a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800025e:	fa1f f58c 	uxth.w	r5, ip
 8000262:	fbb7 f1fe 	udiv	r1, r7, lr
 8000266:	0c22      	lsrs	r2, r4, #16
 8000268:	fb0e 7711 	mls	r7, lr, r1, r7
 800026c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000270:	fb01 f005 	mul.w	r0, r1, r5
 8000274:	4290      	cmp	r0, r2
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x62>
 8000278:	eb1c 0202 	adds.w	r2, ip, r2
 800027c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000280:	f080 811c 	bcs.w	80004bc <__udivmoddi4+0x290>
 8000284:	4290      	cmp	r0, r2
 8000286:	f240 8119 	bls.w	80004bc <__udivmoddi4+0x290>
 800028a:	3902      	subs	r1, #2
 800028c:	4462      	add	r2, ip
 800028e:	1a12      	subs	r2, r2, r0
 8000290:	b2a4      	uxth	r4, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800029e:	fb00 f505 	mul.w	r5, r0, r5
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	d90a      	bls.n	80002bc <__udivmoddi4+0x90>
 80002a6:	eb1c 0404 	adds.w	r4, ip, r4
 80002aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x294>
 80002b2:	42a5      	cmp	r5, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x294>
 80002b8:	4464      	add	r4, ip
 80002ba:	3802      	subs	r0, #2
 80002bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c0:	1b64      	subs	r4, r4, r5
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11e      	cbz	r6, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40dc      	lsrs	r4, r3
 80002c8:	2300      	movs	r3, #0
 80002ca:	e9c6 4300 	strd	r4, r3, [r6]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d908      	bls.n	80002e8 <__udivmoddi4+0xbc>
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	f000 80ed 	beq.w	80004b6 <__udivmoddi4+0x28a>
 80002dc:	2100      	movs	r1, #0
 80002de:	e9c6 0500 	strd	r0, r5, [r6]
 80002e2:	4608      	mov	r0, r1
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	fab3 f183 	clz	r1, r3
 80002ec:	2900      	cmp	r1, #0
 80002ee:	d149      	bne.n	8000384 <__udivmoddi4+0x158>
 80002f0:	42ab      	cmp	r3, r5
 80002f2:	d302      	bcc.n	80002fa <__udivmoddi4+0xce>
 80002f4:	4282      	cmp	r2, r0
 80002f6:	f200 80f8 	bhi.w	80004ea <__udivmoddi4+0x2be>
 80002fa:	1a84      	subs	r4, r0, r2
 80002fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000300:	2001      	movs	r0, #1
 8000302:	4617      	mov	r7, r2
 8000304:	2e00      	cmp	r6, #0
 8000306:	d0e2      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000308:	e9c6 4700 	strd	r4, r7, [r6]
 800030c:	e7df      	b.n	80002ce <__udivmoddi4+0xa2>
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xe6>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f382 	clz	r3, r2
 8000316:	2b00      	cmp	r3, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x210>
 800031c:	1a8a      	subs	r2, r1, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2101      	movs	r1, #1
 8000328:	fbb2 f5f7 	udiv	r5, r2, r7
 800032c:	fb07 2015 	mls	r0, r7, r5, r2
 8000330:	0c22      	lsrs	r2, r4, #16
 8000332:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000336:	fb0e f005 	mul.w	r0, lr, r5
 800033a:	4290      	cmp	r0, r2
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x124>
 800033e:	eb1c 0202 	adds.w	r2, ip, r2
 8000342:	f105 38ff 	add.w	r8, r5, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x122>
 8000348:	4290      	cmp	r0, r2
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2b8>
 800034e:	4645      	mov	r5, r8
 8000350:	1a12      	subs	r2, r2, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb2 f0f7 	udiv	r0, r2, r7
 8000358:	fb07 2210 	mls	r2, r7, r0, r2
 800035c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x14e>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x14c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2c2>
 8000378:	4610      	mov	r0, r2
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000382:	e79f      	b.n	80002c4 <__udivmoddi4+0x98>
 8000384:	f1c1 0720 	rsb	r7, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa05 f401 	lsl.w	r4, r5, r1
 8000396:	fa20 f307 	lsr.w	r3, r0, r7
 800039a:	40fd      	lsrs	r5, r7
 800039c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	fb09 5518 	mls	r5, r9, r8, r5
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b4:	fb08 f50e 	mul.w	r5, r8, lr
 80003b8:	42a5      	cmp	r5, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f001 	lsl.w	r0, r0, r1
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b0>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2b4>
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2b4>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4464      	add	r4, ip
 80003dc:	1b64      	subs	r4, r4, r5
 80003de:	b29d      	uxth	r5, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003ec:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1da>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2ac>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2ac>
 8000402:	3b02      	subs	r3, #2
 8000404:	4464      	add	r4, ip
 8000406:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040a:	fba3 9502 	umull	r9, r5, r3, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	42ac      	cmp	r4, r5
 8000414:	46c8      	mov	r8, r9
 8000416:	46ae      	mov	lr, r5
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x29c>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x298>
 800041c:	b156      	cbz	r6, 8000434 <__udivmoddi4+0x208>
 800041e:	ebb0 0208 	subs.w	r2, r0, r8
 8000422:	eb64 040e 	sbc.w	r4, r4, lr
 8000426:	fa04 f707 	lsl.w	r7, r4, r7
 800042a:	40ca      	lsrs	r2, r1
 800042c:	40cc      	lsrs	r4, r1
 800042e:	4317      	orrs	r7, r2
 8000430:	e9c6 7400 	strd	r7, r4, [r6]
 8000434:	4618      	mov	r0, r3
 8000436:	2100      	movs	r1, #0
 8000438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043c:	f1c3 0120 	rsb	r1, r3, #32
 8000440:	fa02 fc03 	lsl.w	ip, r2, r3
 8000444:	fa20 f201 	lsr.w	r2, r0, r1
 8000448:	fa25 f101 	lsr.w	r1, r5, r1
 800044c:	409d      	lsls	r5, r3
 800044e:	432a      	orrs	r2, r5
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb1 f0f7 	udiv	r0, r1, r7
 800045c:	fb07 1510 	mls	r5, r7, r0, r1
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000466:	fb00 f50e 	mul.w	r5, r0, lr
 800046a:	428d      	cmp	r5, r1
 800046c:	fa04 f403 	lsl.w	r4, r4, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x258>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 800047c:	428d      	cmp	r5, r1
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b0>
 8000480:	3802      	subs	r0, #2
 8000482:	4461      	add	r1, ip
 8000484:	1b49      	subs	r1, r1, r5
 8000486:	b292      	uxth	r2, r2
 8000488:	fbb1 f5f7 	udiv	r5, r1, r7
 800048c:	fb07 1115 	mls	r1, r7, r5, r1
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	fb05 f10e 	mul.w	r1, r5, lr
 8000498:	4291      	cmp	r1, r2
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x282>
 800049c:	eb1c 0202 	adds.w	r2, ip, r2
 80004a0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 80004a6:	4291      	cmp	r1, r2
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 80004aa:	3d02      	subs	r5, #2
 80004ac:	4462      	add	r2, ip
 80004ae:	1a52      	subs	r2, r2, r1
 80004b0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0xfc>
 80004b6:	4631      	mov	r1, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e708      	b.n	80002ce <__udivmoddi4+0xa2>
 80004bc:	4639      	mov	r1, r7
 80004be:	e6e6      	b.n	800028e <__udivmoddi4+0x62>
 80004c0:	4610      	mov	r0, r2
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x90>
 80004c4:	4548      	cmp	r0, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f0>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d0:	3b01      	subs	r3, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f0>
 80004d4:	4645      	mov	r5, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x282>
 80004d8:	462b      	mov	r3, r5
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1da>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x258>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b0>
 80004e4:	3d02      	subs	r5, #2
 80004e6:	4462      	add	r2, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x124>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e70a      	b.n	8000304 <__udivmoddi4+0xd8>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x14e>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8000502:	4b1a      	ldr	r3, [pc, #104]	; (800056c <setSPI_Size+0x74>)
 8000504:	f993 3000 	ldrsb.w	r3, [r3]
 8000508:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800050c:	429a      	cmp	r2, r3
 800050e:	d027      	beq.n	8000560 <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8000510:	4b17      	ldr	r3, [pc, #92]	; (8000570 <setSPI_Size+0x78>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <setSPI_Size+0x78>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800051e:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8000520:	4a12      	ldr	r2, [pc, #72]	; (800056c <setSPI_Size+0x74>)
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8000526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d10c      	bne.n	8000548 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800052e:	4b10      	ldr	r3, [pc, #64]	; (8000570 <setSPI_Size+0x78>)
 8000530:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000534:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <setSPI_Size+0x78>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <setSPI_Size+0x78>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000544:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 8000546:	e00b      	b.n	8000560 <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <setSPI_Size+0x78>)
 800054a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800054e:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <setSPI_Size+0x78>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <setSPI_Size+0x78>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800055e:	601a      	str	r2, [r3, #0]
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	20000000 	.word	0x20000000
 8000570:	200005ac 	.word	0x200005ac

08000574 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	460b      	mov	r3, r1
 800057e:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff ffb9 	bl	80004f8 <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058c:	4815      	ldr	r0, [pc, #84]	; (80005e4 <LCD_WriteCommand+0x70>)
 800058e:	f005 fb0d 	bl	8005bac <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000598:	4812      	ldr	r0, [pc, #72]	; (80005e4 <LCD_WriteCommand+0x70>)
 800059a:	f005 fb07 	bl	8005bac <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 800059e:	f04f 33ff 	mov.w	r3, #4294967295
 80005a2:	2201      	movs	r2, #1
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <LCD_WriteCommand+0x74>)
 80005a8:	f008 fd5c 	bl	8009064 <HAL_SPI_Transmit>
	  if (argc) {
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d00e      	beq.n	80005d0 <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b8:	480a      	ldr	r0, [pc, #40]	; (80005e4 <LCD_WriteCommand+0x70>)
 80005ba:	f005 faf7 	bl	8005bac <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	1c59      	adds	r1, r3, #1
 80005c2:	78fb      	ldrb	r3, [r7, #3]
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <LCD_WriteCommand+0x74>)
 80005cc:	f008 fd4a 	bl	8009064 <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <LCD_WriteCommand+0x70>)
 80005d8:	f005 fae8 	bl	8005bac <HAL_GPIO_WritePin>
	}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	48001000 	.word	0x48001000
 80005e8:	200005ac 	.word	0x200005ac

080005ec <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fc:	4814      	ldr	r0, [pc, #80]	; (8000650 <LCD_WriteData+0x64>)
 80005fe:	f005 fad5 	bl	8005bac <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000608:	4811      	ldr	r0, [pc, #68]	; (8000650 <LCD_WriteData+0x64>)
 800060a:	f005 facf 	bl	8005bac <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800060e:	e011      	b.n	8000634 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000616:	4293      	cmp	r3, r2
 8000618:	bf28      	it	cs
 800061a:	4613      	movcs	r3, r2
 800061c:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800061e:	89fa      	ldrh	r2, [r7, #14]
 8000620:	f04f 33ff 	mov.w	r3, #4294967295
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <LCD_WriteData+0x68>)
 8000628:	f008 fd1c 	bl	8009064 <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	683a      	ldr	r2, [r7, #0]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d1ea      	bne.n	8000610 <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <LCD_WriteData+0x64>)
 8000642:	f005 fab3 	bl	8005bac <HAL_GPIO_WritePin>
#endif
}
 8000646:	bf00      	nop
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	48001000 	.word	0x48001000
 8000654:	200005ac 	.word	0x200005ac

08000658 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b08b      	sub	sp, #44	; 0x2c
 800065c:	af00      	add	r7, sp, #0
 800065e:	4604      	mov	r4, r0
 8000660:	4608      	mov	r0, r1
 8000662:	4611      	mov	r1, r2
 8000664:	461a      	mov	r2, r3
 8000666:	4623      	mov	r3, r4
 8000668:	80fb      	strh	r3, [r7, #6]
 800066a:	4603      	mov	r3, r0
 800066c:	80bb      	strh	r3, [r7, #4]
 800066e:	460b      	mov	r3, r1
 8000670:	807b      	strh	r3, [r7, #2]
 8000672:	4613      	mov	r3, r2
 8000674:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	84fb      	strh	r3, [r7, #38]	; 0x26
 800067a:	887b      	ldrh	r3, [r7, #2]
 800067c:	84bb      	strh	r3, [r7, #36]	; 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 800067e:	88bb      	ldrh	r3, [r7, #4]
 8000680:	847b      	strh	r3, [r7, #34]	; 0x22
 8000682:	883b      	ldrh	r3, [r7, #0]
 8000684:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8000686:	232a      	movs	r3, #42	; 0x2a
 8000688:	763b      	strb	r3, [r7, #24]
 800068a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800068e:	121b      	asrs	r3, r3, #8
 8000690:	b21b      	sxth	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	767b      	strb	r3, [r7, #25]
 8000696:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000698:	b2db      	uxtb	r3, r3
 800069a:	76bb      	strb	r3, [r7, #26]
 800069c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80006a0:	121b      	asrs	r3, r3, #8
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	76fb      	strb	r3, [r7, #27]
 80006a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	2104      	movs	r1, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ff5d 	bl	8000574 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80006ba:	232b      	movs	r3, #43	; 0x2b
 80006bc:	743b      	strb	r3, [r7, #16]
 80006be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80006c2:	121b      	asrs	r3, r3, #8
 80006c4:	b21b      	sxth	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	747b      	strb	r3, [r7, #17]
 80006ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	74bb      	strb	r3, [r7, #18]
 80006d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80006d4:	121b      	asrs	r3, r3, #8
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	74fb      	strb	r3, [r7, #19]
 80006dc:	8c3b      	ldrh	r3, [r7, #32]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2104      	movs	r1, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff43 	bl	8000574 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80006ee:	232c      	movs	r3, #44	; 0x2c
 80006f0:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2100      	movs	r1, #0
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff3b 	bl	8000574 <LCD_WriteCommand>
  }
}
 80006fe:	bf00      	nop
 8000700:	372c      	adds	r7, #44	; 0x2c
 8000702:	46bd      	mov	sp, r7
 8000704:	bd90      	pop	{r4, r7, pc}
	...

08000708 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
 8000712:	460b      	mov	r3, r1
 8000714:	80bb      	strh	r3, [r7, #4]
 8000716:	4613      	mov	r3, r2
 8000718:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 800071a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db39      	blt.n	8000796 <LCD_DrawPixel+0x8e>
 8000722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000726:	2bef      	cmp	r3, #239	; 0xef
 8000728:	dc35      	bgt.n	8000796 <LCD_DrawPixel+0x8e>
 800072a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	db31      	blt.n	8000796 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 8000732:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000736:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800073a:	da2c      	bge.n	8000796 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800073c:	887b      	ldrh	r3, [r7, #2]
 800073e:	0a1b      	lsrs	r3, r3, #8
 8000740:	b29b      	uxth	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	733b      	strb	r3, [r7, #12]
 8000746:	887b      	ldrh	r3, [r7, #2]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 800074c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000750:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000754:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000758:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800075c:	f7ff ff7c 	bl	8000658 <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	480e      	ldr	r0, [pc, #56]	; (80007a0 <LCD_DrawPixel+0x98>)
 8000768:	f005 fa20 	bl	8005bac <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800076c:	2200      	movs	r2, #0
 800076e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000772:	480b      	ldr	r0, [pc, #44]	; (80007a0 <LCD_DrawPixel+0x98>)
 8000774:	f005 fa1a 	bl	8005bac <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8000778:	f107 010c 	add.w	r1, r7, #12
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	2202      	movs	r2, #2
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <LCD_DrawPixel+0x9c>)
 8000784:	f008 fc6e 	bl	8009064 <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8000788:	2201      	movs	r2, #1
 800078a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <LCD_DrawPixel+0x98>)
 8000790:	f005 fa0c 	bl	8005bac <HAL_GPIO_WritePin>
 8000794:	e000      	b.n	8000798 <LCD_DrawPixel+0x90>
    return;
 8000796:	bf00      	nop
#endif
}
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	48001000 	.word	0x48001000
 80007a4:	200005ac 	.word	0x200005ac

080007a8 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b094      	sub	sp, #80	; 0x50
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	807b      	strh	r3, [r7, #2]
  if(pixels>DMA_Min_Pixels)
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80007b4:	2300      	movs	r3, #0
 80007b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007b8:	e009      	b.n	80007ce <LCD_FillPixels+0x26>
      fill[t]=color;
 80007ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	3350      	adds	r3, #80	; 0x50
 80007c0:	443b      	add	r3, r7
 80007c2:	887a      	ldrh	r2, [r7, #2]
 80007c4:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 80007c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80007ca:	3301      	adds	r3, #1
 80007cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b20      	cmp	r3, #32
 80007d2:	bf28      	it	cs
 80007d4:	2320      	movcs	r3, #32
 80007d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80007d8:	429a      	cmp	r2, r3
 80007da:	d3ee      	bcc.n	80007ba <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 80007dc:	e00e      	b.n	80007fc <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b20      	cmp	r3, #32
 80007e2:	bf28      	it	cs
 80007e4:	2320      	movcs	r3, #32
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fefc 	bl	80005ec <LCD_WriteData>
      pixels-=sz;
 80007f4:	687a      	ldr	r2, [r7, #4]
 80007f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007f8:	1ad3      	subs	r3, r2, r3
 80007fa:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1ed      	bne.n	80007de <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	; 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4604      	mov	r4, r0
 8000814:	4608      	mov	r0, r1
 8000816:	4611      	mov	r1, r2
 8000818:	461a      	mov	r2, r3
 800081a:	4623      	mov	r3, r4
 800081c:	80fb      	strh	r3, [r7, #6]
 800081e:	4603      	mov	r3, r0
 8000820:	80bb      	strh	r3, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	807b      	strh	r3, [r7, #2]
 8000826:	4613      	mov	r3, r2
 8000828:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 800082a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800082e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000832:	d104      	bne.n	800083e <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fe5f 	bl	80004f8 <setSPI_Size>
#endif
    return NULL;
 800083a:	2300      	movs	r3, #0
 800083c:	e013      	b.n	8000866 <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 800083e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000842:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000846:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800084a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800084e:	f7ff ff03 	bl	8000658 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 8000852:	2001      	movs	r0, #1
 8000854:	f7ff fe50 	bl	80004f8 <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800085e:	4804      	ldr	r0, [pc, #16]	; (8000870 <LCD_FillArea+0x64>)
 8000860:	f005 f9a4 	bl	8005bac <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <LCD_FillArea+0x68>)
}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	bf00      	nop
 8000870:	48001000 	.word	0x48001000
 8000874:	080007a9 	.word	0x080007a9

08000878 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	4604      	mov	r4, r0
 8000880:	4608      	mov	r0, r1
 8000882:	4611      	mov	r1, r2
 8000884:	461a      	mov	r2, r3
 8000886:	4623      	mov	r3, r4
 8000888:	80fb      	strh	r3, [r7, #6]
 800088a:	4603      	mov	r3, r0
 800088c:	80bb      	strh	r3, [r7, #4]
 800088e:	460b      	mov	r3, r1
 8000890:	807b      	strh	r3, [r7, #2]
 8000892:	4613      	mov	r3, r2
 8000894:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8000896:	887a      	ldrh	r2, [r7, #2]
 8000898:	88fb      	ldrh	r3, [r7, #6]
 800089a:	1ad3      	subs	r3, r2, r3
 800089c:	3301      	adds	r3, #1
 800089e:	4619      	mov	r1, r3
 80008a0:	883a      	ldrh	r2, [r7, #0]
 80008a2:	88bb      	ldrh	r3, [r7, #4]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	3301      	adds	r3, #1
 80008a8:	fb01 f303 	mul.w	r3, r1, r3
 80008ac:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80008ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80008b2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80008b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80008ba:	f9b7 3000 	ldrsh.w	r3, [r7]
 80008be:	f7ff fecb 	bl	8000658 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 80008c2:	2001      	movs	r0, #1
 80008c4:	f7ff fe18 	bl	80004f8 <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 80008c8:	8c3b      	ldrh	r3, [r7, #32]
 80008ca:	4619      	mov	r1, r3
 80008cc:	68f8      	ldr	r0, [r7, #12]
 80008ce:	f7ff ff6b 	bl	80007a8 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff fe10 	bl	80004f8 <setSPI_Size>
#endif
  return UG_RESULT_OK;
 80008d8:	2300      	movs	r3, #0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}

080008e2 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80008e2:	b590      	push	{r4, r7, lr}
 80008e4:	b085      	sub	sp, #20
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	603a      	str	r2, [r7, #0]
 80008ec:	80fb      	strh	r3, [r7, #6]
 80008ee:	460b      	mov	r3, r1
 80008f0:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	88db      	ldrh	r3, [r3, #6]
 80008fc:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80008fe:	88fb      	ldrh	r3, [r7, #6]
 8000900:	2bef      	cmp	r3, #239	; 0xef
 8000902:	d837      	bhi.n	8000974 <LCD_DrawImage+0x92>
 8000904:	88bb      	ldrh	r3, [r7, #4]
 8000906:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800090a:	d233      	bcs.n	8000974 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 800090c:	88fa      	ldrh	r2, [r7, #6]
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	4413      	add	r3, r2
 8000912:	2bf0      	cmp	r3, #240	; 0xf0
 8000914:	dc30      	bgt.n	8000978 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8000916:	88ba      	ldrh	r2, [r7, #4]
 8000918:	89bb      	ldrh	r3, [r7, #12]
 800091a:	4413      	add	r3, r2
 800091c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000920:	dc2c      	bgt.n	800097c <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	7a1b      	ldrb	r3, [r3, #8]
 8000926:	2b10      	cmp	r3, #16
 8000928:	d12a      	bne.n	8000980 <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800092a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800092e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000932:	88fa      	ldrh	r2, [r7, #6]
 8000934:	89fb      	ldrh	r3, [r7, #14]
 8000936:	4413      	add	r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	3b01      	subs	r3, #1
 800093c:	b29b      	uxth	r3, r3
 800093e:	b21c      	sxth	r4, r3
 8000940:	88ba      	ldrh	r2, [r7, #4]
 8000942:	89bb      	ldrh	r3, [r7, #12]
 8000944:	4413      	add	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	3b01      	subs	r3, #1
 800094a:	b29b      	uxth	r3, r3
 800094c:	b21b      	sxth	r3, r3
 800094e:	4622      	mov	r2, r4
 8000950:	f7ff fe82 	bl	8000658 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff fdcf 	bl	80004f8 <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	6818      	ldr	r0, [r3, #0]
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	89ba      	ldrh	r2, [r7, #12]
 8000962:	fb02 f303 	mul.w	r3, r2, r3
 8000966:	4619      	mov	r1, r3
 8000968:	f7ff fe40 	bl	80005ec <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff fdc3 	bl	80004f8 <setSPI_Size>
 8000972:	e006      	b.n	8000982 <LCD_DrawImage+0xa0>
    return;
 8000974:	bf00      	nop
 8000976:	e004      	b.n	8000982 <LCD_DrawImage+0xa0>
    return;
 8000978:	bf00      	nop
 800097a:	e002      	b.n	8000982 <LCD_DrawImage+0xa0>
    return;
 800097c:	bf00      	nop
 800097e:	e000      	b.n	8000982 <LCD_DrawImage+0xa0>
    return;
 8000980:	bf00      	nop
#endif
  }
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}

08000988 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b087      	sub	sp, #28
 800098c:	af02      	add	r7, sp, #8
 800098e:	4604      	mov	r4, r0
 8000990:	4608      	mov	r0, r1
 8000992:	4611      	mov	r1, r2
 8000994:	461a      	mov	r2, r3
 8000996:	4623      	mov	r3, r4
 8000998:	80fb      	strh	r3, [r7, #6]
 800099a:	4603      	mov	r3, r0
 800099c:	80bb      	strh	r3, [r7, #4]
 800099e:	460b      	mov	r3, r1
 80009a0:	807b      	strh	r3, [r7, #2]
 80009a2:	4613      	mov	r3, r2
 80009a4:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 80009a6:	88fa      	ldrh	r2, [r7, #6]
 80009a8:	887b      	ldrh	r3, [r7, #2]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d10a      	bne.n	80009c4 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80009ae:	88ba      	ldrh	r2, [r7, #4]
 80009b0:	883b      	ldrh	r3, [r7, #0]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d918      	bls.n	80009e8 <LCD_DrawLine+0x60>
 80009b6:	88bb      	ldrh	r3, [r7, #4]
 80009b8:	81bb      	strh	r3, [r7, #12]
 80009ba:	883b      	ldrh	r3, [r7, #0]
 80009bc:	80bb      	strh	r3, [r7, #4]
 80009be:	89bb      	ldrh	r3, [r7, #12]
 80009c0:	803b      	strh	r3, [r7, #0]
 80009c2:	e011      	b.n	80009e8 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 80009c4:	88ba      	ldrh	r2, [r7, #4]
 80009c6:	883b      	ldrh	r3, [r7, #0]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d10a      	bne.n	80009e2 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 80009cc:	88fa      	ldrh	r2, [r7, #6]
 80009ce:	887b      	ldrh	r3, [r7, #2]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d909      	bls.n	80009e8 <LCD_DrawLine+0x60>
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	81fb      	strh	r3, [r7, #14]
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	80fb      	strh	r3, [r7, #6]
 80009dc:	89fb      	ldrh	r3, [r7, #14]
 80009de:	807b      	strh	r3, [r7, #2]
 80009e0:	e002      	b.n	80009e8 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e009      	b.n	80009fc <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 80009e8:	883c      	ldrh	r4, [r7, #0]
 80009ea:	887a      	ldrh	r2, [r7, #2]
 80009ec:	88b9      	ldrh	r1, [r7, #4]
 80009ee:	88f8      	ldrh	r0, [r7, #6]
 80009f0:	8c3b      	ldrh	r3, [r7, #32]
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	4623      	mov	r3, r4
 80009f6:	f7ff ff3f 	bl	8000878 <LCD_Fill>
  return UG_RESULT_OK;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd90      	pop	{r4, r7, pc}

08000a04 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60ba      	str	r2, [r7, #8]
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4603      	mov	r3, r0
 8000a10:	81fb      	strh	r3, [r7, #14]
 8000a12:	460b      	mov	r3, r1
 8000a14:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f001 ff0e 	bl	8002838 <UG_FontSelect>
  UG_SetForecolor(color);
 8000a1c:	8b3b      	ldrh	r3, [r7, #24]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f002 f90c 	bl	8002c3c <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8000a24:	8bbb      	ldrh	r3, [r7, #28]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 f91a 	bl	8002c60 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8000a2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a30:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 f868 	bl	8002b0c <UG_PutString>
}
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <LCD_setPower+0x14>
 8000a54:	2329      	movs	r3, #41	; 0x29
 8000a56:	e000      	b.n	8000a5a <LCD_setPower+0x16>
 8000a58:	2328      	movs	r3, #40	; 0x28
 8000a5a:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8000a5c:	f107 030c 	add.w	r3, r7, #12
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fd86 	bl	8000574 <LCD_WriteCommand>
}
 8000a68:	bf00      	nop
 8000a6a:	3710      	adds	r7, #16
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <LCD_Update>:

static void LCD_Update(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff fd3f 	bl	80004f8 <setSPI_Size>
  #endif
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8000a86:	2201      	movs	r2, #1
 8000a88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8c:	4829      	ldr	r0, [pc, #164]	; (8000b34 <LCD_init+0xb4>)
 8000a8e:	f005 f88d 	bl	8005bac <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	4827      	ldr	r0, [pc, #156]	; (8000b34 <LCD_init+0xb4>)
 8000a98:	f005 f888 	bl	8005bac <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f003 fc71 	bl	8004384 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	4823      	ldr	r0, [pc, #140]	; (8000b34 <LCD_init+0xb4>)
 8000aa8:	f005 f880 	bl	8005bac <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000aac:	20c8      	movs	r0, #200	; 0xc8
 8000aae:	f003 fc69 	bl	8004384 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8000ab2:	4921      	ldr	r1, [pc, #132]	; (8000b38 <LCD_init+0xb8>)
 8000ab4:	4821      	ldr	r0, [pc, #132]	; (8000b3c <LCD_init+0xbc>)
 8000ab6:	f001 fe25 	bl	8002704 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8000aba:	4921      	ldr	r1, [pc, #132]	; (8000b40 <LCD_init+0xc0>)
 8000abc:	2000      	movs	r0, #0
 8000abe:	f003 f977 	bl	8003db0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8000ac2:	4920      	ldr	r1, [pc, #128]	; (8000b44 <LCD_init+0xc4>)
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f003 f973 	bl	8003db0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8000aca:	491f      	ldr	r1, [pc, #124]	; (8000b48 <LCD_init+0xc8>)
 8000acc:	2002      	movs	r0, #2
 8000ace:	f003 f96f 	bl	8003db0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8000ad2:	491e      	ldr	r1, [pc, #120]	; (8000b4c <LCD_init+0xcc>)
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f003 f96b 	bl	8003db0 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f002 f8d2 	bl	8002c84 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f002 f8e3 	bl	8002cac <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	80fb      	strh	r3, [r7, #6]
 8000aea:	e013      	b.n	8000b14 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	3301      	adds	r3, #1
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <LCD_init+0xd0>)
 8000af2:	441a      	add	r2, r3
 8000af4:	88fb      	ldrh	r3, [r7, #6]
 8000af6:	4916      	ldr	r1, [pc, #88]	; (8000b50 <LCD_init+0xd0>)
 8000af8:	5ccb      	ldrb	r3, [r1, r3]
 8000afa:	4619      	mov	r1, r3
 8000afc:	4610      	mov	r0, r2
 8000afe:	f7ff fd39 	bl	8000574 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8000b02:	88fb      	ldrh	r3, [r7, #6]
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <LCD_init+0xd0>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	3302      	adds	r3, #2
 8000b12:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	2b4b      	cmp	r3, #75	; 0x4b
 8000b18:	d9e8      	bls.n	8000aec <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f001 fe9c 	bl	8002858 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff ff8f 	bl	8000a44 <LCD_setPower>
  UG_Update();
 8000b26:	f003 f965 	bl	8003df4 <UG_Update>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	48001000 	.word	0x48001000
 8000b38:	20000004 	.word	0x20000004
 8000b3c:	20000038 	.word	0x20000038
 8000b40:	08000989 	.word	0x08000989
 8000b44:	08000879 	.word	0x08000879
 8000b48:	0800080d 	.word	0x0800080d
 8000b4c:	080008e3 	.word	0x080008e3
 8000b50:	0800c4cc 	.word	0x0800c4cc

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <main+0xa8>)
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	4a27      	ldr	r2, [pc, #156]	; (8000bfc <main+0xa8>)
 8000b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b64:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;                                // Clear counter
 8000b66:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <main+0xac>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
	  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;             // Enable counter
 8000b6c:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <main+0xac>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b72:	f003 fb92 	bl	800429a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b76:	f000 f849 	bl	8000c0c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b7a:	f000 f8a9 	bl	8000cd0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 fed5 	bl	800192c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b82:	f000 f8d9 	bl	8000d38 <MX_ADC1_Init>
  MX_CAN1_Init();
 8000b86:	f000 f93b 	bl	8000e00 <MX_CAN1_Init>
  MX_COMP1_Init();
 8000b8a:	f000 f96d 	bl	8000e68 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000b8e:	f000 f999 	bl	8000ec4 <MX_COMP2_Init>
  MX_I2C1_SMBUS_Init();
 8000b92:	f000 f9c3 	bl	8000f1c <MX_I2C1_SMBUS_Init>
  MX_I2C2_SMBUS_Init();
 8000b96:	f000 f9fb 	bl	8000f90 <MX_I2C2_SMBUS_Init>
  MX_LPUART1_UART_Init();
 8000b9a:	f000 fa3b 	bl	8001014 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000b9e:	f000 fa85 	bl	80010ac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ba2:	f000 fad1 	bl	8001148 <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8000ba6:	f000 fb1b 	bl	80011e0 <MX_SAI1_Init>
  MX_SAI2_Init();
 8000baa:	f000 fbb1 	bl	8001310 <MX_SAI2_Init>
  MX_SPI3_Init();
 8000bae:	f000 fc17 	bl	80013e0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000bb2:	f000 fc53 	bl	800145c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bb6:	f000 fd09 	bl	80015cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000bba:	f000 fd6b 	bl	8001694 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000bbe:	f000 fdcf 	bl	8001760 <MX_TIM4_Init>
  MX_TIM15_Init();
 8000bc2:	f000 fe27 	bl	8001814 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8000bc6:	f000 fea9 	bl	800191c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
LCD_init();
 8000bca:	f7ff ff59 	bl	8000a80 <LCD_init>
  while (1)
  {
    /* USER CODE END WHILE */
//	  LCD_Test();
//	  LCD_PutStr(50, 56, "STARTING TEST", DEFAULT_FONT, C_GREEN, C_BLACK);
	  UG_FontSetTransparency(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f002 f880 	bl	8002cd4 <UG_FontSetTransparency>
	  UG_FillScreen(C_POWDER_BLUE);
 8000bd4:	f64a 60fc 	movw	r0, #44796	; 0xaefc
 8000bd8:	f001 fe3e 	bl	8002858 <UG_FillScreen>
//	  UG_Update();
	  LCD_PutStr(50,56, "TESTING", DEFAULT_FONT, C_GREEN, C_BLACK);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9301      	str	r3, [sp, #4]
 8000be0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000be4:	9300      	str	r3, [sp, #0]
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <main+0xb0>)
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <main+0xb4>)
 8000bea:	2138      	movs	r1, #56	; 0x38
 8000bec:	2032      	movs	r0, #50	; 0x32
 8000bee:	f7ff ff09 	bl	8000a04 <LCD_PutStr>
	  HAL_Delay(500);
 8000bf2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bf6:	f003 fbc5 	bl	8004384 <HAL_Delay>
	  UG_FontSetTransparency(1);
 8000bfa:	e7e8      	b.n	8000bce <main+0x7a>
 8000bfc:	e000edf0 	.word	0xe000edf0
 8000c00:	e0001000 	.word	0xe0001000
 8000c04:	0800b0b0 	.word	0x0800b0b0
 8000c08:	0800b0a8 	.word	0x0800b0a8

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b096      	sub	sp, #88	; 0x58
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	2244      	movs	r2, #68	; 0x44
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f00a fa0c 	bl	800b038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	463b      	mov	r3, r7
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c2e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c32:	f005 f803 	bl	8005c3c <HAL_PWREx_ControlVoltageScaling>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c3c:	f000 ff96 	bl	8001b6c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c40:	f004 ffcc 	bl	8005bdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c44:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <SystemClock_Config+0xc0>)
 8000c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c4a:	4a20      	ldr	r2, [pc, #128]	; (8000ccc <SystemClock_Config+0xc0>)
 8000c4c:	f023 0318 	bic.w	r3, r3, #24
 8000c50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c54:	2314      	movs	r3, #20
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c64:	2360      	movs	r3, #96	; 0x60
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000c74:	2310      	movs	r3, #16
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f005 f88b 	bl	8005da4 <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c94:	f000 ff6a 	bl	8001b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c98:	230f      	movs	r3, #15
 8000c9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	2101      	movs	r1, #1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f005 fc91 	bl	80065d8 <HAL_RCC_ClockConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000cbc:	f000 ff56 	bl	8001b6c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000cc0:	f007 f99a 	bl	8007ff8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cc4:	bf00      	nop
 8000cc6:	3758      	adds	r7, #88	; 0x58
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0a6      	sub	sp, #152	; 0x98
 8000cd4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd6:	1d3b      	adds	r3, r7, #4
 8000cd8:	2294      	movs	r2, #148	; 0x94
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00a f9ab 	bl	800b038 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000ce2:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8000ce6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cf0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000cf8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000cfc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000d06:	2318      	movs	r3, #24
 8000d08:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <PeriphCommonClock_Config+0x64>)
 8000d18:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 ff19 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000d28:	f000 ff20 	bl	8001b6c <Error_Handler>
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3798      	adds	r7, #152	; 0x98
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	01110000 	.word	0x01110000

08000d38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d4e:	4b29      	ldr	r3, [pc, #164]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d50:	4a29      	ldr	r2, [pc, #164]	; (8000df8 <MX_ADC1_Init+0xc0>)
 8000d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d54:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5a:	4b26      	ldr	r3, [pc, #152]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d60:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d66:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d92:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dae:	4811      	ldr	r0, [pc, #68]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000db0:	f003 fcac 	bl	800470c <HAL_ADC_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000dba:	f000 fed7 	bl	8001b6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_ADC1_Init+0xc4>)
 8000dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dca:	237f      	movs	r3, #127	; 0x7f
 8000dcc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <MX_ADC1_Init+0xbc>)
 8000ddc:	f003 fddc 	bl	8004998 <HAL_ADC_ConfigChannel>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000de6:	f000 fec1 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000ac 	.word	0x200000ac
 8000df8:	50040000 	.word	0x50040000
 8000dfc:	04300002 	.word	0x04300002

08000e00 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <MX_CAN1_Init+0x64>)
 8000e08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_CAN1_Init+0x60>)
 8000e4e:	f004 f99f 	bl	8005190 <HAL_CAN_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000e58:	f000 fe88 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000114 	.word	0x20000114
 8000e64:	40006400 	.word	0x40006400

08000e68 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000e6c:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000e6e:	4a13      	ldr	r2, [pc, #76]	; (8000ebc <MX_COMP1_Init+0x54>)
 8000e70:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000e74:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <MX_COMP1_Init+0x58>)
 8000e76:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_COMP1_Init+0x50>)
 8000ea4:	f004 fb18 	bl	80054d8 <HAL_COMP_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8000eae:	f000 fe5d 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000013c 	.word	0x2000013c
 8000ebc:	40010200 	.word	0x40010200
 8000ec0:	00800030 	.word	0x00800030

08000ec4 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000eca:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <MX_COMP2_Init+0x54>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000ed0:	2270      	movs	r2, #112	; 0x70
 8000ed2:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000ed6:	2280      	movs	r2, #128	; 0x80
 8000ed8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_COMP2_Init+0x50>)
 8000f00:	f004 faea 	bl	80054d8 <HAL_COMP_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8000f0a:	f000 fe2f 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000168 	.word	0x20000168
 8000f18:	40010204 	.word	0x40010204

08000f1c <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f22:	4a19      	ldr	r2, [pc, #100]	; (8000f88 <MX_I2C1_SMBUS_Init+0x6c>)
 8000f24:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f28:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <MX_I2C1_SMBUS_Init+0x70>)
 8000f2a:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000f62:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f6a:	f248 1286 	movw	r2, #33158	; 0x8186
 8000f6e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_I2C1_SMBUS_Init+0x68>)
 8000f72:	f007 fec9 	bl	8008d08 <HAL_SMBUS_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C1_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000f7c:	f000 fdf6 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000194 	.word	0x20000194
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	00707cbb 	.word	0x00707cbb

08000f90 <MX_I2C2_SMBUS_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_SMBUS_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hsmbus2.Instance = I2C2;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000f96:	4a1d      	ldr	r2, [pc, #116]	; (800100c <MX_I2C2_SMBUS_Init+0x7c>)
 8000f98:	601a      	str	r2, [r3, #0]
  hsmbus2.Init.Timing = 0x00707CBB;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_I2C2_SMBUS_Init+0x80>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hsmbus2.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hsmbus2.Init.OwnAddress1 = 2;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fa8:	2202      	movs	r2, #2
 8000faa:	60da      	str	r2, [r3, #12]
  hsmbus2.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	611a      	str	r2, [r3, #16]
  hsmbus2.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
  hsmbus2.Init.OwnAddress2 = 0;
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  hsmbus2.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 8000fbe:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
  hsmbus2.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	621a      	str	r2, [r3, #32]
  hsmbus2.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 8000fca:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus2.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus2.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus2.Init.SMBusTimeout = 0x00008186;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fde:	f248 1286 	movw	r2, #33158	; 0x8186
 8000fe2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus2) != HAL_OK)
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000fe6:	f007 fe8f 	bl	8008d08 <HAL_SMBUS_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C2_SMBUS_Init+0x64>
  {
    Error_Handler();
 8000ff0:	f000 fdbc 	bl	8001b6c <Error_Handler>
  }

  /** configuration Alert Mode
  */
  if (HAL_SMBUS_EnableAlert_IT(&hsmbus2) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_I2C2_SMBUS_Init+0x78>)
 8000ff6:	f007 ff3f 	bl	8008e78 <HAL_SMBUS_EnableAlert_IT>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C2_SMBUS_Init+0x74>
  {
    Error_Handler();
 8001000:	f000 fdb4 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200001e4 	.word	0x200001e4
 800100c:	40005800 	.word	0x40005800
 8001010:	00707cbb 	.word	0x00707cbb

08001014 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 800101a:	4a23      	ldr	r2, [pc, #140]	; (80010a8 <MX_LPUART1_UART_Init+0x94>)
 800101c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001020:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001024:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 800103a:	220c      	movs	r2, #12
 800103c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001052:	2200      	movs	r2, #0
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800105c:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 800105e:	f009 f983 	bl	800a368 <HAL_UART_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001068:	f000 fd80 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800106c:	2100      	movs	r1, #0
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001070:	f009 ff18 	bl	800aea4 <HAL_UARTEx_SetTxFifoThreshold>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800107a:	f000 fd77 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800107e:	2100      	movs	r1, #0
 8001080:	4808      	ldr	r0, [pc, #32]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001082:	f009 ff4d 	bl	800af20 <HAL_UARTEx_SetRxFifoThreshold>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800108c:	f000 fd6e 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_LPUART1_UART_Init+0x90>)
 8001092:	f009 fece 	bl	800ae32 <HAL_UARTEx_DisableFifoMode>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800109c:	f000 fd66 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000234 	.word	0x20000234
 80010a8:	40008000 	.word	0x40008000

080010ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010b2:	4a24      	ldr	r2, [pc, #144]	; (8001144 <MX_USART2_UART_Init+0x98>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b22      	ldr	r3, [pc, #136]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010d8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010dc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <MX_USART2_UART_Init+0x94>)
 80010f8:	f009 f936 	bl	800a368 <HAL_UART_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001102:	f000 fd33 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <MX_USART2_UART_Init+0x94>)
 800110a:	f009 fecb 	bl	800aea4 <HAL_UARTEx_SetTxFifoThreshold>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001114:	f000 fd2a 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	4809      	ldr	r0, [pc, #36]	; (8001140 <MX_USART2_UART_Init+0x94>)
 800111c:	f009 ff00 	bl	800af20 <HAL_UARTEx_SetRxFifoThreshold>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001126:	f000 fd21 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_USART2_UART_Init+0x94>)
 800112c:	f009 fe81 	bl	800ae32 <HAL_UARTEx_DisableFifoMode>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001136:	f000 fd19 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002c8 	.word	0x200002c8
 8001144:	40004400 	.word	0x40004400

08001148 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800114e:	4a23      	ldr	r2, [pc, #140]	; (80011dc <MX_USART3_UART_Init+0x94>)
 8001150:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001154:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001158:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800115a:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800116e:	220c      	movs	r2, #12
 8001170:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 800118c:	2200      	movs	r2, #0
 800118e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001190:	4811      	ldr	r0, [pc, #68]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 8001192:	f009 f8e9 	bl	800a368 <HAL_UART_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800119c:	f000 fce6 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011a0:	2100      	movs	r1, #0
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 80011a4:	f009 fe7e 	bl	800aea4 <HAL_UARTEx_SetTxFifoThreshold>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011ae:	f000 fcdd 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b2:	2100      	movs	r1, #0
 80011b4:	4808      	ldr	r0, [pc, #32]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 80011b6:	f009 feb3 	bl	800af20 <HAL_UARTEx_SetRxFifoThreshold>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011c0:	f000 fcd4 	bl	8001b6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_USART3_UART_Init+0x90>)
 80011c6:	f009 fe34 	bl	800ae32 <HAL_UARTEx_DisableFifoMode>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011d0:	f000 fccc 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000035c 	.word	0x2000035c
 80011dc:	40004800 	.word	0x40004800

080011e0 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 80011e4:	4b45      	ldr	r3, [pc, #276]	; (80012fc <MX_SAI1_Init+0x11c>)
 80011e6:	4a46      	ldr	r2, [pc, #280]	; (8001300 <MX_SAI1_Init+0x120>)
 80011e8:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <MX_SAI1_Init+0x11c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80011f0:	4b42      	ldr	r3, [pc, #264]	; (80012fc <MX_SAI1_Init+0x11c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <MX_SAI1_Init+0x11c>)
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80011fc:	4b3f      	ldr	r3, [pc, #252]	; (80012fc <MX_SAI1_Init+0x11c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001202:	4b3e      	ldr	r3, [pc, #248]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001204:	2200      	movs	r2, #0
 8001206:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001208:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <MX_SAI1_Init+0x11c>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800120e:	4b3b      	ldr	r3, [pc, #236]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001214:	4b39      	ldr	r3, [pc, #228]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001216:	2200      	movs	r2, #0
 8001218:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <MX_SAI1_Init+0x11c>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001220:	4b36      	ldr	r3, [pc, #216]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001228:	4a36      	ldr	r2, [pc, #216]	; (8001304 <MX_SAI1_Init+0x124>)
 800122a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800122c:	4b33      	ldr	r3, [pc, #204]	; (80012fc <MX_SAI1_Init+0x11c>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <MX_SAI1_Init+0x11c>)
 800123a:	2200      	movs	r2, #0
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800123e:	4b2f      	ldr	r3, [pc, #188]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_SAI1_Init+0x11c>)
 800124e:	2200      	movs	r2, #0
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <MX_SAI1_Init+0x11c>)
 800125c:	2208      	movs	r2, #8
 800125e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001262:	2201      	movs	r2, #1
 8001264:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001266:	4b25      	ldr	r3, [pc, #148]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001268:	2200      	movs	r2, #0
 800126a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800126c:	4b23      	ldr	r3, [pc, #140]	; (80012fc <MX_SAI1_Init+0x11c>)
 800126e:	2200      	movs	r2, #0
 8001270:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001274:	2200      	movs	r2, #0
 8001276:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_SAI1_Init+0x11c>)
 800127a:	2200      	movs	r2, #0
 800127c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001280:	2200      	movs	r2, #0
 8001282:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001286:	2201      	movs	r2, #1
 8001288:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_SAI1_Init+0x11c>)
 800128c:	2200      	movs	r2, #0
 800128e:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001290:	481a      	ldr	r0, [pc, #104]	; (80012fc <MX_SAI1_Init+0x11c>)
 8001292:	f007 f9ed 	bl	8008670 <HAL_SAI_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 800129c:	f000 fc66 	bl	8001b6c <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_SAI1_Init+0x128>)
 80012a2:	4a1a      	ldr	r2, [pc, #104]	; (800130c <MX_SAI1_Init+0x12c>)
 80012a4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_SAI1_Init+0x128>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_SAI1_Init+0x128>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_SAI1_Init+0x128>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_SAI1_Init+0x128>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80012be:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_SAI1_Init+0x128>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_SAI1_Init+0x128>)
 80012c6:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <MX_SAI1_Init+0x124>)
 80012c8:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_SAI1_Init+0x128>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MX_SAI1_Init+0x128>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_SAI1_Init+0x128>)
 80012d8:	2200      	movs	r2, #0
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <MX_SAI1_Init+0x128>)
 80012de:	2200      	movs	r2, #0
 80012e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80012e2:	2302      	movs	r3, #2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4807      	ldr	r0, [pc, #28]	; (8001308 <MX_SAI1_Init+0x128>)
 80012ea:	f007 f98f 	bl	800860c <HAL_SAI_InitProtocol>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 80012f4:	f000 fc3a 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200003f0 	.word	0x200003f0
 8001300:	40015424 	.word	0x40015424
 8001304:	0002ee00 	.word	0x0002ee00
 8001308:	20000484 	.word	0x20000484
 800130c:	40015404 	.word	0x40015404

08001310 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8001314:	4b2f      	ldr	r3, [pc, #188]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001316:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <MX_SAI2_Init+0xc8>)
 8001318:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <MX_SAI2_Init+0xc4>)
 800131c:	2200      	movs	r2, #0
 800131e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001328:	2240      	movs	r2, #64	; 0x40
 800132a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800132c:	4b29      	ldr	r3, [pc, #164]	; (80013d4 <MX_SAI2_Init+0xc4>)
 800132e:	2200      	movs	r2, #0
 8001330:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001334:	2200      	movs	r2, #0
 8001336:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <MX_SAI2_Init+0xc4>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001344:	4b23      	ldr	r3, [pc, #140]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001346:	2200      	movs	r2, #0
 8001348:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_SAI2_Init+0xc4>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001352:	2200      	movs	r2, #0
 8001354:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <MX_SAI2_Init+0xcc>)
 800135a:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_SAI2_Init+0xc4>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001368:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <MX_SAI2_Init+0xc4>)
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_SAI2_Init+0xc4>)
 800137e:	2200      	movs	r2, #0
 8001380:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001388:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <MX_SAI2_Init+0xc4>)
 800138c:	2208      	movs	r2, #8
 800138e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001392:	2201      	movs	r2, #1
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001396:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <MX_SAI2_Init+0xc4>)
 8001398:	2200      	movs	r2, #0
 800139a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800139c:	4b0d      	ldr	r3, [pc, #52]	; (80013d4 <MX_SAI2_Init+0xc4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <MX_SAI2_Init+0xc4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <MX_SAI2_Init+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <MX_SAI2_Init+0xc4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80013b4:	4b07      	ldr	r3, [pc, #28]	; (80013d4 <MX_SAI2_Init+0xc4>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <MX_SAI2_Init+0xc4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	671a      	str	r2, [r3, #112]	; 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	; (80013d4 <MX_SAI2_Init+0xc4>)
 80013c2:	f007 f955 	bl	8008670 <HAL_SAI_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 80013cc:	f000 fbce 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000518 	.word	0x20000518
 80013d8:	40015804 	.word	0x40015804
 80013dc:	0002ee00 	.word	0x0002ee00

080013e0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <MX_SPI3_Init+0x74>)
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <MX_SPI3_Init+0x78>)
 80013e8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013ea:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <MX_SPI3_Init+0x74>)
 80013ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013f0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <MX_SPI3_Init+0x74>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_SPI3_Init+0x74>)
 80013fa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013fe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_SPI3_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <MX_SPI3_Init+0x74>)
 8001408:	2200      	movs	r2, #0
 800140a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_SPI3_Init+0x74>)
 800140e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001412:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_SPI3_Init+0x74>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_SPI3_Init+0x74>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SPI3_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_SPI3_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SPI3_Init+0x74>)
 800142e:	2207      	movs	r2, #7
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_SPI3_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SPI3_Init+0x74>)
 800143a:	2208      	movs	r2, #8
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_SPI3_Init+0x74>)
 8001440:	f007 fd6d 	bl	8008f1e <HAL_SPI_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800144a:	f000 fb8f 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200005ac 	.word	0x200005ac
 8001458:	40003c00 	.word	0x40003c00

0800145c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b098      	sub	sp, #96	; 0x60
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001462:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800146e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800148e:	463b      	mov	r3, r7
 8001490:	222c      	movs	r2, #44	; 0x2c
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f009 fdcf 	bl	800b038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800149a:	4b4a      	ldr	r3, [pc, #296]	; (80015c4 <MX_TIM1_Init+0x168>)
 800149c:	4a4a      	ldr	r2, [pc, #296]	; (80015c8 <MX_TIM1_Init+0x16c>)
 800149e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014a0:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <MX_TIM1_Init+0x168>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b47      	ldr	r3, [pc, #284]	; (80015c4 <MX_TIM1_Init+0x168>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ac:	4b45      	ldr	r3, [pc, #276]	; (80015c4 <MX_TIM1_Init+0x168>)
 80014ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <MX_TIM1_Init+0x168>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ba:	4b42      	ldr	r3, [pc, #264]	; (80015c4 <MX_TIM1_Init+0x168>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <MX_TIM1_Init+0x168>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014c6:	483f      	ldr	r0, [pc, #252]	; (80015c4 <MX_TIM1_Init+0x168>)
 80014c8:	f008 f8a6 	bl	8009618 <HAL_TIM_PWM_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80014d2:	f000 fb4b 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014e6:	4619      	mov	r1, r3
 80014e8:	4836      	ldr	r0, [pc, #216]	; (80015c4 <MX_TIM1_Init+0x168>)
 80014ea:	f008 fd71 	bl	8009fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80014f4:	f000 fb3a 	bl	8001b6c <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 80014f8:	2301      	movs	r3, #1
 80014fa:	64bb      	str	r3, [r7, #72]	; 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001504:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001508:	461a      	mov	r2, r3
 800150a:	2101      	movs	r1, #1
 800150c:	482d      	ldr	r0, [pc, #180]	; (80015c4 <MX_TIM1_Init+0x168>)
 800150e:	f008 fe65 	bl	800a1dc <HAL_TIMEx_ConfigBreakInput>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001518:	f000 fb28 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 800151c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001520:	461a      	mov	r2, r3
 8001522:	2102      	movs	r1, #2
 8001524:	4827      	ldr	r0, [pc, #156]	; (80015c4 <MX_TIM1_Init+0x168>)
 8001526:	f008 fe59 	bl	800a1dc <HAL_TIMEx_ConfigBreakInput>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001530:	f000 fb1c 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001534:	2360      	movs	r3, #96	; 0x60
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153c:	2300      	movs	r3, #0
 800153e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001554:	2208      	movs	r2, #8
 8001556:	4619      	mov	r1, r3
 8001558:	481a      	ldr	r0, [pc, #104]	; (80015c4 <MX_TIM1_Init+0x168>)
 800155a:	f008 f8b5 	bl	80096c8 <HAL_TIM_PWM_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8001564:	f000 fb02 	bl	8001b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001568:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800156c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800156e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001572:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 800157c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001580:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001582:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001586:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 800158c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001590:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001596:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	4619      	mov	r1, r3
 80015a4:	4807      	ldr	r0, [pc, #28]	; (80015c4 <MX_TIM1_Init+0x168>)
 80015a6:	f008 fd9b 	bl	800a0e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 80015b0:	f000 fadc 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015b4:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MX_TIM1_Init+0x168>)
 80015b6:	f000 fe8d 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 80015ba:	bf00      	nop
 80015bc:	3760      	adds	r7, #96	; 0x60
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000610 	.word	0x20000610
 80015c8:	40012c00 	.word	0x40012c00

080015cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015de:	463b      	mov	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <MX_TIM2_Init+0xc4>)
 80015f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <MX_TIM2_Init+0xc4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fe:	4b24      	ldr	r3, [pc, #144]	; (8001690 <MX_TIM2_Init+0xc4>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001604:	4b22      	ldr	r3, [pc, #136]	; (8001690 <MX_TIM2_Init+0xc4>)
 8001606:	f04f 32ff 	mov.w	r2, #4294967295
 800160a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b20      	ldr	r3, [pc, #128]	; (8001690 <MX_TIM2_Init+0xc4>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <MX_TIM2_Init+0xc4>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001618:	481d      	ldr	r0, [pc, #116]	; (8001690 <MX_TIM2_Init+0xc4>)
 800161a:	f007 fffd 	bl	8009618 <HAL_TIM_PWM_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001624:	f000 faa2 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4816      	ldr	r0, [pc, #88]	; (8001690 <MX_TIM2_Init+0xc4>)
 8001638:	f008 fcca 	bl	8009fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001642:	f000 fa93 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001646:	2360      	movs	r3, #96	; 0x60
 8001648:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	480c      	ldr	r0, [pc, #48]	; (8001690 <MX_TIM2_Init+0xc4>)
 800165e:	f008 f833 	bl	80096c8 <HAL_TIM_PWM_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001668:	f000 fa80 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	2208      	movs	r2, #8
 8001670:	4619      	mov	r1, r3
 8001672:	4807      	ldr	r0, [pc, #28]	; (8001690 <MX_TIM2_Init+0xc4>)
 8001674:	f008 f828 	bl	80096c8 <HAL_TIM_PWM_ConfigChannel>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800167e:	f000 fa75 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001682:	4803      	ldr	r0, [pc, #12]	; (8001690 <MX_TIM2_Init+0xc4>)
 8001684:	f000 fe26 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 8001688:	bf00      	nop
 800168a:	3728      	adds	r7, #40	; 0x28
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000065c 	.word	0x2000065c

08001694 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a6:	463b      	mov	r3, r7
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
 80016b4:	615a      	str	r2, [r3, #20]
 80016b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <MX_TIM3_Init+0xc4>)
 80016ba:	4a28      	ldr	r2, [pc, #160]	; (800175c <MX_TIM3_Init+0xc8>)
 80016bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <MX_TIM3_Init+0xc4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c4:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_TIM3_Init+0xc4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <MX_TIM3_Init+0xc4>)
 80016cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_TIM3_Init+0xc4>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <MX_TIM3_Init+0xc4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016de:	481e      	ldr	r0, [pc, #120]	; (8001758 <MX_TIM3_Init+0xc4>)
 80016e0:	f007 ff9a 	bl	8009618 <HAL_TIM_PWM_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80016ea:	f000 fa3f 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4619      	mov	r1, r3
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <MX_TIM3_Init+0xc4>)
 80016fe:	f008 fc67 	bl	8009fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001708:	f000 fa30 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800170c:	2360      	movs	r3, #96	; 0x60
 800170e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800171c:	463b      	mov	r3, r7
 800171e:	2204      	movs	r2, #4
 8001720:	4619      	mov	r1, r3
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_TIM3_Init+0xc4>)
 8001724:	f007 ffd0 	bl	80096c8 <HAL_TIM_PWM_ConfigChannel>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800172e:	f000 fa1d 	bl	8001b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	2208      	movs	r2, #8
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <MX_TIM3_Init+0xc4>)
 800173a:	f007 ffc5 	bl	80096c8 <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001744:	f000 fa12 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001748:	4803      	ldr	r0, [pc, #12]	; (8001758 <MX_TIM3_Init+0xc4>)
 800174a:	f000 fdc3 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200006a8 	.word	0x200006a8
 800175c:	40000400 	.word	0x40000400

08001760 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001772:	463b      	mov	r3, r7
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]
 8001782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001784:	4b21      	ldr	r3, [pc, #132]	; (800180c <MX_TIM4_Init+0xac>)
 8001786:	4a22      	ldr	r2, [pc, #136]	; (8001810 <MX_TIM4_Init+0xb0>)
 8001788:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <MX_TIM4_Init+0xac>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <MX_TIM4_Init+0xac>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_TIM4_Init+0xac>)
 8001798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800179c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b1b      	ldr	r3, [pc, #108]	; (800180c <MX_TIM4_Init+0xac>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <MX_TIM4_Init+0xac>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017aa:	4818      	ldr	r0, [pc, #96]	; (800180c <MX_TIM4_Init+0xac>)
 80017ac:	f007 ff34 	bl	8009618 <HAL_TIM_PWM_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80017b6:	f000 f9d9 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	4810      	ldr	r0, [pc, #64]	; (800180c <MX_TIM4_Init+0xac>)
 80017ca:	f008 fc01 	bl	8009fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80017d4:	f000 f9ca 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d8:	2360      	movs	r3, #96	; 0x60
 80017da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	220c      	movs	r2, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <MX_TIM4_Init+0xac>)
 80017f0:	f007 ff6a 	bl	80096c8 <HAL_TIM_PWM_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80017fa:	f000 f9b7 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017fe:	4803      	ldr	r0, [pc, #12]	; (800180c <MX_TIM4_Init+0xac>)
 8001800:	f000 fd68 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 8001804:	bf00      	nop
 8001806:	3728      	adds	r7, #40	; 0x28
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200006f4 	.word	0x200006f4
 8001810:	40000800 	.word	0x40000800

08001814 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b096      	sub	sp, #88	; 0x58
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001826:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]
 8001836:	615a      	str	r2, [r3, #20]
 8001838:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	222c      	movs	r2, #44	; 0x2c
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f009 fbf9 	bl	800b038 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001846:	4b33      	ldr	r3, [pc, #204]	; (8001914 <MX_TIM15_Init+0x100>)
 8001848:	4a33      	ldr	r2, [pc, #204]	; (8001918 <MX_TIM15_Init+0x104>)
 800184a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800184c:	4b31      	ldr	r3, [pc, #196]	; (8001914 <MX_TIM15_Init+0x100>)
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <MX_TIM15_Init+0x100>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001858:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <MX_TIM15_Init+0x100>)
 800185a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800185e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001860:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <MX_TIM15_Init+0x100>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001866:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <MX_TIM15_Init+0x100>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	4b29      	ldr	r3, [pc, #164]	; (8001914 <MX_TIM15_Init+0x100>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001872:	4828      	ldr	r0, [pc, #160]	; (8001914 <MX_TIM15_Init+0x100>)
 8001874:	f007 fed0 	bl	8009618 <HAL_TIM_PWM_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800187e:	f000 f975 	bl	8001b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800188a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800188e:	4619      	mov	r1, r3
 8001890:	4820      	ldr	r0, [pc, #128]	; (8001914 <MX_TIM15_Init+0x100>)
 8001892:	f008 fb9d 	bl	8009fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800189c:	f000 f966 	bl	8001b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a0:	2360      	movs	r3, #96	; 0x60
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ac:	2300      	movs	r3, #0
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018b4:	2300      	movs	r3, #0
 80018b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	4813      	ldr	r0, [pc, #76]	; (8001914 <MX_TIM15_Init+0x100>)
 80018c6:	f007 feff 	bl	80096c8 <HAL_TIM_PWM_ConfigChannel>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80018d0:	f000 f94c 	bl	8001b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <MX_TIM15_Init+0x100>)
 80018f8:	f008 fbf2 	bl	800a0e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001902:	f000 f933 	bl	8001b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001906:	4803      	ldr	r0, [pc, #12]	; (8001914 <MX_TIM15_Init+0x100>)
 8001908:	f000 fce4 	bl	80022d4 <HAL_TIM_MspPostInit>

}
 800190c:	bf00      	nop
 800190e:	3758      	adds	r7, #88	; 0x58
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000740 	.word	0x20000740
 8001918:	40014000 	.word	0x40014000

0800191c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08e      	sub	sp, #56	; 0x38
 8001930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001942:	4b85      	ldr	r3, [pc, #532]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	4a84      	ldr	r2, [pc, #528]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001948:	f043 0310 	orr.w	r3, r3, #16
 800194c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194e:	4b82      	ldr	r3, [pc, #520]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	4b7f      	ldr	r3, [pc, #508]	; (8001b58 <MX_GPIO_Init+0x22c>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a7e      	ldr	r2, [pc, #504]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b7c      	ldr	r3, [pc, #496]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001972:	4b79      	ldr	r3, [pc, #484]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	4a78      	ldr	r2, [pc, #480]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197e:	4b76      	ldr	r3, [pc, #472]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	61bb      	str	r3, [r7, #24]
 8001988:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800198a:	4b73      	ldr	r3, [pc, #460]	; (8001b58 <MX_GPIO_Init+0x22c>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	4a72      	ldr	r2, [pc, #456]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001996:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <MX_GPIO_Init+0x22c>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	4b6d      	ldr	r3, [pc, #436]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a6:	4a6c      	ldr	r2, [pc, #432]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ae:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ba:	4b67      	ldr	r3, [pc, #412]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019be:	4a66      	ldr	r2, [pc, #408]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c6:	4b64      	ldr	r3, [pc, #400]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d2:	4b61      	ldr	r3, [pc, #388]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	4a60      	ldr	r2, [pc, #384]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019de:	4b5e      	ldr	r3, [pc, #376]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	4a5a      	ldr	r2, [pc, #360]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f6:	4b58      	ldr	r3, [pc, #352]	; (8001b58 <MX_GPIO_Init+0x22c>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001a02:	f004 f9bf 	bl	8005d84 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001a0c:	4853      	ldr	r0, [pc, #332]	; (8001b5c <MX_GPIO_Init+0x230>)
 8001a0e:	f004 f8cd 	bl	8005bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001a12:	2200      	movs	r2, #0
 8001a14:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8001a18:	4851      	ldr	r0, [pc, #324]	; (8001b60 <MX_GPIO_Init+0x234>)
 8001a1a:	f004 f8c7 	bl	8005bac <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a1e:	2310      	movs	r3, #16
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a2e:	2305      	movs	r3, #5
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f003 ff24 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a40:	23e0      	movs	r3, #224	; 0xe0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a56:	f003 ff17 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001a5a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a60:	2311      	movs	r3, #17
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	483a      	ldr	r0, [pc, #232]	; (8001b5c <MX_GPIO_Init+0x230>)
 8001a74:	f003 ff08 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8001a78:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4833      	ldr	r0, [pc, #204]	; (8001b60 <MX_GPIO_Init+0x234>)
 8001a92:	f003 fef9 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001a96:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001a9c:	2311      	movs	r3, #17
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aac:	4619      	mov	r1, r3
 8001aae:	482c      	ldr	r0, [pc, #176]	; (8001b60 <MX_GPIO_Init+0x234>)
 8001ab0:	f003 feea 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4826      	ldr	r0, [pc, #152]	; (8001b64 <MX_GPIO_Init+0x238>)
 8001aca:	f003 fedd 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ace:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481f      	ldr	r0, [pc, #124]	; (8001b68 <MX_GPIO_Init+0x23c>)
 8001aec:	f003 fecc 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001af0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b02:	230a      	movs	r3, #10
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b10:	f003 feba 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b26:	4619      	mov	r1, r3
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f003 feac 	bl	8005888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b30:	2304      	movs	r3, #4
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001b40:	230c      	movs	r3, #12
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <MX_GPIO_Init+0x238>)
 8001b4c:	f003 fe9c 	bl	8005888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b50:	bf00      	nop
 8001b52:	3738      	adds	r7, #56	; 0x38
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48001400 	.word	0x48001400
 8001b60:	48001000 	.word	0x48001000
 8001b64:	48000c00 	.word	0x48000c00
 8001b68:	48000800 	.word	0x48000800

08001b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b70:	b672      	cpsid	i
}
 8001b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <Error_Handler+0x8>
	...

08001b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <HAL_MspInit+0x44>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <HAL_MspInit+0x44>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6613      	str	r3, [r2, #96]	; 0x60
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_MspInit+0x44>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_MspInit+0x44>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_MspInit+0x44>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_MspInit+0x44>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08c      	sub	sp, #48	; 0x30
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 031c 	add.w	r3, r7, #28
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <HAL_ADC_MspInit+0xd4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d154      	bne.n	8001c8c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001be2:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a2c      	ldr	r2, [pc, #176]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001be8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bfa:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a26      	ldr	r2, [pc, #152]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a20      	ldr	r2, [pc, #128]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a1a      	ldr	r2, [pc, #104]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001c30:	f043 0302 	orr.w	r3, r3, #2
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_ADC_MspInit+0xd8>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001c42:	233f      	movs	r3, #63	; 0x3f
 8001c44:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c46:	230b      	movs	r3, #11
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	4811      	ldr	r0, [pc, #68]	; (8001c9c <HAL_ADC_MspInit+0xdc>)
 8001c56:	f003 fe17 	bl	8005888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001c5a:	230a      	movs	r3, #10
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c5e:	230b      	movs	r3, #11
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c70:	f003 fe0a 	bl	8005888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c78:	230b      	movs	r3, #11
 8001c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	4619      	mov	r1, r3
 8001c86:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <HAL_ADC_MspInit+0xe0>)
 8001c88:	f003 fdfe 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3730      	adds	r7, #48	; 0x30
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	50040000 	.word	0x50040000
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	48000400 	.word	0x48000400

08001ca4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a17      	ldr	r2, [pc, #92]	; (8001d20 <HAL_CAN_MspInit+0x7c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d127      	bne.n	8001d16 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <HAL_CAN_MspInit+0x80>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <HAL_CAN_MspInit+0x80>)
 8001ccc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_CAN_MspInit+0x80>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_CAN_MspInit+0x80>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <HAL_CAN_MspInit+0x80>)
 8001ce4:	f043 0308 	orr.w	r3, r3, #8
 8001ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_CAN_MspInit+0x80>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d02:	2303      	movs	r3, #3
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d06:	2309      	movs	r3, #9
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <HAL_CAN_MspInit+0x84>)
 8001d12:	f003 fdb9 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40006400 	.word	0x40006400
 8001d24:	40021000 	.word	0x40021000
 8001d28:	48000c00 	.word	0x48000c00

08001d2c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1e      	ldr	r2, [pc, #120]	; (8001dc4 <HAL_COMP_MspInit+0x98>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d118      	bne.n	8001d80 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_COMP_MspInit+0x9c>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d52:	4a1d      	ldr	r2, [pc, #116]	; (8001dc8 <HAL_COMP_MspInit+0x9c>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5a:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <HAL_COMP_MspInit+0x9c>)
 8001d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	613b      	str	r3, [r7, #16]
 8001d64:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d66:	2304      	movs	r3, #4
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d72:	f107 0314 	add.w	r3, r7, #20
 8001d76:	4619      	mov	r1, r3
 8001d78:	4814      	ldr	r0, [pc, #80]	; (8001dcc <HAL_COMP_MspInit+0xa0>)
 8001d7a:	f003 fd85 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8001d7e:	e01c      	b.n	8001dba <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_COMP_MspInit+0xa4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d117      	bne.n	8001dba <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_COMP_MspInit+0x9c>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_COMP_MspInit+0x9c>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_COMP_MspInit+0x9c>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da6:	2303      	movs	r3, #3
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 0314 	add.w	r3, r7, #20
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	; (8001dcc <HAL_COMP_MspInit+0xa0>)
 8001db6:	f003 fd67 	bl	8005888 <HAL_GPIO_Init>
}
 8001dba:	bf00      	nop
 8001dbc:	3728      	adds	r7, #40	; 0x28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40010200 	.word	0x40010200
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	48000400 	.word	0x48000400
 8001dd0:	40010204 	.word	0x40010204

08001dd4 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b0b0      	sub	sp, #192	; 0xc0
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	2294      	movs	r2, #148	; 0x94
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f009 f91f 	bl	800b038 <memset>
  if(hsmbus->Instance==I2C1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a42      	ldr	r2, [pc, #264]	; (8001f08 <HAL_SMBUS_MspInit+0x134>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d13c      	bne.n	8001e7e <HAL_SMBUS_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e04:	2340      	movs	r3, #64	; 0x40
 8001e06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e0c:	f107 0318 	add.w	r3, r7, #24
 8001e10:	4618      	mov	r0, r3
 8001e12:	f004 fe9f 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8001e1c:	f7ff fea6 	bl	8001b6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e20:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e24:	4a39      	ldr	r2, [pc, #228]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e2c:	4b37      	ldr	r3, [pc, #220]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e40:	2312      	movs	r3, #18
 8001e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e52:	2304      	movs	r3, #4
 8001e54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	482c      	ldr	r0, [pc, #176]	; (8001f10 <HAL_SMBUS_MspInit+0x13c>)
 8001e60:	f003 fd12 	bl	8005888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e64:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e7c:	e03f      	b.n	8001efe <HAL_SMBUS_MspInit+0x12a>
  else if(hsmbus->Instance==I2C2)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a24      	ldr	r2, [pc, #144]	; (8001f14 <HAL_SMBUS_MspInit+0x140>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d13a      	bne.n	8001efe <HAL_SMBUS_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fe5d 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_SMBUS_MspInit+0xd0>
      Error_Handler();
 8001ea0:	f7ff fe64 	bl	8001b6c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea8:	4a18      	ldr	r2, [pc, #96]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001eaa:	f043 0320 	orr.w	r3, r3, #32
 8001eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb0:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	f003 0320 	and.w	r3, r3, #32
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001ebc:	2307      	movs	r3, #7
 8001ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec2:	2312      	movs	r3, #18
 8001ec4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ed4:	2304      	movs	r3, #4
 8001ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eda:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <HAL_SMBUS_MspInit+0x144>)
 8001ee2:	f003 fcd1 	bl	8005888 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_SMBUS_MspInit+0x138>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
}
 8001efe:	bf00      	nop
 8001f00:	37c0      	adds	r7, #192	; 0xc0
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40005400 	.word	0x40005400
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	48000400 	.word	0x48000400
 8001f14:	40005800 	.word	0x40005800
 8001f18:	48001400 	.word	0x48001400

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0b2      	sub	sp, #200	; 0xc8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f34:	f107 0320 	add.w	r3, r7, #32
 8001f38:	2294      	movs	r2, #148	; 0x94
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f009 f87b 	bl	800b038 <memset>
  if(huart->Instance==LPUART1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a64      	ldr	r2, [pc, #400]	; (80020d8 <HAL_UART_MspInit+0x1bc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d13e      	bne.n	8001fca <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f4c:	2320      	movs	r3, #32
 8001f4e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f50:	2300      	movs	r3, #0
 8001f52:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f54:	f107 0320 	add.w	r3, r7, #32
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f004 fdfb 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f64:	f7ff fe02 	bl	8001b6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f68:	4b5c      	ldr	r3, [pc, #368]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	4a5b      	ldr	r2, [pc, #364]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f80:	4b56      	ldr	r3, [pc, #344]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	4a55      	ldr	r2, [pc, #340]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8001f86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001f98:	f003 fef4 	bl	8005d84 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001f9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001fb6:	2308      	movs	r3, #8
 8001fb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fbc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4847      	ldr	r0, [pc, #284]	; (80020e0 <HAL_UART_MspInit+0x1c4>)
 8001fc4:	f003 fc60 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fc8:	e081      	b.n	80020ce <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a45      	ldr	r2, [pc, #276]	; (80020e4 <HAL_UART_MspInit+0x1c8>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d13b      	bne.n	800204c <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fdc:	f107 0320 	add.w	r3, r7, #32
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f004 fdb7 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001fec:	f7ff fdbe 	bl	8001b6c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ff0:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	4a39      	ldr	r2, [pc, #228]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8001ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffc:	4b37      	ldr	r3, [pc, #220]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002008:	4b34      	ldr	r3, [pc, #208]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 800200a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200c:	4a33      	ldr	r2, [pc, #204]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 800200e:	f043 0308 	orr.w	r3, r3, #8
 8002012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002014:	4b31      	ldr	r3, [pc, #196]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8002016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002020:	2378      	movs	r3, #120	; 0x78
 8002022:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002032:	2303      	movs	r3, #3
 8002034:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002038:	2307      	movs	r3, #7
 800203a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002042:	4619      	mov	r1, r3
 8002044:	4828      	ldr	r0, [pc, #160]	; (80020e8 <HAL_UART_MspInit+0x1cc>)
 8002046:	f003 fc1f 	bl	8005888 <HAL_GPIO_Init>
}
 800204a:	e040      	b.n	80020ce <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a26      	ldr	r2, [pc, #152]	; (80020ec <HAL_UART_MspInit+0x1d0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d13b      	bne.n	80020ce <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002056:	2304      	movs	r3, #4
 8002058:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800205a:	2300      	movs	r3, #0
 800205c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205e:	f107 0320 	add.w	r3, r7, #32
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fd76 	bl	8006b54 <HAL_RCCEx_PeriphCLKConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_UART_MspInit+0x156>
      Error_Handler();
 800206e:	f7ff fd7d 	bl	8001b6c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002072:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002076:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8002078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800207c:	6593      	str	r3, [r2, #88]	; 0x58
 800207e:	4b17      	ldr	r3, [pc, #92]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208e:	4a13      	ldr	r2, [pc, #76]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_UART_MspInit+0x1c0>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020bc:	2307      	movs	r3, #7
 80020be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80020c6:	4619      	mov	r1, r3
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <HAL_UART_MspInit+0x1cc>)
 80020ca:	f003 fbdd 	bl	8005888 <HAL_GPIO_Init>
}
 80020ce:	bf00      	nop
 80020d0:	37c8      	adds	r7, #200	; 0xc8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40008000 	.word	0x40008000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	48001800 	.word	0x48001800
 80020e4:	40004400 	.word	0x40004400
 80020e8:	48000c00 	.word	0x48000c00
 80020ec:	40004800 	.word	0x40004800

080020f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_SPI_MspInit+0x7c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d128      	bne.n	8002164 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_SPI_MspInit+0x80>)
 8002114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_SPI_MspInit+0x80>)
 8002118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800211c:	6593      	str	r3, [r2, #88]	; 0x58
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_SPI_MspInit+0x80>)
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_SPI_MspInit+0x80>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_SPI_MspInit+0x80>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_SPI_MspInit+0x80>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002142:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002154:	2306      	movs	r3, #6
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <HAL_SPI_MspInit+0x84>)
 8002160:	f003 fb92 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40003c00 	.word	0x40003c00
 8002170:	40021000 	.word	0x40021000
 8002174:	48000800 	.word	0x48000800

08002178 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	; 0x38
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a49      	ldr	r2, [pc, #292]	; (80022bc <HAL_TIM_PWM_MspInit+0x144>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d129      	bne.n	80021ee <HAL_TIM_PWM_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800219a:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	4a48      	ldr	r2, [pc, #288]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 80021a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021a4:	6613      	str	r3, [r2, #96]	; 0x60
 80021a6:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ae:	623b      	str	r3, [r7, #32]
 80021b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a42      	ldr	r2, [pc, #264]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 80021b8:	f043 0310 	orr.w	r3, r3, #16
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b40      	ldr	r3, [pc, #256]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0310 	and.w	r3, r3, #16
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d8:	2300      	movs	r3, #0
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80021dc:	2303      	movs	r3, #3
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e4:	4619      	mov	r1, r3
 80021e6:	4837      	ldr	r0, [pc, #220]	; (80022c4 <HAL_TIM_PWM_MspInit+0x14c>)
 80021e8:	f003 fb4e 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80021ec:	e062      	b.n	80022b4 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM2)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f6:	d10c      	bne.n	8002212 <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021f8:	4b31      	ldr	r3, [pc, #196]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021fc:	4a30      	ldr	r2, [pc, #192]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6593      	str	r3, [r2, #88]	; 0x58
 8002204:	4b2e      	ldr	r3, [pc, #184]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	69bb      	ldr	r3, [r7, #24]
}
 8002210:	e050      	b.n	80022b4 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a2c      	ldr	r2, [pc, #176]	; (80022c8 <HAL_TIM_PWM_MspInit+0x150>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d10c      	bne.n	8002236 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221c:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 800221e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 8002222:	f043 0302 	orr.w	r3, r3, #2
 8002226:	6593      	str	r3, [r2, #88]	; 0x58
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	697b      	ldr	r3, [r7, #20]
}
 8002234:	e03e      	b.n	80022b4 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM4)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a24      	ldr	r2, [pc, #144]	; (80022cc <HAL_TIM_PWM_MspInit+0x154>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d128      	bne.n	8002292 <HAL_TIM_PWM_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002240:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a1e      	ldr	r2, [pc, #120]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
 800224c:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002258:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225c:	4a18      	ldr	r2, [pc, #96]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 800225e:	f043 0310 	orr.w	r3, r3, #16
 8002262:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002270:	2301      	movs	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002280:	2302      	movs	r3, #2
 8002282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002288:	4619      	mov	r1, r3
 800228a:	480e      	ldr	r0, [pc, #56]	; (80022c4 <HAL_TIM_PWM_MspInit+0x14c>)
 800228c:	f003 fafc 	bl	8005888 <HAL_GPIO_Init>
}
 8002290:	e010      	b.n	80022b4 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM15)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_TIM_PWM_MspInit+0x158>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d10b      	bne.n	80022b4 <HAL_TIM_PWM_MspInit+0x13c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800229c:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 800229e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a0:	4a07      	ldr	r2, [pc, #28]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 80022a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a6:	6613      	str	r3, [r2, #96]	; 0x60
 80022a8:	4b05      	ldr	r3, [pc, #20]	; (80022c0 <HAL_TIM_PWM_MspInit+0x148>)
 80022aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]
}
 80022b4:	bf00      	nop
 80022b6:	3738      	adds	r7, #56	; 0x38
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	48001000 	.word	0x48001000
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40000800 	.word	0x40000800
 80022d0:	40014000 	.word	0x40014000

080022d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08e      	sub	sp, #56	; 0x38
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a73      	ldr	r2, [pc, #460]	; (80024c0 <HAL_TIM_MspPostInit+0x1ec>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d11d      	bne.n	8002332 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022f6:	4b73      	ldr	r3, [pc, #460]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fa:	4a72      	ldr	r2, [pc, #456]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 80022fc:	f043 0310 	orr.w	r3, r3, #16
 8002300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002302:	4b70      	ldr	r3, [pc, #448]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	623b      	str	r3, [r7, #32]
 800230c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800230e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002320:	2301      	movs	r3, #1
 8002322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	4867      	ldr	r0, [pc, #412]	; (80024c8 <HAL_TIM_MspPostInit+0x1f4>)
 800232c:	f003 faac 	bl	8005888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002330:	e0c2      	b.n	80024b8 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233a:	d13a      	bne.n	80023b2 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	4b61      	ldr	r3, [pc, #388]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 800233e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002340:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002348:	4b5e      	ldr	r3, [pc, #376]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 800234a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002354:	4b5b      	ldr	r3, [pc, #364]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 8002356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002358:	4a5a      	ldr	r2, [pc, #360]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002360:	4b58      	ldr	r3, [pc, #352]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 8002362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800236c:	2301      	movs	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002370:	2302      	movs	r3, #2
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002374:	2300      	movs	r3, #0
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2300      	movs	r3, #0
 800237a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800237c:	2301      	movs	r3, #1
 800237e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002384:	4619      	mov	r1, r3
 8002386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800238a:	f003 fa7d 	bl	8005888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800238e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023a0:	2301      	movs	r3, #1
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a8:	4619      	mov	r1, r3
 80023aa:	4848      	ldr	r0, [pc, #288]	; (80024cc <HAL_TIM_MspPostInit+0x1f8>)
 80023ac:	f003 fa6c 	bl	8005888 <HAL_GPIO_Init>
}
 80023b0:	e082      	b.n	80024b8 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a46      	ldr	r2, [pc, #280]	; (80024d0 <HAL_TIM_MspPostInit+0x1fc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d138      	bne.n	800242e <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023bc:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 80023be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c0:	4a40      	ldr	r2, [pc, #256]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 80023c2:	f043 0302 	orr.w	r3, r3, #2
 80023c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c8:	4b3e      	ldr	r3, [pc, #248]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d4:	4b3b      	ldr	r3, [pc, #236]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	4a3a      	ldr	r2, [pc, #232]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e0:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023ec:	2301      	movs	r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f0:	2302      	movs	r3, #2
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	2300      	movs	r3, #0
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023fc:	2302      	movs	r3, #2
 80023fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002404:	4619      	mov	r1, r3
 8002406:	4831      	ldr	r0, [pc, #196]	; (80024cc <HAL_TIM_MspPostInit+0x1f8>)
 8002408:	f003 fa3e 	bl	8005888 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002410:	2302      	movs	r3, #2
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800241c:	2302      	movs	r3, #2
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002424:	4619      	mov	r1, r3
 8002426:	482b      	ldr	r0, [pc, #172]	; (80024d4 <HAL_TIM_MspPostInit+0x200>)
 8002428:	f003 fa2e 	bl	8005888 <HAL_GPIO_Init>
}
 800242c:	e044      	b.n	80024b8 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_TIM_MspPostInit+0x204>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d11d      	bne.n	8002474 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 800243a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243c:	4a21      	ldr	r2, [pc, #132]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002444:	4b1f      	ldr	r3, [pc, #124]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 8002446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002456:	2302      	movs	r3, #2
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002462:	2302      	movs	r3, #2
 8002464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246a:	4619      	mov	r1, r3
 800246c:	481b      	ldr	r0, [pc, #108]	; (80024dc <HAL_TIM_MspPostInit+0x208>)
 800246e:	f003 fa0b 	bl	8005888 <HAL_GPIO_Init>
}
 8002472:	e021      	b.n	80024b8 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a19      	ldr	r2, [pc, #100]	; (80024e0 <HAL_TIM_MspPostInit+0x20c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d11c      	bne.n	80024b8 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	4a10      	ldr	r2, [pc, #64]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 8002484:	f043 0302 	orr.w	r3, r3, #2
 8002488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248a:	4b0e      	ldr	r3, [pc, #56]	; (80024c4 <HAL_TIM_MspPostInit+0x1f0>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	60bb      	str	r3, [r7, #8]
 8002494:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002496:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249c:	2302      	movs	r3, #2
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a4:	2300      	movs	r3, #0
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80024a8:	230e      	movs	r3, #14
 80024aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	; (80024cc <HAL_TIM_MspPostInit+0x1f8>)
 80024b4:	f003 f9e8 	bl	8005888 <HAL_GPIO_Init>
}
 80024b8:	bf00      	nop
 80024ba:	3738      	adds	r7, #56	; 0x38
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40012c00 	.word	0x40012c00
 80024c4:	40021000 	.word	0x40021000
 80024c8:	48001000 	.word	0x48001000
 80024cc:	48000400 	.word	0x48000400
 80024d0:	40000400 	.word	0x40000400
 80024d4:	48000800 	.word	0x48000800
 80024d8:	40000800 	.word	0x40000800
 80024dc:	48000c00 	.word	0x48000c00
 80024e0:	40014000 	.word	0x40014000

080024e4 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a50      	ldr	r2, [pc, #320]	; (8002634 <HAL_SAI_MspInit+0x150>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d124      	bne.n	8002540 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80024f6:	4b50      	ldr	r3, [pc, #320]	; (8002638 <HAL_SAI_MspInit+0x154>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10b      	bne.n	8002516 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80024fe:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_SAI_MspInit+0x158>)
 8002500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002502:	4a4e      	ldr	r2, [pc, #312]	; (800263c <HAL_SAI_MspInit+0x158>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002508:	6613      	str	r3, [r2, #96]	; 0x60
 800250a:	4b4c      	ldr	r3, [pc, #304]	; (800263c <HAL_SAI_MspInit+0x158>)
 800250c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002516:	4b48      	ldr	r3, [pc, #288]	; (8002638 <HAL_SAI_MspInit+0x154>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	4a46      	ldr	r2, [pc, #280]	; (8002638 <HAL_SAI_MspInit+0x154>)
 800251e:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002520:	2374      	movs	r3, #116	; 0x74
 8002522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002528:	2300      	movs	r3, #0
 800252a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252c:	2300      	movs	r3, #0
 800252e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002530:	230d      	movs	r3, #13
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	4619      	mov	r1, r3
 800253a:	4841      	ldr	r0, [pc, #260]	; (8002640 <HAL_SAI_MspInit+0x15c>)
 800253c:	f003 f9a4 	bl	8005888 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <HAL_SAI_MspInit+0x160>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d135      	bne.n	80025b6 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800254a:	4b3b      	ldr	r3, [pc, #236]	; (8002638 <HAL_SAI_MspInit+0x154>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10b      	bne.n	800256a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002552:	4b3a      	ldr	r3, [pc, #232]	; (800263c <HAL_SAI_MspInit+0x158>)
 8002554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002556:	4a39      	ldr	r2, [pc, #228]	; (800263c <HAL_SAI_MspInit+0x158>)
 8002558:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800255c:	6613      	str	r3, [r2, #96]	; 0x60
 800255e:	4b37      	ldr	r3, [pc, #220]	; (800263c <HAL_SAI_MspInit+0x158>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800256a:	4b33      	ldr	r3, [pc, #204]	; (8002638 <HAL_SAI_MspInit+0x154>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	4a31      	ldr	r2, [pc, #196]	; (8002638 <HAL_SAI_MspInit+0x154>)
 8002572:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002574:	2308      	movs	r3, #8
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002580:	2300      	movs	r3, #0
 8002582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002584:	230d      	movs	r3, #13
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	482c      	ldr	r0, [pc, #176]	; (8002640 <HAL_SAI_MspInit+0x15c>)
 8002590:	f003 f97a 	bl	8005888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002594:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80025a6:	230d      	movs	r3, #13
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4619      	mov	r1, r3
 80025b0:	4825      	ldr	r0, [pc, #148]	; (8002648 <HAL_SAI_MspInit+0x164>)
 80025b2:	f003 f969 	bl	8005888 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a24      	ldr	r2, [pc, #144]	; (800264c <HAL_SAI_MspInit+0x168>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d135      	bne.n	800262c <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80025c0:	4b23      	ldr	r3, [pc, #140]	; (8002650 <HAL_SAI_MspInit+0x16c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10b      	bne.n	80025e0 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80025c8:	4b1c      	ldr	r3, [pc, #112]	; (800263c <HAL_SAI_MspInit+0x158>)
 80025ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025cc:	4a1b      	ldr	r2, [pc, #108]	; (800263c <HAL_SAI_MspInit+0x158>)
 80025ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d2:	6613      	str	r3, [r2, #96]	; 0x60
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_SAI_MspInit+0x158>)
 80025d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025dc:	60bb      	str	r3, [r7, #8]
 80025de:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_SAI_MspInit+0x16c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3301      	adds	r3, #1
 80025e6:	4a1a      	ldr	r2, [pc, #104]	; (8002650 <HAL_SAI_MspInit+0x16c>)
 80025e8:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80025ea:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80025ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80025fc:	230d      	movs	r3, #13
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	4813      	ldr	r0, [pc, #76]	; (8002654 <HAL_SAI_MspInit+0x170>)
 8002608:	f003 f93e 	bl	8005888 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800260c:	2340      	movs	r3, #64	; 0x40
 800260e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002610:	2302      	movs	r3, #2
 8002612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002614:	2300      	movs	r3, #0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800261c:	230d      	movs	r3, #13
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	4619      	mov	r1, r3
 8002626:	480c      	ldr	r0, [pc, #48]	; (8002658 <HAL_SAI_MspInit+0x174>)
 8002628:	f003 f92e 	bl	8005888 <HAL_GPIO_Init>

    }
}
 800262c:	bf00      	nop
 800262e:	3728      	adds	r7, #40	; 0x28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40015404 	.word	0x40015404
 8002638:	2000078c 	.word	0x2000078c
 800263c:	40021000 	.word	0x40021000
 8002640:	48001000 	.word	0x48001000
 8002644:	40015424 	.word	0x40015424
 8002648:	48001400 	.word	0x48001400
 800264c:	40015804 	.word	0x40015804
 8002650:	20000790 	.word	0x20000790
 8002654:	48000400 	.word	0x48000400
 8002658:	48000800 	.word	0x48000800

0800265c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002660:	e7fe      	b.n	8002660 <NMI_Handler+0x4>

08002662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002666:	e7fe      	b.n	8002666 <HardFault_Handler+0x4>

08002668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800266c:	e7fe      	b.n	800266c <MemManage_Handler+0x4>

0800266e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002672:	e7fe      	b.n	8002672 <BusFault_Handler+0x4>

08002674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002678:	e7fe      	b.n	8002678 <UsageFault_Handler+0x4>

0800267a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800267a:	b480      	push	{r7}
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002696:	b480      	push	{r7}
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026a8:	f001 fe4c 	bl	8004344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <SystemInit+0x20>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <SystemInit+0x20>)
 80026bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 80026e6:	89fb      	ldrh	r3, [r7, #14]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	b21a      	sxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	4313      	orrs	r3, r2
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	b29b      	uxth	r3, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2204      	movs	r2, #4
 8002718:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2204      	movs	r2, #4
 800271e:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002730:	b29b      	uxth	r3, r3
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29b      	uxth	r3, r3
 800273a:	b21a      	sxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8002750:	b29b      	uxth	r3, r3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29b      	uxth	r3, r3
 800275a:	b21a      	sxth	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80027ca:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80027f2:	2300      	movs	r3, #0
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e010      	b.n	800281a <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	330a      	adds	r3, #10
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	2200      	movs	r2, #0
 8002804:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	330a      	adds	r3, #10
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	2200      	movs	r2, #0
 8002812:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	3301      	adds	r3, #1
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	7bfb      	ldrb	r3, [r7, #15]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d9eb      	bls.n	80027f8 <UG_Init+0xf4>
   }

   gui = g;
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <UG_Init+0x130>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6013      	str	r3, [r2, #0]
   return 1;
 8002826:	2301      	movs	r3, #1
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	20000794 	.word	0x20000794

08002838 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <UG_FontSelect+0x1c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	20000794 	.word	0x20000794

08002858 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af02      	add	r7, sp, #8
 800285e:	4603      	mov	r3, r0
 8002860:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <UG_FillScreen+0x44>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	b21a      	sxth	r2, r3
 8002874:	4b09      	ldr	r3, [pc, #36]	; (800289c <UG_FillScreen+0x44>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29b      	uxth	r3, r3
 8002884:	b219      	sxth	r1, r3
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	460b      	mov	r3, r1
 800288c:	2100      	movs	r1, #0
 800288e:	2000      	movs	r0, #0
 8002890:	f000 f806 	bl	80028a0 <UG_FillFrame>
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20000794 	.word	0x20000794

080028a0 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	4604      	mov	r4, r0
 80028a8:	4608      	mov	r0, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	461a      	mov	r2, r3
 80028ae:	4623      	mov	r3, r4
 80028b0:	80fb      	strh	r3, [r7, #6]
 80028b2:	4603      	mov	r3, r0
 80028b4:	80bb      	strh	r3, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	807b      	strh	r3, [r7, #2]
 80028ba:	4613      	mov	r3, r2
 80028bc:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80028be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80028c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	da05      	bge.n	80028d6 <UG_FillFrame+0x36>
     swap(x1,x2);
 80028ca:	88fb      	ldrh	r3, [r7, #6]
 80028cc:	817b      	strh	r3, [r7, #10]
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	80fb      	strh	r3, [r7, #6]
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 80028d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80028da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028de:	429a      	cmp	r2, r3
 80028e0:	da05      	bge.n	80028ee <UG_FillFrame+0x4e>
     swap(y1,y2);
 80028e2:	88bb      	ldrh	r3, [r7, #4]
 80028e4:	813b      	strh	r3, [r7, #8]
 80028e6:	883b      	ldrh	r3, [r7, #0]
 80028e8:	80bb      	strh	r3, [r7, #4]
 80028ea:	893b      	ldrh	r3, [r7, #8]
 80028ec:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 80028ee:	88bb      	ldrh	r3, [r7, #4]
 80028f0:	81bb      	strh	r3, [r7, #12]
 80028f2:	e01e      	b.n	8002932 <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	81fb      	strh	r3, [r7, #14]
 80028f8:	e00f      	b.n	800291a <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <UG_FillFrame+0xa8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	8c3a      	ldrh	r2, [r7, #32]
 8002904:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002908:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800290c:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800290e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002912:	b29b      	uxth	r3, r3
 8002914:	3301      	adds	r3, #1
 8002916:	b29b      	uxth	r3, r3
 8002918:	81fb      	strh	r3, [r7, #14]
 800291a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800291e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002922:	429a      	cmp	r2, r3
 8002924:	dde9      	ble.n	80028fa <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 8002926:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800292a:	b29b      	uxth	r3, r3
 800292c:	3301      	adds	r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	81bb      	strh	r3, [r7, #12]
 8002932:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002936:	f9b7 3000 	ldrsh.w	r3, [r7]
 800293a:	429a      	cmp	r2, r3
 800293c:	ddda      	ble.n	80028f4 <UG_FillFrame+0x54>
      }
   }
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bd90      	pop	{r4, r7, pc}
 8002948:	20000794 	.word	0x20000794

0800294c <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800294c:	b5b0      	push	{r4, r5, r7, lr}
 800294e:	b08a      	sub	sp, #40	; 0x28
 8002950:	af02      	add	r7, sp, #8
 8002952:	4604      	mov	r4, r0
 8002954:	4608      	mov	r0, r1
 8002956:	4611      	mov	r1, r2
 8002958:	461a      	mov	r2, r3
 800295a:	4623      	mov	r3, r4
 800295c:	80fb      	strh	r3, [r7, #6]
 800295e:	4603      	mov	r3, r0
 8002960:	80bb      	strh	r3, [r7, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	807b      	strh	r3, [r7, #2]
 8002966:	4613      	mov	r3, r2
 8002968:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 800296a:	4b67      	ldr	r3, [pc, #412]	; (8002b08 <UG_DrawLine+0x1bc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d013      	beq.n	80029a2 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <UG_DrawLine+0x1bc>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002980:	461d      	mov	r5, r3
 8002982:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002986:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800298a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800298e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002992:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4623      	mov	r3, r4
 8002998:	47a8      	blx	r5
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80ae 	beq.w	8002afe <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	88fb      	ldrh	r3, [r7, #6]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 80029ac:	883a      	ldrh	r2, [r7, #0]
 80029ae:	88bb      	ldrh	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 80029b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bfb8      	it	lt
 80029be:	425b      	neglt	r3, r3
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 80029c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bfb8      	it	lt
 80029cc:	425b      	neglt	r3, r3
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 80029d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	dd01      	ble.n	80029de <UG_DrawLine+0x92>
 80029da:	2301      	movs	r3, #1
 80029dc:	e001      	b.n	80029e2 <UG_DrawLine+0x96>
 80029de:	f04f 33ff 	mov.w	r3, #4294967295
 80029e2:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 80029e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	dd01      	ble.n	80029f0 <UG_DrawLine+0xa4>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e001      	b.n	80029f4 <UG_DrawLine+0xa8>
 80029f0:	f04f 33ff 	mov.w	r3, #4294967295
 80029f4:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 80029f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029fa:	105b      	asrs	r3, r3, #1
 80029fc:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 80029fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a02:	105b      	asrs	r3, r3, #1
 8002a04:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8002a0a:	88bb      	ldrh	r3, [r7, #4]
 8002a0c:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	; (8002b08 <UG_DrawLine+0x1bc>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002a18:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8002a1c:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8002a20:	4798      	blx	r3

   if( dxabs >= dyabs )
 8002a22:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002a26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	db33      	blt.n	8002a96 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8002a2e:	2300      	movs	r3, #0
 8002a30:	83fb      	strh	r3, [r7, #30]
 8002a32:	e029      	b.n	8002a88 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8002a34:	8b7a      	ldrh	r2, [r7, #26]
 8002a36:	89fb      	ldrh	r3, [r7, #14]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8002a3e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002a42:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	db09      	blt.n	8002a5e <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8002a4a:	8b7a      	ldrh	r2, [r7, #26]
 8002a4c:	8a3b      	ldrh	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8002a54:	8afa      	ldrh	r2, [r7, #22]
 8002a56:	897b      	ldrh	r3, [r7, #10]
 8002a58:	4413      	add	r3, r2
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8002a5e:	8b3a      	ldrh	r2, [r7, #24]
 8002a60:	89bb      	ldrh	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <UG_DrawLine+0x1bc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002a72:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8002a76:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8002a7a:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8002a7c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3301      	adds	r3, #1
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	83fb      	strh	r3, [r7, #30]
 8002a88:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002a8c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	dbcf      	blt.n	8002a34 <UG_DrawLine+0xe8>
 8002a94:	e034      	b.n	8002b00 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8002a96:	2300      	movs	r3, #0
 8002a98:	83fb      	strh	r3, [r7, #30]
 8002a9a:	e029      	b.n	8002af0 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8002a9c:	8bba      	ldrh	r2, [r7, #28]
 8002a9e:	8a3b      	ldrh	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8002aa6:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002aaa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	db09      	blt.n	8002ac6 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8002ab2:	8bba      	ldrh	r2, [r7, #28]
 8002ab4:	89fb      	ldrh	r3, [r7, #14]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8002abc:	8b3a      	ldrh	r2, [r7, #24]
 8002abe:	89bb      	ldrh	r3, [r7, #12]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8002ac6:	8afa      	ldrh	r2, [r7, #22]
 8002ac8:	897b      	ldrh	r3, [r7, #10]
 8002aca:	4413      	add	r3, r2
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <UG_DrawLine+0x1bc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002ada:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8002ade:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8002ae2:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8002ae4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3301      	adds	r3, #1
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	83fb      	strh	r3, [r7, #30]
 8002af0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8002af4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	dbcf      	blt.n	8002a9c <UG_DrawLine+0x150>
 8002afc:	e000      	b.n	8002b00 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8002afe:	bf00      	nop
      }
   }  
}
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bdb0      	pop	{r4, r5, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000794 	.word	0x20000794

08002b0c <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	4603      	mov	r3, r0
 8002b14:	603a      	str	r2, [r7, #0]
 8002b16:	80fb      	strh	r3, [r7, #6]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8002b20:	88bb      	ldrh	r3, [r7, #4]
 8002b22:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8002b24:	4b44      	ldr	r3, [pc, #272]	; (8002c38 <UG_PutString+0x12c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 faa8 	bl	8003080 <_UG_FontSelect>
   while ( *str != 0 )
 8002b30:	e064      	b.n	8002bfc <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8002b32:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <UG_PutString+0x12c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8002b3e:	463b      	mov	r3, r7
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 f8d9 	bl	8002cf8 <_UG_DecodeUTF8>
 8002b46:	4603      	mov	r3, r0
 8002b48:	817b      	strh	r3, [r7, #10]
 8002b4a:	e004      	b.n	8002b56 <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	1c5a      	adds	r2, r3, #1
 8002b50:	603a      	str	r2, [r7, #0]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	2b0a      	cmp	r3, #10
 8002b5a:	d105      	bne.n	8002b68 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8002b5c:	4b36      	ldr	r3, [pc, #216]	; (8002c38 <UG_PutString+0x12c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	81fb      	strh	r3, [r7, #14]
         continue;
 8002b66:	e049      	b.n	8002bfc <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f93b 	bl	8002de8 <_UG_GetCharData>
 8002b72:	4603      	mov	r3, r0
 8002b74:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8002b76:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7e:	d100      	bne.n	8002b82 <UG_PutString+0x76>
 8002b80:	e03c      	b.n	8002bfc <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8002b82:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <UG_PutString+0x12c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b92:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002b96:	4413      	add	r3, r2
 8002b98:	4299      	cmp	r1, r3
 8002b9a:	dc12      	bgt.n	8002bc2 <UG_PutString+0xb6>
      {
         xp = x;
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8002ba0:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <UG_PutString+0x12c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8002ba8:	b21a      	sxth	r2, r3
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <UG_PutString+0x12c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 8002bb2:	b21b      	sxth	r3, r3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	89bb      	ldrh	r3, [r7, #12]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <UG_PutString+0x12c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8002bca:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <UG_PutString+0x12c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002bd2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002bd6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8002bda:	8978      	ldrh	r0, [r7, #10]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	4623      	mov	r3, r4
 8002be0:	f000 fad0 	bl	8003184 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <UG_PutString+0x12c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	893b      	ldrh	r3, [r7, #8]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d196      	bne.n	8002b32 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8002c04:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <UG_PutString+0x12c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00c      	beq.n	8002c2e <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8002c14:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <UG_PutString+0x12c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1a:	461c      	mov	r4, r3
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c20:	f04f 32ff 	mov.w	r2, #4294967295
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	47a0      	blx	r4
}
 8002c2e:	bf00      	nop
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd90      	pop	{r4, r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000794 	.word	0x20000794

08002c3c <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <UG_SetForecolor+0x20>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	88fa      	ldrh	r2, [r7, #6]
 8002c4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	20000794 	.word	0x20000794

08002c60 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <UG_SetBackcolor+0x20>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	88fa      	ldrh	r2, [r7, #6]
 8002c70:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	20000794 	.word	0x20000794

08002c84 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <UG_FontSetHSpace+0x24>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	b252      	sxtb	r2, r2
 8002c96:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000794 	.word	0x20000794

08002cac <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8002cb6:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <UG_FontSetVSpace+0x24>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	88fa      	ldrh	r2, [r7, #6]
 8002cbc:	b252      	sxtb	r2, r2
 8002cbe:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000794 	.word	0x20000794

08002cd4 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <UG_FontSetTransparency+0x20>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	79fa      	ldrb	r2, [r7, #7]
 8002ce4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	20000794 	.word	0x20000794

08002cf8 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]

  char c=**str;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8002d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db07      	blt.n	8002d20 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
    return c;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	e05c      	b.n	8002dda <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8002d28:	e04f      	b.n	8002dca <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8002d3c:	7bbb      	ldrb	r3, [r7, #14]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d130      	bne.n	8002da4 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2bdf      	cmp	r3, #223	; 0xdf
 8002d46:	d806      	bhi.n	8002d56 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e023      	b.n	8002d9e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	2bef      	cmp	r3, #239	; 0xef
 8002d5a:	d806      	bhi.n	8002d6a <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	e019      	b.n	8002d9e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8002d6a:	7bfb      	ldrb	r3, [r7, #15]
 8002d6c:	2bf7      	cmp	r3, #247	; 0xf7
 8002d6e:	d806      	bhi.n	8002d7e <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8002d70:	2303      	movs	r3, #3
 8002d72:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e00f      	b.n	8002d9e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	2bfb      	cmp	r3, #251	; 0xfb
 8002d82:	d806      	bhi.n	8002d92 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8002d84:	2304      	movs	r3, #4
 8002d86:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	e005      	b.n	8002d9e <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8002d92:	2305      	movs	r3, #5
 8002d94:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	81bb      	strh	r3, [r7, #12]
 8002da2:	e012      	b.n	8002dca <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8002da4:	89bb      	ldrh	r3, [r7, #12]
 8002da6:	019b      	lsls	r3, r3, #6
 8002da8:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	b21b      	sxth	r3, r3
 8002dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	b21b      	sxth	r3, r3
 8002dbc:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 8002dbe:	7bbb      	ldrb	r3, [r7, #14]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	73bb      	strb	r3, [r7, #14]
 8002dc4:	7bbb      	ldrb	r3, [r7, #14]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <_UG_DecodeUTF8+0xde>
  while(**str)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1aa      	bne.n	8002d2a <_UG_DecodeUTF8+0x32>
 8002dd4:	e000      	b.n	8002dd8 <_UG_DecodeUTF8+0xe0>
        break;
 8002dd6:	bf00      	nop
    }
  }
  return encoding;
 8002dd8:	89bb      	ldrh	r3, [r7, #12]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8002e08:	4b98      	ldr	r3, [pc, #608]	; (800306c <_UG_GetCharData+0x284>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e0e:	4b98      	ldr	r3, [pc, #608]	; (8003070 <_UG_GetCharData+0x288>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d10f      	bne.n	8002e36 <_UG_GetCharData+0x4e>
 8002e16:	4b97      	ldr	r3, [pc, #604]	; (8003074 <_UG_GetCharData+0x28c>)
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d10a      	bne.n	8002e36 <_UG_GetCharData+0x4e>
    if(p){
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 8002e26:	4b94      	ldr	r3, [pc, #592]	; (8003078 <_UG_GetCharData+0x290>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8002e2e:	4b93      	ldr	r3, [pc, #588]	; (800307c <_UG_GetCharData+0x294>)
 8002e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e34:	e116      	b.n	8003064 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8002e36:	4b8d      	ldr	r3, [pc, #564]	; (800306c <_UG_GetCharData+0x284>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80cc 	beq.w	8002fdc <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	2bfc      	cmp	r3, #252	; 0xfc
 8002e48:	f300 80c8 	bgt.w	8002fdc <_UG_GetCharData+0x1f4>
 8002e4c:	2bd6      	cmp	r3, #214	; 0xd6
 8002e4e:	da09      	bge.n	8002e64 <_UG_GetCharData+0x7c>
 8002e50:	2bc4      	cmp	r3, #196	; 0xc4
 8002e52:	d06c      	beq.n	8002f2e <_UG_GetCharData+0x146>
 8002e54:	2bc4      	cmp	r3, #196	; 0xc4
 8002e56:	f300 80c1 	bgt.w	8002fdc <_UG_GetCharData+0x1f4>
 8002e5a:	2bb0      	cmp	r3, #176	; 0xb0
 8002e5c:	d06d      	beq.n	8002f3a <_UG_GetCharData+0x152>
 8002e5e:	2bb5      	cmp	r3, #181	; 0xb5
 8002e60:	d068      	beq.n	8002f34 <_UG_GetCharData+0x14c>
 8002e62:	e06e      	b.n	8002f42 <_UG_GetCharData+0x15a>
 8002e64:	3bd6      	subs	r3, #214	; 0xd6
 8002e66:	2b26      	cmp	r3, #38	; 0x26
 8002e68:	f200 80b8 	bhi.w	8002fdc <_UG_GetCharData+0x1f4>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <_UG_GetCharData+0x8c>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002f17 	.word	0x08002f17
 8002e78:	08002fdd 	.word	0x08002fdd
 8002e7c:	08002fdd 	.word	0x08002fdd
 8002e80:	08002fdd 	.word	0x08002fdd
 8002e84:	08002fdd 	.word	0x08002fdd
 8002e88:	08002fdd 	.word	0x08002fdd
 8002e8c:	08002f23 	.word	0x08002f23
 8002e90:	08002fdd 	.word	0x08002fdd
 8002e94:	08002fdd 	.word	0x08002fdd
 8002e98:	08002fdd 	.word	0x08002fdd
 8002e9c:	08002fdd 	.word	0x08002fdd
 8002ea0:	08002fdd 	.word	0x08002fdd
 8002ea4:	08002fdd 	.word	0x08002fdd
 8002ea8:	08002fdd 	.word	0x08002fdd
 8002eac:	08002f29 	.word	0x08002f29
 8002eb0:	08002fdd 	.word	0x08002fdd
 8002eb4:	08002fdd 	.word	0x08002fdd
 8002eb8:	08002fdd 	.word	0x08002fdd
 8002ebc:	08002fdd 	.word	0x08002fdd
 8002ec0:	08002fdd 	.word	0x08002fdd
 8002ec4:	08002fdd 	.word	0x08002fdd
 8002ec8:	08002fdd 	.word	0x08002fdd
 8002ecc:	08002fdd 	.word	0x08002fdd
 8002ed0:	08002fdd 	.word	0x08002fdd
 8002ed4:	08002fdd 	.word	0x08002fdd
 8002ed8:	08002fdd 	.word	0x08002fdd
 8002edc:	08002fdd 	.word	0x08002fdd
 8002ee0:	08002fdd 	.word	0x08002fdd
 8002ee4:	08002fdd 	.word	0x08002fdd
 8002ee8:	08002fdd 	.word	0x08002fdd
 8002eec:	08002fdd 	.word	0x08002fdd
 8002ef0:	08002fdd 	.word	0x08002fdd
 8002ef4:	08002f11 	.word	0x08002f11
 8002ef8:	08002fdd 	.word	0x08002fdd
 8002efc:	08002fdd 	.word	0x08002fdd
 8002f00:	08002fdd 	.word	0x08002fdd
 8002f04:	08002fdd 	.word	0x08002fdd
 8002f08:	08002fdd 	.word	0x08002fdd
 8002f0c:	08002f1d 	.word	0x08002f1d
    {
       case 0xF6: encoding = 0x94; break; // ö
 8002f10:	2394      	movs	r3, #148	; 0x94
 8002f12:	80fb      	strh	r3, [r7, #6]
 8002f14:	e015      	b.n	8002f42 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8002f16:	2399      	movs	r3, #153	; 0x99
 8002f18:	80fb      	strh	r3, [r7, #6]
 8002f1a:	e012      	b.n	8002f42 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8002f1c:	2381      	movs	r3, #129	; 0x81
 8002f1e:	80fb      	strh	r3, [r7, #6]
 8002f20:	e00f      	b.n	8002f42 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8002f22:	239a      	movs	r3, #154	; 0x9a
 8002f24:	80fb      	strh	r3, [r7, #6]
 8002f26:	e00c      	b.n	8002f42 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8002f28:	2384      	movs	r3, #132	; 0x84
 8002f2a:	80fb      	strh	r3, [r7, #6]
 8002f2c:	e009      	b.n	8002f42 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8002f2e:	238e      	movs	r3, #142	; 0x8e
 8002f30:	80fb      	strh	r3, [r7, #6]
 8002f32:	e006      	b.n	8002f42 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8002f34:	23e6      	movs	r3, #230	; 0xe6
 8002f36:	80fb      	strh	r3, [r7, #6]
 8002f38:	e003      	b.n	8002f42 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8002f3a:	23f8      	movs	r3, #248	; 0xf8
 8002f3c:	80fb      	strh	r3, [r7, #6]
 8002f3e:	bf00      	nop
 8002f40:	e04c      	b.n	8002fdc <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8002f42:	e04b      	b.n	8002fdc <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8002f44:	4b49      	ldr	r3, [pc, #292]	; (800306c <_UG_GetCharData+0x284>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	8a7a      	ldrh	r2, [r7, #18]
 8002f4c:	0052      	lsls	r2, r2, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fbbf 	bl	80026d4 <ptr_8to16>
 8002f56:	4603      	mov	r3, r0
 8002f58:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8002f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	da06      	bge.n	8002f70 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8002f62:	89fb      	ldrh	r3, [r7, #14]
 8002f64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002f68:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	747b      	strb	r3, [r7, #17]
 8002f6e:	e032      	b.n	8002fd6 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8002f70:	7c7b      	ldrb	r3, [r7, #17]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d021      	beq.n	8002fba <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	8afb      	ldrh	r3, [r7, #22]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d30d      	bcc.n	8002f9a <_UG_GetCharData+0x1b2>
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	89fb      	ldrh	r3, [r7, #14]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d809      	bhi.n	8002f9a <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8002f86:	88fa      	ldrh	r2, [r7, #6]
 8002f88:	8afb      	ldrh	r3, [r7, #22]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	8abb      	ldrh	r3, [r7, #20]
 8002f90:	4413      	add	r3, r2
 8002f92:	82bb      	strh	r3, [r7, #20]
        found=1;
 8002f94:	2301      	movs	r3, #1
 8002f96:	743b      	strb	r3, [r7, #16]
        break;
 8002f98:	e02a      	b.n	8002ff0 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8002f9a:	88fa      	ldrh	r2, [r7, #6]
 8002f9c:	8afb      	ldrh	r3, [r7, #22]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d323      	bcc.n	8002fea <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8002fa2:	89fa      	ldrh	r2, [r7, #14]
 8002fa4:	8afb      	ldrh	r3, [r7, #22]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	8abb      	ldrh	r3, [r7, #20]
 8002fac:	4413      	add	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	82bb      	strh	r3, [r7, #20]
      range=0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	747b      	strb	r3, [r7, #17]
 8002fb8:	e00d      	b.n	8002fd6 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	89fb      	ldrh	r3, [r7, #14]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d102      	bne.n	8002fc8 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	743b      	strb	r3, [r7, #16]
        break;
 8002fc6:	e013      	b.n	8002ff0 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	89fb      	ldrh	r3, [r7, #14]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d30e      	bcc.n	8002fee <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8002fd0:	8abb      	ldrh	r3, [r7, #20]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8002fd6:	8a7b      	ldrh	r3, [r7, #18]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	827b      	strh	r3, [r7, #18]
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <_UG_GetCharData+0x284>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002fe2:	8a7a      	ldrh	r2, [r7, #18]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d3ad      	bcc.n	8002f44 <_UG_GetCharData+0x15c>
 8002fe8:	e002      	b.n	8002ff0 <_UG_GetCharData+0x208>
        break;
 8002fea:	bf00      	nop
 8002fec:	e000      	b.n	8002ff0 <_UG_GetCharData+0x208>
        break;
 8002fee:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8002ff0:	7c3b      	ldrb	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d034      	beq.n	8003060 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <_UG_GetCharData+0x284>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <_UG_GetCharData+0x288>)
 8002ffe:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8003000:	4a1c      	ldr	r2, [pc, #112]	; (8003074 <_UG_GetCharData+0x28c>)
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8003006:	4b19      	ldr	r3, [pc, #100]	; (800306c <_UG_GetCharData+0x284>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	8aba      	ldrh	r2, [r7, #20]
 800300e:	4917      	ldr	r1, [pc, #92]	; (800306c <_UG_GetCharData+0x284>)
 8003010:	6809      	ldr	r1, [r1, #0]
 8003012:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8003014:	fb01 f202 	mul.w	r2, r1, r2
 8003018:	4413      	add	r3, r2
 800301a:	4a17      	ldr	r2, [pc, #92]	; (8003078 <_UG_GetCharData+0x290>)
 800301c:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <_UG_GetCharData+0x284>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8003028:	4b10      	ldr	r3, [pc, #64]	; (800306c <_UG_GetCharData+0x284>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302e:	8abb      	ldrh	r3, [r7, #20]
 8003030:	4413      	add	r3, r2
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b21a      	sxth	r2, r3
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <_UG_GetCharData+0x294>)
 8003038:	801a      	strh	r2, [r3, #0]
 800303a:	e006      	b.n	800304a <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <_UG_GetCharData+0x284>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003044:	b21a      	sxth	r2, r3
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <_UG_GetCharData+0x294>)
 8003048:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <_UG_GetCharData+0x290>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <_UG_GetCharData+0x294>)
 800305a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305e:	e001      	b.n	8003064 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8003060:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000794 	.word	0x20000794
 8003070:	20000798 	.word	0x20000798
 8003074:	2000079c 	.word	0x2000079c
 8003078:	200007a0 	.word	0x200007a0
 800307c:	200007a4 	.word	0x200007a4

08003080 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <_UG_FontSelect+0x100>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	d070      	beq.n	8003176 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8003094:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <_UG_FontSelect+0x100>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <_UG_FontSelect+0x100>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b25b      	sxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	da01      	bge.n	80030c0 <_UG_FontSelect+0x40>
 80030bc:	2201      	movs	r2, #1
 80030be:	e000      	b.n	80030c2 <_UG_FontSelect+0x42>
 80030c0:	2200      	movs	r2, #0
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <_UG_FontSelect+0x100>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <_UG_FontSelect+0x100>)
 80030d4:	6812      	ldr	r2, [r2, #0]
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	4a27      	ldr	r2, [pc, #156]	; (8003180 <_UG_FontSelect+0x100>)
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <_UG_FontSelect+0x100>)
 80030ee:	681c      	ldr	r4, [r3, #0]
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff faef 	bl	80026d4 <ptr_8to16>
 80030f6:	4603      	mov	r3, r0
 80030f8:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3302      	adds	r3, #2
 80030fe:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <_UG_FontSelect+0x100>)
 8003102:	681c      	ldr	r4, [r3, #0]
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fae5 	bl	80026d4 <ptr_8to16>
 800310a:	4603      	mov	r3, r0
 800310c:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3302      	adds	r3, #2
 8003112:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <_UG_FontSelect+0x100>)
 8003116:	681c      	ldr	r4, [r3, #0]
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7ff fadb 	bl	80026d4 <ptr_8to16>
 800311e:	4603      	mov	r3, r0
 8003120:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3302      	adds	r3, #2
 8003126:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8003134:	4b12      	ldr	r3, [pc, #72]	; (8003180 <_UG_FontSelect+0x100>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800313c:	4b10      	ldr	r3, [pc, #64]	; (8003180 <_UG_FontSelect+0x100>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003142:	461a      	mov	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	607b      	str	r3, [r7, #4]
 800314a:	e003      	b.n	8003154 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <_UG_FontSelect+0x100>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2200      	movs	r2, #0
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <_UG_FontSelect+0x100>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <_UG_FontSelect+0x100>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <_UG_FontSelect+0x100>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	641a      	str	r2, [r3, #64]	; 0x40
 8003174:	e000      	b.n	8003178 <_UG_FontSelect+0xf8>
    return;
 8003176:	bf00      	nop
}
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	bf00      	nop
 8003180:	20000794 	.word	0x20000794

08003184 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8003184:	b5b0      	push	{r4, r5, r7, lr}
 8003186:	b08c      	sub	sp, #48	; 0x30
 8003188:	af00      	add	r7, sp, #0
 800318a:	4604      	mov	r4, r0
 800318c:	4608      	mov	r0, r1
 800318e:	4611      	mov	r1, r2
 8003190:	461a      	mov	r2, r3
 8003192:	4623      	mov	r3, r4
 8003194:	80fb      	strh	r3, [r7, #6]
 8003196:	4603      	mov	r3, r0
 8003198:	80bb      	strh	r3, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	807b      	strh	r3, [r7, #2]
 800319e:	4613      	mov	r3, r2
 80031a0:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80031a6:	2300      	movs	r3, #0
 80031a8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80031aa:	2300      	movs	r3, #0
 80031ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80031ae:	2300      	movs	r3, #0
 80031b0:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80031b2:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <_UG_PutChar+0x260>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80031ba:	75fb      	strb	r3, [r7, #23]
 80031bc:	4b89      	ldr	r3, [pc, #548]	; (80033e4 <_UG_PutChar+0x260>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 80031ce:	f107 0208 	add.w	r2, r7, #8
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff fe06 	bl	8002de8 <_UG_GetCharData>
 80031dc:	4603      	mov	r3, r0
 80031de:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 80031e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d102      	bne.n	80031f0 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80031ea:	f04f 33ff 	mov.w	r3, #4294967295
 80031ee:	e226      	b.n	800363e <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 80031f0:	4b7c      	ldr	r3, [pc, #496]	; (80033e4 <_UG_PutChar+0x260>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80031f8:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 80031fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <_UG_PutChar+0x80>
     return 0;
 8003200:	2300      	movs	r3, #0
 8003202:	e21c      	b.n	800363e <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8003204:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003206:	08db      	lsrs	r3, r3, #3
 8003208:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 800320a:	4b76      	ldr	r3, [pc, #472]	; (80033e4 <_UG_PutChar+0x260>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <_UG_PutChar+0x9e>
 800321c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800321e:	3301      	adds	r3, #1
 8003220:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8003222:	7dbb      	ldrb	r3, [r7, #22]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01d      	beq.n	8003264 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8003228:	4b6e      	ldr	r3, [pc, #440]	; (80033e4 <_UG_PutChar+0x260>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800322e:	461d      	mov	r5, r3
 8003230:	88ba      	ldrh	r2, [r7, #4]
 8003232:	8abb      	ldrh	r3, [r7, #20]
 8003234:	4413      	add	r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	b21c      	sxth	r4, r3
 800323e:	4b69      	ldr	r3, [pc, #420]	; (80033e4 <_UG_PutChar+0x260>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003246:	b29a      	uxth	r2, r3
 8003248:	887b      	ldrh	r3, [r7, #2]
 800324a:	4413      	add	r3, r2
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29b      	uxth	r3, r3
 8003252:	b21b      	sxth	r3, r3
 8003254:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003258:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800325c:	4622      	mov	r2, r4
 800325e:	47a8      	blx	r5
 8003260:	4603      	mov	r3, r0
 8003262:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8003264:	4b5f      	ldr	r3, [pc, #380]	; (80033e4 <_UG_PutChar+0x260>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 8172 	bne.w	8003556 <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8003272:	2300      	movs	r3, #0
 8003274:	853b      	strh	r3, [r7, #40]	; 0x28
 8003276:	e0ec      	b.n	8003452 <_UG_PutChar+0x2ce>
     {
       c=0;
 8003278:	2300      	movs	r3, #0
 800327a:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 800327c:	2300      	movs	r3, #0
 800327e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003280:	e0df      	b.n	8003442 <_UG_PutChar+0x2be>
       {
         b = *data++;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	60ba      	str	r2, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800328c:	2300      	movs	r3, #0
 800328e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003290:	e0ca      	b.n	8003428 <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8003292:	7f7b      	ldrb	r3, [r7, #29]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d033      	beq.n	8003304 <_UG_PutChar+0x180>
           {
             if(driver)
 800329c:	7dbb      	ldrb	r3, [r7, #22]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d01f      	beq.n	80032e2 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80032a2:	8c3b      	ldrh	r3, [r7, #32]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <_UG_PutChar+0x13a>
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80032ae:	8c3a      	ldrh	r2, [r7, #32]
 80032b0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	4610      	mov	r0, r2
 80032b8:	4798      	blx	r3
                 bpixels=0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80032be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10a      	bne.n	80032da <_UG_PutChar+0x156>
 80032c4:	7dfb      	ldrb	r3, [r7, #23]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <_UG_PutChar+0x156>
               {
                 x0=x+c;
 80032ca:	88ba      	ldrh	r2, [r7, #4]
 80032cc:	8bfb      	ldrh	r3, [r7, #30]
 80032ce:	4413      	add	r3, r2
 80032d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032d6:	4413      	add	r3, r2
 80032d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 80032da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032dc:	3301      	adds	r3, #1
 80032de:	847b      	strh	r3, [r7, #34]	; 0x22
 80032e0:	e096      	b.n	8003410 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 80032e2:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <_UG_PutChar+0x260>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	88b9      	ldrh	r1, [r7, #4]
 80032ec:	8bfa      	ldrh	r2, [r7, #30]
 80032ee:	440a      	add	r2, r1
 80032f0:	b292      	uxth	r2, r2
 80032f2:	b210      	sxth	r0, r2
 80032f4:	8879      	ldrh	r1, [r7, #2]
 80032f6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80032f8:	440a      	add	r2, r1
 80032fa:	b292      	uxth	r2, r2
 80032fc:	b211      	sxth	r1, r2
 80032fe:	883a      	ldrh	r2, [r7, #0]
 8003300:	4798      	blx	r3
 8003302:	e085      	b.n	8003410 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8003304:	7dbb      	ldrb	r3, [r7, #22]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d06e      	beq.n	80033e8 <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 800330a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800330c:	2b00      	cmp	r3, #0
 800330e:	d064      	beq.n	80033da <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d15e      	bne.n	80033d4 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8003316:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003318:	8839      	ldrh	r1, [r7, #0]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	4610      	mov	r0, r2
 800331e:	4798      	blx	r3
                   fpixels=0;
 8003320:	2300      	movs	r3, #0
 8003322:	847b      	strh	r3, [r7, #34]	; 0x22
 8003324:	e059      	b.n	80033da <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8003326:	88ba      	ldrh	r2, [r7, #4]
 8003328:	8abb      	ldrh	r3, [r7, #20]
 800332a:	4413      	add	r3, r2
 800332c:	b29a      	uxth	r2, r3
 800332e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8003334:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003336:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800333a:	429a      	cmp	r2, r3
 800333c:	d003      	beq.n	8003346 <_UG_PutChar+0x1c2>
 800333e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003340:	89fb      	ldrh	r3, [r7, #14]
 8003342:	429a      	cmp	r2, r3
 8003344:	d224      	bcs.n	8003390 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8003346:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <_UG_PutChar+0x260>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800334c:	461d      	mov	r5, r3
 800334e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8003352:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8003356:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003358:	89fb      	ldrh	r3, [r7, #14]
 800335a:	4413      	add	r3, r2
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29b      	uxth	r3, r3
 8003362:	b21c      	sxth	r4, r3
 8003364:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003366:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800336a:	fb92 f3f3 	sdiv	r3, r2, r3
 800336e:	b29a      	uxth	r2, r3
 8003370:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003372:	4413      	add	r3, r2
 8003374:	b29b      	uxth	r3, r3
 8003376:	b21b      	sxth	r3, r3
 8003378:	4622      	mov	r2, r4
 800337a:	47a8      	blx	r5
 800337c:	4603      	mov	r3, r0
 800337e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8003380:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003382:	8839      	ldrh	r1, [r7, #0]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4610      	mov	r0, r2
 8003388:	4798      	blx	r3
                       fpixels=0;
 800338a:	2300      	movs	r3, #0
 800338c:	847b      	strh	r3, [r7, #34]	; 0x22
 800338e:	e021      	b.n	80033d4 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <_UG_PutChar+0x260>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003396:	461c      	mov	r4, r3
 8003398:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800339c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80033a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80033a2:	89fb      	ldrh	r3, [r7, #14]
 80033a4:	4413      	add	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	b21a      	sxth	r2, r3
 80033ae:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80033b2:	47a0      	blx	r4
 80033b4:	4603      	mov	r3, r0
 80033b6:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80033b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80033ba:	8839      	ldrh	r1, [r7, #0]
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	4610      	mov	r0, r2
 80033c0:	4798      	blx	r3
                       fpixels -= width;
 80033c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80033c4:	89fb      	ldrh	r3, [r7, #14]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 80033ca:	88bb      	ldrh	r3, [r7, #4]
 80033cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 80033ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80033d0:	3301      	adds	r3, #1
 80033d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 80033d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1a5      	bne.n	8003326 <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 80033da:	8c3b      	ldrh	r3, [r7, #32]
 80033dc:	3301      	adds	r3, #1
 80033de:	843b      	strh	r3, [r7, #32]
 80033e0:	e016      	b.n	8003410 <_UG_PutChar+0x28c>
 80033e2:	bf00      	nop
 80033e4:	20000794 	.word	0x20000794
             }
             else if(!trans)                           // Not accelerated output
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d110      	bne.n	8003410 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 80033ee:	4b96      	ldr	r3, [pc, #600]	; (8003648 <_UG_PutChar+0x4c4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	88b9      	ldrh	r1, [r7, #4]
 80033f8:	8bfa      	ldrh	r2, [r7, #30]
 80033fa:	440a      	add	r2, r1
 80033fc:	b292      	uxth	r2, r2
 80033fe:	b210      	sxth	r0, r2
 8003400:	8879      	ldrh	r1, [r7, #2]
 8003402:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003404:	440a      	add	r2, r1
 8003406:	b292      	uxth	r2, r2
 8003408:	b211      	sxth	r1, r2
 800340a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800340e:	4798      	blx	r3
             }
           }
           b >>= 1;
 8003410:	7f7b      	ldrb	r3, [r7, #29]
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	777b      	strb	r3, [r7, #29]
           c++;
 8003416:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800341a:	b29b      	uxth	r3, r3
 800341c:	3301      	adds	r3, #1
 800341e:	b29b      	uxth	r3, r3
 8003420:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8003422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003424:	3301      	adds	r3, #1
 8003426:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003428:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800342a:	2b07      	cmp	r3, #7
 800342c:	d806      	bhi.n	800343c <_UG_PutChar+0x2b8>
 800342e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003432:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003436:	429a      	cmp	r2, r3
 8003438:	f6ff af2b 	blt.w	8003292 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 800343c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800343e:	3301      	adds	r3, #1
 8003440:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003442:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003444:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003446:	429a      	cmp	r2, r3
 8003448:	f4ff af1b 	bcc.w	8003282 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 800344c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800344e:	3301      	adds	r3, #1
 8003450:	853b      	strh	r3, [r7, #40]	; 0x28
 8003452:	4b7d      	ldr	r3, [pc, #500]	; (8003648 <_UG_PutChar+0x4c4>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800345a:	b29b      	uxth	r3, r3
 800345c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800345e:	429a      	cmp	r2, r3
 8003460:	f4ff af0a 	bcc.w	8003278 <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8003464:	7dbb      	ldrb	r3, [r7, #22]
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 80e7 	beq.w	800363a <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 800346c:	8c3b      	ldrh	r3, [r7, #32]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <_UG_PutChar+0x302>
 8003472:	7dfb      	ldrb	r3, [r7, #23]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d106      	bne.n	8003486 <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8003478:	8c3a      	ldrh	r2, [r7, #32]
 800347a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	4610      	mov	r0, r2
 8003482:	4798      	blx	r3
 8003484:	e0d9      	b.n	800363a <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8003486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80d6 	beq.w	800363a <_UG_PutChar+0x4b6>
       {
         if(!trans)
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d15c      	bne.n	800354e <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8003494:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003496:	8839      	ldrh	r1, [r7, #0]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	4610      	mov	r0, r2
 800349c:	4798      	blx	r3
 800349e:	e0cc      	b.n	800363a <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 80034a0:	88ba      	ldrh	r2, [r7, #4]
 80034a2:	8abb      	ldrh	r3, [r7, #20]
 80034a4:	4413      	add	r3, r2
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 80034ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80034b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d003      	beq.n	80034c0 <_UG_PutChar+0x33c>
 80034b8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80034ba:	8a3b      	ldrh	r3, [r7, #16]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d224      	bcs.n	800350a <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80034c0:	4b61      	ldr	r3, [pc, #388]	; (8003648 <_UG_PutChar+0x4c4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034c6:	461d      	mov	r5, r3
 80034c8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80034cc:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80034d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80034d2:	8a3b      	ldrh	r3, [r7, #16]
 80034d4:	4413      	add	r3, r2
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29b      	uxth	r3, r3
 80034dc:	b21c      	sxth	r4, r3
 80034de:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80034e0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80034e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034ec:	4413      	add	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	b21b      	sxth	r3, r3
 80034f2:	4622      	mov	r2, r4
 80034f4:	47a8      	blx	r5
 80034f6:	4603      	mov	r3, r0
 80034f8:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80034fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80034fc:	8839      	ldrh	r1, [r7, #0]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	4610      	mov	r0, r2
 8003502:	4798      	blx	r3
               fpixels=0;
 8003504:	2300      	movs	r3, #0
 8003506:	847b      	strh	r3, [r7, #34]	; 0x22
 8003508:	e021      	b.n	800354e <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800350a:	4b4f      	ldr	r3, [pc, #316]	; (8003648 <_UG_PutChar+0x4c4>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003510:	461c      	mov	r4, r3
 8003512:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8003516:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800351a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800351c:	8a3b      	ldrh	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	b21a      	sxth	r2, r3
 8003528:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800352c:	47a0      	blx	r4
 800352e:	4603      	mov	r3, r0
 8003530:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8003532:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003534:	8839      	ldrh	r1, [r7, #0]
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	4610      	mov	r0, r2
 800353a:	4798      	blx	r3
               fpixels -= width;
 800353c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800353e:	8a3b      	ldrh	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8003544:	88bb      	ldrh	r3, [r7, #4]
 8003546:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8003548:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800354a:	3301      	adds	r3, #1
 800354c:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 800354e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1a5      	bne.n	80034a0 <_UG_PutChar+0x31c>
 8003554:	e071      	b.n	800363a <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8003556:	4b3c      	ldr	r3, [pc, #240]	; (8003648 <_UG_PutChar+0x4c4>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800355e:	2b01      	cmp	r3, #1
 8003560:	d16b      	bne.n	800363a <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8003562:	2300      	movs	r3, #0
 8003564:	853b      	strh	r3, [r7, #40]	; 0x28
 8003566:	e060      	b.n	800362a <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 8003568:	2300      	movs	r3, #0
 800356a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800356c:	e04a      	b.n	8003604 <_UG_PutChar+0x480>
       {
         b = *data++;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	60ba      	str	r2, [r7, #8]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8003578:	883b      	ldrh	r3, [r7, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	7f7a      	ldrb	r2, [r7, #29]
 800357e:	fb03 f202 	mul.w	r2, r3, r2
 8003582:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003586:	b2db      	uxtb	r3, r3
 8003588:	7f79      	ldrb	r1, [r7, #29]
 800358a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	121b      	asrs	r3, r3, #8
 8003596:	b21b      	sxth	r3, r3
 8003598:	b2db      	uxtb	r3, r3
 800359a:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 800359c:	883b      	ldrh	r3, [r7, #0]
 800359e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80035a2:	7f79      	ldrb	r1, [r7, #29]
 80035a4:	fb03 f101 	mul.w	r1, r3, r1
 80035a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80035ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80035b0:	7f78      	ldrb	r0, [r7, #29]
 80035b2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80035b6:	fb00 f303 	mul.w	r3, r0, r3
 80035ba:	440b      	add	r3, r1
 80035bc:	121b      	asrs	r3, r3, #8
 80035be:	b21b      	sxth	r3, r3
 80035c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035c4:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80035c6:	4313      	orrs	r3, r2
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 80035cc:	7dbb      	ldrb	r3, [r7, #22]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80035d2:	8a7a      	ldrh	r2, [r7, #18]
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	4611      	mov	r1, r2
 80035d8:	2001      	movs	r0, #1
 80035da:	4798      	blx	r3
 80035dc:	e00f      	b.n	80035fe <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 80035de:	4b1a      	ldr	r3, [pc, #104]	; (8003648 <_UG_PutChar+0x4c4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	88b9      	ldrh	r1, [r7, #4]
 80035e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80035ea:	440a      	add	r2, r1
 80035ec:	b292      	uxth	r2, r2
 80035ee:	b210      	sxth	r0, r2
 80035f0:	8879      	ldrh	r1, [r7, #2]
 80035f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035f4:	440a      	add	r2, r1
 80035f6:	b292      	uxth	r2, r2
 80035f8:	b211      	sxth	r1, r2
 80035fa:	8a7a      	ldrh	r2, [r7, #18]
 80035fc:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80035fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003600:	3301      	adds	r3, #1
 8003602:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003604:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003606:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800360a:	429a      	cmp	r2, r3
 800360c:	dbaf      	blt.n	800356e <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4a0d      	ldr	r2, [pc, #52]	; (8003648 <_UG_PutChar+0x4c4>)
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8003618:	4611      	mov	r1, r2
 800361a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800361e:	1a8a      	subs	r2, r1, r2
 8003620:	4413      	add	r3, r2
 8003622:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8003624:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003626:	3301      	adds	r3, #1
 8003628:	853b      	strh	r3, [r7, #40]	; 0x28
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <_UG_PutChar+0x4c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003632:	b29b      	uxth	r3, r3
 8003634:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003636:	429a      	cmp	r2, r3
 8003638:	d396      	bcc.n	8003568 <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 800363a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3730      	adds	r7, #48	; 0x30
 8003642:	46bd      	mov	sp, r7
 8003644:	bdb0      	pop	{r4, r5, r7, pc}
 8003646:	bf00      	nop
 8003648:	20000794 	.word	0x20000794

0800364c <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8003654:	4b57      	ldr	r3, [pc, #348]	; (80037b4 <_UG_ProcessTouchData+0x168>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	88db      	ldrh	r3, [r3, #6]
 800365a:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 800365c:	4b55      	ldr	r3, [pc, #340]	; (80037b4 <_UG_ProcessTouchData+0x168>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	891b      	ldrh	r3, [r3, #8]
 8003662:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8003664:	4b53      	ldr	r3, [pc, #332]	; (80037b4 <_UG_ProcessTouchData+0x168>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	791b      	ldrb	r3, [r3, #4]
 800366a:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8003672:	2300      	movs	r3, #0
 8003674:	83fb      	strh	r3, [r7, #30]
 8003676:	e090      	b.n	800379a <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	8bfb      	ldrh	r3, [r7, #30]
 800367e:	015b      	lsls	r3, r3, #5
 8003680:	4413      	add	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	785b      	ldrb	r3, [r3, #1]
 800368e:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d179      	bne.n	800378e <_UG_ProcessTouchData+0x142>
 800369a:	7bfb      	ldrb	r3, [r7, #15]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d074      	beq.n	800378e <_UG_ProcessTouchData+0x142>
 80036a4:	7bfb      	ldrb	r3, [r7, #15]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d06f      	beq.n	800378e <_UG_ProcessTouchData+0x142>
 80036ae:	7bfb      	ldrb	r3, [r7, #15]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d16a      	bne.n	800378e <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d047      	beq.n	800374e <_UG_ProcessTouchData+0x102>
 80036be:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d042      	beq.n	800374e <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80036c8:	7f7b      	ldrb	r3, [r7, #29]
 80036ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d107      	bne.n	80036e2 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80036d2:	7f7b      	ldrb	r3, [r7, #29]
 80036d4:	f043 0305 	orr.w	r3, r3, #5
 80036d8:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80036da:	7f7b      	ldrb	r3, [r7, #29]
 80036dc:	f023 0318 	bic.w	r3, r3, #24
 80036e0:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80036e2:	7f7b      	ldrb	r3, [r7, #29]
 80036e4:	f023 0320 	bic.w	r3, r3, #32
 80036e8:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036f0:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	db25      	blt.n	8003744 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80036fe:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003702:	429a      	cmp	r2, r3
 8003704:	dc1e      	bgt.n	8003744 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800370c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003710:	429a      	cmp	r2, r3
 8003712:	db17      	blt.n	8003744 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800371a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800371e:	429a      	cmp	r2, r3
 8003720:	dc10      	bgt.n	8003744 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8003722:	7f7b      	ldrb	r3, [r7, #29]
 8003724:	f043 0320 	orr.w	r3, r3, #32
 8003728:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800372a:	7f7b      	ldrb	r3, [r7, #29]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8003734:	7f7b      	ldrb	r3, [r7, #29]
 8003736:	f023 0304 	bic.w	r3, r3, #4
 800373a:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 800373c:	7f7b      	ldrb	r3, [r7, #29]
 800373e:	f043 0302 	orr.w	r3, r3, #2
 8003742:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8003744:	7f7b      	ldrb	r3, [r7, #29]
 8003746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800374a:	777b      	strb	r3, [r7, #29]
 800374c:	e01f      	b.n	800378e <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800374e:	7f7b      	ldrb	r3, [r7, #29]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d01a      	beq.n	800378e <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8003758:	7f7b      	ldrb	r3, [r7, #29]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b00      	cmp	r3, #0
 8003760:	d004      	beq.n	800376c <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8003762:	7f7b      	ldrb	r3, [r7, #29]
 8003764:	f043 0308 	orr.w	r3, r3, #8
 8003768:	777b      	strb	r3, [r7, #29]
 800376a:	e003      	b.n	8003774 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 800376c:	7f7b      	ldrb	r3, [r7, #29]
 800376e:	f043 0310 	orr.w	r3, r3, #16
 8003772:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8003774:	7f7b      	ldrb	r3, [r7, #29]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800377e:	7f7b      	ldrb	r3, [r7, #29]
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8003786:	7f7b      	ldrb	r3, [r7, #29]
 8003788:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 800378c:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	7f7a      	ldrb	r2, [r7, #29]
 8003792:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8003794:	8bfb      	ldrh	r3, [r7, #30]
 8003796:	3301      	adds	r3, #1
 8003798:	83fb      	strh	r3, [r7, #30]
 800379a:	8bfa      	ldrh	r2, [r7, #30]
 800379c:	8abb      	ldrh	r3, [r7, #20]
 800379e:	429a      	cmp	r2, r3
 80037a0:	f4ff af6a 	bcc.w	8003678 <_UG_ProcessTouchData+0x2c>
   }
}
 80037a4:	bf00      	nop
 80037a6:	bf00      	nop
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000794 	.word	0x20000794

080037b8 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	82fb      	strh	r3, [r7, #22]
 80037ca:	e035      	b.n	8003838 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	8afb      	ldrh	r3, [r7, #22]
 80037d2:	015b      	lsls	r3, r3, #5
 80037d4:	4413      	add	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d121      	bne.n	8003832 <_UG_UpdateObjects+0x7a>
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01c      	beq.n	8003832 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d004      	beq.n	800380c <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	6939      	ldr	r1, [r7, #16]
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00d      	beq.n	8003832 <_UG_UpdateObjects+0x7a>
 8003816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381a:	2b00      	cmp	r3, #0
 800381c:	da09      	bge.n	8003832 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 800381e:	7bbb      	ldrb	r3, [r7, #14]
 8003820:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8003824:	2b00      	cmp	r3, #0
 8003826:	d004      	beq.n	8003832 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	6939      	ldr	r1, [r7, #16]
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8003832:	8afb      	ldrh	r3, [r7, #22]
 8003834:	3301      	adds	r3, #1
 8003836:	82fb      	strh	r3, [r7, #22]
 8003838:	8afa      	ldrh	r2, [r7, #22]
 800383a:	8abb      	ldrh	r3, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	d3c5      	bcc.n	80037cc <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8003854:	4b22      	ldr	r3, [pc, #136]	; (80038e0 <_UG_HandleEvents+0x94>)
 8003856:	2200      	movs	r2, #0
 8003858:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 800385a:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <_UG_HandleEvents+0x94>)
 800385c:	2202      	movs	r2, #2
 800385e:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8003866:	2300      	movs	r3, #0
 8003868:	82fb      	strh	r3, [r7, #22]
 800386a:	e02f      	b.n	80038cc <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	8afb      	ldrh	r3, [r7, #22]
 8003872:	015b      	lsls	r3, r3, #5
 8003874:	4413      	add	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 800387e:	7bfb      	ldrb	r3, [r7, #15]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11e      	bne.n	80038c6 <_UG_HandleEvents+0x7a>
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d019      	beq.n	80038c6 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	7e9b      	ldrb	r3, [r3, #26]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d015      	beq.n	80038c6 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 800389a:	4a11      	ldr	r2, [pc, #68]	; (80038e0 <_UG_HandleEvents+0x94>)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	7e1a      	ldrb	r2, [r3, #24]
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <_UG_HandleEvents+0x94>)
 80038a6:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	7e5a      	ldrb	r2, [r3, #25]
 80038ac:	4b0c      	ldr	r3, [pc, #48]	; (80038e0 <_UG_HandleEvents+0x94>)
 80038ae:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	7e9a      	ldrb	r2, [r3, #26]
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <_UG_HandleEvents+0x94>)
 80038b6:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038bc:	4808      	ldr	r0, [pc, #32]	; (80038e0 <_UG_HandleEvents+0x94>)
 80038be:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2200      	movs	r2, #0
 80038c4:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 80038c6:	8afb      	ldrh	r3, [r7, #22]
 80038c8:	3301      	adds	r3, #1
 80038ca:	82fb      	strh	r3, [r7, #22]
 80038cc:	8afa      	ldrh	r2, [r7, #22]
 80038ce:	8abb      	ldrh	r3, [r7, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d3cb      	bcc.n	800386c <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	200007a8 	.word	0x200007a8

080038e4 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 80038e4:	b590      	push	{r4, r7, lr}
 80038e6:	b08f      	sub	sp, #60	; 0x3c
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 812c 	beq.w	8003b4e <_UG_PutText+0x26a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f000 8127 	beq.w	8003b4e <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	89db      	ldrh	r3, [r3, #14]
 8003904:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	895b      	ldrh	r3, [r3, #10]
 800390a:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	3302      	adds	r3, #2
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8003916:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800391a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800391e:	1ad2      	subs	r2, r2, r3
 8003920:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003924:	429a      	cmp	r2, r3
 8003926:	f2c0 8114 	blt.w	8003b52 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	891b      	ldrh	r3, [r3, #8]
 800392e:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	899b      	ldrh	r3, [r3, #12]
 8003934:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7d1b      	ldrb	r3, [r3, #20]
 800393a:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8adb      	ldrh	r3, [r3, #22]
 8003940:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8b1b      	ldrh	r3, [r3, #24]
 8003946:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]
   char* c = str;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fb92 	bl	8003080 <_UG_FontSelect>

   rc=1;
 800395c:	2301      	movs	r3, #1
 800395e:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8003964:	4b80      	ldr	r3, [pc, #512]	; (8003b68 <_UG_PutText+0x284>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800396c:	2b00      	cmp	r3, #0
 800396e:	d107      	bne.n	8003980 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8003970:	f107 0308 	add.w	r3, r7, #8
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff f9bf 	bl	8002cf8 <_UG_DecodeUTF8>
 800397a:	4603      	mov	r3, r0
 800397c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800397e:	e004      	b.n	800398a <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	60ba      	str	r2, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 800398a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8003990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003992:	2b0a      	cmp	r3, #10
 8003994:	d1e6      	bne.n	8003964 <_UG_PutText+0x80>
 8003996:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003998:	3301      	adds	r3, #1
 800399a:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 800399c:	e7e2      	b.n	8003964 <_UG_PutText+0x80>
     if(!chr) break;
 800399e:	bf00      	nop
   }

   yp = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 80039a4:	7e7b      	ldrb	r3, [r7, #25]
 80039a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01f      	beq.n	80039ee <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 80039ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80039b0:	8c3b      	ldrh	r3, [r7, #32]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3301      	adds	r3, #1
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 80039bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039be:	8bfb      	ldrh	r3, [r7, #30]
 80039c0:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80039c2:	fb11 f303 	smulbb	r3, r1, r3
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 80039ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b299      	uxth	r1, r3
 80039d6:	8abb      	ldrh	r3, [r7, #20]
 80039d8:	fb11 f303 	smulbb	r3, r1, r3
 80039dc:	b29b      	uxth	r3, r3
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 80039e4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f2c0 80b4 	blt.w	8003b56 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 80039ee:	7e7b      	ldrb	r3, [r7, #25]
 80039f0:	f003 0310 	and.w	r3, r3, #16
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <_UG_PutText+0x11c>
 80039f8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80039fc:	105b      	asrs	r3, r3, #1
 80039fe:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8003a00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003a02:	8c3b      	ldrh	r3, [r7, #32]
 8003a04:	4413      	add	r3, r2
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8003a12:	2300      	movs	r3, #0
 8003a14:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8003a16:	4b54      	ldr	r3, [pc, #336]	; (8003b68 <_UG_PutText+0x284>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d107      	bne.n	8003a32 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8003a22:	f107 0308 	add.w	r3, r7, #8
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f966 	bl	8002cf8 <_UG_DecodeUTF8>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003a30:	e004      	b.n	8003a3c <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	60ba      	str	r2, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8003a3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01b      	beq.n	8003a7a <_UG_PutText+0x196>
 8003a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a44:	2b0a      	cmp	r3, #10
 8003a46:	d018      	beq.n	8003a7a <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8003a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a4a:	2100      	movs	r1, #0
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff f9cb 	bl	8002de8 <_UG_GetCharData>
 8003a52:	4603      	mov	r3, r0
 8003a54:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8003a56:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d00a      	beq.n	8003a76 <_UG_PutText+0x192>
         sl++;
 8003a60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003a62:	3301      	adds	r3, #1
 8003a64:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8003a66:	8a7a      	ldrh	r2, [r7, #18]
 8003a68:	8afb      	ldrh	r3, [r7, #22]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a70:	4413      	add	r3, r2
 8003a72:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003a74:	e7cf      	b.n	8003a16 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8003a76:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8003a78:	e7cd      	b.n	8003a16 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8003a7a:	8afb      	ldrh	r3, [r7, #22]
 8003a7c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8003a82:	8b7a      	ldrh	r2, [r7, #26]
 8003a84:	8bbb      	ldrh	r3, [r7, #28]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8003a90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003a92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8003a9a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	db5b      	blt.n	8003b5a <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8003aa2:	7e7b      	ldrb	r3, [r7, #25]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d002      	beq.n	8003ab2 <_UG_PutText+0x1ce>
 8003aac:	2300      	movs	r3, #0
 8003aae:	853b      	strh	r3, [r7, #40]	; 0x28
 8003ab0:	e008      	b.n	8003ac4 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8003ab2:	7e7b      	ldrb	r3, [r7, #25]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <_UG_PutText+0x1e0>
 8003abc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8003ac0:	105b      	asrs	r3, r3, #1
 8003ac2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8003ac4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003ac6:	8bbb      	ldrh	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8003ace:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <_UG_PutText+0x284>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff f90a 	bl	8002cf8 <_UG_DecodeUTF8>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ae8:	e004      	b.n	8003af4 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	60fa      	str	r2, [r7, #12]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8003af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d031      	beq.n	8003b5e <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8003afa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003afc:	2b0a      	cmp	r3, #10
 8003afe:	d01c      	beq.n	8003b3a <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8a1c      	ldrh	r4, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8a5b      	ldrh	r3, [r3, #18]
 8003b08:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8003b0c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8003b10:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	4623      	mov	r3, r4
 8003b16:	f7ff fb35 	bl	8003184 <_UG_PutChar>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8003b1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b26:	d0d2      	beq.n	8003ace <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8003b28:	8a7a      	ldrh	r2, [r7, #18]
 8003b2a:	8afb      	ldrh	r3, [r7, #22]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b32:	4413      	add	r3, r2
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8003b38:	e7c9      	b.n	8003ace <_UG_PutText+0x1ea>
           break;
 8003b3a:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8003b3c:	8bfa      	ldrh	r2, [r7, #30]
 8003b3e:	8abb      	ldrh	r3, [r7, #20]
 8003b40:	4413      	add	r3, r2
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b46:	4413      	add	r3, r2
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8003b4c:	e75d      	b.n	8003a0a <_UG_PutText+0x126>
     return;
 8003b4e:	bf00      	nop
 8003b50:	e006      	b.n	8003b60 <_UG_PutText+0x27c>
     return;
 8003b52:	bf00      	nop
 8003b54:	e004      	b.n	8003b60 <_UG_PutText+0x27c>
        return;
 8003b56:	bf00      	nop
 8003b58:	e002      	b.n	8003b60 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8003b5a:	bf00      	nop
 8003b5c:	e000      	b.n	8003b60 <_UG_PutText+0x27c>
           return;
 8003b5e:	bf00      	nop
   }
}
 8003b60:	3734      	adds	r7, #52	; 0x34
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd90      	pop	{r4, r7, pc}
 8003b66:	bf00      	nop
 8003b68:	20000794 	.word	0x20000794

08003b6c <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8003b6c:	b5b0      	push	{r4, r5, r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	4604      	mov	r4, r0
 8003b74:	4608      	mov	r0, r1
 8003b76:	4611      	mov	r1, r2
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	80fb      	strh	r3, [r7, #6]
 8003b7e:	4603      	mov	r3, r0
 8003b80:	80bb      	strh	r3, [r7, #4]
 8003b82:	460b      	mov	r3, r1
 8003b84:	807b      	strh	r3, [r7, #2]
 8003b86:	4613      	mov	r3, r2
 8003b88:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8003b8a:	887b      	ldrh	r3, [r7, #2]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	b21c      	sxth	r4, r3
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	1c9a      	adds	r2, r3, #2
 8003b96:	61ba      	str	r2, [r7, #24]
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b9e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003ba2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	4622      	mov	r2, r4
 8003bac:	f7fe fece 	bl	800294c <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8003bb0:	88bb      	ldrh	r3, [r7, #4]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	b219      	sxth	r1, r3
 8003bb8:	883b      	ldrh	r3, [r7, #0]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	b21c      	sxth	r4, r3
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	61ba      	str	r2, [r7, #24]
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003bcc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	f7fe feba 	bl	800294c <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	1c9a      	adds	r2, r3, #2
 8003bdc:	61ba      	str	r2, [r7, #24]
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003be4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003be8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8003bec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	4623      	mov	r3, r4
 8003bf4:	f7fe feaa 	bl	800294c <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8003bf8:	883b      	ldrh	r3, [r7, #0]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	b21c      	sxth	r4, r3
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1c9a      	adds	r2, r3, #2
 8003c04:	61ba      	str	r2, [r7, #24]
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c0c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003c10:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4623      	mov	r3, r4
 8003c18:	f7fe fe98 	bl	800294c <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8003c1c:	88fb      	ldrh	r3, [r7, #6]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	b218      	sxth	r0, r3
 8003c24:	88bb      	ldrh	r3, [r7, #4]
 8003c26:	3301      	adds	r3, #1
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	b219      	sxth	r1, r3
 8003c2c:	887b      	ldrh	r3, [r7, #2]
 8003c2e:	3b02      	subs	r3, #2
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	b21c      	sxth	r4, r3
 8003c34:	88bb      	ldrh	r3, [r7, #4]
 8003c36:	3301      	adds	r3, #1
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	b21d      	sxth	r5, r3
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	1c9a      	adds	r2, r3, #2
 8003c40:	61ba      	str	r2, [r7, #24]
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	462b      	mov	r3, r5
 8003c48:	4622      	mov	r2, r4
 8003c4a:	f7fe fe7f 	bl	800294c <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	3301      	adds	r3, #1
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	b218      	sxth	r0, r3
 8003c56:	88bb      	ldrh	r3, [r7, #4]
 8003c58:	3302      	adds	r3, #2
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	b219      	sxth	r1, r3
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	3301      	adds	r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	b21c      	sxth	r4, r3
 8003c66:	883b      	ldrh	r3, [r7, #0]
 8003c68:	3b02      	subs	r3, #2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	b21d      	sxth	r5, r3
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	1c9a      	adds	r2, r3, #2
 8003c72:	61ba      	str	r2, [r7, #24]
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	462b      	mov	r3, r5
 8003c7a:	4622      	mov	r2, r4
 8003c7c:	f7fe fe66 	bl	800294c <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	3301      	adds	r3, #1
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	b218      	sxth	r0, r3
 8003c88:	883b      	ldrh	r3, [r7, #0]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b219      	sxth	r1, r3
 8003c90:	887b      	ldrh	r3, [r7, #2]
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	b21c      	sxth	r4, r3
 8003c98:	883b      	ldrh	r3, [r7, #0]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	b21d      	sxth	r5, r3
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	1c9a      	adds	r2, r3, #2
 8003ca4:	61ba      	str	r2, [r7, #24]
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	462b      	mov	r3, r5
 8003cac:	4622      	mov	r2, r4
 8003cae:	f7fe fe4d 	bl	800294c <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	b218      	sxth	r0, r3
 8003cba:	88bb      	ldrh	r3, [r7, #4]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	b219      	sxth	r1, r3
 8003cc2:	887b      	ldrh	r3, [r7, #2]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	b21c      	sxth	r4, r3
 8003cca:	883b      	ldrh	r3, [r7, #0]
 8003ccc:	3b02      	subs	r3, #2
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	b21d      	sxth	r5, r3
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	61ba      	str	r2, [r7, #24]
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	462b      	mov	r3, r5
 8003cde:	4622      	mov	r2, r4
 8003ce0:	f7fe fe34 	bl	800294c <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	b218      	sxth	r0, r3
 8003cec:	88bb      	ldrh	r3, [r7, #4]
 8003cee:	3302      	adds	r3, #2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b219      	sxth	r1, r3
 8003cf4:	887b      	ldrh	r3, [r7, #2]
 8003cf6:	3b03      	subs	r3, #3
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b21c      	sxth	r4, r3
 8003cfc:	88bb      	ldrh	r3, [r7, #4]
 8003cfe:	3302      	adds	r3, #2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b21d      	sxth	r5, r3
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	61ba      	str	r2, [r7, #24]
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	462b      	mov	r3, r5
 8003d10:	4622      	mov	r2, r4
 8003d12:	f7fe fe1b 	bl	800294c <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	3302      	adds	r3, #2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	b218      	sxth	r0, r3
 8003d1e:	88bb      	ldrh	r3, [r7, #4]
 8003d20:	3303      	adds	r3, #3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	b219      	sxth	r1, r3
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	3302      	adds	r3, #2
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	b21c      	sxth	r4, r3
 8003d2e:	883b      	ldrh	r3, [r7, #0]
 8003d30:	3b03      	subs	r3, #3
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	b21d      	sxth	r5, r3
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	1c9a      	adds	r2, r3, #2
 8003d3a:	61ba      	str	r2, [r7, #24]
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	462b      	mov	r3, r5
 8003d42:	4622      	mov	r2, r4
 8003d44:	f7fe fe02 	bl	800294c <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	3302      	adds	r3, #2
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	b218      	sxth	r0, r3
 8003d50:	883b      	ldrh	r3, [r7, #0]
 8003d52:	3b02      	subs	r3, #2
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	b219      	sxth	r1, r3
 8003d58:	887b      	ldrh	r3, [r7, #2]
 8003d5a:	3b02      	subs	r3, #2
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	b21c      	sxth	r4, r3
 8003d60:	883b      	ldrh	r3, [r7, #0]
 8003d62:	3b02      	subs	r3, #2
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	b21d      	sxth	r5, r3
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	1c9a      	adds	r2, r3, #2
 8003d6c:	61ba      	str	r2, [r7, #24]
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	462b      	mov	r3, r5
 8003d74:	4622      	mov	r2, r4
 8003d76:	f7fe fde9 	bl	800294c <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8003d7a:	887b      	ldrh	r3, [r7, #2]
 8003d7c:	3b02      	subs	r3, #2
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	b218      	sxth	r0, r3
 8003d82:	88bb      	ldrh	r3, [r7, #4]
 8003d84:	3302      	adds	r3, #2
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	b219      	sxth	r1, r3
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	3b02      	subs	r3, #2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	b21a      	sxth	r2, r3
 8003d92:	883b      	ldrh	r3, [r7, #0]
 8003d94:	3b03      	subs	r3, #3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	b21c      	sxth	r4, r3
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	4623      	mov	r3, r4
 8003da2:	f7fe fdd3 	bl	800294c <UG_DrawLine>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003db0 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	6039      	str	r1, [r7, #0]
 8003dba:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d810      	bhi.n	8003de4 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <UG_DriverRegister+0x40>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	330a      	adds	r3, #10
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8003dd2:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <UG_DriverRegister+0x40>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	330a      	adds	r3, #10
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4413      	add	r3, r2
 8003dde:	2203      	movs	r2, #3
 8003de0:	721a      	strb	r2, [r3, #8]
 8003de2:	e000      	b.n	8003de6 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8003de4:	bf00      	nop
}
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	20000794 	.word	0x20000794

08003df4 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8003dfa:	4b5e      	ldr	r3, [pc, #376]	; (8003f74 <UG_Update+0x180>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <UG_Update+0x2c>
 8003e0a:	4b5a      	ldr	r3, [pc, #360]	; (8003f74 <UG_Update+0x180>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8003e12:	4b58      	ldr	r3, [pc, #352]	; (8003f74 <UG_Update+0x180>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0201 	bic.w	r2, r2, #1
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8003e20:	4b54      	ldr	r3, [pc, #336]	; (8003f74 <UG_Update+0x180>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <UG_Update+0x180>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d071      	beq.n	8003f14 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8003e30:	4b50      	ldr	r3, [pc, #320]	; (8003f74 <UG_Update+0x180>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d06c      	beq.n	8003f14 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 8003e3a:	4b4e      	ldr	r3, [pc, #312]	; (8003f74 <UG_Update+0x180>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b4d      	ldr	r3, [pc, #308]	; (8003f74 <UG_Update+0x180>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6912      	ldr	r2, [r2, #16]
 8003e44:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8003e46:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <UG_Update+0x180>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b4a      	ldr	r3, [pc, #296]	; (8003f74 <UG_Update+0x180>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68d2      	ldr	r2, [r2, #12]
 8003e50:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8003e52:	4b48      	ldr	r3, [pc, #288]	; (8003f74 <UG_Update+0x180>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d045      	beq.n	8003ee8 <UG_Update+0xf4>
 8003e5c:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <UG_Update+0x180>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	7d9b      	ldrb	r3, [r3, #22]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d03d      	beq.n	8003ee8 <UG_Update+0xf4>
 8003e6c:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <UG_Update+0x180>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	7a1b      	ldrb	r3, [r3, #8]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d035      	beq.n	8003ee8 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8003e7c:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <UG_Update+0x180>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003e86:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <UG_Update+0x180>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d123      	bne.n	8003edc <UG_Update+0xe8>
 8003e94:	4b37      	ldr	r3, [pc, #220]	; (8003f74 <UG_Update+0x180>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8003e9e:	4b35      	ldr	r3, [pc, #212]	; (8003f74 <UG_Update+0x180>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d117      	bne.n	8003edc <UG_Update+0xe8>
 8003eac:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <UG_Update+0x180>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <UG_Update+0x180>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d10b      	bne.n	8003edc <UG_Update+0xe8>
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <UG_Update+0x180>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8003ece:	4b29      	ldr	r3, [pc, #164]	; (8003f74 <UG_Update+0x180>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d005      	beq.n	8003ee8 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8003edc:	4b25      	ldr	r3, [pc, #148]	; (8003f74 <UG_Update+0x180>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f848 	bl	8003f78 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8003ee8:	4b22      	ldr	r3, [pc, #136]	; (8003f74 <UG_Update+0x180>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	7a1a      	ldrb	r2, [r3, #8]
 8003ef0:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <UG_Update+0x180>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8003efe:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <UG_Update+0x180>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	7a1a      	ldrb	r2, [r3, #8]
 8003f06:	4b1b      	ldr	r3, [pc, #108]	; (8003f74 <UG_Update+0x180>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <UG_Update+0x180>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01b      	beq.n	8003f56 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8003f1e:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <UG_Update+0x180>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	7a1b      	ldrb	r3, [r3, #8]
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f8ca 	bl	80040cc <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	7a1b      	ldrb	r3, [r3, #8]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fb81 	bl	800364c <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f7ff fc34 	bl	80037b8 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7ff fc7b 	bl	800384c <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8003f56:	4b07      	ldr	r3, [pc, #28]	; (8003f74 <UG_Update+0x180>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <UG_Update+0x178>
     gui->device->flush();
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <UG_Update+0x180>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4798      	blx	r3
   }
}
 8003f6c:	bf00      	nop
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	20000794 	.word	0x20000794

08003f78 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b08f      	sub	sp, #60	; 0x3c
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 809a 	beq.w	80040bc <_UG_WindowDrawTitle+0x144>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7a1b      	ldrb	r3, [r3, #8]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 8093 	beq.w	80040bc <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	89db      	ldrh	r3, [r3, #14]
 8003f9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8a1b      	ldrh	r3, [r3, #16]
 8003fa0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8a5b      	ldrh	r3, [r3, #18]
 8003fa6:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	8a9b      	ldrh	r3, [r3, #20]
 8003fac:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	7d9b      	ldrb	r3, [r3, #22]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00f      	beq.n	8003fda <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8003fba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fbc:	3303      	adds	r3, #3
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8003fc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003fc4:	3303      	adds	r3, #3
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8003fca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003fcc:	3b03      	subs	r3, #3
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8003fd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fd4:	3b03      	subs	r3, #3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8003fda:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <_UG_WindowDrawTitle+0x150>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d106      	bne.n	8003ff4 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fea:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ff0:	83bb      	strh	r3, [r7, #28]
 8003ff2:	e005      	b.n	8004000 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ff8:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffe:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004006:	b29a      	uxth	r2, r3
 8004008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800400a:	4413      	add	r3, r2
 800400c:	b29b      	uxth	r3, r3
 800400e:	3b01      	subs	r3, #1
 8004010:	b29b      	uxth	r3, r3
 8004012:	b21c      	sxth	r4, r3
 8004014:	8bfb      	ldrh	r3, [r7, #30]
 8004016:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800401a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800401e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	4623      	mov	r3, r4
 8004026:	f7fe fc3b 	bl	80028a0 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8004036:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004038:	3303      	adds	r3, #3
 800403a:	b29b      	uxth	r3, r3
 800403c:	b21b      	sxth	r3, r3
 800403e:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8004040:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004042:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8004044:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004046:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800404e:	b29a      	uxth	r2, r3
 8004050:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004052:	4413      	add	r3, r2
 8004054:	b29b      	uxth	r3, r3
 8004056:	3b01      	subs	r3, #1
 8004058:	b29b      	uxth	r3, r3
 800405a:	b21b      	sxth	r3, r3
 800405c:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004064:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800406e:	b21b      	sxth	r3, r3
 8004070:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8004078:	b21b      	sxth	r3, r3
 800407a:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fc2f 	bl	80038e4 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800408c:	b29a      	uxth	r2, r3
 800408e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004090:	4413      	add	r3, r2
 8004092:	b29b      	uxth	r3, r3
 8004094:	b219      	sxth	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800409c:	b29a      	uxth	r2, r3
 800409e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80040a0:	4413      	add	r3, r2
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	b21b      	sxth	r3, r3
 80040a6:	f649 5413 	movw	r4, #40211	; 0x9d13
 80040aa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80040ae:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80040b2:	9400      	str	r4, [sp, #0]
 80040b4:	f7fe fc4a 	bl	800294c <UG_DrawLine>
      return UG_RESULT_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e001      	b.n	80040c0 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3734      	adds	r7, #52	; 0x34
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd90      	pop	{r4, r7, pc}
 80040c8:	20000794 	.word	0x20000794

080040cc <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b089      	sub	sp, #36	; 0x24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	89db      	ldrh	r3, [r3, #14]
 80040d8:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8a1b      	ldrh	r3, [r3, #16]
 80040de:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8a5b      	ldrh	r3, [r3, #18]
 80040e4:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8a9b      	ldrh	r3, [r3, #20]
 80040ea:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	7a1b      	ldrb	r3, [r3, #8]
 80040f0:	f023 0320 	bic.w	r3, r3, #32
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7a1b      	ldrb	r3, [r3, #8]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 8084 	beq.w	8004210 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	7d9b      	ldrb	r3, [r3, #22]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d021      	beq.n	8004158 <_UG_WindowUpdate+0x8c>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	7a1b      	ldrb	r3, [r3, #8]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d11b      	bne.n	8004158 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8004120:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004124:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004128:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800412c:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8004130:	4c43      	ldr	r4, [pc, #268]	; (8004240 <_UG_WindowUpdate+0x174>)
 8004132:	9400      	str	r4, [sp, #0]
 8004134:	f7ff fd1a 	bl	8003b6c <_UG_DrawObjectFrame>
         xs+=3;
 8004138:	8abb      	ldrh	r3, [r7, #20]
 800413a:	3303      	adds	r3, #3
 800413c:	b29b      	uxth	r3, r3
 800413e:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8004140:	8a7b      	ldrh	r3, [r7, #18]
 8004142:	3303      	adds	r3, #3
 8004144:	b29b      	uxth	r3, r3
 8004146:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8004148:	8a3b      	ldrh	r3, [r7, #16]
 800414a:	3b03      	subs	r3, #3
 800414c:	b29b      	uxth	r3, r3
 800414e:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8004150:	89fb      	ldrh	r3, [r7, #14]
 8004152:	3b03      	subs	r3, #3
 8004154:	b29b      	uxth	r3, r3
 8004156:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	7d9b      	ldrb	r3, [r3, #22]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01a      	beq.n	800419a <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff07 	bl	8003f78 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004170:	b29a      	uxth	r2, r3
 8004172:	8a7b      	ldrh	r3, [r7, #18]
 8004174:	4413      	add	r3, r2
 8004176:	b29b      	uxth	r3, r3
 8004178:	3301      	adds	r3, #1
 800417a:	b29b      	uxth	r3, r3
 800417c:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	7a1b      	ldrb	r3, [r3, #8]
 8004182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d007      	beq.n	800419a <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7a1b      	ldrb	r3, [r3, #8]
 800418e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004192:	b2da      	uxtb	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	721a      	strb	r2, [r3, #8]
            return;
 8004198:	e04e      	b.n	8004238 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	899b      	ldrh	r3, [r3, #12]
 800419e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80041a2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80041a6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80041aa:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	4623      	mov	r3, r4
 80041b2:	f7fe fb75 	bl	80028a0 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 80041bc:	2300      	movs	r3, #0
 80041be:	82fb      	strh	r3, [r7, #22]
 80041c0:	e021      	b.n	8004206 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	8afb      	ldrh	r3, [r7, #22]
 80041c8:	015b      	lsls	r3, r3, #5
 80041ca:	4413      	add	r3, r2
 80041cc:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d112      	bne.n	8004200 <_UG_WindowUpdate+0x134>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00c      	beq.n	8004200 <_UG_WindowUpdate+0x134>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <_UG_WindowUpdate+0x134>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8004200:	8afb      	ldrh	r3, [r7, #22]
 8004202:	3301      	adds	r3, #1
 8004204:	82fb      	strh	r3, [r7, #22]
 8004206:	8afa      	ldrh	r2, [r7, #22]
 8004208:	89bb      	ldrh	r3, [r7, #12]
 800420a:	429a      	cmp	r2, r3
 800420c:	d3d9      	bcc.n	80041c2 <_UG_WindowUpdate+0xf6>
 800420e:	e013      	b.n	8004238 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8004228:	4b06      	ldr	r3, [pc, #24]	; (8004244 <_UG_WindowUpdate+0x178>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	4623      	mov	r3, r4
 8004234:	f7fe fb34 	bl	80028a0 <UG_FillFrame>
   }
}
 8004238:	371c      	adds	r7, #28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd90      	pop	{r4, r7, pc}
 800423e:	bf00      	nop
 8004240:	0800c560 	.word	0x0800c560
 8004244:	20000794 	.word	0x20000794

08004248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800424c:	f7fe fa30 	bl	80026b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004250:	480c      	ldr	r0, [pc, #48]	; (8004284 <LoopForever+0x6>)
  ldr r1, =_edata
 8004252:	490d      	ldr	r1, [pc, #52]	; (8004288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004254:	4a0d      	ldr	r2, [pc, #52]	; (800428c <LoopForever+0xe>)
  movs r3, #0
 8004256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004258:	e002      	b.n	8004260 <LoopCopyDataInit>

0800425a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800425a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800425c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800425e:	3304      	adds	r3, #4

08004260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004264:	d3f9      	bcc.n	800425a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004266:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004268:	4c0a      	ldr	r4, [pc, #40]	; (8004294 <LoopForever+0x16>)
  movs r3, #0
 800426a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800426c:	e001      	b.n	8004272 <LoopFillZerobss>

0800426e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800426e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004270:	3204      	adds	r2, #4

08004272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004274:	d3fb      	bcc.n	800426e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004276:	f006 fee7 	bl	800b048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800427a:	f7fc fc6b 	bl	8000b54 <main>

0800427e <LoopForever>:

LoopForever:
    b LoopForever
 800427e:	e7fe      	b.n	800427e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004280:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004288:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800428c:	0800c5b0 	.word	0x0800c5b0
  ldr r2, =_sbss
 8004290:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8004294:	200007b4 	.word	0x200007b4

08004298 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004298:	e7fe      	b.n	8004298 <ADC1_IRQHandler>

0800429a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a4:	2003      	movs	r0, #3
 80042a6:	f001 fabb 	bl	8005820 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042aa:	2000      	movs	r0, #0
 80042ac:	f000 f80e 	bl	80042cc <HAL_InitTick>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	71fb      	strb	r3, [r7, #7]
 80042ba:	e001      	b.n	80042c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042bc:	f7fd fc5c 	bl	8001b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80042c0:	79fb      	ldrb	r3, [r7, #7]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
	...

080042cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80042d4:	2300      	movs	r3, #0
 80042d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <HAL_InitTick+0x6c>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d023      	beq.n	8004328 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80042e0:	4b16      	ldr	r3, [pc, #88]	; (800433c <HAL_InitTick+0x70>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b14      	ldr	r3, [pc, #80]	; (8004338 <HAL_InitTick+0x6c>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80042f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f6:	4618      	mov	r0, r3
 80042f8:	f001 fab9 	bl	800586e <HAL_SYSTICK_Config>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b0f      	cmp	r3, #15
 8004306:	d809      	bhi.n	800431c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004308:	2200      	movs	r2, #0
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	f001 fa91 	bl	8005836 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004314:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <HAL_InitTick+0x74>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e007      	b.n	800432c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e004      	b.n	800432c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	73fb      	strb	r3, [r7, #15]
 8004326:	e001      	b.n	800432c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800432c:	7bfb      	ldrb	r3, [r7, #15]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000018 	.word	0x20000018
 800433c:	20000010 	.word	0x20000010
 8004340:	20000014 	.word	0x20000014

08004344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <HAL_IncTick+0x20>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	4b06      	ldr	r3, [pc, #24]	; (8004368 <HAL_IncTick+0x24>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4413      	add	r3, r2
 8004354:	4a04      	ldr	r2, [pc, #16]	; (8004368 <HAL_IncTick+0x24>)
 8004356:	6013      	str	r3, [r2, #0]
}
 8004358:	bf00      	nop
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000018 	.word	0x20000018
 8004368:	200007b0 	.word	0x200007b0

0800436c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return uwTick;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_GetTick+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	200007b0 	.word	0x200007b0

08004384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800438c:	f7ff ffee 	bl	800436c <HAL_GetTick>
 8004390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d005      	beq.n	80043aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <HAL_Delay+0x44>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4413      	add	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80043aa:	bf00      	nop
 80043ac:	f7ff ffde 	bl	800436c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d8f7      	bhi.n	80043ac <HAL_Delay+0x28>
  {
  }
}
 80043bc:	bf00      	nop
 80043be:	bf00      	nop
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	20000018 	.word	0x20000018

080043cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	609a      	str	r2, [r3, #8]
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	609a      	str	r2, [r3, #8]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004428:	4618      	mov	r0, r3
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
 8004440:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3360      	adds	r3, #96	; 0x60
 8004446:	461a      	mov	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <LL_ADC_SetOffset+0x44>)
 8004456:	4013      	ands	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	430a      	orrs	r2, r1
 8004462:	4313      	orrs	r3, r2
 8004464:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800446c:	bf00      	nop
 800446e:	371c      	adds	r7, #28
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	03fff000 	.word	0x03fff000

0800447c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3360      	adds	r3, #96	; 0x60
 800448a:	461a      	mov	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3360      	adds	r3, #96	; 0x60
 80044b8:	461a      	mov	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	615a      	str	r2, [r3, #20]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3330      	adds	r3, #48	; 0x30
 8004514:	461a      	mov	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	0a1b      	lsrs	r3, r3, #8
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	4413      	add	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	211f      	movs	r1, #31
 8004530:	fa01 f303 	lsl.w	r3, r1, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	401a      	ands	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0e9b      	lsrs	r3, r3, #26
 800453c:	f003 011f 	and.w	r1, r3, #31
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	fa01 f303 	lsl.w	r3, r1, r3
 800454a:	431a      	orrs	r2, r3
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004550:	bf00      	nop
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3314      	adds	r3, #20
 800456c:	461a      	mov	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	0e5b      	lsrs	r3, r3, #25
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	4413      	add	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	0d1b      	lsrs	r3, r3, #20
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	2107      	movs	r1, #7
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	401a      	ands	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	0d1b      	lsrs	r3, r3, #20
 8004596:	f003 031f 	and.w	r3, r3, #31
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	fa01 f303 	lsl.w	r3, r1, r3
 80045a0:	431a      	orrs	r2, r3
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045cc:	43db      	mvns	r3, r3
 80045ce:	401a      	ands	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0318 	and.w	r3, r3, #24
 80045d6:	4908      	ldr	r1, [pc, #32]	; (80045f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80045d8:	40d9      	lsrs	r1, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	400b      	ands	r3, r1
 80045de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	0007ffff 	.word	0x0007ffff

080045fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800460c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6093      	str	r3, [r2, #8]
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004630:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004634:	d101      	bne.n	800463a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004658:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800465c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004680:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004684:	d101      	bne.n	800468a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <LL_ADC_IsEnabled+0x18>
 80046ac:	2301      	movs	r3, #1
 80046ae:	e000      	b.n	80046b2 <LL_ADC_IsEnabled+0x1a>
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	d101      	bne.n	80046d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d101      	bne.n	80046fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
	...

0800470c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e129      	b.n	800497a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f7fd fa43 	bl	8001bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff ff67 	bl	8004620 <LL_ADC_IsDeepPowerDownEnabled>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff ff4d 	bl	80045fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff82 	bl	8004670 <LL_ADC_IsInternalRegulatorEnabled>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d115      	bne.n	800479e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff ff66 	bl	8004648 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800477c:	4b81      	ldr	r3, [pc, #516]	; (8004984 <HAL_ADC_Init+0x278>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	099b      	lsrs	r3, r3, #6
 8004782:	4a81      	ldr	r2, [pc, #516]	; (8004988 <HAL_ADC_Init+0x27c>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	099b      	lsrs	r3, r3, #6
 800478a:	3301      	adds	r3, #1
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004790:	e002      	b.n	8004798 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3b01      	subs	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1f9      	bne.n	8004792 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff ff64 	bl	8004670 <LL_ADC_IsInternalRegulatorEnabled>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10d      	bne.n	80047ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	f043 0210 	orr.w	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff ff75 	bl	80046be <LL_ADC_REG_IsConversionOngoing>
 80047d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f040 80c2 	bne.w	8004968 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 80be 	bne.w	8004968 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80047f4:	f043 0202 	orr.w	r2, r3, #2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff49 	bl	8004698 <LL_ADC_IsEnabled>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10b      	bne.n	8004824 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800480c:	485f      	ldr	r0, [pc, #380]	; (800498c <HAL_ADC_Init+0x280>)
 800480e:	f7ff ff43 	bl	8004698 <LL_ADC_IsEnabled>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4619      	mov	r1, r3
 800481e:	485c      	ldr	r0, [pc, #368]	; (8004990 <HAL_ADC_Init+0x284>)
 8004820:	f7ff fdd4 	bl	80043cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	7e5b      	ldrb	r3, [r3, #25]
 8004828:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800482e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004834:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800483a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004842:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d106      	bne.n	8004860 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	3b01      	subs	r3, #1
 8004858:	045b      	lsls	r3, r3, #17
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	4b44      	ldr	r3, [pc, #272]	; (8004994 <HAL_ADC_Init+0x288>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	69b9      	ldr	r1, [r7, #24]
 800488c:	430b      	orrs	r3, r1
 800488e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff ff25 	bl	80046e4 <LL_ADC_INJ_IsConversionOngoing>
 800489a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d140      	bne.n	8004924 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d13d      	bne.n	8004924 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	7e1b      	ldrb	r3, [r3, #24]
 80048b0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80048b2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80048bc:	4313      	orrs	r3, r2
 80048be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ca:	f023 0306 	bic.w	r3, r3, #6
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	69b9      	ldr	r1, [r7, #24]
 80048d4:	430b      	orrs	r3, r1
 80048d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d118      	bne.n	8004914 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80048ec:	f023 0304 	bic.w	r3, r3, #4
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048f8:	4311      	orrs	r1, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048fe:	4311      	orrs	r1, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004904:	430a      	orrs	r2, r1
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	611a      	str	r2, [r3, #16]
 8004912:	e007      	b.n	8004924 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d10c      	bne.n	8004946 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	f023 010f 	bic.w	r1, r3, #15
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	1e5a      	subs	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	631a      	str	r2, [r3, #48]	; 0x30
 8004944:	e007      	b.n	8004956 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 020f 	bic.w	r2, r2, #15
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	f043 0201 	orr.w	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	659a      	str	r2, [r3, #88]	; 0x58
 8004966:	e007      	b.n	8004978 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	f043 0210 	orr.w	r2, r3, #16
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004978:	7ffb      	ldrb	r3, [r7, #31]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3720      	adds	r7, #32
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000010 	.word	0x20000010
 8004988:	053e2d63 	.word	0x053e2d63
 800498c:	50040000 	.word	0x50040000
 8004990:	50040300 	.word	0x50040300
 8004994:	fff0c007 	.word	0xfff0c007

08004998 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b0b6      	sub	sp, #216	; 0xd8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049a2:	2300      	movs	r3, #0
 80049a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x22>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e3d5      	b.n	8005166 <HAL_ADC_ConfigChannel+0x7ce>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fe79 	bl	80046be <LL_ADC_REG_IsConversionOngoing>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f040 83ba 	bne.w	8005148 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d824      	bhi.n	8004a2e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	3b02      	subs	r3, #2
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d81b      	bhi.n	8004a26 <HAL_ADC_ConfigChannel+0x8e>
 80049ee:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <HAL_ADC_ConfigChannel+0x5c>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a0d 	.word	0x08004a0d
 80049fc:	08004a15 	.word	0x08004a15
 8004a00:	08004a1d 	.word	0x08004a1d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8004a04:	230c      	movs	r3, #12
 8004a06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a0a:	e010      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8004a0c:	2312      	movs	r3, #18
 8004a0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a12:	e00c      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8004a14:	2318      	movs	r3, #24
 8004a16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a1a:	e008      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8004a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a24:	e003      	b.n	8004a2e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8004a26:	2306      	movs	r3, #6
 8004a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8004a2c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004a3c:	f7ff fd62 	bl	8004504 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff fe3a 	bl	80046be <LL_ADC_REG_IsConversionOngoing>
 8004a4a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7ff fe46 	bl	80046e4 <LL_ADC_INJ_IsConversionOngoing>
 8004a58:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f040 81bf 	bne.w	8004de4 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 81ba 	bne.w	8004de4 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a78:	d10f      	bne.n	8004a9a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2200      	movs	r2, #0
 8004a84:	4619      	mov	r1, r3
 8004a86:	f7ff fd69 	bl	800455c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fd23 	bl	80044de <LL_ADC_SetSamplingTimeCommonConfig>
 8004a98:	e00e      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f7ff fd58 	bl	800455c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff fd13 	bl	80044de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	08db      	lsrs	r3, r3, #3
 8004ac4:	f003 0303 	and.w	r3, r3, #3
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d00a      	beq.n	8004af0 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6919      	ldr	r1, [r3, #16]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004aea:	f7ff fca3 	bl	8004434 <LL_ADC_SetOffset>
 8004aee:	e179      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fcc0 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10a      	bne.n	8004b1c <HAL_ADC_ConfigChannel+0x184>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fcb5 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004b12:	4603      	mov	r3, r0
 8004b14:	0e9b      	lsrs	r3, r3, #26
 8004b16:	f003 021f 	and.w	r2, r3, #31
 8004b1a:	e01e      	b.n	8004b5a <HAL_ADC_ConfigChannel+0x1c2>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2100      	movs	r1, #0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fcaa 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b32:	fa93 f3a3 	rbit	r3, r3
 8004b36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004b3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8004b4a:	2320      	movs	r3, #32
 8004b4c:	e004      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8004b4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b52:	fab3 f383 	clz	r3, r3
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d105      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x1da>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	0e9b      	lsrs	r3, r3, #26
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	e018      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x20c>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b7e:	fa93 f3a3 	rbit	r3, r3
 8004b82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004b86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004b8e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8004b96:	2320      	movs	r3, #32
 8004b98:	e004      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8004b9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d106      	bne.n	8004bb6 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff fc79 	bl	80044a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2101      	movs	r1, #1
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fc5d 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10a      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x24a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff fc52 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	0e9b      	lsrs	r3, r3, #26
 8004bdc:	f003 021f 	and.w	r2, r3, #31
 8004be0:	e01e      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x288>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2101      	movs	r1, #1
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fc47 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004bf8:	fa93 f3a3 	rbit	r3, r3
 8004bfc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004c08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8004c10:	2320      	movs	r3, #32
 8004c12:	e004      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8004c14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d105      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x2a0>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	e018      	b.n	8004c6a <HAL_ADC_ConfigChannel+0x2d2>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004c4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004c54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	e004      	b.n	8004c6a <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8004c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c64:	fab3 f383 	clz	r3, r3
 8004c68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d106      	bne.n	8004c7c <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	2101      	movs	r1, #1
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fc16 	bl	80044a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2102      	movs	r1, #2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fbfa 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0x310>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2102      	movs	r1, #2
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fbef 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	0e9b      	lsrs	r3, r3, #26
 8004ca2:	f003 021f 	and.w	r2, r3, #31
 8004ca6:	e01e      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x34e>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2102      	movs	r1, #2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fbe4 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cbe:	fa93 f3a3 	rbit	r3, r3
 8004cc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004cc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004cca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	e004      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8004cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x366>
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	0e9b      	lsrs	r3, r3, #26
 8004cf8:	f003 031f 	and.w	r3, r3, #31
 8004cfc:	e014      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x390>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d06:	fa93 f3a3 	rbit	r3, r3
 8004d0a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004d0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004d12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8004d1a:	2320      	movs	r3, #32
 8004d1c:	e004      	b.n	8004d28 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8004d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d22:	fab3 f383 	clz	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d106      	bne.n	8004d3a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2200      	movs	r2, #0
 8004d32:	2102      	movs	r1, #2
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fbb7 	bl	80044a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2103      	movs	r1, #3
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff fb9b 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x3ce>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2103      	movs	r1, #3
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fb90 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	0e9b      	lsrs	r3, r3, #26
 8004d60:	f003 021f 	and.w	r2, r3, #31
 8004d64:	e017      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x3fe>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2103      	movs	r1, #3
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff fb85 	bl	800447c <LL_ADC_GetOffsetChannel>
 8004d72:	4603      	mov	r3, r0
 8004d74:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d78:	fa93 f3a3 	rbit	r3, r3
 8004d7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d80:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8004d88:	2320      	movs	r3, #32
 8004d8a:	e003      	b.n	8004d94 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8004d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d8e:	fab3 f383 	clz	r3, r3
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x416>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	0e9b      	lsrs	r3, r3, #26
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	e011      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0x43a>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db6:	fa93 f3a3 	rbit	r3, r3
 8004dba:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004dbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dbe:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	e003      	b.n	8004dd2 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8004dca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dcc:	fab3 f383 	clz	r3, r3
 8004dd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d106      	bne.n	8004de4 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2103      	movs	r1, #3
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7ff fb62 	bl	80044a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fc55 	bl	8004698 <LL_ADC_IsEnabled>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f040 813f 	bne.w	8005074 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6819      	ldr	r1, [r3, #0]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f7ff fbd6 	bl	80045b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	4a8e      	ldr	r2, [pc, #568]	; (8005048 <HAL_ADC_ConfigChannel+0x6b0>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	f040 8130 	bne.w	8005074 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10b      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x4a4>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	0e9b      	lsrs	r3, r3, #26
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f003 031f 	and.w	r3, r3, #31
 8004e30:	2b09      	cmp	r3, #9
 8004e32:	bf94      	ite	ls
 8004e34:	2301      	movls	r3, #1
 8004e36:	2300      	movhi	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	e019      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x4d8>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e44:	fa93 f3a3 	rbit	r3, r3
 8004e48:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8004e54:	2320      	movs	r3, #32
 8004e56:	e003      	b.n	8004e60 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8004e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e5a:	fab3 f383 	clz	r3, r3
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	3301      	adds	r3, #1
 8004e62:	f003 031f 	and.w	r3, r3, #31
 8004e66:	2b09      	cmp	r3, #9
 8004e68:	bf94      	ite	ls
 8004e6a:	2301      	movls	r3, #1
 8004e6c:	2300      	movhi	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d079      	beq.n	8004f68 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d107      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x4f8>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0e9b      	lsrs	r3, r3, #26
 8004e86:	3301      	adds	r3, #1
 8004e88:	069b      	lsls	r3, r3, #26
 8004e8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e8e:	e015      	b.n	8004ebc <HAL_ADC_ConfigChannel+0x524>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e98:	fa93 f3a3 	rbit	r3, r3
 8004e9c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	e003      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8004eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	069b      	lsls	r3, r3, #26
 8004eb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x544>
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	0e9b      	lsrs	r3, r3, #26
 8004ece:	3301      	adds	r3, #1
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	2101      	movs	r1, #1
 8004ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eda:	e017      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x574>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee4:	fa93 f3a3 	rbit	r3, r3
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8004ef4:	2320      	movs	r3, #32
 8004ef6:	e003      	b.n	8004f00 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8004ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004efa:	fab3 f383 	clz	r3, r3
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	3301      	adds	r3, #1
 8004f02:	f003 031f 	and.w	r3, r3, #31
 8004f06:	2101      	movs	r1, #1
 8004f08:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0c:	ea42 0103 	orr.w	r1, r2, r3
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10a      	bne.n	8004f32 <HAL_ADC_ConfigChannel+0x59a>
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	0e9b      	lsrs	r3, r3, #26
 8004f22:	3301      	adds	r3, #1
 8004f24:	f003 021f 	and.w	r2, r3, #31
 8004f28:	4613      	mov	r3, r2
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	4413      	add	r3, r2
 8004f2e:	051b      	lsls	r3, r3, #20
 8004f30:	e018      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x5cc>
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3a:	fa93 f3a3 	rbit	r3, r3
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8004f4a:	2320      	movs	r3, #32
 8004f4c:	e003      	b.n	8004f56 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8004f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f50:	fab3 f383 	clz	r3, r3
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	3301      	adds	r3, #1
 8004f58:	f003 021f 	and.w	r2, r3, #31
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	4413      	add	r3, r2
 8004f62:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f64:	430b      	orrs	r3, r1
 8004f66:	e080      	b.n	800506a <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x5ec>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	0e9b      	lsrs	r3, r3, #26
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	069b      	lsls	r3, r3, #26
 8004f7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f82:	e015      	b.n	8004fb0 <HAL_ADC_ConfigChannel+0x618>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e003      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8004fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa2:	fab3 f383 	clz	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	3301      	adds	r3, #1
 8004faa:	069b      	lsls	r3, r3, #26
 8004fac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x638>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0e9b      	lsrs	r3, r3, #26
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	e017      	b.n	8005000 <HAL_ADC_ConfigChannel+0x668>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	fa93 f3a3 	rbit	r3, r3
 8004fdc:	61bb      	str	r3, [r7, #24]
  return result;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004fe8:	2320      	movs	r3, #32
 8004fea:	e003      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	fab3 f383 	clz	r3, r3
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	ea42 0103 	orr.w	r1, r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <HAL_ADC_ConfigChannel+0x694>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	0e9b      	lsrs	r3, r3, #26
 8005016:	3301      	adds	r3, #1
 8005018:	f003 021f 	and.w	r2, r3, #31
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	3b1e      	subs	r3, #30
 8005024:	051b      	lsls	r3, r3, #20
 8005026:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800502a:	e01d      	b.n	8005068 <HAL_ADC_ConfigChannel+0x6d0>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	fa93 f3a3 	rbit	r3, r3
 8005038:	60fb      	str	r3, [r7, #12]
  return result;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8005044:	2320      	movs	r3, #32
 8005046:	e005      	b.n	8005054 <HAL_ADC_ConfigChannel+0x6bc>
 8005048:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	fab3 f383 	clz	r3, r3
 8005052:	b2db      	uxtb	r3, r3
 8005054:	3301      	adds	r3, #1
 8005056:	f003 021f 	and.w	r2, r3, #31
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	3b1e      	subs	r3, #30
 8005062:	051b      	lsls	r3, r3, #20
 8005064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005068:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800506a:	683a      	ldr	r2, [r7, #0]
 800506c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800506e:	4619      	mov	r1, r3
 8005070:	f7ff fa74 	bl	800455c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	4b3d      	ldr	r3, [pc, #244]	; (8005170 <HAL_ADC_ConfigChannel+0x7d8>)
 800507a:	4013      	ands	r3, r2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d06c      	beq.n	800515a <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005080:	483c      	ldr	r0, [pc, #240]	; (8005174 <HAL_ADC_ConfigChannel+0x7dc>)
 8005082:	f7ff f9c9 	bl	8004418 <LL_ADC_GetCommonPathInternalCh>
 8005086:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a3a      	ldr	r2, [pc, #232]	; (8005178 <HAL_ADC_ConfigChannel+0x7e0>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d127      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d121      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a35      	ldr	r2, [pc, #212]	; (800517c <HAL_ADC_ConfigChannel+0x7e4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d157      	bne.n	800515a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050b2:	4619      	mov	r1, r3
 80050b4:	482f      	ldr	r0, [pc, #188]	; (8005174 <HAL_ADC_ConfigChannel+0x7dc>)
 80050b6:	f7ff f99c 	bl	80043f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80050ba:	4b31      	ldr	r3, [pc, #196]	; (8005180 <HAL_ADC_ConfigChannel+0x7e8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	099b      	lsrs	r3, r3, #6
 80050c0:	4a30      	ldr	r2, [pc, #192]	; (8005184 <HAL_ADC_ConfigChannel+0x7ec>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	1c5a      	adds	r2, r3, #1
 80050ca:	4613      	mov	r3, r2
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80050d4:	e002      	b.n	80050dc <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	3b01      	subs	r3, #1
 80050da:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f9      	bne.n	80050d6 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050e2:	e03a      	b.n	800515a <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a27      	ldr	r2, [pc, #156]	; (8005188 <HAL_ADC_ConfigChannel+0x7f0>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d113      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80050ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10d      	bne.n	8005116 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1f      	ldr	r2, [pc, #124]	; (800517c <HAL_ADC_ConfigChannel+0x7e4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d12a      	bne.n	800515a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800510c:	4619      	mov	r1, r3
 800510e:	4819      	ldr	r0, [pc, #100]	; (8005174 <HAL_ADC_ConfigChannel+0x7dc>)
 8005110:	f7ff f96f 	bl	80043f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005114:	e021      	b.n	800515a <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1c      	ldr	r2, [pc, #112]	; (800518c <HAL_ADC_ConfigChannel+0x7f4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d11c      	bne.n	800515a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005120:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d116      	bne.n	800515a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a12      	ldr	r2, [pc, #72]	; (800517c <HAL_ADC_ConfigChannel+0x7e4>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005136:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800513a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800513e:	4619      	mov	r1, r3
 8005140:	480c      	ldr	r0, [pc, #48]	; (8005174 <HAL_ADC_ConfigChannel+0x7dc>)
 8005142:	f7ff f956 	bl	80043f2 <LL_ADC_SetCommonPathInternalCh>
 8005146:	e008      	b.n	800515a <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	f043 0220 	orr.w	r2, r3, #32
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8005162:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005166:	4618      	mov	r0, r3
 8005168:	37d8      	adds	r7, #216	; 0xd8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	80080000 	.word	0x80080000
 8005174:	50040300 	.word	0x50040300
 8005178:	c7520000 	.word	0xc7520000
 800517c:	50040000 	.word	0x50040000
 8005180:	20000010 	.word	0x20000010
 8005184:	053e2d63 	.word	0x053e2d63
 8005188:	cb840000 	.word	0xcb840000
 800518c:	80000001 	.word	0x80000001

08005190 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0ed      	b.n	800537e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fc fd78 	bl	8001ca4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051c4:	f7ff f8d2 	bl	800436c <HAL_GetTick>
 80051c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051ca:	e012      	b.n	80051f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051cc:	f7ff f8ce 	bl	800436c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b0a      	cmp	r3, #10
 80051d8:	d90b      	bls.n	80051f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2205      	movs	r2, #5
 80051ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e0c5      	b.n	800537e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0e5      	beq.n	80051cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0202 	bic.w	r2, r2, #2
 800520e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005210:	f7ff f8ac 	bl	800436c <HAL_GetTick>
 8005214:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005216:	e012      	b.n	800523e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005218:	f7ff f8a8 	bl	800436c <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b0a      	cmp	r3, #10
 8005224:	d90b      	bls.n	800523e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2205      	movs	r2, #5
 8005236:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e09f      	b.n	800537e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1e5      	bne.n	8005218 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	7e1b      	ldrb	r3, [r3, #24]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d108      	bne.n	8005266 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	e007      	b.n	8005276 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005274:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	7e5b      	ldrb	r3, [r3, #25]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d108      	bne.n	8005290 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e007      	b.n	80052a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800529e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	7e9b      	ldrb	r3, [r3, #26]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d108      	bne.n	80052ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0220 	orr.w	r2, r2, #32
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	e007      	b.n	80052ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0220 	bic.w	r2, r2, #32
 80052c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	7edb      	ldrb	r3, [r3, #27]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d108      	bne.n	80052e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0210 	bic.w	r2, r2, #16
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	e007      	b.n	80052f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0210 	orr.w	r2, r2, #16
 80052f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	7f1b      	ldrb	r3, [r3, #28]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d108      	bne.n	800530e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0208 	orr.w	r2, r2, #8
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e007      	b.n	800531e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0208 	bic.w	r2, r2, #8
 800531c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	7f5b      	ldrb	r3, [r3, #29]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d108      	bne.n	8005338 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0204 	orr.w	r2, r2, #4
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	e007      	b.n	8005348 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0204 	bic.w	r2, r2, #4
 8005346:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	431a      	orrs	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	ea42 0103 	orr.w	r1, r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	1e5a      	subs	r2, r3, #1
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8005390:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4904      	ldr	r1, [pc, #16]	; (80053a8 <LL_EXTI_EnableIT_0_31+0x20>)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40010400 	.word	0x40010400

080053ac <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	43db      	mvns	r3, r3
 80053bc:	4904      	ldr	r1, [pc, #16]	; (80053d0 <LL_EXTI_DisableIT_0_31+0x24>)
 80053be:	4013      	ands	r3, r2
 80053c0:	600b      	str	r3, [r1, #0]
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010400 	.word	0x40010400

080053d4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80053dc:	4b05      	ldr	r3, [pc, #20]	; (80053f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	4904      	ldr	r1, [pc, #16]	; (80053f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	604b      	str	r3, [r1, #4]

}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	40010400 	.word	0x40010400

080053f8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <LL_EXTI_DisableEvent_0_31+0x24>)
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	43db      	mvns	r3, r3
 8005408:	4904      	ldr	r1, [pc, #16]	; (800541c <LL_EXTI_DisableEvent_0_31+0x24>)
 800540a:	4013      	ands	r3, r2
 800540c:	604b      	str	r3, [r1, #4]
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	40010400 	.word	0x40010400

08005420 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	4904      	ldr	r1, [pc, #16]	; (8005440 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4313      	orrs	r3, r2
 8005432:	608b      	str	r3, [r1, #8]

}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40010400 	.word	0x40010400

08005444 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800544c:	4b06      	ldr	r3, [pc, #24]	; (8005468 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	43db      	mvns	r3, r3
 8005454:	4904      	ldr	r1, [pc, #16]	; (8005468 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005456:	4013      	ands	r3, r2
 8005458:	608b      	str	r3, [r1, #8]

}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010400 	.word	0x40010400

0800546c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8005474:	4b05      	ldr	r3, [pc, #20]	; (800548c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	4904      	ldr	r1, [pc, #16]	; (800548c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4313      	orrs	r3, r2
 800547e:	60cb      	str	r3, [r1, #12]
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	40010400 	.word	0x40010400

08005490 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8005498:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800549a:	68da      	ldr	r2, [r3, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	43db      	mvns	r3, r3
 80054a0:	4904      	ldr	r1, [pc, #16]	; (80054b4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	60cb      	str	r3, [r1, #12]
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40010400 	.word	0x40010400

080054b8 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80054c0:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6153      	str	r3, [r2, #20]
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40010400 	.word	0x40010400

080054d8 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e0d1      	b.n	8005698 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005502:	d102      	bne.n	800550a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	e0c6      	b.n	8005698 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d115      	bne.n	8005542 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	629a      	str	r2, [r3, #40]	; 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005524:	4b5f      	ldr	r3, [pc, #380]	; (80056a4 <HAL_COMP_Init+0x1cc>)
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	4a5e      	ldr	r2, [pc, #376]	; (80056a4 <HAL_COMP_Init+0x1cc>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6613      	str	r3, [r2, #96]	; 0x60
 8005530:	4b5c      	ldr	r3, [pc, #368]	; (80056a4 <HAL_COMP_Init+0x1cc>)
 8005532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7fc fbf5 	bl	8001d2c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800554c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b4b      	ldr	r3, [pc, #300]	; (80056a8 <HAL_COMP_Init+0x1d0>)
 800557a:	4013      	ands	r3, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	6979      	ldr	r1, [r7, #20]
 8005582:	430b      	orrs	r3, r1
 8005584:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800558e:	d106      	bne.n	800559e <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8005590:	4b46      	ldr	r3, [pc, #280]	; (80056ac <HAL_COMP_Init+0x1d4>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a45      	ldr	r2, [pc, #276]	; (80056ac <HAL_COMP_Init+0x1d4>)
 8005596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	e005      	b.n	80055aa <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800559e:	4b43      	ldr	r3, [pc, #268]	; (80056ac <HAL_COMP_Init+0x1d4>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a42      	ldr	r2, [pc, #264]	; (80056ac <HAL_COMP_Init+0x1d4>)
 80055a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a8:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d016      	beq.n	80055e6 <HAL_COMP_Init+0x10e>
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d113      	bne.n	80055e6 <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055be:	4b3c      	ldr	r3, [pc, #240]	; (80056b0 <HAL_COMP_Init+0x1d8>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	099b      	lsrs	r3, r3, #6
 80055c4:	4a3b      	ldr	r2, [pc, #236]	; (80056b4 <HAL_COMP_Init+0x1dc>)
 80055c6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80055d8:	e002      	b.n	80055e0 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3b01      	subs	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f9      	bne.n	80055da <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a33      	ldr	r2, [pc, #204]	; (80056b8 <HAL_COMP_Init+0x1e0>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d102      	bne.n	80055f6 <HAL_COMP_Init+0x11e>
 80055f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055f4:	e001      	b.n	80055fa <HAL_COMP_Init+0x122>
 80055f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80055fa:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a1b      	ldr	r3, [r3, #32]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d037      	beq.n	8005678 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8005614:	6938      	ldr	r0, [r7, #16]
 8005616:	f7ff ff03 	bl	8005420 <LL_EXTI_EnableRisingTrig_0_31>
 800561a:	e002      	b.n	8005622 <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800561c:	6938      	ldr	r0, [r7, #16]
 800561e:	f7ff ff11 	bl	8005444 <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800562e:	6938      	ldr	r0, [r7, #16]
 8005630:	f7ff ff1c 	bl	800546c <LL_EXTI_EnableFallingTrig_0_31>
 8005634:	e002      	b.n	800563c <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8005636:	6938      	ldr	r0, [r7, #16]
 8005638:	f7ff ff2a 	bl	8005490 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 800563c:	6938      	ldr	r0, [r7, #16]
 800563e:	f7ff ff3b 	bl	80054b8 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 800564e:	6938      	ldr	r0, [r7, #16]
 8005650:	f7ff fec0 	bl	80053d4 <LL_EXTI_EnableEvent_0_31>
 8005654:	e002      	b.n	800565c <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8005656:	6938      	ldr	r0, [r7, #16]
 8005658:	f7ff fece 	bl	80053f8 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8005668:	6938      	ldr	r0, [r7, #16]
 800566a:	f7ff fe8d 	bl	8005388 <LL_EXTI_EnableIT_0_31>
 800566e:	e009      	b.n	8005684 <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8005670:	6938      	ldr	r0, [r7, #16]
 8005672:	f7ff fe9b 	bl	80053ac <LL_EXTI_DisableIT_0_31>
 8005676:	e005      	b.n	8005684 <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8005678:	6938      	ldr	r0, [r7, #16]
 800567a:	f7ff febd 	bl	80053f8 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 800567e:	6938      	ldr	r0, [r7, #16]
 8005680:	f7ff fe94 	bl	80053ac <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d103      	bne.n	8005698 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005698:	7ffb      	ldrb	r3, [r7, #31]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3720      	adds	r7, #32
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	40021000 	.word	0x40021000
 80056a8:	ff207d03 	.word	0xff207d03
 80056ac:	40010204 	.word	0x40010204
 80056b0:	20000010 	.word	0x20000010
 80056b4:	053e2d63 	.word	0x053e2d63
 80056b8:	40010200 	.word	0x40010200

080056bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <__NVIC_SetPriorityGrouping+0x44>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056d8:	4013      	ands	r3, r2
 80056da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056ee:	4a04      	ldr	r2, [pc, #16]	; (8005700 <__NVIC_SetPriorityGrouping+0x44>)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	60d3      	str	r3, [r2, #12]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	e000ed00 	.word	0xe000ed00

08005704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005708:	4b04      	ldr	r3, [pc, #16]	; (800571c <__NVIC_GetPriorityGrouping+0x18>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	f003 0307 	and.w	r3, r3, #7
}
 8005712:	4618      	mov	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	e000ed00 	.word	0xe000ed00

08005720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	6039      	str	r1, [r7, #0]
 800572a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800572c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005730:	2b00      	cmp	r3, #0
 8005732:	db0a      	blt.n	800574a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	490c      	ldr	r1, [pc, #48]	; (800576c <__NVIC_SetPriority+0x4c>)
 800573a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573e:	0112      	lsls	r2, r2, #4
 8005740:	b2d2      	uxtb	r2, r2
 8005742:	440b      	add	r3, r1
 8005744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005748:	e00a      	b.n	8005760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4908      	ldr	r1, [pc, #32]	; (8005770 <__NVIC_SetPriority+0x50>)
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	f003 030f 	and.w	r3, r3, #15
 8005756:	3b04      	subs	r3, #4
 8005758:	0112      	lsls	r2, r2, #4
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	440b      	add	r3, r1
 800575e:	761a      	strb	r2, [r3, #24]
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	e000e100 	.word	0xe000e100
 8005770:	e000ed00 	.word	0xe000ed00

08005774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005774:	b480      	push	{r7}
 8005776:	b089      	sub	sp, #36	; 0x24
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f1c3 0307 	rsb	r3, r3, #7
 800578e:	2b04      	cmp	r3, #4
 8005790:	bf28      	it	cs
 8005792:	2304      	movcs	r3, #4
 8005794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	3304      	adds	r3, #4
 800579a:	2b06      	cmp	r3, #6
 800579c:	d902      	bls.n	80057a4 <NVIC_EncodePriority+0x30>
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3b03      	subs	r3, #3
 80057a2:	e000      	b.n	80057a6 <NVIC_EncodePriority+0x32>
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057a8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	43da      	mvns	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	401a      	ands	r2, r3
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057bc:	f04f 31ff 	mov.w	r1, #4294967295
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	43d9      	mvns	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057cc:	4313      	orrs	r3, r2
         );
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3724      	adds	r7, #36	; 0x24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
	...

080057dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057ec:	d301      	bcc.n	80057f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80057ee:	2301      	movs	r3, #1
 80057f0:	e00f      	b.n	8005812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057f2:	4a0a      	ldr	r2, [pc, #40]	; (800581c <SysTick_Config+0x40>)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80057fa:	210f      	movs	r1, #15
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	f7ff ff8e 	bl	8005720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005804:	4b05      	ldr	r3, [pc, #20]	; (800581c <SysTick_Config+0x40>)
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800580a:	4b04      	ldr	r3, [pc, #16]	; (800581c <SysTick_Config+0x40>)
 800580c:	2207      	movs	r2, #7
 800580e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	e000e010 	.word	0xe000e010

08005820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ff47 	bl	80056bc <__NVIC_SetPriorityGrouping>
}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b086      	sub	sp, #24
 800583a:	af00      	add	r7, sp, #0
 800583c:	4603      	mov	r3, r0
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005848:	f7ff ff5c 	bl	8005704 <__NVIC_GetPriorityGrouping>
 800584c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68b9      	ldr	r1, [r7, #8]
 8005852:	6978      	ldr	r0, [r7, #20]
 8005854:	f7ff ff8e 	bl	8005774 <NVIC_EncodePriority>
 8005858:	4602      	mov	r2, r0
 800585a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800585e:	4611      	mov	r1, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff ff5d 	bl	8005720 <__NVIC_SetPriority>
}
 8005866:	bf00      	nop
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff ffb0 	bl	80057dc <SysTick_Config>
 800587c:	4603      	mov	r3, r0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005896:	e166      	b.n	8005b66 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	2101      	movs	r1, #1
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	fa01 f303 	lsl.w	r3, r1, r3
 80058a4:	4013      	ands	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 8158 	beq.w	8005b60 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f003 0303 	and.w	r3, r3, #3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d005      	beq.n	80058c8 <HAL_GPIO_Init+0x40>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d130      	bne.n	800592a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	2203      	movs	r2, #3
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4013      	ands	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	005b      	lsls	r3, r3, #1
 80058e8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058fe:	2201      	movs	r2, #1
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	fa02 f303 	lsl.w	r3, r2, r3
 8005906:	43db      	mvns	r3, r3
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4013      	ands	r3, r2
 800590c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	091b      	lsrs	r3, r3, #4
 8005914:	f003 0201 	and.w	r2, r3, #1
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	fa02 f303 	lsl.w	r3, r2, r3
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f003 0303 	and.w	r3, r3, #3
 8005932:	2b03      	cmp	r3, #3
 8005934:	d017      	beq.n	8005966 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	2203      	movs	r2, #3
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	43db      	mvns	r3, r3
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4013      	ands	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689a      	ldr	r2, [r3, #8]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f003 0303 	and.w	r3, r3, #3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d123      	bne.n	80059ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	08da      	lsrs	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3208      	adds	r2, #8
 800597a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	220f      	movs	r2, #15
 800598a:	fa02 f303 	lsl.w	r3, r2, r3
 800598e:	43db      	mvns	r3, r3
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	4013      	ands	r3, r2
 8005994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	08da      	lsrs	r2, r3, #3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3208      	adds	r2, #8
 80059b4:	6939      	ldr	r1, [r7, #16]
 80059b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	2203      	movs	r2, #3
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43db      	mvns	r3, r3
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4013      	ands	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0203 	and.w	r2, r3, #3
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 80b2 	beq.w	8005b60 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059fc:	4b61      	ldr	r3, [pc, #388]	; (8005b84 <HAL_GPIO_Init+0x2fc>)
 80059fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a00:	4a60      	ldr	r2, [pc, #384]	; (8005b84 <HAL_GPIO_Init+0x2fc>)
 8005a02:	f043 0301 	orr.w	r3, r3, #1
 8005a06:	6613      	str	r3, [r2, #96]	; 0x60
 8005a08:	4b5e      	ldr	r3, [pc, #376]	; (8005b84 <HAL_GPIO_Init+0x2fc>)
 8005a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005a14:	4a5c      	ldr	r2, [pc, #368]	; (8005b88 <HAL_GPIO_Init+0x300>)
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	089b      	lsrs	r3, r3, #2
 8005a1a:	3302      	adds	r3, #2
 8005a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f003 0303 	and.w	r3, r3, #3
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	220f      	movs	r2, #15
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4013      	ands	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a3e:	d02b      	beq.n	8005a98 <HAL_GPIO_Init+0x210>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a52      	ldr	r2, [pc, #328]	; (8005b8c <HAL_GPIO_Init+0x304>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d025      	beq.n	8005a94 <HAL_GPIO_Init+0x20c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a51      	ldr	r2, [pc, #324]	; (8005b90 <HAL_GPIO_Init+0x308>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d01f      	beq.n	8005a90 <HAL_GPIO_Init+0x208>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a50      	ldr	r2, [pc, #320]	; (8005b94 <HAL_GPIO_Init+0x30c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d019      	beq.n	8005a8c <HAL_GPIO_Init+0x204>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a4f      	ldr	r2, [pc, #316]	; (8005b98 <HAL_GPIO_Init+0x310>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <HAL_GPIO_Init+0x200>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a4e      	ldr	r2, [pc, #312]	; (8005b9c <HAL_GPIO_Init+0x314>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00d      	beq.n	8005a84 <HAL_GPIO_Init+0x1fc>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a4d      	ldr	r2, [pc, #308]	; (8005ba0 <HAL_GPIO_Init+0x318>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d007      	beq.n	8005a80 <HAL_GPIO_Init+0x1f8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a4c      	ldr	r2, [pc, #304]	; (8005ba4 <HAL_GPIO_Init+0x31c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d101      	bne.n	8005a7c <HAL_GPIO_Init+0x1f4>
 8005a78:	2307      	movs	r3, #7
 8005a7a:	e00e      	b.n	8005a9a <HAL_GPIO_Init+0x212>
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	e00c      	b.n	8005a9a <HAL_GPIO_Init+0x212>
 8005a80:	2306      	movs	r3, #6
 8005a82:	e00a      	b.n	8005a9a <HAL_GPIO_Init+0x212>
 8005a84:	2305      	movs	r3, #5
 8005a86:	e008      	b.n	8005a9a <HAL_GPIO_Init+0x212>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	e006      	b.n	8005a9a <HAL_GPIO_Init+0x212>
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e004      	b.n	8005a9a <HAL_GPIO_Init+0x212>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e002      	b.n	8005a9a <HAL_GPIO_Init+0x212>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_GPIO_Init+0x212>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	f002 0203 	and.w	r2, r2, #3
 8005aa0:	0092      	lsls	r2, r2, #2
 8005aa2:	4093      	lsls	r3, r2
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005aaa:	4937      	ldr	r1, [pc, #220]	; (8005b88 <HAL_GPIO_Init+0x300>)
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	089b      	lsrs	r3, r3, #2
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ab8:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <HAL_GPIO_Init+0x320>)
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005adc:	4a32      	ldr	r2, [pc, #200]	; (8005ba8 <HAL_GPIO_Init+0x320>)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005ae2:	4b31      	ldr	r3, [pc, #196]	; (8005ba8 <HAL_GPIO_Init+0x320>)
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4013      	ands	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b06:	4a28      	ldr	r2, [pc, #160]	; (8005ba8 <HAL_GPIO_Init+0x320>)
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005b0c:	4b26      	ldr	r3, [pc, #152]	; (8005ba8 <HAL_GPIO_Init+0x320>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b30:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <HAL_GPIO_Init+0x320>)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005b36:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <HAL_GPIO_Init+0x320>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4013      	ands	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b5a:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <HAL_GPIO_Init+0x320>)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	3301      	adds	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f47f ae91 	bne.w	8005898 <HAL_GPIO_Init+0x10>
  }
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40021000 	.word	0x40021000
 8005b88:	40010000 	.word	0x40010000
 8005b8c:	48000400 	.word	0x48000400
 8005b90:	48000800 	.word	0x48000800
 8005b94:	48000c00 	.word	0x48000c00
 8005b98:	48001000 	.word	0x48001000
 8005b9c:	48001400 	.word	0x48001400
 8005ba0:	48001800 	.word	0x48001800
 8005ba4:	48001c00 	.word	0x48001c00
 8005ba8:	40010400 	.word	0x40010400

08005bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005bbc:	787b      	ldrb	r3, [r7, #1]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bc2:	887a      	ldrh	r2, [r7, #2]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bc8:	e002      	b.n	8005bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bca:	887a      	ldrh	r2, [r7, #2]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a04      	ldr	r2, [pc, #16]	; (8005bf8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bea:	6013      	str	r3, [r2, #0]
}
 8005bec:	bf00      	nop
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	40007000 	.word	0x40007000

08005bfc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c00:	4b0d      	ldr	r3, [pc, #52]	; (8005c38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c0c:	d102      	bne.n	8005c14 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c12:	e00b      	b.n	8005c2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005c14:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <HAL_PWREx_GetVoltageRange+0x3c>)
 8005c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c22:	d102      	bne.n	8005c2a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c28:	e000      	b.n	8005c2c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005c2a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40007000 	.word	0x40007000

08005c3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d141      	bne.n	8005cce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c4a:	4b4b      	ldr	r3, [pc, #300]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c56:	d131      	bne.n	8005cbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c58:	4b47      	ldr	r3, [pc, #284]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c5e:	4a46      	ldr	r2, [pc, #280]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c68:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c70:	4a41      	ldr	r2, [pc, #260]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005c78:	4b40      	ldr	r3, [pc, #256]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2232      	movs	r2, #50	; 0x32
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	4a3f      	ldr	r2, [pc, #252]	; (8005d80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	0c9b      	lsrs	r3, r3, #18
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c8e:	e002      	b.n	8005c96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c96:	4b38      	ldr	r3, [pc, #224]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ca2:	d102      	bne.n	8005caa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f2      	bne.n	8005c90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005caa:	4b33      	ldr	r3, [pc, #204]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb6:	d158      	bne.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e057      	b.n	8005d6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cbc:	4b2e      	ldr	r3, [pc, #184]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc2:	4a2d      	ldr	r2, [pc, #180]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ccc:	e04d      	b.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd4:	d141      	bne.n	8005d5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cd6:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ce2:	d131      	bne.n	8005d48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ce4:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cea:	4a23      	ldr	r2, [pc, #140]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cf4:	4b20      	ldr	r3, [pc, #128]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005d04:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2232      	movs	r2, #50	; 0x32
 8005d0a:	fb02 f303 	mul.w	r3, r2, r3
 8005d0e:	4a1c      	ldr	r2, [pc, #112]	; (8005d80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d10:	fba2 2303 	umull	r2, r3, r2, r3
 8005d14:	0c9b      	lsrs	r3, r3, #18
 8005d16:	3301      	adds	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d1a:	e002      	b.n	8005d22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d22:	4b15      	ldr	r3, [pc, #84]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d24:	695b      	ldr	r3, [r3, #20]
 8005d26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2e:	d102      	bne.n	8005d36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1f2      	bne.n	8005d1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d36:	4b10      	ldr	r3, [pc, #64]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d42:	d112      	bne.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e011      	b.n	8005d6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d48:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d58:	e007      	b.n	8005d6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d5a:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d62:	4a05      	ldr	r2, [pc, #20]	; (8005d78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3714      	adds	r7, #20
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	40007000 	.word	0x40007000
 8005d7c:	20000010 	.word	0x20000010
 8005d80:	431bde83 	.word	0x431bde83

08005d84 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005d88:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	4a04      	ldr	r2, [pc, #16]	; (8005da0 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d92:	6053      	str	r3, [r2, #4]
}
 8005d94:	bf00      	nop
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	40007000 	.word	0x40007000

08005da4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f000 bc08 	b.w	80065c8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005db8:	4b96      	ldr	r3, [pc, #600]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 030c 	and.w	r3, r3, #12
 8005dc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dc2:	4b94      	ldr	r3, [pc, #592]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0310 	and.w	r3, r3, #16
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80e4 	beq.w	8005fa2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <HAL_RCC_OscConfig+0x4c>
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	f040 808b 	bne.w	8005efe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	f040 8087 	bne.w	8005efe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005df0:	4b88      	ldr	r3, [pc, #544]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_RCC_OscConfig+0x64>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e3df      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	4b81      	ldr	r3, [pc, #516]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d004      	beq.n	8005e22 <HAL_RCC_OscConfig+0x7e>
 8005e18:	4b7e      	ldr	r3, [pc, #504]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e20:	e005      	b.n	8005e2e <HAL_RCC_OscConfig+0x8a>
 8005e22:	4b7c      	ldr	r3, [pc, #496]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e28:	091b      	lsrs	r3, r3, #4
 8005e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d223      	bcs.n	8005e7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fdcc 	bl	80069d4 <RCC_SetFlashLatencyFromMSIRange>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d001      	beq.n	8005e46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e3c0      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e46:	4b73      	ldr	r3, [pc, #460]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a72      	ldr	r2, [pc, #456]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e4c:	f043 0308 	orr.w	r3, r3, #8
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	4b70      	ldr	r3, [pc, #448]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	496d      	ldr	r1, [pc, #436]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e64:	4b6b      	ldr	r3, [pc, #428]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	4968      	ldr	r1, [pc, #416]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	604b      	str	r3, [r1, #4]
 8005e78:	e025      	b.n	8005ec6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e7a:	4b66      	ldr	r3, [pc, #408]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a65      	ldr	r2, [pc, #404]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e80:	f043 0308 	orr.w	r3, r3, #8
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	4b63      	ldr	r3, [pc, #396]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	4960      	ldr	r1, [pc, #384]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e94:	4313      	orrs	r3, r2
 8005e96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005e98:	4b5e      	ldr	r3, [pc, #376]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	495b      	ldr	r1, [pc, #364]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 fd8c 	bl	80069d4 <RCC_SetFlashLatencyFromMSIRange>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e380      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ec6:	f000 fcc1 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	4b51      	ldr	r3, [pc, #324]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	091b      	lsrs	r3, r3, #4
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	4950      	ldr	r1, [pc, #320]	; (8006018 <HAL_RCC_OscConfig+0x274>)
 8005ed8:	5ccb      	ldrb	r3, [r1, r3]
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee2:	4a4e      	ldr	r2, [pc, #312]	; (800601c <HAL_RCC_OscConfig+0x278>)
 8005ee4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005ee6:	4b4e      	ldr	r3, [pc, #312]	; (8006020 <HAL_RCC_OscConfig+0x27c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fe f9ee 	bl	80042cc <HAL_InitTick>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d052      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
 8005efc:	e364      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d032      	beq.n	8005f6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005f06:	4b43      	ldr	r3, [pc, #268]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a42      	ldr	r2, [pc, #264]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f12:	f7fe fa2b 	bl	800436c <HAL_GetTick>
 8005f16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f18:	e008      	b.n	8005f2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f1a:	f7fe fa27 	bl	800436c <HAL_GetTick>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e34d      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f2c:	4b39      	ldr	r3, [pc, #228]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0f0      	beq.n	8005f1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f38:	4b36      	ldr	r3, [pc, #216]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a35      	ldr	r2, [pc, #212]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f3e:	f043 0308 	orr.w	r3, r3, #8
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	4b33      	ldr	r3, [pc, #204]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	4930      	ldr	r1, [pc, #192]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f56:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	492b      	ldr	r1, [pc, #172]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	604b      	str	r3, [r1, #4]
 8005f6a:	e01a      	b.n	8005fa2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f6c:	4b29      	ldr	r3, [pc, #164]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a28      	ldr	r2, [pc, #160]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f78:	f7fe f9f8 	bl	800436c <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f80:	f7fe f9f4 	bl	800436c <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e31a      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005f92:	4b20      	ldr	r3, [pc, #128]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1f0      	bne.n	8005f80 <HAL_RCC_OscConfig+0x1dc>
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005fa0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d073      	beq.n	8006096 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	2b08      	cmp	r3, #8
 8005fb2:	d005      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x21c>
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	2b0c      	cmp	r3, #12
 8005fb8:	d10e      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d10b      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc0:	4b14      	ldr	r3, [pc, #80]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d063      	beq.n	8006094 <HAL_RCC_OscConfig+0x2f0>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d15f      	bne.n	8006094 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e2f7      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fe0:	d106      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x24c>
 8005fe2:	4b0c      	ldr	r3, [pc, #48]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a0b      	ldr	r2, [pc, #44]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e025      	b.n	800603c <HAL_RCC_OscConfig+0x298>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff8:	d114      	bne.n	8006024 <HAL_RCC_OscConfig+0x280>
 8005ffa:	4b06      	ldr	r3, [pc, #24]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a05      	ldr	r2, [pc, #20]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8006000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	4b03      	ldr	r3, [pc, #12]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a02      	ldr	r2, [pc, #8]	; (8006014 <HAL_RCC_OscConfig+0x270>)
 800600c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	e013      	b.n	800603c <HAL_RCC_OscConfig+0x298>
 8006014:	40021000 	.word	0x40021000
 8006018:	0800c518 	.word	0x0800c518
 800601c:	20000010 	.word	0x20000010
 8006020:	20000014 	.word	0x20000014
 8006024:	4ba0      	ldr	r3, [pc, #640]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a9f      	ldr	r2, [pc, #636]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800602a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	4b9d      	ldr	r3, [pc, #628]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a9c      	ldr	r2, [pc, #624]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800603a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d013      	beq.n	800606c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006044:	f7fe f992 	bl	800436c <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800604a:	e008      	b.n	800605e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800604c:	f7fe f98e 	bl	800436c <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	2b64      	cmp	r3, #100	; 0x64
 8006058:	d901      	bls.n	800605e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e2b4      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800605e:	4b92      	ldr	r3, [pc, #584]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f0      	beq.n	800604c <HAL_RCC_OscConfig+0x2a8>
 800606a:	e014      	b.n	8006096 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fe f97e 	bl	800436c <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006074:	f7fe f97a 	bl	800436c <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b64      	cmp	r3, #100	; 0x64
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e2a0      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006086:	4b88      	ldr	r3, [pc, #544]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x2d0>
 8006092:	e000      	b.n	8006096 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d060      	beq.n	8006164 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b04      	cmp	r3, #4
 80060a6:	d005      	beq.n	80060b4 <HAL_RCC_OscConfig+0x310>
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	2b0c      	cmp	r3, #12
 80060ac:	d119      	bne.n	80060e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d116      	bne.n	80060e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060b4:	4b7c      	ldr	r3, [pc, #496]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d005      	beq.n	80060cc <HAL_RCC_OscConfig+0x328>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e27d      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060cc:	4b76      	ldr	r3, [pc, #472]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	061b      	lsls	r3, r3, #24
 80060da:	4973      	ldr	r1, [pc, #460]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060e0:	e040      	b.n	8006164 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d023      	beq.n	8006132 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060ea:	4b6f      	ldr	r3, [pc, #444]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a6e      	ldr	r2, [pc, #440]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80060f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f6:	f7fe f939 	bl	800436c <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060fe:	f7fe f935 	bl	800436c <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e25b      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006110:	4b65      	ldr	r3, [pc, #404]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006118:	2b00      	cmp	r3, #0
 800611a:	d0f0      	beq.n	80060fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800611c:	4b62      	ldr	r3, [pc, #392]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	061b      	lsls	r3, r3, #24
 800612a:	495f      	ldr	r1, [pc, #380]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800612c:	4313      	orrs	r3, r2
 800612e:	604b      	str	r3, [r1, #4]
 8006130:	e018      	b.n	8006164 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006132:	4b5d      	ldr	r3, [pc, #372]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a5c      	ldr	r2, [pc, #368]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800613c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613e:	f7fe f915 	bl	800436c <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006146:	f7fe f911 	bl	800436c <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e237      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006158:	4b53      	ldr	r3, [pc, #332]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f0      	bne.n	8006146 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	2b00      	cmp	r3, #0
 800616e:	d03c      	beq.n	80061ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01c      	beq.n	80061b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006178:	4b4b      	ldr	r3, [pc, #300]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800617a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800617e:	4a4a      	ldr	r2, [pc, #296]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006188:	f7fe f8f0 	bl	800436c <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006190:	f7fe f8ec 	bl	800436c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e212      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80061a2:	4b41      	ldr	r3, [pc, #260]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80061a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0ef      	beq.n	8006190 <HAL_RCC_OscConfig+0x3ec>
 80061b0:	e01b      	b.n	80061ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b2:	4b3d      	ldr	r3, [pc, #244]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80061b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b8:	4a3b      	ldr	r2, [pc, #236]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c2:	f7fe f8d3 	bl	800436c <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061ca:	f7fe f8cf 	bl	800436c <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e1f5      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80061dc:	4b32      	ldr	r3, [pc, #200]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80061de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1ef      	bne.n	80061ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0304 	and.w	r3, r3, #4
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 80a6 	beq.w	8006344 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f8:	2300      	movs	r3, #0
 80061fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80061fc:	4b2a      	ldr	r3, [pc, #168]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 80061fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10d      	bne.n	8006224 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006208:	4b27      	ldr	r3, [pc, #156]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620c:	4a26      	ldr	r2, [pc, #152]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800620e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006212:	6593      	str	r3, [r2, #88]	; 0x58
 8006214:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006224:	4b21      	ldr	r3, [pc, #132]	; (80062ac <HAL_RCC_OscConfig+0x508>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d118      	bne.n	8006262 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006230:	4b1e      	ldr	r3, [pc, #120]	; (80062ac <HAL_RCC_OscConfig+0x508>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <HAL_RCC_OscConfig+0x508>)
 8006236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800623c:	f7fe f896 	bl	800436c <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006244:	f7fe f892 	bl	800436c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e1b8      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006256:	4b15      	ldr	r3, [pc, #84]	; (80062ac <HAL_RCC_OscConfig+0x508>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0f0      	beq.n	8006244 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d108      	bne.n	800627c <HAL_RCC_OscConfig+0x4d8>
 800626a:	4b0f      	ldr	r3, [pc, #60]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800626c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006270:	4a0d      	ldr	r2, [pc, #52]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800627a:	e029      	b.n	80062d0 <HAL_RCC_OscConfig+0x52c>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b05      	cmp	r3, #5
 8006282:	d115      	bne.n	80062b0 <HAL_RCC_OscConfig+0x50c>
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800628c:	f043 0304 	orr.w	r3, r3, #4
 8006290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	4a03      	ldr	r2, [pc, #12]	; (80062a8 <HAL_RCC_OscConfig+0x504>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062a4:	e014      	b.n	80062d0 <HAL_RCC_OscConfig+0x52c>
 80062a6:	bf00      	nop
 80062a8:	40021000 	.word	0x40021000
 80062ac:	40007000 	.word	0x40007000
 80062b0:	4b9d      	ldr	r3, [pc, #628]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	4a9c      	ldr	r2, [pc, #624]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80062b8:	f023 0301 	bic.w	r3, r3, #1
 80062bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80062c0:	4b99      	ldr	r3, [pc, #612]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80062c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c6:	4a98      	ldr	r2, [pc, #608]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80062c8:	f023 0304 	bic.w	r3, r3, #4
 80062cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d016      	beq.n	8006306 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d8:	f7fe f848 	bl	800436c <HAL_GetTick>
 80062dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062de:	e00a      	b.n	80062f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e0:	f7fe f844 	bl	800436c <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e168      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f6:	4b8c      	ldr	r3, [pc, #560]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80062f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0ed      	beq.n	80062e0 <HAL_RCC_OscConfig+0x53c>
 8006304:	e015      	b.n	8006332 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006306:	f7fe f831 	bl	800436c <HAL_GetTick>
 800630a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800630c:	e00a      	b.n	8006324 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630e:	f7fe f82d 	bl	800436c <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	f241 3288 	movw	r2, #5000	; 0x1388
 800631c:	4293      	cmp	r3, r2
 800631e:	d901      	bls.n	8006324 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e151      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006324:	4b80      	ldr	r3, [pc, #512]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1ed      	bne.n	800630e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006332:	7ffb      	ldrb	r3, [r7, #31]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d105      	bne.n	8006344 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006338:	4b7b      	ldr	r3, [pc, #492]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	4a7a      	ldr	r2, [pc, #488]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 800633e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006342:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0320 	and.w	r3, r3, #32
 800634c:	2b00      	cmp	r3, #0
 800634e:	d03c      	beq.n	80063ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01c      	beq.n	8006392 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006358:	4b73      	ldr	r3, [pc, #460]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 800635a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800635e:	4a72      	ldr	r2, [pc, #456]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006360:	f043 0301 	orr.w	r3, r3, #1
 8006364:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006368:	f7fe f800 	bl	800436c <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006370:	f7fd fffc 	bl	800436c <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e122      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006382:	4b69      	ldr	r3, [pc, #420]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d0ef      	beq.n	8006370 <HAL_RCC_OscConfig+0x5cc>
 8006390:	e01b      	b.n	80063ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006392:	4b65      	ldr	r3, [pc, #404]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006398:	4a63      	ldr	r2, [pc, #396]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 800639a:	f023 0301 	bic.w	r3, r3, #1
 800639e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a2:	f7fd ffe3 	bl	800436c <HAL_GetTick>
 80063a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063a8:	e008      	b.n	80063bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063aa:	f7fd ffdf 	bl	800436c <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d901      	bls.n	80063bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e105      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80063bc:	4b5a      	ldr	r3, [pc, #360]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80063be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1ef      	bne.n	80063aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 80f9 	beq.w	80065c6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	2b02      	cmp	r3, #2
 80063da:	f040 80cf 	bne.w	800657c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80063de:	4b52      	ldr	r3, [pc, #328]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f003 0203 	and.w	r2, r3, #3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d12c      	bne.n	800644c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	3b01      	subs	r3, #1
 80063fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d123      	bne.n	800644c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006410:	429a      	cmp	r2, r3
 8006412:	d11b      	bne.n	800644c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006420:	429a      	cmp	r2, r3
 8006422:	d113      	bne.n	800644c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	3b01      	subs	r3, #1
 8006432:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006434:	429a      	cmp	r2, r3
 8006436:	d109      	bne.n	800644c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	3b01      	subs	r3, #1
 8006446:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d071      	beq.n	8006530 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2b0c      	cmp	r3, #12
 8006450:	d068      	beq.n	8006524 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006452:	4b35      	ldr	r3, [pc, #212]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d105      	bne.n	800646a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800645e:	4b32      	ldr	r3, [pc, #200]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e0ac      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800646e:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2d      	ldr	r2, [pc, #180]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006478:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800647a:	f7fd ff77 	bl	800436c <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006480:	e008      	b.n	8006494 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006482:	f7fd ff73 	bl	800436c <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d901      	bls.n	8006494 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e099      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006494:	4b24      	ldr	r3, [pc, #144]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1f0      	bne.n	8006482 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064a0:	4b21      	ldr	r3, [pc, #132]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	4b21      	ldr	r3, [pc, #132]	; (800652c <HAL_RCC_OscConfig+0x788>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80064b0:	3a01      	subs	r2, #1
 80064b2:	0112      	lsls	r2, r2, #4
 80064b4:	4311      	orrs	r1, r2
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064ba:	0212      	lsls	r2, r2, #8
 80064bc:	4311      	orrs	r1, r2
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80064c2:	0852      	lsrs	r2, r2, #1
 80064c4:	3a01      	subs	r2, #1
 80064c6:	0552      	lsls	r2, r2, #21
 80064c8:	4311      	orrs	r1, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80064ce:	0852      	lsrs	r2, r2, #1
 80064d0:	3a01      	subs	r2, #1
 80064d2:	0652      	lsls	r2, r2, #25
 80064d4:	4311      	orrs	r1, r2
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80064da:	06d2      	lsls	r2, r2, #27
 80064dc:	430a      	orrs	r2, r1
 80064de:	4912      	ldr	r1, [pc, #72]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80064e4:	4b10      	ldr	r3, [pc, #64]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a0f      	ldr	r2, [pc, #60]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80064ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064f0:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	4a0c      	ldr	r2, [pc, #48]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 80064f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80064fc:	f7fd ff36 	bl	800436c <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006504:	f7fd ff32 	bl	800436c <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b02      	cmp	r3, #2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e058      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006516:	4b04      	ldr	r3, [pc, #16]	; (8006528 <HAL_RCC_OscConfig+0x784>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006522:	e050      	b.n	80065c6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e04f      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
 8006528:	40021000 	.word	0x40021000
 800652c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006530:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d144      	bne.n	80065c6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800653c:	4b24      	ldr	r3, [pc, #144]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 8006542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006546:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006548:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	4a20      	ldr	r2, [pc, #128]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 800654e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006552:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006554:	f7fd ff0a 	bl	800436c <HAL_GetTick>
 8006558:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800655a:	e008      	b.n	800656e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800655c:	f7fd ff06 	bl	800436c <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d901      	bls.n	800656e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e02c      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800656e:	4b18      	ldr	r3, [pc, #96]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0f0      	beq.n	800655c <HAL_RCC_OscConfig+0x7b8>
 800657a:	e024      	b.n	80065c6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b0c      	cmp	r3, #12
 8006580:	d01f      	beq.n	80065c2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006582:	4b13      	ldr	r3, [pc, #76]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 8006588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800658c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658e:	f7fd feed 	bl	800436c <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006596:	f7fd fee9 	bl	800436c <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e00f      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f0      	bne.n	8006596 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80065b4:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	4905      	ldr	r1, [pc, #20]	; (80065d0 <HAL_RCC_OscConfig+0x82c>)
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <HAL_RCC_OscConfig+0x830>)
 80065bc:	4013      	ands	r3, r2
 80065be:	60cb      	str	r3, [r1, #12]
 80065c0:	e001      	b.n	80065c6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e000      	b.n	80065c8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3720      	adds	r7, #32
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40021000 	.word	0x40021000
 80065d4:	feeefffc 	.word	0xfeeefffc

080065d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e11d      	b.n	800682c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065f0:	4b90      	ldr	r3, [pc, #576]	; (8006834 <HAL_RCC_ClockConfig+0x25c>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 030f 	and.w	r3, r3, #15
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d910      	bls.n	8006620 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fe:	4b8d      	ldr	r3, [pc, #564]	; (8006834 <HAL_RCC_ClockConfig+0x25c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 020f 	bic.w	r2, r3, #15
 8006606:	498b      	ldr	r1, [pc, #556]	; (8006834 <HAL_RCC_ClockConfig+0x25c>)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	4313      	orrs	r3, r2
 800660c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800660e:	4b89      	ldr	r3, [pc, #548]	; (8006834 <HAL_RCC_ClockConfig+0x25c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	429a      	cmp	r2, r3
 800661a:	d001      	beq.n	8006620 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e105      	b.n	800682c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d010      	beq.n	800664e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	4b81      	ldr	r3, [pc, #516]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006638:	429a      	cmp	r2, r3
 800663a:	d908      	bls.n	800664e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800663c:	4b7e      	ldr	r3, [pc, #504]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	497b      	ldr	r1, [pc, #492]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 800664a:	4313      	orrs	r3, r2
 800664c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d079      	beq.n	800674e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b03      	cmp	r3, #3
 8006660:	d11e      	bne.n	80066a0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006662:	4b75      	ldr	r3, [pc, #468]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e0dc      	b.n	800682c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006672:	f000 fa09 	bl	8006a88 <RCC_GetSysClockFreqFromPLLSource>
 8006676:	4603      	mov	r3, r0
 8006678:	4a70      	ldr	r2, [pc, #448]	; (800683c <HAL_RCC_ClockConfig+0x264>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d946      	bls.n	800670c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800667e:	4b6e      	ldr	r3, [pc, #440]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d140      	bne.n	800670c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800668a:	4b6b      	ldr	r3, [pc, #428]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006692:	4a69      	ldr	r2, [pc, #420]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 8006694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006698:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800669a:	2380      	movs	r3, #128	; 0x80
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e035      	b.n	800670c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066a8:	4b63      	ldr	r3, [pc, #396]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d115      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0b9      	b.n	800682c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d107      	bne.n	80066d0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80066c0:	4b5d      	ldr	r3, [pc, #372]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0302 	and.w	r3, r3, #2
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0ad      	b.n	800682c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066d0:	4b59      	ldr	r3, [pc, #356]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0a5      	b.n	800682c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80066e0:	f000 f8b4 	bl	800684c <HAL_RCC_GetSysClockFreq>
 80066e4:	4603      	mov	r3, r0
 80066e6:	4a55      	ldr	r2, [pc, #340]	; (800683c <HAL_RCC_ClockConfig+0x264>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d90f      	bls.n	800670c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80066ec:	4b52      	ldr	r3, [pc, #328]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d109      	bne.n	800670c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066f8:	4b4f      	ldr	r3, [pc, #316]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006700:	4a4d      	ldr	r2, [pc, #308]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 8006702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006706:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006708:	2380      	movs	r3, #128	; 0x80
 800670a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800670c:	4b4a      	ldr	r3, [pc, #296]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f023 0203 	bic.w	r2, r3, #3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4947      	ldr	r1, [pc, #284]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800671e:	f7fd fe25 	bl	800436c <HAL_GetTick>
 8006722:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006724:	e00a      	b.n	800673c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006726:	f7fd fe21 	bl	800436c <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	f241 3288 	movw	r2, #5000	; 0x1388
 8006734:	4293      	cmp	r3, r2
 8006736:	d901      	bls.n	800673c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e077      	b.n	800682c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800673c:	4b3e      	ldr	r3, [pc, #248]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 020c 	and.w	r2, r3, #12
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	429a      	cmp	r2, r3
 800674c:	d1eb      	bne.n	8006726 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b80      	cmp	r3, #128	; 0x80
 8006752:	d105      	bne.n	8006760 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006754:	4b38      	ldr	r3, [pc, #224]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	4a37      	ldr	r2, [pc, #220]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 800675a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800675e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d010      	beq.n	800678e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	4b31      	ldr	r3, [pc, #196]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006778:	429a      	cmp	r2, r3
 800677a:	d208      	bcs.n	800678e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800677c:	4b2e      	ldr	r3, [pc, #184]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	492b      	ldr	r1, [pc, #172]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 800678a:	4313      	orrs	r3, r2
 800678c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800678e:	4b29      	ldr	r3, [pc, #164]	; (8006834 <HAL_RCC_ClockConfig+0x25c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 030f 	and.w	r3, r3, #15
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d210      	bcs.n	80067be <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <HAL_RCC_ClockConfig+0x25c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f023 020f 	bic.w	r2, r3, #15
 80067a4:	4923      	ldr	r1, [pc, #140]	; (8006834 <HAL_RCC_ClockConfig+0x25c>)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ac:	4b21      	ldr	r3, [pc, #132]	; (8006834 <HAL_RCC_ClockConfig+0x25c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d001      	beq.n	80067be <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e036      	b.n	800682c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d008      	beq.n	80067dc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067ca:	4b1b      	ldr	r3, [pc, #108]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	4918      	ldr	r1, [pc, #96]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067e8:	4b13      	ldr	r3, [pc, #76]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	4910      	ldr	r1, [pc, #64]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80067fc:	f000 f826 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8006800:	4602      	mov	r2, r0
 8006802:	4b0d      	ldr	r3, [pc, #52]	; (8006838 <HAL_RCC_ClockConfig+0x260>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	091b      	lsrs	r3, r3, #4
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	490c      	ldr	r1, [pc, #48]	; (8006840 <HAL_RCC_ClockConfig+0x268>)
 800680e:	5ccb      	ldrb	r3, [r1, r3]
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	fa22 f303 	lsr.w	r3, r2, r3
 8006818:	4a0a      	ldr	r2, [pc, #40]	; (8006844 <HAL_RCC_ClockConfig+0x26c>)
 800681a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800681c:	4b0a      	ldr	r3, [pc, #40]	; (8006848 <HAL_RCC_ClockConfig+0x270>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f7fd fd53 	bl	80042cc <HAL_InitTick>
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]

  return status;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40022000 	.word	0x40022000
 8006838:	40021000 	.word	0x40021000
 800683c:	04c4b400 	.word	0x04c4b400
 8006840:	0800c518 	.word	0x0800c518
 8006844:	20000010 	.word	0x20000010
 8006848:	20000014 	.word	0x20000014

0800684c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800684c:	b480      	push	{r7}
 800684e:	b089      	sub	sp, #36	; 0x24
 8006850:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006852:	2300      	movs	r3, #0
 8006854:	61fb      	str	r3, [r7, #28]
 8006856:	2300      	movs	r3, #0
 8006858:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800685a:	4b3e      	ldr	r3, [pc, #248]	; (8006954 <HAL_RCC_GetSysClockFreq+0x108>)
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f003 030c 	and.w	r3, r3, #12
 8006862:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006864:	4b3b      	ldr	r3, [pc, #236]	; (8006954 <HAL_RCC_GetSysClockFreq+0x108>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0303 	and.w	r3, r3, #3
 800686c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d005      	beq.n	8006880 <HAL_RCC_GetSysClockFreq+0x34>
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	2b0c      	cmp	r3, #12
 8006878:	d121      	bne.n	80068be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d11e      	bne.n	80068be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006880:	4b34      	ldr	r3, [pc, #208]	; (8006954 <HAL_RCC_GetSysClockFreq+0x108>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0308 	and.w	r3, r3, #8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d107      	bne.n	800689c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800688c:	4b31      	ldr	r3, [pc, #196]	; (8006954 <HAL_RCC_GetSysClockFreq+0x108>)
 800688e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006892:	0a1b      	lsrs	r3, r3, #8
 8006894:	f003 030f 	and.w	r3, r3, #15
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	e005      	b.n	80068a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800689c:	4b2d      	ldr	r3, [pc, #180]	; (8006954 <HAL_RCC_GetSysClockFreq+0x108>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	091b      	lsrs	r3, r3, #4
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80068a8:	4a2b      	ldr	r2, [pc, #172]	; (8006958 <HAL_RCC_GetSysClockFreq+0x10c>)
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10d      	bne.n	80068d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80068bc:	e00a      	b.n	80068d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d102      	bne.n	80068ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80068c4:	4b25      	ldr	r3, [pc, #148]	; (800695c <HAL_RCC_GetSysClockFreq+0x110>)
 80068c6:	61bb      	str	r3, [r7, #24]
 80068c8:	e004      	b.n	80068d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	2b08      	cmp	r3, #8
 80068ce:	d101      	bne.n	80068d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80068d0:	4b23      	ldr	r3, [pc, #140]	; (8006960 <HAL_RCC_GetSysClockFreq+0x114>)
 80068d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	2b0c      	cmp	r3, #12
 80068d8:	d134      	bne.n	8006944 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068da:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <HAL_RCC_GetSysClockFreq+0x108>)
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d003      	beq.n	80068f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d003      	beq.n	80068f8 <HAL_RCC_GetSysClockFreq+0xac>
 80068f0:	e005      	b.n	80068fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80068f2:	4b1a      	ldr	r3, [pc, #104]	; (800695c <HAL_RCC_GetSysClockFreq+0x110>)
 80068f4:	617b      	str	r3, [r7, #20]
      break;
 80068f6:	e005      	b.n	8006904 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80068f8:	4b19      	ldr	r3, [pc, #100]	; (8006960 <HAL_RCC_GetSysClockFreq+0x114>)
 80068fa:	617b      	str	r3, [r7, #20]
      break;
 80068fc:	e002      	b.n	8006904 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	617b      	str	r3, [r7, #20]
      break;
 8006902:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006904:	4b13      	ldr	r3, [pc, #76]	; (8006954 <HAL_RCC_GetSysClockFreq+0x108>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	091b      	lsrs	r3, r3, #4
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	3301      	adds	r3, #1
 8006910:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006912:	4b10      	ldr	r3, [pc, #64]	; (8006954 <HAL_RCC_GetSysClockFreq+0x108>)
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	0a1b      	lsrs	r3, r3, #8
 8006918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	fb03 f202 	mul.w	r2, r3, r2
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	fbb2 f3f3 	udiv	r3, r2, r3
 8006928:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800692a:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <HAL_RCC_GetSysClockFreq+0x108>)
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	0e5b      	lsrs	r3, r3, #25
 8006930:	f003 0303 	and.w	r3, r3, #3
 8006934:	3301      	adds	r3, #1
 8006936:	005b      	lsls	r3, r3, #1
 8006938:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006942:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006944:	69bb      	ldr	r3, [r7, #24]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3724      	adds	r7, #36	; 0x24
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40021000 	.word	0x40021000
 8006958:	0800c530 	.word	0x0800c530
 800695c:	00f42400 	.word	0x00f42400
 8006960:	007a1200 	.word	0x007a1200

08006964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006968:	4b03      	ldr	r3, [pc, #12]	; (8006978 <HAL_RCC_GetHCLKFreq+0x14>)
 800696a:	681b      	ldr	r3, [r3, #0]
}
 800696c:	4618      	mov	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20000010 	.word	0x20000010

0800697c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006980:	f7ff fff0 	bl	8006964 <HAL_RCC_GetHCLKFreq>
 8006984:	4602      	mov	r2, r0
 8006986:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	0a1b      	lsrs	r3, r3, #8
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	4904      	ldr	r1, [pc, #16]	; (80069a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006992:	5ccb      	ldrb	r3, [r1, r3]
 8006994:	f003 031f 	and.w	r3, r3, #31
 8006998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800699c:	4618      	mov	r0, r3
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	40021000 	.word	0x40021000
 80069a4:	0800c528 	.word	0x0800c528

080069a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80069ac:	f7ff ffda 	bl	8006964 <HAL_RCC_GetHCLKFreq>
 80069b0:	4602      	mov	r2, r0
 80069b2:	4b06      	ldr	r3, [pc, #24]	; (80069cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	0adb      	lsrs	r3, r3, #11
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	4904      	ldr	r1, [pc, #16]	; (80069d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80069be:	5ccb      	ldrb	r3, [r1, r3]
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	40021000 	.word	0x40021000
 80069d0:	0800c528 	.word	0x0800c528

080069d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80069dc:	2300      	movs	r3, #0
 80069de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80069e0:	4b27      	ldr	r3, [pc, #156]	; (8006a80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80069ec:	f7ff f906 	bl	8005bfc <HAL_PWREx_GetVoltageRange>
 80069f0:	6178      	str	r0, [r7, #20]
 80069f2:	e014      	b.n	8006a1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80069f4:	4b22      	ldr	r3, [pc, #136]	; (8006a80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f8:	4a21      	ldr	r2, [pc, #132]	; (8006a80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80069fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006a00:	4b1f      	ldr	r3, [pc, #124]	; (8006a80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006a0c:	f7ff f8f6 	bl	8005bfc <HAL_PWREx_GetVoltageRange>
 8006a10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006a12:	4b1b      	ldr	r3, [pc, #108]	; (8006a80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a16:	4a1a      	ldr	r2, [pc, #104]	; (8006a80 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a24:	d10b      	bne.n	8006a3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b80      	cmp	r3, #128	; 0x80
 8006a2a:	d913      	bls.n	8006a54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2ba0      	cmp	r3, #160	; 0xa0
 8006a30:	d902      	bls.n	8006a38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006a32:	2302      	movs	r3, #2
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	e00d      	b.n	8006a54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a38:	2301      	movs	r3, #1
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	e00a      	b.n	8006a54 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b7f      	cmp	r3, #127	; 0x7f
 8006a42:	d902      	bls.n	8006a4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8006a44:	2302      	movs	r3, #2
 8006a46:	613b      	str	r3, [r7, #16]
 8006a48:	e004      	b.n	8006a54 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b70      	cmp	r3, #112	; 0x70
 8006a4e:	d101      	bne.n	8006a54 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006a50:	2301      	movs	r3, #1
 8006a52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f023 020f 	bic.w	r2, r3, #15
 8006a5c:	4909      	ldr	r1, [pc, #36]	; (8006a84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 030f 	and.w	r3, r3, #15
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d001      	beq.n	8006a76 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40021000 	.word	0x40021000
 8006a84:	40022000 	.word	0x40022000

08006a88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a8e:	4b2d      	ldr	r3, [pc, #180]	; (8006b44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b03      	cmp	r3, #3
 8006a9c:	d00b      	beq.n	8006ab6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d825      	bhi.n	8006af0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d008      	beq.n	8006abc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d11f      	bne.n	8006af0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8006ab0:	4b25      	ldr	r3, [pc, #148]	; (8006b48 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006ab2:	613b      	str	r3, [r7, #16]
    break;
 8006ab4:	e01f      	b.n	8006af6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006ab6:	4b25      	ldr	r3, [pc, #148]	; (8006b4c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8006ab8:	613b      	str	r3, [r7, #16]
    break;
 8006aba:	e01c      	b.n	8006af6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006abc:	4b21      	ldr	r3, [pc, #132]	; (8006b44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d107      	bne.n	8006ad8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ac8:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ace:	0a1b      	lsrs	r3, r3, #8
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	e005      	b.n	8006ae4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ad8:	4b1a      	ldr	r3, [pc, #104]	; (8006b44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8006ae4:	4a1a      	ldr	r2, [pc, #104]	; (8006b50 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aec:	613b      	str	r3, [r7, #16]
    break;
 8006aee:	e002      	b.n	8006af6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8006af0:	2300      	movs	r3, #0
 8006af2:	613b      	str	r3, [r7, #16]
    break;
 8006af4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006af6:	4b13      	ldr	r3, [pc, #76]	; (8006b44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	091b      	lsrs	r3, r3, #4
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	3301      	adds	r3, #1
 8006b02:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006b04:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	0a1b      	lsrs	r3, r3, #8
 8006b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	fb03 f202 	mul.w	r2, r3, r2
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b1c:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	0e5b      	lsrs	r3, r3, #25
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	3301      	adds	r3, #1
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b34:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006b36:	683b      	ldr	r3, [r7, #0]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	40021000 	.word	0x40021000
 8006b48:	00f42400 	.word	0x00f42400
 8006b4c:	007a1200 	.word	0x007a1200
 8006b50:	0800c530 	.word	0x0800c530

08006b54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b60:	2300      	movs	r3, #0
 8006b62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d040      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b74:	2b80      	cmp	r3, #128	; 0x80
 8006b76:	d02a      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b78:	2b80      	cmp	r3, #128	; 0x80
 8006b7a:	d825      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006b7c:	2b60      	cmp	r3, #96	; 0x60
 8006b7e:	d026      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b80:	2b60      	cmp	r3, #96	; 0x60
 8006b82:	d821      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006b84:	2b40      	cmp	r3, #64	; 0x40
 8006b86:	d006      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	d81d      	bhi.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d009      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d010      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8006b94:	e018      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006b96:	4b89      	ldr	r3, [pc, #548]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	4a88      	ldr	r2, [pc, #544]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006ba2:	e015      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	2100      	movs	r1, #0
 8006baa:	4618      	mov	r0, r3
 8006bac:	f001 fa34 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bb4:	e00c      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3320      	adds	r3, #32
 8006bba:	2100      	movs	r1, #0
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f001 fb1f 	bl	8008200 <RCCEx_PLLSAI2_Config>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006bc6:	e003      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	74fb      	strb	r3, [r7, #19]
      break;
 8006bcc:	e000      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8006bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd0:	7cfb      	ldrb	r3, [r7, #19]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10b      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bd6:	4b79      	ldr	r3, [pc, #484]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006bd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bdc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be4:	4975      	ldr	r1, [pc, #468]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006bec:	e001      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bee:	7cfb      	ldrb	r3, [r7, #19]
 8006bf0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d047      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c06:	d030      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c0c:	d82a      	bhi.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c12:	d02a      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006c14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c18:	d824      	bhi.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1e:	d008      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c24:	d81e      	bhi.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8006c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c2e:	d010      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006c30:	e018      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c32:	4b62      	ldr	r3, [pc, #392]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	4a61      	ldr	r2, [pc, #388]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c3e:	e015      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3304      	adds	r3, #4
 8006c44:	2100      	movs	r1, #0
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 f9e6 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c50:	e00c      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	3320      	adds	r3, #32
 8006c56:	2100      	movs	r1, #0
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f001 fad1 	bl	8008200 <RCCEx_PLLSAI2_Config>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006c62:	e003      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	74fb      	strb	r3, [r7, #19]
      break;
 8006c68:	e000      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8006c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c6c:	7cfb      	ldrb	r3, [r7, #19]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10b      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c72:	4b52      	ldr	r3, [pc, #328]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c80:	494e      	ldr	r1, [pc, #312]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006c88:	e001      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8a:	7cfb      	ldrb	r3, [r7, #19]
 8006c8c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 809f 	beq.w	8006dda <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ca0:	4b46      	ldr	r3, [pc, #280]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006cac:	2301      	movs	r3, #1
 8006cae:	e000      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00d      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cb6:	4b41      	ldr	r3, [pc, #260]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cba:	4a40      	ldr	r2, [pc, #256]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8006cc2:	4b3e      	ldr	r3, [pc, #248]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cca:	60bb      	str	r3, [r7, #8]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cd2:	4b3b      	ldr	r3, [pc, #236]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a3a      	ldr	r2, [pc, #232]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cde:	f7fd fb45 	bl	800436c <HAL_GetTick>
 8006ce2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006ce4:	e009      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce6:	f7fd fb41 	bl	800436c <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d902      	bls.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	74fb      	strb	r3, [r7, #19]
        break;
 8006cf8:	e005      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006cfa:	4b31      	ldr	r3, [pc, #196]	; (8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0ef      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8006d06:	7cfb      	ldrb	r3, [r7, #19]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d15b      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d0c:	4b2b      	ldr	r3, [pc, #172]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d16:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01f      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	429a      	cmp	r2, r3
 8006d28:	d019      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d2a:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d34:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d36:	4b21      	ldr	r3, [pc, #132]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3c:	4a1f      	ldr	r2, [pc, #124]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d46:	4b1d      	ldr	r3, [pc, #116]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4c:	4a1b      	ldr	r2, [pc, #108]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d016      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d68:	f7fd fb00 	bl	800436c <HAL_GetTick>
 8006d6c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d6e:	e00b      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d70:	f7fd fafc 	bl	800436c <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d902      	bls.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	74fb      	strb	r3, [r7, #19]
            break;
 8006d86:	e006      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d88:	4b0c      	ldr	r3, [pc, #48]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0ec      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8006d96:	7cfb      	ldrb	r3, [r7, #19]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d10c      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d9c:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dac:	4903      	ldr	r1, [pc, #12]	; (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006db4:	e008      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006db6:	7cfb      	ldrb	r3, [r7, #19]
 8006db8:	74bb      	strb	r3, [r7, #18]
 8006dba:	e005      	b.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006dbc:	40021000 	.word	0x40021000
 8006dc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc4:	7cfb      	ldrb	r3, [r7, #19]
 8006dc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dc8:	7c7b      	ldrb	r3, [r7, #17]
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d105      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dce:	4ba0      	ldr	r3, [pc, #640]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd2:	4a9f      	ldr	r2, [pc, #636]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00a      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006de6:	4b9a      	ldr	r3, [pc, #616]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dec:	f023 0203 	bic.w	r2, r3, #3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df4:	4996      	ldr	r1, [pc, #600]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00a      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e08:	4b91      	ldr	r3, [pc, #580]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0e:	f023 020c 	bic.w	r2, r3, #12
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	498e      	ldr	r1, [pc, #568]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e2a:	4b89      	ldr	r3, [pc, #548]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e38:	4985      	ldr	r1, [pc, #532]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e4c:	4b80      	ldr	r3, [pc, #512]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5a:	497d      	ldr	r1, [pc, #500]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0310 	and.w	r3, r3, #16
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e6e:	4b78      	ldr	r3, [pc, #480]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7c:	4974      	ldr	r1, [pc, #464]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0320 	and.w	r3, r3, #32
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e90:	4b6f      	ldr	r3, [pc, #444]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e9e:	496c      	ldr	r1, [pc, #432]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006eb2:	4b67      	ldr	r3, [pc, #412]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec0:	4963      	ldr	r1, [pc, #396]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00a      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006ed4:	4b5e      	ldr	r3, [pc, #376]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ee2:	495b      	ldr	r1, [pc, #364]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ef6:	4b56      	ldr	r3, [pc, #344]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006efc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f04:	4952      	ldr	r1, [pc, #328]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00a      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006f18:	4b4d      	ldr	r3, [pc, #308]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f26:	494a      	ldr	r1, [pc, #296]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f3a:	4b45      	ldr	r3, [pc, #276]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f48:	4941      	ldr	r1, [pc, #260]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f5c:	4b3c      	ldr	r3, [pc, #240]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f62:	f023 0203 	bic.w	r2, r3, #3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f6a:	4939      	ldr	r1, [pc, #228]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d028      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f7e:	4b34      	ldr	r3, [pc, #208]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f8c:	4930      	ldr	r1, [pc, #192]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f9c:	d106      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f9e:	4b2c      	ldr	r3, [pc, #176]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	4a2b      	ldr	r2, [pc, #172]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fa8:	60d3      	str	r3, [r2, #12]
 8006faa:	e011      	b.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3304      	adds	r3, #4
 8006fba:	2101      	movs	r1, #1
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 f82b 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006fc6:	7cfb      	ldrb	r3, [r7, #19]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006fcc:	7cfb      	ldrb	r3, [r7, #19]
 8006fce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d04d      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fe4:	d108      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fe8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fec:	4a18      	ldr	r2, [pc, #96]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ff2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006ff6:	e012      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006ff8:	4b15      	ldr	r3, [pc, #84]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006ffa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ffe:	4a14      	ldr	r2, [pc, #80]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007000:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007004:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8007008:	4b11      	ldr	r3, [pc, #68]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007016:	490e      	ldr	r1, [pc, #56]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007022:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007026:	d106      	bne.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007028:	4b09      	ldr	r3, [pc, #36]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	4a08      	ldr	r2, [pc, #32]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800702e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007032:	60d3      	str	r3, [r2, #12]
 8007034:	e020      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800703a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800703e:	d109      	bne.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007040:	4b03      	ldr	r3, [pc, #12]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4a02      	ldr	r2, [pc, #8]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800704a:	60d3      	str	r3, [r2, #12]
 800704c:	e014      	b.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800704e:	bf00      	nop
 8007050:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007058:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800705c:	d10c      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3304      	adds	r3, #4
 8007062:	2101      	movs	r1, #1
 8007064:	4618      	mov	r0, r3
 8007066:	f000 ffd7 	bl	8008018 <RCCEx_PLLSAI1_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800706e:	7cfb      	ldrb	r3, [r7, #19]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007074:	7cfb      	ldrb	r3, [r7, #19]
 8007076:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d028      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007084:	4b4a      	ldr	r3, [pc, #296]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007092:	4947      	ldr	r1, [pc, #284]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007094:	4313      	orrs	r3, r2
 8007096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800709e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070a2:	d106      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070a4:	4b42      	ldr	r3, [pc, #264]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	4a41      	ldr	r2, [pc, #260]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070ae:	60d3      	str	r3, [r2, #12]
 80070b0:	e011      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070ba:	d10c      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3304      	adds	r3, #4
 80070c0:	2101      	movs	r1, #1
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 ffa8 	bl	8008018 <RCCEx_PLLSAI1_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070cc:	7cfb      	ldrb	r3, [r7, #19]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80070d2:	7cfb      	ldrb	r3, [r7, #19]
 80070d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01e      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80070e2:	4b33      	ldr	r3, [pc, #204]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070f2:	492f      	ldr	r1, [pc, #188]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007104:	d10c      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3304      	adds	r3, #4
 800710a:	2102      	movs	r1, #2
 800710c:	4618      	mov	r0, r3
 800710e:	f000 ff83 	bl	8008018 <RCCEx_PLLSAI1_Config>
 8007112:	4603      	mov	r3, r0
 8007114:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007116:	7cfb      	ldrb	r3, [r7, #19]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800711c:	7cfb      	ldrb	r3, [r7, #19]
 800711e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800712c:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800712e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007132:	f023 0204 	bic.w	r2, r3, #4
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800713c:	491c      	ldr	r1, [pc, #112]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00b      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007150:	4b17      	ldr	r3, [pc, #92]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007152:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007156:	f023 0218 	bic.w	r2, r3, #24
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007160:	4913      	ldr	r1, [pc, #76]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d017      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007174:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007176:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800717a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007184:	490a      	ldr	r1, [pc, #40]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007186:	4313      	orrs	r3, r2
 8007188:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007196:	d105      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4a04      	ldr	r2, [pc, #16]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800719e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80071a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000

080071b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071c6:	d13e      	bne.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80071c8:	4bb6      	ldr	r3, [pc, #728]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80071ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071d2:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071da:	d028      	beq.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071e2:	f200 86f4 	bhi.w	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071ec:	d005      	beq.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f4:	d00e      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80071f6:	f000 beea 	b.w	8007fce <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80071fa:	4baa      	ldr	r3, [pc, #680]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80071fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007200:	f003 0302 	and.w	r3, r3, #2
 8007204:	2b02      	cmp	r3, #2
 8007206:	f040 86e4 	bne.w	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800720a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800720e:	61fb      	str	r3, [r7, #28]
      break;
 8007210:	f000 bedf 	b.w	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007214:	4ba3      	ldr	r3, [pc, #652]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b02      	cmp	r3, #2
 8007220:	f040 86d9 	bne.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 8007224:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007228:	61fb      	str	r3, [r7, #28]
      break;
 800722a:	f000 bed4 	b.w	8007fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800722e:	4b9d      	ldr	r3, [pc, #628]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800723a:	f040 86ce 	bne.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 800723e:	4b9a      	ldr	r3, [pc, #616]	; (80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8007240:	61fb      	str	r3, [r7, #28]
      break;
 8007242:	f000 beca 	b.w	8007fda <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007246:	4b97      	ldr	r3, [pc, #604]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f003 0303 	and.w	r3, r3, #3
 800724e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	2b03      	cmp	r3, #3
 8007254:	d036      	beq.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	2b03      	cmp	r3, #3
 800725a:	d840      	bhi.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d003      	beq.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d020      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8007268:	e039      	b.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800726a:	4b8e      	ldr	r3, [pc, #568]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b02      	cmp	r3, #2
 8007274:	d116      	bne.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007276:	4b8b      	ldr	r3, [pc, #556]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8007282:	4b88      	ldr	r3, [pc, #544]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	091b      	lsrs	r3, r3, #4
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	e005      	b.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800728e:	4b85      	ldr	r3, [pc, #532]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8007290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007294:	0a1b      	lsrs	r3, r3, #8
 8007296:	f003 030f 	and.w	r3, r3, #15
 800729a:	4a84      	ldr	r2, [pc, #528]	; (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800729c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80072a2:	e01f      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	61bb      	str	r3, [r7, #24]
      break;
 80072a8:	e01c      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072aa:	4b7e      	ldr	r3, [pc, #504]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072b6:	d102      	bne.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80072b8:	4b7d      	ldr	r3, [pc, #500]	; (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80072ba:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80072bc:	e012      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	61bb      	str	r3, [r7, #24]
      break;
 80072c2:	e00f      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80072c4:	4b77      	ldr	r3, [pc, #476]	; (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072d0:	d102      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80072d2:	4b78      	ldr	r3, [pc, #480]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80072d4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80072d6:	e005      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	61bb      	str	r3, [r7, #24]
      break;
 80072dc:	e002      	b.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	61bb      	str	r3, [r7, #24]
      break;
 80072e2:	bf00      	nop
    }

    switch(PeriphClk)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072ea:	f000 8606 	beq.w	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072f4:	f200 8673 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072fe:	f000 8469 	beq.w	8007bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007308:	f200 8669 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007312:	f000 8531 	beq.w	8007d78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800731c:	f200 865f 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007326:	f000 8187 	beq.w	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007330:	f200 8655 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800733a:	f000 80cd 	beq.w	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007344:	f200 864b 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800734e:	f000 8430 	beq.w	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007358:	f200 8641 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007362:	f000 83e4 	beq.w	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800736c:	f200 8637 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007376:	f000 80af 	beq.w	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007380:	f200 862d 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738a:	f000 809d 	beq.w	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007394:	f200 8623 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800739e:	f000 808b 	beq.w	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a8:	f200 8619 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b2:	f000 8554 	beq.w	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073bc:	f200 860f 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c6:	f000 8500 	beq.w	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d0:	f200 8605 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073da:	f000 84a1 	beq.w	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073e4:	f200 85fb 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b80      	cmp	r3, #128	; 0x80
 80073ec:	f000 846c 	beq.w	8007cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b80      	cmp	r3, #128	; 0x80
 80073f4:	f200 85f3 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d84c      	bhi.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 85ec 	beq.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3b01      	subs	r3, #1
 800740a:	2b1f      	cmp	r3, #31
 800740c:	f200 85e7 	bhi.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	0800782d 	.word	0x0800782d
 800741c:	0800789b 	.word	0x0800789b
 8007420:	08007fdf 	.word	0x08007fdf
 8007424:	0800792f 	.word	0x0800792f
 8007428:	08007fdf 	.word	0x08007fdf
 800742c:	08007fdf 	.word	0x08007fdf
 8007430:	08007fdf 	.word	0x08007fdf
 8007434:	080079a7 	.word	0x080079a7
 8007438:	08007fdf 	.word	0x08007fdf
 800743c:	08007fdf 	.word	0x08007fdf
 8007440:	08007fdf 	.word	0x08007fdf
 8007444:	08007fdf 	.word	0x08007fdf
 8007448:	08007fdf 	.word	0x08007fdf
 800744c:	08007fdf 	.word	0x08007fdf
 8007450:	08007fdf 	.word	0x08007fdf
 8007454:	08007a2b 	.word	0x08007a2b
 8007458:	08007fdf 	.word	0x08007fdf
 800745c:	08007fdf 	.word	0x08007fdf
 8007460:	08007fdf 	.word	0x08007fdf
 8007464:	08007fdf 	.word	0x08007fdf
 8007468:	08007fdf 	.word	0x08007fdf
 800746c:	08007fdf 	.word	0x08007fdf
 8007470:	08007fdf 	.word	0x08007fdf
 8007474:	08007fdf 	.word	0x08007fdf
 8007478:	08007fdf 	.word	0x08007fdf
 800747c:	08007fdf 	.word	0x08007fdf
 8007480:	08007fdf 	.word	0x08007fdf
 8007484:	08007fdf 	.word	0x08007fdf
 8007488:	08007fdf 	.word	0x08007fdf
 800748c:	08007fdf 	.word	0x08007fdf
 8007490:	08007fdf 	.word	0x08007fdf
 8007494:	08007aad 	.word	0x08007aad
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	f000 83e8 	beq.w	8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80074a0:	f000 bd9d 	b.w	8007fde <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80074a4:	40021000 	.word	0x40021000
 80074a8:	0003d090 	.word	0x0003d090
 80074ac:	0800c530 	.word	0x0800c530
 80074b0:	00f42400 	.word	0x00f42400
 80074b4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80074b8:	69b9      	ldr	r1, [r7, #24]
 80074ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80074be:	f000 ff93 	bl	80083e8 <RCCEx_GetSAIxPeriphCLKFreq>
 80074c2:	61f8      	str	r0, [r7, #28]
      break;
 80074c4:	f000 bd8e 	b.w	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80074c8:	69b9      	ldr	r1, [r7, #24]
 80074ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80074ce:	f000 ff8b 	bl	80083e8 <RCCEx_GetSAIxPeriphCLKFreq>
 80074d2:	61f8      	str	r0, [r7, #28]
      break;
 80074d4:	f000 bd86 	b.w	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80074d8:	4b9a      	ldr	r3, [pc, #616]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80074da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074de:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074ea:	d015      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80074f2:	f200 8092 	bhi.w	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074fc:	d029      	beq.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007504:	f200 8089 	bhi.w	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d07b      	beq.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007514:	d04a      	beq.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 8007516:	e080      	b.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007518:	4b8a      	ldr	r3, [pc, #552]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b02      	cmp	r3, #2
 8007522:	d17d      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007524:	4b87      	ldr	r3, [pc, #540]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 8007530:	4b84      	ldr	r3, [pc, #528]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	091b      	lsrs	r3, r3, #4
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	e005      	b.n	8007548 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 800753c:	4b81      	ldr	r3, [pc, #516]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800753e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007542:	0a1b      	lsrs	r3, r3, #8
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	4a7f      	ldr	r2, [pc, #508]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800754a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800754e:	61fb      	str	r3, [r7, #28]
          break;
 8007550:	e066      	b.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007552:	4b7c      	ldr	r3, [pc, #496]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800755a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800755e:	d162      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007560:	4b78      	ldr	r3, [pc, #480]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800756c:	d15b      	bne.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800756e:	4b75      	ldr	r3, [pc, #468]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	0a1b      	lsrs	r3, r3, #8
 8007574:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007578:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	fb03 f202 	mul.w	r2, r3, r2
 8007582:	4b70      	ldr	r3, [pc, #448]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	091b      	lsrs	r3, r3, #4
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	3301      	adds	r3, #1
 800758e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007592:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007594:	4b6b      	ldr	r3, [pc, #428]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	0d5b      	lsrs	r3, r3, #21
 800759a:	f003 0303 	and.w	r3, r3, #3
 800759e:	3301      	adds	r3, #1
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	69ba      	ldr	r2, [r7, #24]
 80075a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a8:	61fb      	str	r3, [r7, #28]
          break;
 80075aa:	e03c      	b.n	8007626 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80075ac:	4b65      	ldr	r3, [pc, #404]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075b8:	d138      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80075ba:	4b62      	ldr	r3, [pc, #392]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075c6:	d131      	bne.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80075c8:	4b5e      	ldr	r3, [pc, #376]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	0a1b      	lsrs	r3, r3, #8
 80075ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	fb03 f202 	mul.w	r2, r3, r2
 80075dc:	4b59      	ldr	r3, [pc, #356]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	091b      	lsrs	r3, r3, #4
 80075e2:	f003 030f 	and.w	r3, r3, #15
 80075e6:	3301      	adds	r3, #1
 80075e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ec:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80075ee:	4b55      	ldr	r3, [pc, #340]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	0d5b      	lsrs	r3, r3, #21
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	3301      	adds	r3, #1
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007602:	61fb      	str	r3, [r7, #28]
          break;
 8007604:	e012      	b.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007606:	4b4f      	ldr	r3, [pc, #316]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007608:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b02      	cmp	r3, #2
 8007612:	d10e      	bne.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 8007614:	4b4d      	ldr	r3, [pc, #308]	; (800774c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007616:	61fb      	str	r3, [r7, #28]
          break;
 8007618:	e00b      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 800761a:	bf00      	nop
 800761c:	f000 bce2 	b.w	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007620:	bf00      	nop
 8007622:	f000 bcdf 	b.w	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007626:	bf00      	nop
 8007628:	f000 bcdc 	b.w	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800762c:	bf00      	nop
 800762e:	f000 bcd9 	b.w	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007632:	bf00      	nop
        break;
 8007634:	f000 bcd6 	b.w	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8007638:	4b42      	ldr	r3, [pc, #264]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800763a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800763e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007646:	d13d      	bne.n	80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007648:	4b3e      	ldr	r3, [pc, #248]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007654:	f040 84c5 	bne.w	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8007658:	4b3a      	ldr	r3, [pc, #232]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007664:	f040 84bd 	bne.w	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007668:	4b36      	ldr	r3, [pc, #216]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007672:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	fb03 f202 	mul.w	r2, r3, r2
 800767c:	4b31      	ldr	r3, [pc, #196]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	091b      	lsrs	r3, r3, #4
 8007682:	f003 030f 	and.w	r3, r3, #15
 8007686:	3301      	adds	r3, #1
 8007688:	fbb2 f3f3 	udiv	r3, r2, r3
 800768c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800768e:	4b2d      	ldr	r3, [pc, #180]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007690:	68db      	ldr	r3, [r3, #12]
 8007692:	0edb      	lsrs	r3, r3, #27
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10a      	bne.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80076a0:	4b28      	ldr	r3, [pc, #160]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 80076ac:	2311      	movs	r3, #17
 80076ae:	617b      	str	r3, [r7, #20]
 80076b0:	e001      	b.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 80076b2:	2307      	movs	r3, #7
 80076b4:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80076be:	61fb      	str	r3, [r7, #28]
      break;
 80076c0:	f000 bc8f 	b.w	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80076c4:	4b1f      	ldr	r3, [pc, #124]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ca:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80076ce:	60fb      	str	r3, [r7, #12]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076d6:	d016      	beq.n	8007706 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80076de:	f200 809b 	bhi.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e8:	d032      	beq.n	8007750 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076f0:	f200 8092 	bhi.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8084 	beq.w	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007702:	d052      	beq.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8007704:	e088      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007706:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b02      	cmp	r3, #2
 8007710:	f040 8084 	bne.w	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007714:	4b0b      	ldr	r3, [pc, #44]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8007720:	4b08      	ldr	r3, [pc, #32]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	f003 030f 	and.w	r3, r3, #15
 800772a:	e005      	b.n	8007738 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800772e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007732:	0a1b      	lsrs	r3, r3, #8
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	4a03      	ldr	r2, [pc, #12]	; (8007748 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800773a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773e:	61fb      	str	r3, [r7, #28]
          break;
 8007740:	e06c      	b.n	800781c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 8007742:	bf00      	nop
 8007744:	40021000 	.word	0x40021000
 8007748:	0800c530 	.word	0x0800c530
 800774c:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007750:	4ba5      	ldr	r3, [pc, #660]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800775c:	d160      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800775e:	4ba2      	ldr	r3, [pc, #648]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800776a:	d159      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800776c:	4b9e      	ldr	r3, [pc, #632]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	0a1b      	lsrs	r3, r3, #8
 8007772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007776:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	fb03 f202 	mul.w	r2, r3, r2
 8007780:	4b99      	ldr	r3, [pc, #612]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007782:	68db      	ldr	r3, [r3, #12]
 8007784:	091b      	lsrs	r3, r3, #4
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	3301      	adds	r3, #1
 800778c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007790:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007792:	4b95      	ldr	r3, [pc, #596]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	0d5b      	lsrs	r3, r3, #21
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	3301      	adds	r3, #1
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a6:	61fb      	str	r3, [r7, #28]
          break;
 80077a8:	e03a      	b.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80077aa:	4b8f      	ldr	r3, [pc, #572]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077b6:	d135      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80077b8:	4b8b      	ldr	r3, [pc, #556]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077c4:	d12e      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80077c6:	4b88      	ldr	r3, [pc, #544]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	0a1b      	lsrs	r3, r3, #8
 80077cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d0:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	fb03 f202 	mul.w	r2, r3, r2
 80077da:	4b83      	ldr	r3, [pc, #524]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	091b      	lsrs	r3, r3, #4
 80077e0:	f003 030f 	and.w	r3, r3, #15
 80077e4:	3301      	adds	r3, #1
 80077e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ea:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80077ec:	4b7e      	ldr	r3, [pc, #504]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	0d5b      	lsrs	r3, r3, #21
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	3301      	adds	r3, #1
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007800:	61fb      	str	r3, [r7, #28]
          break;
 8007802:	e00f      	b.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8007804:	4b78      	ldr	r3, [pc, #480]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007806:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b02      	cmp	r3, #2
 8007810:	d10a      	bne.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 8007812:	4b76      	ldr	r3, [pc, #472]	; (80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8007814:	61fb      	str	r3, [r7, #28]
          break;
 8007816:	e007      	b.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 8007818:	bf00      	nop
 800781a:	e3e2      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 800781c:	bf00      	nop
 800781e:	e3e0      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007820:	bf00      	nop
 8007822:	e3de      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007824:	bf00      	nop
 8007826:	e3dc      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 8007828:	bf00      	nop
      break;
 800782a:	e3da      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800782c:	4b6e      	ldr	r3, [pc, #440]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b03      	cmp	r3, #3
 800783c:	d827      	bhi.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800783e:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	08007855 	.word	0x08007855
 8007848:	0800785d 	.word	0x0800785d
 800784c:	08007865 	.word	0x08007865
 8007850:	08007879 	.word	0x08007879
          frequency = HAL_RCC_GetPCLK2Freq();
 8007854:	f7ff f8a8 	bl	80069a8 <HAL_RCC_GetPCLK2Freq>
 8007858:	61f8      	str	r0, [r7, #28]
          break;
 800785a:	e01d      	b.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 800785c:	f7fe fff6 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007860:	61f8      	str	r0, [r7, #28]
          break;
 8007862:	e019      	b.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007864:	4b60      	ldr	r3, [pc, #384]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800786c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007870:	d10f      	bne.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8007872:	4b5f      	ldr	r3, [pc, #380]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007874:	61fb      	str	r3, [r7, #28]
          break;
 8007876:	e00c      	b.n	8007892 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007878:	4b5b      	ldr	r3, [pc, #364]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800787a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b02      	cmp	r3, #2
 8007884:	d107      	bne.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8007886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788a:	61fb      	str	r3, [r7, #28]
          break;
 800788c:	e003      	b.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800788e:	bf00      	nop
 8007890:	e3a8      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007892:	bf00      	nop
 8007894:	e3a6      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007896:	bf00      	nop
        break;
 8007898:	e3a4      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800789a:	4b53      	ldr	r3, [pc, #332]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800789c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a0:	f003 030c 	and.w	r3, r3, #12
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b0c      	cmp	r3, #12
 80078aa:	d83a      	bhi.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80078ac:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 80078ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b2:	bf00      	nop
 80078b4:	080078e9 	.word	0x080078e9
 80078b8:	08007923 	.word	0x08007923
 80078bc:	08007923 	.word	0x08007923
 80078c0:	08007923 	.word	0x08007923
 80078c4:	080078f1 	.word	0x080078f1
 80078c8:	08007923 	.word	0x08007923
 80078cc:	08007923 	.word	0x08007923
 80078d0:	08007923 	.word	0x08007923
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007923 	.word	0x08007923
 80078dc:	08007923 	.word	0x08007923
 80078e0:	08007923 	.word	0x08007923
 80078e4:	0800790d 	.word	0x0800790d
          frequency = HAL_RCC_GetPCLK1Freq();
 80078e8:	f7ff f848 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 80078ec:	61f8      	str	r0, [r7, #28]
          break;
 80078ee:	e01d      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 80078f0:	f7fe ffac 	bl	800684c <HAL_RCC_GetSysClockFreq>
 80078f4:	61f8      	str	r0, [r7, #28]
          break;
 80078f6:	e019      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078f8:	4b3b      	ldr	r3, [pc, #236]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007904:	d10f      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8007906:	4b3a      	ldr	r3, [pc, #232]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007908:	61fb      	str	r3, [r7, #28]
          break;
 800790a:	e00c      	b.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800790c:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800790e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b02      	cmp	r3, #2
 8007918:	d107      	bne.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 800791a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800791e:	61fb      	str	r3, [r7, #28]
          break;
 8007920:	e003      	b.n	800792a <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 8007922:	bf00      	nop
 8007924:	e35e      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007926:	bf00      	nop
 8007928:	e35c      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800792a:	bf00      	nop
        break;
 800792c:	e35a      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800792e:	4b2e      	ldr	r3, [pc, #184]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007934:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007938:	60fb      	str	r3, [r7, #12]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b30      	cmp	r3, #48	; 0x30
 800793e:	d021      	beq.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2b30      	cmp	r3, #48	; 0x30
 8007944:	d829      	bhi.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b20      	cmp	r3, #32
 800794a:	d011      	beq.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b20      	cmp	r3, #32
 8007950:	d823      	bhi.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d003      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b10      	cmp	r3, #16
 800795c:	d004      	beq.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 800795e:	e01c      	b.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007960:	f7ff f80c 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8007964:	61f8      	str	r0, [r7, #28]
          break;
 8007966:	e01d      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8007968:	f7fe ff70 	bl	800684c <HAL_RCC_GetSysClockFreq>
 800796c:	61f8      	str	r0, [r7, #28]
          break;
 800796e:	e019      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007970:	4b1d      	ldr	r3, [pc, #116]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800797c:	d10f      	bne.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800797e:	4b1c      	ldr	r3, [pc, #112]	; (80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007980:	61fb      	str	r3, [r7, #28]
          break;
 8007982:	e00c      	b.n	800799e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007984:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b02      	cmp	r3, #2
 8007990:	d107      	bne.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8007992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007996:	61fb      	str	r3, [r7, #28]
          break;
 8007998:	e003      	b.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800799a:	bf00      	nop
 800799c:	e322      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800799e:	bf00      	nop
 80079a0:	e320      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80079a2:	bf00      	nop
        break;
 80079a4:	e31e      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80079a6:	4b10      	ldr	r3, [pc, #64]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80079a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079b0:	60fb      	str	r3, [r7, #12]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2bc0      	cmp	r3, #192	; 0xc0
 80079b6:	d027      	beq.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2bc0      	cmp	r3, #192	; 0xc0
 80079bc:	d82f      	bhi.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b80      	cmp	r3, #128	; 0x80
 80079c2:	d017      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b80      	cmp	r3, #128	; 0x80
 80079c8:	d829      	bhi.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d004      	beq.n	80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 80079d6:	e022      	b.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80079d8:	f7fe ffd0 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 80079dc:	61f8      	str	r0, [r7, #28]
          break;
 80079de:	e023      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 80079e0:	f7fe ff34 	bl	800684c <HAL_RCC_GetSysClockFreq>
 80079e4:	61f8      	str	r0, [r7, #28]
          break;
 80079e6:	e01f      	b.n	8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 80079e8:	40021000 	.word	0x40021000
 80079ec:	02dc6c00 	.word	0x02dc6c00
 80079f0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079f4:	4b9b      	ldr	r3, [pc, #620]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a00:	d10f      	bne.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8007a02:	4b99      	ldr	r3, [pc, #612]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007a04:	61fb      	str	r3, [r7, #28]
          break;
 8007a06:	e00c      	b.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a08:	4b96      	ldr	r3, [pc, #600]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0e:	f003 0302 	and.w	r3, r3, #2
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d107      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 8007a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a1a:	61fb      	str	r3, [r7, #28]
          break;
 8007a1c:	e003      	b.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 8007a1e:	bf00      	nop
 8007a20:	e2e0      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a22:	bf00      	nop
 8007a24:	e2de      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007a26:	bf00      	nop
        break;
 8007a28:	e2dc      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007a2a:	4b8e      	ldr	r3, [pc, #568]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a3c:	d025      	beq.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a44:	d82c      	bhi.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a4c:	d013      	beq.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a54:	d824      	bhi.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d004      	beq.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a62:	d004      	beq.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8007a64:	e01c      	b.n	8007aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007a66:	f7fe ff89 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8007a6a:	61f8      	str	r0, [r7, #28]
          break;
 8007a6c:	e01d      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8007a6e:	f7fe feed 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007a72:	61f8      	str	r0, [r7, #28]
          break;
 8007a74:	e019      	b.n	8007aaa <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a76:	4b7b      	ldr	r3, [pc, #492]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a82:	d10f      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8007a84:	4b78      	ldr	r3, [pc, #480]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007a86:	61fb      	str	r3, [r7, #28]
          break;
 8007a88:	e00c      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007a8a:	4b76      	ldr	r3, [pc, #472]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d107      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8007a98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9c:	61fb      	str	r3, [r7, #28]
          break;
 8007a9e:	e003      	b.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8007aa0:	bf00      	nop
 8007aa2:	e29f      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007aa4:	bf00      	nop
 8007aa6:	e29d      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007aa8:	bf00      	nop
        break;
 8007aaa:	e29b      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007aac:	4b6d      	ldr	r3, [pc, #436]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007abe:	d025      	beq.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ac6:	d82c      	bhi.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ace:	d013      	beq.n	8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad6:	d824      	bhi.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae4:	d004      	beq.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8007ae6:	e01c      	b.n	8007b22 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007ae8:	f7fe ff48 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8007aec:	61f8      	str	r0, [r7, #28]
          break;
 8007aee:	e01d      	b.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8007af0:	f7fe feac 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007af4:	61f8      	str	r0, [r7, #28]
          break;
 8007af6:	e019      	b.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007af8:	4b5a      	ldr	r3, [pc, #360]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b04:	d10f      	bne.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8007b06:	4b58      	ldr	r3, [pc, #352]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007b08:	61fb      	str	r3, [r7, #28]
          break;
 8007b0a:	e00c      	b.n	8007b26 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007b0c:	4b55      	ldr	r3, [pc, #340]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d107      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 8007b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b1e:	61fb      	str	r3, [r7, #28]
          break;
 8007b20:	e003      	b.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 8007b22:	bf00      	nop
 8007b24:	e25e      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b26:	bf00      	nop
 8007b28:	e25c      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007b2a:	bf00      	nop
        break;
 8007b2c:	e25a      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007b2e:	4b4d      	ldr	r3, [pc, #308]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b40:	d007      	beq.n	8007b52 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b48:	d12f      	bne.n	8007baa <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 8007b4a:	f7fe fe7f 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007b4e:	61f8      	str	r0, [r7, #28]
          break;
 8007b50:	e02e      	b.n	8007bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8007b52:	4b44      	ldr	r3, [pc, #272]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b5e:	d126      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8007b60:	4b40      	ldr	r3, [pc, #256]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d020      	beq.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007b6c:	4b3d      	ldr	r3, [pc, #244]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	0a1b      	lsrs	r3, r3, #8
 8007b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b76:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	fb03 f202 	mul.w	r2, r3, r2
 8007b80:	4b38      	ldr	r3, [pc, #224]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	091b      	lsrs	r3, r3, #4
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b90:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8007b92:	4b34      	ldr	r3, [pc, #208]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	0e5b      	lsrs	r3, r3, #25
 8007b98:	f003 0303 	and.w	r3, r3, #3
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba6:	61fb      	str	r3, [r7, #28]
          break;
 8007ba8:	e001      	b.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8007baa:	bf00      	nop
 8007bac:	e21a      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007bae:	bf00      	nop
        break;
 8007bb0:	e218      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8007bb2:	4b2c      	ldr	r3, [pc, #176]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007bb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bb8:	f003 0304 	and.w	r3, r3, #4
 8007bbc:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8007bc4:	f7fe fef0 	bl	80069a8 <HAL_RCC_GetPCLK2Freq>
 8007bc8:	61f8      	str	r0, [r7, #28]
        break;
 8007bca:	e20b      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8007bcc:	f7fe fe3e 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007bd0:	61f8      	str	r0, [r7, #28]
        break;
 8007bd2:	e207      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8007bd4:	4b23      	ldr	r3, [pc, #140]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bda:	f003 0318 	and.w	r3, r3, #24
 8007bde:	60fb      	str	r3, [r7, #12]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b10      	cmp	r3, #16
 8007be4:	d010      	beq.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d834      	bhi.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b08      	cmp	r3, #8
 8007bf6:	d024      	beq.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8007bf8:	e02d      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007bfa:	69b9      	ldr	r1, [r7, #24]
 8007bfc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c00:	f000 fbf2 	bl	80083e8 <RCCEx_GetSAIxPeriphCLKFreq>
 8007c04:	61f8      	str	r0, [r7, #28]
          break;
 8007c06:	e02b      	b.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007c08:	4b16      	ldr	r3, [pc, #88]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d122      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007c14:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0308 	and.w	r3, r3, #8
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d005      	beq.n	8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8007c20:	4b10      	ldr	r3, [pc, #64]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	091b      	lsrs	r3, r3, #4
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	e005      	b.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8007c2c:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c32:	0a1b      	lsrs	r3, r3, #8
 8007c34:	f003 030f 	and.w	r3, r3, #15
 8007c38:	4a0c      	ldr	r2, [pc, #48]	; (8007c6c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3e:	61fb      	str	r3, [r7, #28]
          break;
 8007c40:	e00b      	b.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007c42:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c4e:	d106      	bne.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8007c50:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8007c52:	61fb      	str	r3, [r7, #28]
          break;
 8007c54:	e003      	b.n	8007c5e <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8007c56:	bf00      	nop
 8007c58:	e1c4      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007c5a:	bf00      	nop
 8007c5c:	e1c2      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007c5e:	bf00      	nop
        break;
 8007c60:	e1c0      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007c62:	bf00      	nop
 8007c64:	40021000 	.word	0x40021000
 8007c68:	00f42400 	.word	0x00f42400
 8007c6c:	0800c530 	.word	0x0800c530
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c70:	4b96      	ldr	r3, [pc, #600]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c76:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c82:	d013      	beq.n	8007cac <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8a:	d819      	bhi.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d004      	beq.n	8007c9c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c98:	d004      	beq.n	8007ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8007c9a:	e011      	b.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c9c:	f7fe fe6e 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8007ca0:	61f8      	str	r0, [r7, #28]
          break;
 8007ca2:	e010      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8007ca4:	f7fe fdd2 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007ca8:	61f8      	str	r0, [r7, #28]
          break;
 8007caa:	e00c      	b.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007cac:	4b87      	ldr	r3, [pc, #540]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cb8:	d104      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8007cba:	4b85      	ldr	r3, [pc, #532]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007cbc:	61fb      	str	r3, [r7, #28]
          break;
 8007cbe:	e001      	b.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8007cc0:	bf00      	nop
 8007cc2:	e18f      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007cc4:	bf00      	nop
        break;
 8007cc6:	e18d      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007cc8:	4b80      	ldr	r3, [pc, #512]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cda:	d013      	beq.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ce2:	d819      	bhi.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d004      	beq.n	8007cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cf0:	d004      	beq.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8007cf2:	e011      	b.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007cf4:	f7fe fe42 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8007cf8:	61f8      	str	r0, [r7, #28]
          break;
 8007cfa:	e010      	b.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8007cfc:	f7fe fda6 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007d00:	61f8      	str	r0, [r7, #28]
          break;
 8007d02:	e00c      	b.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d04:	4b71      	ldr	r3, [pc, #452]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d10:	d104      	bne.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8007d12:	4b6f      	ldr	r3, [pc, #444]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007d14:	61fb      	str	r3, [r7, #28]
          break;
 8007d16:	e001      	b.n	8007d1c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8007d18:	bf00      	nop
 8007d1a:	e163      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007d1c:	bf00      	nop
        break;
 8007d1e:	e161      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007d20:	4b6a      	ldr	r3, [pc, #424]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d32:	d013      	beq.n	8007d5c <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d3a:	d819      	bhi.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d48:	d004      	beq.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8007d4a:	e011      	b.n	8007d70 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d4c:	f7fe fe16 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8007d50:	61f8      	str	r0, [r7, #28]
          break;
 8007d52:	e010      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8007d54:	f7fe fd7a 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007d58:	61f8      	str	r0, [r7, #28]
          break;
 8007d5a:	e00c      	b.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007d5c:	4b5b      	ldr	r3, [pc, #364]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d68:	d104      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8007d6a:	4b59      	ldr	r3, [pc, #356]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007d6c:	61fb      	str	r3, [r7, #28]
          break;
 8007d6e:	e001      	b.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8007d70:	bf00      	nop
 8007d72:	e137      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007d74:	bf00      	nop
        break;
 8007d76:	e135      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007d78:	4b54      	ldr	r3, [pc, #336]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007d7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d011      	beq.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d818      	bhi.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d004      	beq.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8007d9c:	e011      	b.n	8007dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d9e:	f7fe fded 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8007da2:	61f8      	str	r0, [r7, #28]
          break;
 8007da4:	e010      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8007da6:	f7fe fd51 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007daa:	61f8      	str	r0, [r7, #28]
          break;
 8007dac:	e00c      	b.n	8007dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007dae:	4b47      	ldr	r3, [pc, #284]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dba:	d104      	bne.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8007dbc:	4b44      	ldr	r3, [pc, #272]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007dbe:	61fb      	str	r3, [r7, #28]
          break;
 8007dc0:	e001      	b.n	8007dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8007dc2:	bf00      	nop
 8007dc4:	e10e      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007dc6:	bf00      	nop
        break;
 8007dc8:	e10c      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007dca:	4b40      	ldr	r3, [pc, #256]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dd0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007ddc:	d02c      	beq.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007de4:	d833      	bhi.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007dec:	d01a      	beq.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007df4:	d82b      	bhi.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d004      	beq.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e02:	d004      	beq.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8007e04:	e023      	b.n	8007e4e <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e06:	f7fe fdb9 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8007e0a:	61f8      	str	r0, [r7, #28]
          break;
 8007e0c:	e026      	b.n	8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007e0e:	4b2f      	ldr	r3, [pc, #188]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d11a      	bne.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8007e1c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007e20:	61fb      	str	r3, [r7, #28]
          break;
 8007e22:	e016      	b.n	8007e52 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e24:	4b29      	ldr	r3, [pc, #164]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e30:	d111      	bne.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8007e32:	4b27      	ldr	r3, [pc, #156]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007e34:	61fb      	str	r3, [r7, #28]
          break;
 8007e36:	e00e      	b.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007e38:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3e:	f003 0302 	and.w	r3, r3, #2
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d109      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8007e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4a:	61fb      	str	r3, [r7, #28]
          break;
 8007e4c:	e005      	b.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8007e4e:	bf00      	nop
 8007e50:	e0c8      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e52:	bf00      	nop
 8007e54:	e0c6      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e56:	bf00      	nop
 8007e58:	e0c4      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007e5a:	bf00      	nop
        break;
 8007e5c:	e0c2      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007e5e:	4b1b      	ldr	r3, [pc, #108]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e70:	d030      	beq.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e78:	d837      	bhi.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e80:	d01a      	beq.n	8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e88:	d82f      	bhi.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d004      	beq.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e96:	d004      	beq.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8007e98:	e027      	b.n	8007eea <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e9a:	f7fe fd6f 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8007e9e:	61f8      	str	r0, [r7, #28]
          break;
 8007ea0:	e02a      	b.n	8007ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007ea2:	4b0a      	ldr	r3, [pc, #40]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ea8:	f003 0302 	and.w	r3, r3, #2
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d11e      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8007eb0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007eb4:	61fb      	str	r3, [r7, #28]
          break;
 8007eb6:	e01a      	b.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007eb8:	4b04      	ldr	r3, [pc, #16]	; (8007ecc <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec4:	d115      	bne.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8007ec6:	4b02      	ldr	r3, [pc, #8]	; (8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8007ec8:	61fb      	str	r3, [r7, #28]
          break;
 8007eca:	e012      	b.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007ecc:	40021000 	.word	0x40021000
 8007ed0:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007ed4:	4b46      	ldr	r3, [pc, #280]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d109      	bne.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8007ee2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee6:	61fb      	str	r3, [r7, #28]
          break;
 8007ee8:	e005      	b.n	8007ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8007eea:	bf00      	nop
 8007eec:	e07a      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007eee:	bf00      	nop
 8007ef0:	e078      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007ef2:	bf00      	nop
 8007ef4:	e076      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007ef6:	bf00      	nop
        break;
 8007ef8:	e074      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007efa:	4b3d      	ldr	r3, [pc, #244]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007f04:	60fb      	str	r3, [r7, #12]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f0c:	d02c      	beq.n	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f14:	d855      	bhi.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f22:	d004      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8007f24:	e04d      	b.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8007f26:	f7fe fc91 	bl	800684c <HAL_RCC_GetSysClockFreq>
 8007f2a:	61f8      	str	r0, [r7, #28]
          break;
 8007f2c:	e04e      	b.n	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007f2e:	4b30      	ldr	r3, [pc, #192]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d145      	bne.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8007f3a:	4b2d      	ldr	r3, [pc, #180]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007f46:	4b2a      	ldr	r3, [pc, #168]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	091b      	lsrs	r3, r3, #4
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	e005      	b.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8007f52:	4b27      	ldr	r3, [pc, #156]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f58:	0a1b      	lsrs	r3, r3, #8
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	4a25      	ldr	r2, [pc, #148]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8007f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f64:	61fb      	str	r3, [r7, #28]
          break;
 8007f66:	e02e      	b.n	8007fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007f68:	4b21      	ldr	r3, [pc, #132]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f74:	d129      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007f76:	4b1e      	ldr	r3, [pc, #120]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f82:	d122      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007f84:	4b1a      	ldr	r3, [pc, #104]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	0a1b      	lsrs	r3, r3, #8
 8007f8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f8e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	fb03 f202 	mul.w	r2, r3, r2
 8007f98:	4b15      	ldr	r3, [pc, #84]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	091b      	lsrs	r3, r3, #4
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa8:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8007faa:	4b11      	ldr	r3, [pc, #68]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	0d5b      	lsrs	r3, r3, #21
 8007fb0:	f003 0303 	and.w	r3, r3, #3
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fbe:	61fb      	str	r3, [r7, #28]
          break;
 8007fc0:	e003      	b.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8007fc2:	bf00      	nop
 8007fc4:	e00e      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007fc6:	bf00      	nop
 8007fc8:	e00c      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8007fca:	bf00      	nop
        break;
 8007fcc:	e00a      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e008      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007fd2:	bf00      	nop
 8007fd4:	e006      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007fd6:	bf00      	nop
 8007fd8:	e004      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007fda:	bf00      	nop
 8007fdc:	e002      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007fde:	bf00      	nop
 8007fe0:	e000      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8007fe2:	bf00      	nop
    }
  }

  return(frequency);
 8007fe4:	69fb      	ldr	r3, [r7, #28]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	40021000 	.word	0x40021000
 8007ff4:	0800c530 	.word	0x0800c530

08007ff8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007ffc:	4b05      	ldr	r3, [pc, #20]	; (8008014 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a04      	ldr	r2, [pc, #16]	; (8008014 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008002:	f043 0304 	orr.w	r3, r3, #4
 8008006:	6013      	str	r3, [r2, #0]
}
 8008008:	bf00      	nop
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40021000 	.word	0x40021000

08008018 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008026:	4b72      	ldr	r3, [pc, #456]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00e      	beq.n	8008050 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8008032:	4b6f      	ldr	r3, [pc, #444]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f003 0203 	and.w	r2, r3, #3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	429a      	cmp	r2, r3
 8008040:	d103      	bne.n	800804a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
       ||
 8008046:	2b00      	cmp	r3, #0
 8008048:	d142      	bne.n	80080d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	73fb      	strb	r3, [r7, #15]
 800804e:	e03f      	b.n	80080d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b03      	cmp	r3, #3
 8008056:	d018      	beq.n	800808a <RCCEx_PLLSAI1_Config+0x72>
 8008058:	2b03      	cmp	r3, #3
 800805a:	d825      	bhi.n	80080a8 <RCCEx_PLLSAI1_Config+0x90>
 800805c:	2b01      	cmp	r3, #1
 800805e:	d002      	beq.n	8008066 <RCCEx_PLLSAI1_Config+0x4e>
 8008060:	2b02      	cmp	r3, #2
 8008062:	d009      	beq.n	8008078 <RCCEx_PLLSAI1_Config+0x60>
 8008064:	e020      	b.n	80080a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008066:	4b62      	ldr	r3, [pc, #392]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d11d      	bne.n	80080ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008076:	e01a      	b.n	80080ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008078:	4b5d      	ldr	r3, [pc, #372]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008080:	2b00      	cmp	r3, #0
 8008082:	d116      	bne.n	80080b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008088:	e013      	b.n	80080b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800808a:	4b59      	ldr	r3, [pc, #356]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10f      	bne.n	80080b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008096:	4b56      	ldr	r3, [pc, #344]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d109      	bne.n	80080b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080a6:	e006      	b.n	80080b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]
      break;
 80080ac:	e004      	b.n	80080b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80080ae:	bf00      	nop
 80080b0:	e002      	b.n	80080b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80080b2:	bf00      	nop
 80080b4:	e000      	b.n	80080b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80080b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d108      	bne.n	80080d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80080be:	4b4c      	ldr	r3, [pc, #304]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	f023 0203 	bic.w	r2, r3, #3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4949      	ldr	r1, [pc, #292]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	f040 8086 	bne.w	80081e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80080d8:	4b45      	ldr	r3, [pc, #276]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a44      	ldr	r2, [pc, #272]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80080de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080e4:	f7fc f942 	bl	800436c <HAL_GetTick>
 80080e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80080ea:	e009      	b.n	8008100 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80080ec:	f7fc f93e 	bl	800436c <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d902      	bls.n	8008100 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	73fb      	strb	r3, [r7, #15]
        break;
 80080fe:	e005      	b.n	800810c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008100:	4b3b      	ldr	r3, [pc, #236]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1ef      	bne.n	80080ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d168      	bne.n	80081e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d113      	bne.n	8008140 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008118:	4b35      	ldr	r3, [pc, #212]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	4b35      	ldr	r3, [pc, #212]	; (80081f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800811e:	4013      	ands	r3, r2
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6892      	ldr	r2, [r2, #8]
 8008124:	0211      	lsls	r1, r2, #8
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	68d2      	ldr	r2, [r2, #12]
 800812a:	06d2      	lsls	r2, r2, #27
 800812c:	4311      	orrs	r1, r2
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	6852      	ldr	r2, [r2, #4]
 8008132:	3a01      	subs	r2, #1
 8008134:	0112      	lsls	r2, r2, #4
 8008136:	430a      	orrs	r2, r1
 8008138:	492d      	ldr	r1, [pc, #180]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800813a:	4313      	orrs	r3, r2
 800813c:	610b      	str	r3, [r1, #16]
 800813e:	e02d      	b.n	800819c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d115      	bne.n	8008172 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008146:	4b2a      	ldr	r3, [pc, #168]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008148:	691a      	ldr	r2, [r3, #16]
 800814a:	4b2b      	ldr	r3, [pc, #172]	; (80081f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800814c:	4013      	ands	r3, r2
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6892      	ldr	r2, [r2, #8]
 8008152:	0211      	lsls	r1, r2, #8
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	6912      	ldr	r2, [r2, #16]
 8008158:	0852      	lsrs	r2, r2, #1
 800815a:	3a01      	subs	r2, #1
 800815c:	0552      	lsls	r2, r2, #21
 800815e:	4311      	orrs	r1, r2
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	6852      	ldr	r2, [r2, #4]
 8008164:	3a01      	subs	r2, #1
 8008166:	0112      	lsls	r2, r2, #4
 8008168:	430a      	orrs	r2, r1
 800816a:	4921      	ldr	r1, [pc, #132]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800816c:	4313      	orrs	r3, r2
 800816e:	610b      	str	r3, [r1, #16]
 8008170:	e014      	b.n	800819c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008172:	4b1f      	ldr	r3, [pc, #124]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	4b21      	ldr	r3, [pc, #132]	; (80081fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8008178:	4013      	ands	r3, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6892      	ldr	r2, [r2, #8]
 800817e:	0211      	lsls	r1, r2, #8
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	6952      	ldr	r2, [r2, #20]
 8008184:	0852      	lsrs	r2, r2, #1
 8008186:	3a01      	subs	r2, #1
 8008188:	0652      	lsls	r2, r2, #25
 800818a:	4311      	orrs	r1, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6852      	ldr	r2, [r2, #4]
 8008190:	3a01      	subs	r2, #1
 8008192:	0112      	lsls	r2, r2, #4
 8008194:	430a      	orrs	r2, r1
 8008196:	4916      	ldr	r1, [pc, #88]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8008198:	4313      	orrs	r3, r2
 800819a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800819c:	4b14      	ldr	r3, [pc, #80]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80081a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a8:	f7fc f8e0 	bl	800436c <HAL_GetTick>
 80081ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081ae:	e009      	b.n	80081c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081b0:	f7fc f8dc 	bl	800436c <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d902      	bls.n	80081c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	73fb      	strb	r3, [r7, #15]
          break;
 80081c2:	e005      	b.n	80081d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80081c4:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0ef      	beq.n	80081b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d106      	bne.n	80081e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80081d6:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081d8:	691a      	ldr	r2, [r3, #16]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	4904      	ldr	r1, [pc, #16]	; (80081f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40021000 	.word	0x40021000
 80081f4:	07ff800f 	.word	0x07ff800f
 80081f8:	ff9f800f 	.word	0xff9f800f
 80081fc:	f9ff800f 	.word	0xf9ff800f

08008200 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800820e:	4b72      	ldr	r3, [pc, #456]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f003 0303 	and.w	r3, r3, #3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00e      	beq.n	8008238 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800821a:	4b6f      	ldr	r3, [pc, #444]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f003 0203 	and.w	r2, r3, #3
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d103      	bne.n	8008232 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
       ||
 800822e:	2b00      	cmp	r3, #0
 8008230:	d142      	bne.n	80082b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]
 8008236:	e03f      	b.n	80082b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d018      	beq.n	8008272 <RCCEx_PLLSAI2_Config+0x72>
 8008240:	2b03      	cmp	r3, #3
 8008242:	d825      	bhi.n	8008290 <RCCEx_PLLSAI2_Config+0x90>
 8008244:	2b01      	cmp	r3, #1
 8008246:	d002      	beq.n	800824e <RCCEx_PLLSAI2_Config+0x4e>
 8008248:	2b02      	cmp	r3, #2
 800824a:	d009      	beq.n	8008260 <RCCEx_PLLSAI2_Config+0x60>
 800824c:	e020      	b.n	8008290 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800824e:	4b62      	ldr	r3, [pc, #392]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d11d      	bne.n	8008296 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800825e:	e01a      	b.n	8008296 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008260:	4b5d      	ldr	r3, [pc, #372]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008268:	2b00      	cmp	r3, #0
 800826a:	d116      	bne.n	800829a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008270:	e013      	b.n	800829a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008272:	4b59      	ldr	r3, [pc, #356]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10f      	bne.n	800829e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800827e:	4b56      	ldr	r3, [pc, #344]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d109      	bne.n	800829e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800828e:	e006      	b.n	800829e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	73fb      	strb	r3, [r7, #15]
      break;
 8008294:	e004      	b.n	80082a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8008296:	bf00      	nop
 8008298:	e002      	b.n	80082a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800829a:	bf00      	nop
 800829c:	e000      	b.n	80082a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800829e:	bf00      	nop
    }

    if(status == HAL_OK)
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d108      	bne.n	80082b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80082a6:	4b4c      	ldr	r3, [pc, #304]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	f023 0203 	bic.w	r2, r3, #3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4949      	ldr	r1, [pc, #292]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	f040 8086 	bne.w	80083cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80082c0:	4b45      	ldr	r3, [pc, #276]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a44      	ldr	r2, [pc, #272]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082cc:	f7fc f84e 	bl	800436c <HAL_GetTick>
 80082d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082d2:	e009      	b.n	80082e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80082d4:	f7fc f84a 	bl	800436c <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d902      	bls.n	80082e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	73fb      	strb	r3, [r7, #15]
        break;
 80082e6:	e005      	b.n	80082f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80082e8:	4b3b      	ldr	r3, [pc, #236]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d1ef      	bne.n	80082d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d168      	bne.n	80083cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d113      	bne.n	8008328 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008300:	4b35      	ldr	r3, [pc, #212]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008302:	695a      	ldr	r2, [r3, #20]
 8008304:	4b35      	ldr	r3, [pc, #212]	; (80083dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8008306:	4013      	ands	r3, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6892      	ldr	r2, [r2, #8]
 800830c:	0211      	lsls	r1, r2, #8
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	68d2      	ldr	r2, [r2, #12]
 8008312:	06d2      	lsls	r2, r2, #27
 8008314:	4311      	orrs	r1, r2
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	6852      	ldr	r2, [r2, #4]
 800831a:	3a01      	subs	r2, #1
 800831c:	0112      	lsls	r2, r2, #4
 800831e:	430a      	orrs	r2, r1
 8008320:	492d      	ldr	r1, [pc, #180]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008322:	4313      	orrs	r3, r2
 8008324:	614b      	str	r3, [r1, #20]
 8008326:	e02d      	b.n	8008384 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b01      	cmp	r3, #1
 800832c:	d115      	bne.n	800835a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800832e:	4b2a      	ldr	r3, [pc, #168]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008330:	695a      	ldr	r2, [r3, #20]
 8008332:	4b2b      	ldr	r3, [pc, #172]	; (80083e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8008334:	4013      	ands	r3, r2
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6892      	ldr	r2, [r2, #8]
 800833a:	0211      	lsls	r1, r2, #8
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6912      	ldr	r2, [r2, #16]
 8008340:	0852      	lsrs	r2, r2, #1
 8008342:	3a01      	subs	r2, #1
 8008344:	0552      	lsls	r2, r2, #21
 8008346:	4311      	orrs	r1, r2
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	6852      	ldr	r2, [r2, #4]
 800834c:	3a01      	subs	r2, #1
 800834e:	0112      	lsls	r2, r2, #4
 8008350:	430a      	orrs	r2, r1
 8008352:	4921      	ldr	r1, [pc, #132]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008354:	4313      	orrs	r3, r2
 8008356:	614b      	str	r3, [r1, #20]
 8008358:	e014      	b.n	8008384 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800835a:	4b1f      	ldr	r3, [pc, #124]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800835c:	695a      	ldr	r2, [r3, #20]
 800835e:	4b21      	ldr	r3, [pc, #132]	; (80083e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8008360:	4013      	ands	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6892      	ldr	r2, [r2, #8]
 8008366:	0211      	lsls	r1, r2, #8
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6952      	ldr	r2, [r2, #20]
 800836c:	0852      	lsrs	r2, r2, #1
 800836e:	3a01      	subs	r2, #1
 8008370:	0652      	lsls	r2, r2, #25
 8008372:	4311      	orrs	r1, r2
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6852      	ldr	r2, [r2, #4]
 8008378:	3a01      	subs	r2, #1
 800837a:	0112      	lsls	r2, r2, #4
 800837c:	430a      	orrs	r2, r1
 800837e:	4916      	ldr	r1, [pc, #88]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008380:	4313      	orrs	r3, r2
 8008382:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008384:	4b14      	ldr	r3, [pc, #80]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a13      	ldr	r2, [pc, #76]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800838a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800838e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008390:	f7fb ffec 	bl	800436c <HAL_GetTick>
 8008394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008396:	e009      	b.n	80083ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008398:	f7fb ffe8 	bl	800436c <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d902      	bls.n	80083ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	73fb      	strb	r3, [r7, #15]
          break;
 80083aa:	e005      	b.n	80083b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d0ef      	beq.n	8008398 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80083b8:	7bfb      	ldrb	r3, [r7, #15]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d106      	bne.n	80083cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80083be:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083c0:	695a      	ldr	r2, [r3, #20]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	4904      	ldr	r1, [pc, #16]	; (80083d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	40021000 	.word	0x40021000
 80083dc:	07ff800f 	.word	0x07ff800f
 80083e0:	ff9f800f 	.word	0xff9f800f
 80083e4:	f9ff800f 	.word	0xf9ff800f

080083e8 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b089      	sub	sp, #36	; 0x24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80083f6:	2300      	movs	r3, #0
 80083f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80083fa:	2300      	movs	r3, #0
 80083fc:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008404:	d10b      	bne.n	800841e <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008406:	4b7e      	ldr	r3, [pc, #504]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008408:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800840c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008410:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	2b60      	cmp	r3, #96	; 0x60
 8008416:	d112      	bne.n	800843e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008418:	4b7a      	ldr	r3, [pc, #488]	; (8008604 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800841a:	61fb      	str	r3, [r7, #28]
 800841c:	e00f      	b.n	800843e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008424:	d10b      	bne.n	800843e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008426:	4b76      	ldr	r3, [pc, #472]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800842c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008430:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008438:	d101      	bne.n	800843e <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800843a:	4b72      	ldr	r3, [pc, #456]	; (8008604 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800843c:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	2b00      	cmp	r3, #0
 8008442:	f040 80d6 	bne.w	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	2b40      	cmp	r3, #64	; 0x40
 800844e:	d003      	beq.n	8008458 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008456:	d13b      	bne.n	80084d0 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8008458:	4b69      	ldr	r3, [pc, #420]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008460:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008464:	f040 80c4 	bne.w	80085f0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8008468:	4b65      	ldr	r3, [pc, #404]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 80bd 	beq.w	80085f0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8008476:	4b62      	ldr	r3, [pc, #392]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	091b      	lsrs	r3, r3, #4
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	3301      	adds	r3, #1
 8008482:	693a      	ldr	r2, [r7, #16]
 8008484:	fbb2 f3f3 	udiv	r3, r2, r3
 8008488:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800848a:	4b5d      	ldr	r3, [pc, #372]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	0a1b      	lsrs	r3, r3, #8
 8008490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008494:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8008496:	4b5a      	ldr	r3, [pc, #360]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	0edb      	lsrs	r3, r3, #27
 800849c:	f003 031f 	and.w	r3, r3, #31
 80084a0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d10a      	bne.n	80084be <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80084a8:	4b55      	ldr	r3, [pc, #340]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 80084b4:	2311      	movs	r3, #17
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e001      	b.n	80084be <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 80084ba:	2307      	movs	r3, #7
 80084bc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	fb03 f202 	mul.w	r2, r3, r2
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084cc:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80084ce:	e08f      	b.n	80085f0 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d13a      	bne.n	800854c <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80084d6:	4b4a      	ldr	r3, [pc, #296]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084e2:	f040 8086 	bne.w	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 80084e6:	4b46      	ldr	r3, [pc, #280]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d07f      	beq.n	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80084f2:	4b43      	ldr	r3, [pc, #268]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	091b      	lsrs	r3, r3, #4
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	3301      	adds	r3, #1
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	fbb2 f3f3 	udiv	r3, r2, r3
 8008504:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8008506:	4b3e      	ldr	r3, [pc, #248]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	0a1b      	lsrs	r3, r3, #8
 800850c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008510:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8008512:	4b3b      	ldr	r3, [pc, #236]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008514:	691b      	ldr	r3, [r3, #16]
 8008516:	0edb      	lsrs	r3, r3, #27
 8008518:	f003 031f 	and.w	r3, r3, #31
 800851c:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10a      	bne.n	800853a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8008524:	4b36      	ldr	r3, [pc, #216]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8008530:	2311      	movs	r3, #17
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	e001      	b.n	800853a <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8008536:	2307      	movs	r3, #7
 8008538:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	fb03 f202 	mul.w	r2, r3, r2
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	fbb2 f3f3 	udiv	r3, r2, r3
 8008548:	61fb      	str	r3, [r7, #28]
 800854a:	e052      	b.n	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	d003      	beq.n	800855a <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008558:	d109      	bne.n	800856e <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800855a:	4b29      	ldr	r3, [pc, #164]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008566:	d144      	bne.n	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8008568:	4b27      	ldr	r3, [pc, #156]	; (8008608 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800856a:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800856c:	e041      	b.n	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b20      	cmp	r3, #32
 8008572:	d003      	beq.n	800857c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800857a:	d13a      	bne.n	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800857c:	4b20      	ldr	r3, [pc, #128]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008588:	d133      	bne.n	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800858a:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d02d      	beq.n	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8008596:	4b1a      	ldr	r3, [pc, #104]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	091b      	lsrs	r3, r3, #4
 800859c:	f003 030f 	and.w	r3, r3, #15
 80085a0:	3301      	adds	r3, #1
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80085aa:	4b15      	ldr	r3, [pc, #84]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	0a1b      	lsrs	r3, r3, #8
 80085b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085b4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80085b6:	4b12      	ldr	r3, [pc, #72]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	0edb      	lsrs	r3, r3, #27
 80085bc:	f003 031f 	and.w	r3, r3, #31
 80085c0:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80085c8:	4b0d      	ldr	r3, [pc, #52]	; (8008600 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 80085d4:	2311      	movs	r3, #17
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	e001      	b.n	80085de <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 80085da:	2307      	movs	r3, #7
 80085dc:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	68fa      	ldr	r2, [r7, #12]
 80085e2:	fb03 f202 	mul.w	r2, r3, r2
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ec:	61fb      	str	r3, [r7, #28]
 80085ee:	e000      	b.n	80085f2 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80085f0:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80085f2:	69fb      	ldr	r3, [r7, #28]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3724      	adds	r7, #36	; 0x24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	40021000 	.word	0x40021000
 8008604:	001fff68 	.word	0x001fff68
 8008608:	00f42400 	.word	0x00f42400

0800860c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b086      	sub	sp, #24
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d904      	bls.n	800862a <HAL_SAI_InitProtocol+0x1e>
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	3b03      	subs	r3, #3
 8008624:	2b01      	cmp	r3, #1
 8008626:	d812      	bhi.n	800864e <HAL_SAI_InitProtocol+0x42>
 8008628:	e008      	b.n	800863c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f9fb 	bl	8008a2c <SAI_InitI2S>
 8008636:	4603      	mov	r3, r0
 8008638:	75fb      	strb	r3, [r7, #23]
      break;
 800863a:	e00b      	b.n	8008654 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	68b9      	ldr	r1, [r7, #8]
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 faa4 	bl	8008b90 <SAI_InitPCM>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]
      break;
 800864c:	e002      	b.n	8008654 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	75fb      	strb	r3, [r7, #23]
      break;
 8008652:	bf00      	nop
  }

  if (status == HAL_OK)
 8008654:	7dfb      	ldrb	r3, [r7, #23]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d104      	bne.n	8008664 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800865a:	68f8      	ldr	r0, [r7, #12]
 800865c:	f000 f808 	bl	8008670 <HAL_SAI_Init>
 8008660:	4603      	mov	r3, r0
 8008662:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008664:	7dfb      	ldrb	r3, [r7, #23]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
	...

08008670 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b08a      	sub	sp, #40	; 0x28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e1c7      	b.n	8008a12 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008688:	2b01      	cmp	r3, #1
 800868a:	d10e      	bne.n	80086aa <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a81      	ldr	r2, [pc, #516]	; (8008898 <HAL_SAI_Init+0x228>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d107      	bne.n	80086a6 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800869a:	2b01      	cmp	r3, #1
 800869c:	d103      	bne.n	80086a6 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e1b3      	b.n	8008a12 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d106      	bne.n	80086c4 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f7f9 ff10 	bl	80024e4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 fae5 	bl	8008c94 <SAI_Disable>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d001      	beq.n	80086d4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e19e      	b.n	8008a12 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2202      	movs	r2, #2
 80086d8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	2b02      	cmp	r3, #2
 80086e2:	d00c      	beq.n	80086fe <HAL_SAI_Init+0x8e>
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d80d      	bhi.n	8008704 <HAL_SAI_Init+0x94>
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d002      	beq.n	80086f2 <HAL_SAI_Init+0x82>
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d003      	beq.n	80086f8 <HAL_SAI_Init+0x88>
 80086f0:	e008      	b.n	8008704 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80086f6:	e008      	b.n	800870a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80086f8:	2310      	movs	r3, #16
 80086fa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80086fc:	e005      	b.n	800870a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80086fe:	2320      	movs	r3, #32
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008702:	e002      	b.n	800870a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008708:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	2b03      	cmp	r3, #3
 8008710:	d81d      	bhi.n	800874e <HAL_SAI_Init+0xde>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <HAL_SAI_Init+0xa8>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	08008729 	.word	0x08008729
 800871c:	0800872f 	.word	0x0800872f
 8008720:	08008737 	.word	0x08008737
 8008724:	0800873f 	.word	0x0800873f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8008728:	2300      	movs	r3, #0
 800872a:	61fb      	str	r3, [r7, #28]
      break;
 800872c:	e012      	b.n	8008754 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800872e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008732:	61fb      	str	r3, [r7, #28]
      break;
 8008734:	e00e      	b.n	8008754 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800873a:	61fb      	str	r3, [r7, #28]
      break;
 800873c:	e00a      	b.n	8008754 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800873e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008742:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	f043 0301 	orr.w	r3, r3, #1
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800874c:	e002      	b.n	8008754 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800874e:	2300      	movs	r3, #0
 8008750:	61fb      	str	r3, [r7, #28]
      break;
 8008752:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a4f      	ldr	r2, [pc, #316]	; (8008898 <HAL_SAI_Init+0x228>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d004      	beq.n	8008768 <HAL_SAI_Init+0xf8>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a4e      	ldr	r2, [pc, #312]	; (800889c <HAL_SAI_Init+0x22c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d103      	bne.n	8008770 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8008768:	4a4d      	ldr	r2, [pc, #308]	; (80088a0 <HAL_SAI_Init+0x230>)
 800876a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	e002      	b.n	8008776 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008770:	4a4c      	ldr	r2, [pc, #304]	; (80088a4 <HAL_SAI_Init+0x234>)
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	69db      	ldr	r3, [r3, #28]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d073      	beq.n	8008866 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a45      	ldr	r2, [pc, #276]	; (8008898 <HAL_SAI_Init+0x228>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_SAI_Init+0x122>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a43      	ldr	r2, [pc, #268]	; (800889c <HAL_SAI_Init+0x22c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d105      	bne.n	800879e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008792:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008796:	f7fe fd0d 	bl	80071b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800879a:	61b8      	str	r0, [r7, #24]
 800879c:	e004      	b.n	80087a8 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800879e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80087a2:	f7fe fd07 	bl	80071b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80087a6:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	695b      	ldr	r3, [r3, #20]
 80087ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087b0:	d120      	bne.n	80087f4 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	d102      	bne.n	80087c0 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80087ba:	2340      	movs	r3, #64	; 0x40
 80087bc:	613b      	str	r3, [r7, #16]
 80087be:	e00a      	b.n	80087d6 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c4:	2b08      	cmp	r3, #8
 80087c6:	d103      	bne.n	80087d0 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80087c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087cc:	613b      	str	r3, [r7, #16]
 80087ce:	e002      	b.n	80087d6 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d4:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	4619      	mov	r1, r3
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	fb02 f303 	mul.w	r3, r2, r3
 80087ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80087f0:	617b      	str	r3, [r7, #20]
 80087f2:	e017      	b.n	8008824 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087fc:	d101      	bne.n	8008802 <HAL_SAI_Init+0x192>
 80087fe:	2302      	movs	r3, #2
 8008800:	e000      	b.n	8008804 <HAL_SAI_Init+0x194>
 8008802:	2301      	movs	r3, #1
 8008804:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	4613      	mov	r3, r2
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	4413      	add	r3, r2
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	4619      	mov	r1, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	fb02 f303 	mul.w	r3, r2, r3
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008822:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	4a20      	ldr	r2, [pc, #128]	; (80088a8 <HAL_SAI_Init+0x238>)
 8008828:	fba2 2303 	umull	r2, r3, r2, r3
 800882c:	08da      	lsrs	r2, r3, #3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8008832:	6979      	ldr	r1, [r7, #20]
 8008834:	4b1c      	ldr	r3, [pc, #112]	; (80088a8 <HAL_SAI_Init+0x238>)
 8008836:	fba3 2301 	umull	r2, r3, r3, r1
 800883a:	08da      	lsrs	r2, r3, #3
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	005b      	lsls	r3, r3, #1
 8008844:	1aca      	subs	r2, r1, r3
 8008846:	2a08      	cmp	r2, #8
 8008848:	d904      	bls.n	8008854 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a1b      	ldr	r3, [r3, #32]
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008858:	2b04      	cmp	r3, #4
 800885a:	d104      	bne.n	8008866 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	085a      	lsrs	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_SAI_Init+0x206>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d109      	bne.n	800888a <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887a:	2b01      	cmp	r3, #1
 800887c:	d101      	bne.n	8008882 <HAL_SAI_Init+0x212>
 800887e:	2300      	movs	r3, #0
 8008880:	e001      	b.n	8008886 <HAL_SAI_Init+0x216>
 8008882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008886:	623b      	str	r3, [r7, #32]
 8008888:	e012      	b.n	80088b0 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888e:	2b01      	cmp	r3, #1
 8008890:	d10c      	bne.n	80088ac <HAL_SAI_Init+0x23c>
 8008892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008896:	e00a      	b.n	80088ae <HAL_SAI_Init+0x23e>
 8008898:	40015404 	.word	0x40015404
 800889c:	40015424 	.word	0x40015424
 80088a0:	40015400 	.word	0x40015400
 80088a4:	40015800 	.word	0x40015800
 80088a8:	cccccccd 	.word	0xcccccccd
 80088ac:	2300      	movs	r3, #0
 80088ae:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6819      	ldr	r1, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	4b58      	ldr	r3, [pc, #352]	; (8008a1c <HAL_SAI_Init+0x3ac>)
 80088bc:	400b      	ands	r3, r1
 80088be:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	6819      	ldr	r1, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685a      	ldr	r2, [r3, #4]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80088d4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088da:	431a      	orrs	r2, r3
 80088dc:	6a3b      	ldr	r3, [r7, #32]
 80088de:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 80088e8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80088f4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	051b      	lsls	r3, r3, #20
 80088fc:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008902:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	430a      	orrs	r2, r1
 800890a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6812      	ldr	r2, [r2, #0]
 8008916:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800891a:	f023 030f 	bic.w	r3, r3, #15
 800891e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6859      	ldr	r1, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	431a      	orrs	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	6899      	ldr	r1, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	4b35      	ldr	r3, [pc, #212]	; (8008a20 <HAL_SAI_Init+0x3b0>)
 800894a:	400b      	ands	r3, r1
 800894c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6899      	ldr	r1, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008958:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800895e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
                           hsai->FrameInit.FSOffset |
 8008964:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSDefinition |
 800896a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008970:	3b01      	subs	r3, #1
 8008972:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008974:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68d9      	ldr	r1, [r3, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	f24f 0320 	movw	r3, #61472	; 0xf020
 800898c:	400b      	ands	r3, r1
 800898e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68d9      	ldr	r1, [r3, #12]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800899e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a4:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80089a6:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ac:	3b01      	subs	r3, #1
 80089ae:	021b      	lsls	r3, r3, #8
 80089b0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	430a      	orrs	r2, r1
 80089b8:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a19      	ldr	r2, [pc, #100]	; (8008a24 <HAL_SAI_Init+0x3b4>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d119      	bne.n	80089f8 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80089c4:	4b18      	ldr	r3, [pc, #96]	; (8008a28 <HAL_SAI_Init+0x3b8>)
 80089c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c8:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <HAL_SAI_Init+0x3b8>)
 80089ca:	f023 0301 	bic.w	r3, r3, #1
 80089ce:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d10e      	bne.n	80089f8 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e2:	3b01      	subs	r3, #1
 80089e4:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80089e6:	4910      	ldr	r1, [pc, #64]	; (8008a28 <HAL_SAI_Init+0x3b8>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80089ec:	4b0e      	ldr	r3, [pc, #56]	; (8008a28 <HAL_SAI_Init+0x3b8>)
 80089ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f0:	4a0d      	ldr	r2, [pc, #52]	; (8008a28 <HAL_SAI_Init+0x3b8>)
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	6453      	str	r3, [r2, #68]	; 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3728      	adds	r7, #40	; 0x28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	f805c010 	.word	0xf805c010
 8008a20:	fff88000 	.word	0xfff88000
 8008a24:	40015404 	.word	0x40015404
 8008a28:	40015400 	.word	0x40015400

08008a2c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <SAI_InitI2S+0x2e>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d103      	bne.n	8008a62 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8008a60:	e002      	b.n	8008a68 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008a6e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a76:	671a      	str	r2, [r3, #112]	; 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	66da      	str	r2, [r3, #108]	; 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e077      	b.n	8008b82 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d107      	bne.n	8008aa8 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008aa4:	661a      	str	r2, [r3, #96]	; 0x60
 8008aa6:	e006      	b.n	8008ab6 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008aae:	65da      	str	r2, [r3, #92]	; 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Frame definition */
  switch (datasize)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	d84f      	bhi.n	8008b5c <SAI_InitI2S+0x130>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <SAI_InitI2S+0x98>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008ad5 	.word	0x08008ad5
 8008ac8:	08008af7 	.word	0x08008af7
 8008acc:	08008b19 	.word	0x08008b19
 8008ad0:	08008b3b 	.word	0x08008b3b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2280      	movs	r2, #128	; 0x80
 8008ad8:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	085b      	lsrs	r3, r3, #1
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	085b      	lsrs	r3, r3, #1
 8008ae8:	011a      	lsls	r2, r3, #4
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2240      	movs	r2, #64	; 0x40
 8008af2:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008af4:	e035      	b.n	8008b62 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2280      	movs	r2, #128	; 0x80
 8008afa:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	085b      	lsrs	r3, r3, #1
 8008b00:	019a      	lsls	r2, r3, #6
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	085b      	lsrs	r3, r3, #1
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2280      	movs	r2, #128	; 0x80
 8008b14:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008b16:	e024      	b.n	8008b62 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	22c0      	movs	r2, #192	; 0xc0
 8008b1c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	019a      	lsls	r2, r3, #6
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	085b      	lsrs	r3, r3, #1
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2280      	movs	r2, #128	; 0x80
 8008b36:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008b38:	e013      	b.n	8008b62 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	22e0      	movs	r2, #224	; 0xe0
 8008b3e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	085b      	lsrs	r3, r3, #1
 8008b44:	019a      	lsls	r2, r3, #6
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	085b      	lsrs	r3, r3, #1
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	655a      	str	r2, [r3, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2280      	movs	r2, #128	; 0x80
 8008b58:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008b5a:	e002      	b.n	8008b62 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8008b60:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d10b      	bne.n	8008b80 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d102      	bne.n	8008b74 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2210      	movs	r2, #16
 8008b72:	665a      	str	r2, [r3, #100]	; 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d102      	bne.n	8008b80 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2208      	movs	r2, #8
 8008b7e:	665a      	str	r2, [r3, #100]	; 0x64
    }
  }
  return status;
 8008b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop

08008b90 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	649a      	str	r2, [r3, #72]	; 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <SAI_InitPCM+0x2e>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d103      	bne.n	8008bc6 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	64da      	str	r2, [r3, #76]	; 0x4c
 8008bc4:	e002      	b.n	8008bcc <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008bd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008be0:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bf4:	671a      	str	r2, [r3, #112]	; 0x70

  if (protocol == SAI_PCM_SHORT)
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2b04      	cmp	r3, #4
 8008bfa:	d103      	bne.n	8008c04 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	655a      	str	r2, [r3, #84]	; 0x54
 8008c02:	e002      	b.n	8008c0a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	220d      	movs	r2, #13
 8008c08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  switch (datasize)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b03      	cmp	r3, #3
 8008c0e:	d837      	bhi.n	8008c80 <SAI_InitPCM+0xf0>
 8008c10:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <SAI_InitPCM+0x88>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c29 	.word	0x08008c29
 8008c1c:	08008c3f 	.word	0x08008c3f
 8008c20:	08008c55 	.word	0x08008c55
 8008c24:	08008c6b 	.word	0x08008c6b
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2280      	movs	r2, #128	; 0x80
 8008c2c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	011a      	lsls	r2, r3, #4
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2240      	movs	r2, #64	; 0x40
 8008c3a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008c3c:	e023      	b.n	8008c86 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2280      	movs	r2, #128	; 0x80
 8008c42:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2280      	movs	r2, #128	; 0x80
 8008c50:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008c52:	e018      	b.n	8008c86 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	22c0      	movs	r2, #192	; 0xc0
 8008c58:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2280      	movs	r2, #128	; 0x80
 8008c66:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008c68:	e00d      	b.n	8008c86 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	22e0      	movs	r2, #224	; 0xe0
 8008c6e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	651a      	str	r2, [r3, #80]	; 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2280      	movs	r2, #128	; 0x80
 8008c7c:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8008c7e:	e002      	b.n	8008c86 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	75fb      	strb	r3, [r7, #23]
      break;
 8008c84:	bf00      	nop
  }

  return status;
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	371c      	adds	r7, #28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008c9c:	4b18      	ldr	r3, [pc, #96]	; (8008d00 <SAI_Disable+0x6c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a18      	ldr	r2, [pc, #96]	; (8008d04 <SAI_Disable+0x70>)
 8008ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca6:	0b1b      	lsrs	r3, r3, #12
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008cbe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d10a      	bne.n	8008cdc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ccc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      status = HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	72fb      	strb	r3, [r7, #11]
      break;
 8008cda:	e009      	b.n	8008cf0 <SAI_Disable+0x5c>
    }
    count--;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e7      	bne.n	8008cc0 <SAI_Disable+0x2c>

  return status;
 8008cf0:	7afb      	ldrb	r3, [r7, #11]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20000010 	.word	0x20000010
 8008d04:	95cbec1b 	.word	0x95cbec1b

08008d08 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e0aa      	b.n	8008e70 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d106      	bne.n	8008d30 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7f9 f852 	bl	8001dd4 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f022 0201 	bic.w	r2, r2, #1
 8008d44:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d52:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695a      	ldr	r2, [r3, #20]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d62:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	695a      	ldr	r2, [r3, #20]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008d72:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008d7c:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	689a      	ldr	r2, [r3, #8]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d8c:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d012      	beq.n	8008dbc <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d107      	bne.n	8008dae <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	68da      	ldr	r2, [r3, #12]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008daa:	609a      	str	r2, [r3, #8]
 8008dac:	e006      	b.n	8008dbc <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008dba:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d104      	bne.n	8008dce <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6812      	ldr	r2, [r2, #0]
 8008dd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de0:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695a      	ldr	r2, [r3, #20]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a1a      	ldr	r2, [r3, #32]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e04:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008e0a:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e10:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8008e1c:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8008e1e:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e28:	d110      	bne.n	8008e4c <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d004      	beq.n	8008e3c <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8008e36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e3a:	d107      	bne.n	8008e4c <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008e4a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f042 0201 	orr.w	r2, r2, #1
 8008e5a:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <HAL_SMBUS_EnableAlert_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUSx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableAlert_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Enable SMBus alert */
  hsmbus->Instance->CR1 |= I2C_CR1_ALERTEN;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008e8e:	601a      	str	r2, [r3, #0]

  /* Clear ALERT flag */
  __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e98:	61da      	str	r2, [r3, #28]

  /* Enable Alert Interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ALERT);
 8008e9a:	2180      	movs	r1, #128	; 0x80
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f805 	bl	8008eac <SMBUS_Enable_IRQ>

  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eca:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ed2:	2b38      	cmp	r3, #56	; 0x38
 8008ed4:	d103      	bne.n	8008ede <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008edc:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8008ee4:	2bf2      	cmp	r3, #242	; 0xf2
 8008ee6:	d103      	bne.n	8008ef0 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008eee:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 8008ef6:	2bd4      	cmp	r3, #212	; 0xd4
 8008ef8:	d103      	bne.n	8008f02 <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008f00:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6819      	ldr	r1, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	601a      	str	r2, [r3, #0]
}
 8008f12:	bf00      	nop
 8008f14:	3714      	adds	r7, #20
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d101      	bne.n	8008f30 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e095      	b.n	800905c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d108      	bne.n	8008f4a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f40:	d009      	beq.n	8008f56 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	61da      	str	r2, [r3, #28]
 8008f48:	e005      	b.n	8008f56 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d106      	bne.n	8008f76 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7f9 f8bd 	bl	80020f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2202      	movs	r2, #2
 8008f7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f8c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f96:	d902      	bls.n	8008f9e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	e002      	b.n	8008fa4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fa2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008fac:	d007      	beq.n	8008fbe <HAL_SPI_Init+0xa0>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008fb6:	d002      	beq.n	8008fbe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	f003 0302 	and.w	r3, r3, #2
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fec:	431a      	orrs	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009000:	ea42 0103 	orr.w	r1, r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	430a      	orrs	r2, r1
 8009012:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	0c1b      	lsrs	r3, r3, #16
 800901a:	f003 0204 	and.w	r2, r3, #4
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	f003 0310 	and.w	r3, r3, #16
 8009026:	431a      	orrs	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	431a      	orrs	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800903a:	ea42 0103 	orr.w	r1, r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	430a      	orrs	r2, r1
 800904a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	4613      	mov	r3, r2
 8009072:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800907e:	2b01      	cmp	r3, #1
 8009080:	d101      	bne.n	8009086 <HAL_SPI_Transmit+0x22>
 8009082:	2302      	movs	r3, #2
 8009084:	e15f      	b.n	8009346 <HAL_SPI_Transmit+0x2e2>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800908e:	f7fb f96d 	bl	800436c <HAL_GetTick>
 8009092:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009094:	88fb      	ldrh	r3, [r7, #6]
 8009096:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d002      	beq.n	80090aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090a4:	2302      	movs	r3, #2
 80090a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090a8:	e148      	b.n	800933c <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <HAL_SPI_Transmit+0x52>
 80090b0:	88fb      	ldrh	r3, [r7, #6]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d102      	bne.n	80090bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090ba:	e13f      	b.n	800933c <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2203      	movs	r2, #3
 80090c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2200      	movs	r2, #0
 80090c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	88fa      	ldrh	r2, [r7, #6]
 80090d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	88fa      	ldrh	r2, [r7, #6]
 80090da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009106:	d10f      	bne.n	8009128 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009116:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009126:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009132:	2b40      	cmp	r3, #64	; 0x40
 8009134:	d007      	beq.n	8009146 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009144:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800914e:	d94f      	bls.n	80091f0 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <HAL_SPI_Transmit+0xfa>
 8009158:	8afb      	ldrh	r3, [r7, #22]
 800915a:	2b01      	cmp	r3, #1
 800915c:	d142      	bne.n	80091e4 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	881a      	ldrh	r2, [r3, #0]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916e:	1c9a      	adds	r2, r3, #2
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009178:	b29b      	uxth	r3, r3
 800917a:	3b01      	subs	r3, #1
 800917c:	b29a      	uxth	r2, r3
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009182:	e02f      	b.n	80091e4 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	2b02      	cmp	r3, #2
 8009190:	d112      	bne.n	80091b8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009196:	881a      	ldrh	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a2:	1c9a      	adds	r2, r3, #2
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091b6:	e015      	b.n	80091e4 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091b8:	f7fb f8d8 	bl	800436c <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d803      	bhi.n	80091d0 <HAL_SPI_Transmit+0x16c>
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ce:	d102      	bne.n	80091d6 <HAL_SPI_Transmit+0x172>
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d106      	bne.n	80091e4 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80091e2:	e0ab      	b.n	800933c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1ca      	bne.n	8009184 <HAL_SPI_Transmit+0x120>
 80091ee:	e080      	b.n	80092f2 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d002      	beq.n	80091fe <HAL_SPI_Transmit+0x19a>
 80091f8:	8afb      	ldrh	r3, [r7, #22]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d174      	bne.n	80092e8 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009202:	b29b      	uxth	r3, r3
 8009204:	2b01      	cmp	r3, #1
 8009206:	d912      	bls.n	800922e <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920c:	881a      	ldrh	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009218:	1c9a      	adds	r2, r3, #2
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009222:	b29b      	uxth	r3, r3
 8009224:	3b02      	subs	r3, #2
 8009226:	b29a      	uxth	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800922c:	e05c      	b.n	80092e8 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	330c      	adds	r3, #12
 8009238:	7812      	ldrb	r2, [r2, #0]
 800923a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800924a:	b29b      	uxth	r3, r3
 800924c:	3b01      	subs	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009254:	e048      	b.n	80092e8 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b02      	cmp	r3, #2
 8009262:	d12b      	bne.n	80092bc <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009268:	b29b      	uxth	r3, r3
 800926a:	2b01      	cmp	r3, #1
 800926c:	d912      	bls.n	8009294 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009272:	881a      	ldrh	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	1c9a      	adds	r2, r3, #2
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009288:	b29b      	uxth	r3, r3
 800928a:	3b02      	subs	r3, #2
 800928c:	b29a      	uxth	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009292:	e029      	b.n	80092e8 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	330c      	adds	r3, #12
 800929e:	7812      	ldrb	r2, [r2, #0]
 80092a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	3b01      	subs	r3, #1
 80092b4:	b29a      	uxth	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092ba:	e015      	b.n	80092e8 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092bc:	f7fb f856 	bl	800436c <HAL_GetTick>
 80092c0:	4602      	mov	r2, r0
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	1ad3      	subs	r3, r2, r3
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d803      	bhi.n	80092d4 <HAL_SPI_Transmit+0x270>
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092d2:	d102      	bne.n	80092da <HAL_SPI_Transmit+0x276>
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d106      	bne.n	80092e8 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2201      	movs	r2, #1
 80092e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80092e6:	e029      	b.n	800933c <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1b1      	bne.n	8009256 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	68f8      	ldr	r0, [r7, #12]
 80092f8:	f000 f948 	bl	800958c <SPI_EndRxTxTransaction>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d002      	beq.n	8009308 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2220      	movs	r2, #32
 8009306:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d10a      	bne.n	8009326 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	613b      	str	r3, [r7, #16]
 8009324:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800932a:	2b00      	cmp	r3, #0
 800932c:	d002      	beq.n	8009334 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	77fb      	strb	r3, [r7, #31]
 8009332:	e003      	b.n	800933c <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009344:	7ffb      	ldrb	r3, [r7, #31]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3720      	adds	r7, #32
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	4613      	mov	r3, r2
 800935e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009360:	f7fb f804 	bl	800436c <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	1a9b      	subs	r3, r3, r2
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	4413      	add	r3, r2
 800936e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009370:	f7fa fffc 	bl	800436c <HAL_GetTick>
 8009374:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009376:	4b39      	ldr	r3, [pc, #228]	; (800945c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	015b      	lsls	r3, r3, #5
 800937c:	0d1b      	lsrs	r3, r3, #20
 800937e:	69fa      	ldr	r2, [r7, #28]
 8009380:	fb02 f303 	mul.w	r3, r2, r3
 8009384:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009386:	e054      	b.n	8009432 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800938e:	d050      	beq.n	8009432 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009390:	f7fa ffec 	bl	800436c <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	69fa      	ldr	r2, [r7, #28]
 800939c:	429a      	cmp	r2, r3
 800939e:	d902      	bls.n	80093a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d13d      	bne.n	8009422 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80093b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093be:	d111      	bne.n	80093e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093c8:	d004      	beq.n	80093d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093d2:	d107      	bne.n	80093e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093ec:	d10f      	bne.n	800940e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093fc:	601a      	str	r2, [r3, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800940c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	2200      	movs	r2, #0
 800941a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e017      	b.n	8009452 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d101      	bne.n	800942c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	3b01      	subs	r3, #1
 8009430:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	689a      	ldr	r2, [r3, #8]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	4013      	ands	r3, r2
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	429a      	cmp	r2, r3
 8009440:	bf0c      	ite	eq
 8009442:	2301      	moveq	r3, #1
 8009444:	2300      	movne	r3, #0
 8009446:	b2db      	uxtb	r3, r3
 8009448:	461a      	mov	r2, r3
 800944a:	79fb      	ldrb	r3, [r7, #7]
 800944c:	429a      	cmp	r2, r3
 800944e:	d19b      	bne.n	8009388 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3720      	adds	r7, #32
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20000010 	.word	0x20000010

08009460 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b08a      	sub	sp, #40	; 0x28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009472:	f7fa ff7b 	bl	800436c <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	4413      	add	r3, r2
 8009480:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009482:	f7fa ff73 	bl	800436c <HAL_GetTick>
 8009486:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	330c      	adds	r3, #12
 800948e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009490:	4b3d      	ldr	r3, [pc, #244]	; (8009588 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	00da      	lsls	r2, r3, #3
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	0d1b      	lsrs	r3, r3, #20
 80094a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a2:	fb02 f303 	mul.w	r3, r2, r3
 80094a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80094a8:	e060      	b.n	800956c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80094b0:	d107      	bne.n	80094c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d104      	bne.n	80094c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c8:	d050      	beq.n	800956c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094ca:	f7fa ff4f 	bl	800436c <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d902      	bls.n	80094e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d13d      	bne.n	800955c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094f8:	d111      	bne.n	800951e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009502:	d004      	beq.n	800950e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800950c:	d107      	bne.n	800951e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800951c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009526:	d10f      	bne.n	8009548 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009546:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009558:	2303      	movs	r3, #3
 800955a:	e010      	b.n	800957e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009562:	2300      	movs	r3, #0
 8009564:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	3b01      	subs	r3, #1
 800956a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	689a      	ldr	r2, [r3, #8]
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	4013      	ands	r3, r2
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	429a      	cmp	r2, r3
 800957a:	d196      	bne.n	80094aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3728      	adds	r7, #40	; 0x28
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	20000010 	.word	0x20000010

0800958c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af02      	add	r7, sp, #8
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	2200      	movs	r2, #0
 80095a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f7ff ff5b 	bl	8009460 <SPI_WaitFifoStateUntilTimeout>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d007      	beq.n	80095c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095b4:	f043 0220 	orr.w	r2, r3, #32
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e027      	b.n	8009610 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	9300      	str	r3, [sp, #0]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	2200      	movs	r2, #0
 80095c8:	2180      	movs	r1, #128	; 0x80
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff fec0 	bl	8009350 <SPI_WaitFlagStateUntilTimeout>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d007      	beq.n	80095e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095da:	f043 0220 	orr.w	r2, r3, #32
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80095e2:	2303      	movs	r3, #3
 80095e4:	e014      	b.n	8009610 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f7ff ff34 	bl	8009460 <SPI_WaitFifoStateUntilTimeout>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009602:	f043 0220 	orr.w	r2, r3, #32
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e000      	b.n	8009610 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d101      	bne.n	800962a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e049      	b.n	80096be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7f8 fd9a 	bl	8002178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2202      	movs	r2, #2
 8009648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	3304      	adds	r3, #4
 8009654:	4619      	mov	r1, r3
 8009656:	4610      	mov	r0, r2
 8009658:	f000 f94a 	bl	80098f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2201      	movs	r2, #1
 8009660:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d101      	bne.n	80096e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80096e2:	2302      	movs	r3, #2
 80096e4:	e0ff      	b.n	80098e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b14      	cmp	r3, #20
 80096f2:	f200 80f0 	bhi.w	80098d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80096f6:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	08009751 	.word	0x08009751
 8009700:	080098d7 	.word	0x080098d7
 8009704:	080098d7 	.word	0x080098d7
 8009708:	080098d7 	.word	0x080098d7
 800970c:	08009791 	.word	0x08009791
 8009710:	080098d7 	.word	0x080098d7
 8009714:	080098d7 	.word	0x080098d7
 8009718:	080098d7 	.word	0x080098d7
 800971c:	080097d3 	.word	0x080097d3
 8009720:	080098d7 	.word	0x080098d7
 8009724:	080098d7 	.word	0x080098d7
 8009728:	080098d7 	.word	0x080098d7
 800972c:	08009813 	.word	0x08009813
 8009730:	080098d7 	.word	0x080098d7
 8009734:	080098d7 	.word	0x080098d7
 8009738:	080098d7 	.word	0x080098d7
 800973c:	08009855 	.word	0x08009855
 8009740:	080098d7 	.word	0x080098d7
 8009744:	080098d7 	.word	0x080098d7
 8009748:	080098d7 	.word	0x080098d7
 800974c:	08009895 	.word	0x08009895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68b9      	ldr	r1, [r7, #8]
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f964 	bl	8009a24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	699a      	ldr	r2, [r3, #24]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f042 0208 	orr.w	r2, r2, #8
 800976a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	699a      	ldr	r2, [r3, #24]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f022 0204 	bic.w	r2, r2, #4
 800977a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6999      	ldr	r1, [r3, #24]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	691a      	ldr	r2, [r3, #16]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	430a      	orrs	r2, r1
 800978c:	619a      	str	r2, [r3, #24]
      break;
 800978e:	e0a5      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68b9      	ldr	r1, [r7, #8]
 8009796:	4618      	mov	r0, r3
 8009798:	f000 f9d4 	bl	8009b44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699a      	ldr	r2, [r3, #24]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	699a      	ldr	r2, [r3, #24]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6999      	ldr	r1, [r3, #24]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	021a      	lsls	r2, r3, #8
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	430a      	orrs	r2, r1
 80097ce:	619a      	str	r2, [r3, #24]
      break;
 80097d0:	e084      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68b9      	ldr	r1, [r7, #8]
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 fa3d 	bl	8009c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	69da      	ldr	r2, [r3, #28]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0208 	orr.w	r2, r2, #8
 80097ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69da      	ldr	r2, [r3, #28]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 0204 	bic.w	r2, r2, #4
 80097fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69d9      	ldr	r1, [r3, #28]
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	691a      	ldr	r2, [r3, #16]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	430a      	orrs	r2, r1
 800980e:	61da      	str	r2, [r3, #28]
      break;
 8009810:	e064      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68b9      	ldr	r1, [r7, #8]
 8009818:	4618      	mov	r0, r3
 800981a:	f000 faa5 	bl	8009d68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69da      	ldr	r2, [r3, #28]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800982c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69da      	ldr	r2, [r3, #28]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800983c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	69d9      	ldr	r1, [r3, #28]
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	021a      	lsls	r2, r3, #8
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	430a      	orrs	r2, r1
 8009850:	61da      	str	r2, [r3, #28]
      break;
 8009852:	e043      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68b9      	ldr	r1, [r7, #8]
 800985a:	4618      	mov	r0, r3
 800985c:	f000 faee 	bl	8009e3c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f042 0208 	orr.w	r2, r2, #8
 800986e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0204 	bic.w	r2, r2, #4
 800987e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	691a      	ldr	r2, [r3, #16]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	430a      	orrs	r2, r1
 8009890:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009892:	e023      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68b9      	ldr	r1, [r7, #8]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fb32 	bl	8009f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	021a      	lsls	r2, r3, #8
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	430a      	orrs	r2, r1
 80098d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098d4:	e002      	b.n	80098dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	75fb      	strb	r3, [r7, #23]
      break;
 80098da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80098e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3718      	adds	r7, #24
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop

080098f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a40      	ldr	r2, [pc, #256]	; (8009a04 <TIM_Base_SetConfig+0x114>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d013      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800990e:	d00f      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a3d      	ldr	r2, [pc, #244]	; (8009a08 <TIM_Base_SetConfig+0x118>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00b      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a3c      	ldr	r2, [pc, #240]	; (8009a0c <TIM_Base_SetConfig+0x11c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d007      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a3b      	ldr	r2, [pc, #236]	; (8009a10 <TIM_Base_SetConfig+0x120>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d003      	beq.n	8009930 <TIM_Base_SetConfig+0x40>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a3a      	ldr	r2, [pc, #232]	; (8009a14 <TIM_Base_SetConfig+0x124>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d108      	bne.n	8009942 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	68fa      	ldr	r2, [r7, #12]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a2f      	ldr	r2, [pc, #188]	; (8009a04 <TIM_Base_SetConfig+0x114>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d01f      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009950:	d01b      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a2c      	ldr	r2, [pc, #176]	; (8009a08 <TIM_Base_SetConfig+0x118>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d017      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a2b      	ldr	r2, [pc, #172]	; (8009a0c <TIM_Base_SetConfig+0x11c>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d013      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a2a      	ldr	r2, [pc, #168]	; (8009a10 <TIM_Base_SetConfig+0x120>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00f      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a29      	ldr	r2, [pc, #164]	; (8009a14 <TIM_Base_SetConfig+0x124>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00b      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a28      	ldr	r2, [pc, #160]	; (8009a18 <TIM_Base_SetConfig+0x128>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d007      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a27      	ldr	r2, [pc, #156]	; (8009a1c <TIM_Base_SetConfig+0x12c>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d003      	beq.n	800998a <TIM_Base_SetConfig+0x9a>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a26      	ldr	r2, [pc, #152]	; (8009a20 <TIM_Base_SetConfig+0x130>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d108      	bne.n	800999c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	4313      	orrs	r3, r2
 800999a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	689a      	ldr	r2, [r3, #8]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a10      	ldr	r2, [pc, #64]	; (8009a04 <TIM_Base_SetConfig+0x114>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d00f      	beq.n	80099e8 <TIM_Base_SetConfig+0xf8>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a12      	ldr	r2, [pc, #72]	; (8009a14 <TIM_Base_SetConfig+0x124>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d00b      	beq.n	80099e8 <TIM_Base_SetConfig+0xf8>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a11      	ldr	r2, [pc, #68]	; (8009a18 <TIM_Base_SetConfig+0x128>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d007      	beq.n	80099e8 <TIM_Base_SetConfig+0xf8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a10      	ldr	r2, [pc, #64]	; (8009a1c <TIM_Base_SetConfig+0x12c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d003      	beq.n	80099e8 <TIM_Base_SetConfig+0xf8>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a0f      	ldr	r2, [pc, #60]	; (8009a20 <TIM_Base_SetConfig+0x130>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d103      	bne.n	80099f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	691a      	ldr	r2, [r3, #16]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2201      	movs	r2, #1
 80099f4:	615a      	str	r2, [r3, #20]
}
 80099f6:	bf00      	nop
 80099f8:	3714      	adds	r7, #20
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	40012c00 	.word	0x40012c00
 8009a08:	40000400 	.word	0x40000400
 8009a0c:	40000800 	.word	0x40000800
 8009a10:	40000c00 	.word	0x40000c00
 8009a14:	40013400 	.word	0x40013400
 8009a18:	40014000 	.word	0x40014000
 8009a1c:	40014400 	.word	0x40014400
 8009a20:	40014800 	.word	0x40014800

08009a24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	f023 0201 	bic.w	r2, r3, #1
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	699b      	ldr	r3, [r3, #24]
 8009a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f023 0303 	bic.w	r3, r3, #3
 8009a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	f023 0302 	bic.w	r3, r3, #2
 8009a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a2c      	ldr	r2, [pc, #176]	; (8009b30 <TIM_OC1_SetConfig+0x10c>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d00f      	beq.n	8009aa4 <TIM_OC1_SetConfig+0x80>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a2b      	ldr	r2, [pc, #172]	; (8009b34 <TIM_OC1_SetConfig+0x110>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d00b      	beq.n	8009aa4 <TIM_OC1_SetConfig+0x80>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a2a      	ldr	r2, [pc, #168]	; (8009b38 <TIM_OC1_SetConfig+0x114>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d007      	beq.n	8009aa4 <TIM_OC1_SetConfig+0x80>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a29      	ldr	r2, [pc, #164]	; (8009b3c <TIM_OC1_SetConfig+0x118>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d003      	beq.n	8009aa4 <TIM_OC1_SetConfig+0x80>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a28      	ldr	r2, [pc, #160]	; (8009b40 <TIM_OC1_SetConfig+0x11c>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d10c      	bne.n	8009abe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f023 0308 	bic.w	r3, r3, #8
 8009aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f023 0304 	bic.w	r3, r3, #4
 8009abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a1b      	ldr	r2, [pc, #108]	; (8009b30 <TIM_OC1_SetConfig+0x10c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d00f      	beq.n	8009ae6 <TIM_OC1_SetConfig+0xc2>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a1a      	ldr	r2, [pc, #104]	; (8009b34 <TIM_OC1_SetConfig+0x110>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d00b      	beq.n	8009ae6 <TIM_OC1_SetConfig+0xc2>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a19      	ldr	r2, [pc, #100]	; (8009b38 <TIM_OC1_SetConfig+0x114>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d007      	beq.n	8009ae6 <TIM_OC1_SetConfig+0xc2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a18      	ldr	r2, [pc, #96]	; (8009b3c <TIM_OC1_SetConfig+0x118>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d003      	beq.n	8009ae6 <TIM_OC1_SetConfig+0xc2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a17      	ldr	r2, [pc, #92]	; (8009b40 <TIM_OC1_SetConfig+0x11c>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d111      	bne.n	8009b0a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	621a      	str	r2, [r3, #32]
}
 8009b24:	bf00      	nop
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	40012c00 	.word	0x40012c00
 8009b34:	40013400 	.word	0x40013400
 8009b38:	40014000 	.word	0x40014000
 8009b3c:	40014400 	.word	0x40014400
 8009b40:	40014800 	.word	0x40014800

08009b44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b087      	sub	sp, #28
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a1b      	ldr	r3, [r3, #32]
 8009b58:	f023 0210 	bic.w	r2, r3, #16
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	021b      	lsls	r3, r3, #8
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f023 0320 	bic.w	r3, r3, #32
 8009b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a28      	ldr	r2, [pc, #160]	; (8009c44 <TIM_OC2_SetConfig+0x100>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d003      	beq.n	8009bb0 <TIM_OC2_SetConfig+0x6c>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a27      	ldr	r2, [pc, #156]	; (8009c48 <TIM_OC2_SetConfig+0x104>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d10d      	bne.n	8009bcc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	011b      	lsls	r3, r3, #4
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a1d      	ldr	r2, [pc, #116]	; (8009c44 <TIM_OC2_SetConfig+0x100>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d00f      	beq.n	8009bf4 <TIM_OC2_SetConfig+0xb0>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a1c      	ldr	r2, [pc, #112]	; (8009c48 <TIM_OC2_SetConfig+0x104>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d00b      	beq.n	8009bf4 <TIM_OC2_SetConfig+0xb0>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a1b      	ldr	r2, [pc, #108]	; (8009c4c <TIM_OC2_SetConfig+0x108>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d007      	beq.n	8009bf4 <TIM_OC2_SetConfig+0xb0>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a1a      	ldr	r2, [pc, #104]	; (8009c50 <TIM_OC2_SetConfig+0x10c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d003      	beq.n	8009bf4 <TIM_OC2_SetConfig+0xb0>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a19      	ldr	r2, [pc, #100]	; (8009c54 <TIM_OC2_SetConfig+0x110>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d113      	bne.n	8009c1c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	693a      	ldr	r2, [r7, #16]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	693a      	ldr	r2, [r7, #16]
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	693a      	ldr	r2, [r7, #16]
 8009c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	697a      	ldr	r2, [r7, #20]
 8009c34:	621a      	str	r2, [r3, #32]
}
 8009c36:	bf00      	nop
 8009c38:	371c      	adds	r7, #28
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	40012c00 	.word	0x40012c00
 8009c48:	40013400 	.word	0x40013400
 8009c4c:	40014000 	.word	0x40014000
 8009c50:	40014400 	.word	0x40014400
 8009c54:	40014800 	.word	0x40014800

08009c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 0303 	bic.w	r3, r3, #3
 8009c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	697a      	ldr	r2, [r7, #20]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a27      	ldr	r2, [pc, #156]	; (8009d54 <TIM_OC3_SetConfig+0xfc>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d003      	beq.n	8009cc2 <TIM_OC3_SetConfig+0x6a>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a26      	ldr	r2, [pc, #152]	; (8009d58 <TIM_OC3_SetConfig+0x100>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d10d      	bne.n	8009cde <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	021b      	lsls	r3, r3, #8
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a1c      	ldr	r2, [pc, #112]	; (8009d54 <TIM_OC3_SetConfig+0xfc>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d00f      	beq.n	8009d06 <TIM_OC3_SetConfig+0xae>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a1b      	ldr	r2, [pc, #108]	; (8009d58 <TIM_OC3_SetConfig+0x100>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d00b      	beq.n	8009d06 <TIM_OC3_SetConfig+0xae>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a1a      	ldr	r2, [pc, #104]	; (8009d5c <TIM_OC3_SetConfig+0x104>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d007      	beq.n	8009d06 <TIM_OC3_SetConfig+0xae>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a19      	ldr	r2, [pc, #100]	; (8009d60 <TIM_OC3_SetConfig+0x108>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d003      	beq.n	8009d06 <TIM_OC3_SetConfig+0xae>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a18      	ldr	r2, [pc, #96]	; (8009d64 <TIM_OC3_SetConfig+0x10c>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d113      	bne.n	8009d2e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	695b      	ldr	r3, [r3, #20]
 8009d1a:	011b      	lsls	r3, r3, #4
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	621a      	str	r2, [r3, #32]
}
 8009d48:	bf00      	nop
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	40012c00 	.word	0x40012c00
 8009d58:	40013400 	.word	0x40013400
 8009d5c:	40014000 	.word	0x40014000
 8009d60:	40014400 	.word	0x40014400
 8009d64:	40014800 	.word	0x40014800

08009d68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	021b      	lsls	r3, r3, #8
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	031b      	lsls	r3, r3, #12
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a18      	ldr	r2, [pc, #96]	; (8009e28 <TIM_OC4_SetConfig+0xc0>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d00f      	beq.n	8009dec <TIM_OC4_SetConfig+0x84>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a17      	ldr	r2, [pc, #92]	; (8009e2c <TIM_OC4_SetConfig+0xc4>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d00b      	beq.n	8009dec <TIM_OC4_SetConfig+0x84>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a16      	ldr	r2, [pc, #88]	; (8009e30 <TIM_OC4_SetConfig+0xc8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d007      	beq.n	8009dec <TIM_OC4_SetConfig+0x84>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	4a15      	ldr	r2, [pc, #84]	; (8009e34 <TIM_OC4_SetConfig+0xcc>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d003      	beq.n	8009dec <TIM_OC4_SetConfig+0x84>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a14      	ldr	r2, [pc, #80]	; (8009e38 <TIM_OC4_SetConfig+0xd0>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d109      	bne.n	8009e00 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	019b      	lsls	r3, r3, #6
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	621a      	str	r2, [r3, #32]
}
 8009e1a:	bf00      	nop
 8009e1c:	371c      	adds	r7, #28
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	40012c00 	.word	0x40012c00
 8009e2c:	40013400 	.word	0x40013400
 8009e30:	40014000 	.word	0x40014000
 8009e34:	40014400 	.word	0x40014400
 8009e38:	40014800 	.word	0x40014800

08009e3c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a1b      	ldr	r3, [r3, #32]
 8009e4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68fa      	ldr	r2, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	689b      	ldr	r3, [r3, #8]
 8009e86:	041b      	lsls	r3, r3, #16
 8009e88:	693a      	ldr	r2, [r7, #16]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a17      	ldr	r2, [pc, #92]	; (8009ef0 <TIM_OC5_SetConfig+0xb4>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d00f      	beq.n	8009eb6 <TIM_OC5_SetConfig+0x7a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a16      	ldr	r2, [pc, #88]	; (8009ef4 <TIM_OC5_SetConfig+0xb8>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d00b      	beq.n	8009eb6 <TIM_OC5_SetConfig+0x7a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a15      	ldr	r2, [pc, #84]	; (8009ef8 <TIM_OC5_SetConfig+0xbc>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d007      	beq.n	8009eb6 <TIM_OC5_SetConfig+0x7a>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a14      	ldr	r2, [pc, #80]	; (8009efc <TIM_OC5_SetConfig+0xc0>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d003      	beq.n	8009eb6 <TIM_OC5_SetConfig+0x7a>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	4a13      	ldr	r2, [pc, #76]	; (8009f00 <TIM_OC5_SetConfig+0xc4>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d109      	bne.n	8009eca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	695b      	ldr	r3, [r3, #20]
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	697a      	ldr	r2, [r7, #20]
 8009ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	621a      	str	r2, [r3, #32]
}
 8009ee4:	bf00      	nop
 8009ee6:	371c      	adds	r7, #28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr
 8009ef0:	40012c00 	.word	0x40012c00
 8009ef4:	40013400 	.word	0x40013400
 8009ef8:	40014000 	.word	0x40014000
 8009efc:	40014400 	.word	0x40014400
 8009f00:	40014800 	.word	0x40014800

08009f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b087      	sub	sp, #28
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
 8009f18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	021b      	lsls	r3, r3, #8
 8009f3e:	68fa      	ldr	r2, [r7, #12]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	051b      	lsls	r3, r3, #20
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a18      	ldr	r2, [pc, #96]	; (8009fbc <TIM_OC6_SetConfig+0xb8>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d00f      	beq.n	8009f80 <TIM_OC6_SetConfig+0x7c>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a17      	ldr	r2, [pc, #92]	; (8009fc0 <TIM_OC6_SetConfig+0xbc>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00b      	beq.n	8009f80 <TIM_OC6_SetConfig+0x7c>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a16      	ldr	r2, [pc, #88]	; (8009fc4 <TIM_OC6_SetConfig+0xc0>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d007      	beq.n	8009f80 <TIM_OC6_SetConfig+0x7c>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a15      	ldr	r2, [pc, #84]	; (8009fc8 <TIM_OC6_SetConfig+0xc4>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d003      	beq.n	8009f80 <TIM_OC6_SetConfig+0x7c>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	4a14      	ldr	r2, [pc, #80]	; (8009fcc <TIM_OC6_SetConfig+0xc8>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d109      	bne.n	8009f94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	029b      	lsls	r3, r3, #10
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	4313      	orrs	r3, r2
 8009f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	697a      	ldr	r2, [r7, #20]
 8009f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	621a      	str	r2, [r3, #32]
}
 8009fae:	bf00      	nop
 8009fb0:	371c      	adds	r7, #28
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop
 8009fbc:	40012c00 	.word	0x40012c00
 8009fc0:	40013400 	.word	0x40013400
 8009fc4:	40014000 	.word	0x40014000
 8009fc8:	40014400 	.word	0x40014400
 8009fcc:	40014800 	.word	0x40014800

08009fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d101      	bne.n	8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fe4:	2302      	movs	r3, #2
 8009fe6:	e068      	b.n	800a0ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2201      	movs	r2, #1
 8009fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a2e      	ldr	r2, [pc, #184]	; (800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d004      	beq.n	800a01c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a2d      	ldr	r2, [pc, #180]	; (800a0cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d108      	bne.n	800a02e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a022:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	68fa      	ldr	r2, [r7, #12]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a034:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68fa      	ldr	r2, [r7, #12]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a1e      	ldr	r2, [pc, #120]	; (800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d01d      	beq.n	800a08e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a05a:	d018      	beq.n	800a08e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a1b      	ldr	r2, [pc, #108]	; (800a0d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d013      	beq.n	800a08e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a1a      	ldr	r2, [pc, #104]	; (800a0d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d00e      	beq.n	800a08e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a18      	ldr	r2, [pc, #96]	; (800a0d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d009      	beq.n	800a08e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a13      	ldr	r2, [pc, #76]	; (800a0cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d004      	beq.n	800a08e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a14      	ldr	r2, [pc, #80]	; (800a0dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d10c      	bne.n	800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a094:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	68ba      	ldr	r2, [r7, #8]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68ba      	ldr	r2, [r7, #8]
 800a0a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3714      	adds	r7, #20
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
 800a0c6:	bf00      	nop
 800a0c8:	40012c00 	.word	0x40012c00
 800a0cc:	40013400 	.word	0x40013400
 800a0d0:	40000400 	.word	0x40000400
 800a0d4:	40000800 	.word	0x40000800
 800a0d8:	40000c00 	.word	0x40000c00
 800a0dc:	40014000 	.word	0x40014000

0800a0e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d101      	bne.n	800a0fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e065      	b.n	800a1c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	4313      	orrs	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	4313      	orrs	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4313      	orrs	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	4313      	orrs	r3, r2
 800a148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	695b      	ldr	r3, [r3, #20]
 800a154:	4313      	orrs	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	4313      	orrs	r3, r2
 800a164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	041b      	lsls	r3, r3, #16
 800a172:	4313      	orrs	r3, r2
 800a174:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a16      	ldr	r2, [pc, #88]	; (800a1d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d004      	beq.n	800a18a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a14      	ldr	r2, [pc, #80]	; (800a1d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d115      	bne.n	800a1b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a194:	051b      	lsls	r3, r3, #20
 800a196:	4313      	orrs	r3, r2
 800a198:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr
 800a1d4:	40012c00 	.word	0x40012c00
 800a1d8:	40013400 	.word	0x40013400

0800a1dc <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800a1dc:	b480      	push	{r7}
 800a1de:	b08b      	sub	sp, #44	; 0x2c
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d101      	bne.n	800a1fc <HAL_TIMEx_ConfigBreakInput+0x20>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	e0af      	b.n	800a35c <HAL_TIMEx_ConfigBreakInput+0x180>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3b01      	subs	r3, #1
 800a20a:	2b07      	cmp	r3, #7
 800a20c:	d83a      	bhi.n	800a284 <HAL_TIMEx_ConfigBreakInput+0xa8>
 800a20e:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <HAL_TIMEx_ConfigBreakInput+0x38>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a235 	.word	0x0800a235
 800a218:	0800a249 	.word	0x0800a249
 800a21c:	0800a285 	.word	0x0800a285
 800a220:	0800a25d 	.word	0x0800a25d
 800a224:	0800a285 	.word	0x0800a285
 800a228:	0800a285 	.word	0x0800a285
 800a22c:	0800a285 	.word	0x0800a285
 800a230:	0800a271 	.word	0x0800a271
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800a234:	2301      	movs	r3, #1
 800a236:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800a238:	2300      	movs	r3, #0
 800a23a:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800a23c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a240:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800a242:	2309      	movs	r3, #9
 800a244:	613b      	str	r3, [r7, #16]
      break;
 800a246:	e026      	b.n	800a296 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800a248:	2302      	movs	r3, #2
 800a24a:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800a24c:	2301      	movs	r3, #1
 800a24e:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800a250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a254:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800a256:	230a      	movs	r3, #10
 800a258:	613b      	str	r3, [r7, #16]
      break;
 800a25a:	e01c      	b.n	800a296 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800a25c:	2304      	movs	r3, #4
 800a25e:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800a260:	2302      	movs	r3, #2
 800a262:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800a264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a268:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800a26a:	230b      	movs	r3, #11
 800a26c:	613b      	str	r3, [r7, #16]
      break;
 800a26e:	e012      	b.n	800a296 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800a270:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a274:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800a276:	2308      	movs	r3, #8
 800a278:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800a27e:	2300      	movs	r3, #0
 800a280:	613b      	str	r3, [r7, #16]
      break;
 800a282:	e008      	b.n	800a296 <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800a284:	2300      	movs	r3, #0
 800a286:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800a290:	2300      	movs	r3, #0
 800a292:	613b      	str	r3, [r7, #16]
      break;
 800a294:	bf00      	nop
    }
  }

  switch (BreakInput)
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d003      	beq.n	800a2a4 <HAL_TIMEx_ConfigBreakInput+0xc8>
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d029      	beq.n	800a2f6 <HAL_TIMEx_ConfigBreakInput+0x11a>
 800a2a2:	e051      	b.n	800a348 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2aa:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	43db      	mvns	r3, r3
 800a2b0:	6a3a      	ldr	r2, [r7, #32]
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	409a      	lsls	r2, r3
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	6a3a      	ldr	r2, [r7, #32]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b08      	cmp	r3, #8
 800a2ce:	d00d      	beq.n	800a2ec <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	43db      	mvns	r3, r3
 800a2d4:	6a3a      	ldr	r2, [r7, #32]
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	689a      	ldr	r2, [r3, #8]
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	409a      	lsls	r2, r3
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	6a3a      	ldr	r2, [r7, #32]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6a3a      	ldr	r2, [r7, #32]
 800a2f2:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800a2f4:	e02c      	b.n	800a350 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2fc:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	43db      	mvns	r3, r3
 800a302:	6a3a      	ldr	r2, [r7, #32]
 800a304:	4013      	ands	r3, r2
 800a306:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	409a      	lsls	r2, r3
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	4013      	ands	r3, r2
 800a314:	6a3a      	ldr	r2, [r7, #32]
 800a316:	4313      	orrs	r3, r2
 800a318:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b08      	cmp	r3, #8
 800a320:	d00d      	beq.n	800a33e <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	43db      	mvns	r3, r3
 800a326:	6a3a      	ldr	r2, [r7, #32]
 800a328:	4013      	ands	r3, r2
 800a32a:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689a      	ldr	r2, [r3, #8]
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	409a      	lsls	r2, r3
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	4013      	ands	r3, r2
 800a338:	6a3a      	ldr	r2, [r7, #32]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6a3a      	ldr	r2, [r7, #32]
 800a344:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800a346:	e003      	b.n	800a350 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800a34e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	372c      	adds	r7, #44	; 0x2c
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e042      	b.n	800a400 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f7f7 fdc5 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2224      	movs	r2, #36	; 0x24
 800a396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f022 0201 	bic.w	r2, r2, #1
 800a3a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 fb24 	bl	800aa00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f825 	bl	800a408 <UART_SetConfig>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d101      	bne.n	800a3c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	e01b      	b.n	800a400 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	685a      	ldr	r2, [r3, #4]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a3d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689a      	ldr	r2, [r3, #8]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a3e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0201 	orr.w	r2, r2, #1
 800a3f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fba3 	bl	800ab44 <UART_CheckIdleState>
 800a3fe:	4603      	mov	r3, r0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a40c:	b08c      	sub	sp, #48	; 0x30
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	689a      	ldr	r2, [r3, #8]
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	431a      	orrs	r2, r3
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	431a      	orrs	r2, r3
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	4baa      	ldr	r3, [pc, #680]	; (800a6e0 <UART_SetConfig+0x2d8>)
 800a438:	4013      	ands	r3, r2
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	6812      	ldr	r2, [r2, #0]
 800a43e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a440:	430b      	orrs	r3, r1
 800a442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	68da      	ldr	r2, [r3, #12]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a9f      	ldr	r2, [pc, #636]	; (800a6e4 <UART_SetConfig+0x2dc>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d004      	beq.n	800a474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a470:	4313      	orrs	r3, r2
 800a472:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a47e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	6812      	ldr	r2, [r2, #0]
 800a486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a488:	430b      	orrs	r3, r1
 800a48a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a492:	f023 010f 	bic.w	r1, r3, #15
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a90      	ldr	r2, [pc, #576]	; (800a6e8 <UART_SetConfig+0x2e0>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d125      	bne.n	800a4f8 <UART_SetConfig+0xf0>
 800a4ac:	4b8f      	ldr	r3, [pc, #572]	; (800a6ec <UART_SetConfig+0x2e4>)
 800a4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4b2:	f003 0303 	and.w	r3, r3, #3
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d81a      	bhi.n	800a4f0 <UART_SetConfig+0xe8>
 800a4ba:	a201      	add	r2, pc, #4	; (adr r2, 800a4c0 <UART_SetConfig+0xb8>)
 800a4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c0:	0800a4d1 	.word	0x0800a4d1
 800a4c4:	0800a4e1 	.word	0x0800a4e1
 800a4c8:	0800a4d9 	.word	0x0800a4d9
 800a4cc:	0800a4e9 	.word	0x0800a4e9
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4d6:	e116      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a4d8:	2302      	movs	r3, #2
 800a4da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4de:	e112      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a4e0:	2304      	movs	r3, #4
 800a4e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4e6:	e10e      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a4e8:	2308      	movs	r3, #8
 800a4ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4ee:	e10a      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a4f0:	2310      	movs	r3, #16
 800a4f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a4f6:	e106      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a7c      	ldr	r2, [pc, #496]	; (800a6f0 <UART_SetConfig+0x2e8>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d138      	bne.n	800a574 <UART_SetConfig+0x16c>
 800a502:	4b7a      	ldr	r3, [pc, #488]	; (800a6ec <UART_SetConfig+0x2e4>)
 800a504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a508:	f003 030c 	and.w	r3, r3, #12
 800a50c:	2b0c      	cmp	r3, #12
 800a50e:	d82d      	bhi.n	800a56c <UART_SetConfig+0x164>
 800a510:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <UART_SetConfig+0x110>)
 800a512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a516:	bf00      	nop
 800a518:	0800a54d 	.word	0x0800a54d
 800a51c:	0800a56d 	.word	0x0800a56d
 800a520:	0800a56d 	.word	0x0800a56d
 800a524:	0800a56d 	.word	0x0800a56d
 800a528:	0800a55d 	.word	0x0800a55d
 800a52c:	0800a56d 	.word	0x0800a56d
 800a530:	0800a56d 	.word	0x0800a56d
 800a534:	0800a56d 	.word	0x0800a56d
 800a538:	0800a555 	.word	0x0800a555
 800a53c:	0800a56d 	.word	0x0800a56d
 800a540:	0800a56d 	.word	0x0800a56d
 800a544:	0800a56d 	.word	0x0800a56d
 800a548:	0800a565 	.word	0x0800a565
 800a54c:	2300      	movs	r3, #0
 800a54e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a552:	e0d8      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a554:	2302      	movs	r3, #2
 800a556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a55a:	e0d4      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a55c:	2304      	movs	r3, #4
 800a55e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a562:	e0d0      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a564:	2308      	movs	r3, #8
 800a566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a56a:	e0cc      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a56c:	2310      	movs	r3, #16
 800a56e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a572:	e0c8      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a5e      	ldr	r2, [pc, #376]	; (800a6f4 <UART_SetConfig+0x2ec>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d125      	bne.n	800a5ca <UART_SetConfig+0x1c2>
 800a57e:	4b5b      	ldr	r3, [pc, #364]	; (800a6ec <UART_SetConfig+0x2e4>)
 800a580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a584:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a588:	2b30      	cmp	r3, #48	; 0x30
 800a58a:	d016      	beq.n	800a5ba <UART_SetConfig+0x1b2>
 800a58c:	2b30      	cmp	r3, #48	; 0x30
 800a58e:	d818      	bhi.n	800a5c2 <UART_SetConfig+0x1ba>
 800a590:	2b20      	cmp	r3, #32
 800a592:	d00a      	beq.n	800a5aa <UART_SetConfig+0x1a2>
 800a594:	2b20      	cmp	r3, #32
 800a596:	d814      	bhi.n	800a5c2 <UART_SetConfig+0x1ba>
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <UART_SetConfig+0x19a>
 800a59c:	2b10      	cmp	r3, #16
 800a59e:	d008      	beq.n	800a5b2 <UART_SetConfig+0x1aa>
 800a5a0:	e00f      	b.n	800a5c2 <UART_SetConfig+0x1ba>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5a8:	e0ad      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5b0:	e0a9      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a5b2:	2304      	movs	r3, #4
 800a5b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5b8:	e0a5      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a5ba:	2308      	movs	r3, #8
 800a5bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5c0:	e0a1      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a5c2:	2310      	movs	r3, #16
 800a5c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5c8:	e09d      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a4a      	ldr	r2, [pc, #296]	; (800a6f8 <UART_SetConfig+0x2f0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d125      	bne.n	800a620 <UART_SetConfig+0x218>
 800a5d4:	4b45      	ldr	r3, [pc, #276]	; (800a6ec <UART_SetConfig+0x2e4>)
 800a5d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5de:	2bc0      	cmp	r3, #192	; 0xc0
 800a5e0:	d016      	beq.n	800a610 <UART_SetConfig+0x208>
 800a5e2:	2bc0      	cmp	r3, #192	; 0xc0
 800a5e4:	d818      	bhi.n	800a618 <UART_SetConfig+0x210>
 800a5e6:	2b80      	cmp	r3, #128	; 0x80
 800a5e8:	d00a      	beq.n	800a600 <UART_SetConfig+0x1f8>
 800a5ea:	2b80      	cmp	r3, #128	; 0x80
 800a5ec:	d814      	bhi.n	800a618 <UART_SetConfig+0x210>
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d002      	beq.n	800a5f8 <UART_SetConfig+0x1f0>
 800a5f2:	2b40      	cmp	r3, #64	; 0x40
 800a5f4:	d008      	beq.n	800a608 <UART_SetConfig+0x200>
 800a5f6:	e00f      	b.n	800a618 <UART_SetConfig+0x210>
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a5fe:	e082      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a600:	2302      	movs	r3, #2
 800a602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a606:	e07e      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a608:	2304      	movs	r3, #4
 800a60a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a60e:	e07a      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a610:	2308      	movs	r3, #8
 800a612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a616:	e076      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a618:	2310      	movs	r3, #16
 800a61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a61e:	e072      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a35      	ldr	r2, [pc, #212]	; (800a6fc <UART_SetConfig+0x2f4>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d12a      	bne.n	800a680 <UART_SetConfig+0x278>
 800a62a:	4b30      	ldr	r3, [pc, #192]	; (800a6ec <UART_SetConfig+0x2e4>)
 800a62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a638:	d01a      	beq.n	800a670 <UART_SetConfig+0x268>
 800a63a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a63e:	d81b      	bhi.n	800a678 <UART_SetConfig+0x270>
 800a640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a644:	d00c      	beq.n	800a660 <UART_SetConfig+0x258>
 800a646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a64a:	d815      	bhi.n	800a678 <UART_SetConfig+0x270>
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <UART_SetConfig+0x250>
 800a650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a654:	d008      	beq.n	800a668 <UART_SetConfig+0x260>
 800a656:	e00f      	b.n	800a678 <UART_SetConfig+0x270>
 800a658:	2300      	movs	r3, #0
 800a65a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a65e:	e052      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a660:	2302      	movs	r3, #2
 800a662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a666:	e04e      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a668:	2304      	movs	r3, #4
 800a66a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a66e:	e04a      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a670:	2308      	movs	r3, #8
 800a672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a676:	e046      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a678:	2310      	movs	r3, #16
 800a67a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a67e:	e042      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a17      	ldr	r2, [pc, #92]	; (800a6e4 <UART_SetConfig+0x2dc>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d13a      	bne.n	800a700 <UART_SetConfig+0x2f8>
 800a68a:	4b18      	ldr	r3, [pc, #96]	; (800a6ec <UART_SetConfig+0x2e4>)
 800a68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a690:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a698:	d01a      	beq.n	800a6d0 <UART_SetConfig+0x2c8>
 800a69a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a69e:	d81b      	bhi.n	800a6d8 <UART_SetConfig+0x2d0>
 800a6a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6a4:	d00c      	beq.n	800a6c0 <UART_SetConfig+0x2b8>
 800a6a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6aa:	d815      	bhi.n	800a6d8 <UART_SetConfig+0x2d0>
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d003      	beq.n	800a6b8 <UART_SetConfig+0x2b0>
 800a6b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6b4:	d008      	beq.n	800a6c8 <UART_SetConfig+0x2c0>
 800a6b6:	e00f      	b.n	800a6d8 <UART_SetConfig+0x2d0>
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6be:	e022      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a6c0:	2302      	movs	r3, #2
 800a6c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6c6:	e01e      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a6c8:	2304      	movs	r3, #4
 800a6ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6ce:	e01a      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a6d0:	2308      	movs	r3, #8
 800a6d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6d6:	e016      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a6d8:	2310      	movs	r3, #16
 800a6da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a6de:	e012      	b.n	800a706 <UART_SetConfig+0x2fe>
 800a6e0:	cfff69f3 	.word	0xcfff69f3
 800a6e4:	40008000 	.word	0x40008000
 800a6e8:	40013800 	.word	0x40013800
 800a6ec:	40021000 	.word	0x40021000
 800a6f0:	40004400 	.word	0x40004400
 800a6f4:	40004800 	.word	0x40004800
 800a6f8:	40004c00 	.word	0x40004c00
 800a6fc:	40005000 	.word	0x40005000
 800a700:	2310      	movs	r3, #16
 800a702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4aae      	ldr	r2, [pc, #696]	; (800a9c4 <UART_SetConfig+0x5bc>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	f040 8097 	bne.w	800a840 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a716:	2b08      	cmp	r3, #8
 800a718:	d823      	bhi.n	800a762 <UART_SetConfig+0x35a>
 800a71a:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <UART_SetConfig+0x318>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a745 	.word	0x0800a745
 800a724:	0800a763 	.word	0x0800a763
 800a728:	0800a74d 	.word	0x0800a74d
 800a72c:	0800a763 	.word	0x0800a763
 800a730:	0800a753 	.word	0x0800a753
 800a734:	0800a763 	.word	0x0800a763
 800a738:	0800a763 	.word	0x0800a763
 800a73c:	0800a763 	.word	0x0800a763
 800a740:	0800a75b 	.word	0x0800a75b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a744:	f7fc f91a 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 800a748:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a74a:	e010      	b.n	800a76e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a74c:	4b9e      	ldr	r3, [pc, #632]	; (800a9c8 <UART_SetConfig+0x5c0>)
 800a74e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a750:	e00d      	b.n	800a76e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a752:	f7fc f87b 	bl	800684c <HAL_RCC_GetSysClockFreq>
 800a756:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a758:	e009      	b.n	800a76e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a75a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a75e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a760:	e005      	b.n	800a76e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a762:	2300      	movs	r3, #0
 800a764:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a76c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	f000 8130 	beq.w	800a9d6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77a:	4a94      	ldr	r2, [pc, #592]	; (800a9cc <UART_SetConfig+0x5c4>)
 800a77c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a780:	461a      	mov	r2, r3
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	fbb3 f3f2 	udiv	r3, r3, r2
 800a788:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	685a      	ldr	r2, [r3, #4]
 800a78e:	4613      	mov	r3, r2
 800a790:	005b      	lsls	r3, r3, #1
 800a792:	4413      	add	r3, r2
 800a794:	69ba      	ldr	r2, [r7, #24]
 800a796:	429a      	cmp	r2, r3
 800a798:	d305      	bcc.n	800a7a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d903      	bls.n	800a7ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a7ac:	e113      	b.n	800a9d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	60bb      	str	r3, [r7, #8]
 800a7b4:	60fa      	str	r2, [r7, #12]
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ba:	4a84      	ldr	r2, [pc, #528]	; (800a9cc <UART_SetConfig+0x5c4>)
 800a7bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7c0:	b29b      	uxth	r3, r3
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	603b      	str	r3, [r7, #0]
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7d0:	f7f5 fd14 	bl	80001fc <__aeabi_uldivmod>
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4610      	mov	r0, r2
 800a7da:	4619      	mov	r1, r3
 800a7dc:	f04f 0200 	mov.w	r2, #0
 800a7e0:	f04f 0300 	mov.w	r3, #0
 800a7e4:	020b      	lsls	r3, r1, #8
 800a7e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7ea:	0202      	lsls	r2, r0, #8
 800a7ec:	6979      	ldr	r1, [r7, #20]
 800a7ee:	6849      	ldr	r1, [r1, #4]
 800a7f0:	0849      	lsrs	r1, r1, #1
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	4605      	mov	r5, r0
 800a7f8:	eb12 0804 	adds.w	r8, r2, r4
 800a7fc:	eb43 0905 	adc.w	r9, r3, r5
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	469a      	mov	sl, r3
 800a808:	4693      	mov	fp, r2
 800a80a:	4652      	mov	r2, sl
 800a80c:	465b      	mov	r3, fp
 800a80e:	4640      	mov	r0, r8
 800a810:	4649      	mov	r1, r9
 800a812:	f7f5 fcf3 	bl	80001fc <__aeabi_uldivmod>
 800a816:	4602      	mov	r2, r0
 800a818:	460b      	mov	r3, r1
 800a81a:	4613      	mov	r3, r2
 800a81c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a824:	d308      	bcc.n	800a838 <UART_SetConfig+0x430>
 800a826:	6a3b      	ldr	r3, [r7, #32]
 800a828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a82c:	d204      	bcs.n	800a838 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	6a3a      	ldr	r2, [r7, #32]
 800a834:	60da      	str	r2, [r3, #12]
 800a836:	e0ce      	b.n	800a9d6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a83e:	e0ca      	b.n	800a9d6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	69db      	ldr	r3, [r3, #28]
 800a844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a848:	d166      	bne.n	800a918 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a84a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a84e:	2b08      	cmp	r3, #8
 800a850:	d827      	bhi.n	800a8a2 <UART_SetConfig+0x49a>
 800a852:	a201      	add	r2, pc, #4	; (adr r2, 800a858 <UART_SetConfig+0x450>)
 800a854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a858:	0800a87d 	.word	0x0800a87d
 800a85c:	0800a885 	.word	0x0800a885
 800a860:	0800a88d 	.word	0x0800a88d
 800a864:	0800a8a3 	.word	0x0800a8a3
 800a868:	0800a893 	.word	0x0800a893
 800a86c:	0800a8a3 	.word	0x0800a8a3
 800a870:	0800a8a3 	.word	0x0800a8a3
 800a874:	0800a8a3 	.word	0x0800a8a3
 800a878:	0800a89b 	.word	0x0800a89b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a87c:	f7fc f87e 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 800a880:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a882:	e014      	b.n	800a8ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a884:	f7fc f890 	bl	80069a8 <HAL_RCC_GetPCLK2Freq>
 800a888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a88a:	e010      	b.n	800a8ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a88c:	4b4e      	ldr	r3, [pc, #312]	; (800a9c8 <UART_SetConfig+0x5c0>)
 800a88e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a890:	e00d      	b.n	800a8ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a892:	f7fb ffdb 	bl	800684c <HAL_RCC_GetSysClockFreq>
 800a896:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a898:	e009      	b.n	800a8ae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a89a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a89e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a8a0:	e005      	b.n	800a8ae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a8ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	f000 8090 	beq.w	800a9d6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ba:	4a44      	ldr	r2, [pc, #272]	; (800a9cc <UART_SetConfig+0x5c4>)
 800a8bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8c8:	005a      	lsls	r2, r3, #1
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	085b      	lsrs	r3, r3, #1
 800a8d0:	441a      	add	r2, r3
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8da:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	2b0f      	cmp	r3, #15
 800a8e0:	d916      	bls.n	800a910 <UART_SetConfig+0x508>
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e8:	d212      	bcs.n	800a910 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	f023 030f 	bic.w	r3, r3, #15
 800a8f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	085b      	lsrs	r3, r3, #1
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	f003 0307 	and.w	r3, r3, #7
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	8bfb      	ldrh	r3, [r7, #30]
 800a902:	4313      	orrs	r3, r2
 800a904:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	8bfa      	ldrh	r2, [r7, #30]
 800a90c:	60da      	str	r2, [r3, #12]
 800a90e:	e062      	b.n	800a9d6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a916:	e05e      	b.n	800a9d6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a918:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a91c:	2b08      	cmp	r3, #8
 800a91e:	d828      	bhi.n	800a972 <UART_SetConfig+0x56a>
 800a920:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <UART_SetConfig+0x520>)
 800a922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a926:	bf00      	nop
 800a928:	0800a94d 	.word	0x0800a94d
 800a92c:	0800a955 	.word	0x0800a955
 800a930:	0800a95d 	.word	0x0800a95d
 800a934:	0800a973 	.word	0x0800a973
 800a938:	0800a963 	.word	0x0800a963
 800a93c:	0800a973 	.word	0x0800a973
 800a940:	0800a973 	.word	0x0800a973
 800a944:	0800a973 	.word	0x0800a973
 800a948:	0800a96b 	.word	0x0800a96b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a94c:	f7fc f816 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 800a950:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a952:	e014      	b.n	800a97e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a954:	f7fc f828 	bl	80069a8 <HAL_RCC_GetPCLK2Freq>
 800a958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a95a:	e010      	b.n	800a97e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a95c:	4b1a      	ldr	r3, [pc, #104]	; (800a9c8 <UART_SetConfig+0x5c0>)
 800a95e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a960:	e00d      	b.n	800a97e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a962:	f7fb ff73 	bl	800684c <HAL_RCC_GetSysClockFreq>
 800a966:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a968:	e009      	b.n	800a97e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a96a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a96e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a970:	e005      	b.n	800a97e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a972:	2300      	movs	r3, #0
 800a974:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a97c:	bf00      	nop
    }

    if (pclk != 0U)
 800a97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a980:	2b00      	cmp	r3, #0
 800a982:	d028      	beq.n	800a9d6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a988:	4a10      	ldr	r2, [pc, #64]	; (800a9cc <UART_SetConfig+0x5c4>)
 800a98a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a98e:	461a      	mov	r2, r3
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	fbb3 f2f2 	udiv	r2, r3, r2
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	085b      	lsrs	r3, r3, #1
 800a99c:	441a      	add	r2, r3
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9a6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9a8:	6a3b      	ldr	r3, [r7, #32]
 800a9aa:	2b0f      	cmp	r3, #15
 800a9ac:	d910      	bls.n	800a9d0 <UART_SetConfig+0x5c8>
 800a9ae:	6a3b      	ldr	r3, [r7, #32]
 800a9b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9b4:	d20c      	bcs.n	800a9d0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	60da      	str	r2, [r3, #12]
 800a9c0:	e009      	b.n	800a9d6 <UART_SetConfig+0x5ce>
 800a9c2:	bf00      	nop
 800a9c4:	40008000 	.word	0x40008000
 800a9c8:	00f42400 	.word	0x00f42400
 800a9cc:	0800c578 	.word	0x0800c578
      }
      else
      {
        ret = HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a9f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3730      	adds	r7, #48	; 0x30
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800aa00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0c:	f003 0308 	and.w	r3, r3, #8
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00a      	beq.n	800aa2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	430a      	orrs	r2, r1
 800aa28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00a      	beq.n	800aa4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	430a      	orrs	r2, r1
 800aa4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	f003 0302 	and.w	r3, r3, #2
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00a      	beq.n	800aa6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa72:	f003 0304 	and.w	r3, r3, #4
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00a      	beq.n	800aa90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa94:	f003 0310 	and.w	r3, r3, #16
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00a      	beq.n	800aab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	430a      	orrs	r2, r1
 800aab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00a      	beq.n	800aad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d01a      	beq.n	800ab16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aafe:	d10a      	bne.n	800ab16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	605a      	str	r2, [r3, #4]
  }
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b098      	sub	sp, #96	; 0x60
 800ab48:	af02      	add	r7, sp, #8
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab54:	f7f9 fc0a 	bl	800436c <HAL_GetTick>
 800ab58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0308 	and.w	r3, r3, #8
 800ab64:	2b08      	cmp	r3, #8
 800ab66:	d12f      	bne.n	800abc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab70:	2200      	movs	r2, #0
 800ab72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f88e 	bl	800ac98 <UART_WaitOnFlagUntilTimeout>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d022      	beq.n	800abc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8a:	e853 3f00 	ldrex	r3, [r3]
 800ab8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab96:	653b      	str	r3, [r7, #80]	; 0x50
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba0:	647b      	str	r3, [r7, #68]	; 0x44
 800aba2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aba8:	e841 2300 	strex	r3, r2, [r1]
 800abac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1e6      	bne.n	800ab82 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e063      	b.n	800ac90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0304 	and.w	r3, r3, #4
 800abd2:	2b04      	cmp	r3, #4
 800abd4:	d149      	bne.n	800ac6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abde:	2200      	movs	r2, #0
 800abe0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f857 	bl	800ac98 <UART_WaitOnFlagUntilTimeout>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d03c      	beq.n	800ac6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf8:	e853 3f00 	ldrex	r3, [r3]
 800abfc:	623b      	str	r3, [r7, #32]
   return(result);
 800abfe:	6a3b      	ldr	r3, [r7, #32]
 800ac00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac0e:	633b      	str	r3, [r7, #48]	; 0x30
 800ac10:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac16:	e841 2300 	strex	r3, r2, [r1]
 800ac1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1e6      	bne.n	800abf0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3308      	adds	r3, #8
 800ac28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f023 0301 	bic.w	r3, r3, #1
 800ac38:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac42:	61fa      	str	r2, [r7, #28]
 800ac44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac46:	69b9      	ldr	r1, [r7, #24]
 800ac48:	69fa      	ldr	r2, [r7, #28]
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	617b      	str	r3, [r7, #20]
   return(result);
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1e5      	bne.n	800ac22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2220      	movs	r2, #32
 800ac5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e012      	b.n	800ac90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2220      	movs	r2, #32
 800ac76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3758      	adds	r7, #88	; 0x58
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	603b      	str	r3, [r7, #0]
 800aca4:	4613      	mov	r3, r2
 800aca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aca8:	e049      	b.n	800ad3e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb0:	d045      	beq.n	800ad3e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acb2:	f7f9 fb5b 	bl	800436c <HAL_GetTick>
 800acb6:	4602      	mov	r2, r0
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	1ad3      	subs	r3, r2, r3
 800acbc:	69ba      	ldr	r2, [r7, #24]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d302      	bcc.n	800acc8 <UART_WaitOnFlagUntilTimeout+0x30>
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d101      	bne.n	800accc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800acc8:	2303      	movs	r3, #3
 800acca:	e048      	b.n	800ad5e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0304 	and.w	r3, r3, #4
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d031      	beq.n	800ad3e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	f003 0308 	and.w	r3, r3, #8
 800ace4:	2b08      	cmp	r3, #8
 800ace6:	d110      	bne.n	800ad0a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2208      	movs	r2, #8
 800acee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 f838 	bl	800ad66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2208      	movs	r2, #8
 800acfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	e029      	b.n	800ad5e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	69db      	ldr	r3, [r3, #28]
 800ad10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad18:	d111      	bne.n	800ad3e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad24:	68f8      	ldr	r0, [r7, #12]
 800ad26:	f000 f81e 	bl	800ad66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2220      	movs	r2, #32
 800ad2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	e00f      	b.n	800ad5e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	69da      	ldr	r2, [r3, #28]
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	4013      	ands	r3, r2
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	bf0c      	ite	eq
 800ad4e:	2301      	moveq	r3, #1
 800ad50:	2300      	movne	r3, #0
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	461a      	mov	r2, r3
 800ad56:	79fb      	ldrb	r3, [r7, #7]
 800ad58:	429a      	cmp	r2, r3
 800ad5a:	d0a6      	beq.n	800acaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad5c:	2300      	movs	r3, #0
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad66:	b480      	push	{r7}
 800ad68:	b095      	sub	sp, #84	; 0x54
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad8c:	643b      	str	r3, [r7, #64]	; 0x40
 800ad8e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e6      	bne.n	800ad6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	3308      	adds	r3, #8
 800ada6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada8:	6a3b      	ldr	r3, [r7, #32]
 800adaa:	e853 3f00 	ldrex	r3, [r3]
 800adae:	61fb      	str	r3, [r7, #28]
   return(result);
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800adb6:	f023 0301 	bic.w	r3, r3, #1
 800adba:	64bb      	str	r3, [r7, #72]	; 0x48
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3308      	adds	r3, #8
 800adc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800adc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adcc:	e841 2300 	strex	r3, r2, [r1]
 800add0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1e3      	bne.n	800ada0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800addc:	2b01      	cmp	r3, #1
 800adde:	d118      	bne.n	800ae12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	e853 3f00 	ldrex	r3, [r3]
 800adec:	60bb      	str	r3, [r7, #8]
   return(result);
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	f023 0310 	bic.w	r3, r3, #16
 800adf4:	647b      	str	r3, [r7, #68]	; 0x44
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adfe:	61bb      	str	r3, [r7, #24]
 800ae00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae02:	6979      	ldr	r1, [r7, #20]
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	e841 2300 	strex	r3, r2, [r1]
 800ae0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d1e6      	bne.n	800ade0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2220      	movs	r2, #32
 800ae16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2200      	movs	r2, #0
 800ae24:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ae26:	bf00      	nop
 800ae28:	3754      	adds	r7, #84	; 0x54
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d101      	bne.n	800ae48 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae44:	2302      	movs	r3, #2
 800ae46:	e027      	b.n	800ae98 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2224      	movs	r2, #36	; 0x24
 800ae54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f022 0201 	bic.w	r2, r2, #1
 800ae6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2220      	movs	r2, #32
 800ae8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d101      	bne.n	800aebc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	e02d      	b.n	800af18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2224      	movs	r2, #36	; 0x24
 800aec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f022 0201 	bic.w	r2, r2, #1
 800aee2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	430a      	orrs	r2, r1
 800aef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f84f 	bl	800af9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2220      	movs	r2, #32
 800af0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800af30:	2b01      	cmp	r3, #1
 800af32:	d101      	bne.n	800af38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800af34:	2302      	movs	r3, #2
 800af36:	e02d      	b.n	800af94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2224      	movs	r2, #36	; 0x24
 800af44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0201 	bic.w	r2, r2, #1
 800af5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	683a      	ldr	r2, [r7, #0]
 800af70:	430a      	orrs	r2, r1
 800af72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f811 	bl	800af9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2220      	movs	r2, #32
 800af86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d108      	bne.n	800afbe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2201      	movs	r2, #1
 800afb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afbc:	e031      	b.n	800b022 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afbe:	2308      	movs	r3, #8
 800afc0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afc2:	2308      	movs	r3, #8
 800afc4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	0e5b      	lsrs	r3, r3, #25
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	f003 0307 	and.w	r3, r3, #7
 800afd4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	0f5b      	lsrs	r3, r3, #29
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	f003 0307 	and.w	r3, r3, #7
 800afe4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	7b3a      	ldrb	r2, [r7, #12]
 800afea:	4911      	ldr	r1, [pc, #68]	; (800b030 <UARTEx_SetNbDataToProcess+0x94>)
 800afec:	5c8a      	ldrb	r2, [r1, r2]
 800afee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aff2:	7b3a      	ldrb	r2, [r7, #12]
 800aff4:	490f      	ldr	r1, [pc, #60]	; (800b034 <UARTEx_SetNbDataToProcess+0x98>)
 800aff6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aff8:	fb93 f3f2 	sdiv	r3, r3, r2
 800affc:	b29a      	uxth	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	7b7a      	ldrb	r2, [r7, #13]
 800b008:	4909      	ldr	r1, [pc, #36]	; (800b030 <UARTEx_SetNbDataToProcess+0x94>)
 800b00a:	5c8a      	ldrb	r2, [r1, r2]
 800b00c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b010:	7b7a      	ldrb	r2, [r7, #13]
 800b012:	4908      	ldr	r1, [pc, #32]	; (800b034 <UARTEx_SetNbDataToProcess+0x98>)
 800b014:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b016:	fb93 f3f2 	sdiv	r3, r3, r2
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b022:	bf00      	nop
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	0800c590 	.word	0x0800c590
 800b034:	0800c598 	.word	0x0800c598

0800b038 <memset>:
 800b038:	4402      	add	r2, r0
 800b03a:	4603      	mov	r3, r0
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d100      	bne.n	800b042 <memset+0xa>
 800b040:	4770      	bx	lr
 800b042:	f803 1b01 	strb.w	r1, [r3], #1
 800b046:	e7f9      	b.n	800b03c <memset+0x4>

0800b048 <__libc_init_array>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	4d0d      	ldr	r5, [pc, #52]	; (800b080 <__libc_init_array+0x38>)
 800b04c:	4c0d      	ldr	r4, [pc, #52]	; (800b084 <__libc_init_array+0x3c>)
 800b04e:	1b64      	subs	r4, r4, r5
 800b050:	10a4      	asrs	r4, r4, #2
 800b052:	2600      	movs	r6, #0
 800b054:	42a6      	cmp	r6, r4
 800b056:	d109      	bne.n	800b06c <__libc_init_array+0x24>
 800b058:	4d0b      	ldr	r5, [pc, #44]	; (800b088 <__libc_init_array+0x40>)
 800b05a:	4c0c      	ldr	r4, [pc, #48]	; (800b08c <__libc_init_array+0x44>)
 800b05c:	f000 f818 	bl	800b090 <_init>
 800b060:	1b64      	subs	r4, r4, r5
 800b062:	10a4      	asrs	r4, r4, #2
 800b064:	2600      	movs	r6, #0
 800b066:	42a6      	cmp	r6, r4
 800b068:	d105      	bne.n	800b076 <__libc_init_array+0x2e>
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b070:	4798      	blx	r3
 800b072:	3601      	adds	r6, #1
 800b074:	e7ee      	b.n	800b054 <__libc_init_array+0xc>
 800b076:	f855 3b04 	ldr.w	r3, [r5], #4
 800b07a:	4798      	blx	r3
 800b07c:	3601      	adds	r6, #1
 800b07e:	e7f2      	b.n	800b066 <__libc_init_array+0x1e>
 800b080:	0800c5a8 	.word	0x0800c5a8
 800b084:	0800c5a8 	.word	0x0800c5a8
 800b088:	0800c5a8 	.word	0x0800c5a8
 800b08c:	0800c5ac 	.word	0x0800c5ac

0800b090 <_init>:
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b092:	bf00      	nop
 800b094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b096:	bc08      	pop	{r3}
 800b098:	469e      	mov	lr, r3
 800b09a:	4770      	bx	lr

0800b09c <_fini>:
 800b09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09e:	bf00      	nop
 800b0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a2:	bc08      	pop	{r3}
 800b0a4:	469e      	mov	lr, r3
 800b0a6:	4770      	bx	lr

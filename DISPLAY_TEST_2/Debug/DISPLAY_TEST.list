
DISPLAY_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f97c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005878  0800fb40  0800fb40  00010b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080153b8  080153b8  000171f4  2**0
                  CONTENTS
  4 .ARM          00000008  080153b8  080153b8  000163b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080153c0  080153c0  000171f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080153c0  080153c0  000163c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080153c4  080153c4  000163c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080153c8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  200001f4  080155bc  000171f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  080155bc  00017b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000171f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000242a1  00000000  00000000  00017224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ce  00000000  00000000  0003b4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b8  00000000  00000000  0003f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001997  00000000  00000000  00041850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030058  00000000  00000000  000431e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028145  00000000  00000000  0007323f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012af01  00000000  00000000  0009b384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c6285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a008  00000000  00000000  001c62c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  001d02d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800fb24 	.word	0x0800fb24

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	0800fb24 	.word	0x0800fb24

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <initTempHumSensor>:
#include "TempHumSensor.h"

// i2c handler
static I2C_HandleTypeDef* hi2c;

void initTempHumSensor(I2C_HandleTypeDef* hi2c_in) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	hi2c = hi2c_in;
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <initTempHumSensor+0x1c>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	20000210 	.word	0x20000210

08000ee8 <req_measurements>:

// send command to sensor
void req_measurements() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
	uint8_t buf[2] = {CMD_MSB, CMD_LSB};
 8000eee:	f640 532c 	movw	r3, #3372	@ 0xd2c
 8000ef2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c, SAD_W, buf, 2, 1000);
 8000ef4:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <req_measurements+0x28>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	1d3a      	adds	r2, r7, #4
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2302      	movs	r3, #2
 8000f02:	2188      	movs	r1, #136	@ 0x88
 8000f04:	f006 f87a 	bl	8006ffc <HAL_I2C_Master_Transmit>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000210 	.word	0x20000210

08000f14 <read_raw_measurements>:

// send read request to sensor
// sensor will pull clock down until measurements are done
TempHumRaw_t read_raw_measurements() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
	TempHumRaw_t data;
	uint8_t buf[4];
	HAL_I2C_Master_Receive(hi2c, SAD_R, buf, 4, 1000);
 8000f1a:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <read_raw_measurements+0x58>)
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	1d3a      	adds	r2, r7, #4
 8000f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2304      	movs	r3, #4
 8000f28:	2189      	movs	r1, #137	@ 0x89
 8000f2a:	f006 f97f 	bl	800722c <HAL_I2C_Master_Receive>
	data.temp = buf[0] << 8 | buf[1];
 8000f2e:	793b      	ldrb	r3, [r7, #4]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	797b      	ldrb	r3, [r7, #5]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	813b      	strh	r3, [r7, #8]
	data.hum = buf[2] << 8 | buf[3];
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	021b      	lsls	r3, r3, #8
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	817b      	strh	r3, [r7, #10]
	return data;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	2300      	movs	r3, #0
 8000f58:	89ba      	ldrh	r2, [r7, #12]
 8000f5a:	f362 030f 	bfi	r3, r2, #0, #16
 8000f5e:	89fa      	ldrh	r2, [r7, #14]
 8000f60:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000210 	.word	0x20000210

08000f70 <get_temp_hum>:

// get converted values
TempHum_t get_temp_hum() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
	TempHumRaw_t raw_data;
	TempHum_t conv_data;
	req_measurements();
 8000f76:	f7ff ffb7 	bl	8000ee8 <req_measurements>
	raw_data = read_raw_measurements();
 8000f7a:	f7ff ffcb 	bl	8000f14 <read_raw_measurements>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	617b      	str	r3, [r7, #20]
	int32_t casted_temp = (uint32_t)(raw_data.temp);
 8000f82:	8abb      	ldrh	r3, [r7, #20]
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t casted_hum = (uint32_t)(raw_data.hum);
 8000f86:	8afb      	ldrh	r3, [r7, #22]
 8000f88:	623b      	str	r3, [r7, #32]
	conv_data.temp = -45.0f + 315.0f * ((float)casted_temp/65535.0f);
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f8c:	ee07 3a90 	vmov	s15, r3
 8000f90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f94:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000ff8 <get_temp_hum+0x88>
 8000f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000ffc <get_temp_hum+0x8c>
 8000fa0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001000 <get_temp_hum+0x90>
 8000fa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fac:	edc7 7a03 	vstr	s15, [r7, #12]
	conv_data.hum = 100.0f * ((float)casted_hum/65535.0f);
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fba:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000ff8 <get_temp_hum+0x88>
 8000fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc2:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001004 <get_temp_hum+0x94>
 8000fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fca:	edc7 7a04 	vstr	s15, [r7, #16]
	return conv_data;
 8000fce:	f107 0318 	add.w	r3, r7, #24
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fda:	e883 0003 	stmia.w	r3, {r0, r1}
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	ee07 2a10 	vmov	s14, r2
 8000fe6:	ee07 3a90 	vmov	s15, r3
}
 8000fea:	eeb0 0a47 	vmov.f32	s0, s14
 8000fee:	eef0 0a67 	vmov.f32	s1, s15
 8000ff2:	3728      	adds	r7, #40	@ 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	477fff00 	.word	0x477fff00
 8000ffc:	439d8000 	.word	0x439d8000
 8001000:	42340000 	.word	0x42340000
 8001004:	42c80000 	.word	0x42c80000

08001008 <JOYSTICK_INIT>:

#include "joystick.h"

	//Write a byte value to a spot in the Joystick
	I2C_HandleTypeDef Hi2c1;
	void JOYSTICK_INIT(I2C_HandleTypeDef hi2c1){
 8001008:	b084      	sub	sp, #16
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
 800100e:	f107 0c08 	add.w	ip, r7, #8
 8001012:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		Hi2c1 = hi2c1;
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <JOYSTICK_INIT+0x2c>)
 8001018:	4618      	mov	r0, r3
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	2254      	movs	r2, #84	@ 0x54
 8001020:	4619      	mov	r1, r3
 8001022:	f00c fdc4 	bl	800dbae <memcpy>
	}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800102e:	b004      	add	sp, #16
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000218 	.word	0x20000218

08001038 <readRegister>:
      return(1);
  }

  //Reads from a given location from the Joystick
  uint8_t readRegister(uint8_t reg)
  {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af02      	add	r7, sp, #8
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	  uint8_t buf[10] = {reg};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	811a      	strh	r2, [r3, #8]
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	753b      	strb	r3, [r7, #20]
	  uint8_t buf0[10] = {};
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	809a      	strh	r2, [r3, #4]
	  ret = HAL_I2C_Master_Transmit(&Hi2c1, JOYSTICK_ADDRESS, &buf[0], 1, 1000);
 8001060:	f107 0214 	add.w	r2, r7, #20
 8001064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	2140      	movs	r1, #64	@ 0x40
 800106e:	4810      	ldr	r0, [pc, #64]	@ (80010b0 <readRegister+0x78>)
 8001070:	f005 ffc4 	bl	8006ffc <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <readRegister+0x7c>)
 800107a:	701a      	strb	r2, [r3, #0]
	  ret = HAL_I2C_Master_Receive(&Hi2c1, JOYSTICK_ADDRESS, &buf0[0], 1, 1000);
 800107c:	f107 0208 	add.w	r2, r7, #8
 8001080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2301      	movs	r3, #1
 8001088:	2140      	movs	r1, #64	@ 0x40
 800108a:	4809      	ldr	r0, [pc, #36]	@ (80010b0 <readRegister+0x78>)
 800108c:	f006 f8ce 	bl	800722c <HAL_I2C_Master_Receive>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <readRegister+0x7c>)
 8001096:	701a      	strb	r2, [r3, #0]

    if (ret != 0)
 8001098:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <readRegister+0x7c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <readRegister+0x6c>
    {
      //Serial.println("No ack!");
      return (0); //Device failed to ack
 80010a0:	2300      	movs	r3, #0
 80010a2:	e000      	b.n	80010a6 <readRegister+0x6e>
    }
    return buf0[0];
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
  }
 80010a6:	4618      	mov	r0, r3
 80010a8:	3720      	adds	r7, #32
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000218 	.word	0x20000218
 80010b4:	20000214 	.word	0x20000214

080010b8 <getHorizontal>:
  //Returns the 10-bit ADC value of the joystick horizontal position
  uint16_t getHorizontal()
  {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
    uint16_t X_MSB = readRegister(JOYSTICK_X_MSB);
 80010be:	2003      	movs	r0, #3
 80010c0:	f7ff ffba 	bl	8001038 <readRegister>
 80010c4:	4603      	mov	r3, r0
 80010c6:	80fb      	strh	r3, [r7, #6]
    uint16_t X_LSB = readRegister(JOYSTICK_X_LSB);
 80010c8:	2004      	movs	r0, #4
 80010ca:	f7ff ffb5 	bl	8001038 <readRegister>
 80010ce:	4603      	mov	r3, r0
 80010d0:	80bb      	strh	r3, [r7, #4]
    return ((X_MSB<<8) | X_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	021a      	lsls	r2, r3, #8
 80010d6:	88bb      	ldrh	r3, [r7, #4]
 80010d8:	4313      	orrs	r3, r2
 80010da:	119b      	asrs	r3, r3, #6
 80010dc:	b29b      	uxth	r3, r3
  }
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <getVertical>:
  //Returns the 10-bit ADC value of the joystick vertical position
  uint16_t getVertical()
  {
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
    uint16_t Y_MSB = readRegister(JOYSTICK_Y_MSB);
 80010ec:	2005      	movs	r0, #5
 80010ee:	f7ff ffa3 	bl	8001038 <readRegister>
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
    uint16_t Y_LSB = readRegister(JOYSTICK_Y_LSB);
 80010f6:	2006      	movs	r0, #6
 80010f8:	f7ff ff9e 	bl	8001038 <readRegister>
 80010fc:	4603      	mov	r3, r0
 80010fe:	80bb      	strh	r3, [r7, #4]
    return ((Y_MSB<<8) | Y_LSB)>>6; //MSB has the 8 MSB bits and LSB only has 2 bits
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	021a      	lsls	r2, r3, #8
 8001104:	88bb      	ldrh	r3, [r7, #4]
 8001106:	4313      	orrs	r3, r2
 8001108:	119b      	asrs	r3, r3, #6
 800110a:	b29b      	uxth	r3, r3
  }
 800110c:	4618      	mov	r0, r3
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <threshold>:
  // 2: Right
  // 3: Up
  // 4: Down
  // 0: Center
  // Range: 0 to 2044
  uint8_t threshold(){
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	  uint16_t horizontal = getHorizontal();
 800111a:	f7ff ffcd 	bl	80010b8 <getHorizontal>
 800111e:	4603      	mov	r3, r0
 8001120:	80fb      	strh	r3, [r7, #6]
	  uint16_t vertical = getVertical();
 8001122:	f7ff ffe0 	bl	80010e6 <getVertical>
 8001126:	4603      	mov	r3, r0
 8001128:	80bb      	strh	r3, [r7, #4]

	  // Perspective: Pin connections closest to you
	  // (0,0) is upper left, (1023, 1023) is lower right
	  // (0, 514) is left
	  // (512, 1023) is down
	  uint8_t lr = vertical > 250 && vertical < 750 ? 1 : 0;
 800112a:	88bb      	ldrh	r3, [r7, #4]
 800112c:	2bfa      	cmp	r3, #250	@ 0xfa
 800112e:	d906      	bls.n	800113e <threshold+0x2a>
 8001130:	88bb      	ldrh	r3, [r7, #4]
 8001132:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8001136:	4293      	cmp	r3, r2
 8001138:	d801      	bhi.n	800113e <threshold+0x2a>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <threshold+0x2c>
 800113e:	2300      	movs	r3, #0
 8001140:	70fb      	strb	r3, [r7, #3]
	  if (horizontal < 250 && lr) {
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	2bf9      	cmp	r3, #249	@ 0xf9
 8001146:	d804      	bhi.n	8001152 <threshold+0x3e>
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <threshold+0x3e>
		  return 1;
 800114e:	2301      	movs	r3, #1
 8001150:	e00a      	b.n	8001168 <threshold+0x54>
	  } else if (horizontal > 750 && lr){
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001158:	4293      	cmp	r3, r2
 800115a:	d904      	bls.n	8001166 <threshold+0x52>
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <threshold+0x52>
		  return 2;
 8001162:	2302      	movs	r3, #2
 8001164:	e000      	b.n	8001168 <threshold+0x54>
	  }
	  return 0;
 8001166:	2300      	movs	r3, #0
  }
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <RowChecker>:
#include "keypad.h"
#include "stm32l4xx_hal.h"
#include "lcd.h"

// Checks every row while a single column is pulled down
int RowChecker() {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
    int val = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_RESET ? 1 : val;
 800117a:	2120      	movs	r1, #32
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f005 fe70 	bl	8006e64 <HAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <RowChecker+0x1e>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	e000      	b.n	8001190 <RowChecker+0x20>
 800118e:	2301      	movs	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET ? 2 : val;
 8001192:	2140      	movs	r1, #64	@ 0x40
 8001194:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001198:	f005 fe64 	bl	8006e64 <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <RowChecker+0x36>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	e000      	b.n	80011a8 <RowChecker+0x38>
 80011a6:	2302      	movs	r3, #2
 80011a8:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET ? 3 : val;
 80011aa:	2180      	movs	r1, #128	@ 0x80
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b0:	f005 fe58 	bl	8006e64 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <RowChecker+0x4e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	e000      	b.n	80011c0 <RowChecker+0x50>
 80011be:	2303      	movs	r3, #3
 80011c0:	607b      	str	r3, [r7, #4]
    val = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14) == GPIO_PIN_RESET ? 4 : val;
 80011c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011c6:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <RowChecker+0x74>)
 80011c8:	f005 fe4c 	bl	8006e64 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <RowChecker+0x66>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	e000      	b.n	80011d8 <RowChecker+0x68>
 80011d6:	2304      	movs	r3, #4
 80011d8:	607b      	str	r3, [r7, #4]
    //	  	return row_return;
    return val;
 80011da:	687b      	ldr	r3, [r7, #4]
  }
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	48000c00 	.word	0x48000c00

080011e8 <keypad_init>:

void keypad_init(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	// Setting all the pins to high impedence
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <keypad_init+0x38>)
 80011f4:	f005 fe4e 	bl	8006e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011fe:	4809      	ldr	r0, [pc, #36]	@ (8001224 <keypad_init+0x3c>)
 8001200:	f005 fe48 	bl	8006e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800120a:	4805      	ldr	r0, [pc, #20]	@ (8001220 <keypad_init+0x38>)
 800120c:	f005 fe42 	bl	8006e94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <keypad_init+0x3c>)
 8001218:	f005 fe3c 	bl	8006e94 <HAL_GPIO_WritePin>
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	48001000 	.word	0x48001000
 8001224:	48001400 	.word	0x48001400

08001228 <KeyPadReturn>:



  uint8_t KeyPadReturn(int row, int col) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	  // Count of currently input characters
	static uint8_t weightCounter = 0;
    if (row == 0) {
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <KeyPadReturn+0x14>
      return 0;
 8001238:	2300      	movs	r3, #0
 800123a:	e083      	b.n	8001344 <KeyPadReturn+0x11c>
    }
    HAL_Delay(10);
 800123c:	200a      	movs	r0, #10
 800123e:	f004 f9fd 	bl	800563c <HAL_Delay>
    // After delay, only exits while loop once key is released
    while (row == RowChecker()) {
 8001242:	bf00      	nop
 8001244:	f7ff ff94 	bl	8001170 <RowChecker>
 8001248:	4602      	mov	r2, r0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4293      	cmp	r3, r2
 800124e:	d0f9      	beq.n	8001244 <KeyPadReturn+0x1c>
    }
    HAL_Delay(10);
 8001250:	200a      	movs	r0, #10
 8001252:	f004 f9f3 	bl	800563c <HAL_Delay>
    uint8_t ASCII_Value = ASCII_Keypad_Lookup[row - 1][col - 1];
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	1e5a      	subs	r2, r3, #1
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3b01      	subs	r3, #1
 800125e:	493b      	ldr	r1, [pc, #236]	@ (800134c <KeyPadReturn+0x124>)
 8001260:	0092      	lsls	r2, r2, #2
 8001262:	440a      	add	r2, r1
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	73bb      	strb	r3, [r7, #14]
    // Check if '#' is pressed
    if (ASCII_Value == 0x23) {
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	2b23      	cmp	r3, #35	@ 0x23
 800126e:	d12a      	bne.n	80012c6 <KeyPadReturn+0x9e>
    	// Go to main display
      if (weightCounter == 0) {
 8001270:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <KeyPadReturn+0x128>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <KeyPadReturn+0x54>
        // If there is no value for weight, just return
        return 0;
 8001278:	2300      	movs	r3, #0
 800127a:	e063      	b.n	8001344 <KeyPadReturn+0x11c>
      }
      // print the weight or height
      printf("End ASCII value: ");
 800127c:	4835      	ldr	r0, [pc, #212]	@ (8001354 <KeyPadReturn+0x12c>)
 800127e:	f00c fb75 	bl	800d96c <iprintf>
      for (uint8_t i = 0; i < weightCounter; i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e009      	b.n	800129c <KeyPadReturn+0x74>
        // print the values here
        printf("%x ", ASCII_Weight[i]);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	4a33      	ldr	r2, [pc, #204]	@ (8001358 <KeyPadReturn+0x130>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	4619      	mov	r1, r3
 8001290:	4832      	ldr	r0, [pc, #200]	@ (800135c <KeyPadReturn+0x134>)
 8001292:	f00c fb6b 	bl	800d96c <iprintf>
      for (uint8_t i = 0; i < weightCounter; i++) {
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	3301      	adds	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <KeyPadReturn+0x128>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d3f0      	bcc.n	8001288 <KeyPadReturn+0x60>
      }
      printf("\n");
 80012a6:	200a      	movs	r0, #10
 80012a8:	f00c fb72 	bl	800d990 <putchar>
      weightCounter = 0;
 80012ac:	4b28      	ldr	r3, [pc, #160]	@ (8001350 <KeyPadReturn+0x128>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
      // Wipe screen
      LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
 80012b2:	2300      	movs	r3, #0
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	234e      	movs	r3, #78	@ 0x4e
 80012b8:	2280      	movs	r2, #128	@ 0x80
 80012ba:	2138      	movs	r1, #56	@ 0x38
 80012bc:	2032      	movs	r0, #50	@ 0x32
 80012be:	f000 fa89 	bl	80017d4 <LCD_Fill>
      return 1;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e03e      	b.n	8001344 <KeyPadReturn+0x11c>
    } else if (ASCII_Value == 0x2A || weightCounter == max_digits - 2) {
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80012ca:	d006      	beq.n	80012da <KeyPadReturn+0xb2>
 80012cc:	4b20      	ldr	r3, [pc, #128]	@ (8001350 <KeyPadReturn+0x128>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	2305      	movs	r3, #5
 80012d4:	3b02      	subs	r3, #2
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d10c      	bne.n	80012f4 <KeyPadReturn+0xcc>
    	// Wipe screen
    	LCD_Fill(50, 56, 50 + 26*3, 50+28, C_BLACK);
 80012da:	2300      	movs	r3, #0
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	234e      	movs	r3, #78	@ 0x4e
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	2138      	movs	r1, #56	@ 0x38
 80012e4:	2032      	movs	r0, #50	@ 0x32
 80012e6:	f000 fa75 	bl	80017d4 <LCD_Fill>
      // Reset if '*' is the input
      // Other if statement:
      // -2: there is a ++ at the end, and need a spot for #
      // Reset if max digits have been reached
      weightCounter = 0;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <KeyPadReturn+0x128>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]
      return 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e027      	b.n	8001344 <KeyPadReturn+0x11c>
    }
    printf("ASCII value: %x\n", ASCII_Value);
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	4619      	mov	r1, r3
 80012f8:	4819      	ldr	r0, [pc, #100]	@ (8001360 <KeyPadReturn+0x138>)
 80012fa:	f00c fb37 	bl	800d96c <iprintf>
    LCD_PutChar(50 + weightCounter*20, 56, ASCII_Value, DEFAULT_FONT, C_GREEN, C_BLACK);
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <KeyPadReturn+0x128>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	0092      	lsls	r2, r2, #2
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	b29b      	uxth	r3, r3
 800130c:	3332      	adds	r3, #50	@ 0x32
 800130e:	b298      	uxth	r0, r3
 8001310:	7bba      	ldrb	r2, [r7, #14]
 8001312:	2300      	movs	r3, #0
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <KeyPadReturn+0x13c>)
 800131e:	2138      	movs	r1, #56	@ 0x38
 8001320:	f000 fb1e 	bl	8001960 <LCD_PutChar>
    UG_FontSetTransparency(1);
 8001324:	2001      	movs	r0, #1
 8001326:	f002 fe35 	bl	8003f94 <UG_FontSetTransparency>
    ASCII_Weight[weightCounter] = ASCII_Value;
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <KeyPadReturn+0x128>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4a09      	ldr	r2, [pc, #36]	@ (8001358 <KeyPadReturn+0x130>)
 8001332:	7bbb      	ldrb	r3, [r7, #14]
 8001334:	5453      	strb	r3, [r2, r1]
    weightCounter++;
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <KeyPadReturn+0x128>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4b04      	ldr	r3, [pc, #16]	@ (8001350 <KeyPadReturn+0x128>)
 8001340:	701a      	strb	r2, [r3, #0]
    return 0;
 8001342:	2300      	movs	r3, #0
  }
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	20000271 	.word	0x20000271
 8001354:	0800fb40 	.word	0x0800fb40
 8001358:	2000026c 	.word	0x2000026c
 800135c:	0800fb54 	.word	0x0800fb54
 8001360:	0800fb58 	.word	0x0800fb58
 8001364:	0800fb84 	.word	0x0800fb84

08001368 <running>:

  void running(){
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
	  uint8_t finished = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	71fb      	strb	r3, [r7, #7]
	  int val = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
  while (!finished) {
 8001376:	e05c      	b.n	8001432 <running+0xca>
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800137e:	4833      	ldr	r0, [pc, #204]	@ (800144c <running+0xe4>)
 8001380:	f005 fd88 	bl	8006e94 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001384:	f7ff fef4 	bl	8001170 <RowChecker>
 8001388:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 4);
 800138a:	2104      	movs	r1, #4
 800138c:	6838      	ldr	r0, [r7, #0]
 800138e:	f7ff ff4b 	bl	8001228 <KeyPadReturn>
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, 1);
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800139c:	482b      	ldr	r0, [pc, #172]	@ (800144c <running+0xe4>)
 800139e:	f005 fd79 	bl	8006e94 <HAL_GPIO_WritePin>
      if (finished) return;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d148      	bne.n	800143a <running+0xd2>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013ae:	4828      	ldr	r0, [pc, #160]	@ (8001450 <running+0xe8>)
 80013b0:	f005 fd70 	bl	8006e94 <HAL_GPIO_WritePin>
      val = RowChecker();
 80013b4:	f7ff fedc 	bl	8001170 <RowChecker>
 80013b8:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 3);
 80013ba:	2103      	movs	r1, #3
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f7ff ff33 	bl	8001228 <KeyPadReturn>
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, 1);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013cc:	4820      	ldr	r0, [pc, #128]	@ (8001450 <running+0xe8>)
 80013ce:	f005 fd61 	bl	8006e94 <HAL_GPIO_WritePin>
      if (finished) return;
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d132      	bne.n	800143e <running+0xd6>

      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013de:	481c      	ldr	r0, [pc, #112]	@ (8001450 <running+0xe8>)
 80013e0:	f005 fd58 	bl	8006e94 <HAL_GPIO_WritePin>
      val = RowChecker();
 80013e4:	f7ff fec4 	bl	8001170 <RowChecker>
 80013e8:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 2);
 80013ea:	2102      	movs	r1, #2
 80013ec:	6838      	ldr	r0, [r7, #0]
 80013ee:	f7ff ff1b 	bl	8001228 <KeyPadReturn>
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013fc:	4814      	ldr	r0, [pc, #80]	@ (8001450 <running+0xe8>)
 80013fe:	f005 fd49 	bl	8006e94 <HAL_GPIO_WritePin>
      if (finished) return;
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d11c      	bne.n	8001442 <running+0xda>

      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800140e:	480f      	ldr	r0, [pc, #60]	@ (800144c <running+0xe4>)
 8001410:	f005 fd40 	bl	8006e94 <HAL_GPIO_WritePin>
      val = RowChecker();
 8001414:	f7ff feac 	bl	8001170 <RowChecker>
 8001418:	6038      	str	r0, [r7, #0]
      finished = KeyPadReturn(val, 1);
 800141a:	2101      	movs	r1, #1
 800141c:	6838      	ldr	r0, [r7, #0]
 800141e:	f7ff ff03 	bl	8001228 <KeyPadReturn>
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
      HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, 1);
 8001426:	2201      	movs	r2, #1
 8001428:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800142c:	4807      	ldr	r0, [pc, #28]	@ (800144c <running+0xe4>)
 800142e:	f005 fd31 	bl	8006e94 <HAL_GPIO_WritePin>
  while (!finished) {
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d09f      	beq.n	8001378 <running+0x10>
 8001438:	e004      	b.n	8001444 <running+0xdc>
      if (finished) return;
 800143a:	bf00      	nop
 800143c:	e002      	b.n	8001444 <running+0xdc>
      if (finished) return;
 800143e:	bf00      	nop
 8001440:	e000      	b.n	8001444 <running+0xdc>
      if (finished) return;
 8001442:	bf00      	nop

      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
    }
  }
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	48001400 	.word	0x48001400
 8001450:	48001000 	.word	0x48001000

08001454 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <setSPI_Size+0x74>)
 8001460:	f993 3000 	ldrsb.w	r3, [r3]
 8001464:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001468:	429a      	cmp	r2, r3
 800146a:	d027      	beq.n	80014bc <setSPI_Size+0x68>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <setSPI_Size+0x78>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <setSPI_Size+0x78>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800147a:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 800147c:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <setSPI_Size+0x74>)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d10c      	bne.n	80014a4 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <setSPI_Size+0x78>)
 800148c:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001490:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_CRCL;//BR was DFF
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <setSPI_Size+0x78>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <setSPI_Size+0x78>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014a0:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
    }
  }
}
 80014a2:	e00b      	b.n	80014bc <setSPI_Size+0x68>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <setSPI_Size+0x78>)
 80014a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014aa:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_CRCL);//BR was DFF
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <setSPI_Size+0x78>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <setSPI_Size+0x78>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014ba:	601a      	str	r2, [r3, #0]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	20000010 	.word	0x20000010
 80014cc:	200007f0 	.word	0x200007f0

080014d0 <LCD_WriteCommand>:
/**
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
	      setSPI_Size(mode_8bit);
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff ffb9 	bl	8001454 <setSPI_Size>
//	      LCD_PIN(LCD_DC,RESET);
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);   // DC
 80014e2:	2200      	movs	r2, #0
 80014e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014e8:	4815      	ldr	r0, [pc, #84]	@ (8001540 <LCD_WriteCommand+0x70>)
 80014ea:	f005 fcd3 	bl	8006e94 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);  // CS
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014f4:	4812      	ldr	r0, [pc, #72]	@ (8001540 <LCD_WriteCommand+0x70>)
 80014f6:	f005 fccd 	bl	8006e94 <HAL_GPIO_WritePin>

	  HAL_SPI_Transmit(&hspi3, cmd, 1, HAL_MAX_DELAY);
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	2201      	movs	r2, #1
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4810      	ldr	r0, [pc, #64]	@ (8001544 <LCD_WriteCommand+0x74>)
 8001504:	f009 fbeb 	bl	800acde <HAL_SPI_Transmit>
	  if (argc) {
 8001508:	78fb      	ldrb	r3, [r7, #3]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00e      	beq.n	800152c <LCD_WriteCommand+0x5c>
	    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001514:	480a      	ldr	r0, [pc, #40]	@ (8001540 <LCD_WriteCommand+0x70>)
 8001516:	f005 fcbd 	bl	8006e94 <HAL_GPIO_WritePin>
	    HAL_SPI_Transmit(&hspi3, (cmd + 1), argc, HAL_MAX_DELAY);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	1c59      	adds	r1, r3, #1
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	b29a      	uxth	r2, r3
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	4807      	ldr	r0, [pc, #28]	@ (8001544 <LCD_WriteCommand+0x74>)
 8001528:	f009 fbd9 	bl	800acde <HAL_SPI_Transmit>
	  }
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);  // CS
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001532:	4803      	ldr	r0, [pc, #12]	@ (8001540 <LCD_WriteCommand+0x70>)
 8001534:	f005 fcae 	bl	8006e94 <HAL_GPIO_WritePin>
	}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	48001000 	.word	0x48001000
 8001544:	200007f0 	.word	0x200007f0

08001548 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 8001552:	2201      	movs	r2, #1
 8001554:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001558:	4814      	ldr	r0, [pc, #80]	@ (80015ac <LCD_WriteData+0x64>)
 800155a:	f005 fc9b 	bl	8006e94 <HAL_GPIO_WritePin>
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001564:	4811      	ldr	r0, [pc, #68]	@ (80015ac <LCD_WriteData+0x64>)
 8001566:	f005 fc95 	bl	8006e94 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 800156a:	e011      	b.n	8001590 <LCD_WriteData+0x48>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001572:	4293      	cmp	r3, r2
 8001574:	bf28      	it	cs
 8001576:	4613      	movcs	r3, r2
 8001578:	81fb      	strh	r3, [r7, #14]
        buff += chunk_size;
      else
        buff += chunk_size*2;
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800157a:	89fa      	ldrh	r2, [r7, #14]
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	480b      	ldr	r0, [pc, #44]	@ (80015b0 <LCD_WriteData+0x68>)
 8001584:	f009 fbab 	bl	800acde <HAL_SPI_Transmit>
#endif
    buff_size -= chunk_size;
 8001588:	89fb      	ldrh	r3, [r7, #14]
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ea      	bne.n	800156c <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800159c:	4803      	ldr	r0, [pc, #12]	@ (80015ac <LCD_WriteData+0x64>)
 800159e:	f005 fc79 	bl	8006e94 <HAL_GPIO_WritePin>
#endif
}
 80015a2:	bf00      	nop
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	48001000 	.word	0x48001000
 80015b0:	200007f0 	.word	0x200007f0

080015b4 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b08b      	sub	sp, #44	@ 0x2c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4604      	mov	r4, r0
 80015bc:	4608      	mov	r0, r1
 80015be:	4611      	mov	r1, r2
 80015c0:	461a      	mov	r2, r3
 80015c2:	4623      	mov	r3, r4
 80015c4:	80fb      	strh	r3, [r7, #6]
 80015c6:	4603      	mov	r3, r0
 80015c8:	80bb      	strh	r3, [r7, #4]
 80015ca:	460b      	mov	r3, r1
 80015cc:	807b      	strh	r3, [r7, #2]
 80015ce:	4613      	mov	r3, r2
 80015d0:	803b      	strh	r3, [r7, #0]
//  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
//  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
	int16_t x_start = x0 /*+ LCD_X_SHIFT*/, x_end = x1 /*+ LCD_X_SHIFT*/;
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	 int16_t y_start = y0 /*+ LCD_Y_SHIFT*/, y_end = y1 /*+ LCD_Y_SHIFT*/;
 80015da:	88bb      	ldrh	r3, [r7, #4]
 80015dc:	847b      	strh	r3, [r7, #34]	@ 0x22
 80015de:	883b      	ldrh	r3, [r7, #0]
 80015e0:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80015e2:	232a      	movs	r3, #42	@ 0x2a
 80015e4:	763b      	strb	r3, [r7, #24]
 80015e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80015ea:	121b      	asrs	r3, r3, #8
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	767b      	strb	r3, [r7, #25]
 80015f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	76bb      	strb	r3, [r7, #26]
 80015f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015fc:	121b      	asrs	r3, r3, #8
 80015fe:	b21b      	sxth	r3, r3
 8001600:	b2db      	uxtb	r3, r3
 8001602:	76fb      	strb	r3, [r7, #27]
 8001604:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001606:	b2db      	uxtb	r3, r3
 8001608:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	2104      	movs	r1, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5d 	bl	80014d0 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001616:	232b      	movs	r3, #43	@ 0x2b
 8001618:	743b      	strb	r3, [r7, #16]
 800161a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800161e:	121b      	asrs	r3, r3, #8
 8001620:	b21b      	sxth	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	747b      	strb	r3, [r7, #17]
 8001626:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001628:	b2db      	uxtb	r3, r3
 800162a:	74bb      	strb	r3, [r7, #18]
 800162c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001630:	121b      	asrs	r3, r3, #8
 8001632:	b21b      	sxth	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	74fb      	strb	r3, [r7, #19]
 8001638:	8c3b      	ldrh	r3, [r7, #32]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	2104      	movs	r1, #4
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff43 	bl	80014d0 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800164a:	232c      	movs	r3, #44	@ 0x2c
 800164c:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff3b 	bl	80014d0 <LCD_WriteCommand>
  }
}
 800165a:	bf00      	nop
 800165c:	372c      	adds	r7, #44	@ 0x2c
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}
	...

08001664 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
 800166e:	460b      	mov	r3, r1
 8001670:	80bb      	strh	r3, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8001676:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167a:	2b00      	cmp	r3, #0
 800167c:	db39      	blt.n	80016f2 <LCD_DrawPixel+0x8e>
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	2bef      	cmp	r3, #239	@ 0xef
 8001684:	dc35      	bgt.n	80016f2 <LCD_DrawPixel+0x8e>
 8001686:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	db31      	blt.n	80016f2 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 800168e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001692:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001696:	da2c      	bge.n	80016f2 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8001698:	887b      	ldrh	r3, [r7, #2]
 800169a:	0a1b      	lsrs	r3, r3, #8
 800169c:	b29b      	uxth	r3, r3
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	733b      	strb	r3, [r7, #12]
 80016a2:	887b      	ldrh	r3, [r7, #2]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80016a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016b4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016b8:	f7ff ff7c 	bl	80015b4 <LCD_SetAddressWindow>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 1);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c2:	480e      	ldr	r0, [pc, #56]	@ (80016fc <LCD_DrawPixel+0x98>)
 80016c4:	f005 fbe6 	bl	8006e94 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ce:	480b      	ldr	r0, [pc, #44]	@ (80016fc <LCD_DrawPixel+0x98>)
 80016d0:	f005 fbe0 	bl	8006e94 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80016d4:	f107 010c 	add.w	r1, r7, #12
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
 80016dc:	2202      	movs	r2, #2
 80016de:	4808      	ldr	r0, [pc, #32]	@ (8001700 <LCD_DrawPixel+0x9c>)
 80016e0:	f009 fafd 	bl	800acde <HAL_SPI_Transmit>
#ifdef LCD_CS
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 80016e4:	2201      	movs	r2, #1
 80016e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016ea:	4804      	ldr	r0, [pc, #16]	@ (80016fc <LCD_DrawPixel+0x98>)
 80016ec:	f005 fbd2 	bl	8006e94 <HAL_GPIO_WritePin>
 80016f0:	e000      	b.n	80016f4 <LCD_DrawPixel+0x90>
    return;
 80016f2:	bf00      	nop
#endif
}
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	48001000 	.word	0x48001000
 8001700:	200007f0 	.word	0x200007f0

08001704 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8001704:	b580      	push	{r7, lr}
 8001706:	b094      	sub	sp, #80	@ 0x50
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
    LCD_WriteData((uint8_t*)&color, pixels);
  else{
#endif
	  // JACOB IF DMA ENABLE OR SOMETHING WEIRD WITH PIXEL WRITING, GO HERE AND JUST DO PIXEL
    uint16_t fill[DMA_Min_Pixels];                                                                // Use a pixel buffer for faster filling, removes overhead.
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001710:	2300      	movs	r3, #0
 8001712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001714:	e009      	b.n	800172a <LCD_FillPixels+0x26>
      fill[t]=color;
 8001716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	3350      	adds	r3, #80	@ 0x50
 800171c:	443b      	add	r3, r7
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8001724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001726:	3301      	adds	r3, #1
 8001728:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2b20      	cmp	r3, #32
 800172e:	bf28      	it	cs
 8001730:	2320      	movcs	r3, #32
 8001732:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001734:	429a      	cmp	r2, r3
 8001736:	d3ee      	bcc.n	8001716 <LCD_FillPixels+0x12>
    }
    while(pixels){                                                                                // Send 64 pixel blocks
 8001738:	e00e      	b.n	8001758 <LCD_FillPixels+0x54>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b20      	cmp	r3, #32
 800173e:	bf28      	it	cs
 8001740:	2320      	movcs	r3, #32
 8001742:	64bb      	str	r3, [r7, #72]	@ 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fefc 	bl	8001548 <LCD_WriteData>
      pixels-=sz;
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1ed      	bne.n	800173a <LCD_FillPixels+0x36>
    }
#ifdef USE_DMA
  }
#endif
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3750      	adds	r7, #80	@ 0x50
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4604      	mov	r4, r0
 8001770:	4608      	mov	r0, r1
 8001772:	4611      	mov	r1, r2
 8001774:	461a      	mov	r2, r3
 8001776:	4623      	mov	r3, r4
 8001778:	80fb      	strh	r3, [r7, #6]
 800177a:	4603      	mov	r3, r0
 800177c:	80bb      	strh	r3, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	807b      	strh	r3, [r7, #2]
 8001782:	4613      	mov	r3, r2
 8001784:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8001786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800178e:	d104      	bne.n	800179a <LCD_FillArea+0x32>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fe5f 	bl	8001454 <setSPI_Size>
#endif
    return NULL;
 8001796:	2300      	movs	r3, #0
 8001798:	e013      	b.n	80017c2 <LCD_FillArea+0x5a>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 800179a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800179e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017aa:	f7ff ff03 	bl	80015b4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
 80017ae:	2001      	movs	r0, #1
 80017b0:	f7ff fe50 	bl	8001454 <setSPI_Size>
#endif
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017ba:	4804      	ldr	r0, [pc, #16]	@ (80017cc <LCD_FillArea+0x64>)
 80017bc:	f005 fb6a 	bl	8006e94 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <LCD_FillArea+0x68>)
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd90      	pop	{r4, r7, pc}
 80017ca:	bf00      	nop
 80017cc:	48001000 	.word	0x48001000
 80017d0:	08001705 	.word	0x08001705

080017d4 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4604      	mov	r4, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4623      	mov	r3, r4
 80017e4:	80fb      	strh	r3, [r7, #6]
 80017e6:	4603      	mov	r3, r0
 80017e8:	80bb      	strh	r3, [r7, #4]
 80017ea:	460b      	mov	r3, r1
 80017ec:	807b      	strh	r3, [r7, #2]
 80017ee:	4613      	mov	r3, r2
 80017f0:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	3301      	adds	r3, #1
 80017fa:	4619      	mov	r1, r3
 80017fc:	883a      	ldrh	r2, [r7, #0]
 80017fe:	88bb      	ldrh	r3, [r7, #4]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	3301      	adds	r3, #1
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800180a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800180e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001812:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001816:	f9b7 3000 	ldrsh.w	r3, [r7]
 800181a:	f7ff fecb 	bl	80015b4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
#else
    setSPI_Size(mode_16bit);
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fe18 	bl	8001454 <setSPI_Size>
#endif
  LCD_FillPixels(pixels, color);
 8001824:	8c3b      	ldrh	r3, [r7, #32]
 8001826:	4619      	mov	r1, r3
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f7ff ff6b 	bl	8001704 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
#else
  setSPI_Size(mode_8bit);
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff fe10 	bl	8001454 <setSPI_Size>
#endif
  return UG_RESULT_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bd90      	pop	{r4, r7, pc}

0800183e <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800183e:	b590      	push	{r4, r7, lr}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	603a      	str	r2, [r7, #0]
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	460b      	mov	r3, r1
 800184c:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	889b      	ldrh	r3, [r3, #4]
 8001852:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	88db      	ldrh	r3, [r3, #6]
 8001858:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	2bef      	cmp	r3, #239	@ 0xef
 800185e:	d837      	bhi.n	80018d0 <LCD_DrawImage+0x92>
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001866:	d233      	bcs.n	80018d0 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001868:	88fa      	ldrh	r2, [r7, #6]
 800186a:	89fb      	ldrh	r3, [r7, #14]
 800186c:	4413      	add	r3, r2
 800186e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001870:	dc30      	bgt.n	80018d4 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001872:	88ba      	ldrh	r2, [r7, #4]
 8001874:	89bb      	ldrh	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800187c:	dc2c      	bgt.n	80018d8 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	7a1b      	ldrb	r3, [r3, #8]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d12a      	bne.n	80018dc <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001886:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800188a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	89fb      	ldrh	r3, [r7, #14]
 8001892:	4413      	add	r3, r2
 8001894:	b29b      	uxth	r3, r3
 8001896:	3b01      	subs	r3, #1
 8001898:	b29b      	uxth	r3, r3
 800189a:	b21c      	sxth	r4, r3
 800189c:	88ba      	ldrh	r2, [r7, #4]
 800189e:	89bb      	ldrh	r3, [r7, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	4622      	mov	r2, r4
 80018ac:	f7ff fe82 	bl	80015b4 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
 80018b0:	2001      	movs	r0, #1
 80018b2:	f7ff fdcf 	bl	8001454 <setSPI_Size>
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	89fb      	ldrh	r3, [r7, #14]
 80018bc:	89ba      	ldrh	r2, [r7, #12]
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff fe40 	bl	8001548 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff fdc3 	bl	8001454 <setSPI_Size>
 80018ce:	e006      	b.n	80018de <LCD_DrawImage+0xa0>
    return;
 80018d0:	bf00      	nop
 80018d2:	e004      	b.n	80018de <LCD_DrawImage+0xa0>
    return;
 80018d4:	bf00      	nop
 80018d6:	e002      	b.n	80018de <LCD_DrawImage+0xa0>
    return;
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <LCD_DrawImage+0xa0>
    return;
 80018dc:	bf00      	nop
#endif
  }
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd90      	pop	{r4, r7, pc}

080018e4 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af02      	add	r7, sp, #8
 80018ea:	4604      	mov	r4, r0
 80018ec:	4608      	mov	r0, r1
 80018ee:	4611      	mov	r1, r2
 80018f0:	461a      	mov	r2, r3
 80018f2:	4623      	mov	r3, r4
 80018f4:	80fb      	strh	r3, [r7, #6]
 80018f6:	4603      	mov	r3, r0
 80018f8:	80bb      	strh	r3, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	807b      	strh	r3, [r7, #2]
 80018fe:	4613      	mov	r3, r2
 8001900:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001902:	88fa      	ldrh	r2, [r7, #6]
 8001904:	887b      	ldrh	r3, [r7, #2]
 8001906:	429a      	cmp	r2, r3
 8001908:	d10a      	bne.n	8001920 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 800190a:	88ba      	ldrh	r2, [r7, #4]
 800190c:	883b      	ldrh	r3, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d918      	bls.n	8001944 <LCD_DrawLine+0x60>
 8001912:	88bb      	ldrh	r3, [r7, #4]
 8001914:	81bb      	strh	r3, [r7, #12]
 8001916:	883b      	ldrh	r3, [r7, #0]
 8001918:	80bb      	strh	r3, [r7, #4]
 800191a:	89bb      	ldrh	r3, [r7, #12]
 800191c:	803b      	strh	r3, [r7, #0]
 800191e:	e011      	b.n	8001944 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001920:	88ba      	ldrh	r2, [r7, #4]
 8001922:	883b      	ldrh	r3, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d10a      	bne.n	800193e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8001928:	88fa      	ldrh	r2, [r7, #6]
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	429a      	cmp	r2, r3
 800192e:	d909      	bls.n	8001944 <LCD_DrawLine+0x60>
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	81fb      	strh	r3, [r7, #14]
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	80fb      	strh	r3, [r7, #6]
 8001938:	89fb      	ldrh	r3, [r7, #14]
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	e002      	b.n	8001944 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e009      	b.n	8001958 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001944:	883c      	ldrh	r4, [r7, #0]
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	88b9      	ldrh	r1, [r7, #4]
 800194a:	88f8      	ldrh	r0, [r7, #6]
 800194c:	8c3b      	ldrh	r3, [r7, #32]
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	4623      	mov	r3, r4
 8001952:	f7ff ff3f 	bl	80017d4 <LCD_Fill>
  return UG_RESULT_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}

08001960 <LCD_PutChar>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b087      	sub	sp, #28
 8001964:	af02      	add	r7, sp, #8
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	4603      	mov	r3, r0
 800196a:	81fb      	strh	r3, [r7, #14]
 800196c:	460b      	mov	r3, r1
 800196e:	81bb      	strh	r3, [r7, #12]
 8001970:	4613      	mov	r3, r2
 8001972:	72fb      	strb	r3, [r7, #11]
  UG_FontSelect(font);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f002 f883 	bl	8003a80 <UG_FontSelect>
  UG_PutChar(ch, x, y, color, bgcolor);
 800197a:	7afb      	ldrb	r3, [r7, #11]
 800197c:	b298      	uxth	r0, r3
 800197e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001982:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001986:	8c3c      	ldrh	r4, [r7, #32]
 8001988:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	4623      	mov	r3, r4
 800198e:	f002 fa79 	bl	8003e84 <UG_PutChar>
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bd90      	pop	{r4, r7, pc}

0800199a <LCD_PutStr>:

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	60ba      	str	r2, [r7, #8]
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	4603      	mov	r3, r0
 80019a6:	81fb      	strh	r3, [r7, #14]
 80019a8:	460b      	mov	r3, r1
 80019aa:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f002 f867 	bl	8003a80 <UG_FontSelect>
  UG_SetForecolor(color);
 80019b2:	8b3b      	ldrh	r3, [r7, #24]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 faa1 	bl	8003efc <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80019ba:	8bbb      	ldrh	r3, [r7, #28]
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 faaf 	bl	8003f20 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 80019c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 f9c1 	bl	8003d54 <UG_PutString>
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <LCD_setPower+0x14>
 80019ea:	2329      	movs	r3, #41	@ 0x29
 80019ec:	e000      	b.n	80019f0 <LCD_setPower+0x16>
 80019ee:	2328      	movs	r3, #40	@ 0x28
 80019f0:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80019f2:	f107 030c 	add.w	r3, r7, #12
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fd69 	bl	80014d0 <LCD_WriteCommand>
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <LCD_Update>:

static void LCD_Update(void)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	af00      	add	r7, sp, #0
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff fd22 	bl	8001454 <setSPI_Size>
  #endif
}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
#ifdef LCD_CS
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 1);
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a20:	4829      	ldr	r0, [pc, #164]	@ (8001ac8 <LCD_init+0xb4>)
 8001a22:	f005 fa37 	bl	8006e94 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2180      	movs	r1, #128	@ 0x80
 8001a2a:	4827      	ldr	r0, [pc, #156]	@ (8001ac8 <LCD_init+0xb4>)
 8001a2c:	f005 fa32 	bl	8006e94 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f003 fe03 	bl	800563c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, 1);
 8001a36:	2201      	movs	r2, #1
 8001a38:	2180      	movs	r1, #128	@ 0x80
 8001a3a:	4823      	ldr	r0, [pc, #140]	@ (8001ac8 <LCD_init+0xb4>)
 8001a3c:	f005 fa2a 	bl	8006e94 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001a40:	20c8      	movs	r0, #200	@ 0xc8
 8001a42:	f003 fdfb 	bl	800563c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001a46:	4921      	ldr	r1, [pc, #132]	@ (8001acc <LCD_init+0xb8>)
 8001a48:	4821      	ldr	r0, [pc, #132]	@ (8001ad0 <LCD_init+0xbc>)
 8001a4a:	f001 ff7f 	bl	800394c <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8001a4e:	4921      	ldr	r1, [pc, #132]	@ (8001ad4 <LCD_init+0xc0>)
 8001a50:	2000      	movs	r0, #0
 8001a52:	f003 fb0b 	bl	800506c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001a56:	4920      	ldr	r1, [pc, #128]	@ (8001ad8 <LCD_init+0xc4>)
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f003 fb07 	bl	800506c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8001a5e:	491f      	ldr	r1, [pc, #124]	@ (8001adc <LCD_init+0xc8>)
 8001a60:	2002      	movs	r0, #2
 8001a62:	f003 fb03 	bl	800506c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001a66:	491e      	ldr	r1, [pc, #120]	@ (8001ae0 <LCD_init+0xcc>)
 8001a68:	2003      	movs	r0, #3
 8001a6a:	f003 faff 	bl	800506c <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f002 fa68 	bl	8003f44 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f002 fa79 	bl	8003f6c <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	80fb      	strh	r3, [r7, #6]
 8001a7e:	e013      	b.n	8001aa8 <LCD_init+0x94>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a17      	ldr	r2, [pc, #92]	@ (8001ae4 <LCD_init+0xd0>)
 8001a86:	441a      	add	r2, r3
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	4916      	ldr	r1, [pc, #88]	@ (8001ae4 <LCD_init+0xd0>)
 8001a8c:	5ccb      	ldrb	r3, [r1, r3]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4610      	mov	r0, r2
 8001a92:	f7ff fd1d 	bl	80014d0 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <LCD_init+0xd0>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	2b4b      	cmp	r3, #75	@ 0x4b
 8001aac:	d9e8      	bls.n	8001a80 <LCD_init+0x6c>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f001 fff6 	bl	8003aa0 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff ff90 	bl	80019da <LCD_setPower>
  UG_Update();
 8001aba:	f003 faf9 	bl	80050b0 <UG_Update>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	48001000 	.word	0x48001000
 8001acc:	20000014 	.word	0x20000014
 8001ad0:	20000274 	.word	0x20000274
 8001ad4:	080018e5 	.word	0x080018e5
 8001ad8:	080017d5 	.word	0x080017d5
 8001adc:	08001769 	.word	0x08001769
 8001ae0:	0800183f 	.word	0x0800183f
 8001ae4:	08014f74 	.word	0x08014f74

08001ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae8:	b5b0      	push	{r4, r5, r7, lr}
 8001aea:	b0b6      	sub	sp, #216	@ 0xd8
 8001aec:	af12      	add	r7, sp, #72	@ 0x48
  /* USER CODE BEGIN 1 */
	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable DWT
 8001aee:	4b58      	ldr	r3, [pc, #352]	@ (8001c50 <main+0x168>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	4a57      	ldr	r2, [pc, #348]	@ (8001c50 <main+0x168>)
 8001af4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001af8:	60d3      	str	r3, [r2, #12]
	  DWT->CYCCNT = 0;                                // Clear counter
 8001afa:	4b56      	ldr	r3, [pc, #344]	@ (8001c54 <main+0x16c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
	  DWT->CTRL = DWT_CTRL_CYCCNTENA_Msk;             // Enable counter
 8001b00:	4b54      	ldr	r3, [pc, #336]	@ (8001c54 <main+0x16c>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b06:	f003 fd24 	bl	8005552 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0a:	f000 f8ad 	bl	8001c68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b0e:	f000 f90d 	bl	8001d2c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b12:	f000 ff3d 	bl	8002990 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b16:	f000 f93d 	bl	8001d94 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001b1a:	f000 f99f 	bl	8001e5c <MX_CAN1_Init>
  MX_COMP1_Init();
 8001b1e:	f000 f9d1 	bl	8001ec4 <MX_COMP1_Init>
  MX_COMP2_Init();
 8001b22:	f000 f9fd 	bl	8001f20 <MX_COMP2_Init>
  MX_I2C1_Init();
 8001b26:	f000 fa27 	bl	8001f78 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001b2a:	f000 fa65 	bl	8001ff8 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001b2e:	f000 faa3 	bl	8002078 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8001b32:	f000 faed 	bl	8002110 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001b36:	f000 fb39 	bl	80021ac <MX_USART3_UART_Init>
  MX_SAI1_Init();
 8001b3a:	f000 fb83 	bl	8002244 <MX_SAI1_Init>
  MX_SAI2_Init();
 8001b3e:	f000 fc19 	bl	8002374 <MX_SAI2_Init>
  MX_SPI3_Init();
 8001b42:	f000 fc7f 	bl	8002444 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001b46:	f000 fcbb 	bl	80024c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b4a:	f000 fd71 	bl	8002630 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b4e:	f000 fdd3 	bl	80026f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b52:	f000 fe37 	bl	80027c4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8001b56:	f000 fe8f 	bl	8002878 <MX_TIM15_Init>
  MX_USB_OTG_FS_USB_Init();
 8001b5a:	f000 ff11 	bl	8002980 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
LCD_init();
 8001b5e:	f7ff ff59 	bl	8001a14 <LCD_init>
keypad_init();
 8001b62:	f7ff fb41 	bl	80011e8 <keypad_init>
JOYSTICK_INIT(hi2c1);
 8001b66:	4c3c      	ldr	r4, [pc, #240]	@ (8001c58 <main+0x170>)
 8001b68:	4668      	mov	r0, sp
 8001b6a:	f104 0310 	add.w	r3, r4, #16
 8001b6e:	2244      	movs	r2, #68	@ 0x44
 8001b70:	4619      	mov	r1, r3
 8001b72:	f00c f81c 	bl	800dbae <memcpy>
 8001b76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b7a:	f7ff fa45 	bl	8001008 <JOYSTICK_INIT>
TempHum_t data;
initTempHumSensor(&hi2c2);
 8001b7e:	4837      	ldr	r0, [pc, #220]	@ (8001c5c <main+0x174>)
 8001b80:	f7ff f9a2 	bl	8000ec8 <initTempHumSensor>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
// 0 = runner view
// 1 = weight input view
uint8_t current_viewport = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    /* USER CODE BEGIN 3 */
	  // STATE MACHINE HERE
	  // STATES SO FAR: INPUT WEIGHT, DISPLAY RUNNER DATA
	  // Joystick allows user to switch between states\

	  uint8_t lr = threshold();
 8001b8a:	f7ff fac3 	bl	8001114 <threshold>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	  // Toggle current_viewport
	  if (lr != 0) {
 8001b94:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d010      	beq.n	8001bbe <main+0xd6>
		  current_viewport = current_viewport ? 0 : 1;
 8001b9c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
		  // Clear dirty parts of the screen
		  LCD_Fill(50, 56, 240, 50+28, C_BLACK);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	234e      	movs	r3, #78	@ 0x4e
 8001bb4:	22f0      	movs	r2, #240	@ 0xf0
 8001bb6:	2138      	movs	r1, #56	@ 0x38
 8001bb8:	2032      	movs	r0, #50	@ 0x32
 8001bba:	f7ff fe0b 	bl	80017d4 <LCD_Fill>
	  }

	  // HOME SCREEN / RUNNER VIEW
	  if (current_viewport == 0) {
 8001bbe:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d139      	bne.n	8001c3a <main+0x152>
		  UG_FontSetTransparency(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f002 f9e4 	bl	8003f94 <UG_FontSetTransparency>
		  data = get_temp_hum();
 8001bcc:	f7ff f9d0 	bl	8000f70 <get_temp_hum>
 8001bd0:	eeb0 7a40 	vmov.f32	s14, s0
 8001bd4:	eef0 7a60 	vmov.f32	s15, s1
 8001bd8:	ed87 7a21 	vstr	s14, [r7, #132]	@ 0x84
 8001bdc:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		  char buffer[128];
		  // DO THE BELOW ONLY ON TIME INTERVAL
		  LCD_Fill(50, 56, 240, 120, C_BLACK);
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	2378      	movs	r3, #120	@ 0x78
 8001be6:	22f0      	movs	r2, #240	@ 0xf0
 8001be8:	2138      	movs	r1, #56	@ 0x38
 8001bea:	2032      	movs	r0, #50	@ 0x32
 8001bec:	f7ff fdf2 	bl	80017d4 <LCD_Fill>
		  snprintf(buffer, sizeof(buffer), "Temp: %.3f\nHumid: %.3f", data.temp, data.hum);
 8001bf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fcbf 	bl	8000578 <__aeabi_f2d>
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	460d      	mov	r5, r1
 8001bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcb8 	bl	8000578 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	1d38      	adds	r0, r7, #4
 8001c0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c12:	e9cd 4500 	strd	r4, r5, [sp]
 8001c16:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <main+0x178>)
 8001c18:	2180      	movs	r1, #128	@ 0x80
 8001c1a:	f00b fec1 	bl	800d9a0 <sniprintf>
		  LCD_PutStr(50, 56, buffer, DEFAULT_FONT, C_GREEN, C_BLACK);
 8001c1e:	1d3a      	adds	r2, r7, #4
 8001c20:	2300      	movs	r3, #0
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <main+0x17c>)
 8001c2c:	2138      	movs	r1, #56	@ 0x38
 8001c2e:	2032      	movs	r0, #50	@ 0x32
 8001c30:	f7ff feb3 	bl	800199a <LCD_PutStr>
//		  LCD_PutStr(50, 56, "Temp: " + data.temp + "\nHumid: " + data.hum, DEFAULT_FONT, C_GREEN, C_BLACK);
		  HAL_Delay(100);
 8001c34:	2064      	movs	r0, #100	@ 0x64
 8001c36:	f003 fd01 	bl	800563c <HAL_Delay>
	  }

	  // WEIGHT INPUT
	  if (current_viewport == 1) {
 8001c3a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d1a3      	bne.n	8001b8a <main+0xa2>
		  running();
 8001c42:	f7ff fb91 	bl	8001368 <running>
		  // Go back to runner screen
		  current_viewport = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  {
 8001c4c:	e79d      	b.n	8001b8a <main+0xa2>
 8001c4e:	bf00      	nop
 8001c50:	e000edf0 	.word	0xe000edf0
 8001c54:	e0001000 	.word	0xe0001000
 8001c58:	200003d0 	.word	0x200003d0
 8001c5c:	20000424 	.word	0x20000424
 8001c60:	0800fb6c 	.word	0x0800fb6c
 8001c64:	0800fb84 	.word	0x0800fb84

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b096      	sub	sp, #88	@ 0x58
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 0314 	add.w	r3, r7, #20
 8001c72:	2244      	movs	r2, #68	@ 0x44
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00b ff09 	bl	800da8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c8a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001c8e:	f005 ff1d 	bl	8007acc <HAL_PWREx_ControlVoltageScaling>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001c98:	f000 ffac 	bl	8002bf4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001c9c:	f005 fee6 	bl	8007a6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001ca0:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <SystemClock_Config+0xc0>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ca6:	4a20      	ldr	r2, [pc, #128]	@ (8001d28 <SystemClock_Config+0xc0>)
 8001ca8:	f023 0318 	bic.w	r3, r3, #24
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001cb0:	2314      	movs	r3, #20
 8001cb2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001cc0:	2360      	movs	r3, #96	@ 0x60
 8001cc2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 ffa5 	bl	8007c34 <HAL_RCC_OscConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001cf0:	f000 ff80 	bl	8002bf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf4:	230f      	movs	r3, #15
 8001cf6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f006 fbab 	bl	8008468 <HAL_RCC_ClockConfig>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001d18:	f000 ff6c 	bl	8002bf4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001d1c:	f008 f8b4 	bl	8009e88 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001d20:	bf00      	nop
 8001d22:	3758      	adds	r7, #88	@ 0x58
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000

08001d2c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0a6      	sub	sp, #152	@ 0x98
 8001d30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	2294      	movs	r2, #148	@ 0x94
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00b fea8 	bl	800da8e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8001d3e:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001d42:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	673b      	str	r3, [r7, #112]	@ 0x70
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	677b      	str	r3, [r7, #116]	@ 0x74
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001d50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001d54:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001d58:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001d62:	2318      	movs	r3, #24
 8001d64:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001d66:	2302      	movs	r3, #2
 8001d68:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <PeriphCommonClock_Config+0x64>)
 8001d74:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f006 fe33 	bl	80089e4 <HAL_RCCEx_PeriphCLKConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001d84:	f000 ff36 	bl	8002bf4 <Error_Handler>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3798      	adds	r7, #152	@ 0x98
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	01110000 	.word	0x01110000

08001d94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
 8001da8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001daa:	4b29      	ldr	r3, [pc, #164]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001dac:	4a29      	ldr	r2, [pc, #164]	@ (8001e54 <MX_ADC1_Init+0xc0>)
 8001dae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001db0:	4b27      	ldr	r3, [pc, #156]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001db6:	4b26      	ldr	r3, [pc, #152]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dbc:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dc2:	4b23      	ldr	r3, [pc, #140]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001dc8:	4b21      	ldr	r3, [pc, #132]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001dca:	2204      	movs	r2, #4
 8001dcc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001dce:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001e02:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e0a:	4811      	ldr	r0, [pc, #68]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001e0c:	f003 fdda 	bl	80059c4 <HAL_ADC_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001e16:	f000 feed 	bl	8002bf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e58 <MX_ADC1_Init+0xc4>)
 8001e1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e1e:	2306      	movs	r3, #6
 8001e20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e26:	237f      	movs	r3, #127	@ 0x7f
 8001e28:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e32:	463b      	mov	r3, r7
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	@ (8001e50 <MX_ADC1_Init+0xbc>)
 8001e38:	f003 ff0a 	bl	8005c50 <HAL_ADC_ConfigChannel>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001e42:	f000 fed7 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200002e8 	.word	0x200002e8
 8001e54:	50040000 	.word	0x50040000
 8001e58:	04300002 	.word	0x04300002

08001e5c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e62:	4a17      	ldr	r2, [pc, #92]	@ (8001ec0 <MX_CAN1_Init+0x64>)
 8001e64:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e68:	2210      	movs	r2, #16
 8001e6a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001e78:	4b10      	ldr	r3, [pc, #64]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e84:	4b0d      	ldr	r3, [pc, #52]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e96:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ea8:	4804      	ldr	r0, [pc, #16]	@ (8001ebc <MX_CAN1_Init+0x60>)
 8001eaa:	f004 facd 	bl	8006448 <HAL_CAN_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8001eb4:	f000 fe9e 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	20000350 	.word	0x20000350
 8001ec0:	40006400 	.word	0x40006400

08001ec4 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001eca:	4a13      	ldr	r2, [pc, #76]	@ (8001f18 <MX_COMP1_Init+0x54>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InvertingInput = COMP_INPUT_MINUS_VREFINT;
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001ed0:	4a12      	ldr	r2, [pc, #72]	@ (8001f1c <MX_COMP1_Init+0x58>)
 8001ed2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001ed6:	2280      	movs	r2, #128	@ 0x80
 8001ed8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	61da      	str	r2, [r3, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001eec:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001ef8:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001efe:	4805      	ldr	r0, [pc, #20]	@ (8001f14 <MX_COMP1_Init+0x50>)
 8001f00:	f004 fc46 	bl	8006790 <HAL_COMP_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_COMP1_Init+0x4a>
  {
    Error_Handler();
 8001f0a:	f000 fe73 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000378 	.word	0x20000378
 8001f18:	40010200 	.word	0x40010200
 8001f1c:	00800030 	.word	0x00800030

08001f20 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f26:	4a13      	ldr	r2, [pc, #76]	@ (8001f74 <MX_COMP2_Init+0x54>)
 8001f28:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f2c:	2270      	movs	r2, #112	@ 0x70
 8001f2e:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f32:	2280      	movs	r2, #128	@ 0x80
 8001f34:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8001f4e:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001f54:	4b06      	ldr	r3, [pc, #24]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001f5a:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <MX_COMP2_Init+0x50>)
 8001f5c:	f004 fc18 	bl	8006790 <HAL_COMP_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_COMP2_Init+0x4a>
  {
    Error_Handler();
 8001f66:	f000 fe45 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200003a4 	.word	0x200003a4
 8001f74:	40010204 	.word	0x40010204

08001f78 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff0 <MX_I2C1_Init+0x78>)
 8001f80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f84:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff4 <MX_I2C1_Init+0x7c>)
 8001f86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f88:	4b18      	ldr	r3, [pc, #96]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f94:	4b15      	ldr	r3, [pc, #84]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fac:	4b0f      	ldr	r3, [pc, #60]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fb2:	480e      	ldr	r0, [pc, #56]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fb4:	f004 ff86 	bl	8006ec4 <HAL_I2C_Init>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fbe:	f000 fe19 	bl	8002bf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4809      	ldr	r0, [pc, #36]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fc6:	f005 fcb9 	bl	800793c <HAL_I2CEx_ConfigAnalogFilter>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fd0:	f000 fe10 	bl	8002bf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4805      	ldr	r0, [pc, #20]	@ (8001fec <MX_I2C1_Init+0x74>)
 8001fd8:	f005 fcfb 	bl	80079d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fe2:	f000 fe07 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200003d0 	.word	0x200003d0
 8001ff0:	40005400 	.word	0x40005400
 8001ff4:	00707cbb 	.word	0x00707cbb

08001ff8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <MX_I2C2_Init+0x74>)
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	@ (8002070 <MX_I2C2_Init+0x78>)
 8002000:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <MX_I2C2_Init+0x74>)
 8002004:	4a1b      	ldr	r2, [pc, #108]	@ (8002074 <MX_I2C2_Init+0x7c>)
 8002006:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002008:	4b18      	ldr	r3, [pc, #96]	@ (800206c <MX_I2C2_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800200e:	4b17      	ldr	r3, [pc, #92]	@ (800206c <MX_I2C2_Init+0x74>)
 8002010:	2201      	movs	r2, #1
 8002012:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002014:	4b15      	ldr	r3, [pc, #84]	@ (800206c <MX_I2C2_Init+0x74>)
 8002016:	2200      	movs	r2, #0
 8002018:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <MX_I2C2_Init+0x74>)
 800201c:	2200      	movs	r2, #0
 800201e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002020:	4b12      	ldr	r3, [pc, #72]	@ (800206c <MX_I2C2_Init+0x74>)
 8002022:	2200      	movs	r2, #0
 8002024:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002026:	4b11      	ldr	r3, [pc, #68]	@ (800206c <MX_I2C2_Init+0x74>)
 8002028:	2200      	movs	r2, #0
 800202a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <MX_I2C2_Init+0x74>)
 800202e:	2200      	movs	r2, #0
 8002030:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002032:	480e      	ldr	r0, [pc, #56]	@ (800206c <MX_I2C2_Init+0x74>)
 8002034:	f004 ff46 	bl	8006ec4 <HAL_I2C_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800203e:	f000 fdd9 	bl	8002bf4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002042:	2100      	movs	r1, #0
 8002044:	4809      	ldr	r0, [pc, #36]	@ (800206c <MX_I2C2_Init+0x74>)
 8002046:	f005 fc79 	bl	800793c <HAL_I2CEx_ConfigAnalogFilter>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002050:	f000 fdd0 	bl	8002bf4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002054:	2100      	movs	r1, #0
 8002056:	4805      	ldr	r0, [pc, #20]	@ (800206c <MX_I2C2_Init+0x74>)
 8002058:	f005 fcbb 	bl	80079d2 <HAL_I2CEx_ConfigDigitalFilter>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002062:	f000 fdc7 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000424 	.word	0x20000424
 8002070:	40005800 	.word	0x40005800
 8002074:	00707cbb 	.word	0x00707cbb

08002078 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800207c:	4b22      	ldr	r3, [pc, #136]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 800207e:	4a23      	ldr	r2, [pc, #140]	@ (800210c <MX_LPUART1_UART_Init+0x94>)
 8002080:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002082:	4b21      	ldr	r3, [pc, #132]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b1f      	ldr	r3, [pc, #124]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002096:	4b1c      	ldr	r3, [pc, #112]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b1a      	ldr	r3, [pc, #104]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b19      	ldr	r3, [pc, #100]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020a8:	4b17      	ldr	r3, [pc, #92]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020ae:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020b4:	4b14      	ldr	r3, [pc, #80]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80020ba:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80020c0:	4811      	ldr	r0, [pc, #68]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 80020c2:	f009 ff8d 	bl	800bfe0 <HAL_UART_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80020cc:	f000 fd92 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d0:	2100      	movs	r1, #0
 80020d2:	480d      	ldr	r0, [pc, #52]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 80020d4:	f00a fdb0 	bl	800cc38 <HAL_UARTEx_SetTxFifoThreshold>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020de:	f000 fd89 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020e2:	2100      	movs	r1, #0
 80020e4:	4808      	ldr	r0, [pc, #32]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 80020e6:	f00a fde5 	bl	800ccb4 <HAL_UARTEx_SetRxFifoThreshold>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020f0:	f000 fd80 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80020f4:	4804      	ldr	r0, [pc, #16]	@ (8002108 <MX_LPUART1_UART_Init+0x90>)
 80020f6:	f00a fd66 	bl	800cbc6 <HAL_UARTEx_DisableFifoMode>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002100:	f000 fd78 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}
 8002108:	20000478 	.word	0x20000478
 800210c:	40008000 	.word	0x40008000

08002110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002114:	4b23      	ldr	r3, [pc, #140]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 8002116:	4a24      	ldr	r2, [pc, #144]	@ (80021a8 <MX_USART2_UART_Init+0x98>)
 8002118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800211a:	4b22      	ldr	r3, [pc, #136]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b20      	ldr	r3, [pc, #128]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b1e      	ldr	r3, [pc, #120]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212e:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800213a:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 800213c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002140:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002142:	4b18      	ldr	r3, [pc, #96]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 8002144:	2200      	movs	r2, #0
 8002146:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002148:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 800214a:	2200      	movs	r2, #0
 800214c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 8002150:	2200      	movs	r2, #0
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002154:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 8002156:	2200      	movs	r2, #0
 8002158:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215a:	4812      	ldr	r0, [pc, #72]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 800215c:	f009 ff40 	bl	800bfe0 <HAL_UART_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8002166:	f000 fd45 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800216a:	2100      	movs	r1, #0
 800216c:	480d      	ldr	r0, [pc, #52]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 800216e:	f00a fd63 	bl	800cc38 <HAL_UARTEx_SetTxFifoThreshold>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8002178:	f000 fd3c 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800217c:	2100      	movs	r1, #0
 800217e:	4809      	ldr	r0, [pc, #36]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 8002180:	f00a fd98 	bl	800ccb4 <HAL_UARTEx_SetRxFifoThreshold>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800218a:	f000 fd33 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <MX_USART2_UART_Init+0x94>)
 8002190:	f00a fd19 	bl	800cbc6 <HAL_UARTEx_DisableFifoMode>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800219a:	f000 fd2b 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000050c 	.word	0x2000050c
 80021a8:	40004400 	.word	0x40004400

080021ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021b0:	4b22      	ldr	r3, [pc, #136]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021b2:	4a23      	ldr	r2, [pc, #140]	@ (8002240 <MX_USART3_UART_Init+0x94>)
 80021b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021b6:	4b21      	ldr	r3, [pc, #132]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021be:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021ca:	4b1c      	ldr	r3, [pc, #112]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021d0:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021d2:	220c      	movs	r2, #12
 80021d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d6:	4b19      	ldr	r3, [pc, #100]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021dc:	4b17      	ldr	r3, [pc, #92]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e2:	4b16      	ldr	r3, [pc, #88]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021f4:	4811      	ldr	r0, [pc, #68]	@ (800223c <MX_USART3_UART_Init+0x90>)
 80021f6:	f009 fef3 	bl	800bfe0 <HAL_UART_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002200:	f000 fcf8 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002204:	2100      	movs	r1, #0
 8002206:	480d      	ldr	r0, [pc, #52]	@ (800223c <MX_USART3_UART_Init+0x90>)
 8002208:	f00a fd16 	bl	800cc38 <HAL_UARTEx_SetTxFifoThreshold>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002212:	f000 fcef 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002216:	2100      	movs	r1, #0
 8002218:	4808      	ldr	r0, [pc, #32]	@ (800223c <MX_USART3_UART_Init+0x90>)
 800221a:	f00a fd4b 	bl	800ccb4 <HAL_UARTEx_SetRxFifoThreshold>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002224:	f000 fce6 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002228:	4804      	ldr	r0, [pc, #16]	@ (800223c <MX_USART3_UART_Init+0x90>)
 800222a:	f00a fccc 	bl	800cbc6 <HAL_UARTEx_DisableFifoMode>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002234:	f000 fcde 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200005a0 	.word	0x200005a0
 8002240:	40004800 	.word	0x40004800

08002244 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002248:	4b45      	ldr	r3, [pc, #276]	@ (8002360 <MX_SAI1_Init+0x11c>)
 800224a:	4a46      	ldr	r2, [pc, #280]	@ (8002364 <MX_SAI1_Init+0x120>)
 800224c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800224e:	4b44      	ldr	r3, [pc, #272]	@ (8002360 <MX_SAI1_Init+0x11c>)
 8002250:	2200      	movs	r2, #0
 8002252:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002254:	4b42      	ldr	r3, [pc, #264]	@ (8002360 <MX_SAI1_Init+0x11c>)
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800225a:	4b41      	ldr	r3, [pc, #260]	@ (8002360 <MX_SAI1_Init+0x11c>)
 800225c:	2240      	movs	r2, #64	@ 0x40
 800225e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002260:	4b3f      	ldr	r3, [pc, #252]	@ (8002360 <MX_SAI1_Init+0x11c>)
 8002262:	2200      	movs	r2, #0
 8002264:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002266:	4b3e      	ldr	r3, [pc, #248]	@ (8002360 <MX_SAI1_Init+0x11c>)
 8002268:	2200      	movs	r2, #0
 800226a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800226c:	4b3c      	ldr	r3, [pc, #240]	@ (8002360 <MX_SAI1_Init+0x11c>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002272:	4b3b      	ldr	r3, [pc, #236]	@ (8002360 <MX_SAI1_Init+0x11c>)
 8002274:	2200      	movs	r2, #0
 8002276:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002278:	4b39      	ldr	r3, [pc, #228]	@ (8002360 <MX_SAI1_Init+0x11c>)
 800227a:	2200      	movs	r2, #0
 800227c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 800227e:	4b38      	ldr	r3, [pc, #224]	@ (8002360 <MX_SAI1_Init+0x11c>)
 8002280:	2200      	movs	r2, #0
 8002282:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002284:	4b36      	ldr	r3, [pc, #216]	@ (8002360 <MX_SAI1_Init+0x11c>)
 8002286:	2200      	movs	r2, #0
 8002288:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800228a:	4b35      	ldr	r3, [pc, #212]	@ (8002360 <MX_SAI1_Init+0x11c>)
 800228c:	4a36      	ldr	r2, [pc, #216]	@ (8002368 <MX_SAI1_Init+0x124>)
 800228e:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002290:	4b33      	ldr	r3, [pc, #204]	@ (8002360 <MX_SAI1_Init+0x11c>)
 8002292:	2200      	movs	r2, #0
 8002294:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002296:	4b32      	ldr	r3, [pc, #200]	@ (8002360 <MX_SAI1_Init+0x11c>)
 8002298:	2200      	movs	r2, #0
 800229a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800229c:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <MX_SAI1_Init+0x11c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80022a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80022a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80022b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80022b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80022be:	4b28      	ldr	r3, [pc, #160]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022c0:	2208      	movs	r2, #8
 80022c2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80022c4:	4b26      	ldr	r3, [pc, #152]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80022ca:	4b25      	ldr	r3, [pc, #148]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80022d0:	4b23      	ldr	r3, [pc, #140]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80022d6:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80022dc:	4b20      	ldr	r3, [pc, #128]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80022e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80022f4:	481a      	ldr	r0, [pc, #104]	@ (8002360 <MX_SAI1_Init+0x11c>)
 80022f6:	f008 f903 	bl	800a500 <HAL_SAI_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8002300:	f000 fc78 	bl	8002bf4 <Error_Handler>
  }
  hsai_BlockA1.Instance = SAI1_Block_A;
 8002304:	4b19      	ldr	r3, [pc, #100]	@ (800236c <MX_SAI1_Init+0x128>)
 8002306:	4a1a      	ldr	r2, [pc, #104]	@ (8002370 <MX_SAI1_Init+0x12c>)
 8002308:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <MX_SAI1_Init+0x128>)
 800230c:	2200      	movs	r2, #0
 800230e:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002310:	4b16      	ldr	r3, [pc, #88]	@ (800236c <MX_SAI1_Init+0x128>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002316:	4b15      	ldr	r3, [pc, #84]	@ (800236c <MX_SAI1_Init+0x128>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <MX_SAI1_Init+0x128>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002322:	4b12      	ldr	r3, [pc, #72]	@ (800236c <MX_SAI1_Init+0x128>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002328:	4b10      	ldr	r3, [pc, #64]	@ (800236c <MX_SAI1_Init+0x128>)
 800232a:	4a0f      	ldr	r2, [pc, #60]	@ (8002368 <MX_SAI1_Init+0x124>)
 800232c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800232e:	4b0f      	ldr	r3, [pc, #60]	@ (800236c <MX_SAI1_Init+0x128>)
 8002330:	2200      	movs	r2, #0
 8002332:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002334:	4b0d      	ldr	r3, [pc, #52]	@ (800236c <MX_SAI1_Init+0x128>)
 8002336:	2200      	movs	r2, #0
 8002338:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800233a:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <MX_SAI1_Init+0x128>)
 800233c:	2200      	movs	r2, #0
 800233e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <MX_SAI1_Init+0x128>)
 8002342:	2200      	movs	r2, #0
 8002344:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8002346:	2302      	movs	r3, #2
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	4807      	ldr	r0, [pc, #28]	@ (800236c <MX_SAI1_Init+0x128>)
 800234e:	f008 f8a5 	bl	800a49c <HAL_SAI_InitProtocol>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_SAI1_Init+0x118>
  {
    Error_Handler();
 8002358:	f000 fc4c 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000634 	.word	0x20000634
 8002364:	40015424 	.word	0x40015424
 8002368:	0002ee00 	.word	0x0002ee00
 800236c:	200006c8 	.word	0x200006c8
 8002370:	40015404 	.word	0x40015404

08002374 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8002378:	4b2f      	ldr	r3, [pc, #188]	@ (8002438 <MX_SAI2_Init+0xc4>)
 800237a:	4a30      	ldr	r2, [pc, #192]	@ (800243c <MX_SAI2_Init+0xc8>)
 800237c:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800237e:	4b2e      	ldr	r3, [pc, #184]	@ (8002438 <MX_SAI2_Init+0xc4>)
 8002380:	2200      	movs	r2, #0
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8002384:	4b2c      	ldr	r3, [pc, #176]	@ (8002438 <MX_SAI2_Init+0xc4>)
 8002386:	2200      	movs	r2, #0
 8002388:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800238a:	4b2b      	ldr	r3, [pc, #172]	@ (8002438 <MX_SAI2_Init+0xc4>)
 800238c:	2240      	movs	r2, #64	@ 0x40
 800238e:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002390:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <MX_SAI2_Init+0xc4>)
 8002392:	2200      	movs	r2, #0
 8002394:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002396:	4b28      	ldr	r3, [pc, #160]	@ (8002438 <MX_SAI2_Init+0xc4>)
 8002398:	2200      	movs	r2, #0
 800239a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800239c:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <MX_SAI2_Init+0xc4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80023a2:	4b25      	ldr	r3, [pc, #148]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80023a8:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 80023ae:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80023b4:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80023ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023bc:	4a20      	ldr	r2, [pc, #128]	@ (8002440 <MX_SAI2_Init+0xcc>)
 80023be:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80023cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80023d2:	4b19      	ldr	r3, [pc, #100]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 80023d8:	4b17      	ldr	r3, [pc, #92]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 0;
 80023e0:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80023e6:	4b14      	ldr	r3, [pc, #80]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023ec:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80023ee:	4b12      	ldr	r3, [pc, #72]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023f0:	2208      	movs	r2, #8
 80023f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80023f4:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80023fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002438 <MX_SAI2_Init+0xc4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002400:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <MX_SAI2_Init+0xc4>)
 8002402:	2200      	movs	r2, #0
 8002404:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002406:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <MX_SAI2_Init+0xc4>)
 8002408:	2200      	movs	r2, #0
 800240a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <MX_SAI2_Init+0xc4>)
 800240e:	2200      	movs	r2, #0
 8002410:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002412:	4b09      	ldr	r3, [pc, #36]	@ (8002438 <MX_SAI2_Init+0xc4>)
 8002414:	2200      	movs	r2, #0
 8002416:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8002418:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <MX_SAI2_Init+0xc4>)
 800241a:	2201      	movs	r2, #1
 800241c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <MX_SAI2_Init+0xc4>)
 8002420:	2200      	movs	r2, #0
 8002422:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8002424:	4804      	ldr	r0, [pc, #16]	@ (8002438 <MX_SAI2_Init+0xc4>)
 8002426:	f008 f86b 	bl	800a500 <HAL_SAI_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_SAI2_Init+0xc0>
  {
    Error_Handler();
 8002430:	f000 fbe0 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	2000075c 	.word	0x2000075c
 800243c:	40015804 	.word	0x40015804
 8002440:	0002ee00 	.word	0x0002ee00

08002444 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002448:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <MX_SPI3_Init+0x74>)
 800244a:	4a1c      	ldr	r2, [pc, #112]	@ (80024bc <MX_SPI3_Init+0x78>)
 800244c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800244e:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <MX_SPI3_Init+0x74>)
 8002450:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002454:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002456:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <MX_SPI3_Init+0x74>)
 8002458:	2200      	movs	r2, #0
 800245a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800245c:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <MX_SPI3_Init+0x74>)
 800245e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002462:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002464:	4b14      	ldr	r3, [pc, #80]	@ (80024b8 <MX_SPI3_Init+0x74>)
 8002466:	2200      	movs	r2, #0
 8002468:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800246a:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <MX_SPI3_Init+0x74>)
 800246c:	2200      	movs	r2, #0
 800246e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002470:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <MX_SPI3_Init+0x74>)
 8002472:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002476:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002478:	4b0f      	ldr	r3, [pc, #60]	@ (80024b8 <MX_SPI3_Init+0x74>)
 800247a:	2200      	movs	r2, #0
 800247c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <MX_SPI3_Init+0x74>)
 8002480:	2200      	movs	r2, #0
 8002482:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <MX_SPI3_Init+0x74>)
 8002486:	2200      	movs	r2, #0
 8002488:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <MX_SPI3_Init+0x74>)
 800248c:	2200      	movs	r2, #0
 800248e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002490:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <MX_SPI3_Init+0x74>)
 8002492:	2207      	movs	r2, #7
 8002494:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <MX_SPI3_Init+0x74>)
 8002498:	2200      	movs	r2, #0
 800249a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800249c:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <MX_SPI3_Init+0x74>)
 800249e:	2208      	movs	r2, #8
 80024a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024a2:	4805      	ldr	r0, [pc, #20]	@ (80024b8 <MX_SPI3_Init+0x74>)
 80024a4:	f008 fb78 	bl	800ab98 <HAL_SPI_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80024ae:	f000 fba1 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200007f0 	.word	0x200007f0
 80024bc:	40003c00 	.word	0x40003c00

080024c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b098      	sub	sp, #96	@ 0x60
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80024d2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]
 80024ee:	615a      	str	r2, [r3, #20]
 80024f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024f2:	463b      	mov	r3, r7
 80024f4:	222c      	movs	r2, #44	@ 0x2c
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f00b fac8 	bl	800da8e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002628 <MX_TIM1_Init+0x168>)
 8002500:	4a4a      	ldr	r2, [pc, #296]	@ (800262c <MX_TIM1_Init+0x16c>)
 8002502:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002504:	4b48      	ldr	r3, [pc, #288]	@ (8002628 <MX_TIM1_Init+0x168>)
 8002506:	2200      	movs	r2, #0
 8002508:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250a:	4b47      	ldr	r3, [pc, #284]	@ (8002628 <MX_TIM1_Init+0x168>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002510:	4b45      	ldr	r3, [pc, #276]	@ (8002628 <MX_TIM1_Init+0x168>)
 8002512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002516:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002518:	4b43      	ldr	r3, [pc, #268]	@ (8002628 <MX_TIM1_Init+0x168>)
 800251a:	2200      	movs	r2, #0
 800251c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800251e:	4b42      	ldr	r3, [pc, #264]	@ (8002628 <MX_TIM1_Init+0x168>)
 8002520:	2200      	movs	r2, #0
 8002522:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002524:	4b40      	ldr	r3, [pc, #256]	@ (8002628 <MX_TIM1_Init+0x168>)
 8002526:	2200      	movs	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800252a:	483f      	ldr	r0, [pc, #252]	@ (8002628 <MX_TIM1_Init+0x168>)
 800252c:	f008 feb0 	bl	800b290 <HAL_TIM_PWM_Init>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002536:	f000 fb5d 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800253a:	2300      	movs	r3, #0
 800253c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002542:	2300      	movs	r3, #0
 8002544:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002546:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800254a:	4619      	mov	r1, r3
 800254c:	4836      	ldr	r0, [pc, #216]	@ (8002628 <MX_TIM1_Init+0x168>)
 800254e:	f009 fb7b 	bl	800bc48 <HAL_TIMEx_MasterConfigSynchronization>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8002558:	f000 fb4c 	bl	8002bf4 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 800255c:	2301      	movs	r3, #1
 800255e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8002560:	2301      	movs	r3, #1
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002564:	2300      	movs	r3, #0
 8002566:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002568:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800256c:	461a      	mov	r2, r3
 800256e:	2101      	movs	r1, #1
 8002570:	482d      	ldr	r0, [pc, #180]	@ (8002628 <MX_TIM1_Init+0x168>)
 8002572:	f009 fc6f 	bl	800be54 <HAL_TIMEx_ConfigBreakInput>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800257c:	f000 fb3a 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8002580:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002584:	461a      	mov	r2, r3
 8002586:	2102      	movs	r1, #2
 8002588:	4827      	ldr	r0, [pc, #156]	@ (8002628 <MX_TIM1_Init+0x168>)
 800258a:	f009 fc63 	bl	800be54 <HAL_TIMEx_ConfigBreakInput>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8002594:	f000 fb2e 	bl	8002bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002598:	2360      	movs	r3, #96	@ 0x60
 800259a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025a4:	2300      	movs	r3, #0
 80025a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025ac:	2300      	movs	r3, #0
 80025ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025b0:	2300      	movs	r3, #0
 80025b2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025b8:	2208      	movs	r2, #8
 80025ba:	4619      	mov	r1, r3
 80025bc:	481a      	ldr	r0, [pc, #104]	@ (8002628 <MX_TIM1_Init+0x168>)
 80025be:	f008 febf 	bl	800b340 <HAL_TIM_PWM_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80025c8:	f000 fb14 	bl	8002bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80025cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80025d0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80025d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 80025e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 80025f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80025f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002604:	463b      	mov	r3, r7
 8002606:	4619      	mov	r1, r3
 8002608:	4807      	ldr	r0, [pc, #28]	@ (8002628 <MX_TIM1_Init+0x168>)
 800260a:	f009 fba5 	bl	800bd58 <HAL_TIMEx_ConfigBreakDeadTime>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8002614:	f000 faee 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002618:	4803      	ldr	r0, [pc, #12]	@ (8002628 <MX_TIM1_Init+0x168>)
 800261a:	f000 feb3 	bl	8003384 <HAL_TIM_MspPostInit>

}
 800261e:	bf00      	nop
 8002620:	3760      	adds	r7, #96	@ 0x60
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000854 	.word	0x20000854
 800262c:	40012c00 	.word	0x40012c00

08002630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b08a      	sub	sp, #40	@ 0x28
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002636:	f107 031c 	add.w	r3, r7, #28
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002642:	463b      	mov	r3, r7
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002654:	4b27      	ldr	r3, [pc, #156]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 8002656:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800265a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800265c:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 800265e:	2200      	movs	r2, #0
 8002660:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002662:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 8002664:	2200      	movs	r2, #0
 8002666:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002668:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 800266a:	f04f 32ff 	mov.w	r2, #4294967295
 800266e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002670:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002676:	4b1f      	ldr	r3, [pc, #124]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 8002678:	2200      	movs	r2, #0
 800267a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800267c:	481d      	ldr	r0, [pc, #116]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 800267e:	f008 fe07 	bl	800b290 <HAL_TIM_PWM_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002688:	f000 fab4 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268c:	2300      	movs	r3, #0
 800268e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	4816      	ldr	r0, [pc, #88]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 800269c:	f009 fad4 	bl	800bc48 <HAL_TIMEx_MasterConfigSynchronization>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80026a6:	f000 faa5 	bl	8002bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026aa:	2360      	movs	r3, #96	@ 0x60
 80026ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ba:	463b      	mov	r3, r7
 80026bc:	2200      	movs	r2, #0
 80026be:	4619      	mov	r1, r3
 80026c0:	480c      	ldr	r0, [pc, #48]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 80026c2:	f008 fe3d 	bl	800b340 <HAL_TIM_PWM_ConfigChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80026cc:	f000 fa92 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026d0:	463b      	mov	r3, r7
 80026d2:	2208      	movs	r2, #8
 80026d4:	4619      	mov	r1, r3
 80026d6:	4807      	ldr	r0, [pc, #28]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 80026d8:	f008 fe32 	bl	800b340 <HAL_TIM_PWM_ConfigChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80026e2:	f000 fa87 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026e6:	4803      	ldr	r0, [pc, #12]	@ (80026f4 <MX_TIM2_Init+0xc4>)
 80026e8:	f000 fe4c 	bl	8003384 <HAL_TIM_MspPostInit>

}
 80026ec:	bf00      	nop
 80026ee:	3728      	adds	r7, #40	@ 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	200008a0 	.word	0x200008a0

080026f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08a      	sub	sp, #40	@ 0x28
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fe:	f107 031c 	add.w	r3, r7, #28
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800270a:	463b      	mov	r3, r7
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	615a      	str	r2, [r3, #20]
 800271a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800271c:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <MX_TIM3_Init+0xc4>)
 800271e:	4a28      	ldr	r2, [pc, #160]	@ (80027c0 <MX_TIM3_Init+0xc8>)
 8002720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002722:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <MX_TIM3_Init+0xc4>)
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002728:	4b24      	ldr	r3, [pc, #144]	@ (80027bc <MX_TIM3_Init+0xc4>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800272e:	4b23      	ldr	r3, [pc, #140]	@ (80027bc <MX_TIM3_Init+0xc4>)
 8002730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002734:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002736:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <MX_TIM3_Init+0xc4>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273c:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <MX_TIM3_Init+0xc4>)
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002742:	481e      	ldr	r0, [pc, #120]	@ (80027bc <MX_TIM3_Init+0xc4>)
 8002744:	f008 fda4 	bl	800b290 <HAL_TIM_PWM_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800274e:	f000 fa51 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800275a:	f107 031c 	add.w	r3, r7, #28
 800275e:	4619      	mov	r1, r3
 8002760:	4816      	ldr	r0, [pc, #88]	@ (80027bc <MX_TIM3_Init+0xc4>)
 8002762:	f009 fa71 	bl	800bc48 <HAL_TIMEx_MasterConfigSynchronization>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800276c:	f000 fa42 	bl	8002bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002770:	2360      	movs	r3, #96	@ 0x60
 8002772:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002780:	463b      	mov	r3, r7
 8002782:	2204      	movs	r2, #4
 8002784:	4619      	mov	r1, r3
 8002786:	480d      	ldr	r0, [pc, #52]	@ (80027bc <MX_TIM3_Init+0xc4>)
 8002788:	f008 fdda 	bl	800b340 <HAL_TIM_PWM_ConfigChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002792:	f000 fa2f 	bl	8002bf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002796:	463b      	mov	r3, r7
 8002798:	2208      	movs	r2, #8
 800279a:	4619      	mov	r1, r3
 800279c:	4807      	ldr	r0, [pc, #28]	@ (80027bc <MX_TIM3_Init+0xc4>)
 800279e:	f008 fdcf 	bl	800b340 <HAL_TIM_PWM_ConfigChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80027a8:	f000 fa24 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027ac:	4803      	ldr	r0, [pc, #12]	@ (80027bc <MX_TIM3_Init+0xc4>)
 80027ae:	f000 fde9 	bl	8003384 <HAL_TIM_MspPostInit>

}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	@ 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200008ec 	.word	0x200008ec
 80027c0:	40000400 	.word	0x40000400

080027c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b08a      	sub	sp, #40	@ 0x28
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027d6:	463b      	mov	r3, r7
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
 80027e4:	615a      	str	r2, [r3, #20]
 80027e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027e8:	4b21      	ldr	r3, [pc, #132]	@ (8002870 <MX_TIM4_Init+0xac>)
 80027ea:	4a22      	ldr	r2, [pc, #136]	@ (8002874 <MX_TIM4_Init+0xb0>)
 80027ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027ee:	4b20      	ldr	r3, [pc, #128]	@ (8002870 <MX_TIM4_Init+0xac>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002870 <MX_TIM4_Init+0xac>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80027fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002870 <MX_TIM4_Init+0xac>)
 80027fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002800:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002802:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <MX_TIM4_Init+0xac>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002808:	4b19      	ldr	r3, [pc, #100]	@ (8002870 <MX_TIM4_Init+0xac>)
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800280e:	4818      	ldr	r0, [pc, #96]	@ (8002870 <MX_TIM4_Init+0xac>)
 8002810:	f008 fd3e 	bl	800b290 <HAL_TIM_PWM_Init>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800281a:	f000 f9eb 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002826:	f107 031c 	add.w	r3, r7, #28
 800282a:	4619      	mov	r1, r3
 800282c:	4810      	ldr	r0, [pc, #64]	@ (8002870 <MX_TIM4_Init+0xac>)
 800282e:	f009 fa0b 	bl	800bc48 <HAL_TIMEx_MasterConfigSynchronization>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002838:	f000 f9dc 	bl	8002bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800283c:	2360      	movs	r3, #96	@ 0x60
 800283e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002844:	2300      	movs	r3, #0
 8002846:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800284c:	463b      	mov	r3, r7
 800284e:	220c      	movs	r2, #12
 8002850:	4619      	mov	r1, r3
 8002852:	4807      	ldr	r0, [pc, #28]	@ (8002870 <MX_TIM4_Init+0xac>)
 8002854:	f008 fd74 	bl	800b340 <HAL_TIM_PWM_ConfigChannel>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800285e:	f000 f9c9 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002862:	4803      	ldr	r0, [pc, #12]	@ (8002870 <MX_TIM4_Init+0xac>)
 8002864:	f000 fd8e 	bl	8003384 <HAL_TIM_MspPostInit>

}
 8002868:	bf00      	nop
 800286a:	3728      	adds	r7, #40	@ 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20000938 	.word	0x20000938
 8002874:	40000800 	.word	0x40000800

08002878 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b096      	sub	sp, #88	@ 0x58
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800287e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800288a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	615a      	str	r2, [r3, #20]
 800289c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	222c      	movs	r2, #44	@ 0x2c
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f00b f8f2 	bl	800da8e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80028aa:	4b33      	ldr	r3, [pc, #204]	@ (8002978 <MX_TIM15_Init+0x100>)
 80028ac:	4a33      	ldr	r2, [pc, #204]	@ (800297c <MX_TIM15_Init+0x104>)
 80028ae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80028b0:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <MX_TIM15_Init+0x100>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b6:	4b30      	ldr	r3, [pc, #192]	@ (8002978 <MX_TIM15_Init+0x100>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80028bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002978 <MX_TIM15_Init+0x100>)
 80028be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028c2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002978 <MX_TIM15_Init+0x100>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80028ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002978 <MX_TIM15_Init+0x100>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028d0:	4b29      	ldr	r3, [pc, #164]	@ (8002978 <MX_TIM15_Init+0x100>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80028d6:	4828      	ldr	r0, [pc, #160]	@ (8002978 <MX_TIM15_Init+0x100>)
 80028d8:	f008 fcda 	bl	800b290 <HAL_TIM_PWM_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80028e2:	f000 f987 	bl	8002bf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e6:	2300      	movs	r3, #0
 80028e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80028ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80028f2:	4619      	mov	r1, r3
 80028f4:	4820      	ldr	r0, [pc, #128]	@ (8002978 <MX_TIM15_Init+0x100>)
 80028f6:	f009 f9a7 	bl	800bc48 <HAL_TIMEx_MasterConfigSynchronization>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8002900:	f000 f978 	bl	8002bf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002904:	2360      	movs	r3, #96	@ 0x60
 8002906:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800290c:	2300      	movs	r3, #0
 800290e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002910:	2300      	movs	r3, #0
 8002912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800291c:	2300      	movs	r3, #0
 800291e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002920:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002924:	2200      	movs	r2, #0
 8002926:	4619      	mov	r1, r3
 8002928:	4813      	ldr	r0, [pc, #76]	@ (8002978 <MX_TIM15_Init+0x100>)
 800292a:	f008 fd09 	bl	800b340 <HAL_TIM_PWM_ConfigChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8002934:	f000 f95e 	bl	8002bf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002938:	2300      	movs	r3, #0
 800293a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800294c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002950:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4807      	ldr	r0, [pc, #28]	@ (8002978 <MX_TIM15_Init+0x100>)
 800295c:	f009 f9fc 	bl	800bd58 <HAL_TIMEx_ConfigBreakDeadTime>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8002966:	f000 f945 	bl	8002bf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800296a:	4803      	ldr	r0, [pc, #12]	@ (8002978 <MX_TIM15_Init+0x100>)
 800296c:	f000 fd0a 	bl	8003384 <HAL_TIM_MspPostInit>

}
 8002970:	bf00      	nop
 8002972:	3758      	adds	r7, #88	@ 0x58
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000984 	.word	0x20000984
 800297c:	40014000 	.word	0x40014000

08002980 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08e      	sub	sp, #56	@ 0x38
 8002994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029a6:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	4a84      	ldr	r2, [pc, #528]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029ac:	f043 0310 	orr.w	r3, r3, #16
 80029b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b2:	4b82      	ldr	r3, [pc, #520]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029be:	4b7f      	ldr	r3, [pc, #508]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c2:	4a7e      	ldr	r2, [pc, #504]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ca:	4b7c      	ldr	r3, [pc, #496]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	61fb      	str	r3, [r7, #28]
 80029d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029d6:	4b79      	ldr	r3, [pc, #484]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029da:	4a78      	ldr	r2, [pc, #480]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029dc:	f043 0320 	orr.w	r3, r3, #32
 80029e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029e2:	4b76      	ldr	r3, [pc, #472]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	61bb      	str	r3, [r7, #24]
 80029ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029ee:	4b73      	ldr	r3, [pc, #460]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	4a72      	ldr	r2, [pc, #456]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029fa:	4b70      	ldr	r3, [pc, #448]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	4b6d      	ldr	r3, [pc, #436]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	4a6c      	ldr	r2, [pc, #432]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a12:	4b6a      	ldr	r3, [pc, #424]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1e:	4b67      	ldr	r3, [pc, #412]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a22:	4a66      	ldr	r2, [pc, #408]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a2a:	4b64      	ldr	r3, [pc, #400]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a36:	4b61      	ldr	r3, [pc, #388]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a3a:	4a60      	ldr	r2, [pc, #384]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a3c:	f043 0308 	orr.w	r3, r3, #8
 8002a40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a42:	4b5e      	ldr	r3, [pc, #376]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a52:	4a5a      	ldr	r2, [pc, #360]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a5a:	4b58      	ldr	r3, [pc, #352]	@ (8002bbc <MX_GPIO_Init+0x22c>)
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002a66:	f005 f8d5 	bl	8007c14 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002a70:	4853      	ldr	r0, [pc, #332]	@ (8002bc0 <MX_GPIO_Init+0x230>)
 8002a72:	f004 fa0f 	bl	8006e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002a76:	2200      	movs	r2, #0
 8002a78:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 8002a7c:	4851      	ldr	r0, [pc, #324]	@ (8002bc4 <MX_GPIO_Init+0x234>)
 8002a7e:	f004 fa09 	bl	8006e94 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a82:	2310      	movs	r3, #16
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a86:	2302      	movs	r3, #2
 8002a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a92:	2305      	movs	r3, #5
 8002a94:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aa0:	f004 f84e 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002aa4:	23e0      	movs	r3, #224	@ 0xe0
 8002aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aba:	f004 f841 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF13 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8002abe:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002ac4:	2311      	movs	r3, #17
 8002ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	483a      	ldr	r0, [pc, #232]	@ (8002bc0 <MX_GPIO_Init+0x230>)
 8002ad8:	f004 f832 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8002adc:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af2:	4619      	mov	r1, r3
 8002af4:	4833      	ldr	r0, [pc, #204]	@ (8002bc4 <MX_GPIO_Init+0x234>)
 8002af6:	f004 f823 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002afa:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b00:	2311      	movs	r3, #17
 8002b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b10:	4619      	mov	r1, r3
 8002b12:	482c      	ldr	r0, [pc, #176]	@ (8002bc4 <MX_GPIO_Init+0x234>)
 8002b14:	f004 f814 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002b18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b22:	2301      	movs	r3, #1
 8002b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4826      	ldr	r0, [pc, #152]	@ (8002bc8 <MX_GPIO_Init+0x238>)
 8002b2e:	f004 f807 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b40:	2303      	movs	r3, #3
 8002b42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002b44:	230c      	movs	r3, #12
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	481f      	ldr	r0, [pc, #124]	@ (8002bcc <MX_GPIO_Init+0x23c>)
 8002b50:	f003 fff6 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002b54:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b66:	230a      	movs	r3, #10
 8002b68:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b74:	f003 ffe4 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b90:	f003 ffd6 	bl	8006b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b94:	2304      	movs	r3, #4
 8002b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ba4:	230c      	movs	r3, #12
 8002ba6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bac:	4619      	mov	r1, r3
 8002bae:	4806      	ldr	r0, [pc, #24]	@ (8002bc8 <MX_GPIO_Init+0x238>)
 8002bb0:	f003 ffc6 	bl	8006b40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bb4:	bf00      	nop
 8002bb6:	3738      	adds	r7, #56	@ 0x38
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	48001400 	.word	0x48001400
 8002bc4:	48001000 	.word	0x48001000
 8002bc8:	48000c00 	.word	0x48000c00
 8002bcc:	48000800 	.word	0x48000800

08002bd0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002bd8:	1d39      	adds	r1, r7, #4
 8002bda:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002bde:	2201      	movs	r2, #1
 8002be0:	4803      	ldr	r0, [pc, #12]	@ (8002bf0 <__io_putchar+0x20>)
 8002be2:	f009 fa4d 	bl	800c080 <HAL_UART_Transmit>
  return ch;
 8002be6:	687b      	ldr	r3, [r7, #4]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000478 	.word	0x20000478

08002bf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf8:	b672      	cpsid	i
}
 8002bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002bfc:	bf00      	nop
 8002bfe:	e7fd      	b.n	8002bfc <Error_Handler+0x8>

08002c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	4b0f      	ldr	r3, [pc, #60]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c12:	4b0c      	ldr	r3, [pc, #48]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	607b      	str	r3, [r7, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c22:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c28:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c2a:	4b06      	ldr	r3, [pc, #24]	@ (8002c44 <HAL_MspInit+0x44>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08c      	sub	sp, #48	@ 0x30
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c50:	f107 031c 	add.w	r3, r7, #28
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
 8002c5c:	60da      	str	r2, [r3, #12]
 8002c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <HAL_ADC_MspInit+0xd4>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d154      	bne.n	8002d14 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002c70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c76:	4b2a      	ldr	r3, [pc, #168]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c82:	4b27      	ldr	r3, [pc, #156]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	4a26      	ldr	r2, [pc, #152]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c8e:	4b24      	ldr	r3, [pc, #144]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	4b21      	ldr	r3, [pc, #132]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9e:	4a20      	ldr	r2, [pc, #128]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cbe:	4b18      	ldr	r3, [pc, #96]	@ (8002d20 <HAL_ADC_MspInit+0xd8>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	60fb      	str	r3, [r7, #12]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN8
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002cca:	233f      	movs	r3, #63	@ 0x3f
 8002ccc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002cce:	230b      	movs	r3, #11
 8002cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd6:	f107 031c 	add.w	r3, r7, #28
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4811      	ldr	r0, [pc, #68]	@ (8002d24 <HAL_ADC_MspInit+0xdc>)
 8002cde:	f003 ff2f 	bl	8006b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002ce2:	230a      	movs	r3, #10
 8002ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002ce6:	230b      	movs	r3, #11
 8002ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cee:	f107 031c 	add.w	r3, r7, #28
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cf8:	f003 ff22 	bl	8006b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002d00:	230b      	movs	r3, #11
 8002d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4806      	ldr	r0, [pc, #24]	@ (8002d28 <HAL_ADC_MspInit+0xe0>)
 8002d10:	f003 ff16 	bl	8006b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d14:	bf00      	nop
 8002d16:	3730      	adds	r7, #48	@ 0x30
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	50040000 	.word	0x50040000
 8002d20:	40021000 	.word	0x40021000
 8002d24:	48000800 	.word	0x48000800
 8002d28:	48000400 	.word	0x48000400

08002d2c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 0314 	add.w	r3, r7, #20
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a17      	ldr	r2, [pc, #92]	@ (8002da8 <HAL_CAN_MspInit+0x7c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d127      	bne.n	8002d9e <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002d4e:	4b17      	ldr	r3, [pc, #92]	@ (8002dac <HAL_CAN_MspInit+0x80>)
 8002d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d52:	4a16      	ldr	r2, [pc, #88]	@ (8002dac <HAL_CAN_MspInit+0x80>)
 8002d54:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d5a:	4b14      	ldr	r3, [pc, #80]	@ (8002dac <HAL_CAN_MspInit+0x80>)
 8002d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d66:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <HAL_CAN_MspInit+0x80>)
 8002d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d6a:	4a10      	ldr	r2, [pc, #64]	@ (8002dac <HAL_CAN_MspInit+0x80>)
 8002d6c:	f043 0308 	orr.w	r3, r3, #8
 8002d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d72:	4b0e      	ldr	r3, [pc, #56]	@ (8002dac <HAL_CAN_MspInit+0x80>)
 8002d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002d8e:	2309      	movs	r3, #9
 8002d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d92:	f107 0314 	add.w	r3, r7, #20
 8002d96:	4619      	mov	r1, r3
 8002d98:	4805      	ldr	r0, [pc, #20]	@ (8002db0 <HAL_CAN_MspInit+0x84>)
 8002d9a:	f003 fed1 	bl	8006b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002d9e:	bf00      	nop
 8002da0:	3728      	adds	r7, #40	@ 0x28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40006400 	.word	0x40006400
 8002dac:	40021000 	.word	0x40021000
 8002db0:	48000c00 	.word	0x48000c00

08002db4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b08a      	sub	sp, #40	@ 0x28
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 0314 	add.w	r3, r7, #20
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e4c <HAL_COMP_MspInit+0x98>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d118      	bne.n	8002e08 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e50 <HAL_COMP_MspInit+0x9c>)
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dda:	4a1d      	ldr	r2, [pc, #116]	@ (8002e50 <HAL_COMP_MspInit+0x9c>)
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_COMP_MspInit+0x9c>)
 8002de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dee:	2304      	movs	r3, #4
 8002df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002df2:	2303      	movs	r3, #3
 8002df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4814      	ldr	r0, [pc, #80]	@ (8002e54 <HAL_COMP_MspInit+0xa0>)
 8002e02:	f003 fe9d 	bl	8006b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8002e06:	e01c      	b.n	8002e42 <HAL_COMP_MspInit+0x8e>
  else if(hcomp->Instance==COMP2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <HAL_COMP_MspInit+0xa4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d117      	bne.n	8002e42 <HAL_COMP_MspInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e12:	4b0f      	ldr	r3, [pc, #60]	@ (8002e50 <HAL_COMP_MspInit+0x9c>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	4a0e      	ldr	r2, [pc, #56]	@ (8002e50 <HAL_COMP_MspInit+0x9c>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002e50 <HAL_COMP_MspInit+0x9c>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e2a:	23c0      	movs	r3, #192	@ 0xc0
 8002e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4805      	ldr	r0, [pc, #20]	@ (8002e54 <HAL_COMP_MspInit+0xa0>)
 8002e3e:	f003 fe7f 	bl	8006b40 <HAL_GPIO_Init>
}
 8002e42:	bf00      	nop
 8002e44:	3728      	adds	r7, #40	@ 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40010200 	.word	0x40010200
 8002e50:	40021000 	.word	0x40021000
 8002e54:	48000400 	.word	0x48000400
 8002e58:	40010204 	.word	0x40010204

08002e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b0b0      	sub	sp, #192	@ 0xc0
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e74:	f107 0318 	add.w	r3, r7, #24
 8002e78:	2294      	movs	r2, #148	@ 0x94
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f00a fe06 	bl	800da8e <memset>
  if(hi2c->Instance==I2C1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a4c      	ldr	r2, [pc, #304]	@ (8002fb8 <HAL_I2C_MspInit+0x15c>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d13c      	bne.n	8002f06 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002e8c:	2340      	movs	r3, #64	@ 0x40
 8002e8e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002e90:	2300      	movs	r3, #0
 8002e92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e94:	f107 0318 	add.w	r3, r7, #24
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 fda3 	bl	80089e4 <HAL_RCCEx_PeriphCLKConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002ea4:	f7ff fea6 	bl	8002bf4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea8:	4b44      	ldr	r3, [pc, #272]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eac:	4a43      	ldr	r2, [pc, #268]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002eae:	f043 0302 	orr.w	r3, r3, #2
 8002eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eb4:	4b41      	ldr	r3, [pc, #260]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ec0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ec4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec8:	2312      	movs	r3, #18
 8002eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002eda:	2304      	movs	r3, #4
 8002edc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4836      	ldr	r0, [pc, #216]	@ (8002fc0 <HAL_I2C_MspInit+0x164>)
 8002ee8:	f003 fe2a 	bl	8006b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eec:	4b33      	ldr	r3, [pc, #204]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef0:	4a32      	ldr	r2, [pc, #200]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002ef2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ef6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef8:	4b30      	ldr	r3, [pc, #192]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f04:	e054      	b.n	8002fb0 <HAL_I2C_MspInit+0x154>
  else if(hi2c->Instance==I2C2)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc4 <HAL_I2C_MspInit+0x168>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d14f      	bne.n	8002fb0 <HAL_I2C_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f10:	2380      	movs	r3, #128	@ 0x80
 8002f12:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002f14:	2300      	movs	r3, #0
 8002f16:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f18:	f107 0318 	add.w	r3, r7, #24
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f005 fd61 	bl	80089e4 <HAL_RCCEx_PeriphCLKConfig>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8002f28:	f7ff fe64 	bl	8002bf4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f2c:	4b23      	ldr	r3, [pc, #140]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f30:	4a22      	ldr	r2, [pc, #136]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002f32:	f043 0320 	orr.w	r3, r3, #32
 8002f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f38:	4b20      	ldr	r3, [pc, #128]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f44:	2303      	movs	r3, #3
 8002f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f4a:	2312      	movs	r3, #18
 8002f4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f56:	2303      	movs	r3, #3
 8002f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f62:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002f66:	4619      	mov	r1, r3
 8002f68:	4817      	ldr	r0, [pc, #92]	@ (8002fc8 <HAL_I2C_MspInit+0x16c>)
 8002f6a:	f003 fde9 	bl	8006b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f6e:	2304      	movs	r3, #4
 8002f70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f74:	2312      	movs	r3, #18
 8002f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f80:	2303      	movs	r3, #3
 8002f82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f86:	2304      	movs	r3, #4
 8002f88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f8c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002f90:	4619      	mov	r1, r3
 8002f92:	480d      	ldr	r0, [pc, #52]	@ (8002fc8 <HAL_I2C_MspInit+0x16c>)
 8002f94:	f003 fdd4 	bl	8006b40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	4a07      	ldr	r2, [pc, #28]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002f9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fa4:	4b05      	ldr	r3, [pc, #20]	@ (8002fbc <HAL_I2C_MspInit+0x160>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	37c0      	adds	r7, #192	@ 0xc0
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40005400 	.word	0x40005400
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	48000400 	.word	0x48000400
 8002fc4:	40005800 	.word	0x40005800
 8002fc8:	48001400 	.word	0x48001400

08002fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b0b2      	sub	sp, #200	@ 0xc8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fe4:	f107 0320 	add.w	r3, r7, #32
 8002fe8:	2294      	movs	r2, #148	@ 0x94
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f00a fd4e 	bl	800da8e <memset>
  if(huart->Instance==LPUART1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a64      	ldr	r2, [pc, #400]	@ (8003188 <HAL_UART_MspInit+0x1bc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d13e      	bne.n	800307a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002ffc:	2320      	movs	r3, #32
 8002ffe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003000:	2300      	movs	r3, #0
 8003002:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003004:	f107 0320 	add.w	r3, r7, #32
 8003008:	4618      	mov	r0, r3
 800300a:	f005 fceb 	bl	80089e4 <HAL_RCCEx_PeriphCLKConfig>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003014:	f7ff fdee 	bl	8002bf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003018:	4b5c      	ldr	r3, [pc, #368]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 800301a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301c:	4a5b      	ldr	r2, [pc, #364]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003024:	4b59      	ldr	r3, [pc, #356]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 8003026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003030:	4b56      	ldr	r3, [pc, #344]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 8003032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003034:	4a55      	ldr	r2, [pc, #340]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 8003036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800303a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800303c:	4b53      	ldr	r3, [pc, #332]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 800303e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003044:	61bb      	str	r3, [r7, #24]
 8003046:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8003048:	f004 fde4 	bl	8007c14 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800304c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003060:	2303      	movs	r3, #3
 8003062:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003066:	2308      	movs	r3, #8
 8003068:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800306c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003070:	4619      	mov	r1, r3
 8003072:	4847      	ldr	r0, [pc, #284]	@ (8003190 <HAL_UART_MspInit+0x1c4>)
 8003074:	f003 fd64 	bl	8006b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003078:	e081      	b.n	800317e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a45      	ldr	r2, [pc, #276]	@ (8003194 <HAL_UART_MspInit+0x1c8>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d13b      	bne.n	80030fc <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003084:	2302      	movs	r3, #2
 8003086:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003088:	2300      	movs	r3, #0
 800308a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800308c:	f107 0320 	add.w	r3, r7, #32
 8003090:	4618      	mov	r0, r3
 8003092:	f005 fca7 	bl	80089e4 <HAL_RCCEx_PeriphCLKConfig>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800309c:	f7ff fdaa 	bl	8002bf4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030a0:	4b3a      	ldr	r3, [pc, #232]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 80030a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a4:	4a39      	ldr	r2, [pc, #228]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 80030a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ac:	4b37      	ldr	r3, [pc, #220]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b4:	617b      	str	r3, [r7, #20]
 80030b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030b8:	4b34      	ldr	r3, [pc, #208]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 80030ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030bc:	4a33      	ldr	r2, [pc, #204]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80030c4:	4b31      	ldr	r3, [pc, #196]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 80030c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80030d0:	2378      	movs	r3, #120	@ 0x78
 80030d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d6:	2302      	movs	r3, #2
 80030d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030e8:	2307      	movs	r3, #7
 80030ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ee:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80030f2:	4619      	mov	r1, r3
 80030f4:	4828      	ldr	r0, [pc, #160]	@ (8003198 <HAL_UART_MspInit+0x1cc>)
 80030f6:	f003 fd23 	bl	8006b40 <HAL_GPIO_Init>
}
 80030fa:	e040      	b.n	800317e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a26      	ldr	r2, [pc, #152]	@ (800319c <HAL_UART_MspInit+0x1d0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d13b      	bne.n	800317e <HAL_UART_MspInit+0x1b2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003106:	2304      	movs	r3, #4
 8003108:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800310a:	2300      	movs	r3, #0
 800310c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800310e:	f107 0320 	add.w	r3, r7, #32
 8003112:	4618      	mov	r0, r3
 8003114:	f005 fc66 	bl	80089e4 <HAL_RCCEx_PeriphCLKConfig>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_UART_MspInit+0x156>
      Error_Handler();
 800311e:	f7ff fd69 	bl	8002bf4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003122:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003126:	4a19      	ldr	r2, [pc, #100]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800312c:	6593      	str	r3, [r2, #88]	@ 0x58
 800312e:	4b17      	ldr	r3, [pc, #92]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800313a:	4b14      	ldr	r3, [pc, #80]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 800313c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313e:	4a13      	ldr	r2, [pc, #76]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003146:	4b11      	ldr	r3, [pc, #68]	@ (800318c <HAL_UART_MspInit+0x1c0>)
 8003148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003152:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003156:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	2302      	movs	r3, #2
 800315c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003166:	2303      	movs	r3, #3
 8003168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800316c:	2307      	movs	r3, #7
 800316e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003172:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8003176:	4619      	mov	r1, r3
 8003178:	4807      	ldr	r0, [pc, #28]	@ (8003198 <HAL_UART_MspInit+0x1cc>)
 800317a:	f003 fce1 	bl	8006b40 <HAL_GPIO_Init>
}
 800317e:	bf00      	nop
 8003180:	37c8      	adds	r7, #200	@ 0xc8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40008000 	.word	0x40008000
 800318c:	40021000 	.word	0x40021000
 8003190:	48001800 	.word	0x48001800
 8003194:	40004400 	.word	0x40004400
 8003198:	48000c00 	.word	0x48000c00
 800319c:	40004800 	.word	0x40004800

080031a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b08a      	sub	sp, #40	@ 0x28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a17      	ldr	r2, [pc, #92]	@ (800321c <HAL_SPI_MspInit+0x7c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d128      	bne.n	8003214 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80031c2:	4b17      	ldr	r3, [pc, #92]	@ (8003220 <HAL_SPI_MspInit+0x80>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	4a16      	ldr	r2, [pc, #88]	@ (8003220 <HAL_SPI_MspInit+0x80>)
 80031c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80031ce:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <HAL_SPI_MspInit+0x80>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031da:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <HAL_SPI_MspInit+0x80>)
 80031dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031de:	4a10      	ldr	r2, [pc, #64]	@ (8003220 <HAL_SPI_MspInit+0x80>)
 80031e0:	f043 0304 	orr.w	r3, r3, #4
 80031e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <HAL_SPI_MspInit+0x80>)
 80031e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80031f2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80031f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f8:	2302      	movs	r3, #2
 80031fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003200:	2303      	movs	r3, #3
 8003202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003204:	2306      	movs	r3, #6
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	4805      	ldr	r0, [pc, #20]	@ (8003224 <HAL_SPI_MspInit+0x84>)
 8003210:	f003 fc96 	bl	8006b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003214:	bf00      	nop
 8003216:	3728      	adds	r7, #40	@ 0x28
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40003c00 	.word	0x40003c00
 8003220:	40021000 	.word	0x40021000
 8003224:	48000800 	.word	0x48000800

08003228 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08e      	sub	sp, #56	@ 0x38
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a49      	ldr	r2, [pc, #292]	@ (800336c <HAL_TIM_PWM_MspInit+0x144>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d129      	bne.n	800329e <HAL_TIM_PWM_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800324a:	4b49      	ldr	r3, [pc, #292]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 800324c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800324e:	4a48      	ldr	r2, [pc, #288]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 8003250:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003254:	6613      	str	r3, [r2, #96]	@ 0x60
 8003256:	4b46      	ldr	r3, [pc, #280]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 8003258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800325a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800325e:	623b      	str	r3, [r7, #32]
 8003260:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003262:	4b43      	ldr	r3, [pc, #268]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 8003264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003266:	4a42      	ldr	r2, [pc, #264]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 8003268:	f043 0310 	orr.w	r3, r3, #16
 800326c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800326e:	4b40      	ldr	r3, [pc, #256]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800327a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	2300      	movs	r3, #0
 800328a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800328c:	2303      	movs	r3, #3
 800328e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003290:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003294:	4619      	mov	r1, r3
 8003296:	4837      	ldr	r0, [pc, #220]	@ (8003374 <HAL_TIM_PWM_MspInit+0x14c>)
 8003298:	f003 fc52 	bl	8006b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800329c:	e062      	b.n	8003364 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032a6:	d10c      	bne.n	80032c2 <HAL_TIM_PWM_MspInit+0x9a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032a8:	4b31      	ldr	r3, [pc, #196]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	4a30      	ldr	r2, [pc, #192]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80032b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	69bb      	ldr	r3, [r7, #24]
}
 80032c0:	e050      	b.n	8003364 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003378 <HAL_TIM_PWM_MspInit+0x150>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10c      	bne.n	80032e6 <HAL_TIM_PWM_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032cc:	4b28      	ldr	r3, [pc, #160]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d0:	4a27      	ldr	r2, [pc, #156]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697b      	ldr	r3, [r7, #20]
}
 80032e4:	e03e      	b.n	8003364 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM4)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a24      	ldr	r2, [pc, #144]	@ (800337c <HAL_TIM_PWM_MspInit+0x154>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d128      	bne.n	8003342 <HAL_TIM_PWM_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80032fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 80032fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	613b      	str	r3, [r7, #16]
 8003306:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003308:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 800330a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330c:	4a18      	ldr	r2, [pc, #96]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 800330e:	f043 0310 	orr.w	r3, r3, #16
 8003312:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003314:	4b16      	ldr	r3, [pc, #88]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 8003316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003320:	2301      	movs	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332c:	2300      	movs	r3, #0
 800332e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003330:	2302      	movs	r3, #2
 8003332:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003338:	4619      	mov	r1, r3
 800333a:	480e      	ldr	r0, [pc, #56]	@ (8003374 <HAL_TIM_PWM_MspInit+0x14c>)
 800333c:	f003 fc00 	bl	8006b40 <HAL_GPIO_Init>
}
 8003340:	e010      	b.n	8003364 <HAL_TIM_PWM_MspInit+0x13c>
  else if(htim_pwm->Instance==TIM15)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a0e      	ldr	r2, [pc, #56]	@ (8003380 <HAL_TIM_PWM_MspInit+0x158>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d10b      	bne.n	8003364 <HAL_TIM_PWM_MspInit+0x13c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800334c:	4b08      	ldr	r3, [pc, #32]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 800334e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003350:	4a07      	ldr	r2, [pc, #28]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 8003352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003356:	6613      	str	r3, [r2, #96]	@ 0x60
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <HAL_TIM_PWM_MspInit+0x148>)
 800335a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800335c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	68bb      	ldr	r3, [r7, #8]
}
 8003364:	bf00      	nop
 8003366:	3738      	adds	r7, #56	@ 0x38
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40012c00 	.word	0x40012c00
 8003370:	40021000 	.word	0x40021000
 8003374:	48001000 	.word	0x48001000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40014000 	.word	0x40014000

08003384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08e      	sub	sp, #56	@ 0x38
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a73      	ldr	r2, [pc, #460]	@ (8003570 <HAL_TIM_MspPostInit+0x1ec>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d11d      	bne.n	80033e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a6:	4b73      	ldr	r3, [pc, #460]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	4a72      	ldr	r2, [pc, #456]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 80033ac:	f043 0310 	orr.w	r3, r3, #16
 80033b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033b2:	4b70      	ldr	r3, [pc, #448]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 80033b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	623b      	str	r3, [r7, #32]
 80033bc:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80033be:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033d0:	2301      	movs	r3, #1
 80033d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d8:	4619      	mov	r1, r3
 80033da:	4867      	ldr	r0, [pc, #412]	@ (8003578 <HAL_TIM_MspPostInit+0x1f4>)
 80033dc:	f003 fbb0 	bl	8006b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80033e0:	e0c2      	b.n	8003568 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM2)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033ea:	d13a      	bne.n	8003462 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ec:	4b61      	ldr	r3, [pc, #388]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 80033ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033f0:	4a60      	ldr	r2, [pc, #384]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 80033fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003404:	4b5b      	ldr	r3, [pc, #364]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 8003406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003408:	4a5a      	ldr	r2, [pc, #360]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 800340a:	f043 0302 	orr.w	r3, r3, #2
 800340e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003410:	4b58      	ldr	r3, [pc, #352]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 8003412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800341c:	2301      	movs	r3, #1
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800342c:	2301      	movs	r3, #1
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003434:	4619      	mov	r1, r3
 8003436:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800343a:	f003 fb81 	bl	8006b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800343e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003450:	2301      	movs	r3, #1
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003458:	4619      	mov	r1, r3
 800345a:	4848      	ldr	r0, [pc, #288]	@ (800357c <HAL_TIM_MspPostInit+0x1f8>)
 800345c:	f003 fb70 	bl	8006b40 <HAL_GPIO_Init>
}
 8003460:	e082      	b.n	8003568 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM3)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a46      	ldr	r2, [pc, #280]	@ (8003580 <HAL_TIM_MspPostInit+0x1fc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d138      	bne.n	80034de <HAL_TIM_MspPostInit+0x15a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800346c:	4b41      	ldr	r3, [pc, #260]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 800346e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003470:	4a40      	ldr	r2, [pc, #256]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 8003472:	f043 0302 	orr.w	r3, r3, #2
 8003476:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003478:	4b3e      	ldr	r3, [pc, #248]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 800347a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003484:	4b3b      	ldr	r3, [pc, #236]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 8003486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003488:	4a3a      	ldr	r2, [pc, #232]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 800348a:	f043 0304 	orr.w	r3, r3, #4
 800348e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003490:	4b38      	ldr	r3, [pc, #224]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 8003492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800349c:	2301      	movs	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a0:	2302      	movs	r3, #2
 80034a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a8:	2300      	movs	r3, #0
 80034aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034ac:	2302      	movs	r3, #2
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034b4:	4619      	mov	r1, r3
 80034b6:	4831      	ldr	r0, [pc, #196]	@ (800357c <HAL_TIM_MspPostInit+0x1f8>)
 80034b8:	f003 fb42 	bl	8006b40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c0:	2302      	movs	r3, #2
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034c8:	2300      	movs	r3, #0
 80034ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034cc:	2302      	movs	r3, #2
 80034ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034d4:	4619      	mov	r1, r3
 80034d6:	482b      	ldr	r0, [pc, #172]	@ (8003584 <HAL_TIM_MspPostInit+0x200>)
 80034d8:	f003 fb32 	bl	8006b40 <HAL_GPIO_Init>
}
 80034dc:	e044      	b.n	8003568 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM4)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a29      	ldr	r2, [pc, #164]	@ (8003588 <HAL_TIM_MspPostInit+0x204>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d11d      	bne.n	8003524 <HAL_TIM_MspPostInit+0x1a0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034e8:	4b22      	ldr	r3, [pc, #136]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 80034ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ec:	4a21      	ldr	r2, [pc, #132]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 80034ee:	f043 0308 	orr.w	r3, r3, #8
 80034f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 80034f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003506:	2302      	movs	r3, #2
 8003508:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800350e:	2300      	movs	r3, #0
 8003510:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003512:	2302      	movs	r3, #2
 8003514:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800351a:	4619      	mov	r1, r3
 800351c:	481b      	ldr	r0, [pc, #108]	@ (800358c <HAL_TIM_MspPostInit+0x208>)
 800351e:	f003 fb0f 	bl	8006b40 <HAL_GPIO_Init>
}
 8003522:	e021      	b.n	8003568 <HAL_TIM_MspPostInit+0x1e4>
  else if(htim->Instance==TIM15)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a19      	ldr	r2, [pc, #100]	@ (8003590 <HAL_TIM_MspPostInit+0x20c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d11c      	bne.n	8003568 <HAL_TIM_MspPostInit+0x1e4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800352e:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	4a10      	ldr	r2, [pc, #64]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 8003534:	f043 0302 	orr.w	r3, r3, #2
 8003538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800353a:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <HAL_TIM_MspPostInit+0x1f0>)
 800353c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	60bb      	str	r3, [r7, #8]
 8003544:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003546:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354c:	2302      	movs	r3, #2
 800354e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	2300      	movs	r3, #0
 8003552:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003554:	2300      	movs	r3, #0
 8003556:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003558:	230e      	movs	r3, #14
 800355a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800355c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003560:	4619      	mov	r1, r3
 8003562:	4806      	ldr	r0, [pc, #24]	@ (800357c <HAL_TIM_MspPostInit+0x1f8>)
 8003564:	f003 faec 	bl	8006b40 <HAL_GPIO_Init>
}
 8003568:	bf00      	nop
 800356a:	3738      	adds	r7, #56	@ 0x38
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40012c00 	.word	0x40012c00
 8003574:	40021000 	.word	0x40021000
 8003578:	48001000 	.word	0x48001000
 800357c:	48000400 	.word	0x48000400
 8003580:	40000400 	.word	0x40000400
 8003584:	48000800 	.word	0x48000800
 8003588:	40000800 	.word	0x40000800
 800358c:	48000c00 	.word	0x48000c00
 8003590:	40014000 	.word	0x40014000

08003594 <HAL_SAI_MspInit>:

static uint32_t SAI1_client =0;
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	@ 0x28
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a50      	ldr	r2, [pc, #320]	@ (80036e4 <HAL_SAI_MspInit+0x150>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d124      	bne.n	80035f0 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80035a6:	4b50      	ldr	r3, [pc, #320]	@ (80036e8 <HAL_SAI_MspInit+0x154>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80035ae:	4b4f      	ldr	r3, [pc, #316]	@ (80036ec <HAL_SAI_MspInit+0x158>)
 80035b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b2:	4a4e      	ldr	r2, [pc, #312]	@ (80036ec <HAL_SAI_MspInit+0x158>)
 80035b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80035b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80035ba:	4b4c      	ldr	r3, [pc, #304]	@ (80036ec <HAL_SAI_MspInit+0x158>)
 80035bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80035c6:	4b48      	ldr	r3, [pc, #288]	@ (80036e8 <HAL_SAI_MspInit+0x154>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	4a46      	ldr	r2, [pc, #280]	@ (80036e8 <HAL_SAI_MspInit+0x154>)
 80035ce:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80035d0:	2374      	movs	r3, #116	@ 0x74
 80035d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d4:	2302      	movs	r3, #2
 80035d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035dc:	2300      	movs	r3, #0
 80035de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80035e0:	230d      	movs	r3, #13
 80035e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80035e4:	f107 0314 	add.w	r3, r7, #20
 80035e8:	4619      	mov	r1, r3
 80035ea:	4841      	ldr	r0, [pc, #260]	@ (80036f0 <HAL_SAI_MspInit+0x15c>)
 80035ec:	f003 faa8 	bl	8006b40 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a3f      	ldr	r2, [pc, #252]	@ (80036f4 <HAL_SAI_MspInit+0x160>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d135      	bne.n	8003666 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80035fa:	4b3b      	ldr	r3, [pc, #236]	@ (80036e8 <HAL_SAI_MspInit+0x154>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10b      	bne.n	800361a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8003602:	4b3a      	ldr	r3, [pc, #232]	@ (80036ec <HAL_SAI_MspInit+0x158>)
 8003604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003606:	4a39      	ldr	r2, [pc, #228]	@ (80036ec <HAL_SAI_MspInit+0x158>)
 8003608:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800360c:	6613      	str	r3, [r2, #96]	@ 0x60
 800360e:	4b37      	ldr	r3, [pc, #220]	@ (80036ec <HAL_SAI_MspInit+0x158>)
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800361a:	4b33      	ldr	r3, [pc, #204]	@ (80036e8 <HAL_SAI_MspInit+0x154>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	3301      	adds	r3, #1
 8003620:	4a31      	ldr	r2, [pc, #196]	@ (80036e8 <HAL_SAI_MspInit+0x154>)
 8003622:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PF7     ------> SAI1_MCLK_B
    PF8     ------> SAI1_SCK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003624:	2308      	movs	r3, #8
 8003626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003630:	2300      	movs	r3, #0
 8003632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003634:	230d      	movs	r3, #13
 8003636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003638:	f107 0314 	add.w	r3, r7, #20
 800363c:	4619      	mov	r1, r3
 800363e:	482c      	ldr	r0, [pc, #176]	@ (80036f0 <HAL_SAI_MspInit+0x15c>)
 8003640:	f003 fa7e 	bl	8006b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003644:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	2302      	movs	r3, #2
 800364c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8003656:	230d      	movs	r3, #13
 8003658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800365a:	f107 0314 	add.w	r3, r7, #20
 800365e:	4619      	mov	r1, r3
 8003660:	4825      	ldr	r0, [pc, #148]	@ (80036f8 <HAL_SAI_MspInit+0x164>)
 8003662:	f003 fa6d 	bl	8006b40 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a24      	ldr	r2, [pc, #144]	@ (80036fc <HAL_SAI_MspInit+0x168>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d135      	bne.n	80036dc <HAL_SAI_MspInit+0x148>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003670:	4b23      	ldr	r3, [pc, #140]	@ (8003700 <HAL_SAI_MspInit+0x16c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10b      	bne.n	8003690 <HAL_SAI_MspInit+0xfc>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003678:	4b1c      	ldr	r3, [pc, #112]	@ (80036ec <HAL_SAI_MspInit+0x158>)
 800367a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367c:	4a1b      	ldr	r2, [pc, #108]	@ (80036ec <HAL_SAI_MspInit+0x158>)
 800367e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003682:	6613      	str	r3, [r2, #96]	@ 0x60
 8003684:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <HAL_SAI_MspInit+0x158>)
 8003686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003688:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
    }
    SAI2_client ++;
 8003690:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_SAI_MspInit+0x16c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <HAL_SAI_MspInit+0x16c>)
 8003698:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB15     ------> SAI2_SD_A
    PC6     ------> SAI2_MCLK_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800369a:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 800369e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a0:	2302      	movs	r3, #2
 80036a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a8:	2300      	movs	r3, #0
 80036aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80036ac:	230d      	movs	r3, #13
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b0:	f107 0314 	add.w	r3, r7, #20
 80036b4:	4619      	mov	r1, r3
 80036b6:	4813      	ldr	r0, [pc, #76]	@ (8003704 <HAL_SAI_MspInit+0x170>)
 80036b8:	f003 fa42 	bl	8006b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036bc:	2340      	movs	r3, #64	@ 0x40
 80036be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c0:	2302      	movs	r3, #2
 80036c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c8:	2300      	movs	r3, #0
 80036ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80036cc:	230d      	movs	r3, #13
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	4619      	mov	r1, r3
 80036d6:	480c      	ldr	r0, [pc, #48]	@ (8003708 <HAL_SAI_MspInit+0x174>)
 80036d8:	f003 fa32 	bl	8006b40 <HAL_GPIO_Init>

    }
}
 80036dc:	bf00      	nop
 80036de:	3728      	adds	r7, #40	@ 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40015404 	.word	0x40015404
 80036e8:	200009d0 	.word	0x200009d0
 80036ec:	40021000 	.word	0x40021000
 80036f0:	48001000 	.word	0x48001000
 80036f4:	40015424 	.word	0x40015424
 80036f8:	48001400 	.word	0x48001400
 80036fc:	40015804 	.word	0x40015804
 8003700:	200009d4 	.word	0x200009d4
 8003704:	48000400 	.word	0x48000400
 8003708:	48000800 	.word	0x48000800

0800370c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <NMI_Handler+0x4>

08003714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <HardFault_Handler+0x4>

0800371c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <MemManage_Handler+0x4>

08003724 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <BusFault_Handler+0x4>

0800372c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <UsageFault_Handler+0x4>

08003734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003762:	f001 ff4b 	bl	80055fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}

0800376a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  return 1;
 800376e:	2301      	movs	r3, #1
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <_kill>:

int _kill(int pid, int sig)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003784:	f00a f9e6 	bl	800db54 <__errno>
 8003788:	4603      	mov	r3, r0
 800378a:	2216      	movs	r2, #22
 800378c:	601a      	str	r2, [r3, #0]
  return -1;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <_exit>:

void _exit (int status)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037a2:	f04f 31ff 	mov.w	r1, #4294967295
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ffe7 	bl	800377a <_kill>
  while (1) {}    /* Make sure we hang here */
 80037ac:	bf00      	nop
 80037ae:	e7fd      	b.n	80037ac <_exit+0x12>

080037b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037bc:	2300      	movs	r3, #0
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	e00a      	b.n	80037d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037c2:	f3af 8000 	nop.w
 80037c6:	4601      	mov	r1, r0
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	60ba      	str	r2, [r7, #8]
 80037ce:	b2ca      	uxtb	r2, r1
 80037d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3301      	adds	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	dbf0      	blt.n	80037c2 <_read+0x12>
  }

  return len;
 80037e0:	687b      	ldr	r3, [r7, #4]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b086      	sub	sp, #24
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
 80037fa:	e009      	b.n	8003810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	60ba      	str	r2, [r7, #8]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff f9e3 	bl	8002bd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	3301      	adds	r3, #1
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	dbf1      	blt.n	80037fc <_write+0x12>
  }
  return len;
 8003818:	687b      	ldr	r3, [r7, #4]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <_close>:

int _close(int file)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800382a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800382e:	4618      	mov	r0, r3
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800384a:	605a      	str	r2, [r3, #4]
  return 0;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <_isatty>:

int _isatty(int file)
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003862:	2301      	movs	r3, #1
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003894:	4a14      	ldr	r2, [pc, #80]	@ (80038e8 <_sbrk+0x5c>)
 8003896:	4b15      	ldr	r3, [pc, #84]	@ (80038ec <_sbrk+0x60>)
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038a0:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <_sbrk+0x64>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d102      	bne.n	80038ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038a8:	4b11      	ldr	r3, [pc, #68]	@ (80038f0 <_sbrk+0x64>)
 80038aa:	4a12      	ldr	r2, [pc, #72]	@ (80038f4 <_sbrk+0x68>)
 80038ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ae:	4b10      	ldr	r3, [pc, #64]	@ (80038f0 <_sbrk+0x64>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4413      	add	r3, r2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d207      	bcs.n	80038cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038bc:	f00a f94a 	bl	800db54 <__errno>
 80038c0:	4603      	mov	r3, r0
 80038c2:	220c      	movs	r2, #12
 80038c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038c6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ca:	e009      	b.n	80038e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038cc:	4b08      	ldr	r3, [pc, #32]	@ (80038f0 <_sbrk+0x64>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038d2:	4b07      	ldr	r3, [pc, #28]	@ (80038f0 <_sbrk+0x64>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	4a05      	ldr	r2, [pc, #20]	@ (80038f0 <_sbrk+0x64>)
 80038dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	200a0000 	.word	0x200a0000
 80038ec:	00000400 	.word	0x00000400
 80038f0:	200009d8 	.word	0x200009d8
 80038f4:	20000b48 	.word	0x20000b48

080038f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <SystemInit+0x20>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003902:	4a05      	ldr	r2, [pc, #20]	@ (8003918 <SystemInit+0x20>)
 8003904:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003908:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	607a      	str	r2, [r7, #4]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800392e:	89fb      	ldrh	r3, [r7, #14]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	b21a      	sxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b21b      	sxth	r3, r3
 800393a:	4313      	orrs	r3, r2
 800393c:	b21b      	sxth	r3, r3
 800393e:	b29b      	uxth	r3, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2204      	movs	r2, #4
 8003960:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2204      	movs	r2, #4
 8003966:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003970:	b29a      	uxth	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003978:	b29b      	uxth	r3, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29b      	uxth	r3, r3
 8003982:	b21a      	sxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8003998:	b29b      	uxth	r3, r3
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	b21a      	sxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	845a      	strh	r2, [r3, #34]	@ 0x22
   g->console.x_pos = g->console.x_end;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
   g->char_v_space = 1;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
   g->font=NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	629a      	str	r2, [r3, #40]	@ 0x28
   g->currentFont.bytes_per_char = 0;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	861a      	strh	r2, [r3, #48]	@ 0x30
   g->currentFont.char_height = 0;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   g->currentFont.char_width = 0;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
   g->currentFont.number_of_chars = 0;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	865a      	strh	r2, [r3, #50]	@ 0x32
   g->currentFont.number_of_offsets = 0;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	869a      	strh	r2, [r3, #52]	@ 0x34
   g->currentFont.widths = NULL;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	639a      	str	r2, [r3, #56]	@ 0x38
   g->currentFont.offsets = NULL;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	63da      	str	r2, [r3, #60]	@ 0x3c
   g->currentFont.data = NULL;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
   g->currentFont.font = NULL;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	645a      	str	r2, [r3, #68]	@ 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f645 425d 	movw	r2, #23645	@ 0x5c5d
 8003a12:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
   g->fore_color = C_WHITE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a1c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
   g->back_color = C_BLACK;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
   g->next_window = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e010      	b.n	8003a62 <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	330a      	adds	r3, #10
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	330a      	adds	r3, #10
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	2200      	movs	r2, #0
 8003a5a:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d9eb      	bls.n	8003a40 <UG_Init+0xf4>
   }

   gui = g;
 8003a68:	4a04      	ldr	r2, [pc, #16]	@ (8003a7c <UG_Init+0x130>)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6013      	str	r3, [r2, #0]
   return 1;
 8003a6e:	2301      	movs	r3, #1
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	200009dc 	.word	0x200009dc

08003a80 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8003a88:	4b04      	ldr	r3, [pc, #16]	@ (8003a9c <UG_FontSelect+0x1c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	200009dc 	.word	0x200009dc

08003aa0 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae4 <UG_FillScreen+0x44>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	b21a      	sxth	r2, r3
 8003abc:	4b09      	ldr	r3, [pc, #36]	@ (8003ae4 <UG_FillScreen+0x44>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	b219      	sxth	r1, r3
 8003ace:	88fb      	ldrh	r3, [r7, #6]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f000 f806 	bl	8003ae8 <UG_FillFrame>
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	200009dc 	.word	0x200009dc

08003ae8 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8003ae8:	b590      	push	{r4, r7, lr}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	4604      	mov	r4, r0
 8003af0:	4608      	mov	r0, r1
 8003af2:	4611      	mov	r1, r2
 8003af4:	461a      	mov	r2, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	80fb      	strh	r3, [r7, #6]
 8003afa:	4603      	mov	r3, r0
 8003afc:	80bb      	strh	r3, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	807b      	strh	r3, [r7, #2]
 8003b02:	4613      	mov	r3, r2
 8003b04:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8003b06:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	da05      	bge.n	8003b1e <UG_FillFrame+0x36>
     swap(x1,x2);
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	817b      	strh	r3, [r7, #10]
 8003b16:	887b      	ldrh	r3, [r7, #2]
 8003b18:	80fb      	strh	r3, [r7, #6]
 8003b1a:	897b      	ldrh	r3, [r7, #10]
 8003b1c:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8003b1e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003b22:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	da05      	bge.n	8003b36 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8003b2a:	88bb      	ldrh	r3, [r7, #4]
 8003b2c:	813b      	strh	r3, [r7, #8]
 8003b2e:	883b      	ldrh	r3, [r7, #0]
 8003b30:	80bb      	strh	r3, [r7, #4]
 8003b32:	893b      	ldrh	r3, [r7, #8]
 8003b34:	803b      	strh	r3, [r7, #0]
//   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
//   {
//      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
//   }

   for( m=y1; m<=y2; m++ )
 8003b36:	88bb      	ldrh	r3, [r7, #4]
 8003b38:	81bb      	strh	r3, [r7, #12]
 8003b3a:	e01e      	b.n	8003b7a <UG_FillFrame+0x92>
   {
      for( n=x1; n<=x2; n++ )
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	81fb      	strh	r3, [r7, #14]
 8003b40:	e00f      	b.n	8003b62 <UG_FillFrame+0x7a>
      {
         gui->device->pset(n,m,c);
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <UG_FillFrame+0xa8>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	8c3a      	ldrh	r2, [r7, #32]
 8003b4c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003b50:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003b54:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8003b56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	81fb      	strh	r3, [r7, #14]
 8003b62:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003b66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	dde9      	ble.n	8003b42 <UG_FillFrame+0x5a>
   for( m=y1; m<=y2; m++ )
 8003b6e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3301      	adds	r3, #1
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	81bb      	strh	r3, [r7, #12]
 8003b7a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003b7e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	ddda      	ble.n	8003b3c <UG_FillFrame+0x54>
      }
   }
}
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd90      	pop	{r4, r7, pc}
 8003b90:	200009dc 	.word	0x200009dc

08003b94 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8003b94:	b5b0      	push	{r4, r5, r7, lr}
 8003b96:	b08a      	sub	sp, #40	@ 0x28
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4623      	mov	r3, r4
 8003ba4:	80fb      	strh	r3, [r7, #6]
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	80bb      	strh	r3, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	807b      	strh	r3, [r7, #2]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8003bb2:	4b67      	ldr	r3, [pc, #412]	@ (8003d50 <UG_DrawLine+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d013      	beq.n	8003bea <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8003bc2:	4b63      	ldr	r3, [pc, #396]	@ (8003d50 <UG_DrawLine+0x1bc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	461d      	mov	r5, r3
 8003bca:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003bce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003bd2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003bd6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003bda:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	4623      	mov	r3, r4
 8003be0:	47a8      	blx	r5
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80ae 	beq.w	8003d46 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8003bf4:	883a      	ldrh	r2, [r7, #0]
 8003bf6:	88bb      	ldrh	r3, [r7, #4]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8003bfe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	bfb8      	it	lt
 8003c06:	425b      	neglt	r3, r3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8003c0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bfb8      	it	lt
 8003c14:	425b      	neglt	r3, r3
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8003c1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	dd01      	ble.n	8003c26 <UG_DrawLine+0x92>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e001      	b.n	8003c2a <UG_DrawLine+0x96>
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2a:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8003c2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	dd01      	ble.n	8003c38 <UG_DrawLine+0xa4>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e001      	b.n	8003c3c <UG_DrawLine+0xa8>
 8003c38:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8003c3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c42:	105b      	asrs	r3, r3, #1
 8003c44:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8003c46:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c4a:	105b      	asrs	r3, r3, #1
 8003c4c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8003c4e:	88fb      	ldrh	r3, [r7, #6]
 8003c50:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8003c52:	88bb      	ldrh	r3, [r7, #4]
 8003c54:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8003c56:	4b3e      	ldr	r3, [pc, #248]	@ (8003d50 <UG_DrawLine+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003c60:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003c64:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8003c68:	4798      	blx	r3

   if( dxabs >= dyabs )
 8003c6a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003c6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	db33      	blt.n	8003cde <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8003c76:	2300      	movs	r3, #0
 8003c78:	83fb      	strh	r3, [r7, #30]
 8003c7a:	e029      	b.n	8003cd0 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8003c7c:	8b7a      	ldrh	r2, [r7, #26]
 8003c7e:	89fb      	ldrh	r3, [r7, #14]
 8003c80:	4413      	add	r3, r2
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8003c86:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8003c8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	db09      	blt.n	8003ca6 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8003c92:	8b7a      	ldrh	r2, [r7, #26]
 8003c94:	8a3b      	ldrh	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8003c9c:	8afa      	ldrh	r2, [r7, #22]
 8003c9e:	897b      	ldrh	r3, [r7, #10]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8003ca6:	8b3a      	ldrh	r2, [r7, #24]
 8003ca8:	89bb      	ldrh	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8003cb0:	4b27      	ldr	r3, [pc, #156]	@ (8003d50 <UG_DrawLine+0x1bc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003cba:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003cbe:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8003cc2:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8003cc4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	83fb      	strh	r3, [r7, #30]
 8003cd0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003cd4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	dbcf      	blt.n	8003c7c <UG_DrawLine+0xe8>
 8003cdc:	e034      	b.n	8003d48 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8003cde:	2300      	movs	r3, #0
 8003ce0:	83fb      	strh	r3, [r7, #30]
 8003ce2:	e029      	b.n	8003d38 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8003ce4:	8bba      	ldrh	r2, [r7, #28]
 8003ce6:	8a3b      	ldrh	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8003cee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8003cf2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	db09      	blt.n	8003d0e <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8003cfa:	8bba      	ldrh	r2, [r7, #28]
 8003cfc:	89fb      	ldrh	r3, [r7, #14]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8003d04:	8b3a      	ldrh	r2, [r7, #24]
 8003d06:	89bb      	ldrh	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8003d0e:	8afa      	ldrh	r2, [r7, #22]
 8003d10:	897b      	ldrh	r3, [r7, #10]
 8003d12:	4413      	add	r3, r2
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8003d18:	4b0d      	ldr	r3, [pc, #52]	@ (8003d50 <UG_DrawLine+0x1bc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8003d22:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003d26:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8003d2a:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8003d2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3301      	adds	r3, #1
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	83fb      	strh	r3, [r7, #30]
 8003d38:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003d3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	dbcf      	blt.n	8003ce4 <UG_DrawLine+0x150>
 8003d44:	e000      	b.n	8003d48 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8003d46:	bf00      	nop
      }
   }  
}
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200009dc 	.word	0x200009dc

08003d54 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	603a      	str	r2, [r7, #0]
 8003d5e:	80fb      	strh	r3, [r7, #6]
 8003d60:	460b      	mov	r3, r1
 8003d62:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8003d68:	88bb      	ldrh	r3, [r7, #4]
 8003d6a:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8003d6c:	4b44      	ldr	r3, [pc, #272]	@ (8003e80 <UG_PutString+0x12c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 fae4 	bl	8004340 <_UG_FontSelect>
   while ( *str != 0 )
 8003d78:	e064      	b.n	8003e44 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8003d7a:	4b41      	ldr	r3, [pc, #260]	@ (8003e80 <UG_PutString+0x12c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d106      	bne.n	8003d94 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8003d86:	463b      	mov	r3, r7
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f915 	bl	8003fb8 <_UG_DecodeUTF8>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	817b      	strh	r3, [r7, #10]
 8003d92:	e004      	b.n	8003d9e <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	603a      	str	r2, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 8003d9e:	897b      	ldrh	r3, [r7, #10]
 8003da0:	2b0a      	cmp	r3, #10
 8003da2:	d105      	bne.n	8003db0 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 8003da4:	4b36      	ldr	r3, [pc, #216]	@ (8003e80 <UG_PutString+0x12c>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	81fb      	strh	r3, [r7, #14]
         continue;
 8003dae:	e049      	b.n	8003e44 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 8003db0:	897b      	ldrh	r3, [r7, #10]
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f977 	bl	80040a8 <_UG_GetCharData>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 8003dbe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d03c      	beq.n	8003e42 <UG_PutString+0xee>
      if ( xp + cw > gui->device->x_dim - 1 )
 8003dc8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e80 <UG_PutString+0x12c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003dd8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003ddc:	4413      	add	r3, r2
 8003dde:	4299      	cmp	r1, r3
 8003de0:	dc11      	bgt.n	8003e06 <UG_PutString+0xb2>
      {
         xp = x;
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8003de6:	4b26      	ldr	r3, [pc, #152]	@ (8003e80 <UG_PutString+0x12c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003dee:	b21b      	sxth	r3, r3
 8003df0:	4a23      	ldr	r2, [pc, #140]	@ (8003e80 <UG_PutString+0x12c>)
 8003df2:	6812      	ldr	r2, [r2, #0]
 8003df4:	f992 204a 	ldrsb.w	r2, [r2, #74]	@ 0x4a
 8003df8:	4413      	add	r3, r2
 8003dfa:	b21b      	sxth	r3, r3
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	89bb      	ldrh	r3, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8003e06:	4b1e      	ldr	r3, [pc, #120]	@ (8003e80 <UG_PutString+0x12c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8b3 404c 	ldrh.w	r4, [r3, #76]	@ 0x4c
 8003e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8003e80 <UG_PutString+0x12c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 8003e16:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003e1a:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003e1e:	8978      	ldrh	r0, [r7, #10]
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	4623      	mov	r3, r4
 8003e24:	f000 fb0e 	bl	8004444 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8003e28:	4b15      	ldr	r3, [pc, #84]	@ (8003e80 <UG_PutString+0x12c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f993 3049 	ldrsb.w	r3, [r3, #73]	@ 0x49
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	893b      	ldrh	r3, [r7, #8]
 8003e34:	4413      	add	r3, r2
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	89fb      	ldrh	r3, [r7, #14]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	81fb      	strh	r3, [r7, #14]
 8003e40:	e000      	b.n	8003e44 <UG_PutString+0xf0>
      if(cw==-1) continue;
 8003e42:	bf00      	nop
   while ( *str != 0 )
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d196      	bne.n	8003d7a <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8003e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e80 <UG_PutString+0x12c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00c      	beq.n	8003e76 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8003e5c:	4b08      	ldr	r3, [pc, #32]	@ (8003e80 <UG_PutString+0x12c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e62:	461c      	mov	r4, r3
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
 8003e68:	f04f 32ff 	mov.w	r2, #4294967295
 8003e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	47a0      	blx	r4
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd90      	pop	{r4, r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	200009dc 	.word	0x200009dc

08003e84 <UG_PutChar>:

void UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	4623      	mov	r3, r4
 8003e94:	80fb      	strh	r3, [r7, #6]
 8003e96:	4603      	mov	r3, r0
 8003e98:	80bb      	strh	r3, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	807b      	strh	r3, [r7, #2]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	803b      	strh	r3, [r7, #0]
    _UG_FontSelect(gui->font);
 8003ea2:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <UG_PutChar+0x74>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fa49 	bl	8004340 <_UG_FontSelect>
    _UG_PutChar(chr,x,y,fc,bc);
 8003eae:	883c      	ldrh	r4, [r7, #0]
 8003eb0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003eb4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003eb8:	88f8      	ldrh	r0, [r7, #6]
 8003eba:	8b3b      	ldrh	r3, [r7, #24]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	4623      	mov	r3, r4
 8003ec0:	f000 fac0 	bl	8004444 <_UG_PutChar>
    if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8003ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <UG_PutChar+0x74>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00c      	beq.n	8003eee <UG_PutChar+0x6a>
      ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8003ed4:	4b08      	ldr	r3, [pc, #32]	@ (8003ef8 <UG_PutChar+0x74>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eda:	461c      	mov	r4, r3
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eec:	47a0      	blx	r4
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd90      	pop	{r4, r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200009dc 	.word	0x200009dc

08003efc <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	4603      	mov	r3, r0
 8003f04:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8003f06:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <UG_SetForecolor+0x20>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	88fa      	ldrh	r2, [r7, #6]
 8003f0c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	200009dc 	.word	0x200009dc

08003f20 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8003f2a:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <UG_SetBackcolor+0x20>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	200009dc 	.word	0x200009dc

08003f44 <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <UG_FontSetHSpace+0x24>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	b252      	sxtb	r2, r2
 8003f56:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	200009dc 	.word	0x200009dc

08003f6c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8003f76:	4b06      	ldr	r3, [pc, #24]	@ (8003f90 <UG_FontSetVSpace+0x24>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	88fa      	ldrh	r2, [r7, #6]
 8003f7c:	b252      	sxtb	r2, r2
 8003f7e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	200009dc 	.word	0x200009dc

08003f94 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 8003f9e:	4b05      	ldr	r3, [pc, #20]	@ (8003fb4 <UG_FontSetTransparency+0x20>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	79fa      	ldrb	r2, [r7, #7]
 8003fa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	200009dc 	.word	0x200009dc

08003fb8 <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  char c=**str;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8003fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	db07      	blt.n	8003fe0 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	601a      	str	r2, [r3, #0]
    return c;
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	e05c      	b.n	800409a <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	81bb      	strh	r3, [r7, #12]

  while(**str)
 8003fe8:	e04f      	b.n	800408a <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8003ffc:	7bbb      	ldrb	r3, [r7, #14]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d130      	bne.n	8004064 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	2bdf      	cmp	r3, #223	@ 0xdf
 8004006:	d806      	bhi.n	8004016 <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 8004008:	2301      	movs	r3, #1
 800400a:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 800400c:	7bfb      	ldrb	r3, [r7, #15]
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	e023      	b.n	800405e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	2bef      	cmp	r3, #239	@ 0xef
 800401a:	d806      	bhi.n	800402a <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 800401c:	2302      	movs	r3, #2
 800401e:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8004020:	7bfb      	ldrb	r3, [r7, #15]
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	e019      	b.n	800405e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2bf7      	cmp	r3, #247	@ 0xf7
 800402e:	d806      	bhi.n	800403e <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8004030:	2303      	movs	r3, #3
 8004032:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	73fb      	strb	r3, [r7, #15]
 800403c:	e00f      	b.n	800405e <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2bfb      	cmp	r3, #251	@ 0xfb
 8004042:	d806      	bhi.n	8004052 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 8004044:	2304      	movs	r3, #4
 8004046:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	f003 0303 	and.w	r3, r3, #3
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e005      	b.n	800405e <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8004052:	2305      	movs	r3, #5
 8004054:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	81bb      	strh	r3, [r7, #12]
 8004062:	e012      	b.n	800408a <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 8004064:	89bb      	ldrh	r3, [r7, #12]
 8004066:	019b      	lsls	r3, r3, #6
 8004068:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	b21b      	sxth	r3, r3
 800406e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004072:	b21a      	sxth	r2, r3
 8004074:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004078:	4313      	orrs	r3, r2
 800407a:	b21b      	sxth	r3, r3
 800407c:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 800407e:	7bbb      	ldrb	r3, [r7, #14]
 8004080:	3b01      	subs	r3, #1
 8004082:	73bb      	strb	r3, [r7, #14]
 8004084:	7bbb      	ldrb	r3, [r7, #14]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <_UG_DecodeUTF8+0xde>
  while(**str)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1aa      	bne.n	8003fea <_UG_DecodeUTF8+0x32>
 8004094:	e000      	b.n	8004098 <_UG_DecodeUTF8+0xe0>
        break;
 8004096:	bf00      	nop
    }
  }
  return encoding;
 8004098:	89bb      	ldrh	r3, [r7, #12]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 80040bc:	2300      	movs	r3, #0
 80040be:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 80040c4:	2300      	movs	r3, #0
 80040c6:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80040c8:	4b98      	ldr	r3, [pc, #608]	@ (800432c <_UG_GetCharData+0x284>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ce:	4b98      	ldr	r3, [pc, #608]	@ (8004330 <_UG_GetCharData+0x288>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d10f      	bne.n	80040f6 <_UG_GetCharData+0x4e>
 80040d6:	4b97      	ldr	r3, [pc, #604]	@ (8004334 <_UG_GetCharData+0x28c>)
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d10a      	bne.n	80040f6 <_UG_GetCharData+0x4e>
    if(p){
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 80040e6:	4b94      	ldr	r3, [pc, #592]	@ (8004338 <_UG_GetCharData+0x290>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 80040ee:	4b93      	ldr	r3, [pc, #588]	@ (800433c <_UG_GetCharData+0x294>)
 80040f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040f4:	e116      	b.n	8004324 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 80040f6:	4b8d      	ldr	r3, [pc, #564]	@ (800432c <_UG_GetCharData+0x284>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80cc 	beq.w	800429c <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8004104:	88fb      	ldrh	r3, [r7, #6]
 8004106:	2bfc      	cmp	r3, #252	@ 0xfc
 8004108:	f300 80c8 	bgt.w	800429c <_UG_GetCharData+0x1f4>
 800410c:	2bd6      	cmp	r3, #214	@ 0xd6
 800410e:	da09      	bge.n	8004124 <_UG_GetCharData+0x7c>
 8004110:	2bc4      	cmp	r3, #196	@ 0xc4
 8004112:	d06c      	beq.n	80041ee <_UG_GetCharData+0x146>
 8004114:	2bc4      	cmp	r3, #196	@ 0xc4
 8004116:	f300 80c1 	bgt.w	800429c <_UG_GetCharData+0x1f4>
 800411a:	2bb0      	cmp	r3, #176	@ 0xb0
 800411c:	d06d      	beq.n	80041fa <_UG_GetCharData+0x152>
 800411e:	2bb5      	cmp	r3, #181	@ 0xb5
 8004120:	d068      	beq.n	80041f4 <_UG_GetCharData+0x14c>
 8004122:	e06e      	b.n	8004202 <_UG_GetCharData+0x15a>
 8004124:	3bd6      	subs	r3, #214	@ 0xd6
 8004126:	2b26      	cmp	r3, #38	@ 0x26
 8004128:	f200 80b8 	bhi.w	800429c <_UG_GetCharData+0x1f4>
 800412c:	a201      	add	r2, pc, #4	@ (adr r2, 8004134 <_UG_GetCharData+0x8c>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	080041d7 	.word	0x080041d7
 8004138:	0800429d 	.word	0x0800429d
 800413c:	0800429d 	.word	0x0800429d
 8004140:	0800429d 	.word	0x0800429d
 8004144:	0800429d 	.word	0x0800429d
 8004148:	0800429d 	.word	0x0800429d
 800414c:	080041e3 	.word	0x080041e3
 8004150:	0800429d 	.word	0x0800429d
 8004154:	0800429d 	.word	0x0800429d
 8004158:	0800429d 	.word	0x0800429d
 800415c:	0800429d 	.word	0x0800429d
 8004160:	0800429d 	.word	0x0800429d
 8004164:	0800429d 	.word	0x0800429d
 8004168:	0800429d 	.word	0x0800429d
 800416c:	080041e9 	.word	0x080041e9
 8004170:	0800429d 	.word	0x0800429d
 8004174:	0800429d 	.word	0x0800429d
 8004178:	0800429d 	.word	0x0800429d
 800417c:	0800429d 	.word	0x0800429d
 8004180:	0800429d 	.word	0x0800429d
 8004184:	0800429d 	.word	0x0800429d
 8004188:	0800429d 	.word	0x0800429d
 800418c:	0800429d 	.word	0x0800429d
 8004190:	0800429d 	.word	0x0800429d
 8004194:	0800429d 	.word	0x0800429d
 8004198:	0800429d 	.word	0x0800429d
 800419c:	0800429d 	.word	0x0800429d
 80041a0:	0800429d 	.word	0x0800429d
 80041a4:	0800429d 	.word	0x0800429d
 80041a8:	0800429d 	.word	0x0800429d
 80041ac:	0800429d 	.word	0x0800429d
 80041b0:	0800429d 	.word	0x0800429d
 80041b4:	080041d1 	.word	0x080041d1
 80041b8:	0800429d 	.word	0x0800429d
 80041bc:	0800429d 	.word	0x0800429d
 80041c0:	0800429d 	.word	0x0800429d
 80041c4:	0800429d 	.word	0x0800429d
 80041c8:	0800429d 	.word	0x0800429d
 80041cc:	080041dd 	.word	0x080041dd
    {
       case 0xF6: encoding = 0x94; break; // ö
 80041d0:	2394      	movs	r3, #148	@ 0x94
 80041d2:	80fb      	strh	r3, [r7, #6]
 80041d4:	e015      	b.n	8004202 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 80041d6:	2399      	movs	r3, #153	@ 0x99
 80041d8:	80fb      	strh	r3, [r7, #6]
 80041da:	e012      	b.n	8004202 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 80041dc:	2381      	movs	r3, #129	@ 0x81
 80041de:	80fb      	strh	r3, [r7, #6]
 80041e0:	e00f      	b.n	8004202 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 80041e2:	239a      	movs	r3, #154	@ 0x9a
 80041e4:	80fb      	strh	r3, [r7, #6]
 80041e6:	e00c      	b.n	8004202 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 80041e8:	2384      	movs	r3, #132	@ 0x84
 80041ea:	80fb      	strh	r3, [r7, #6]
 80041ec:	e009      	b.n	8004202 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 80041ee:	238e      	movs	r3, #142	@ 0x8e
 80041f0:	80fb      	strh	r3, [r7, #6]
 80041f2:	e006      	b.n	8004202 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 80041f4:	23e6      	movs	r3, #230	@ 0xe6
 80041f6:	80fb      	strh	r3, [r7, #6]
 80041f8:	e003      	b.n	8004202 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 80041fa:	23f8      	movs	r3, #248	@ 0xf8
 80041fc:	80fb      	strh	r3, [r7, #6]
 80041fe:	bf00      	nop
 8004200:	e04c      	b.n	800429c <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8004202:	e04b      	b.n	800429c <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8004204:	4b49      	ldr	r3, [pc, #292]	@ (800432c <_UG_GetCharData+0x284>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	8a7a      	ldrh	r2, [r7, #18]
 800420c:	0052      	lsls	r2, r2, #1
 800420e:	4413      	add	r3, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fb83 	bl	800391c <ptr_8to16>
 8004216:	4603      	mov	r3, r0
 8004218:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800421a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800421e:	2b00      	cmp	r3, #0
 8004220:	da06      	bge.n	8004230 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8004222:	89fb      	ldrh	r3, [r7, #14]
 8004224:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004228:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800422a:	2301      	movs	r3, #1
 800422c:	747b      	strb	r3, [r7, #17]
 800422e:	e032      	b.n	8004296 <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8004230:	7c7b      	ldrb	r3, [r7, #17]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d021      	beq.n	800427a <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	8afb      	ldrh	r3, [r7, #22]
 800423a:	429a      	cmp	r2, r3
 800423c:	d30d      	bcc.n	800425a <_UG_GetCharData+0x1b2>
 800423e:	88fa      	ldrh	r2, [r7, #6]
 8004240:	89fb      	ldrh	r3, [r7, #14]
 8004242:	429a      	cmp	r2, r3
 8004244:	d809      	bhi.n	800425a <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8004246:	88fa      	ldrh	r2, [r7, #6]
 8004248:	8afb      	ldrh	r3, [r7, #22]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	b29a      	uxth	r2, r3
 800424e:	8abb      	ldrh	r3, [r7, #20]
 8004250:	4413      	add	r3, r2
 8004252:	82bb      	strh	r3, [r7, #20]
        found=1;
 8004254:	2301      	movs	r3, #1
 8004256:	743b      	strb	r3, [r7, #16]
        break;
 8004258:	e02a      	b.n	80042b0 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	8afb      	ldrh	r3, [r7, #22]
 800425e:	429a      	cmp	r2, r3
 8004260:	d323      	bcc.n	80042aa <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8004262:	89fa      	ldrh	r2, [r7, #14]
 8004264:	8afb      	ldrh	r3, [r7, #22]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	b29a      	uxth	r2, r3
 800426a:	8abb      	ldrh	r3, [r7, #20]
 800426c:	4413      	add	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	3301      	adds	r3, #1
 8004272:	82bb      	strh	r3, [r7, #20]
      range=0;
 8004274:	2300      	movs	r3, #0
 8004276:	747b      	strb	r3, [r7, #17]
 8004278:	e00d      	b.n	8004296 <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 800427a:	88fa      	ldrh	r2, [r7, #6]
 800427c:	89fb      	ldrh	r3, [r7, #14]
 800427e:	429a      	cmp	r2, r3
 8004280:	d102      	bne.n	8004288 <_UG_GetCharData+0x1e0>
      {
        found=1;
 8004282:	2301      	movs	r3, #1
 8004284:	743b      	strb	r3, [r7, #16]
        break;
 8004286:	e013      	b.n	80042b0 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8004288:	88fa      	ldrh	r2, [r7, #6]
 800428a:	89fb      	ldrh	r3, [r7, #14]
 800428c:	429a      	cmp	r2, r3
 800428e:	d30e      	bcc.n	80042ae <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8004290:	8abb      	ldrh	r3, [r7, #20]
 8004292:	3301      	adds	r3, #1
 8004294:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8004296:	8a7b      	ldrh	r3, [r7, #18]
 8004298:	3301      	adds	r3, #1
 800429a:	827b      	strh	r3, [r7, #18]
 800429c:	4b23      	ldr	r3, [pc, #140]	@ (800432c <_UG_GetCharData+0x284>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80042a2:	8a7a      	ldrh	r2, [r7, #18]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d3ad      	bcc.n	8004204 <_UG_GetCharData+0x15c>
 80042a8:	e002      	b.n	80042b0 <_UG_GetCharData+0x208>
        break;
 80042aa:	bf00      	nop
 80042ac:	e000      	b.n	80042b0 <_UG_GetCharData+0x208>
        break;
 80042ae:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 80042b0:	7c3b      	ldrb	r3, [r7, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d034      	beq.n	8004320 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 80042b6:	4b1d      	ldr	r3, [pc, #116]	@ (800432c <_UG_GetCharData+0x284>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004330 <_UG_GetCharData+0x288>)
 80042be:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 80042c0:	4a1c      	ldr	r2, [pc, #112]	@ (8004334 <_UG_GetCharData+0x28c>)
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80042c6:	4b19      	ldr	r3, [pc, #100]	@ (800432c <_UG_GetCharData+0x284>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	8aba      	ldrh	r2, [r7, #20]
 80042ce:	4917      	ldr	r1, [pc, #92]	@ (800432c <_UG_GetCharData+0x284>)
 80042d0:	6809      	ldr	r1, [r1, #0]
 80042d2:	8e09      	ldrh	r1, [r1, #48]	@ 0x30
 80042d4:	fb01 f202 	mul.w	r2, r1, r2
 80042d8:	4413      	add	r3, r2
 80042da:	4a17      	ldr	r2, [pc, #92]	@ (8004338 <_UG_GetCharData+0x290>)
 80042dc:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80042de:	4b13      	ldr	r3, [pc, #76]	@ (800432c <_UG_GetCharData+0x284>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d009      	beq.n	80042fc <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80042e8:	4b10      	ldr	r3, [pc, #64]	@ (800432c <_UG_GetCharData+0x284>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042ee:	8abb      	ldrh	r3, [r7, #20]
 80042f0:	4413      	add	r3, r2
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	b21a      	sxth	r2, r3
 80042f6:	4b11      	ldr	r3, [pc, #68]	@ (800433c <_UG_GetCharData+0x294>)
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	e006      	b.n	800430a <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <_UG_GetCharData+0x284>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004304:	b21a      	sxth	r2, r3
 8004306:	4b0d      	ldr	r3, [pc, #52]	@ (800433c <_UG_GetCharData+0x294>)
 8004308:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8004310:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <_UG_GetCharData+0x290>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8004318:	4b08      	ldr	r3, [pc, #32]	@ (800433c <_UG_GetCharData+0x294>)
 800431a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800431e:	e001      	b.n	8004324 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8004320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200009dc 	.word	0x200009dc
 8004330:	200009e0 	.word	0x200009e0
 8004334:	200009e4 	.word	0x200009e4
 8004338:	200009e8 	.word	0x200009e8
 800433c:	200009ec 	.word	0x200009ec

08004340 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8004340:	b590      	push	{r4, r7, lr}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8004348:	4b3d      	ldr	r3, [pc, #244]	@ (8004440 <_UG_FontSelect+0x100>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	429a      	cmp	r2, r3
 8004352:	d070      	beq.n	8004436 <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8004354:	4b3a      	ldr	r3, [pc, #232]	@ (8004440 <_UG_FontSelect+0x100>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	645a      	str	r2, [r3, #68]	@ 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	4b37      	ldr	r3, [pc, #220]	@ (8004440 <_UG_FontSelect+0x100>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	b25b      	sxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	da01      	bge.n	8004380 <_UG_FontSelect+0x40>
 800437c:	2201      	movs	r2, #1
 800437e:	e000      	b.n	8004382 <_UG_FontSelect+0x42>
 8004380:	2200      	movs	r2, #0
 8004382:	4b2f      	ldr	r3, [pc, #188]	@ (8004440 <_UG_FontSelect+0x100>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b2d2      	uxtb	r2, r2
 8004388:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	4a2b      	ldr	r2, [pc, #172]	@ (8004440 <_UG_FontSelect+0x100>)
 8004394:	6812      	ldr	r2, [r2, #0]
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	f882 302e 	strb.w	r3, [r2, #46]	@ 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	4a27      	ldr	r2, [pc, #156]	@ (8004440 <_UG_FontSelect+0x100>)
 80043a4:	6812      	ldr	r2, [r2, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	f882 302f 	strb.w	r3, [r2, #47]	@ 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 80043ac:	4b24      	ldr	r3, [pc, #144]	@ (8004440 <_UG_FontSelect+0x100>)
 80043ae:	681c      	ldr	r4, [r3, #0]
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff fab3 	bl	800391c <ptr_8to16>
 80043b6:	4603      	mov	r3, r0
 80043b8:	8663      	strh	r3, [r4, #50]	@ 0x32
  font+=2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3302      	adds	r3, #2
 80043be:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 80043c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004440 <_UG_FontSelect+0x100>)
 80043c2:	681c      	ldr	r4, [r3, #0]
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f7ff faa9 	bl	800391c <ptr_8to16>
 80043ca:	4603      	mov	r3, r0
 80043cc:	86a3      	strh	r3, [r4, #52]	@ 0x34
  font+=2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3302      	adds	r3, #2
 80043d2:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80043d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <_UG_FontSelect+0x100>)
 80043d6:	681c      	ldr	r4, [r3, #0]
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff fa9f 	bl	800391c <ptr_8to16>
 80043de:	4603      	mov	r3, r0
 80043e0:	8623      	strh	r3, [r4, #48]	@ 0x30
  font+=2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	3302      	adds	r3, #2
 80043e6:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1c5a      	adds	r2, r3, #1
 80043ec:	607a      	str	r2, [r7, #4]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 80043f4:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <_UG_FontSelect+0x100>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80043fc:	4b10      	ldr	r3, [pc, #64]	@ (8004440 <_UG_FontSelect+0x100>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004402:	461a      	mov	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4413      	add	r3, r2
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	e003      	b.n	8004414 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800440c:	4b0c      	ldr	r3, [pc, #48]	@ (8004440 <_UG_FontSelect+0x100>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2200      	movs	r2, #0
 8004412:	639a      	str	r2, [r3, #56]	@ 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8004414:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <_UG_FontSelect+0x100>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	63da      	str	r2, [r3, #60]	@ 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 800441c:	4b08      	ldr	r3, [pc, #32]	@ (8004440 <_UG_FontSelect+0x100>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	461a      	mov	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800442c:	4b04      	ldr	r3, [pc, #16]	@ (8004440 <_UG_FontSelect+0x100>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	641a      	str	r2, [r3, #64]	@ 0x40
 8004434:	e000      	b.n	8004438 <_UG_FontSelect+0xf8>
    return;
 8004436:	bf00      	nop
}
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bd90      	pop	{r4, r7, pc}
 800443e:	bf00      	nop
 8004440:	200009dc 	.word	0x200009dc

08004444 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8004444:	b5b0      	push	{r4, r5, r7, lr}
 8004446:	b08c      	sub	sp, #48	@ 0x30
 8004448:	af00      	add	r7, sp, #0
 800444a:	4604      	mov	r4, r0
 800444c:	4608      	mov	r0, r1
 800444e:	4611      	mov	r1, r2
 8004450:	461a      	mov	r2, r3
 8004452:	4623      	mov	r3, r4
 8004454:	80fb      	strh	r3, [r7, #6]
 8004456:	4603      	mov	r3, r0
 8004458:	80bb      	strh	r3, [r7, #4]
 800445a:	460b      	mov	r3, r1
 800445c:	807b      	strh	r3, [r7, #2]
 800445e:	4613      	mov	r3, r2
 8004460:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8004462:	2300      	movs	r3, #0
 8004464:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004466:	2300      	movs	r3, #0
 8004468:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800446a:	2300      	movs	r3, #0
 800446c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800446e:	2300      	movs	r3, #0
 8004470:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8004472:	4b8b      	ldr	r3, [pc, #556]	@ (80046a0 <_UG_PutChar+0x25c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800447a:	75fb      	strb	r3, [r7, #23]
 800447c:	4b88      	ldr	r3, [pc, #544]	@ (80046a0 <_UG_PutChar+0x25c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800448e:	f107 0208 	add.w	r2, r7, #8
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	4611      	mov	r1, r2
 8004496:	4618      	mov	r0, r3
 8004498:	f7ff fe06 	bl	80040a8 <_UG_GetCharData>
 800449c:	4603      	mov	r3, r0
 800449e:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 80044a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d102      	bne.n	80044b0 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295
 80044ae:	e224      	b.n	80048fa <_UG_PutChar+0x4b6>

   bn =  gui->currentFont.char_width;
 80044b0:	4b7b      	ldr	r3, [pc, #492]	@ (80046a0 <_UG_PutChar+0x25c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80044b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if ( !bn ){
 80044ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <_UG_PutChar+0x80>
     return 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	e21a      	b.n	80048fa <_UG_PutChar+0x4b6>
   }
   bn >>= 3;
 80044c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044c6:	08db      	lsrs	r3, r3, #3
 80044c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 80044ca:	4b75      	ldr	r3, [pc, #468]	@ (80046a0 <_UG_PutChar+0x25c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <_UG_PutChar+0x9e>
 80044dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80044de:	3301      	adds	r3, #1
 80044e0:	84bb      	strh	r3, [r7, #36]	@ 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80044e2:	7dbb      	ldrb	r3, [r7, #22]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01c      	beq.n	8004522 <_UG_PutChar+0xde>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80044e8:	4b6d      	ldr	r3, [pc, #436]	@ (80046a0 <_UG_PutChar+0x25c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044ee:	461c      	mov	r4, r3
 80044f0:	88ba      	ldrh	r2, [r7, #4]
 80044f2:	8abb      	ldrh	r3, [r7, #20]
 80044f4:	4413      	add	r3, r2
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	b21a      	sxth	r2, r3
 80044fe:	4b68      	ldr	r3, [pc, #416]	@ (80046a0 <_UG_PutChar+0x25c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004506:	4619      	mov	r1, r3
 8004508:	887b      	ldrh	r3, [r7, #2]
 800450a:	440b      	add	r3, r1
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29b      	uxth	r3, r3
 8004512:	b21b      	sxth	r3, r3
 8004514:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004518:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800451c:	47a0      	blx	r4
 800451e:	4603      	mov	r3, r0
 8004520:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8004522:	4b5f      	ldr	r3, [pc, #380]	@ (80046a0 <_UG_PutChar+0x25c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 8171 	bne.w	8004812 <_UG_PutChar+0x3ce>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004530:	2300      	movs	r3, #0
 8004532:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004534:	e0eb      	b.n	800470e <_UG_PutChar+0x2ca>
     {
       c=0;
 8004536:	2300      	movs	r3, #0
 8004538:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 800453a:	2300      	movs	r3, #0
 800453c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800453e:	e0de      	b.n	80046fe <_UG_PutChar+0x2ba>
       {
         b = *data++;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	60ba      	str	r2, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 800454a:	2300      	movs	r3, #0
 800454c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800454e:	e0c9      	b.n	80046e4 <_UG_PutChar+0x2a0>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8004550:	7f7b      	ldrb	r3, [r7, #29]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d033      	beq.n	80045c2 <_UG_PutChar+0x17e>
           {
             if(driver)
 800455a:	7dbb      	ldrb	r3, [r7, #22]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d01f      	beq.n	80045a0 <_UG_PutChar+0x15c>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8004560:	8c3b      	ldrh	r3, [r7, #32]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <_UG_PutChar+0x138>
 8004566:	7dfb      	ldrb	r3, [r7, #23]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <_UG_PutChar+0x138>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 800456c:	8c3a      	ldrh	r2, [r7, #32]
 800456e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	4610      	mov	r0, r2
 8004576:	4798      	blx	r3
                 bpixels=0;
 8004578:	2300      	movs	r3, #0
 800457a:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 800457c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10a      	bne.n	8004598 <_UG_PutChar+0x154>
 8004582:	7dfb      	ldrb	r3, [r7, #23]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <_UG_PutChar+0x154>
               {
                 x0=x+c;
 8004588:	88ba      	ldrh	r2, [r7, #4]
 800458a:	8bfb      	ldrh	r3, [r7, #30]
 800458c:	4413      	add	r3, r2
 800458e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                 y0=y+j;
 8004590:	887a      	ldrh	r2, [r7, #2]
 8004592:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004594:	4413      	add	r3, r2
 8004596:	85bb      	strh	r3, [r7, #44]	@ 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8004598:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800459a:	3301      	adds	r3, #1
 800459c:	847b      	strh	r3, [r7, #34]	@ 0x22
 800459e:	e095      	b.n	80046cc <_UG_PutChar+0x288>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 80045a0:	4b3f      	ldr	r3, [pc, #252]	@ (80046a0 <_UG_PutChar+0x25c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	88b9      	ldrh	r1, [r7, #4]
 80045aa:	8bfa      	ldrh	r2, [r7, #30]
 80045ac:	440a      	add	r2, r1
 80045ae:	b292      	uxth	r2, r2
 80045b0:	b210      	sxth	r0, r2
 80045b2:	8879      	ldrh	r1, [r7, #2]
 80045b4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80045b6:	440a      	add	r2, r1
 80045b8:	b292      	uxth	r2, r2
 80045ba:	b211      	sxth	r1, r2
 80045bc:	883a      	ldrh	r2, [r7, #0]
 80045be:	4798      	blx	r3
 80045c0:	e084      	b.n	80046cc <_UG_PutChar+0x288>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 80045c2:	7dbb      	ldrb	r3, [r7, #22]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d06d      	beq.n	80046a4 <_UG_PutChar+0x260>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 80045c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d064      	beq.n	8004698 <_UG_PutChar+0x254>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80045ce:	7dfb      	ldrb	r3, [r7, #23]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d15e      	bne.n	8004692 <_UG_PutChar+0x24e>
                 {
                   push_pixels(fpixels,fc);
 80045d4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80045d6:	8839      	ldrh	r1, [r7, #0]
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	4610      	mov	r0, r2
 80045dc:	4798      	blx	r3
                   fpixels=0;
 80045de:	2300      	movs	r3, #0
 80045e0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80045e2:	e059      	b.n	8004698 <_UG_PutChar+0x254>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80045e4:	88ba      	ldrh	r2, [r7, #4]
 80045e6:	8abb      	ldrh	r3, [r7, #20]
 80045e8:	4413      	add	r3, r2
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80045f2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80045f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d003      	beq.n	8004604 <_UG_PutChar+0x1c0>
 80045fc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80045fe:	89fb      	ldrh	r3, [r7, #14]
 8004600:	429a      	cmp	r2, r3
 8004602:	d224      	bcs.n	800464e <_UG_PutChar+0x20a>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8004604:	4b26      	ldr	r3, [pc, #152]	@ (80046a0 <_UG_PutChar+0x25c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800460a:	461d      	mov	r5, r3
 800460c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8004610:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8004614:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	4413      	add	r3, r2
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29b      	uxth	r3, r3
 8004620:	b21c      	sxth	r4, r3
 8004622:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004624:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004628:	fb92 f3f3 	sdiv	r3, r2, r3
 800462c:	b29a      	uxth	r2, r3
 800462e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004630:	4413      	add	r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	b21b      	sxth	r3, r3
 8004636:	4622      	mov	r2, r4
 8004638:	47a8      	blx	r5
 800463a:	4603      	mov	r3, r0
 800463c:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800463e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004640:	8839      	ldrh	r1, [r7, #0]
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4610      	mov	r0, r2
 8004646:	4798      	blx	r3
                       fpixels=0;
 8004648:	2300      	movs	r3, #0
 800464a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800464c:	e021      	b.n	8004692 <_UG_PutChar+0x24e>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800464e:	4b14      	ldr	r3, [pc, #80]	@ (80046a0 <_UG_PutChar+0x25c>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004654:	461c      	mov	r4, r3
 8004656:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800465a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800465e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8004660:	89fb      	ldrh	r3, [r7, #14]
 8004662:	4413      	add	r3, r2
 8004664:	b29b      	uxth	r3, r3
 8004666:	3b01      	subs	r3, #1
 8004668:	b29b      	uxth	r3, r3
 800466a:	b21a      	sxth	r2, r3
 800466c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8004670:	47a0      	blx	r4
 8004672:	4603      	mov	r3, r0
 8004674:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8004676:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004678:	8839      	ldrh	r1, [r7, #0]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	4610      	mov	r0, r2
 800467e:	4798      	blx	r3
                       fpixels -= width;
 8004680:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004682:	89fb      	ldrh	r3, [r7, #14]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	847b      	strh	r3, [r7, #34]	@ 0x22
                       x0=x;
 8004688:	88bb      	ldrh	r3, [r7, #4]
 800468a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                       y0++;
 800468c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800468e:	3301      	adds	r3, #1
 8004690:	85bb      	strh	r3, [r7, #44]	@ 0x2c
                   while(fpixels)
 8004692:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1a5      	bne.n	80045e4 <_UG_PutChar+0x1a0>
                     }
                   }
                 }
               }
               bpixels++;
 8004698:	8c3b      	ldrh	r3, [r7, #32]
 800469a:	3301      	adds	r3, #1
 800469c:	843b      	strh	r3, [r7, #32]
 800469e:	e015      	b.n	80046cc <_UG_PutChar+0x288>
 80046a0:	200009dc 	.word	0x200009dc
             }
             else if(!trans)                           // Not accelerated output
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d110      	bne.n	80046cc <_UG_PutChar+0x288>
             {
               gui->device->pset(x+c,y+j,bc);
 80046aa:	4b96      	ldr	r3, [pc, #600]	@ (8004904 <_UG_PutChar+0x4c0>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	88b9      	ldrh	r1, [r7, #4]
 80046b4:	8bfa      	ldrh	r2, [r7, #30]
 80046b6:	440a      	add	r2, r1
 80046b8:	b292      	uxth	r2, r2
 80046ba:	b210      	sxth	r0, r2
 80046bc:	8879      	ldrh	r1, [r7, #2]
 80046be:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80046c0:	440a      	add	r2, r1
 80046c2:	b292      	uxth	r2, r2
 80046c4:	b211      	sxth	r1, r2
 80046c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80046ca:	4798      	blx	r3
             }
           }
           b >>= 1;
 80046cc:	7f7b      	ldrb	r3, [r7, #29]
 80046ce:	085b      	lsrs	r3, r3, #1
 80046d0:	777b      	strb	r3, [r7, #29]
           c++;
 80046d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3301      	adds	r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80046de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80046e0:	3301      	adds	r3, #1
 80046e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80046e4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80046e6:	2b07      	cmp	r3, #7
 80046e8:	d806      	bhi.n	80046f8 <_UG_PutChar+0x2b4>
 80046ea:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80046ee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f6ff af2c 	blt.w	8004550 <_UG_PutChar+0x10c>
       for( i=0;i<bn;i++ )
 80046f8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80046fa:	3301      	adds	r3, #1
 80046fc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80046fe:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004700:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004702:	429a      	cmp	r2, r3
 8004704:	f4ff af1c 	bcc.w	8004540 <_UG_PutChar+0xfc>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8004708:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800470a:	3301      	adds	r3, #1
 800470c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800470e:	4b7d      	ldr	r3, [pc, #500]	@ (8004904 <_UG_PutChar+0x4c0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004716:	461a      	mov	r2, r3
 8004718:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800471a:	4293      	cmp	r3, r2
 800471c:	f4ff af0b 	bcc.w	8004536 <_UG_PutChar+0xf2>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8004720:	7dbb      	ldrb	r3, [r7, #22]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80e7 	beq.w	80048f6 <_UG_PutChar+0x4b2>
       if(bpixels && !trans)
 8004728:	8c3b      	ldrh	r3, [r7, #32]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <_UG_PutChar+0x2fe>
 800472e:	7dfb      	ldrb	r3, [r7, #23]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <_UG_PutChar+0x2fe>
       {
         push_pixels(bpixels,bc);
 8004734:	8c3a      	ldrh	r2, [r7, #32]
 8004736:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	4610      	mov	r0, r2
 800473e:	4798      	blx	r3
 8004740:	e0d9      	b.n	80048f6 <_UG_PutChar+0x4b2>
       }
       else if(fpixels)
 8004742:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 80d6 	beq.w	80048f6 <_UG_PutChar+0x4b2>
       {
         if(!trans)
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d15c      	bne.n	800480a <_UG_PutChar+0x3c6>
         {
           push_pixels(fpixels,fc);
 8004750:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004752:	8839      	ldrh	r1, [r7, #0]
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	4610      	mov	r0, r2
 8004758:	4798      	blx	r3
 800475a:	e0cc      	b.n	80048f6 <_UG_PutChar+0x4b2>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 800475c:	88ba      	ldrh	r2, [r7, #4]
 800475e:	8abb      	ldrh	r3, [r7, #20]
 8004760:	4413      	add	r3, r2
 8004762:	b29a      	uxth	r2, r3
 8004764:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 800476a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800476c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004770:	429a      	cmp	r2, r3
 8004772:	d003      	beq.n	800477c <_UG_PutChar+0x338>
 8004774:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004776:	8a3b      	ldrh	r3, [r7, #16]
 8004778:	429a      	cmp	r2, r3
 800477a:	d224      	bcs.n	80047c6 <_UG_PutChar+0x382>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800477c:	4b61      	ldr	r3, [pc, #388]	@ (8004904 <_UG_PutChar+0x4c0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004782:	461d      	mov	r5, r3
 8004784:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8004788:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 800478c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800478e:	8a3b      	ldrh	r3, [r7, #16]
 8004790:	4413      	add	r3, r2
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29b      	uxth	r3, r3
 8004798:	b21c      	sxth	r4, r3
 800479a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800479c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80047a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80047a8:	4413      	add	r3, r2
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	b21b      	sxth	r3, r3
 80047ae:	4622      	mov	r2, r4
 80047b0:	47a8      	blx	r5
 80047b2:	4603      	mov	r3, r0
 80047b4:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80047b6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80047b8:	8839      	ldrh	r1, [r7, #0]
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4610      	mov	r0, r2
 80047be:	4798      	blx	r3
               fpixels=0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80047c4:	e021      	b.n	800480a <_UG_PutChar+0x3c6>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80047c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004904 <_UG_PutChar+0x4c0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80047cc:	461c      	mov	r4, r3
 80047ce:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80047d2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80047d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80047d8:	8a3b      	ldrh	r3, [r7, #16]
 80047da:	4413      	add	r3, r2
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	b21a      	sxth	r2, r3
 80047e4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80047e8:	47a0      	blx	r4
 80047ea:	4603      	mov	r3, r0
 80047ec:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80047ee:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80047f0:	8839      	ldrh	r1, [r7, #0]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4610      	mov	r0, r2
 80047f6:	4798      	blx	r3
               fpixels -= width;
 80047f8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80047fa:	8a3b      	ldrh	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	847b      	strh	r3, [r7, #34]	@ 0x22
               x0=x;
 8004800:	88bb      	ldrh	r3, [r7, #4]
 8004802:	85fb      	strh	r3, [r7, #46]	@ 0x2e
               y0++;
 8004804:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004806:	3301      	adds	r3, #1
 8004808:	85bb      	strh	r3, [r7, #44]	@ 0x2c
           while(fpixels)
 800480a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1a5      	bne.n	800475c <_UG_PutChar+0x318>
 8004810:	e071      	b.n	80048f6 <_UG_PutChar+0x4b2>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8004812:	4b3c      	ldr	r3, [pc, #240]	@ (8004904 <_UG_PutChar+0x4c0>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800481a:	2b01      	cmp	r3, #1
 800481c:	d16b      	bne.n	80048f6 <_UG_PutChar+0x4b2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800481e:	2300      	movs	r3, #0
 8004820:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004822:	e060      	b.n	80048e6 <_UG_PutChar+0x4a2>
     {
       for( i=0;i<actual_char_width;i++ )
 8004824:	2300      	movs	r3, #0
 8004826:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004828:	e04a      	b.n	80048c0 <_UG_PutChar+0x47c>
       {
         b = *data++;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	60ba      	str	r2, [r7, #8]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8004834:	883b      	ldrh	r3, [r7, #0]
 8004836:	b2db      	uxtb	r3, r3
 8004838:	7f7a      	ldrb	r2, [r7, #29]
 800483a:	fb03 f202 	mul.w	r2, r3, r2
 800483e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004842:	b2db      	uxtb	r3, r3
 8004844:	7f79      	ldrb	r1, [r7, #29]
 8004846:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	121b      	asrs	r3, r3, #8
 8004852:	b21b      	sxth	r3, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8004858:	883b      	ldrh	r3, [r7, #0]
 800485a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800485e:	7f79      	ldrb	r1, [r7, #29]
 8004860:	fb03 f101 	mul.w	r1, r3, r1
 8004864:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004868:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800486c:	7f78      	ldrb	r0, [r7, #29]
 800486e:	f5c0 7080 	rsb	r0, r0, #256	@ 0x100
 8004872:	fb00 f303 	mul.w	r3, r0, r3
 8004876:	440b      	add	r3, r1
 8004878:	121b      	asrs	r3, r3, #8
 800487a:	b21b      	sxth	r3, r3
 800487c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004880:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8004882:	4313      	orrs	r3, r2
 8004884:	b21b      	sxth	r3, r3
 8004886:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8004888:	7dbb      	ldrb	r3, [r7, #22]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <_UG_PutChar+0x456>
         {
           push_pixels(1,color);                                                          // Accelerated output
 800488e:	8a7a      	ldrh	r2, [r7, #18]
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	4611      	mov	r1, r2
 8004894:	2001      	movs	r0, #1
 8004896:	4798      	blx	r3
 8004898:	e00f      	b.n	80048ba <_UG_PutChar+0x476>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 800489a:	4b1a      	ldr	r3, [pc, #104]	@ (8004904 <_UG_PutChar+0x4c0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	88b9      	ldrh	r1, [r7, #4]
 80048a4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80048a6:	440a      	add	r2, r1
 80048a8:	b292      	uxth	r2, r2
 80048aa:	b210      	sxth	r0, r2
 80048ac:	8879      	ldrh	r1, [r7, #2]
 80048ae:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80048b0:	440a      	add	r2, r1
 80048b2:	b292      	uxth	r2, r2
 80048b4:	b211      	sxth	r1, r2
 80048b6:	8a7a      	ldrh	r2, [r7, #18]
 80048b8:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 80048ba:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80048bc:	3301      	adds	r3, #1
 80048be:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80048c0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80048c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	dbaf      	blt.n	800482a <_UG_PutChar+0x3e6>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004904 <_UG_PutChar+0x4c0>)
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80048d4:	4611      	mov	r1, r2
 80048d6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80048da:	1a8a      	subs	r2, r1, r2
 80048dc:	4413      	add	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80048e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80048e2:	3301      	adds	r3, #1
 80048e4:	853b      	strh	r3, [r7, #40]	@ 0x28
 80048e6:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <_UG_PutChar+0x4c0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80048ee:	461a      	mov	r2, r3
 80048f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d396      	bcc.n	8004824 <_UG_PutChar+0x3e0>
     }
   }
   #endif
   return (actual_char_width);
 80048f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3730      	adds	r7, #48	@ 0x30
 80048fe:	46bd      	mov	sp, r7
 8004900:	bdb0      	pop	{r4, r5, r7, pc}
 8004902:	bf00      	nop
 8004904:	200009dc 	.word	0x200009dc

08004908 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8004908:	b480      	push	{r7}
 800490a:	b089      	sub	sp, #36	@ 0x24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8004910:	4b57      	ldr	r3, [pc, #348]	@ (8004a70 <_UG_ProcessTouchData+0x168>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	88db      	ldrh	r3, [r3, #6]
 8004916:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8004918:	4b55      	ldr	r3, [pc, #340]	@ (8004a70 <_UG_ProcessTouchData+0x168>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	891b      	ldrh	r3, [r3, #8]
 800491e:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8004920:	4b53      	ldr	r3, [pc, #332]	@ (8004a70 <_UG_ProcessTouchData+0x168>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	791b      	ldrb	r3, [r3, #4]
 8004926:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	83fb      	strh	r3, [r7, #30]
 8004932:	e090      	b.n	8004a56 <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	8bfb      	ldrh	r3, [r7, #30]
 800493a:	015b      	lsls	r3, r3, #5
 800493c:	4413      	add	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d179      	bne.n	8004a4a <_UG_ProcessTouchData+0x142>
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d074      	beq.n	8004a4a <_UG_ProcessTouchData+0x142>
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d06f      	beq.n	8004a4a <_UG_ProcessTouchData+0x142>
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d16a      	bne.n	8004a4a <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8004974:	7dfb      	ldrb	r3, [r7, #23]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d047      	beq.n	8004a0a <_UG_ProcessTouchData+0x102>
 800497a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d042      	beq.n	8004a0a <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 8004984:	7f7b      	ldrb	r3, [r7, #29]
 8004986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 800498e:	7f7b      	ldrb	r3, [r7, #29]
 8004990:	f043 0305 	orr.w	r3, r3, #5
 8004994:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 8004996:	7f7b      	ldrb	r3, [r7, #29]
 8004998:	f023 0318 	bic.w	r3, r3, #24
 800499c:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 800499e:	7f7b      	ldrb	r3, [r7, #29]
 80049a0:	f023 0320 	bic.w	r3, r3, #32
 80049a4:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80049ac:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	db25      	blt.n	8004a00 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80049ba:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80049be:	429a      	cmp	r2, r3
 80049c0:	dc1e      	bgt.n	8004a00 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80049c8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	db17      	blt.n	8004a00 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80049d6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80049da:	429a      	cmp	r2, r3
 80049dc:	dc10      	bgt.n	8004a00 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80049de:	7f7b      	ldrb	r3, [r7, #29]
 80049e0:	f043 0320 	orr.w	r3, r3, #32
 80049e4:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80049e6:	7f7b      	ldrb	r3, [r7, #29]
 80049e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d107      	bne.n	8004a00 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 80049f0:	7f7b      	ldrb	r3, [r7, #29]
 80049f2:	f023 0304 	bic.w	r3, r3, #4
 80049f6:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 80049f8:	7f7b      	ldrb	r3, [r7, #29]
 80049fa:	f043 0302 	orr.w	r3, r3, #2
 80049fe:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8004a00:	7f7b      	ldrb	r3, [r7, #29]
 8004a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a06:	777b      	strb	r3, [r7, #29]
 8004a08:	e01f      	b.n	8004a4a <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8004a0a:	7f7b      	ldrb	r3, [r7, #29]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01a      	beq.n	8004a4a <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 8004a14:	7f7b      	ldrb	r3, [r7, #29]
 8004a16:	f003 0320 	and.w	r3, r3, #32
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8004a1e:	7f7b      	ldrb	r3, [r7, #29]
 8004a20:	f043 0308 	orr.w	r3, r3, #8
 8004a24:	777b      	strb	r3, [r7, #29]
 8004a26:	e003      	b.n	8004a30 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8004a28:	7f7b      	ldrb	r3, [r7, #29]
 8004a2a:	f043 0310 	orr.w	r3, r3, #16
 8004a2e:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8004a30:	7f7b      	ldrb	r3, [r7, #29]
 8004a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 8004a3a:	7f7b      	ldrb	r3, [r7, #29]
 8004a3c:	f043 0301 	orr.w	r3, r3, #1
 8004a40:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8004a42:	7f7b      	ldrb	r3, [r7, #29]
 8004a44:	f023 0346 	bic.w	r3, r3, #70	@ 0x46
 8004a48:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	7f7a      	ldrb	r2, [r7, #29]
 8004a4e:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 8004a50:	8bfb      	ldrh	r3, [r7, #30]
 8004a52:	3301      	adds	r3, #1
 8004a54:	83fb      	strh	r3, [r7, #30]
 8004a56:	8bfa      	ldrh	r2, [r7, #30]
 8004a58:	8abb      	ldrh	r3, [r7, #20]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	f4ff af6a 	bcc.w	8004934 <_UG_ProcessTouchData+0x2c>
   }
}
 8004a60:	bf00      	nop
 8004a62:	bf00      	nop
 8004a64:	3724      	adds	r7, #36	@ 0x24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	200009dc 	.word	0x200009dc

08004a74 <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8004a82:	2300      	movs	r3, #0
 8004a84:	82fb      	strh	r3, [r7, #22]
 8004a86:	e035      	b.n	8004af4 <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	8afb      	ldrh	r3, [r7, #22]
 8004a8e:	015b      	lsls	r3, r3, #5
 8004a90:	4413      	add	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8004aa0:	7bfb      	ldrb	r3, [r7, #15]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d121      	bne.n	8004aee <_UG_UpdateObjects+0x7a>
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01c      	beq.n	8004aee <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d004      	beq.n	8004ac8 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	6939      	ldr	r1, [r7, #16]
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00d      	beq.n	8004aee <_UG_UpdateObjects+0x7a>
 8004ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	da09      	bge.n	8004aee <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8004ada:	7bbb      	ldrb	r3, [r7, #14]
 8004adc:	f003 0341 	and.w	r3, r3, #65	@ 0x41
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d004      	beq.n	8004aee <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	6939      	ldr	r1, [r7, #16]
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8004aee:	8afb      	ldrh	r3, [r7, #22]
 8004af0:	3301      	adds	r3, #1
 8004af2:	82fb      	strh	r3, [r7, #22]
 8004af4:	8afa      	ldrh	r2, [r7, #22]
 8004af6:	8abb      	ldrh	r3, [r7, #20]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d3c5      	bcc.n	8004a88 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
	...

08004b08 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8004b10:	4b22      	ldr	r3, [pc, #136]	@ (8004b9c <_UG_HandleEvents+0x94>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8004b16:	4b21      	ldr	r3, [pc, #132]	@ (8004b9c <_UG_HandleEvents+0x94>)
 8004b18:	2202      	movs	r2, #2
 8004b1a:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	82fb      	strh	r3, [r7, #22]
 8004b26:	e02f      	b.n	8004b88 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	8afb      	ldrh	r3, [r7, #22]
 8004b2e:	015b      	lsls	r3, r3, #5
 8004b30:	4413      	add	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11e      	bne.n	8004b82 <_UG_HandleEvents+0x7a>
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d019      	beq.n	8004b82 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	7e9b      	ldrb	r3, [r3, #26]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d015      	beq.n	8004b82 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8004b56:	4a11      	ldr	r2, [pc, #68]	@ (8004b9c <_UG_HandleEvents+0x94>)
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	7e1a      	ldrb	r2, [r3, #24]
 8004b60:	4b0e      	ldr	r3, [pc, #56]	@ (8004b9c <_UG_HandleEvents+0x94>)
 8004b62:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	7e5a      	ldrb	r2, [r3, #25]
 8004b68:	4b0c      	ldr	r3, [pc, #48]	@ (8004b9c <_UG_HandleEvents+0x94>)
 8004b6a:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	7e9a      	ldrb	r2, [r3, #26]
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <_UG_HandleEvents+0x94>)
 8004b72:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b78:	4808      	ldr	r0, [pc, #32]	@ (8004b9c <_UG_HandleEvents+0x94>)
 8004b7a:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8004b82:	8afb      	ldrh	r3, [r7, #22]
 8004b84:	3301      	adds	r3, #1
 8004b86:	82fb      	strh	r3, [r7, #22]
 8004b88:	8afa      	ldrh	r2, [r7, #22]
 8004b8a:	8abb      	ldrh	r3, [r7, #20]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d3cb      	bcc.n	8004b28 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200009f0 	.word	0x200009f0

08004ba0 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8004ba0:	b590      	push	{r4, r7, lr}
 8004ba2:	b08f      	sub	sp, #60	@ 0x3c
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 812c 	beq.w	8004e0a <_UG_PutText+0x26a>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 8127 	beq.w	8004e0a <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	89db      	ldrh	r3, [r3, #14]
 8004bc0:	847b      	strh	r3, [r7, #34]	@ 0x22
   UG_S16 ys=txt->a.ys;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	895b      	ldrh	r3, [r3, #10]
 8004bc6:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	3302      	adds	r3, #2
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 8004bd2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8004bd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004bda:	1ad2      	subs	r2, r2, r3
 8004bdc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	f2c0 8114 	blt.w	8004e0e <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	891b      	ldrh	r3, [r3, #8]
 8004bea:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	899b      	ldrh	r3, [r3, #12]
 8004bf0:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	7d1b      	ldrb	r3, [r3, #20]
 8004bf6:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8adb      	ldrh	r3, [r3, #22]
 8004bfc:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8b1b      	ldrh	r3, [r3, #24]
 8004c02:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fb94 	bl	8004340 <_UG_FontSelect>

   rc=1;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
   c=str;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004c20:	4b80      	ldr	r3, [pc, #512]	@ (8004e24 <_UG_PutText+0x284>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d107      	bne.n	8004c3c <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8004c2c:	f107 0308 	add.w	r3, r7, #8
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff f9c1 	bl	8003fb8 <_UG_DecodeUTF8>
 8004c36:	4603      	mov	r3, r0
 8004c38:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004c3a:	e004      	b.n	8004c46 <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	60ba      	str	r2, [r7, #8]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	84bb      	strh	r3, [r7, #36]	@ 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8004c46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 8004c4c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004c4e:	2b0a      	cmp	r3, #10
 8004c50:	d1e6      	bne.n	8004c20 <_UG_PutText+0x80>
 8004c52:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c54:	3301      	adds	r3, #1
 8004c56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004c58:	e7e2      	b.n	8004c20 <_UG_PutText+0x80>
     if(!chr) break;
 8004c5a:	bf00      	nop
   }

   yp = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8004c60:	7e7b      	ldrb	r3, [r7, #25]
 8004c62:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d01f      	beq.n	8004caa <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 8004c6a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004c6c:	8c3b      	ldrh	r3, [r7, #32]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3301      	adds	r3, #1
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_height*rc;
 8004c78:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004c7a:	8bfb      	ldrh	r3, [r7, #30]
 8004c7c:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8004c7e:	fb11 f303 	smulbb	r3, r1, r3
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	84fb      	strh	r3, [r7, #38]	@ 0x26
      yp -= char_v_space*(rc-1);
 8004c8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004c8c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	b299      	uxth	r1, r3
 8004c92:	8abb      	ldrh	r3, [r7, #20]
 8004c94:	fb11 f303 	smulbb	r3, r1, r3
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if ( yp < 0 ){
 8004ca0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f2c0 80b4 	blt.w	8004e12 <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8004caa:	7e7b      	ldrb	r3, [r7, #25]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <_UG_PutText+0x11c>
 8004cb4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8004cb8:	105b      	asrs	r3, r3, #1
 8004cba:	84fb      	strh	r3, [r7, #38]	@ 0x26
   yp += ys;
 8004cbc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004cbe:	8c3b      	ldrh	r3, [r7, #32]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	84fb      	strh	r3, [r7, #38]	@ 0x26

   while( 1 )
   {
      sl=0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      c=str;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004cd2:	4b54      	ldr	r3, [pc, #336]	@ (8004e24 <_UG_PutText+0x284>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d107      	bne.n	8004cee <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8004cde:	f107 0308 	add.w	r3, r7, #8
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff f968 	bl	8003fb8 <_UG_DecodeUTF8>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004cec:	e004      	b.n	8004cf8 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	60ba      	str	r2, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	84bb      	strh	r3, [r7, #36]	@ 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8004cf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01b      	beq.n	8004d36 <_UG_PutText+0x196>
 8004cfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d00:	2b0a      	cmp	r3, #10
 8004d02:	d018      	beq.n	8004d36 <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8004d04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d06:	2100      	movs	r1, #0
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff f9cd 	bl	80040a8 <_UG_GetCharData>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 8004d12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d00a      	beq.n	8004d32 <_UG_PutText+0x192>
         sl++;
 8004d1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004d1e:	3301      	adds	r3, #1
 8004d20:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         wl += w + char_h_space;
 8004d22:	8a7a      	ldrh	r2, [r7, #18]
 8004d24:	8afb      	ldrh	r3, [r7, #22]
 8004d26:	4413      	add	r3, r2
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004d2c:	4413      	add	r3, r2
 8004d2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004d30:	e7cf      	b.n	8004cd2 <_UG_PutText+0x132>
         if (w == -1){continue;}
 8004d32:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004d34:	e7cd      	b.n	8004cd2 <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 8004d36:	8afb      	ldrh	r3, [r7, #22]
 8004d38:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	857b      	strh	r3, [r7, #42]	@ 0x2a

      xp = xe - xs + 1;
 8004d3e:	8b7a      	ldrh	r2, [r7, #26]
 8004d40:	8bbb      	ldrh	r3, [r7, #28]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp -= wl;
 8004d4c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004d4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	853b      	strh	r3, [r7, #40]	@ 0x28
      if ( xp < 0 ) break;
 8004d56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	db5b      	blt.n	8004e16 <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8004d5e:	7e7b      	ldrb	r3, [r7, #25]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <_UG_PutText+0x1ce>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004d6c:	e008      	b.n	8004d80 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8004d6e:	7e7b      	ldrb	r3, [r7, #25]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <_UG_PutText+0x1e0>
 8004d78:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8004d7c:	105b      	asrs	r3, r3, #1
 8004d7e:	853b      	strh	r3, [r7, #40]	@ 0x28
      xp += xs;
 8004d80:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8004d82:	8bbb      	ldrh	r3, [r7, #28]
 8004d84:	4413      	add	r3, r2
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	853b      	strh	r3, [r7, #40]	@ 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004d8a:	4b26      	ldr	r3, [pc, #152]	@ (8004e24 <_UG_PutText+0x284>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d107      	bne.n	8004da6 <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 8004d96:	f107 030c 	add.w	r3, r7, #12
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff f90c 	bl	8003fb8 <_UG_DecodeUTF8>
 8004da0:	4603      	mov	r3, r0
 8004da2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004da4:	e004      	b.n	8004db0 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	60fa      	str	r2, [r7, #12]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	84bb      	strh	r3, [r7, #36]	@ 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8004db0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d031      	beq.n	8004e1a <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 8004db6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004db8:	2b0a      	cmp	r3, #10
 8004dba:	d01c      	beq.n	8004df6 <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8a1c      	ldrh	r4, [r3, #16]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8a5b      	ldrh	r3, [r3, #18]
 8004dc4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8004dc8:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	@ 0x28
 8004dcc:	8cb8      	ldrh	r0, [r7, #36]	@ 0x24
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	f7ff fb37 	bl	8004444 <_UG_PutChar>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8004dda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de2:	d0d2      	beq.n	8004d8a <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 8004de4:	8a7a      	ldrh	r2, [r7, #18]
 8004de6:	8afb      	ldrh	r3, [r7, #22]
 8004de8:	4413      	add	r3, r2
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004dee:	4413      	add	r3, r2
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	853b      	strh	r3, [r7, #40]	@ 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8004df4:	e7c9      	b.n	8004d8a <_UG_PutText+0x1ea>
           break;
 8004df6:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8004df8:	8bfa      	ldrh	r2, [r7, #30]
 8004dfa:	8abb      	ldrh	r3, [r7, #20]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004e02:	4413      	add	r3, r2
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	84fb      	strh	r3, [r7, #38]	@ 0x26
      sl=0;
 8004e08:	e75d      	b.n	8004cc6 <_UG_PutText+0x126>
     return;
 8004e0a:	bf00      	nop
 8004e0c:	e006      	b.n	8004e1c <_UG_PutText+0x27c>
     return;
 8004e0e:	bf00      	nop
 8004e10:	e004      	b.n	8004e1c <_UG_PutText+0x27c>
        return;
 8004e12:	bf00      	nop
 8004e14:	e002      	b.n	8004e1c <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 8004e16:	bf00      	nop
 8004e18:	e000      	b.n	8004e1c <_UG_PutText+0x27c>
           return;
 8004e1a:	bf00      	nop
   }
}
 8004e1c:	3734      	adds	r7, #52	@ 0x34
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200009dc 	.word	0x200009dc

08004e28 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8004e28:	b5b0      	push	{r4, r5, r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	4611      	mov	r1, r2
 8004e34:	461a      	mov	r2, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	80fb      	strh	r3, [r7, #6]
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80bb      	strh	r3, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	807b      	strh	r3, [r7, #2]
 8004e42:	4613      	mov	r3, r2
 8004e44:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8004e46:	887b      	ldrh	r3, [r7, #2]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	b21c      	sxth	r4, r3
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	1c9a      	adds	r2, r3, #2
 8004e52:	61ba      	str	r2, [r7, #24]
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e5a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004e5e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e62:	9300      	str	r3, [sp, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	4622      	mov	r2, r4
 8004e68:	f7fe fe94 	bl	8003b94 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8004e6c:	88bb      	ldrh	r3, [r7, #4]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	b219      	sxth	r1, r3
 8004e74:	883b      	ldrh	r3, [r7, #0]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	b21c      	sxth	r4, r3
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	1c9a      	adds	r2, r3, #2
 8004e80:	61ba      	str	r2, [r7, #24]
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e88:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	4623      	mov	r3, r4
 8004e90:	f7fe fe80 	bl	8003b94 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	1c9a      	adds	r2, r3, #2
 8004e98:	61ba      	str	r2, [r7, #24]
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004ea0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ea4:	f9b7 1000 	ldrsh.w	r1, [r7]
 8004ea8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4623      	mov	r3, r4
 8004eb0:	f7fe fe70 	bl	8003b94 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8004eb4:	883b      	ldrh	r3, [r7, #0]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	b21c      	sxth	r4, r3
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	1c9a      	adds	r2, r3, #2
 8004ec0:	61ba      	str	r2, [r7, #24]
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ec8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004ecc:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	4623      	mov	r3, r4
 8004ed4:	f7fe fe5e 	bl	8003b94 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	3301      	adds	r3, #1
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	b218      	sxth	r0, r3
 8004ee0:	88bb      	ldrh	r3, [r7, #4]
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	b219      	sxth	r1, r3
 8004ee8:	887b      	ldrh	r3, [r7, #2]
 8004eea:	3b02      	subs	r3, #2
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	b21c      	sxth	r4, r3
 8004ef0:	88bb      	ldrh	r3, [r7, #4]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	b21d      	sxth	r5, r3
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	1c9a      	adds	r2, r3, #2
 8004efc:	61ba      	str	r2, [r7, #24]
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	462b      	mov	r3, r5
 8004f04:	4622      	mov	r2, r4
 8004f06:	f7fe fe45 	bl	8003b94 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8004f0a:	88fb      	ldrh	r3, [r7, #6]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	b218      	sxth	r0, r3
 8004f12:	88bb      	ldrh	r3, [r7, #4]
 8004f14:	3302      	adds	r3, #2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	b219      	sxth	r1, r3
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	b21c      	sxth	r4, r3
 8004f22:	883b      	ldrh	r3, [r7, #0]
 8004f24:	3b02      	subs	r3, #2
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	b21d      	sxth	r5, r3
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	1c9a      	adds	r2, r3, #2
 8004f2e:	61ba      	str	r2, [r7, #24]
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	462b      	mov	r3, r5
 8004f36:	4622      	mov	r2, r4
 8004f38:	f7fe fe2c 	bl	8003b94 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	b218      	sxth	r0, r3
 8004f44:	883b      	ldrh	r3, [r7, #0]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	b219      	sxth	r1, r3
 8004f4c:	887b      	ldrh	r3, [r7, #2]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	b21c      	sxth	r4, r3
 8004f54:	883b      	ldrh	r3, [r7, #0]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	b21d      	sxth	r5, r3
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	1c9a      	adds	r2, r3, #2
 8004f60:	61ba      	str	r2, [r7, #24]
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	462b      	mov	r3, r5
 8004f68:	4622      	mov	r2, r4
 8004f6a:	f7fe fe13 	bl	8003b94 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 8004f6e:	887b      	ldrh	r3, [r7, #2]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	b218      	sxth	r0, r3
 8004f76:	88bb      	ldrh	r3, [r7, #4]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	b219      	sxth	r1, r3
 8004f7e:	887b      	ldrh	r3, [r7, #2]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	b21c      	sxth	r4, r3
 8004f86:	883b      	ldrh	r3, [r7, #0]
 8004f88:	3b02      	subs	r3, #2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	b21d      	sxth	r5, r3
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	1c9a      	adds	r2, r3, #2
 8004f92:	61ba      	str	r2, [r7, #24]
 8004f94:	881b      	ldrh	r3, [r3, #0]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	462b      	mov	r3, r5
 8004f9a:	4622      	mov	r2, r4
 8004f9c:	f7fe fdfa 	bl	8003b94 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8004fa0:	88fb      	ldrh	r3, [r7, #6]
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	b218      	sxth	r0, r3
 8004fa8:	88bb      	ldrh	r3, [r7, #4]
 8004faa:	3302      	adds	r3, #2
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	b219      	sxth	r1, r3
 8004fb0:	887b      	ldrh	r3, [r7, #2]
 8004fb2:	3b03      	subs	r3, #3
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	b21c      	sxth	r4, r3
 8004fb8:	88bb      	ldrh	r3, [r7, #4]
 8004fba:	3302      	adds	r3, #2
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	b21d      	sxth	r5, r3
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	1c9a      	adds	r2, r3, #2
 8004fc4:	61ba      	str	r2, [r7, #24]
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	462b      	mov	r3, r5
 8004fcc:	4622      	mov	r2, r4
 8004fce:	f7fe fde1 	bl	8003b94 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	3302      	adds	r3, #2
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	b218      	sxth	r0, r3
 8004fda:	88bb      	ldrh	r3, [r7, #4]
 8004fdc:	3303      	adds	r3, #3
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	b219      	sxth	r1, r3
 8004fe2:	88fb      	ldrh	r3, [r7, #6]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	b21c      	sxth	r4, r3
 8004fea:	883b      	ldrh	r3, [r7, #0]
 8004fec:	3b03      	subs	r3, #3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	b21d      	sxth	r5, r3
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	1c9a      	adds	r2, r3, #2
 8004ff6:	61ba      	str	r2, [r7, #24]
 8004ff8:	881b      	ldrh	r3, [r3, #0]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	4622      	mov	r2, r4
 8005000:	f7fe fdc8 	bl	8003b94 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8005004:	88fb      	ldrh	r3, [r7, #6]
 8005006:	3302      	adds	r3, #2
 8005008:	b29b      	uxth	r3, r3
 800500a:	b218      	sxth	r0, r3
 800500c:	883b      	ldrh	r3, [r7, #0]
 800500e:	3b02      	subs	r3, #2
 8005010:	b29b      	uxth	r3, r3
 8005012:	b219      	sxth	r1, r3
 8005014:	887b      	ldrh	r3, [r7, #2]
 8005016:	3b02      	subs	r3, #2
 8005018:	b29b      	uxth	r3, r3
 800501a:	b21c      	sxth	r4, r3
 800501c:	883b      	ldrh	r3, [r7, #0]
 800501e:	3b02      	subs	r3, #2
 8005020:	b29b      	uxth	r3, r3
 8005022:	b21d      	sxth	r5, r3
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	1c9a      	adds	r2, r3, #2
 8005028:	61ba      	str	r2, [r7, #24]
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	462b      	mov	r3, r5
 8005030:	4622      	mov	r2, r4
 8005032:	f7fe fdaf 	bl	8003b94 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8005036:	887b      	ldrh	r3, [r7, #2]
 8005038:	3b02      	subs	r3, #2
 800503a:	b29b      	uxth	r3, r3
 800503c:	b218      	sxth	r0, r3
 800503e:	88bb      	ldrh	r3, [r7, #4]
 8005040:	3302      	adds	r3, #2
 8005042:	b29b      	uxth	r3, r3
 8005044:	b219      	sxth	r1, r3
 8005046:	887b      	ldrh	r3, [r7, #2]
 8005048:	3b02      	subs	r3, #2
 800504a:	b29b      	uxth	r3, r3
 800504c:	b21a      	sxth	r2, r3
 800504e:	883b      	ldrh	r3, [r7, #0]
 8005050:	3b03      	subs	r3, #3
 8005052:	b29b      	uxth	r3, r3
 8005054:	b21c      	sxth	r4, r3
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	4623      	mov	r3, r4
 800505e:	f7fe fd99 	bl	8003b94 <UG_DrawLine>
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800506c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	6039      	str	r1, [r7, #0]
 8005076:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d810      	bhi.n	80050a0 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 800507e:	4b0b      	ldr	r3, [pc, #44]	@ (80050ac <UG_DriverRegister+0x40>)
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	330a      	adds	r3, #10
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4413      	add	r3, r2
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800508e:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <UG_DriverRegister+0x40>)
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	330a      	adds	r3, #10
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	2203      	movs	r2, #3
 800509c:	721a      	strb	r2, [r3, #8]
 800509e:	e000      	b.n	80050a2 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80050a0:	bf00      	nop
}
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	200009dc 	.word	0x200009dc

080050b0 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 80050b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005230 <UG_Update+0x180>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UG_Update+0x2c>
 80050c6:	4b5a      	ldr	r3, [pc, #360]	@ (8005230 <UG_Update+0x180>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f893 2052 	ldrb.w	r2, [r3, #82]	@ 0x52
 80050ce:	4b58      	ldr	r3, [pc, #352]	@ (8005230 <UG_Update+0x180>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 80050dc:	4b54      	ldr	r3, [pc, #336]	@ (8005230 <UG_Update+0x180>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	4b53      	ldr	r3, [pc, #332]	@ (8005230 <UG_Update+0x180>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d071      	beq.n	80051d0 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 80050ec:	4b50      	ldr	r3, [pc, #320]	@ (8005230 <UG_Update+0x180>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d06c      	beq.n	80051d0 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80050f6:	4b4e      	ldr	r3, [pc, #312]	@ (8005230 <UG_Update+0x180>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b4d      	ldr	r3, [pc, #308]	@ (8005230 <UG_Update+0x180>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6912      	ldr	r2, [r2, #16]
 8005100:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8005102:	4b4b      	ldr	r3, [pc, #300]	@ (8005230 <UG_Update+0x180>)
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	4b4a      	ldr	r3, [pc, #296]	@ (8005230 <UG_Update+0x180>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68d2      	ldr	r2, [r2, #12]
 800510c:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 800510e:	4b48      	ldr	r3, [pc, #288]	@ (8005230 <UG_Update+0x180>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d045      	beq.n	80051a4 <UG_Update+0xf4>
 8005118:	4b45      	ldr	r3, [pc, #276]	@ (8005230 <UG_Update+0x180>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	7d9b      	ldrb	r3, [r3, #22]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d03d      	beq.n	80051a4 <UG_Update+0xf4>
 8005128:	4b41      	ldr	r3, [pc, #260]	@ (8005230 <UG_Update+0x180>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	7a1b      	ldrb	r3, [r3, #8]
 8005130:	f003 0308 	and.w	r3, r3, #8
 8005134:	2b00      	cmp	r3, #0
 8005136:	d035      	beq.n	80051a4 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8005138:	4b3d      	ldr	r3, [pc, #244]	@ (8005230 <UG_Update+0x180>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8005142:	4b3b      	ldr	r3, [pc, #236]	@ (8005230 <UG_Update+0x180>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800514c:	429a      	cmp	r2, r3
 800514e:	d123      	bne.n	8005198 <UG_Update+0xe8>
 8005150:	4b37      	ldr	r3, [pc, #220]	@ (8005230 <UG_Update+0x180>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800515a:	4b35      	ldr	r3, [pc, #212]	@ (8005230 <UG_Update+0x180>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005164:	429a      	cmp	r2, r3
 8005166:	d117      	bne.n	8005198 <UG_Update+0xe8>
 8005168:	4b31      	ldr	r3, [pc, #196]	@ (8005230 <UG_Update+0x180>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8005172:	4b2f      	ldr	r3, [pc, #188]	@ (8005230 <UG_Update+0x180>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800517c:	429a      	cmp	r2, r3
 800517e:	d10b      	bne.n	8005198 <UG_Update+0xe8>
 8005180:	4b2b      	ldr	r3, [pc, #172]	@ (8005230 <UG_Update+0x180>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800518a:	4b29      	ldr	r3, [pc, #164]	@ (8005230 <UG_Update+0x180>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005194:	429a      	cmp	r2, r3
 8005196:	d005      	beq.n	80051a4 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8005198:	4b25      	ldr	r3, [pc, #148]	@ (8005230 <UG_Update+0x180>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 f848 	bl	8005234 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80051a4:	4b22      	ldr	r3, [pc, #136]	@ (8005230 <UG_Update+0x180>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	7a1a      	ldrb	r2, [r3, #8]
 80051ac:	4b20      	ldr	r3, [pc, #128]	@ (8005230 <UG_Update+0x180>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80051ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005230 <UG_Update+0x180>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	7a1a      	ldrb	r2, [r3, #8]
 80051c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005230 <UG_Update+0x180>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 80051cc:	b2d2      	uxtb	r2, r2
 80051ce:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80051d0:	4b17      	ldr	r3, [pc, #92]	@ (8005230 <UG_Update+0x180>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d01b      	beq.n	8005212 <UG_Update+0x162>
   {
      wnd = gui->active_window;
 80051da:	4b15      	ldr	r3, [pc, #84]	@ (8005230 <UG_Update+0x180>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	7a1b      	ldrb	r3, [r3, #8]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f8c8 	bl	8005384 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	7a1b      	ldrb	r3, [r3, #8]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fb81 	bl	8004908 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7ff fc34 	bl	8004a74 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7ff fc7b 	bl	8004b08 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8005212:	4b07      	ldr	r3, [pc, #28]	@ (8005230 <UG_Update+0x180>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d004      	beq.n	8005228 <UG_Update+0x178>
     gui->device->flush();
 800521e:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <UG_Update+0x180>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	4798      	blx	r3
   }
}
 8005228:	bf00      	nop
 800522a:	3708      	adds	r7, #8
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	200009dc 	.word	0x200009dc

08005234 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b08f      	sub	sp, #60	@ 0x3c
 8005238:	af02      	add	r7, sp, #8
 800523a:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 8098 	beq.w	8005374 <_UG_WindowDrawTitle+0x140>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	7a1b      	ldrb	r3, [r3, #8]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8091 	beq.w	8005374 <_UG_WindowDrawTitle+0x140>
   {
      xs = wnd->xs;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	89db      	ldrh	r3, [r3, #14]
 8005256:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      ys = wnd->ys;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8a1b      	ldrh	r3, [r3, #16]
 800525c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
      xe = wnd->xe;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	8a5b      	ldrh	r3, [r3, #18]
 8005262:	857b      	strh	r3, [r7, #42]	@ 0x2a
      ye = wnd->ye;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8a9b      	ldrh	r3, [r3, #20]
 8005268:	853b      	strh	r3, [r7, #40]	@ 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	7d9b      	ldrb	r3, [r3, #22]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00f      	beq.n	8005296 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8005276:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005278:	3303      	adds	r3, #3
 800527a:	b29b      	uxth	r3, r3
 800527c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
         ys+=3;
 800527e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005280:	3303      	adds	r3, #3
 8005282:	b29b      	uxth	r3, r3
 8005284:	85bb      	strh	r3, [r7, #44]	@ 0x2c
         xe-=3;
 8005286:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005288:	3b03      	subs	r3, #3
 800528a:	b29b      	uxth	r3, r3
 800528c:	857b      	strh	r3, [r7, #42]	@ 0x2a
         ye-=3;
 800528e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005290:	3b03      	subs	r3, #3
 8005292:	b29b      	uxth	r3, r3
 8005294:	853b      	strh	r3, [r7, #40]	@ 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8005296:	4b3a      	ldr	r3, [pc, #232]	@ (8005380 <_UG_WindowDrawTitle+0x14c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d106      	bne.n	80052b0 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052a6:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80052ac:	83bb      	strh	r3, [r7, #28]
 80052ae:	e005      	b.n	80052bc <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b4:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ba:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80052c2:	461a      	mov	r2, r3
 80052c4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80052c6:	4413      	add	r3, r2
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	b21c      	sxth	r4, r3
 80052d0:	8bfb      	ldrh	r3, [r7, #30]
 80052d2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80052d6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80052da:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	4623      	mov	r3, r4
 80052e2:	f7fe fc01 	bl	8003ae8 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 80052f2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80052f4:	3303      	adds	r3, #3
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 80052fc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80052fe:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8005300:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8005302:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800530a:	461a      	mov	r2, r3
 800530c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800530e:	4413      	add	r3, r2
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29b      	uxth	r3, r3
 8005316:	b21b      	sxth	r3, r3
 8005318:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8005320:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800532a:	847b      	strh	r3, [r7, #34]	@ 0x22
      txt.v_space = wnd->title.v_space;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f993 3021 	ldrsb.w	r3, [r3, #33]	@ 0x21
 8005332:	84bb      	strh	r3, [r7, #36]	@ 0x24
      _UG_PutText( &txt );
 8005334:	f107 030c 	add.w	r3, r7, #12
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff fc31 	bl	8004ba0 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005344:	461a      	mov	r2, r3
 8005346:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005348:	4413      	add	r3, r2
 800534a:	b29b      	uxth	r3, r3
 800534c:	b219      	sxth	r1, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005354:	461a      	mov	r2, r3
 8005356:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8005358:	4413      	add	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	b21b      	sxth	r3, r3
 800535e:	f649 5413 	movw	r4, #40211	@ 0x9d13
 8005362:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8005366:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 800536a:	9400      	str	r4, [sp, #0]
 800536c:	f7fe fc12 	bl	8003b94 <UG_DrawLine>
      return UG_RESULT_OK;
 8005370:	2300      	movs	r3, #0
 8005372:	e001      	b.n	8005378 <_UG_WindowDrawTitle+0x144>
   }
   return UG_RESULT_FAIL;
 8005374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005378:	4618      	mov	r0, r3
 800537a:	3734      	adds	r7, #52	@ 0x34
 800537c:	46bd      	mov	sp, r7
 800537e:	bd90      	pop	{r4, r7, pc}
 8005380:	200009dc 	.word	0x200009dc

08005384 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b089      	sub	sp, #36	@ 0x24
 8005388:	af02      	add	r7, sp, #8
 800538a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	89db      	ldrh	r3, [r3, #14]
 8005390:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	8a1b      	ldrh	r3, [r3, #16]
 8005396:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	8a5b      	ldrh	r3, [r3, #18]
 800539c:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	8a9b      	ldrh	r3, [r3, #20]
 80053a2:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	7a1b      	ldrb	r3, [r3, #8]
 80053a8:	f023 0320 	bic.w	r3, r3, #32
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7a1b      	ldrb	r3, [r3, #8]
 80053b6:	f003 0308 	and.w	r3, r3, #8
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8084 	beq.w	80054c8 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	7d9b      	ldrb	r3, [r3, #22]
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d021      	beq.n	8005410 <_UG_WindowUpdate+0x8c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	7a1b      	ldrb	r3, [r3, #8]
 80053d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d11b      	bne.n	8005410 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80053d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053dc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80053e0:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80053e4:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80053e8:	4c43      	ldr	r4, [pc, #268]	@ (80054f8 <_UG_WindowUpdate+0x174>)
 80053ea:	9400      	str	r4, [sp, #0]
 80053ec:	f7ff fd1c 	bl	8004e28 <_UG_DrawObjectFrame>
         xs+=3;
 80053f0:	8abb      	ldrh	r3, [r7, #20]
 80053f2:	3303      	adds	r3, #3
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80053f8:	8a7b      	ldrh	r3, [r7, #18]
 80053fa:	3303      	adds	r3, #3
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8005400:	8a3b      	ldrh	r3, [r7, #16]
 8005402:	3b03      	subs	r3, #3
 8005404:	b29b      	uxth	r3, r3
 8005406:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8005408:	89fb      	ldrh	r3, [r7, #14]
 800540a:	3b03      	subs	r3, #3
 800540c:	b29b      	uxth	r3, r3
 800540e:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	7d9b      	ldrb	r3, [r3, #22]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01a      	beq.n	8005452 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff09 	bl	8005234 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005428:	461a      	mov	r2, r3
 800542a:	8a7b      	ldrh	r3, [r7, #18]
 800542c:	4413      	add	r3, r2
 800542e:	b29b      	uxth	r3, r3
 8005430:	3301      	adds	r3, #1
 8005432:	b29b      	uxth	r3, r3
 8005434:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	7a1b      	ldrb	r3, [r3, #8]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	7a1b      	ldrb	r3, [r3, #8]
 8005446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800544a:	b2da      	uxtb	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	721a      	strb	r2, [r3, #8]
            return;
 8005450:	e04e      	b.n	80054f0 <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	899b      	ldrh	r3, [r3, #12]
 8005456:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800545a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800545e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8005462:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	4623      	mov	r3, r4
 800546a:	f7fe fb3d 	bl	8003ae8 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8005474:	2300      	movs	r3, #0
 8005476:	82fb      	strh	r3, [r7, #22]
 8005478:	e021      	b.n	80054be <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	8afb      	ldrh	r3, [r7, #22]
 8005480:	015b      	lsls	r3, r3, #5
 8005482:	4413      	add	r3, r2
 8005484:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b00      	cmp	r3, #0
 8005490:	d112      	bne.n	80054b8 <_UG_WindowUpdate+0x134>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00c      	beq.n	80054b8 <_UG_WindowUpdate+0x134>
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d006      	beq.n	80054b8 <_UG_WindowUpdate+0x134>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80054b8:	8afb      	ldrh	r3, [r7, #22]
 80054ba:	3301      	adds	r3, #1
 80054bc:	82fb      	strh	r3, [r7, #22]
 80054be:	8afa      	ldrh	r2, [r7, #22]
 80054c0:	89bb      	ldrh	r3, [r7, #12]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d3d9      	bcc.n	800547a <_UG_WindowUpdate+0xf6>
 80054c6:	e013      	b.n	80054f0 <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80054e0:	4b06      	ldr	r3, [pc, #24]	@ (80054fc <_UG_WindowUpdate+0x178>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	4623      	mov	r3, r4
 80054ec:	f7fe fafc 	bl	8003ae8 <UG_FillFrame>
   }
}
 80054f0:	371c      	adds	r7, #28
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd90      	pop	{r4, r7, pc}
 80054f6:	bf00      	nop
 80054f8:	08015008 	.word	0x08015008
 80054fc:	200009dc 	.word	0x200009dc

08005500 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005538 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005504:	f7fe f9f8 	bl	80038f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005508:	480c      	ldr	r0, [pc, #48]	@ (800553c <LoopForever+0x6>)
  ldr r1, =_edata
 800550a:	490d      	ldr	r1, [pc, #52]	@ (8005540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800550c:	4a0d      	ldr	r2, [pc, #52]	@ (8005544 <LoopForever+0xe>)
  movs r3, #0
 800550e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005510:	e002      	b.n	8005518 <LoopCopyDataInit>

08005512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005516:	3304      	adds	r3, #4

08005518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800551a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800551c:	d3f9      	bcc.n	8005512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800551e:	4a0a      	ldr	r2, [pc, #40]	@ (8005548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005520:	4c0a      	ldr	r4, [pc, #40]	@ (800554c <LoopForever+0x16>)
  movs r3, #0
 8005522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005524:	e001      	b.n	800552a <LoopFillZerobss>

08005526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005528:	3204      	adds	r2, #4

0800552a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800552a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800552c:	d3fb      	bcc.n	8005526 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800552e:	f008 fb17 	bl	800db60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005532:	f7fc fad9 	bl	8001ae8 <main>

08005536 <LoopForever>:

LoopForever:
    b LoopForever
 8005536:	e7fe      	b.n	8005536 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005538:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800553c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005540:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8005544:	080153c8 	.word	0x080153c8
  ldr r2, =_sbss
 8005548:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800554c:	20000b48 	.word	0x20000b48

08005550 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005550:	e7fe      	b.n	8005550 <ADC1_IRQHandler>

08005552 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800555c:	2003      	movs	r0, #3
 800555e:	f001 fabb 	bl	8006ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005562:	2000      	movs	r0, #0
 8005564:	f000 f80e 	bl	8005584 <HAL_InitTick>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	71fb      	strb	r3, [r7, #7]
 8005572:	e001      	b.n	8005578 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005574:	f7fd fb44 	bl	8002c00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005578:	79fb      	ldrb	r3, [r7, #7]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005590:	4b17      	ldr	r3, [pc, #92]	@ (80055f0 <HAL_InitTick+0x6c>)
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d023      	beq.n	80055e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005598:	4b16      	ldr	r3, [pc, #88]	@ (80055f4 <HAL_InitTick+0x70>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	4b14      	ldr	r3, [pc, #80]	@ (80055f0 <HAL_InitTick+0x6c>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	4619      	mov	r1, r3
 80055a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80055a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	4618      	mov	r0, r3
 80055b0:	f001 fab9 	bl	8006b26 <HAL_SYSTICK_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10f      	bne.n	80055da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2b0f      	cmp	r3, #15
 80055be:	d809      	bhi.n	80055d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055c0:	2200      	movs	r2, #0
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	f04f 30ff 	mov.w	r0, #4294967295
 80055c8:	f001 fa91 	bl	8006aee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055cc:	4a0a      	ldr	r2, [pc, #40]	@ (80055f8 <HAL_InitTick+0x74>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6013      	str	r3, [r2, #0]
 80055d2:	e007      	b.n	80055e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	73fb      	strb	r3, [r7, #15]
 80055d8:	e004      	b.n	80055e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
 80055de:	e001      	b.n	80055e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20000028 	.word	0x20000028
 80055f4:	20000020 	.word	0x20000020
 80055f8:	20000024 	.word	0x20000024

080055fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005600:	4b06      	ldr	r3, [pc, #24]	@ (800561c <HAL_IncTick+0x20>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	4b06      	ldr	r3, [pc, #24]	@ (8005620 <HAL_IncTick+0x24>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4413      	add	r3, r2
 800560c:	4a04      	ldr	r2, [pc, #16]	@ (8005620 <HAL_IncTick+0x24>)
 800560e:	6013      	str	r3, [r2, #0]
}
 8005610:	bf00      	nop
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000028 	.word	0x20000028
 8005620:	200009f8 	.word	0x200009f8

08005624 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  return uwTick;
 8005628:	4b03      	ldr	r3, [pc, #12]	@ (8005638 <HAL_GetTick+0x14>)
 800562a:	681b      	ldr	r3, [r3, #0]
}
 800562c:	4618      	mov	r0, r3
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	200009f8 	.word	0x200009f8

0800563c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005644:	f7ff ffee 	bl	8005624 <HAL_GetTick>
 8005648:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d005      	beq.n	8005662 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005656:	4b0a      	ldr	r3, [pc, #40]	@ (8005680 <HAL_Delay+0x44>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	461a      	mov	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005662:	bf00      	nop
 8005664:	f7ff ffde 	bl	8005624 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	429a      	cmp	r2, r3
 8005672:	d8f7      	bhi.n	8005664 <HAL_Delay+0x28>
  {
  }
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000028 	.word	0x20000028

08005684 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	609a      	str	r2, [r3, #8]
}
 800569e:	bf00      	nop
 80056a0:	370c      	adds	r7, #12
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	609a      	str	r2, [r3, #8]
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b087      	sub	sp, #28
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
 80056f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3360      	adds	r3, #96	@ 0x60
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b08      	ldr	r3, [pc, #32]	@ (8005730 <LL_ADC_SetOffset+0x44>)
 800570e:	4013      	ands	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	4313      	orrs	r3, r2
 800571c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	03fff000 	.word	0x03fff000

08005734 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3360      	adds	r3, #96	@ 0x60
 8005742:	461a      	mov	r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3360      	adds	r3, #96	@ 0x60
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	431a      	orrs	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	615a      	str	r2, [r3, #20]
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3330      	adds	r3, #48	@ 0x30
 80057cc:	461a      	mov	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	f003 030c 	and.w	r3, r3, #12
 80057d8:	4413      	add	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	211f      	movs	r1, #31
 80057e8:	fa01 f303 	lsl.w	r3, r1, r3
 80057ec:	43db      	mvns	r3, r3
 80057ee:	401a      	ands	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	0e9b      	lsrs	r3, r3, #26
 80057f4:	f003 011f 	and.w	r1, r3, #31
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005802:	431a      	orrs	r2, r3
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005808:	bf00      	nop
 800580a:	371c      	adds	r7, #28
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	3314      	adds	r3, #20
 8005824:	461a      	mov	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	0e5b      	lsrs	r3, r3, #25
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	4413      	add	r3, r2
 8005832:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	0d1b      	lsrs	r3, r3, #20
 800583c:	f003 031f 	and.w	r3, r3, #31
 8005840:	2107      	movs	r1, #7
 8005842:	fa01 f303 	lsl.w	r3, r1, r3
 8005846:	43db      	mvns	r3, r3
 8005848:	401a      	ands	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	0d1b      	lsrs	r3, r3, #20
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	fa01 f303 	lsl.w	r3, r1, r3
 8005858:	431a      	orrs	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005884:	43db      	mvns	r3, r3
 8005886:	401a      	ands	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f003 0318 	and.w	r3, r3, #24
 800588e:	4908      	ldr	r1, [pc, #32]	@ (80058b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005890:	40d9      	lsrs	r1, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	400b      	ands	r3, r1
 8005896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800589a:	431a      	orrs	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	0007ffff 	.word	0x0007ffff

080058b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80058c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6093      	str	r3, [r2, #8]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058ec:	d101      	bne.n	80058f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005910:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005914:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005938:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800593c:	d101      	bne.n	8005942 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800593e:	2301      	movs	r3, #1
 8005940:	e000      	b.n	8005944 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <LL_ADC_IsEnabled+0x18>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <LL_ADC_IsEnabled+0x1a>
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b04      	cmp	r3, #4
 8005988:	d101      	bne.n	800598e <LL_ADC_REG_IsConversionOngoing+0x18>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d101      	bne.n	80059b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80059b0:	2301      	movs	r3, #1
 80059b2:	e000      	b.n	80059b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b088      	sub	sp, #32
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e129      	b.n	8005c32 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d109      	bne.n	8005a00 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f7fd f92b 	bl	8002c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff ff67 	bl	80058d8 <LL_ADC_IsDeepPowerDownEnabled>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d004      	beq.n	8005a1a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ff4d 	bl	80058b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff ff82 	bl	8005928 <LL_ADC_IsInternalRegulatorEnabled>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d115      	bne.n	8005a56 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7ff ff66 	bl	8005900 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a34:	4b81      	ldr	r3, [pc, #516]	@ (8005c3c <HAL_ADC_Init+0x278>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	099b      	lsrs	r3, r3, #6
 8005a3a:	4a81      	ldr	r2, [pc, #516]	@ (8005c40 <HAL_ADC_Init+0x27c>)
 8005a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a40:	099b      	lsrs	r3, r3, #6
 8005a42:	3301      	adds	r3, #1
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a48:	e002      	b.n	8005a50 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f9      	bne.n	8005a4a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff ff64 	bl	8005928 <LL_ADC_IsInternalRegulatorEnabled>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a6a:	f043 0210 	orr.w	r2, r3, #16
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a76:	f043 0201 	orr.w	r2, r3, #1
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff ff75 	bl	8005976 <LL_ADC_REG_IsConversionOngoing>
 8005a8c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f040 80c2 	bne.w	8005c20 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f040 80be 	bne.w	8005c20 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005aa8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005aac:	f043 0202 	orr.w	r2, r3, #2
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff ff49 	bl	8005950 <LL_ADC_IsEnabled>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10b      	bne.n	8005adc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ac4:	485f      	ldr	r0, [pc, #380]	@ (8005c44 <HAL_ADC_Init+0x280>)
 8005ac6:	f7ff ff43 	bl	8005950 <LL_ADC_IsEnabled>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d105      	bne.n	8005adc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	485c      	ldr	r0, [pc, #368]	@ (8005c48 <HAL_ADC_Init+0x284>)
 8005ad8:	f7ff fdd4 	bl	8005684 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	7e5b      	ldrb	r3, [r3, #25]
 8005ae0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ae6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005aec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005af2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005afa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d106      	bne.n	8005b18 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	045b      	lsls	r3, r3, #17
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b24:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	4b44      	ldr	r3, [pc, #272]	@ (8005c4c <HAL_ADC_Init+0x288>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6812      	ldr	r2, [r2, #0]
 8005b42:	69b9      	ldr	r1, [r7, #24]
 8005b44:	430b      	orrs	r3, r1
 8005b46:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff ff25 	bl	800599c <LL_ADC_INJ_IsConversionOngoing>
 8005b52:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d140      	bne.n	8005bdc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d13d      	bne.n	8005bdc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	7e1b      	ldrb	r3, [r3, #24]
 8005b68:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005b6a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005b72:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005b74:	4313      	orrs	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b82:	f023 0306 	bic.w	r3, r3, #6
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	69b9      	ldr	r1, [r7, #24]
 8005b8c:	430b      	orrs	r3, r1
 8005b8e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d118      	bne.n	8005bcc <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005ba4:	f023 0304 	bic.w	r3, r3, #4
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005bb0:	4311      	orrs	r1, r2
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005bb6:	4311      	orrs	r1, r2
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	611a      	str	r2, [r3, #16]
 8005bca:	e007      	b.n	8005bdc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0201 	bic.w	r2, r2, #1
 8005bda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d10c      	bne.n	8005bfe <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bea:	f023 010f 	bic.w	r1, r3, #15
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	1e5a      	subs	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bfc:	e007      	b.n	8005c0e <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 020f 	bic.w	r2, r2, #15
 8005c0c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	f043 0201 	orr.w	r2, r3, #1
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c1e:	e007      	b.n	8005c30 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c24:	f043 0210 	orr.w	r2, r3, #16
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3720      	adds	r7, #32
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000020 	.word	0x20000020
 8005c40:	053e2d63 	.word	0x053e2d63
 8005c44:	50040000 	.word	0x50040000
 8005c48:	50040300 	.word	0x50040300
 8005c4c:	fff0c007 	.word	0xfff0c007

08005c50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b0b6      	sub	sp, #216	@ 0xd8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d101      	bne.n	8005c72 <HAL_ADC_ConfigChannel+0x22>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e3d5      	b.n	800641e <HAL_ADC_ConfigChannel+0x7ce>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f7ff fe79 	bl	8005976 <LL_ADC_REG_IsConversionOngoing>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f040 83ba 	bne.w	8006400 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2b05      	cmp	r3, #5
 8005c9a:	d824      	bhi.n	8005ce6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	3b02      	subs	r3, #2
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d81b      	bhi.n	8005cde <HAL_ADC_ConfigChannel+0x8e>
 8005ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <HAL_ADC_ConfigChannel+0x5c>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005cc5 	.word	0x08005cc5
 8005cb4:	08005ccd 	.word	0x08005ccd
 8005cb8:	08005cd5 	.word	0x08005cd5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8005cbc:	230c      	movs	r3, #12
 8005cbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005cc2:	e010      	b.n	8005ce6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8005cc4:	2312      	movs	r3, #18
 8005cc6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005cca:	e00c      	b.n	8005ce6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8005ccc:	2318      	movs	r3, #24
 8005cce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005cd2:	e008      	b.n	8005ce6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8005cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005cdc:	e003      	b.n	8005ce6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8005cde:	2306      	movs	r3, #6
 8005ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8005ce4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8005cf4:	f7ff fd62 	bl	80057bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fe3a 	bl	8005976 <LL_ADC_REG_IsConversionOngoing>
 8005d02:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fe46 	bl	800599c <LL_ADC_INJ_IsConversionOngoing>
 8005d10:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f040 81bf 	bne.w	800609c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f040 81ba 	bne.w	800609c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d30:	d10f      	bne.n	8005d52 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f7ff fd69 	bl	8005814 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fd23 	bl	8005796 <LL_ADC_SetSamplingTimeCommonConfig>
 8005d50:	e00e      	b.n	8005d70 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6818      	ldr	r0, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	6819      	ldr	r1, [r3, #0]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f7ff fd58 	bl	8005814 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff fd13 	bl	8005796 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695a      	ldr	r2, [r3, #20]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	08db      	lsrs	r3, r3, #3
 8005d7c:	f003 0303 	and.w	r3, r3, #3
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	d00a      	beq.n	8005da8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6919      	ldr	r1, [r3, #16]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005da2:	f7ff fca3 	bl	80056ec <LL_ADC_SetOffset>
 8005da6:	e179      	b.n	800609c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2100      	movs	r1, #0
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fcc0 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005db4:	4603      	mov	r3, r0
 8005db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <HAL_ADC_ConfigChannel+0x184>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff fcb5 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	0e9b      	lsrs	r3, r3, #26
 8005dce:	f003 021f 	and.w	r2, r3, #31
 8005dd2:	e01e      	b.n	8005e12 <HAL_ADC_ConfigChannel+0x1c2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7ff fcaa 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005dea:	fa93 f3a3 	rbit	r3, r3
 8005dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005df2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005df6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005dfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8005e02:	2320      	movs	r3, #32
 8005e04:	e004      	b.n	8005e10 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8005e06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005e0a:	fab3 f383 	clz	r3, r3
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d105      	bne.n	8005e2a <HAL_ADC_ConfigChannel+0x1da>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	0e9b      	lsrs	r3, r3, #26
 8005e24:	f003 031f 	and.w	r3, r3, #31
 8005e28:	e018      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x20c>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e36:	fa93 f3a3 	rbit	r3, r3
 8005e3a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005e3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005e46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8005e4e:	2320      	movs	r3, #32
 8005e50:	e004      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8005e52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005e56:	fab3 f383 	clz	r3, r3
 8005e5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d106      	bne.n	8005e6e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2200      	movs	r2, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fc79 	bl	8005760 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2101      	movs	r1, #1
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fc5d 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10a      	bne.n	8005e9a <HAL_ADC_ConfigChannel+0x24a>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2101      	movs	r1, #1
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff fc52 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005e90:	4603      	mov	r3, r0
 8005e92:	0e9b      	lsrs	r3, r3, #26
 8005e94:	f003 021f 	and.w	r2, r3, #31
 8005e98:	e01e      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x288>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fc47 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005eb0:	fa93 f3a3 	rbit	r3, r3
 8005eb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005ec0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8005ec8:	2320      	movs	r3, #32
 8005eca:	e004      	b.n	8005ed6 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8005ecc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ed0:	fab3 f383 	clz	r3, r3
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x2a0>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	0e9b      	lsrs	r3, r3, #26
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	e018      	b.n	8005f22 <HAL_ADC_ConfigChannel+0x2d2>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005efc:	fa93 f3a3 	rbit	r3, r3
 8005f00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8005f14:	2320      	movs	r3, #32
 8005f16:	e004      	b.n	8005f22 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8005f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f1c:	fab3 f383 	clz	r3, r3
 8005f20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d106      	bne.n	8005f34 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7ff fc16 	bl	8005760 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2102      	movs	r1, #2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff fbfa 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x310>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2102      	movs	r1, #2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fbef 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	0e9b      	lsrs	r3, r3, #26
 8005f5a:	f003 021f 	and.w	r2, r3, #31
 8005f5e:	e01e      	b.n	8005f9e <HAL_ADC_ConfigChannel+0x34e>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2102      	movs	r1, #2
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff fbe4 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f76:	fa93 f3a3 	rbit	r3, r3
 8005f7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8005f8e:	2320      	movs	r3, #32
 8005f90:	e004      	b.n	8005f9c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8005f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f96:	fab3 f383 	clz	r3, r3
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d105      	bne.n	8005fb6 <HAL_ADC_ConfigChannel+0x366>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	0e9b      	lsrs	r3, r3, #26
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	e014      	b.n	8005fe0 <HAL_ADC_ConfigChannel+0x390>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fbe:	fa93 f3a3 	rbit	r3, r3
 8005fc2:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005fc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fc6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005fca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8005fd2:	2320      	movs	r3, #32
 8005fd4:	e004      	b.n	8005fe0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8005fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fda:	fab3 f383 	clz	r3, r3
 8005fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d106      	bne.n	8005ff2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2102      	movs	r1, #2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fbb7 	bl	8005760 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2103      	movs	r1, #3
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff fb9b 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8005ffe:	4603      	mov	r3, r0
 8006000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006004:	2b00      	cmp	r3, #0
 8006006:	d10a      	bne.n	800601e <HAL_ADC_ConfigChannel+0x3ce>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2103      	movs	r1, #3
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fb90 	bl	8005734 <LL_ADC_GetOffsetChannel>
 8006014:	4603      	mov	r3, r0
 8006016:	0e9b      	lsrs	r3, r3, #26
 8006018:	f003 021f 	and.w	r2, r3, #31
 800601c:	e017      	b.n	800604e <HAL_ADC_ConfigChannel+0x3fe>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2103      	movs	r1, #3
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fb85 	bl	8005734 <LL_ADC_GetOffsetChannel>
 800602a:	4603      	mov	r3, r0
 800602c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006030:	fa93 f3a3 	rbit	r3, r3
 8006034:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006038:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800603a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8006040:	2320      	movs	r3, #32
 8006042:	e003      	b.n	800604c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8006044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006046:	fab3 f383 	clz	r3, r3
 800604a:	b2db      	uxtb	r3, r3
 800604c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <HAL_ADC_ConfigChannel+0x416>
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	0e9b      	lsrs	r3, r3, #26
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	e011      	b.n	800608a <HAL_ADC_ConfigChannel+0x43a>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800606c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800606e:	fa93 f3a3 	rbit	r3, r3
 8006072:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8006074:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006076:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800607e:	2320      	movs	r3, #32
 8006080:	e003      	b.n	800608a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8006082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006084:	fab3 f383 	clz	r3, r3
 8006088:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800608a:	429a      	cmp	r2, r3
 800608c:	d106      	bne.n	800609c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2200      	movs	r2, #0
 8006094:	2103      	movs	r1, #3
 8006096:	4618      	mov	r0, r3
 8006098:	f7ff fb62 	bl	8005760 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7ff fc55 	bl	8005950 <LL_ADC_IsEnabled>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f040 813f 	bne.w	800632c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6819      	ldr	r1, [r3, #0]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	461a      	mov	r2, r3
 80060bc:	f7ff fbd6 	bl	800586c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	4a8e      	ldr	r2, [pc, #568]	@ (8006300 <HAL_ADC_ConfigChannel+0x6b0>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	f040 8130 	bne.w	800632c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10b      	bne.n	80060f4 <HAL_ADC_ConfigChannel+0x4a4>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	0e9b      	lsrs	r3, r3, #26
 80060e2:	3301      	adds	r3, #1
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	2b09      	cmp	r3, #9
 80060ea:	bf94      	ite	ls
 80060ec:	2301      	movls	r3, #1
 80060ee:	2300      	movhi	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	e019      	b.n	8006128 <HAL_ADC_ConfigChannel+0x4d8>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060fc:	fa93 f3a3 	rbit	r3, r3
 8006100:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8006102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006104:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8006106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800610c:	2320      	movs	r3, #32
 800610e:	e003      	b.n	8006118 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8006110:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006112:	fab3 f383 	clz	r3, r3
 8006116:	b2db      	uxtb	r3, r3
 8006118:	3301      	adds	r3, #1
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	2b09      	cmp	r3, #9
 8006120:	bf94      	ite	ls
 8006122:	2301      	movls	r3, #1
 8006124:	2300      	movhi	r3, #0
 8006126:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006128:	2b00      	cmp	r3, #0
 800612a:	d079      	beq.n	8006220 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006134:	2b00      	cmp	r3, #0
 8006136:	d107      	bne.n	8006148 <HAL_ADC_ConfigChannel+0x4f8>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	0e9b      	lsrs	r3, r3, #26
 800613e:	3301      	adds	r3, #1
 8006140:	069b      	lsls	r3, r3, #26
 8006142:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006146:	e015      	b.n	8006174 <HAL_ADC_ConfigChannel+0x524>
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006150:	fa93 f3a3 	rbit	r3, r3
 8006154:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8006156:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006158:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800615a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8006160:	2320      	movs	r3, #32
 8006162:	e003      	b.n	800616c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8006164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006166:	fab3 f383 	clz	r3, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	3301      	adds	r3, #1
 800616e:	069b      	lsls	r3, r3, #26
 8006170:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800617c:	2b00      	cmp	r3, #0
 800617e:	d109      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x544>
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	0e9b      	lsrs	r3, r3, #26
 8006186:	3301      	adds	r3, #1
 8006188:	f003 031f 	and.w	r3, r3, #31
 800618c:	2101      	movs	r1, #1
 800618e:	fa01 f303 	lsl.w	r3, r1, r3
 8006192:	e017      	b.n	80061c4 <HAL_ADC_ConfigChannel+0x574>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800619c:	fa93 f3a3 	rbit	r3, r3
 80061a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80061a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80061a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80061ac:	2320      	movs	r3, #32
 80061ae:	e003      	b.n	80061b8 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80061b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061b2:	fab3 f383 	clz	r3, r3
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	3301      	adds	r3, #1
 80061ba:	f003 031f 	and.w	r3, r3, #31
 80061be:	2101      	movs	r1, #1
 80061c0:	fa01 f303 	lsl.w	r3, r1, r3
 80061c4:	ea42 0103 	orr.w	r1, r2, r3
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <HAL_ADC_ConfigChannel+0x59a>
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	0e9b      	lsrs	r3, r3, #26
 80061da:	3301      	adds	r3, #1
 80061dc:	f003 021f 	and.w	r2, r3, #31
 80061e0:	4613      	mov	r3, r2
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	4413      	add	r3, r2
 80061e6:	051b      	lsls	r3, r3, #20
 80061e8:	e018      	b.n	800621c <HAL_ADC_ConfigChannel+0x5cc>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f2:	fa93 f3a3 	rbit	r3, r3
 80061f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80061f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d101      	bne.n	8006206 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8006202:	2320      	movs	r3, #32
 8006204:	e003      	b.n	800620e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8006206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006208:	fab3 f383 	clz	r3, r3
 800620c:	b2db      	uxtb	r3, r3
 800620e:	3301      	adds	r3, #1
 8006210:	f003 021f 	and.w	r2, r3, #31
 8006214:	4613      	mov	r3, r2
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	4413      	add	r3, r2
 800621a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800621c:	430b      	orrs	r3, r1
 800621e:	e080      	b.n	8006322 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006228:	2b00      	cmp	r3, #0
 800622a:	d107      	bne.n	800623c <HAL_ADC_ConfigChannel+0x5ec>
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	0e9b      	lsrs	r3, r3, #26
 8006232:	3301      	adds	r3, #1
 8006234:	069b      	lsls	r3, r3, #26
 8006236:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800623a:	e015      	b.n	8006268 <HAL_ADC_ConfigChannel+0x618>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	fa93 f3a3 	rbit	r3, r3
 8006248:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8006254:	2320      	movs	r3, #32
 8006256:	e003      	b.n	8006260 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8006258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625a:	fab3 f383 	clz	r3, r3
 800625e:	b2db      	uxtb	r3, r3
 8006260:	3301      	adds	r3, #1
 8006262:	069b      	lsls	r3, r3, #26
 8006264:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006270:	2b00      	cmp	r3, #0
 8006272:	d109      	bne.n	8006288 <HAL_ADC_ConfigChannel+0x638>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	0e9b      	lsrs	r3, r3, #26
 800627a:	3301      	adds	r3, #1
 800627c:	f003 031f 	and.w	r3, r3, #31
 8006280:	2101      	movs	r1, #1
 8006282:	fa01 f303 	lsl.w	r3, r1, r3
 8006286:	e017      	b.n	80062b8 <HAL_ADC_ConfigChannel+0x668>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	fa93 f3a3 	rbit	r3, r3
 8006294:	61bb      	str	r3, [r7, #24]
  return result;
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80062a0:	2320      	movs	r3, #32
 80062a2:	e003      	b.n	80062ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	fab3 f383 	clz	r3, r3
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	3301      	adds	r3, #1
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	2101      	movs	r1, #1
 80062b4:	fa01 f303 	lsl.w	r3, r1, r3
 80062b8:	ea42 0103 	orr.w	r1, r2, r3
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10d      	bne.n	80062e4 <HAL_ADC_ConfigChannel+0x694>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	0e9b      	lsrs	r3, r3, #26
 80062ce:	3301      	adds	r3, #1
 80062d0:	f003 021f 	and.w	r2, r3, #31
 80062d4:	4613      	mov	r3, r2
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	4413      	add	r3, r2
 80062da:	3b1e      	subs	r3, #30
 80062dc:	051b      	lsls	r3, r3, #20
 80062de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80062e2:	e01d      	b.n	8006320 <HAL_ADC_ConfigChannel+0x6d0>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	fa93 f3a3 	rbit	r3, r3
 80062f0:	60fb      	str	r3, [r7, #12]
  return result;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d103      	bne.n	8006304 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80062fc:	2320      	movs	r3, #32
 80062fe:	e005      	b.n	800630c <HAL_ADC_ConfigChannel+0x6bc>
 8006300:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	fab3 f383 	clz	r3, r3
 800630a:	b2db      	uxtb	r3, r3
 800630c:	3301      	adds	r3, #1
 800630e:	f003 021f 	and.w	r2, r3, #31
 8006312:	4613      	mov	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	4413      	add	r3, r2
 8006318:	3b1e      	subs	r3, #30
 800631a:	051b      	lsls	r3, r3, #20
 800631c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006320:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006326:	4619      	mov	r1, r3
 8006328:	f7ff fa74 	bl	8005814 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4b3d      	ldr	r3, [pc, #244]	@ (8006428 <HAL_ADC_ConfigChannel+0x7d8>)
 8006332:	4013      	ands	r3, r2
 8006334:	2b00      	cmp	r3, #0
 8006336:	d06c      	beq.n	8006412 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006338:	483c      	ldr	r0, [pc, #240]	@ (800642c <HAL_ADC_ConfigChannel+0x7dc>)
 800633a:	f7ff f9c9 	bl	80056d0 <LL_ADC_GetCommonPathInternalCh>
 800633e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a3a      	ldr	r2, [pc, #232]	@ (8006430 <HAL_ADC_ConfigChannel+0x7e0>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d127      	bne.n	800639c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800634c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d121      	bne.n	800639c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a35      	ldr	r2, [pc, #212]	@ (8006434 <HAL_ADC_ConfigChannel+0x7e4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d157      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006362:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006366:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800636a:	4619      	mov	r1, r3
 800636c:	482f      	ldr	r0, [pc, #188]	@ (800642c <HAL_ADC_ConfigChannel+0x7dc>)
 800636e:	f7ff f99c 	bl	80056aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006372:	4b31      	ldr	r3, [pc, #196]	@ (8006438 <HAL_ADC_ConfigChannel+0x7e8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	4a30      	ldr	r2, [pc, #192]	@ (800643c <HAL_ADC_ConfigChannel+0x7ec>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	099b      	lsrs	r3, r3, #6
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	4613      	mov	r3, r2
 8006384:	005b      	lsls	r3, r3, #1
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800638c:	e002      	b.n	8006394 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	3b01      	subs	r3, #1
 8006392:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1f9      	bne.n	800638e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800639a:	e03a      	b.n	8006412 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a27      	ldr	r2, [pc, #156]	@ (8006440 <HAL_ADC_ConfigChannel+0x7f0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d113      	bne.n	80063ce <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80063a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10d      	bne.n	80063ce <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006434 <HAL_ADC_ConfigChannel+0x7e4>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d12a      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063c4:	4619      	mov	r1, r3
 80063c6:	4819      	ldr	r0, [pc, #100]	@ (800642c <HAL_ADC_ConfigChannel+0x7dc>)
 80063c8:	f7ff f96f 	bl	80056aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063cc:	e021      	b.n	8006412 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1c      	ldr	r2, [pc, #112]	@ (8006444 <HAL_ADC_ConfigChannel+0x7f4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d11c      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80063d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d116      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a12      	ldr	r2, [pc, #72]	@ (8006434 <HAL_ADC_ConfigChannel+0x7e4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d111      	bne.n	8006412 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80063f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80063f6:	4619      	mov	r1, r3
 80063f8:	480c      	ldr	r0, [pc, #48]	@ (800642c <HAL_ADC_ConfigChannel+0x7dc>)
 80063fa:	f7ff f956 	bl	80056aa <LL_ADC_SetCommonPathInternalCh>
 80063fe:	e008      	b.n	8006412 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006404:	f043 0220 	orr.w	r2, r3, #32
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 800641a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800641e:	4618      	mov	r0, r3
 8006420:	37d8      	adds	r7, #216	@ 0xd8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	80080000 	.word	0x80080000
 800642c:	50040300 	.word	0x50040300
 8006430:	c7520000 	.word	0xc7520000
 8006434:	50040000 	.word	0x50040000
 8006438:	20000020 	.word	0x20000020
 800643c:	053e2d63 	.word	0x053e2d63
 8006440:	cb840000 	.word	0xcb840000
 8006444:	80000001 	.word	0x80000001

08006448 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e0ed      	b.n	8006636 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d102      	bne.n	800646c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f7fc fc60 	bl	8002d2c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800647c:	f7ff f8d2 	bl	8005624 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006482:	e012      	b.n	80064aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006484:	f7ff f8ce 	bl	8005624 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b0a      	cmp	r3, #10
 8006490:	d90b      	bls.n	80064aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006496:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2205      	movs	r2, #5
 80064a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e0c5      	b.n	8006636 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d0e5      	beq.n	8006484 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0202 	bic.w	r2, r2, #2
 80064c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064c8:	f7ff f8ac 	bl	8005624 <HAL_GetTick>
 80064cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80064ce:	e012      	b.n	80064f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80064d0:	f7ff f8a8 	bl	8005624 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b0a      	cmp	r3, #10
 80064dc:	d90b      	bls.n	80064f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2205      	movs	r2, #5
 80064ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e09f      	b.n	8006636 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e5      	bne.n	80064d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7e1b      	ldrb	r3, [r3, #24]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d108      	bne.n	800651e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	e007      	b.n	800652e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800652c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	7e5b      	ldrb	r3, [r3, #25]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d108      	bne.n	8006548 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e007      	b.n	8006558 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006556:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	7e9b      	ldrb	r3, [r3, #26]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d108      	bne.n	8006572 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0220 	orr.w	r2, r2, #32
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	e007      	b.n	8006582 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f022 0220 	bic.w	r2, r2, #32
 8006580:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7edb      	ldrb	r3, [r3, #27]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d108      	bne.n	800659c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f022 0210 	bic.w	r2, r2, #16
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e007      	b.n	80065ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0210 	orr.w	r2, r2, #16
 80065aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	7f1b      	ldrb	r3, [r3, #28]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d108      	bne.n	80065c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0208 	orr.w	r2, r2, #8
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	e007      	b.n	80065d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0208 	bic.w	r2, r2, #8
 80065d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	7f5b      	ldrb	r3, [r3, #29]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d108      	bne.n	80065f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 0204 	orr.w	r2, r2, #4
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e007      	b.n	8006600 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0204 	bic.w	r2, r2, #4
 80065fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	431a      	orrs	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	ea42 0103 	orr.w	r1, r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	1e5a      	subs	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006648:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <LL_EXTI_EnableIT_0_31+0x20>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	4904      	ldr	r1, [pc, #16]	@ (8006660 <LL_EXTI_EnableIT_0_31+0x20>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4313      	orrs	r3, r2
 8006652:	600b      	str	r3, [r1, #0]
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	40010400 	.word	0x40010400

08006664 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800666c:	4b06      	ldr	r3, [pc, #24]	@ (8006688 <LL_EXTI_DisableIT_0_31+0x24>)
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	43db      	mvns	r3, r3
 8006674:	4904      	ldr	r1, [pc, #16]	@ (8006688 <LL_EXTI_DisableIT_0_31+0x24>)
 8006676:	4013      	ands	r3, r2
 8006678:	600b      	str	r3, [r1, #0]
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop
 8006688:	40010400 	.word	0x40010400

0800668c <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006694:	4b05      	ldr	r3, [pc, #20]	@ (80066ac <LL_EXTI_EnableEvent_0_31+0x20>)
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	4904      	ldr	r1, [pc, #16]	@ (80066ac <LL_EXTI_EnableEvent_0_31+0x20>)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4313      	orrs	r3, r2
 800669e:	604b      	str	r3, [r1, #4]

}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	40010400 	.word	0x40010400

080066b0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80066b8:	4b06      	ldr	r3, [pc, #24]	@ (80066d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	43db      	mvns	r3, r3
 80066c0:	4904      	ldr	r1, [pc, #16]	@ (80066d4 <LL_EXTI_DisableEvent_0_31+0x24>)
 80066c2:	4013      	ands	r3, r2
 80066c4:	604b      	str	r3, [r1, #4]
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40010400 	.word	0x40010400

080066d8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80066e0:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	4904      	ldr	r1, [pc, #16]	@ (80066f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	608b      	str	r3, [r1, #8]

}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	40010400 	.word	0x40010400

080066fc <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006704:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	43db      	mvns	r3, r3
 800670c:	4904      	ldr	r1, [pc, #16]	@ (8006720 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800670e:	4013      	ands	r3, r2
 8006710:	608b      	str	r3, [r1, #8]

}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	40010400 	.word	0x40010400

08006724 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800672c:	4b05      	ldr	r3, [pc, #20]	@ (8006744 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	4904      	ldr	r1, [pc, #16]	@ (8006744 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4313      	orrs	r3, r2
 8006736:	60cb      	str	r3, [r1, #12]
}
 8006738:	bf00      	nop
 800673a:	370c      	adds	r7, #12
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40010400 	.word	0x40010400

08006748 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006750:	4b06      	ldr	r3, [pc, #24]	@ (800676c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	43db      	mvns	r3, r3
 8006758:	4904      	ldr	r1, [pc, #16]	@ (800676c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800675a:	4013      	ands	r3, r2
 800675c:	60cb      	str	r3, [r1, #12]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	40010400 	.word	0x40010400

08006770 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006778:	4a04      	ldr	r2, [pc, #16]	@ (800678c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6153      	str	r3, [r2, #20]
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	40010400 	.word	0x40010400

08006790 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006798:	2300      	movs	r3, #0
 800679a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d102      	bne.n	80067ac <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	77fb      	strb	r3, [r7, #31]
 80067aa:	e0d1      	b.n	8006950 <HAL_COMP_Init+0x1c0>
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067ba:	d102      	bne.n	80067c2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e0c6      	b.n	8006950 <HAL_COMP_Init+0x1c0>
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif /* COMP2 */


    if (hcomp->State == HAL_COMP_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d115      	bne.n	80067fa <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	629a      	str	r2, [r3, #40]	@ 0x28
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067dc:	4b5f      	ldr	r3, [pc, #380]	@ (800695c <HAL_COMP_Init+0x1cc>)
 80067de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067e0:	4a5e      	ldr	r2, [pc, #376]	@ (800695c <HAL_COMP_Init+0x1cc>)
 80067e2:	f043 0301 	orr.w	r3, r3, #1
 80067e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80067e8:	4b5c      	ldr	r3, [pc, #368]	@ (800695c <HAL_COMP_Init+0x1cc>)
 80067ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	68bb      	ldr	r3, [r7, #8]

      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fc fadd 	bl	8002db4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006804:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.NonInvertingInput
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InvertingInput
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.NonInvertingInput
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#endif /* COMP_CSR_WINMODE */
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	4b4b      	ldr	r3, [pc, #300]	@ (8006960 <HAL_COMP_Init+0x1d0>)
 8006832:	4013      	ands	r3, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6812      	ldr	r2, [r2, #0]
 8006838:	6979      	ldr	r1, [r7, #20]
 800683a:	430b      	orrs	r3, r1
 800683c:	6013      	str	r3, [r2, #0]
#if defined(COMP2)
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if (hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006846:	d106      	bne.n	8006856 <HAL_COMP_Init+0xc6>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006848:	4b46      	ldr	r3, [pc, #280]	@ (8006964 <HAL_COMP_Init+0x1d4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a45      	ldr	r2, [pc, #276]	@ (8006964 <HAL_COMP_Init+0x1d4>)
 800684e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e005      	b.n	8006862 <HAL_COMP_Init+0xd2>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8006856:	4b43      	ldr	r3, [pc, #268]	@ (8006964 <HAL_COMP_Init+0x1d4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a42      	ldr	r2, [pc, #264]	@ (8006964 <HAL_COMP_Init+0x1d4>)
 800685c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006860:	6013      	str	r3, [r2, #0]
#endif /* COMP2 */


    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d016      	beq.n	800689e <HAL_COMP_Init+0x10e>
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d113      	bne.n	800689e <HAL_COMP_Init+0x10e>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006876:	4b3c      	ldr	r3, [pc, #240]	@ (8006968 <HAL_COMP_Init+0x1d8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	099b      	lsrs	r3, r3, #6
 800687c:	4a3b      	ldr	r2, [pc, #236]	@ (800696c <HAL_COMP_Init+0x1dc>)
 800687e:	fba2 2303 	umull	r2, r3, r2, r3
 8006882:	099b      	lsrs	r3, r3, #6
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	4613      	mov	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	4413      	add	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006890:	e002      	b.n	8006898 <HAL_COMP_Init+0x108>
      {
        wait_loop_index--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3b01      	subs	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
      while (wait_loop_index != 0UL)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f9      	bne.n	8006892 <HAL_COMP_Init+0x102>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a33      	ldr	r2, [pc, #204]	@ (8006970 <HAL_COMP_Init+0x1e0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d102      	bne.n	80068ae <HAL_COMP_Init+0x11e>
 80068a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80068ac:	e001      	b.n	80068b2 <HAL_COMP_Init+0x122>
 80068ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80068b2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d037      	beq.n	8006930 <HAL_COMP_Init+0x1a0>
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1b      	ldr	r3, [r3, #32]
 80068c4:	f003 0310 	and.w	r3, r3, #16
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <HAL_COMP_Init+0x144>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80068cc:	6938      	ldr	r0, [r7, #16]
 80068ce:	f7ff ff03 	bl	80066d8 <LL_EXTI_EnableRisingTrig_0_31>
 80068d2:	e002      	b.n	80068da <HAL_COMP_Init+0x14a>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80068d4:	6938      	ldr	r0, [r7, #16]
 80068d6:	f7ff ff11 	bl	80066fc <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_COMP_Init+0x15e>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80068e6:	6938      	ldr	r0, [r7, #16]
 80068e8:	f7ff ff1c 	bl	8006724 <LL_EXTI_EnableFallingTrig_0_31>
 80068ec:	e002      	b.n	80068f4 <HAL_COMP_Init+0x164>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80068ee:	6938      	ldr	r0, [r7, #16]
 80068f0:	f7ff ff2a 	bl	8006748 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 80068f4:	6938      	ldr	r0, [r7, #16]
 80068f6:	f7ff ff3b 	bl	8006770 <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_COMP_Init+0x17e>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7ff fec0 	bl	800668c <LL_EXTI_EnableEvent_0_31>
 800690c:	e002      	b.n	8006914 <HAL_COMP_Init+0x184>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800690e:	6938      	ldr	r0, [r7, #16]
 8006910:	f7ff fece 	bl	80066b0 <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_COMP_Init+0x198>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8006920:	6938      	ldr	r0, [r7, #16]
 8006922:	f7ff fe8d 	bl	8006640 <LL_EXTI_EnableIT_0_31>
 8006926:	e009      	b.n	800693c <HAL_COMP_Init+0x1ac>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006928:	6938      	ldr	r0, [r7, #16]
 800692a:	f7ff fe9b 	bl	8006664 <LL_EXTI_DisableIT_0_31>
 800692e:	e005      	b.n	800693c <HAL_COMP_Init+0x1ac>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8006930:	6938      	ldr	r0, [r7, #16]
 8006932:	f7ff febd 	bl	80066b0 <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8006936:	6938      	ldr	r0, [r7, #16]
 8006938:	f7ff fe94 	bl	8006664 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d103      	bne.n	8006950 <HAL_COMP_Init+0x1c0>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8006950:	7ffb      	ldrb	r3, [r7, #31]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3720      	adds	r7, #32
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	40021000 	.word	0x40021000
 8006960:	ff207d03 	.word	0xff207d03
 8006964:	40010204 	.word	0x40010204
 8006968:	20000020 	.word	0x20000020
 800696c:	053e2d63 	.word	0x053e2d63
 8006970:	40010200 	.word	0x40010200

08006974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006974:	b480      	push	{r7}
 8006976:	b085      	sub	sp, #20
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f003 0307 	and.w	r3, r3, #7
 8006982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006984:	4b0c      	ldr	r3, [pc, #48]	@ (80069b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006990:	4013      	ands	r3, r2
 8006992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800699c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80069a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80069a6:	4a04      	ldr	r2, [pc, #16]	@ (80069b8 <__NVIC_SetPriorityGrouping+0x44>)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	60d3      	str	r3, [r2, #12]
}
 80069ac:	bf00      	nop
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	e000ed00 	.word	0xe000ed00

080069bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80069c0:	4b04      	ldr	r3, [pc, #16]	@ (80069d4 <__NVIC_GetPriorityGrouping+0x18>)
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	f003 0307 	and.w	r3, r3, #7
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	e000ed00 	.word	0xe000ed00

080069d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	6039      	str	r1, [r7, #0]
 80069e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	db0a      	blt.n	8006a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	490c      	ldr	r1, [pc, #48]	@ (8006a24 <__NVIC_SetPriority+0x4c>)
 80069f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f6:	0112      	lsls	r2, r2, #4
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	440b      	add	r3, r1
 80069fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a00:	e00a      	b.n	8006a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4908      	ldr	r1, [pc, #32]	@ (8006a28 <__NVIC_SetPriority+0x50>)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	0112      	lsls	r2, r2, #4
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	440b      	add	r3, r1
 8006a16:	761a      	strb	r2, [r3, #24]
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	e000e100 	.word	0xe000e100
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b089      	sub	sp, #36	@ 0x24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 0307 	and.w	r3, r3, #7
 8006a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f1c3 0307 	rsb	r3, r3, #7
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	bf28      	it	cs
 8006a4a:	2304      	movcs	r3, #4
 8006a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	3304      	adds	r3, #4
 8006a52:	2b06      	cmp	r3, #6
 8006a54:	d902      	bls.n	8006a5c <NVIC_EncodePriority+0x30>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3b03      	subs	r3, #3
 8006a5a:	e000      	b.n	8006a5e <NVIC_EncodePriority+0x32>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a60:	f04f 32ff 	mov.w	r2, #4294967295
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6a:	43da      	mvns	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	401a      	ands	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a74:	f04f 31ff 	mov.w	r1, #4294967295
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a7e:	43d9      	mvns	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a84:	4313      	orrs	r3, r2
         );
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3724      	adds	r7, #36	@ 0x24
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
	...

08006a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aa4:	d301      	bcc.n	8006aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e00f      	b.n	8006aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad4 <SysTick_Config+0x40>)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ab2:	210f      	movs	r1, #15
 8006ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab8:	f7ff ff8e 	bl	80069d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006abc:	4b05      	ldr	r3, [pc, #20]	@ (8006ad4 <SysTick_Config+0x40>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ac2:	4b04      	ldr	r3, [pc, #16]	@ (8006ad4 <SysTick_Config+0x40>)
 8006ac4:	2207      	movs	r2, #7
 8006ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	e000e010 	.word	0xe000e010

08006ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f7ff ff47 	bl	8006974 <__NVIC_SetPriorityGrouping>
}
 8006ae6:	bf00      	nop
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b086      	sub	sp, #24
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	4603      	mov	r3, r0
 8006af6:	60b9      	str	r1, [r7, #8]
 8006af8:	607a      	str	r2, [r7, #4]
 8006afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006afc:	2300      	movs	r3, #0
 8006afe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b00:	f7ff ff5c 	bl	80069bc <__NVIC_GetPriorityGrouping>
 8006b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	6978      	ldr	r0, [r7, #20]
 8006b0c:	f7ff ff8e 	bl	8006a2c <NVIC_EncodePriority>
 8006b10:	4602      	mov	r2, r0
 8006b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff ff5d 	bl	80069d8 <__NVIC_SetPriority>
}
 8006b1e:	bf00      	nop
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f7ff ffb0 	bl	8006a94 <SysTick_Config>
 8006b34:	4603      	mov	r3, r0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006b4e:	e166      	b.n	8006e1e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	2101      	movs	r1, #1
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	fa01 f303 	lsl.w	r3, r1, r3
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8158 	beq.w	8006e18 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d005      	beq.n	8006b80 <HAL_GPIO_Init+0x40>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f003 0303 	and.w	r3, r3, #3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d130      	bne.n	8006be2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	43db      	mvns	r3, r3
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4013      	ands	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	005b      	lsls	r3, r3, #1
 8006ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	43db      	mvns	r3, r3
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	091b      	lsrs	r3, r3, #4
 8006bcc:	f003 0201 	and.w	r2, r3, #1
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d017      	beq.n	8006c1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfe:	43db      	mvns	r3, r3
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4013      	ands	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d123      	bne.n	8006c72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	08da      	lsrs	r2, r3, #3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3208      	adds	r2, #8
 8006c32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	220f      	movs	r2, #15
 8006c42:	fa02 f303 	lsl.w	r3, r2, r3
 8006c46:	43db      	mvns	r3, r3
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	08da      	lsrs	r2, r3, #3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3208      	adds	r2, #8
 8006c6c:	6939      	ldr	r1, [r7, #16]
 8006c6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	005b      	lsls	r3, r3, #1
 8006c7c:	2203      	movs	r2, #3
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	43db      	mvns	r3, r3
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	4013      	ands	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f003 0203 	and.w	r2, r3, #3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 80b2 	beq.w	8006e18 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cb4:	4b61      	ldr	r3, [pc, #388]	@ (8006e3c <HAL_GPIO_Init+0x2fc>)
 8006cb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb8:	4a60      	ldr	r2, [pc, #384]	@ (8006e3c <HAL_GPIO_Init+0x2fc>)
 8006cba:	f043 0301 	orr.w	r3, r3, #1
 8006cbe:	6613      	str	r3, [r2, #96]	@ 0x60
 8006cc0:	4b5e      	ldr	r3, [pc, #376]	@ (8006e3c <HAL_GPIO_Init+0x2fc>)
 8006cc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	60bb      	str	r3, [r7, #8]
 8006cca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006ccc:	4a5c      	ldr	r2, [pc, #368]	@ (8006e40 <HAL_GPIO_Init+0x300>)
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	089b      	lsrs	r3, r3, #2
 8006cd2:	3302      	adds	r3, #2
 8006cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	220f      	movs	r2, #15
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4013      	ands	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006cf6:	d02b      	beq.n	8006d50 <HAL_GPIO_Init+0x210>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a52      	ldr	r2, [pc, #328]	@ (8006e44 <HAL_GPIO_Init+0x304>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d025      	beq.n	8006d4c <HAL_GPIO_Init+0x20c>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a51      	ldr	r2, [pc, #324]	@ (8006e48 <HAL_GPIO_Init+0x308>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d01f      	beq.n	8006d48 <HAL_GPIO_Init+0x208>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a50      	ldr	r2, [pc, #320]	@ (8006e4c <HAL_GPIO_Init+0x30c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d019      	beq.n	8006d44 <HAL_GPIO_Init+0x204>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a4f      	ldr	r2, [pc, #316]	@ (8006e50 <HAL_GPIO_Init+0x310>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <HAL_GPIO_Init+0x200>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8006e54 <HAL_GPIO_Init+0x314>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d00d      	beq.n	8006d3c <HAL_GPIO_Init+0x1fc>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a4d      	ldr	r2, [pc, #308]	@ (8006e58 <HAL_GPIO_Init+0x318>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d007      	beq.n	8006d38 <HAL_GPIO_Init+0x1f8>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a4c      	ldr	r2, [pc, #304]	@ (8006e5c <HAL_GPIO_Init+0x31c>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d101      	bne.n	8006d34 <HAL_GPIO_Init+0x1f4>
 8006d30:	2307      	movs	r3, #7
 8006d32:	e00e      	b.n	8006d52 <HAL_GPIO_Init+0x212>
 8006d34:	2308      	movs	r3, #8
 8006d36:	e00c      	b.n	8006d52 <HAL_GPIO_Init+0x212>
 8006d38:	2306      	movs	r3, #6
 8006d3a:	e00a      	b.n	8006d52 <HAL_GPIO_Init+0x212>
 8006d3c:	2305      	movs	r3, #5
 8006d3e:	e008      	b.n	8006d52 <HAL_GPIO_Init+0x212>
 8006d40:	2304      	movs	r3, #4
 8006d42:	e006      	b.n	8006d52 <HAL_GPIO_Init+0x212>
 8006d44:	2303      	movs	r3, #3
 8006d46:	e004      	b.n	8006d52 <HAL_GPIO_Init+0x212>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e002      	b.n	8006d52 <HAL_GPIO_Init+0x212>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <HAL_GPIO_Init+0x212>
 8006d50:	2300      	movs	r3, #0
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	f002 0203 	and.w	r2, r2, #3
 8006d58:	0092      	lsls	r2, r2, #2
 8006d5a:	4093      	lsls	r3, r2
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006d62:	4937      	ldr	r1, [pc, #220]	@ (8006e40 <HAL_GPIO_Init+0x300>)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	089b      	lsrs	r3, r3, #2
 8006d68:	3302      	adds	r3, #2
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d70:	4b3b      	ldr	r3, [pc, #236]	@ (8006e60 <HAL_GPIO_Init+0x320>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	43db      	mvns	r3, r3
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d003      	beq.n	8006d94 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006d94:	4a32      	ldr	r2, [pc, #200]	@ (8006e60 <HAL_GPIO_Init+0x320>)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006d9a:	4b31      	ldr	r3, [pc, #196]	@ (8006e60 <HAL_GPIO_Init+0x320>)
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	43db      	mvns	r3, r3
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4013      	ands	r3, r2
 8006da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006dbe:	4a28      	ldr	r2, [pc, #160]	@ (8006e60 <HAL_GPIO_Init+0x320>)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006dc4:	4b26      	ldr	r3, [pc, #152]	@ (8006e60 <HAL_GPIO_Init+0x320>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	43db      	mvns	r3, r3
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006de8:	4a1d      	ldr	r2, [pc, #116]	@ (8006e60 <HAL_GPIO_Init+0x320>)
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006dee:	4b1c      	ldr	r3, [pc, #112]	@ (8006e60 <HAL_GPIO_Init+0x320>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	43db      	mvns	r3, r3
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006e12:	4a13      	ldr	r2, [pc, #76]	@ (8006e60 <HAL_GPIO_Init+0x320>)
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f47f ae91 	bne.w	8006b50 <HAL_GPIO_Init+0x10>
  }
}
 8006e2e:	bf00      	nop
 8006e30:	bf00      	nop
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	40021000 	.word	0x40021000
 8006e40:	40010000 	.word	0x40010000
 8006e44:	48000400 	.word	0x48000400
 8006e48:	48000800 	.word	0x48000800
 8006e4c:	48000c00 	.word	0x48000c00
 8006e50:	48001000 	.word	0x48001000
 8006e54:	48001400 	.word	0x48001400
 8006e58:	48001800 	.word	0x48001800
 8006e5c:	48001c00 	.word	0x48001c00
 8006e60:	40010400 	.word	0x40010400

08006e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	887b      	ldrh	r3, [r7, #2]
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
 8006e80:	e001      	b.n	8006e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	807b      	strh	r3, [r7, #2]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ea4:	787b      	ldrb	r3, [r7, #1]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006eaa:	887a      	ldrh	r2, [r7, #2]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006eb0:	e002      	b.n	8006eb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006eb2:	887a      	ldrh	r2, [r7, #2]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e08d      	b.n	8006ff2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fb ffb6 	bl	8002e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2224      	movs	r2, #36	@ 0x24
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f022 0201 	bic.w	r2, r2, #1
 8006f06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006f14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d107      	bne.n	8006f3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f3a:	609a      	str	r2, [r3, #8]
 8006f3c:	e006      	b.n	8006f4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006f4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d108      	bne.n	8006f66 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f62:	605a      	str	r2, [r3, #4]
 8006f64:	e007      	b.n	8006f76 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69d9      	ldr	r1, [r3, #28]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a1a      	ldr	r2, [r3, #32]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f042 0201 	orr.w	r2, r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b088      	sub	sp, #32
 8007000:	af02      	add	r7, sp, #8
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	461a      	mov	r2, r3
 8007008:	460b      	mov	r3, r1
 800700a:	817b      	strh	r3, [r7, #10]
 800700c:	4613      	mov	r3, r2
 800700e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b20      	cmp	r3, #32
 800701a:	f040 80fd 	bne.w	8007218 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_I2C_Master_Transmit+0x30>
 8007028:	2302      	movs	r3, #2
 800702a:	e0f6      	b.n	800721a <HAL_I2C_Master_Transmit+0x21e>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007034:	f7fe faf6 	bl	8005624 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	2319      	movs	r3, #25
 8007040:	2201      	movs	r2, #1
 8007042:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 fa0a 	bl	8007460 <I2C_WaitOnFlagUntilTimeout>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e0e1      	b.n	800721a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2221      	movs	r2, #33	@ 0x21
 800705a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2210      	movs	r2, #16
 8007062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	893a      	ldrh	r2, [r7, #8]
 8007076:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007082:	b29b      	uxth	r3, r3
 8007084:	2bff      	cmp	r3, #255	@ 0xff
 8007086:	d906      	bls.n	8007096 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	22ff      	movs	r2, #255	@ 0xff
 800708c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800708e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	e007      	b.n	80070a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800709a:	b29a      	uxth	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80070a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80070a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d024      	beq.n	80070f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b2:	781a      	ldrb	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29a      	uxth	r2, r3
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	3301      	adds	r3, #1
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	8979      	ldrh	r1, [r7, #10]
 80070ea:	4b4e      	ldr	r3, [pc, #312]	@ (8007224 <HAL_I2C_Master_Transmit+0x228>)
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fbf1 	bl	80078d8 <I2C_TransferConfig>
 80070f6:	e066      	b.n	80071c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	8979      	ldrh	r1, [r7, #10]
 8007100:	4b48      	ldr	r3, [pc, #288]	@ (8007224 <HAL_I2C_Master_Transmit+0x228>)
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fbe6 	bl	80078d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800710c:	e05b      	b.n	80071c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	6a39      	ldr	r1, [r7, #32]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f000 f9f3 	bl	80074fe <I2C_WaitOnTXISFlagUntilTimeout>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e07b      	b.n	800721a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007126:	781a      	ldrb	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007132:	1c5a      	adds	r2, r3, #1
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800713c:	b29b      	uxth	r3, r3
 800713e:	3b01      	subs	r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d034      	beq.n	80071c6 <HAL_I2C_Master_Transmit+0x1ca>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d130      	bne.n	80071c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	2200      	movs	r2, #0
 800716c:	2180      	movs	r1, #128	@ 0x80
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f976 	bl	8007460 <I2C_WaitOnFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e04d      	b.n	800721a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007182:	b29b      	uxth	r3, r3
 8007184:	2bff      	cmp	r3, #255	@ 0xff
 8007186:	d90e      	bls.n	80071a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	22ff      	movs	r2, #255	@ 0xff
 800718c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007192:	b2da      	uxtb	r2, r3
 8007194:	8979      	ldrh	r1, [r7, #10]
 8007196:	2300      	movs	r3, #0
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 fb9a 	bl	80078d8 <I2C_TransferConfig>
 80071a4:	e00f      	b.n	80071c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	8979      	ldrh	r1, [r7, #10]
 80071b8:	2300      	movs	r3, #0
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071c0:	68f8      	ldr	r0, [r7, #12]
 80071c2:	f000 fb89 	bl	80078d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d19e      	bne.n	800710e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	6a39      	ldr	r1, [r7, #32]
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f9d9 	bl	800758c <I2C_WaitOnSTOPFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e01a      	b.n	800721a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2220      	movs	r2, #32
 80071ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6859      	ldr	r1, [r3, #4]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007228 <HAL_I2C_Master_Transmit+0x22c>)
 80071f8:	400b      	ands	r3, r1
 80071fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	e000      	b.n	800721a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007218:	2302      	movs	r3, #2
  }
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	80002000 	.word	0x80002000
 8007228:	fe00e800 	.word	0xfe00e800

0800722c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b088      	sub	sp, #32
 8007230:	af02      	add	r7, sp, #8
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	607a      	str	r2, [r7, #4]
 8007236:	461a      	mov	r2, r3
 8007238:	460b      	mov	r3, r1
 800723a:	817b      	strh	r3, [r7, #10]
 800723c:	4613      	mov	r3, r2
 800723e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b20      	cmp	r3, #32
 800724a:	f040 80db 	bne.w	8007404 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <HAL_I2C_Master_Receive+0x30>
 8007258:	2302      	movs	r3, #2
 800725a:	e0d4      	b.n	8007406 <HAL_I2C_Master_Receive+0x1da>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007264:	f7fe f9de 	bl	8005624 <HAL_GetTick>
 8007268:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	2319      	movs	r3, #25
 8007270:	2201      	movs	r2, #1
 8007272:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 f8f2 	bl	8007460 <I2C_WaitOnFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d001      	beq.n	8007286 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e0bf      	b.n	8007406 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2222      	movs	r2, #34	@ 0x22
 800728a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2210      	movs	r2, #16
 8007292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	893a      	ldrh	r2, [r7, #8]
 80072a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2bff      	cmp	r3, #255	@ 0xff
 80072b6:	d90e      	bls.n	80072d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	22ff      	movs	r2, #255	@ 0xff
 80072bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	8979      	ldrh	r1, [r7, #10]
 80072c6:	4b52      	ldr	r3, [pc, #328]	@ (8007410 <HAL_I2C_Master_Receive+0x1e4>)
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 fb02 	bl	80078d8 <I2C_TransferConfig>
 80072d4:	e06d      	b.n	80073b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	8979      	ldrh	r1, [r7, #10]
 80072e8:	4b49      	ldr	r3, [pc, #292]	@ (8007410 <HAL_I2C_Master_Receive+0x1e4>)
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 faf1 	bl	80078d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80072f6:	e05c      	b.n	80073b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	6a39      	ldr	r1, [r7, #32]
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 f989 	bl	8007614 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e07c      	b.n	8007406 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007316:	b2d2      	uxtb	r2, r2
 8007318:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007328:	3b01      	subs	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d034      	beq.n	80073b2 <HAL_I2C_Master_Receive+0x186>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800734c:	2b00      	cmp	r3, #0
 800734e:	d130      	bne.n	80073b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	2200      	movs	r2, #0
 8007358:	2180      	movs	r1, #128	@ 0x80
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 f880 	bl	8007460 <I2C_WaitOnFlagUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e04d      	b.n	8007406 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	2bff      	cmp	r3, #255	@ 0xff
 8007372:	d90e      	bls.n	8007392 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	22ff      	movs	r2, #255	@ 0xff
 8007378:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800737e:	b2da      	uxtb	r2, r3
 8007380:	8979      	ldrh	r1, [r7, #10]
 8007382:	2300      	movs	r3, #0
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f000 faa4 	bl	80078d8 <I2C_TransferConfig>
 8007390:	e00f      	b.n	80073b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	8979      	ldrh	r1, [r7, #10]
 80073a4:	2300      	movs	r3, #0
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 fa93 	bl	80078d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d19d      	bne.n	80072f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	6a39      	ldr	r1, [r7, #32]
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 f8e3 	bl	800758c <I2C_WaitOnSTOPFlagUntilTimeout>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e01a      	b.n	8007406 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2220      	movs	r2, #32
 80073d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6859      	ldr	r1, [r3, #4]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007414 <HAL_I2C_Master_Receive+0x1e8>)
 80073e4:	400b      	ands	r3, r1
 80073e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	e000      	b.n	8007406 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8007404:	2302      	movs	r3, #2
  }
}
 8007406:	4618      	mov	r0, r3
 8007408:	3718      	adds	r7, #24
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	80002400 	.word	0x80002400
 8007414:	fe00e800 	.word	0xfe00e800

08007418 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	f003 0302 	and.w	r3, r3, #2
 800742a:	2b02      	cmp	r3, #2
 800742c:	d103      	bne.n	8007436 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2200      	movs	r2, #0
 8007434:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	699b      	ldr	r3, [r3, #24]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b01      	cmp	r3, #1
 8007442:	d007      	beq.n	8007454 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0201 	orr.w	r2, r2, #1
 8007452:	619a      	str	r2, [r3, #24]
  }
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	603b      	str	r3, [r7, #0]
 800746c:	4613      	mov	r3, r2
 800746e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007470:	e031      	b.n	80074d6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d02d      	beq.n	80074d6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747a:	f7fe f8d3 	bl	8005624 <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d302      	bcc.n	8007490 <I2C_WaitOnFlagUntilTimeout+0x30>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d122      	bne.n	80074d6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	4013      	ands	r3, r2
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	429a      	cmp	r2, r3
 800749e:	bf0c      	ite	eq
 80074a0:	2301      	moveq	r3, #1
 80074a2:	2300      	movne	r3, #0
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	461a      	mov	r2, r3
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d113      	bne.n	80074d6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b2:	f043 0220 	orr.w	r2, r3, #32
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2220      	movs	r2, #32
 80074be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e00f      	b.n	80074f6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	699a      	ldr	r2, [r3, #24]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bf0c      	ite	eq
 80074e6:	2301      	moveq	r3, #1
 80074e8:	2300      	movne	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d0be      	beq.n	8007472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b084      	sub	sp, #16
 8007502:	af00      	add	r7, sp, #0
 8007504:	60f8      	str	r0, [r7, #12]
 8007506:	60b9      	str	r1, [r7, #8]
 8007508:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800750a:	e033      	b.n	8007574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	68b9      	ldr	r1, [r7, #8]
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 f901 	bl	8007718 <I2C_IsErrorOccurred>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	e031      	b.n	8007584 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007526:	d025      	beq.n	8007574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007528:	f7fe f87c 	bl	8005624 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	429a      	cmp	r2, r3
 8007536:	d302      	bcc.n	800753e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d11a      	bne.n	8007574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b02      	cmp	r3, #2
 800754a:	d013      	beq.n	8007574 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007550:	f043 0220 	orr.w	r2, r3, #32
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e007      	b.n	8007584 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b02      	cmp	r3, #2
 8007580:	d1c4      	bne.n	800750c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007598:	e02f      	b.n	80075fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f8ba 	bl	8007718 <I2C_IsErrorOccurred>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e02d      	b.n	800760a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ae:	f7fe f839 	bl	8005624 <HAL_GetTick>
 80075b2:	4602      	mov	r2, r0
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	1ad3      	subs	r3, r2, r3
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d302      	bcc.n	80075c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d11a      	bne.n	80075fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d013      	beq.n	80075fa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d6:	f043 0220 	orr.w	r2, r3, #32
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2220      	movs	r2, #32
 80075e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e007      	b.n	800760a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	f003 0320 	and.w	r3, r3, #32
 8007604:	2b20      	cmp	r3, #32
 8007606:	d1c8      	bne.n	800759a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007620:	e06b      	b.n	80076fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	68b9      	ldr	r1, [r7, #8]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f876 	bl	8007718 <I2C_IsErrorOccurred>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007632:	2301      	movs	r3, #1
 8007634:	e069      	b.n	800770a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b20      	cmp	r3, #32
 8007642:	d138      	bne.n	80076b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	f003 0304 	and.w	r3, r3, #4
 800764e:	2b04      	cmp	r3, #4
 8007650:	d105      	bne.n	800765e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	e055      	b.n	800770a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	f003 0310 	and.w	r3, r3, #16
 8007668:	2b10      	cmp	r3, #16
 800766a:	d107      	bne.n	800767c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2210      	movs	r2, #16
 8007672:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2204      	movs	r2, #4
 8007678:	645a      	str	r2, [r3, #68]	@ 0x44
 800767a:	e002      	b.n	8007682 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2220      	movs	r2, #32
 8007688:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6859      	ldr	r1, [r3, #4]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	4b1f      	ldr	r3, [pc, #124]	@ (8007714 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8007696:	400b      	ands	r3, r1
 8007698:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2220      	movs	r2, #32
 800769e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e029      	b.n	800770a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076b6:	f7fd ffb5 	bl	8005624 <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d302      	bcc.n	80076cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d116      	bne.n	80076fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699b      	ldr	r3, [r3, #24]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d00f      	beq.n	80076fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076de:	f043 0220 	orr.w	r2, r3, #32
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2220      	movs	r2, #32
 80076ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e007      	b.n	800770a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b04      	cmp	r3, #4
 8007706:	d18c      	bne.n	8007622 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	fe00e800 	.word	0xfe00e800

08007718 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08a      	sub	sp, #40	@ 0x28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007732:	2300      	movs	r3, #0
 8007734:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	f003 0310 	and.w	r3, r3, #16
 8007740:	2b00      	cmp	r3, #0
 8007742:	d068      	beq.n	8007816 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2210      	movs	r2, #16
 800774a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800774c:	e049      	b.n	80077e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d045      	beq.n	80077e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007756:	f7fd ff65 	bl	8005624 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	429a      	cmp	r2, r3
 8007764:	d302      	bcc.n	800776c <I2C_IsErrorOccurred+0x54>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d13a      	bne.n	80077e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007776:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800777e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800778a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800778e:	d121      	bne.n	80077d4 <I2C_IsErrorOccurred+0xbc>
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007796:	d01d      	beq.n	80077d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007798:	7cfb      	ldrb	r3, [r7, #19]
 800779a:	2b20      	cmp	r3, #32
 800779c:	d01a      	beq.n	80077d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80077ae:	f7fd ff39 	bl	8005624 <HAL_GetTick>
 80077b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077b4:	e00e      	b.n	80077d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80077b6:	f7fd ff35 	bl	8005624 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b19      	cmp	r3, #25
 80077c2:	d907      	bls.n	80077d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	f043 0320 	orr.w	r3, r3, #32
 80077ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80077d2:	e006      	b.n	80077e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b20      	cmp	r3, #32
 80077e0:	d1e9      	bne.n	80077b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	d003      	beq.n	80077f8 <I2C_IsErrorOccurred+0xe0>
 80077f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0aa      	beq.n	800774e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80077f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d103      	bne.n	8007808 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2220      	movs	r2, #32
 8007806:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	f043 0304 	orr.w	r3, r3, #4
 800780e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	f043 0301 	orr.w	r3, r3, #1
 800782e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007838:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00b      	beq.n	8007862 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	f043 0308 	orr.w	r3, r3, #8
 8007850:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800785a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	f043 0302 	orr.w	r3, r3, #2
 8007872:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800787c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01c      	beq.n	80078c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7ff fdc3 	bl	8007418 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6859      	ldr	r1, [r3, #4]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	4b0d      	ldr	r3, [pc, #52]	@ (80078d4 <I2C_IsErrorOccurred+0x1bc>)
 800789e:	400b      	ands	r3, r1
 80078a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80078c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3728      	adds	r7, #40	@ 0x28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	fe00e800 	.word	0xfe00e800

080078d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	607b      	str	r3, [r7, #4]
 80078e2:	460b      	mov	r3, r1
 80078e4:	817b      	strh	r3, [r7, #10]
 80078e6:	4613      	mov	r3, r2
 80078e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078ea:	897b      	ldrh	r3, [r7, #10]
 80078ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078f0:	7a7b      	ldrb	r3, [r7, #9]
 80078f2:	041b      	lsls	r3, r3, #16
 80078f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	4313      	orrs	r3, r2
 8007902:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007906:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	0d5b      	lsrs	r3, r3, #21
 8007912:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007916:	4b08      	ldr	r3, [pc, #32]	@ (8007938 <I2C_TransferConfig+0x60>)
 8007918:	430b      	orrs	r3, r1
 800791a:	43db      	mvns	r3, r3
 800791c:	ea02 0103 	and.w	r1, r2, r3
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	430a      	orrs	r2, r1
 8007928:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	03ff63ff 	.word	0x03ff63ff

0800793c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b20      	cmp	r3, #32
 8007950:	d138      	bne.n	80079c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800795c:	2302      	movs	r3, #2
 800795e:	e032      	b.n	80079c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2224      	movs	r2, #36	@ 0x24
 800796c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f022 0201 	bic.w	r2, r2, #1
 800797e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800798e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6819      	ldr	r1, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2220      	movs	r2, #32
 80079b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	e000      	b.n	80079c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079c4:	2302      	movs	r3, #2
  }
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d139      	bne.n	8007a5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d101      	bne.n	80079f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079f2:	2302      	movs	r3, #2
 80079f4:	e033      	b.n	8007a5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2224      	movs	r2, #36	@ 0x24
 8007a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0201 	bic.w	r2, r2, #1
 8007a14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681a      	ldr	r2, [r3, #0]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0201 	orr.w	r2, r2, #1
 8007a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	e000      	b.n	8007a5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a5c:	2302      	movs	r3, #2
  }
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
	...

08007a6c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a70:	4b05      	ldr	r3, [pc, #20]	@ (8007a88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a04      	ldr	r2, [pc, #16]	@ (8007a88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a7a:	6013      	str	r3, [r2, #0]
}
 8007a7c:	bf00      	nop
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	40007000 	.word	0x40007000

08007a8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007a90:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a9c:	d102      	bne.n	8007aa4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8007a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007aa2:	e00b      	b.n	8007abc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8007aa4:	4b08      	ldr	r3, [pc, #32]	@ (8007ac8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8007aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ab2:	d102      	bne.n	8007aba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8007ab4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ab8:	e000      	b.n	8007abc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8007aba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	40007000 	.word	0x40007000

08007acc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d141      	bne.n	8007b5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ada:	4b4b      	ldr	r3, [pc, #300]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ae6:	d131      	bne.n	8007b4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ae8:	4b47      	ldr	r3, [pc, #284]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aee:	4a46      	ldr	r2, [pc, #280]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007af8:	4b43      	ldr	r3, [pc, #268]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b00:	4a41      	ldr	r2, [pc, #260]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007b08:	4b40      	ldr	r3, [pc, #256]	@ (8007c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2232      	movs	r2, #50	@ 0x32
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
 8007b12:	4a3f      	ldr	r2, [pc, #252]	@ (8007c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b14:	fba2 2303 	umull	r2, r3, r2, r3
 8007b18:	0c9b      	lsrs	r3, r3, #18
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b1e:	e002      	b.n	8007b26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b26:	4b38      	ldr	r3, [pc, #224]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b32:	d102      	bne.n	8007b3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1f2      	bne.n	8007b20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b3a:	4b33      	ldr	r3, [pc, #204]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b46:	d158      	bne.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e057      	b.n	8007bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b52:	4a2d      	ldr	r2, [pc, #180]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007b5c:	e04d      	b.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b64:	d141      	bne.n	8007bea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b66:	4b28      	ldr	r3, [pc, #160]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b72:	d131      	bne.n	8007bd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b74:	4b24      	ldr	r3, [pc, #144]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b7a:	4a23      	ldr	r2, [pc, #140]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b84:	4b20      	ldr	r3, [pc, #128]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8007b94:	4b1d      	ldr	r3, [pc, #116]	@ (8007c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2232      	movs	r2, #50	@ 0x32
 8007b9a:	fb02 f303 	mul.w	r3, r2, r3
 8007b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8007c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba4:	0c9b      	lsrs	r3, r3, #18
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007baa:	e002      	b.n	8007bb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007bb2:	4b15      	ldr	r3, [pc, #84]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bbe:	d102      	bne.n	8007bc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f2      	bne.n	8007bac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007bc6:	4b10      	ldr	r3, [pc, #64]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd2:	d112      	bne.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e011      	b.n	8007bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bde:	4a0a      	ldr	r2, [pc, #40]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007be8:	e007      	b.n	8007bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007bea:	4b07      	ldr	r3, [pc, #28]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bf2:	4a05      	ldr	r2, [pc, #20]	@ (8007c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bf4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007bf8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	40007000 	.word	0x40007000
 8007c0c:	20000020 	.word	0x20000020
 8007c10:	431bde83 	.word	0x431bde83

08007c14 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007c14:	b480      	push	{r7}
 8007c16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8007c18:	4b05      	ldr	r3, [pc, #20]	@ (8007c30 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4a04      	ldr	r2, [pc, #16]	@ (8007c30 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c22:	6053      	str	r3, [r2, #4]
}
 8007c24:	bf00      	nop
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	40007000 	.word	0x40007000

08007c34 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b088      	sub	sp, #32
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d102      	bne.n	8007c48 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f000 bc08 	b.w	8008458 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c48:	4b96      	ldr	r3, [pc, #600]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f003 030c 	and.w	r3, r3, #12
 8007c50:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c52:	4b94      	ldr	r3, [pc, #592]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0310 	and.w	r3, r3, #16
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80e4 	beq.w	8007e32 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d007      	beq.n	8007c80 <HAL_RCC_OscConfig+0x4c>
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	2b0c      	cmp	r3, #12
 8007c74:	f040 808b 	bne.w	8007d8e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	f040 8087 	bne.w	8007d8e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007c80:	4b88      	ldr	r3, [pc, #544]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_RCC_OscConfig+0x64>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d101      	bne.n	8007c98 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e3df      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a1a      	ldr	r2, [r3, #32]
 8007c9c:	4b81      	ldr	r3, [pc, #516]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0308 	and.w	r3, r3, #8
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d004      	beq.n	8007cb2 <HAL_RCC_OscConfig+0x7e>
 8007ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cb0:	e005      	b.n	8007cbe <HAL_RCC_OscConfig+0x8a>
 8007cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007cb8:	091b      	lsrs	r3, r3, #4
 8007cba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d223      	bcs.n	8007d0a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fdcc 	bl	8008864 <RCC_SetFlashLatencyFromMSIRange>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e3c0      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cd6:	4b73      	ldr	r3, [pc, #460]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a72      	ldr	r2, [pc, #456]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007cdc:	f043 0308 	orr.w	r3, r3, #8
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	4b70      	ldr	r3, [pc, #448]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	496d      	ldr	r1, [pc, #436]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cf4:	4b6b      	ldr	r3, [pc, #428]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	4968      	ldr	r1, [pc, #416]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	604b      	str	r3, [r1, #4]
 8007d08:	e025      	b.n	8007d56 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d0a:	4b66      	ldr	r3, [pc, #408]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a65      	ldr	r2, [pc, #404]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d10:	f043 0308 	orr.w	r3, r3, #8
 8007d14:	6013      	str	r3, [r2, #0]
 8007d16:	4b63      	ldr	r3, [pc, #396]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	4960      	ldr	r1, [pc, #384]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d28:	4b5e      	ldr	r3, [pc, #376]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	69db      	ldr	r3, [r3, #28]
 8007d34:	021b      	lsls	r3, r3, #8
 8007d36:	495b      	ldr	r1, [pc, #364]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d109      	bne.n	8007d56 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fd8c 	bl	8008864 <RCC_SetFlashLatencyFromMSIRange>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e380      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007d56:	f000 fcc1 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	4b51      	ldr	r3, [pc, #324]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	091b      	lsrs	r3, r3, #4
 8007d62:	f003 030f 	and.w	r3, r3, #15
 8007d66:	4950      	ldr	r1, [pc, #320]	@ (8007ea8 <HAL_RCC_OscConfig+0x274>)
 8007d68:	5ccb      	ldrb	r3, [r1, r3]
 8007d6a:	f003 031f 	and.w	r3, r3, #31
 8007d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d72:	4a4e      	ldr	r2, [pc, #312]	@ (8007eac <HAL_RCC_OscConfig+0x278>)
 8007d74:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007d76:	4b4e      	ldr	r3, [pc, #312]	@ (8007eb0 <HAL_RCC_OscConfig+0x27c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7fd fc02 	bl	8005584 <HAL_InitTick>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d052      	beq.n	8007e30 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
 8007d8c:	e364      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d032      	beq.n	8007dfc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007d96:	4b43      	ldr	r3, [pc, #268]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a42      	ldr	r2, [pc, #264]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007d9c:	f043 0301 	orr.w	r3, r3, #1
 8007da0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007da2:	f7fd fc3f 	bl	8005624 <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007daa:	f7fd fc3b 	bl	8005624 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e34d      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007dbc:	4b39      	ldr	r3, [pc, #228]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0302 	and.w	r3, r3, #2
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f0      	beq.n	8007daa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007dc8:	4b36      	ldr	r3, [pc, #216]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a35      	ldr	r2, [pc, #212]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007dce:	f043 0308 	orr.w	r3, r3, #8
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	4b33      	ldr	r3, [pc, #204]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a1b      	ldr	r3, [r3, #32]
 8007de0:	4930      	ldr	r1, [pc, #192]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007de6:	4b2f      	ldr	r3, [pc, #188]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	021b      	lsls	r3, r3, #8
 8007df4:	492b      	ldr	r1, [pc, #172]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007df6:	4313      	orrs	r3, r2
 8007df8:	604b      	str	r3, [r1, #4]
 8007dfa:	e01a      	b.n	8007e32 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007dfc:	4b29      	ldr	r3, [pc, #164]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a28      	ldr	r2, [pc, #160]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007e02:	f023 0301 	bic.w	r3, r3, #1
 8007e06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007e08:	f7fd fc0c 	bl	8005624 <HAL_GetTick>
 8007e0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e0e:	e008      	b.n	8007e22 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007e10:	f7fd fc08 	bl	8005624 <HAL_GetTick>
 8007e14:	4602      	mov	r2, r0
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	1ad3      	subs	r3, r2, r3
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d901      	bls.n	8007e22 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e31a      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007e22:	4b20      	ldr	r3, [pc, #128]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f0      	bne.n	8007e10 <HAL_RCC_OscConfig+0x1dc>
 8007e2e:	e000      	b.n	8007e32 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d073      	beq.n	8007f26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	2b08      	cmp	r3, #8
 8007e42:	d005      	beq.n	8007e50 <HAL_RCC_OscConfig+0x21c>
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	2b0c      	cmp	r3, #12
 8007e48:	d10e      	bne.n	8007e68 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d10b      	bne.n	8007e68 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e50:	4b14      	ldr	r3, [pc, #80]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d063      	beq.n	8007f24 <HAL_RCC_OscConfig+0x2f0>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d15f      	bne.n	8007f24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e2f7      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e70:	d106      	bne.n	8007e80 <HAL_RCC_OscConfig+0x24c>
 8007e72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a0b      	ldr	r2, [pc, #44]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e7c:	6013      	str	r3, [r2, #0]
 8007e7e:	e025      	b.n	8007ecc <HAL_RCC_OscConfig+0x298>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e88:	d114      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x280>
 8007e8a:	4b06      	ldr	r3, [pc, #24]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a05      	ldr	r2, [pc, #20]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	4b03      	ldr	r3, [pc, #12]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a02      	ldr	r2, [pc, #8]	@ (8007ea4 <HAL_RCC_OscConfig+0x270>)
 8007e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e013      	b.n	8007ecc <HAL_RCC_OscConfig+0x298>
 8007ea4:	40021000 	.word	0x40021000
 8007ea8:	08014fc0 	.word	0x08014fc0
 8007eac:	20000020 	.word	0x20000020
 8007eb0:	20000024 	.word	0x20000024
 8007eb4:	4ba0      	ldr	r3, [pc, #640]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a9f      	ldr	r2, [pc, #636]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	4b9d      	ldr	r3, [pc, #628]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a9c      	ldr	r2, [pc, #624]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d013      	beq.n	8007efc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed4:	f7fd fba6 	bl	8005624 <HAL_GetTick>
 8007ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eda:	e008      	b.n	8007eee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007edc:	f7fd fba2 	bl	8005624 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	2b64      	cmp	r3, #100	@ 0x64
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e2b4      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007eee:	4b92      	ldr	r3, [pc, #584]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0f0      	beq.n	8007edc <HAL_RCC_OscConfig+0x2a8>
 8007efa:	e014      	b.n	8007f26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efc:	f7fd fb92 	bl	8005624 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f02:	e008      	b.n	8007f16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f04:	f7fd fb8e 	bl	8005624 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	2b64      	cmp	r3, #100	@ 0x64
 8007f10:	d901      	bls.n	8007f16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e2a0      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f16:	4b88      	ldr	r3, [pc, #544]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d1f0      	bne.n	8007f04 <HAL_RCC_OscConfig+0x2d0>
 8007f22:	e000      	b.n	8007f26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d060      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	d005      	beq.n	8007f44 <HAL_RCC_OscConfig+0x310>
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	2b0c      	cmp	r3, #12
 8007f3c:	d119      	bne.n	8007f72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d116      	bne.n	8007f72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f44:	4b7c      	ldr	r3, [pc, #496]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <HAL_RCC_OscConfig+0x328>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e27d      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f5c:	4b76      	ldr	r3, [pc, #472]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	691b      	ldr	r3, [r3, #16]
 8007f68:	061b      	lsls	r3, r3, #24
 8007f6a:	4973      	ldr	r1, [pc, #460]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f70:	e040      	b.n	8007ff4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d023      	beq.n	8007fc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007f7a:	4b6f      	ldr	r3, [pc, #444]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a6e      	ldr	r2, [pc, #440]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f86:	f7fd fb4d 	bl	8005624 <HAL_GetTick>
 8007f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f8c:	e008      	b.n	8007fa0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f8e:	f7fd fb49 	bl	8005624 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d901      	bls.n	8007fa0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e25b      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fa0:	4b65      	ldr	r3, [pc, #404]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0f0      	beq.n	8007f8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fac:	4b62      	ldr	r3, [pc, #392]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	061b      	lsls	r3, r3, #24
 8007fba:	495f      	ldr	r1, [pc, #380]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	604b      	str	r3, [r1, #4]
 8007fc0:	e018      	b.n	8007ff4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fce:	f7fd fb29 	bl	8005624 <HAL_GetTick>
 8007fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fd4:	e008      	b.n	8007fe8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fd6:	f7fd fb25 	bl	8005624 <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d901      	bls.n	8007fe8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e237      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007fe8:	4b53      	ldr	r3, [pc, #332]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1f0      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0308 	and.w	r3, r3, #8
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d03c      	beq.n	800807a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d01c      	beq.n	8008042 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008008:	4b4b      	ldr	r3, [pc, #300]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 800800a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800800e:	4a4a      	ldr	r2, [pc, #296]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8008010:	f043 0301 	orr.w	r3, r3, #1
 8008014:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008018:	f7fd fb04 	bl	8005624 <HAL_GetTick>
 800801c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800801e:	e008      	b.n	8008032 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008020:	f7fd fb00 	bl	8005624 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b02      	cmp	r3, #2
 800802c:	d901      	bls.n	8008032 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e212      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008032:	4b41      	ldr	r3, [pc, #260]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8008034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0ef      	beq.n	8008020 <HAL_RCC_OscConfig+0x3ec>
 8008040:	e01b      	b.n	800807a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008042:	4b3d      	ldr	r3, [pc, #244]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8008044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008048:	4a3b      	ldr	r2, [pc, #236]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 800804a:	f023 0301 	bic.w	r3, r3, #1
 800804e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008052:	f7fd fae7 	bl	8005624 <HAL_GetTick>
 8008056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008058:	e008      	b.n	800806c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800805a:	f7fd fae3 	bl	8005624 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b02      	cmp	r3, #2
 8008066:	d901      	bls.n	800806c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008068:	2303      	movs	r3, #3
 800806a:	e1f5      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800806c:	4b32      	ldr	r3, [pc, #200]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 800806e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008072:	f003 0302 	and.w	r3, r3, #2
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1ef      	bne.n	800805a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0304 	and.w	r3, r3, #4
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80a6 	beq.w	80081d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008088:	2300      	movs	r3, #0
 800808a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800808c:	4b2a      	ldr	r3, [pc, #168]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 800808e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10d      	bne.n	80080b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008098:	4b27      	ldr	r3, [pc, #156]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 800809a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809c:	4a26      	ldr	r2, [pc, #152]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 800809e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80080a4:	4b24      	ldr	r3, [pc, #144]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 80080a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80080ac:	60bb      	str	r3, [r7, #8]
 80080ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80080b0:	2301      	movs	r3, #1
 80080b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080b4:	4b21      	ldr	r3, [pc, #132]	@ (800813c <HAL_RCC_OscConfig+0x508>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d118      	bne.n	80080f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080c0:	4b1e      	ldr	r3, [pc, #120]	@ (800813c <HAL_RCC_OscConfig+0x508>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a1d      	ldr	r2, [pc, #116]	@ (800813c <HAL_RCC_OscConfig+0x508>)
 80080c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80080cc:	f7fd faaa 	bl	8005624 <HAL_GetTick>
 80080d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080d2:	e008      	b.n	80080e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080d4:	f7fd faa6 	bl	8005624 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e1b8      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080e6:	4b15      	ldr	r3, [pc, #84]	@ (800813c <HAL_RCC_OscConfig+0x508>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0f0      	beq.n	80080d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d108      	bne.n	800810c <HAL_RCC_OscConfig+0x4d8>
 80080fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 80080fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008100:	4a0d      	ldr	r2, [pc, #52]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800810a:	e029      	b.n	8008160 <HAL_RCC_OscConfig+0x52c>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	2b05      	cmp	r3, #5
 8008112:	d115      	bne.n	8008140 <HAL_RCC_OscConfig+0x50c>
 8008114:	4b08      	ldr	r3, [pc, #32]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8008116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800811a:	4a07      	ldr	r2, [pc, #28]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 800811c:	f043 0304 	orr.w	r3, r3, #4
 8008120:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008124:	4b04      	ldr	r3, [pc, #16]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 8008126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800812a:	4a03      	ldr	r2, [pc, #12]	@ (8008138 <HAL_RCC_OscConfig+0x504>)
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008134:	e014      	b.n	8008160 <HAL_RCC_OscConfig+0x52c>
 8008136:	bf00      	nop
 8008138:	40021000 	.word	0x40021000
 800813c:	40007000 	.word	0x40007000
 8008140:	4b9d      	ldr	r3, [pc, #628]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008146:	4a9c      	ldr	r2, [pc, #624]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008148:	f023 0301 	bic.w	r3, r3, #1
 800814c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008150:	4b99      	ldr	r3, [pc, #612]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008156:	4a98      	ldr	r2, [pc, #608]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008158:	f023 0304 	bic.w	r3, r3, #4
 800815c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d016      	beq.n	8008196 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008168:	f7fd fa5c 	bl	8005624 <HAL_GetTick>
 800816c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800816e:	e00a      	b.n	8008186 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008170:	f7fd fa58 	bl	8005624 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800817e:	4293      	cmp	r3, r2
 8008180:	d901      	bls.n	8008186 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e168      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008186:	4b8c      	ldr	r3, [pc, #560]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800818c:	f003 0302 	and.w	r3, r3, #2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d0ed      	beq.n	8008170 <HAL_RCC_OscConfig+0x53c>
 8008194:	e015      	b.n	80081c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008196:	f7fd fa45 	bl	8005624 <HAL_GetTick>
 800819a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800819c:	e00a      	b.n	80081b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800819e:	f7fd fa41 	bl	8005624 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e151      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081b4:	4b80      	ldr	r3, [pc, #512]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 80081b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1ed      	bne.n	800819e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80081c2:	7ffb      	ldrb	r3, [r7, #31]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d105      	bne.n	80081d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80081c8:	4b7b      	ldr	r3, [pc, #492]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 80081ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081cc:	4a7a      	ldr	r2, [pc, #488]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 80081ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0320 	and.w	r3, r3, #32
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d03c      	beq.n	800825a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d01c      	beq.n	8008222 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081e8:	4b73      	ldr	r3, [pc, #460]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 80081ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80081ee:	4a72      	ldr	r2, [pc, #456]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 80081f0:	f043 0301 	orr.w	r3, r3, #1
 80081f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081f8:	f7fd fa14 	bl	8005624 <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008200:	f7fd fa10 	bl	8005624 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e122      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008212:	4b69      	ldr	r3, [pc, #420]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b00      	cmp	r3, #0
 800821e:	d0ef      	beq.n	8008200 <HAL_RCC_OscConfig+0x5cc>
 8008220:	e01b      	b.n	800825a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008222:	4b65      	ldr	r3, [pc, #404]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008224:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008228:	4a63      	ldr	r2, [pc, #396]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 800822a:	f023 0301 	bic.w	r3, r3, #1
 800822e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008232:	f7fd f9f7 	bl	8005624 <HAL_GetTick>
 8008236:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008238:	e008      	b.n	800824c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800823a:	f7fd f9f3 	bl	8005624 <HAL_GetTick>
 800823e:	4602      	mov	r2, r0
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	2b02      	cmp	r3, #2
 8008246:	d901      	bls.n	800824c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008248:	2303      	movs	r3, #3
 800824a:	e105      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800824c:	4b5a      	ldr	r3, [pc, #360]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 800824e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1ef      	bne.n	800823a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 80f9 	beq.w	8008456 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008268:	2b02      	cmp	r3, #2
 800826a:	f040 80cf 	bne.w	800840c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800826e:	4b52      	ldr	r3, [pc, #328]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	f003 0203 	and.w	r2, r3, #3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827e:	429a      	cmp	r2, r3
 8008280:	d12c      	bne.n	80082dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800828c:	3b01      	subs	r3, #1
 800828e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008290:	429a      	cmp	r2, r3
 8008292:	d123      	bne.n	80082dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800829e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d11b      	bne.n	80082dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d113      	bne.n	80082dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	3b01      	subs	r3, #1
 80082c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d109      	bne.n	80082dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d2:	085b      	lsrs	r3, r3, #1
 80082d4:	3b01      	subs	r3, #1
 80082d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082d8:	429a      	cmp	r2, r3
 80082da:	d071      	beq.n	80083c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	2b0c      	cmp	r3, #12
 80082e0:	d068      	beq.n	80083b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80082e2:	4b35      	ldr	r3, [pc, #212]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d105      	bne.n	80082fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80082ee:	4b32      	ldr	r3, [pc, #200]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e0ac      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80082fe:	4b2e      	ldr	r3, [pc, #184]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a2d      	ldr	r2, [pc, #180]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008304:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008308:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800830a:	f7fd f98b 	bl	8005624 <HAL_GetTick>
 800830e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008310:	e008      	b.n	8008324 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008312:	f7fd f987 	bl	8005624 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d901      	bls.n	8008324 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e099      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008324:	4b24      	ldr	r3, [pc, #144]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d1f0      	bne.n	8008312 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008330:	4b21      	ldr	r3, [pc, #132]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	4b21      	ldr	r3, [pc, #132]	@ (80083bc <HAL_RCC_OscConfig+0x788>)
 8008336:	4013      	ands	r3, r2
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008340:	3a01      	subs	r2, #1
 8008342:	0112      	lsls	r2, r2, #4
 8008344:	4311      	orrs	r1, r2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800834a:	0212      	lsls	r2, r2, #8
 800834c:	4311      	orrs	r1, r2
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008352:	0852      	lsrs	r2, r2, #1
 8008354:	3a01      	subs	r2, #1
 8008356:	0552      	lsls	r2, r2, #21
 8008358:	4311      	orrs	r1, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800835e:	0852      	lsrs	r2, r2, #1
 8008360:	3a01      	subs	r2, #1
 8008362:	0652      	lsls	r2, r2, #25
 8008364:	4311      	orrs	r1, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800836a:	06d2      	lsls	r2, r2, #27
 800836c:	430a      	orrs	r2, r1
 800836e:	4912      	ldr	r1, [pc, #72]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008370:	4313      	orrs	r3, r2
 8008372:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008374:	4b10      	ldr	r3, [pc, #64]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a0f      	ldr	r2, [pc, #60]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 800837a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800837e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008380:	4b0d      	ldr	r3, [pc, #52]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	4a0c      	ldr	r2, [pc, #48]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 8008386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800838a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800838c:	f7fd f94a 	bl	8005624 <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008394:	f7fd f946 	bl	8005624 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e058      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083a6:	4b04      	ldr	r3, [pc, #16]	@ (80083b8 <HAL_RCC_OscConfig+0x784>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f0      	beq.n	8008394 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80083b2:	e050      	b.n	8008456 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e04f      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
 80083b8:	40021000 	.word	0x40021000
 80083bc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083c0:	4b27      	ldr	r3, [pc, #156]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d144      	bne.n	8008456 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80083cc:	4b24      	ldr	r3, [pc, #144]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a23      	ldr	r2, [pc, #140]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 80083d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083d8:	4b21      	ldr	r3, [pc, #132]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	4a20      	ldr	r2, [pc, #128]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 80083de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80083e4:	f7fd f91e 	bl	8005624 <HAL_GetTick>
 80083e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083ea:	e008      	b.n	80083fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083ec:	f7fd f91a 	bl	8005624 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d901      	bls.n	80083fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e02c      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083fe:	4b18      	ldr	r3, [pc, #96]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0f0      	beq.n	80083ec <HAL_RCC_OscConfig+0x7b8>
 800840a:	e024      	b.n	8008456 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b0c      	cmp	r3, #12
 8008410:	d01f      	beq.n	8008452 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008412:	4b13      	ldr	r3, [pc, #76]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a12      	ldr	r2, [pc, #72]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 8008418:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800841c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841e:	f7fd f901 	bl	8005624 <HAL_GetTick>
 8008422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008424:	e008      	b.n	8008438 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008426:	f7fd f8fd 	bl	8005624 <HAL_GetTick>
 800842a:	4602      	mov	r2, r0
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	2b02      	cmp	r3, #2
 8008432:	d901      	bls.n	8008438 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8008434:	2303      	movs	r3, #3
 8008436:	e00f      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008438:	4b09      	ldr	r3, [pc, #36]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d1f0      	bne.n	8008426 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008444:	4b06      	ldr	r3, [pc, #24]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 8008446:	68da      	ldr	r2, [r3, #12]
 8008448:	4905      	ldr	r1, [pc, #20]	@ (8008460 <HAL_RCC_OscConfig+0x82c>)
 800844a:	4b06      	ldr	r3, [pc, #24]	@ (8008464 <HAL_RCC_OscConfig+0x830>)
 800844c:	4013      	ands	r3, r2
 800844e:	60cb      	str	r3, [r1, #12]
 8008450:	e001      	b.n	8008456 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e000      	b.n	8008458 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3720      	adds	r7, #32
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40021000 	.word	0x40021000
 8008464:	feeefffc 	.word	0xfeeefffc

08008468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e11d      	b.n	80086bc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008480:	4b90      	ldr	r3, [pc, #576]	@ (80086c4 <HAL_RCC_ClockConfig+0x25c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 030f 	and.w	r3, r3, #15
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d910      	bls.n	80084b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848e:	4b8d      	ldr	r3, [pc, #564]	@ (80086c4 <HAL_RCC_ClockConfig+0x25c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f023 020f 	bic.w	r2, r3, #15
 8008496:	498b      	ldr	r1, [pc, #556]	@ (80086c4 <HAL_RCC_ClockConfig+0x25c>)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	4313      	orrs	r3, r2
 800849c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800849e:	4b89      	ldr	r3, [pc, #548]	@ (80086c4 <HAL_RCC_ClockConfig+0x25c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 030f 	and.w	r3, r3, #15
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d001      	beq.n	80084b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e105      	b.n	80086bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0302 	and.w	r3, r3, #2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d010      	beq.n	80084de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	4b81      	ldr	r3, [pc, #516]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d908      	bls.n	80084de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084cc:	4b7e      	ldr	r3, [pc, #504]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	497b      	ldr	r1, [pc, #492]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d079      	beq.n	80085de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	2b03      	cmp	r3, #3
 80084f0:	d11e      	bne.n	8008530 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084f2:	4b75      	ldr	r3, [pc, #468]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e0dc      	b.n	80086bc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8008502:	f000 fa09 	bl	8008918 <RCC_GetSysClockFreqFromPLLSource>
 8008506:	4603      	mov	r3, r0
 8008508:	4a70      	ldr	r2, [pc, #448]	@ (80086cc <HAL_RCC_ClockConfig+0x264>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d946      	bls.n	800859c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800850e:	4b6e      	ldr	r3, [pc, #440]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d140      	bne.n	800859c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800851a:	4b6b      	ldr	r3, [pc, #428]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008522:	4a69      	ldr	r2, [pc, #420]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 8008524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008528:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800852a:	2380      	movs	r3, #128	@ 0x80
 800852c:	617b      	str	r3, [r7, #20]
 800852e:	e035      	b.n	800859c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2b02      	cmp	r3, #2
 8008536:	d107      	bne.n	8008548 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008538:	4b63      	ldr	r3, [pc, #396]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d115      	bne.n	8008570 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e0b9      	b.n	80086bc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d107      	bne.n	8008560 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008550:	4b5d      	ldr	r3, [pc, #372]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0302 	and.w	r3, r3, #2
 8008558:	2b00      	cmp	r3, #0
 800855a:	d109      	bne.n	8008570 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e0ad      	b.n	80086bc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008560:	4b59      	ldr	r3, [pc, #356]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e0a5      	b.n	80086bc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8008570:	f000 f8b4 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8008574:	4603      	mov	r3, r0
 8008576:	4a55      	ldr	r2, [pc, #340]	@ (80086cc <HAL_RCC_ClockConfig+0x264>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d90f      	bls.n	800859c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800857c:	4b52      	ldr	r3, [pc, #328]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d109      	bne.n	800859c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008588:	4b4f      	ldr	r3, [pc, #316]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008590:	4a4d      	ldr	r2, [pc, #308]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 8008592:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008596:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008598:	2380      	movs	r3, #128	@ 0x80
 800859a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800859c:	4b4a      	ldr	r3, [pc, #296]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f023 0203 	bic.w	r2, r3, #3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	4947      	ldr	r1, [pc, #284]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ae:	f7fd f839 	bl	8005624 <HAL_GetTick>
 80085b2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085b4:	e00a      	b.n	80085cc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085b6:	f7fd f835 	bl	8005624 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d901      	bls.n	80085cc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80085c8:	2303      	movs	r3, #3
 80085ca:	e077      	b.n	80086bc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085cc:	4b3e      	ldr	r3, [pc, #248]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	f003 020c 	and.w	r2, r3, #12
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	429a      	cmp	r2, r3
 80085dc:	d1eb      	bne.n	80085b6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b80      	cmp	r3, #128	@ 0x80
 80085e2:	d105      	bne.n	80085f0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80085e4:	4b38      	ldr	r3, [pc, #224]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 80085e6:	689b      	ldr	r3, [r3, #8]
 80085e8:	4a37      	ldr	r2, [pc, #220]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 80085ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085ee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0302 	and.w	r3, r3, #2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d010      	beq.n	800861e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	4b31      	ldr	r3, [pc, #196]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008608:	429a      	cmp	r2, r3
 800860a:	d208      	bcs.n	800861e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800860c:	4b2e      	ldr	r3, [pc, #184]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	492b      	ldr	r1, [pc, #172]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 800861a:	4313      	orrs	r3, r2
 800861c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800861e:	4b29      	ldr	r3, [pc, #164]	@ (80086c4 <HAL_RCC_ClockConfig+0x25c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 030f 	and.w	r3, r3, #15
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	429a      	cmp	r2, r3
 800862a:	d210      	bcs.n	800864e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800862c:	4b25      	ldr	r3, [pc, #148]	@ (80086c4 <HAL_RCC_ClockConfig+0x25c>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f023 020f 	bic.w	r2, r3, #15
 8008634:	4923      	ldr	r1, [pc, #140]	@ (80086c4 <HAL_RCC_ClockConfig+0x25c>)
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	4313      	orrs	r3, r2
 800863a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800863c:	4b21      	ldr	r3, [pc, #132]	@ (80086c4 <HAL_RCC_ClockConfig+0x25c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	683a      	ldr	r2, [r7, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d001      	beq.n	800864e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e036      	b.n	80086bc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0304 	and.w	r3, r3, #4
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800865a:	4b1b      	ldr	r3, [pc, #108]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68db      	ldr	r3, [r3, #12]
 8008666:	4918      	ldr	r1, [pc, #96]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 8008668:	4313      	orrs	r3, r2
 800866a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008678:	4b13      	ldr	r3, [pc, #76]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	4910      	ldr	r1, [pc, #64]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 8008688:	4313      	orrs	r3, r2
 800868a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800868c:	f000 f826 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8008690:	4602      	mov	r2, r0
 8008692:	4b0d      	ldr	r3, [pc, #52]	@ (80086c8 <HAL_RCC_ClockConfig+0x260>)
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	091b      	lsrs	r3, r3, #4
 8008698:	f003 030f 	and.w	r3, r3, #15
 800869c:	490c      	ldr	r1, [pc, #48]	@ (80086d0 <HAL_RCC_ClockConfig+0x268>)
 800869e:	5ccb      	ldrb	r3, [r1, r3]
 80086a0:	f003 031f 	and.w	r3, r3, #31
 80086a4:	fa22 f303 	lsr.w	r3, r2, r3
 80086a8:	4a0a      	ldr	r2, [pc, #40]	@ (80086d4 <HAL_RCC_ClockConfig+0x26c>)
 80086aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80086ac:	4b0a      	ldr	r3, [pc, #40]	@ (80086d8 <HAL_RCC_ClockConfig+0x270>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fc ff67 	bl	8005584 <HAL_InitTick>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3718      	adds	r7, #24
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40022000 	.word	0x40022000
 80086c8:	40021000 	.word	0x40021000
 80086cc:	04c4b400 	.word	0x04c4b400
 80086d0:	08014fc0 	.word	0x08014fc0
 80086d4:	20000020 	.word	0x20000020
 80086d8:	20000024 	.word	0x20000024

080086dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	b089      	sub	sp, #36	@ 0x24
 80086e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	61fb      	str	r3, [r7, #28]
 80086e6:	2300      	movs	r3, #0
 80086e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80086ea:	4b3e      	ldr	r3, [pc, #248]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 030c 	and.w	r3, r3, #12
 80086f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086f4:	4b3b      	ldr	r3, [pc, #236]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <HAL_RCC_GetSysClockFreq+0x34>
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	2b0c      	cmp	r3, #12
 8008708:	d121      	bne.n	800874e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d11e      	bne.n	800874e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008710:	4b34      	ldr	r3, [pc, #208]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0308 	and.w	r3, r3, #8
 8008718:	2b00      	cmp	r3, #0
 800871a:	d107      	bne.n	800872c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800871c:	4b31      	ldr	r3, [pc, #196]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800871e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008722:	0a1b      	lsrs	r3, r3, #8
 8008724:	f003 030f 	and.w	r3, r3, #15
 8008728:	61fb      	str	r3, [r7, #28]
 800872a:	e005      	b.n	8008738 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800872c:	4b2d      	ldr	r3, [pc, #180]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	091b      	lsrs	r3, r3, #4
 8008732:	f003 030f 	and.w	r3, r3, #15
 8008736:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008738:	4a2b      	ldr	r2, [pc, #172]	@ (80087e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008740:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10d      	bne.n	8008764 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800874c:	e00a      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b04      	cmp	r3, #4
 8008752:	d102      	bne.n	800875a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008754:	4b25      	ldr	r3, [pc, #148]	@ (80087ec <HAL_RCC_GetSysClockFreq+0x110>)
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	e004      	b.n	8008764 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b08      	cmp	r3, #8
 800875e:	d101      	bne.n	8008764 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008760:	4b23      	ldr	r3, [pc, #140]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8008762:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2b0c      	cmp	r3, #12
 8008768:	d134      	bne.n	80087d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800876a:	4b1e      	ldr	r3, [pc, #120]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	f003 0303 	and.w	r3, r3, #3
 8008772:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	2b02      	cmp	r3, #2
 8008778:	d003      	beq.n	8008782 <HAL_RCC_GetSysClockFreq+0xa6>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2b03      	cmp	r3, #3
 800877e:	d003      	beq.n	8008788 <HAL_RCC_GetSysClockFreq+0xac>
 8008780:	e005      	b.n	800878e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008782:	4b1a      	ldr	r3, [pc, #104]	@ (80087ec <HAL_RCC_GetSysClockFreq+0x110>)
 8008784:	617b      	str	r3, [r7, #20]
      break;
 8008786:	e005      	b.n	8008794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008788:	4b19      	ldr	r3, [pc, #100]	@ (80087f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800878a:	617b      	str	r3, [r7, #20]
      break;
 800878c:	e002      	b.n	8008794 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	617b      	str	r3, [r7, #20]
      break;
 8008792:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008794:	4b13      	ldr	r3, [pc, #76]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	091b      	lsrs	r3, r3, #4
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	3301      	adds	r3, #1
 80087a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80087a2:	4b10      	ldr	r3, [pc, #64]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	0a1b      	lsrs	r3, r3, #8
 80087a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	fb03 f202 	mul.w	r2, r3, r2
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087ba:	4b0a      	ldr	r3, [pc, #40]	@ (80087e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	0e5b      	lsrs	r3, r3, #25
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	3301      	adds	r3, #1
 80087c6:	005b      	lsls	r3, r3, #1
 80087c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80087d4:	69bb      	ldr	r3, [r7, #24]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3724      	adds	r7, #36	@ 0x24
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	40021000 	.word	0x40021000
 80087e8:	08014fd8 	.word	0x08014fd8
 80087ec:	00f42400 	.word	0x00f42400
 80087f0:	007a1200 	.word	0x007a1200

080087f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80087f8:	4b03      	ldr	r3, [pc, #12]	@ (8008808 <HAL_RCC_GetHCLKFreq+0x14>)
 80087fa:	681b      	ldr	r3, [r3, #0]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	20000020 	.word	0x20000020

0800880c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008810:	f7ff fff0 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 8008814:	4602      	mov	r2, r0
 8008816:	4b06      	ldr	r3, [pc, #24]	@ (8008830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	0a1b      	lsrs	r3, r3, #8
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	4904      	ldr	r1, [pc, #16]	@ (8008834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008822:	5ccb      	ldrb	r3, [r1, r3]
 8008824:	f003 031f 	and.w	r3, r3, #31
 8008828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800882c:	4618      	mov	r0, r3
 800882e:	bd80      	pop	{r7, pc}
 8008830:	40021000 	.word	0x40021000
 8008834:	08014fd0 	.word	0x08014fd0

08008838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800883c:	f7ff ffda 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 8008840:	4602      	mov	r2, r0
 8008842:	4b06      	ldr	r3, [pc, #24]	@ (800885c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	0adb      	lsrs	r3, r3, #11
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	4904      	ldr	r1, [pc, #16]	@ (8008860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800884e:	5ccb      	ldrb	r3, [r1, r3]
 8008850:	f003 031f 	and.w	r3, r3, #31
 8008854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008858:	4618      	mov	r0, r3
 800885a:	bd80      	pop	{r7, pc}
 800885c:	40021000 	.word	0x40021000
 8008860:	08014fd0 	.word	0x08014fd0

08008864 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b086      	sub	sp, #24
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800886c:	2300      	movs	r3, #0
 800886e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008870:	4b27      	ldr	r3, [pc, #156]	@ (8008910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d003      	beq.n	8008884 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800887c:	f7ff f906 	bl	8007a8c <HAL_PWREx_GetVoltageRange>
 8008880:	6178      	str	r0, [r7, #20]
 8008882:	e014      	b.n	80088ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008884:	4b22      	ldr	r3, [pc, #136]	@ (8008910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008888:	4a21      	ldr	r2, [pc, #132]	@ (8008910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800888a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800888e:	6593      	str	r3, [r2, #88]	@ 0x58
 8008890:	4b1f      	ldr	r3, [pc, #124]	@ (8008910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8008892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008898:	60fb      	str	r3, [r7, #12]
 800889a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800889c:	f7ff f8f6 	bl	8007a8c <HAL_PWREx_GetVoltageRange>
 80088a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80088a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80088a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088a6:	4a1a      	ldr	r2, [pc, #104]	@ (8008910 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80088a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088b4:	d10b      	bne.n	80088ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b80      	cmp	r3, #128	@ 0x80
 80088ba:	d913      	bls.n	80088e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2ba0      	cmp	r3, #160	@ 0xa0
 80088c0:	d902      	bls.n	80088c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80088c2:	2302      	movs	r3, #2
 80088c4:	613b      	str	r3, [r7, #16]
 80088c6:	e00d      	b.n	80088e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088c8:	2301      	movs	r3, #1
 80088ca:	613b      	str	r3, [r7, #16]
 80088cc:	e00a      	b.n	80088e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80088d2:	d902      	bls.n	80088da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80088d4:	2302      	movs	r3, #2
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	e004      	b.n	80088e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b70      	cmp	r3, #112	@ 0x70
 80088de:	d101      	bne.n	80088e4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80088e0:	2301      	movs	r3, #1
 80088e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80088e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008914 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f023 020f 	bic.w	r2, r3, #15
 80088ec:	4909      	ldr	r1, [pc, #36]	@ (8008914 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80088f4:	4b07      	ldr	r3, [pc, #28]	@ (8008914 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 030f 	and.w	r3, r3, #15
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d001      	beq.n	8008906 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	40021000 	.word	0x40021000
 8008914:	40022000 	.word	0x40022000

08008918 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008918:	b480      	push	{r7}
 800891a:	b087      	sub	sp, #28
 800891c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800891e:	4b2d      	ldr	r3, [pc, #180]	@ (80089d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f003 0303 	and.w	r3, r3, #3
 8008926:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b03      	cmp	r3, #3
 800892c:	d00b      	beq.n	8008946 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b03      	cmp	r3, #3
 8008932:	d825      	bhi.n	8008980 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d008      	beq.n	800894c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d11f      	bne.n	8008980 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8008940:	4b25      	ldr	r3, [pc, #148]	@ (80089d8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8008942:	613b      	str	r3, [r7, #16]
    break;
 8008944:	e01f      	b.n	8008986 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8008946:	4b25      	ldr	r3, [pc, #148]	@ (80089dc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8008948:	613b      	str	r3, [r7, #16]
    break;
 800894a:	e01c      	b.n	8008986 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800894c:	4b21      	ldr	r3, [pc, #132]	@ (80089d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0308 	and.w	r3, r3, #8
 8008954:	2b00      	cmp	r3, #0
 8008956:	d107      	bne.n	8008968 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008958:	4b1e      	ldr	r3, [pc, #120]	@ (80089d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800895a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800895e:	0a1b      	lsrs	r3, r3, #8
 8008960:	f003 030f 	and.w	r3, r3, #15
 8008964:	617b      	str	r3, [r7, #20]
 8008966:	e005      	b.n	8008974 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008968:	4b1a      	ldr	r3, [pc, #104]	@ (80089d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	091b      	lsrs	r3, r3, #4
 800896e:	f003 030f 	and.w	r3, r3, #15
 8008972:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8008974:	4a1a      	ldr	r2, [pc, #104]	@ (80089e0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800897c:	613b      	str	r3, [r7, #16]
    break;
 800897e:	e002      	b.n	8008986 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	613b      	str	r3, [r7, #16]
    break;
 8008984:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008986:	4b13      	ldr	r3, [pc, #76]	@ (80089d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	091b      	lsrs	r3, r3, #4
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	3301      	adds	r3, #1
 8008992:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008994:	4b0f      	ldr	r3, [pc, #60]	@ (80089d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	0a1b      	lsrs	r3, r3, #8
 800899a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	fb03 f202 	mul.w	r2, r3, r2
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089aa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089ac:	4b09      	ldr	r3, [pc, #36]	@ (80089d4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	0e5b      	lsrs	r3, r3, #25
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	3301      	adds	r3, #1
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80089c6:	683b      	ldr	r3, [r7, #0]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	371c      	adds	r7, #28
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	40021000 	.word	0x40021000
 80089d8:	00f42400 	.word	0x00f42400
 80089dc:	007a1200 	.word	0x007a1200
 80089e0:	08014fd8 	.word	0x08014fd8

080089e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80089ec:	2300      	movs	r3, #0
 80089ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80089f0:	2300      	movs	r3, #0
 80089f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d040      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a04:	2b80      	cmp	r3, #128	@ 0x80
 8008a06:	d02a      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008a08:	2b80      	cmp	r3, #128	@ 0x80
 8008a0a:	d825      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008a0c:	2b60      	cmp	r3, #96	@ 0x60
 8008a0e:	d026      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008a10:	2b60      	cmp	r3, #96	@ 0x60
 8008a12:	d821      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008a14:	2b40      	cmp	r3, #64	@ 0x40
 8008a16:	d006      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8008a18:	2b40      	cmp	r3, #64	@ 0x40
 8008a1a:	d81d      	bhi.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d009      	beq.n	8008a34 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8008a20:	2b20      	cmp	r3, #32
 8008a22:	d010      	beq.n	8008a46 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8008a24:	e018      	b.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008a26:	4b89      	ldr	r3, [pc, #548]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	4a88      	ldr	r2, [pc, #544]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a30:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008a32:	e015      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3304      	adds	r3, #4
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f001 fa34 	bl	8009ea8 <RCCEx_PLLSAI1_Config>
 8008a40:	4603      	mov	r3, r0
 8008a42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008a44:	e00c      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	3320      	adds	r3, #32
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f001 fb1f 	bl	800a090 <RCCEx_PLLSAI2_Config>
 8008a52:	4603      	mov	r3, r0
 8008a54:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008a56:	e003      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	74fb      	strb	r3, [r7, #19]
      break;
 8008a5c:	e000      	b.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8008a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a60:	7cfb      	ldrb	r3, [r7, #19]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d10b      	bne.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a66:	4b79      	ldr	r3, [pc, #484]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a6c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a74:	4975      	ldr	r1, [pc, #468]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008a7c:	e001      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a7e:	7cfb      	ldrb	r3, [r7, #19]
 8008a80:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d047      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a96:	d030      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008a98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a9c:	d82a      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008a9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aa2:	d02a      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x116>
 8008aa4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008aa8:	d824      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aae:	d008      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8008ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab4:	d81e      	bhi.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8008aba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008abe:	d010      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008ac0:	e018      	b.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008ac2:	4b62      	ldr	r3, [pc, #392]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ac4:	68db      	ldr	r3, [r3, #12]
 8008ac6:	4a61      	ldr	r2, [pc, #388]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008acc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008ace:	e015      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	3304      	adds	r3, #4
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f001 f9e6 	bl	8009ea8 <RCCEx_PLLSAI1_Config>
 8008adc:	4603      	mov	r3, r0
 8008ade:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008ae0:	e00c      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3320      	adds	r3, #32
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f001 fad1 	bl	800a090 <RCCEx_PLLSAI2_Config>
 8008aee:	4603      	mov	r3, r0
 8008af0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8008af2:	e003      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	74fb      	strb	r3, [r7, #19]
      break;
 8008af8:	e000      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8008afa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008afc:	7cfb      	ldrb	r3, [r7, #19]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10b      	bne.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008b02:	4b52      	ldr	r3, [pc, #328]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b04:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b10:	494e      	ldr	r1, [pc, #312]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8008b18:	e001      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1a:	7cfb      	ldrb	r3, [r7, #19]
 8008b1c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f000 809f 	beq.w	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b30:	4b46      	ldr	r3, [pc, #280]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e000      	b.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8008b40:	2300      	movs	r3, #0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00d      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b46:	4b41      	ldr	r3, [pc, #260]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b4a:	4a40      	ldr	r2, [pc, #256]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b52:	4b3e      	ldr	r3, [pc, #248]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b5a:	60bb      	str	r3, [r7, #8]
 8008b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b62:	4b3b      	ldr	r3, [pc, #236]	@ (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a3a      	ldr	r2, [pc, #232]	@ (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008b6e:	f7fc fd59 	bl	8005624 <HAL_GetTick>
 8008b72:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008b74:	e009      	b.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b76:	f7fc fd55 	bl	8005624 <HAL_GetTick>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d902      	bls.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	74fb      	strb	r3, [r7, #19]
        break;
 8008b88:	e005      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008b8a:	4b31      	ldr	r3, [pc, #196]	@ (8008c50 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0ef      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8008b96:	7cfb      	ldrb	r3, [r7, #19]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d15b      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008ba6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d01f      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d019      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008bba:	4b24      	ldr	r3, [pc, #144]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008bc6:	4b21      	ldr	r3, [pc, #132]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008bde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008be2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008be6:	4a19      	ldr	r2, [pc, #100]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d016      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf8:	f7fc fd14 	bl	8005624 <HAL_GetTick>
 8008bfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bfe:	e00b      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c00:	f7fc fd10 	bl	8005624 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d902      	bls.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	74fb      	strb	r3, [r7, #19]
            break;
 8008c16:	e006      	b.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c18:	4b0c      	ldr	r3, [pc, #48]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1e:	f003 0302 	and.w	r3, r3, #2
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0ec      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8008c26:	7cfb      	ldrb	r3, [r7, #19]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10c      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008c2c:	4b07      	ldr	r3, [pc, #28]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c32:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c3c:	4903      	ldr	r1, [pc, #12]	@ (8008c4c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008c44:	e008      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008c46:	7cfb      	ldrb	r3, [r7, #19]
 8008c48:	74bb      	strb	r3, [r7, #18]
 8008c4a:	e005      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8008c4c:	40021000 	.word	0x40021000
 8008c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c54:	7cfb      	ldrb	r3, [r7, #19]
 8008c56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008c58:	7c7b      	ldrb	r3, [r7, #17]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d105      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c5e:	4ba0      	ldr	r3, [pc, #640]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c62:	4a9f      	ldr	r2, [pc, #636]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c76:	4b9a      	ldr	r3, [pc, #616]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c7c:	f023 0203 	bic.w	r2, r3, #3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c84:	4996      	ldr	r1, [pc, #600]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c86:	4313      	orrs	r3, r2
 8008c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00a      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008c98:	4b91      	ldr	r3, [pc, #580]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c9e:	f023 020c 	bic.w	r2, r3, #12
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca6:	498e      	ldr	r1, [pc, #568]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0304 	and.w	r3, r3, #4
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00a      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008cba:	4b89      	ldr	r3, [pc, #548]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cc8:	4985      	ldr	r1, [pc, #532]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0308 	and.w	r3, r3, #8
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00a      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008cdc:	4b80      	ldr	r3, [pc, #512]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ce2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cea:	497d      	ldr	r1, [pc, #500]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0310 	and.w	r3, r3, #16
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008cfe:	4b78      	ldr	r3, [pc, #480]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d0c:	4974      	ldr	r1, [pc, #464]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 0320 	and.w	r3, r3, #32
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00a      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008d20:	4b6f      	ldr	r3, [pc, #444]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d2e:	496c      	ldr	r1, [pc, #432]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d30:	4313      	orrs	r3, r2
 8008d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008d42:	4b67      	ldr	r3, [pc, #412]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d50:	4963      	ldr	r1, [pc, #396]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00a      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d64:	4b5e      	ldr	r3, [pc, #376]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d72:	495b      	ldr	r1, [pc, #364]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d74:	4313      	orrs	r3, r2
 8008d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d00a      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d86:	4b56      	ldr	r3, [pc, #344]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d94:	4952      	ldr	r1, [pc, #328]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00a      	beq.n	8008dbe <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008da8:	4b4d      	ldr	r3, [pc, #308]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db6:	494a      	ldr	r1, [pc, #296]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00a      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008dca:	4b45      	ldr	r3, [pc, #276]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dd8:	4941      	ldr	r1, [pc, #260]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008dec:	4b3c      	ldr	r3, [pc, #240]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008dee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008df2:	f023 0203 	bic.w	r2, r3, #3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dfa:	4939      	ldr	r1, [pc, #228]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d028      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e0e:	4b34      	ldr	r3, [pc, #208]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e14:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e1c:	4930      	ldr	r1, [pc, #192]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e2c:	d106      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	4a2b      	ldr	r2, [pc, #172]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e38:	60d3      	str	r3, [r2, #12]
 8008e3a:	e011      	b.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e40:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e44:	d10c      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	3304      	adds	r3, #4
 8008e4a:	2101      	movs	r1, #1
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f001 f82b 	bl	8009ea8 <RCCEx_PLLSAI1_Config>
 8008e52:	4603      	mov	r3, r0
 8008e54:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008e56:	7cfb      	ldrb	r3, [r7, #19]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8008e5c:	7cfb      	ldrb	r3, [r7, #19]
 8008e5e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d04d      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e74:	d108      	bne.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8008e76:	4b1a      	ldr	r3, [pc, #104]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e7c:	4a18      	ldr	r2, [pc, #96]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e82:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008e86:	e012      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008e88:	4b15      	ldr	r3, [pc, #84]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e8e:	4a14      	ldr	r2, [pc, #80]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e94:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8008e98:	4b11      	ldr	r3, [pc, #68]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ea6:	490e      	ldr	r1, [pc, #56]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008eb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eb6:	d106      	bne.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008eb8:	4b09      	ldr	r3, [pc, #36]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	4a08      	ldr	r2, [pc, #32]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ebe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ec2:	60d3      	str	r3, [r2, #12]
 8008ec4:	e020      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008eca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ece:	d109      	bne.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008ed0:	4b03      	ldr	r3, [pc, #12]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	4a02      	ldr	r2, [pc, #8]	@ (8008ee0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8008ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008eda:	60d3      	str	r3, [r2, #12]
 8008edc:	e014      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8008ede:	bf00      	nop
 8008ee0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ee8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008eec:	d10c      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 ffd7 	bl	8009ea8 <RCCEx_PLLSAI1_Config>
 8008efa:	4603      	mov	r3, r0
 8008efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008efe:	7cfb      	ldrb	r3, [r7, #19]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8008f04:	7cfb      	ldrb	r3, [r7, #19]
 8008f06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d028      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f14:	4b4a      	ldr	r3, [pc, #296]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f22:	4947      	ldr	r1, [pc, #284]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f32:	d106      	bne.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008f34:	4b42      	ldr	r3, [pc, #264]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	4a41      	ldr	r2, [pc, #260]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f3e:	60d3      	str	r3, [r2, #12]
 8008f40:	e011      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008f4a:	d10c      	bne.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3304      	adds	r3, #4
 8008f50:	2101      	movs	r1, #1
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 ffa8 	bl	8009ea8 <RCCEx_PLLSAI1_Config>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008f5c:	7cfb      	ldrb	r3, [r7, #19]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8008f62:	7cfb      	ldrb	r3, [r7, #19]
 8008f64:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d01e      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008f72:	4b33      	ldr	r3, [pc, #204]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f78:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f82:	492f      	ldr	r1, [pc, #188]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008f84:	4313      	orrs	r3, r2
 8008f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f94:	d10c      	bne.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	2102      	movs	r1, #2
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 ff83 	bl	8009ea8 <RCCEx_PLLSAI1_Config>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008fa6:	7cfb      	ldrb	r3, [r7, #19]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d001      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8008fac:	7cfb      	ldrb	r3, [r7, #19]
 8008fae:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00b      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fbc:	4b20      	ldr	r3, [pc, #128]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fc2:	f023 0204 	bic.w	r2, r3, #4
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008fcc:	491c      	ldr	r1, [pc, #112]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008fe0:	4b17      	ldr	r3, [pc, #92]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fe6:	f023 0218 	bic.w	r2, r3, #24
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ff0:	4913      	ldr	r1, [pc, #76]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009000:	2b00      	cmp	r3, #0
 8009002:	d017      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009004:	4b0e      	ldr	r3, [pc, #56]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009006:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800900a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009014:	490a      	ldr	r1, [pc, #40]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009016:	4313      	orrs	r3, r2
 8009018:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009026:	d105      	bne.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009028:	4b05      	ldr	r3, [pc, #20]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	4a04      	ldr	r2, [pc, #16]	@ (8009040 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800902e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009032:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8009034:	7cbb      	ldrb	r3, [r7, #18]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3718      	adds	r7, #24
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	40021000 	.word	0x40021000

08009044 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b088      	sub	sp, #32
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009056:	d13e      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009058:	4bb6      	ldr	r3, [pc, #728]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800905a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009062:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800906a:	d028      	beq.n	80090be <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009072:	f200 86f4 	bhi.w	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800907c:	d005      	beq.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009084:	d00e      	beq.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8009086:	f000 beea 	b.w	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800908a:	4baa      	ldr	r3, [pc, #680]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800908c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009090:	f003 0302 	and.w	r3, r3, #2
 8009094:	2b02      	cmp	r3, #2
 8009096:	f040 86e4 	bne.w	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        frequency = LSE_VALUE;
 800909a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800909e:	61fb      	str	r3, [r7, #28]
      break;
 80090a0:	f000 bedf 	b.w	8009e62 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80090a4:	4ba3      	ldr	r3, [pc, #652]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80090a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	f040 86d9 	bne.w	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
          frequency = LSI_VALUE;
 80090b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80090b8:	61fb      	str	r3, [r7, #28]
      break;
 80090ba:	f000 bed4 	b.w	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80090be:	4b9d      	ldr	r3, [pc, #628]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090ca:	f040 86ce 	bne.w	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
        frequency = HSE_VALUE / 32U;
 80090ce:	4b9a      	ldr	r3, [pc, #616]	@ (8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80090d0:	61fb      	str	r3, [r7, #28]
      break;
 80090d2:	f000 beca 	b.w	8009e6a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090d6:	4b97      	ldr	r3, [pc, #604]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f003 0303 	and.w	r3, r3, #3
 80090de:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d036      	beq.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d840      	bhi.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d003      	beq.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d020      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80090f8:	e039      	b.n	800916e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80090fa:	4b8e      	ldr	r3, [pc, #568]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b02      	cmp	r3, #2
 8009104:	d116      	bne.n	8009134 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009106:	4b8b      	ldr	r3, [pc, #556]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8009112:	4b88      	ldr	r3, [pc, #544]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	091b      	lsrs	r3, r3, #4
 8009118:	f003 030f 	and.w	r3, r3, #15
 800911c:	e005      	b.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800911e:	4b85      	ldr	r3, [pc, #532]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	f003 030f 	and.w	r3, r3, #15
 800912a:	4a84      	ldr	r2, [pc, #528]	@ (800933c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800912c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009130:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009132:	e01f      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	61bb      	str	r3, [r7, #24]
      break;
 8009138:	e01c      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800913a:	4b7e      	ldr	r3, [pc, #504]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009146:	d102      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8009148:	4b7d      	ldr	r3, [pc, #500]	@ (8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800914a:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800914c:	e012      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	61bb      	str	r3, [r7, #24]
      break;
 8009152:	e00f      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009154:	4b77      	ldr	r3, [pc, #476]	@ (8009334 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800915c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009160:	d102      	bne.n	8009168 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8009162:	4b78      	ldr	r3, [pc, #480]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8009164:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8009166:	e005      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8009168:	2300      	movs	r3, #0
 800916a:	61bb      	str	r3, [r7, #24]
      break;
 800916c:	e002      	b.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800916e:	2300      	movs	r3, #0
 8009170:	61bb      	str	r3, [r7, #24]
      break;
 8009172:	bf00      	nop
    }

    switch(PeriphClk)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800917a:	f000 8606 	beq.w	8009d8a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009184:	f200 8673 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800918e:	f000 8469 	beq.w	8009a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009198:	f200 8669 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091a2:	f000 8531 	beq.w	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091ac:	f200 865f 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80091b6:	f000 8187 	beq.w	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80091c0:	f200 8655 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091ca:	f000 80cd 	beq.w	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80091d4:	f200 864b 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091de:	f000 8430 	beq.w	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091e8:	f200 8641 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091f2:	f000 83e4 	beq.w	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80091fc:	f200 8637 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009206:	f000 80af 	beq.w	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009210:	f200 862d 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800921a:	f000 809d 	beq.w	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009224:	f200 8623 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800922e:	f000 808b 	beq.w	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009238:	f200 8619 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009242:	f000 8554 	beq.w	8009cee <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800924c:	f200 860f 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009256:	f000 8500 	beq.w	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0xc16>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009260:	f200 8605 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800926a:	f000 84a1 	beq.w	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009274:	f200 85fb 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b80      	cmp	r3, #128	@ 0x80
 800927c:	f000 846c 	beq.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b80      	cmp	r3, #128	@ 0x80
 8009284:	f200 85f3 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b20      	cmp	r3, #32
 800928c:	d84c      	bhi.n	8009328 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 85ec 	beq.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3b01      	subs	r3, #1
 800929a:	2b1f      	cmp	r3, #31
 800929c:	f200 85e7 	bhi.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 80092a0:	a201      	add	r2, pc, #4	@ (adr r2, 80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80092a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a6:	bf00      	nop
 80092a8:	080096bd 	.word	0x080096bd
 80092ac:	0800972b 	.word	0x0800972b
 80092b0:	08009e6f 	.word	0x08009e6f
 80092b4:	080097bf 	.word	0x080097bf
 80092b8:	08009e6f 	.word	0x08009e6f
 80092bc:	08009e6f 	.word	0x08009e6f
 80092c0:	08009e6f 	.word	0x08009e6f
 80092c4:	08009837 	.word	0x08009837
 80092c8:	08009e6f 	.word	0x08009e6f
 80092cc:	08009e6f 	.word	0x08009e6f
 80092d0:	08009e6f 	.word	0x08009e6f
 80092d4:	08009e6f 	.word	0x08009e6f
 80092d8:	08009e6f 	.word	0x08009e6f
 80092dc:	08009e6f 	.word	0x08009e6f
 80092e0:	08009e6f 	.word	0x08009e6f
 80092e4:	080098bb 	.word	0x080098bb
 80092e8:	08009e6f 	.word	0x08009e6f
 80092ec:	08009e6f 	.word	0x08009e6f
 80092f0:	08009e6f 	.word	0x08009e6f
 80092f4:	08009e6f 	.word	0x08009e6f
 80092f8:	08009e6f 	.word	0x08009e6f
 80092fc:	08009e6f 	.word	0x08009e6f
 8009300:	08009e6f 	.word	0x08009e6f
 8009304:	08009e6f 	.word	0x08009e6f
 8009308:	08009e6f 	.word	0x08009e6f
 800930c:	08009e6f 	.word	0x08009e6f
 8009310:	08009e6f 	.word	0x08009e6f
 8009314:	08009e6f 	.word	0x08009e6f
 8009318:	08009e6f 	.word	0x08009e6f
 800931c:	08009e6f 	.word	0x08009e6f
 8009320:	08009e6f 	.word	0x08009e6f
 8009324:	0800993d 	.word	0x0800993d
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2b40      	cmp	r3, #64	@ 0x40
 800932c:	f000 83e8 	beq.w	8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8009330:	f000 bd9d 	b.w	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
 8009334:	40021000 	.word	0x40021000
 8009338:	0003d090 	.word	0x0003d090
 800933c:	08014fd8 	.word	0x08014fd8
 8009340:	00f42400 	.word	0x00f42400
 8009344:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009348:	69b9      	ldr	r1, [r7, #24]
 800934a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800934e:	f000 ff93 	bl	800a278 <RCCEx_GetSAIxPeriphCLKFreq>
 8009352:	61f8      	str	r0, [r7, #28]
      break;
 8009354:	f000 bd8e 	b.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8009358:	69b9      	ldr	r1, [r7, #24]
 800935a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800935e:	f000 ff8b 	bl	800a278 <RCCEx_GetSAIxPeriphCLKFreq>
 8009362:	61f8      	str	r0, [r7, #28]
      break;
 8009364:	f000 bd86 	b.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009368:	4b9a      	ldr	r3, [pc, #616]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800936a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800936e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800937a:	d015      	beq.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009382:	f200 8092 	bhi.w	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800938c:	d029      	beq.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009394:	f200 8089 	bhi.w	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d07b      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80093a4:	d04a      	beq.n	800943c <HAL_RCCEx_GetPeriphCLKFreq+0x3f8>
          break;
 80093a6:	e080      	b.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x466>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80093a8:	4b8a      	ldr	r3, [pc, #552]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 0302 	and.w	r3, r3, #2
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d17d      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80093b4:	4b87      	ldr	r3, [pc, #540]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x388>
 80093c0:	4b84      	ldr	r3, [pc, #528]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	091b      	lsrs	r3, r3, #4
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	e005      	b.n	80093d8 <HAL_RCCEx_GetPeriphCLKFreq+0x394>
 80093cc:	4b81      	ldr	r3, [pc, #516]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80093ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093d2:	0a1b      	lsrs	r3, r3, #8
 80093d4:	f003 030f 	and.w	r3, r3, #15
 80093d8:	4a7f      	ldr	r2, [pc, #508]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80093da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093de:	61fb      	str	r3, [r7, #28]
          break;
 80093e0:	e066      	b.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80093e2:	4b7c      	ldr	r3, [pc, #496]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093ee:	d162      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80093f0:	4b78      	ldr	r3, [pc, #480]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093fc:	d15b      	bne.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80093fe:	4b75      	ldr	r3, [pc, #468]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	0a1b      	lsrs	r3, r3, #8
 8009404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009408:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800940a:	69bb      	ldr	r3, [r7, #24]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	fb03 f202 	mul.w	r2, r3, r2
 8009412:	4b70      	ldr	r3, [pc, #448]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	091b      	lsrs	r3, r3, #4
 8009418:	f003 030f 	and.w	r3, r3, #15
 800941c:	3301      	adds	r3, #1
 800941e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009422:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009424:	4b6b      	ldr	r3, [pc, #428]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	0d5b      	lsrs	r3, r3, #21
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	3301      	adds	r3, #1
 8009430:	005b      	lsls	r3, r3, #1
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	fbb2 f3f3 	udiv	r3, r2, r3
 8009438:	61fb      	str	r3, [r7, #28]
          break;
 800943a:	e03c      	b.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800943c:	4b65      	ldr	r3, [pc, #404]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009444:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009448:	d138      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800944a:	4b62      	ldr	r3, [pc, #392]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009456:	d131      	bne.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009458:	4b5e      	ldr	r3, [pc, #376]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	0a1b      	lsrs	r3, r3, #8
 800945e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009462:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	fb03 f202 	mul.w	r2, r3, r2
 800946c:	4b59      	ldr	r3, [pc, #356]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	091b      	lsrs	r3, r3, #4
 8009472:	f003 030f 	and.w	r3, r3, #15
 8009476:	3301      	adds	r3, #1
 8009478:	fbb2 f3f3 	udiv	r3, r2, r3
 800947c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800947e:	4b55      	ldr	r3, [pc, #340]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	0d5b      	lsrs	r3, r3, #21
 8009484:	f003 0303 	and.w	r3, r3, #3
 8009488:	3301      	adds	r3, #1
 800948a:	005b      	lsls	r3, r3, #1
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009492:	61fb      	str	r3, [r7, #28]
          break;
 8009494:	e012      	b.n	80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x478>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009496:	4b4f      	ldr	r3, [pc, #316]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009498:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d10e      	bne.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
            frequency = HSI48_VALUE;
 80094a4:	4b4d      	ldr	r3, [pc, #308]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80094a6:	61fb      	str	r3, [r7, #28]
          break;
 80094a8:	e00b      	b.n	80094c2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
          break;
 80094aa:	bf00      	nop
 80094ac:	f000 bce2 	b.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80094b0:	bf00      	nop
 80094b2:	f000 bcdf 	b.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80094b6:	bf00      	nop
 80094b8:	f000 bcdc 	b.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80094bc:	bf00      	nop
 80094be:	f000 bcd9 	b.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80094c2:	bf00      	nop
        break;
 80094c4:	f000 bcd6 	b.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 80094c8:	4b42      	ldr	r3, [pc, #264]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80094ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80094d6:	d13d      	bne.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80094d8:	4b3e      	ldr	r3, [pc, #248]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094e4:	f040 84c5 	bne.w	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80094e8:	4b3a      	ldr	r3, [pc, #232]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094f4:	f040 84bd 	bne.w	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80094f8:	4b36      	ldr	r3, [pc, #216]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	0a1b      	lsrs	r3, r3, #8
 80094fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009502:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	fb03 f202 	mul.w	r2, r3, r2
 800950c:	4b31      	ldr	r3, [pc, #196]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	091b      	lsrs	r3, r3, #4
 8009512:	f003 030f 	and.w	r3, r3, #15
 8009516:	3301      	adds	r3, #1
 8009518:	fbb2 f3f3 	udiv	r3, r2, r3
 800951c:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800951e:	4b2d      	ldr	r3, [pc, #180]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009520:	68db      	ldr	r3, [r3, #12]
 8009522:	0edb      	lsrs	r3, r3, #27
 8009524:	f003 031f 	and.w	r3, r3, #31
 8009528:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8009530:	4b28      	ldr	r3, [pc, #160]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 17U;
 800953c:	2311      	movs	r3, #17
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	e001      	b.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
                pllp = 7U;
 8009542:	2307      	movs	r3, #7
 8009544:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8009546:	69ba      	ldr	r2, [r7, #24]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	fbb2 f3f3 	udiv	r3, r2, r3
 800954e:	61fb      	str	r3, [r7, #28]
      break;
 8009550:	f000 bc8f 	b.w	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8009554:	4b1f      	ldr	r3, [pc, #124]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800955a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009566:	d016      	beq.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x552>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800956e:	f200 809b 	bhi.w	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009578:	d032      	beq.n	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009580:	f200 8092 	bhi.w	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 8084 	beq.w	8009694 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009592:	d052      	beq.n	800963a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          break;
 8009594:	e088      	b.n	80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009596:	4b0f      	ldr	r3, [pc, #60]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b02      	cmp	r3, #2
 80095a0:	f040 8084 	bne.w	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80095a4:	4b0b      	ldr	r3, [pc, #44]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0308 	and.w	r3, r3, #8
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80095b0:	4b08      	ldr	r3, [pc, #32]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	091b      	lsrs	r3, r3, #4
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	e005      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
 80095bc:	4b05      	ldr	r3, [pc, #20]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80095be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095c2:	0a1b      	lsrs	r3, r3, #8
 80095c4:	f003 030f 	and.w	r3, r3, #15
 80095c8:	4a03      	ldr	r2, [pc, #12]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80095ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095ce:	61fb      	str	r3, [r7, #28]
          break;
 80095d0:	e06c      	b.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x668>
 80095d2:	bf00      	nop
 80095d4:	40021000 	.word	0x40021000
 80095d8:	08014fd8 	.word	0x08014fd8
 80095dc:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80095e0:	4ba5      	ldr	r3, [pc, #660]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095ec:	d160      	bne.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80095ee:	4ba2      	ldr	r3, [pc, #648]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095fa:	d159      	bne.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80095fc:	4b9e      	ldr	r3, [pc, #632]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	0a1b      	lsrs	r3, r3, #8
 8009602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009606:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	fb03 f202 	mul.w	r2, r3, r2
 8009610:	4b99      	ldr	r3, [pc, #612]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	091b      	lsrs	r3, r3, #4
 8009616:	f003 030f 	and.w	r3, r3, #15
 800961a:	3301      	adds	r3, #1
 800961c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009620:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009622:	4b95      	ldr	r3, [pc, #596]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	0d5b      	lsrs	r3, r3, #21
 8009628:	f003 0303 	and.w	r3, r3, #3
 800962c:	3301      	adds	r3, #1
 800962e:	005b      	lsls	r3, r3, #1
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	fbb2 f3f3 	udiv	r3, r2, r3
 8009636:	61fb      	str	r3, [r7, #28]
          break;
 8009638:	e03a      	b.n	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800963a:	4b8f      	ldr	r3, [pc, #572]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009642:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009646:	d135      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8009648:	4b8b      	ldr	r3, [pc, #556]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009650:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009654:	d12e      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8009656:	4b88      	ldr	r3, [pc, #544]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	0a1b      	lsrs	r3, r3, #8
 800965c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009660:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	fb03 f202 	mul.w	r2, r3, r2
 800966a:	4b83      	ldr	r3, [pc, #524]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	091b      	lsrs	r3, r3, #4
 8009670:	f003 030f 	and.w	r3, r3, #15
 8009674:	3301      	adds	r3, #1
 8009676:	fbb2 f3f3 	udiv	r3, r2, r3
 800967a:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 800967c:	4b7e      	ldr	r3, [pc, #504]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	0d5b      	lsrs	r3, r3, #21
 8009682:	f003 0303 	and.w	r3, r3, #3
 8009686:	3301      	adds	r3, #1
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009690:	61fb      	str	r3, [r7, #28]
          break;
 8009692:	e00f      	b.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8009694:	4b78      	ldr	r3, [pc, #480]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009696:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800969a:	f003 0302 	and.w	r3, r3, #2
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d10a      	bne.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
            frequency = HSI48_VALUE;
 80096a2:	4b76      	ldr	r3, [pc, #472]	@ (800987c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80096a4:	61fb      	str	r3, [r7, #28]
          break;
 80096a6:	e007      	b.n	80096b8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
          break;
 80096a8:	bf00      	nop
 80096aa:	e3e2      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80096ac:	bf00      	nop
 80096ae:	e3e0      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80096b0:	bf00      	nop
 80096b2:	e3de      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80096b4:	bf00      	nop
 80096b6:	e3dc      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
          break;
 80096b8:	bf00      	nop
      break;
 80096ba:	e3da      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80096bc:	4b6e      	ldr	r3, [pc, #440]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80096be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096c2:	f003 0303 	and.w	r3, r3, #3
 80096c6:	60fb      	str	r3, [r7, #12]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b03      	cmp	r3, #3
 80096cc:	d827      	bhi.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80096ce:	a201      	add	r2, pc, #4	@ (adr r2, 80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>)
 80096d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096d4:	080096e5 	.word	0x080096e5
 80096d8:	080096ed 	.word	0x080096ed
 80096dc:	080096f5 	.word	0x080096f5
 80096e0:	08009709 	.word	0x08009709
          frequency = HAL_RCC_GetPCLK2Freq();
 80096e4:	f7ff f8a8 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 80096e8:	61f8      	str	r0, [r7, #28]
          break;
 80096ea:	e01d      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          frequency = HAL_RCC_GetSysClockFreq();
 80096ec:	f7fe fff6 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 80096f0:	61f8      	str	r0, [r7, #28]
          break;
 80096f2:	e019      	b.n	8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80096f4:	4b60      	ldr	r3, [pc, #384]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009700:	d10f      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = HSI_VALUE;
 8009702:	4b5f      	ldr	r3, [pc, #380]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009704:	61fb      	str	r3, [r7, #28]
          break;
 8009706:	e00c      	b.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009708:	4b5b      	ldr	r3, [pc, #364]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800970a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800970e:	f003 0302 	and.w	r3, r3, #2
 8009712:	2b02      	cmp	r3, #2
 8009714:	d107      	bne.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
            frequency = LSE_VALUE;
 8009716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800971a:	61fb      	str	r3, [r7, #28]
          break;
 800971c:	e003      	b.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
          break;
 800971e:	bf00      	nop
 8009720:	e3a8      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009722:	bf00      	nop
 8009724:	e3a6      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009726:	bf00      	nop
        break;
 8009728:	e3a4      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800972a:	4b53      	ldr	r3, [pc, #332]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800972c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009730:	f003 030c 	and.w	r3, r3, #12
 8009734:	60fb      	str	r3, [r7, #12]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2b0c      	cmp	r3, #12
 800973a:	d83a      	bhi.n	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800973c:	a201      	add	r2, pc, #4	@ (adr r2, 8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x700>)
 800973e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009742:	bf00      	nop
 8009744:	08009779 	.word	0x08009779
 8009748:	080097b3 	.word	0x080097b3
 800974c:	080097b3 	.word	0x080097b3
 8009750:	080097b3 	.word	0x080097b3
 8009754:	08009781 	.word	0x08009781
 8009758:	080097b3 	.word	0x080097b3
 800975c:	080097b3 	.word	0x080097b3
 8009760:	080097b3 	.word	0x080097b3
 8009764:	08009789 	.word	0x08009789
 8009768:	080097b3 	.word	0x080097b3
 800976c:	080097b3 	.word	0x080097b3
 8009770:	080097b3 	.word	0x080097b3
 8009774:	0800979d 	.word	0x0800979d
          frequency = HAL_RCC_GetPCLK1Freq();
 8009778:	f7ff f848 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 800977c:	61f8      	str	r0, [r7, #28]
          break;
 800977e:	e01d      	b.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = HAL_RCC_GetSysClockFreq();
 8009780:	f7fe ffac 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009784:	61f8      	str	r0, [r7, #28]
          break;
 8009786:	e019      	b.n	80097bc <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009788:	4b3b      	ldr	r3, [pc, #236]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009790:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009794:	d10f      	bne.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = HSI_VALUE;
 8009796:	4b3a      	ldr	r3, [pc, #232]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009798:	61fb      	str	r3, [r7, #28]
          break;
 800979a:	e00c      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800979c:	4b36      	ldr	r3, [pc, #216]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800979e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097a2:	f003 0302 	and.w	r3, r3, #2
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d107      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
            frequency = LSE_VALUE;
 80097aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097ae:	61fb      	str	r3, [r7, #28]
          break;
 80097b0:	e003      	b.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
          break;
 80097b2:	bf00      	nop
 80097b4:	e35e      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80097b6:	bf00      	nop
 80097b8:	e35c      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80097ba:	bf00      	nop
        break;
 80097bc:	e35a      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80097be:	4b2e      	ldr	r3, [pc, #184]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80097c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097c4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b30      	cmp	r3, #48	@ 0x30
 80097ce:	d021      	beq.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b30      	cmp	r3, #48	@ 0x30
 80097d4:	d829      	bhi.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d011      	beq.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2b20      	cmp	r3, #32
 80097e0:	d823      	bhi.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d003      	beq.n	80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b10      	cmp	r3, #16
 80097ec:	d004      	beq.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80097ee:	e01c      	b.n	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80097f0:	f7ff f80c 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 80097f4:	61f8      	str	r0, [r7, #28]
          break;
 80097f6:	e01d      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80097f8:	f7fe ff70 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 80097fc:	61f8      	str	r0, [r7, #28]
          break;
 80097fe:	e019      	b.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009800:	4b1d      	ldr	r3, [pc, #116]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800980c:	d10f      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = HSI_VALUE;
 800980e:	4b1c      	ldr	r3, [pc, #112]	@ (8009880 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009810:	61fb      	str	r3, [r7, #28]
          break;
 8009812:	e00c      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009814:	4b18      	ldr	r3, [pc, #96]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800981a:	f003 0302 	and.w	r3, r3, #2
 800981e:	2b02      	cmp	r3, #2
 8009820:	d107      	bne.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
            frequency = LSE_VALUE;
 8009822:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009826:	61fb      	str	r3, [r7, #28]
          break;
 8009828:	e003      	b.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x7ee>
          break;
 800982a:	bf00      	nop
 800982c:	e322      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 800982e:	bf00      	nop
 8009830:	e320      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009832:	bf00      	nop
        break;
 8009834:	e31e      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009836:	4b10      	ldr	r3, [pc, #64]	@ (8009878 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800983c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2bc0      	cmp	r3, #192	@ 0xc0
 8009846:	d027      	beq.n	8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2bc0      	cmp	r3, #192	@ 0xc0
 800984c:	d82f      	bhi.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b80      	cmp	r3, #128	@ 0x80
 8009852:	d017      	beq.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b80      	cmp	r3, #128	@ 0x80
 8009858:	d829      	bhi.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d003      	beq.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x824>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b40      	cmp	r3, #64	@ 0x40
 8009864:	d004      	beq.n	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
          break;
 8009866:	e022      	b.n	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009868:	f7fe ffd0 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 800986c:	61f8      	str	r0, [r7, #28]
          break;
 800986e:	e023      	b.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
          frequency = HAL_RCC_GetSysClockFreq();
 8009870:	f7fe ff34 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009874:	61f8      	str	r0, [r7, #28]
          break;
 8009876:	e01f      	b.n	80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
 8009878:	40021000 	.word	0x40021000
 800987c:	02dc6c00 	.word	0x02dc6c00
 8009880:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009884:	4b9b      	ldr	r3, [pc, #620]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800988c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009890:	d10f      	bne.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = HSI_VALUE;
 8009892:	4b99      	ldr	r3, [pc, #612]	@ (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8009894:	61fb      	str	r3, [r7, #28]
          break;
 8009896:	e00c      	b.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009898:	4b96      	ldr	r3, [pc, #600]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800989a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800989e:	f003 0302 	and.w	r3, r3, #2
 80098a2:	2b02      	cmp	r3, #2
 80098a4:	d107      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
            frequency = LSE_VALUE;
 80098a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098aa:	61fb      	str	r3, [r7, #28]
          break;
 80098ac:	e003      	b.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
          break;
 80098ae:	bf00      	nop
 80098b0:	e2e0      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80098b2:	bf00      	nop
 80098b4:	e2de      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80098b6:	bf00      	nop
        break;
 80098b8:	e2dc      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80098ba:	4b8e      	ldr	r3, [pc, #568]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80098bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80098c4:	60fb      	str	r3, [r7, #12]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098cc:	d025      	beq.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098d4:	d82c      	bhi.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098dc:	d013      	beq.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e4:	d824      	bhi.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d004      	beq.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f2:	d004      	beq.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80098f4:	e01c      	b.n	8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 80098f6:	f7fe ff89 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 80098fa:	61f8      	str	r0, [r7, #28]
          break;
 80098fc:	e01d      	b.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80098fe:	f7fe feed 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009902:	61f8      	str	r0, [r7, #28]
          break;
 8009904:	e019      	b.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009906:	4b7b      	ldr	r3, [pc, #492]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800990e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009912:	d10f      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8009914:	4b78      	ldr	r3, [pc, #480]	@ (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8009916:	61fb      	str	r3, [r7, #28]
          break;
 8009918:	e00c      	b.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800991a:	4b76      	ldr	r3, [pc, #472]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800991c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009920:	f003 0302 	and.w	r3, r3, #2
 8009924:	2b02      	cmp	r3, #2
 8009926:	d107      	bne.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
            frequency = LSE_VALUE;
 8009928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800992c:	61fb      	str	r3, [r7, #28]
          break;
 800992e:	e003      	b.n	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
          break;
 8009930:	bf00      	nop
 8009932:	e29f      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009934:	bf00      	nop
 8009936:	e29d      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009938:	bf00      	nop
        break;
 800993a:	e29b      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800993c:	4b6d      	ldr	r3, [pc, #436]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800993e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009942:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800994e:	d025      	beq.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009956:	d82c      	bhi.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800995e:	d013      	beq.n	8009988 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009966:	d824      	bhi.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d004      	beq.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009974:	d004      	beq.n	8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
          break;
 8009976:	e01c      	b.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009978:	f7fe ff48 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 800997c:	61f8      	str	r0, [r7, #28]
          break;
 800997e:	e01d      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          frequency = HAL_RCC_GetSysClockFreq();
 8009980:	f7fe feac 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009984:	61f8      	str	r0, [r7, #28]
          break;
 8009986:	e019      	b.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009988:	4b5a      	ldr	r3, [pc, #360]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009994:	d10f      	bne.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = HSI_VALUE;
 8009996:	4b58      	ldr	r3, [pc, #352]	@ (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8009998:	61fb      	str	r3, [r7, #28]
          break;
 800999a:	e00c      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800999c:	4b55      	ldr	r3, [pc, #340]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a2:	f003 0302 	and.w	r3, r3, #2
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d107      	bne.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x976>
            frequency = LSE_VALUE;
 80099aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099ae:	61fb      	str	r3, [r7, #28]
          break;
 80099b0:	e003      	b.n	80099ba <HAL_RCCEx_GetPeriphCLKFreq+0x976>
          break;
 80099b2:	bf00      	nop
 80099b4:	e25e      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80099b6:	bf00      	nop
 80099b8:	e25c      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 80099ba:	bf00      	nop
        break;
 80099bc:	e25a      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80099be:	4b4d      	ldr	r3, [pc, #308]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80099c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099d0:	d007      	beq.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80099d8:	d12f      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          frequency = HAL_RCC_GetSysClockFreq();
 80099da:	f7fe fe7f 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 80099de:	61f8      	str	r0, [r7, #28]
          break;
 80099e0:	e02e      	b.n	8009a40 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80099e2:	4b44      	ldr	r3, [pc, #272]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80099ee:	d126      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 80099f0:	4b40      	ldr	r3, [pc, #256]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d020      	beq.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80099fc:	4b3d      	ldr	r3, [pc, #244]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	0a1b      	lsrs	r3, r3, #8
 8009a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a06:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	fb03 f202 	mul.w	r2, r3, r2
 8009a10:	4b38      	ldr	r3, [pc, #224]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	091b      	lsrs	r3, r3, #4
 8009a16:	f003 030f 	and.w	r3, r3, #15
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a20:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8009a22:	4b34      	ldr	r3, [pc, #208]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	0e5b      	lsrs	r3, r3, #25
 8009a28:	f003 0303 	and.w	r3, r3, #3
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	005b      	lsls	r3, r3, #1
 8009a30:	69ba      	ldr	r2, [r7, #24]
 8009a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a36:	61fb      	str	r3, [r7, #28]
          break;
 8009a38:	e001      	b.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
          break;
 8009a3a:	bf00      	nop
 8009a3c:	e21a      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009a3e:	bf00      	nop
        break;
 8009a40:	e218      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8009a42:	4b2c      	ldr	r3, [pc, #176]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a48:	f003 0304 	and.w	r3, r3, #4
 8009a4c:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d103      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0xa18>
          frequency = HAL_RCC_GetPCLK2Freq();
 8009a54:	f7fe fef0 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 8009a58:	61f8      	str	r0, [r7, #28]
        break;
 8009a5a:	e20b      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          frequency = HAL_RCC_GetSysClockFreq();
 8009a5c:	f7fe fe3e 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009a60:	61f8      	str	r0, [r7, #28]
        break;
 8009a62:	e207      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8009a64:	4b23      	ldr	r3, [pc, #140]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a6a:	f003 0318 	and.w	r3, r3, #24
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2b10      	cmp	r3, #16
 8009a74:	d010      	beq.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0xa54>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	d834      	bhi.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d003      	beq.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2b08      	cmp	r3, #8
 8009a86:	d024      	beq.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
          break;
 8009a88:	e02d      	b.n	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8009a8a:	69b9      	ldr	r1, [r7, #24]
 8009a8c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009a90:	f000 fbf2 	bl	800a278 <RCCEx_GetSAIxPeriphCLKFreq>
 8009a94:	61f8      	str	r0, [r7, #28]
          break;
 8009a96:	e02b      	b.n	8009af0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009a98:	4b16      	ldr	r3, [pc, #88]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 0302 	and.w	r3, r3, #2
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d122      	bne.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009aa4:	4b13      	ldr	r3, [pc, #76]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0308 	and.w	r3, r3, #8
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8009ab0:	4b10      	ldr	r3, [pc, #64]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	091b      	lsrs	r3, r3, #4
 8009ab6:	f003 030f 	and.w	r3, r3, #15
 8009aba:	e005      	b.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xa84>
 8009abc:	4b0d      	ldr	r3, [pc, #52]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ac2:	0a1b      	lsrs	r3, r3, #8
 8009ac4:	f003 030f 	and.w	r3, r3, #15
 8009ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8009aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ace:	61fb      	str	r3, [r7, #28]
          break;
 8009ad0:	e00b      	b.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009ad2:	4b08      	ldr	r3, [pc, #32]	@ (8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ade:	d106      	bne.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8009ae0:	4b05      	ldr	r3, [pc, #20]	@ (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 8009ae2:	61fb      	str	r3, [r7, #28]
          break;
 8009ae4:	e003      	b.n	8009aee <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
          break;
 8009ae6:	bf00      	nop
 8009ae8:	e1c4      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009aea:	bf00      	nop
 8009aec:	e1c2      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009aee:	bf00      	nop
        break;
 8009af0:	e1c0      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8009af2:	bf00      	nop
 8009af4:	40021000 	.word	0x40021000
 8009af8:	00f42400 	.word	0x00f42400
 8009afc:	08014fd8 	.word	0x08014fd8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009b00:	4b96      	ldr	r3, [pc, #600]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b06:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b12:	d013      	beq.n	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b1a:	d819      	bhi.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d004      	beq.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b28:	d004      	beq.n	8009b34 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>
          break;
 8009b2a:	e011      	b.n	8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009b2c:	f7fe fe6e 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 8009b30:	61f8      	str	r0, [r7, #28]
          break;
 8009b32:	e010      	b.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          frequency = HAL_RCC_GetSysClockFreq();
 8009b34:	f7fe fdd2 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009b38:	61f8      	str	r0, [r7, #28]
          break;
 8009b3a:	e00c      	b.n	8009b56 <HAL_RCCEx_GetPeriphCLKFreq+0xb12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b3c:	4b87      	ldr	r3, [pc, #540]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b48:	d104      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
            frequency = HSI_VALUE;
 8009b4a:	4b85      	ldr	r3, [pc, #532]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009b4c:	61fb      	str	r3, [r7, #28]
          break;
 8009b4e:	e001      	b.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
          break;
 8009b50:	bf00      	nop
 8009b52:	e18f      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009b54:	bf00      	nop
        break;
 8009b56:	e18d      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009b58:	4b80      	ldr	r3, [pc, #512]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b6a:	d013      	beq.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b72:	d819      	bhi.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d004      	beq.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009b80:	d004      	beq.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          break;
 8009b82:	e011      	b.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009b84:	f7fe fe42 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 8009b88:	61f8      	str	r0, [r7, #28]
          break;
 8009b8a:	e010      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          frequency = HAL_RCC_GetSysClockFreq();
 8009b8c:	f7fe fda6 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009b90:	61f8      	str	r0, [r7, #28]
          break;
 8009b92:	e00c      	b.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0xb6a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b94:	4b71      	ldr	r3, [pc, #452]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ba0:	d104      	bne.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
            frequency = HSI_VALUE;
 8009ba2:	4b6f      	ldr	r3, [pc, #444]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009ba4:	61fb      	str	r3, [r7, #28]
          break;
 8009ba6:	e001      	b.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          break;
 8009ba8:	bf00      	nop
 8009baa:	e163      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009bac:	bf00      	nop
        break;
 8009bae:	e161      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bc2:	d013      	beq.n	8009bec <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bca:	d819      	bhi.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d004      	beq.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0xb98>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bd8:	d004      	beq.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
          break;
 8009bda:	e011      	b.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009bdc:	f7fe fe16 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 8009be0:	61f8      	str	r0, [r7, #28]
          break;
 8009be2:	e010      	b.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          frequency = HAL_RCC_GetSysClockFreq();
 8009be4:	f7fe fd7a 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009be8:	61f8      	str	r0, [r7, #28]
          break;
 8009bea:	e00c      	b.n	8009c06 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009bec:	4b5b      	ldr	r3, [pc, #364]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bf8:	d104      	bne.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
            frequency = HSI_VALUE;
 8009bfa:	4b59      	ldr	r3, [pc, #356]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009bfc:	61fb      	str	r3, [r7, #28]
          break;
 8009bfe:	e001      	b.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
          break;
 8009c00:	bf00      	nop
 8009c02:	e137      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009c04:	bf00      	nop
        break;
 8009c06:	e135      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009c08:	4b54      	ldr	r3, [pc, #336]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c0e:	f003 0303 	and.w	r3, r3, #3
 8009c12:	60fb      	str	r3, [r7, #12]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d011      	beq.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d818      	bhi.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d004      	beq.n	8009c36 <HAL_RCCEx_GetPeriphCLKFreq+0xbf2>
          break;
 8009c2c:	e011      	b.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009c2e:	f7fe fded 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 8009c32:	61f8      	str	r0, [r7, #28]
          break;
 8009c34:	e010      	b.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          frequency = HAL_RCC_GetSysClockFreq();
 8009c36:	f7fe fd51 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009c3a:	61f8      	str	r0, [r7, #28]
          break;
 8009c3c:	e00c      	b.n	8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0xc14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c3e:	4b47      	ldr	r3, [pc, #284]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c4a:	d104      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
            frequency = HSI_VALUE;
 8009c4c:	4b44      	ldr	r3, [pc, #272]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009c4e:	61fb      	str	r3, [r7, #28]
          break;
 8009c50:	e001      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
          break;
 8009c52:	bf00      	nop
 8009c54:	e10e      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009c56:	bf00      	nop
        break;
 8009c58:	e10c      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009c5a:	4b40      	ldr	r3, [pc, #256]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c60:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009c6c:	d02c      	beq.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009c74:	d833      	bhi.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009c7c:	d01a      	beq.n	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc70>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009c84:	d82b      	bhi.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0xc52>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009c92:	d004      	beq.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
          break;
 8009c94:	e023      	b.n	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009c96:	f7fe fdb9 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 8009c9a:	61f8      	str	r0, [r7, #28]
          break;
 8009c9c:	e026      	b.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0xca8>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ca4:	f003 0302 	and.w	r3, r3, #2
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d11a      	bne.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
              frequency = LSI_VALUE;
 8009cac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009cb0:	61fb      	str	r3, [r7, #28]
          break;
 8009cb2:	e016      	b.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009cb4:	4b29      	ldr	r3, [pc, #164]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009cc0:	d111      	bne.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = HSI_VALUE;
 8009cc2:	4b27      	ldr	r3, [pc, #156]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009cc4:	61fb      	str	r3, [r7, #28]
          break;
 8009cc6:	e00e      	b.n	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009cc8:	4b24      	ldr	r3, [pc, #144]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d109      	bne.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
            frequency = LSE_VALUE;
 8009cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cda:	61fb      	str	r3, [r7, #28]
          break;
 8009cdc:	e005      	b.n	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
          break;
 8009cde:	bf00      	nop
 8009ce0:	e0c8      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009ce2:	bf00      	nop
 8009ce4:	e0c6      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009ce6:	bf00      	nop
 8009ce8:	e0c4      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009cea:	bf00      	nop
        break;
 8009cec:	e0c2      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009cee:	4b1b      	ldr	r3, [pc, #108]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cf4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009cf8:	60fb      	str	r3, [r7, #12]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d00:	d030      	beq.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d08:	d837      	bhi.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d10:	d01a      	beq.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd04>
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d18:	d82f      	bhi.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d004      	beq.n	8009d2a <HAL_RCCEx_GetPeriphCLKFreq+0xce6>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d26:	d004      	beq.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
          break;
 8009d28:	e027      	b.n	8009d7a <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          frequency = HAL_RCC_GetPCLK1Freq();
 8009d2a:	f7fe fd6f 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 8009d2e:	61f8      	str	r0, [r7, #28]
          break;
 8009d30:	e02a      	b.n	8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8009d32:	4b0a      	ldr	r3, [pc, #40]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d38:	f003 0302 	and.w	r3, r3, #2
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d11e      	bne.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
              frequency = LSI_VALUE;
 8009d40:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009d44:	61fb      	str	r3, [r7, #28]
          break;
 8009d46:	e01a      	b.n	8009d7e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009d48:	4b04      	ldr	r3, [pc, #16]	@ (8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d54:	d115      	bne.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = HSI_VALUE;
 8009d56:	4b02      	ldr	r3, [pc, #8]	@ (8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>)
 8009d58:	61fb      	str	r3, [r7, #28]
          break;
 8009d5a:	e012      	b.n	8009d82 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8009d5c:	40021000 	.word	0x40021000
 8009d60:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009d64:	4b46      	ldr	r3, [pc, #280]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d109      	bne.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
            frequency = LSE_VALUE;
 8009d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d76:	61fb      	str	r3, [r7, #28]
          break;
 8009d78:	e005      	b.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
          break;
 8009d7a:	bf00      	nop
 8009d7c:	e07a      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009d7e:	bf00      	nop
 8009d80:	e078      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009d82:	bf00      	nop
 8009d84:	e076      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009d86:	bf00      	nop
        break;
 8009d88:	e074      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d90:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009d94:	60fb      	str	r3, [r7, #12]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d9c:	d02c      	beq.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009da4:	d855      	bhi.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009db2:	d004      	beq.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0xd7a>
          break;
 8009db4:	e04d      	b.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          frequency = HAL_RCC_GetSysClockFreq();
 8009db6:	f7fe fc91 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 8009dba:	61f8      	str	r0, [r7, #28]
          break;
 8009dbc:	e04e      	b.n	8009e5c <HAL_RCCEx_GetPeriphCLKFreq+0xe18>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8009dbe:	4b30      	ldr	r3, [pc, #192]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d145      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8009dca:	4b2d      	ldr	r3, [pc, #180]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f003 0308 	and.w	r3, r3, #8
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d005      	beq.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8009dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	091b      	lsrs	r3, r3, #4
 8009ddc:	f003 030f 	and.w	r3, r3, #15
 8009de0:	e005      	b.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8009de2:	4b27      	ldr	r3, [pc, #156]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009de8:	0a1b      	lsrs	r3, r3, #8
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	4a25      	ldr	r2, [pc, #148]	@ (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe40>)
 8009df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009df4:	61fb      	str	r3, [r7, #28]
          break;
 8009df6:	e02e      	b.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8009df8:	4b21      	ldr	r3, [pc, #132]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e04:	d129      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8009e06:	4b1e      	ldr	r3, [pc, #120]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e12:	d122      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8009e14:	4b1a      	ldr	r3, [pc, #104]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	0a1b      	lsrs	r3, r3, #8
 8009e1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e1e:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	fb03 f202 	mul.w	r2, r3, r2
 8009e28:	4b15      	ldr	r3, [pc, #84]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	091b      	lsrs	r3, r3, #4
 8009e2e:	f003 030f 	and.w	r3, r3, #15
 8009e32:	3301      	adds	r3, #1
 8009e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e38:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8009e3a:	4b11      	ldr	r3, [pc, #68]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	0d5b      	lsrs	r3, r3, #21
 8009e40:	f003 0303 	and.w	r3, r3, #3
 8009e44:	3301      	adds	r3, #1
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e4e:	61fb      	str	r3, [r7, #28]
          break;
 8009e50:	e003      	b.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          break;
 8009e52:	bf00      	nop
 8009e54:	e00e      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009e56:	bf00      	nop
 8009e58:	e00c      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
          break;
 8009e5a:	bf00      	nop
        break;
 8009e5c:	e00a      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009e5e:	bf00      	nop
 8009e60:	e008      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009e62:	bf00      	nop
 8009e64:	e006      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009e66:	bf00      	nop
 8009e68:	e004      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009e6a:	bf00      	nop
 8009e6c:	e002      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009e6e:	bf00      	nop
 8009e70:	e000      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
      break;
 8009e72:	bf00      	nop
    }
  }

  return(frequency);
 8009e74:	69fb      	ldr	r3, [r7, #28]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	40021000 	.word	0x40021000
 8009e84:	08014fd8 	.word	0x08014fd8

08009e88 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8009e8c:	4b05      	ldr	r3, [pc, #20]	@ (8009ea4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a04      	ldr	r2, [pc, #16]	@ (8009ea4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8009e92:	f043 0304 	orr.w	r3, r3, #4
 8009e96:	6013      	str	r3, [r2, #0]
}
 8009e98:	bf00      	nop
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	40021000 	.word	0x40021000

08009ea8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8009eb6:	4b72      	ldr	r3, [pc, #456]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f003 0303 	and.w	r3, r3, #3
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00e      	beq.n	8009ee0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009ec2:	4b6f      	ldr	r3, [pc, #444]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f003 0203 	and.w	r2, r3, #3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d103      	bne.n	8009eda <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
       ||
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d142      	bne.n	8009f60 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8009eda:	2301      	movs	r3, #1
 8009edc:	73fb      	strb	r3, [r7, #15]
 8009ede:	e03f      	b.n	8009f60 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d018      	beq.n	8009f1a <RCCEx_PLLSAI1_Config+0x72>
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d825      	bhi.n	8009f38 <RCCEx_PLLSAI1_Config+0x90>
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d002      	beq.n	8009ef6 <RCCEx_PLLSAI1_Config+0x4e>
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d009      	beq.n	8009f08 <RCCEx_PLLSAI1_Config+0x60>
 8009ef4:	e020      	b.n	8009f38 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009ef6:	4b62      	ldr	r3, [pc, #392]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d11d      	bne.n	8009f3e <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f06:	e01a      	b.n	8009f3e <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009f08:	4b5d      	ldr	r3, [pc, #372]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d116      	bne.n	8009f42 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f18:	e013      	b.n	8009f42 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009f1a:	4b59      	ldr	r3, [pc, #356]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10f      	bne.n	8009f46 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009f26:	4b56      	ldr	r3, [pc, #344]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d109      	bne.n	8009f46 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f36:	e006      	b.n	8009f46 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f3c:	e004      	b.n	8009f48 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009f3e:	bf00      	nop
 8009f40:	e002      	b.n	8009f48 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009f42:	bf00      	nop
 8009f44:	e000      	b.n	8009f48 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8009f46:	bf00      	nop
    }

    if(status == HAL_OK)
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d108      	bne.n	8009f60 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8009f4e:	4b4c      	ldr	r3, [pc, #304]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	f023 0203 	bic.w	r2, r3, #3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4949      	ldr	r1, [pc, #292]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	f040 8086 	bne.w	800a074 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8009f68:	4b45      	ldr	r3, [pc, #276]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a44      	ldr	r2, [pc, #272]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f74:	f7fb fb56 	bl	8005624 <HAL_GetTick>
 8009f78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009f7a:	e009      	b.n	8009f90 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f7c:	f7fb fb52 	bl	8005624 <HAL_GetTick>
 8009f80:	4602      	mov	r2, r0
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d902      	bls.n	8009f90 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	73fb      	strb	r3, [r7, #15]
        break;
 8009f8e:	e005      	b.n	8009f9c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8009f90:	4b3b      	ldr	r3, [pc, #236]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d1ef      	bne.n	8009f7c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d168      	bne.n	800a074 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d113      	bne.n	8009fd0 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009fa8:	4b35      	ldr	r3, [pc, #212]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	4b35      	ldr	r3, [pc, #212]	@ (800a084 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009fae:	4013      	ands	r3, r2
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	6892      	ldr	r2, [r2, #8]
 8009fb4:	0211      	lsls	r1, r2, #8
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	68d2      	ldr	r2, [r2, #12]
 8009fba:	06d2      	lsls	r2, r2, #27
 8009fbc:	4311      	orrs	r1, r2
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	6852      	ldr	r2, [r2, #4]
 8009fc2:	3a01      	subs	r2, #1
 8009fc4:	0112      	lsls	r2, r2, #4
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	492d      	ldr	r1, [pc, #180]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	610b      	str	r3, [r1, #16]
 8009fce:	e02d      	b.n	800a02c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d115      	bne.n	800a002 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009fd6:	4b2a      	ldr	r3, [pc, #168]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009fd8:	691a      	ldr	r2, [r3, #16]
 8009fda:	4b2b      	ldr	r3, [pc, #172]	@ (800a088 <RCCEx_PLLSAI1_Config+0x1e0>)
 8009fdc:	4013      	ands	r3, r2
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6892      	ldr	r2, [r2, #8]
 8009fe2:	0211      	lsls	r1, r2, #8
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	6912      	ldr	r2, [r2, #16]
 8009fe8:	0852      	lsrs	r2, r2, #1
 8009fea:	3a01      	subs	r2, #1
 8009fec:	0552      	lsls	r2, r2, #21
 8009fee:	4311      	orrs	r1, r2
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	6852      	ldr	r2, [r2, #4]
 8009ff4:	3a01      	subs	r2, #1
 8009ff6:	0112      	lsls	r2, r2, #4
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	4921      	ldr	r1, [pc, #132]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	610b      	str	r3, [r1, #16]
 800a000:	e014      	b.n	800a02c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a002:	4b1f      	ldr	r3, [pc, #124]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a004:	691a      	ldr	r2, [r3, #16]
 800a006:	4b21      	ldr	r3, [pc, #132]	@ (800a08c <RCCEx_PLLSAI1_Config+0x1e4>)
 800a008:	4013      	ands	r3, r2
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	6892      	ldr	r2, [r2, #8]
 800a00e:	0211      	lsls	r1, r2, #8
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	6952      	ldr	r2, [r2, #20]
 800a014:	0852      	lsrs	r2, r2, #1
 800a016:	3a01      	subs	r2, #1
 800a018:	0652      	lsls	r2, r2, #25
 800a01a:	4311      	orrs	r1, r2
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	6852      	ldr	r2, [r2, #4]
 800a020:	3a01      	subs	r2, #1
 800a022:	0112      	lsls	r2, r2, #4
 800a024:	430a      	orrs	r2, r1
 800a026:	4916      	ldr	r1, [pc, #88]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a02c:	4b14      	ldr	r3, [pc, #80]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a13      	ldr	r2, [pc, #76]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a032:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a036:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a038:	f7fb faf4 	bl	8005624 <HAL_GetTick>
 800a03c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a03e:	e009      	b.n	800a054 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a040:	f7fb faf0 	bl	8005624 <HAL_GetTick>
 800a044:	4602      	mov	r2, r0
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d902      	bls.n	800a054 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a04e:	2303      	movs	r3, #3
 800a050:	73fb      	strb	r3, [r7, #15]
          break;
 800a052:	e005      	b.n	800a060 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a054:	4b0a      	ldr	r3, [pc, #40]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0ef      	beq.n	800a040 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a060:	7bfb      	ldrb	r3, [r7, #15]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d106      	bne.n	800a074 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a066:	4b06      	ldr	r3, [pc, #24]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a068:	691a      	ldr	r2, [r3, #16]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
 800a06e:	4904      	ldr	r1, [pc, #16]	@ (800a080 <RCCEx_PLLSAI1_Config+0x1d8>)
 800a070:	4313      	orrs	r3, r2
 800a072:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a074:	7bfb      	ldrb	r3, [r7, #15]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	40021000 	.word	0x40021000
 800a084:	07ff800f 	.word	0x07ff800f
 800a088:	ff9f800f 	.word	0xff9f800f
 800a08c:	f9ff800f 	.word	0xf9ff800f

0800a090 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a09e:	4b72      	ldr	r3, [pc, #456]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00e      	beq.n	800a0c8 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800a0aa:	4b6f      	ldr	r3, [pc, #444]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f003 0203 	and.w	r2, r3, #3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d103      	bne.n	800a0c2 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
       ||
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d142      	bne.n	800a148 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	73fb      	strb	r3, [r7, #15]
 800a0c6:	e03f      	b.n	800a148 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d018      	beq.n	800a102 <RCCEx_PLLSAI2_Config+0x72>
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d825      	bhi.n	800a120 <RCCEx_PLLSAI2_Config+0x90>
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d002      	beq.n	800a0de <RCCEx_PLLSAI2_Config+0x4e>
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d009      	beq.n	800a0f0 <RCCEx_PLLSAI2_Config+0x60>
 800a0dc:	e020      	b.n	800a120 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a0de:	4b62      	ldr	r3, [pc, #392]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d11d      	bne.n	800a126 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a0ee:	e01a      	b.n	800a126 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a0f0:	4b5d      	ldr	r3, [pc, #372]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d116      	bne.n	800a12a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a100:	e013      	b.n	800a12a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a102:	4b59      	ldr	r3, [pc, #356]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10f      	bne.n	800a12e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a10e:	4b56      	ldr	r3, [pc, #344]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d109      	bne.n	800a12e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a11e:	e006      	b.n	800a12e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	73fb      	strb	r3, [r7, #15]
      break;
 800a124:	e004      	b.n	800a130 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a126:	bf00      	nop
 800a128:	e002      	b.n	800a130 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a12a:	bf00      	nop
 800a12c:	e000      	b.n	800a130 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800a12e:	bf00      	nop
    }

    if(status == HAL_OK)
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d108      	bne.n	800a148 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800a136:	4b4c      	ldr	r3, [pc, #304]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	f023 0203 	bic.w	r2, r3, #3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4949      	ldr	r1, [pc, #292]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a144:	4313      	orrs	r3, r2
 800a146:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800a148:	7bfb      	ldrb	r3, [r7, #15]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f040 8086 	bne.w	800a25c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800a150:	4b45      	ldr	r3, [pc, #276]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a44      	ldr	r2, [pc, #272]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a156:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a15a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a15c:	f7fb fa62 	bl	8005624 <HAL_GetTick>
 800a160:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a162:	e009      	b.n	800a178 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a164:	f7fb fa5e 	bl	8005624 <HAL_GetTick>
 800a168:	4602      	mov	r2, r0
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	1ad3      	subs	r3, r2, r3
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d902      	bls.n	800a178 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	73fb      	strb	r3, [r7, #15]
        break;
 800a176:	e005      	b.n	800a184 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800a178:	4b3b      	ldr	r3, [pc, #236]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d1ef      	bne.n	800a164 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d168      	bne.n	800a25c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d113      	bne.n	800a1b8 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a190:	4b35      	ldr	r3, [pc, #212]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a192:	695a      	ldr	r2, [r3, #20]
 800a194:	4b35      	ldr	r3, [pc, #212]	@ (800a26c <RCCEx_PLLSAI2_Config+0x1dc>)
 800a196:	4013      	ands	r3, r2
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6892      	ldr	r2, [r2, #8]
 800a19c:	0211      	lsls	r1, r2, #8
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	68d2      	ldr	r2, [r2, #12]
 800a1a2:	06d2      	lsls	r2, r2, #27
 800a1a4:	4311      	orrs	r1, r2
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	6852      	ldr	r2, [r2, #4]
 800a1aa:	3a01      	subs	r2, #1
 800a1ac:	0112      	lsls	r2, r2, #4
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	492d      	ldr	r1, [pc, #180]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	614b      	str	r3, [r1, #20]
 800a1b6:	e02d      	b.n	800a214 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d115      	bne.n	800a1ea <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a1be:	4b2a      	ldr	r3, [pc, #168]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a1c0:	695a      	ldr	r2, [r3, #20]
 800a1c2:	4b2b      	ldr	r3, [pc, #172]	@ (800a270 <RCCEx_PLLSAI2_Config+0x1e0>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	6892      	ldr	r2, [r2, #8]
 800a1ca:	0211      	lsls	r1, r2, #8
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	6912      	ldr	r2, [r2, #16]
 800a1d0:	0852      	lsrs	r2, r2, #1
 800a1d2:	3a01      	subs	r2, #1
 800a1d4:	0552      	lsls	r2, r2, #21
 800a1d6:	4311      	orrs	r1, r2
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	6852      	ldr	r2, [r2, #4]
 800a1dc:	3a01      	subs	r2, #1
 800a1de:	0112      	lsls	r2, r2, #4
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	4921      	ldr	r1, [pc, #132]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	614b      	str	r3, [r1, #20]
 800a1e8:	e014      	b.n	800a214 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800a1ea:	4b1f      	ldr	r3, [pc, #124]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a1ec:	695a      	ldr	r2, [r3, #20]
 800a1ee:	4b21      	ldr	r3, [pc, #132]	@ (800a274 <RCCEx_PLLSAI2_Config+0x1e4>)
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	687a      	ldr	r2, [r7, #4]
 800a1f4:	6892      	ldr	r2, [r2, #8]
 800a1f6:	0211      	lsls	r1, r2, #8
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	6952      	ldr	r2, [r2, #20]
 800a1fc:	0852      	lsrs	r2, r2, #1
 800a1fe:	3a01      	subs	r2, #1
 800a200:	0652      	lsls	r2, r2, #25
 800a202:	4311      	orrs	r1, r2
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6852      	ldr	r2, [r2, #4]
 800a208:	3a01      	subs	r2, #1
 800a20a:	0112      	lsls	r2, r2, #4
 800a20c:	430a      	orrs	r2, r1
 800a20e:	4916      	ldr	r1, [pc, #88]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a210:	4313      	orrs	r3, r2
 800a212:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800a214:	4b14      	ldr	r3, [pc, #80]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a13      	ldr	r2, [pc, #76]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a21a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a21e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a220:	f7fb fa00 	bl	8005624 <HAL_GetTick>
 800a224:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a226:	e009      	b.n	800a23c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800a228:	f7fb f9fc 	bl	8005624 <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	2b02      	cmp	r3, #2
 800a234:	d902      	bls.n	800a23c <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800a236:	2303      	movs	r3, #3
 800a238:	73fb      	strb	r3, [r7, #15]
          break;
 800a23a:	e005      	b.n	800a248 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800a23c:	4b0a      	ldr	r3, [pc, #40]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a244:	2b00      	cmp	r3, #0
 800a246:	d0ef      	beq.n	800a228 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d106      	bne.n	800a25c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800a24e:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a250:	695a      	ldr	r2, [r3, #20]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	699b      	ldr	r3, [r3, #24]
 800a256:	4904      	ldr	r1, [pc, #16]	@ (800a268 <RCCEx_PLLSAI2_Config+0x1d8>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800a25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	40021000 	.word	0x40021000
 800a26c:	07ff800f 	.word	0x07ff800f
 800a270:	ff9f800f 	.word	0xff9f800f
 800a274:	f9ff800f 	.word	0xf9ff800f

0800a278 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800a278:	b480      	push	{r7}
 800a27a:	b089      	sub	sp, #36	@ 0x24
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800a282:	2300      	movs	r3, #0
 800a284:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800a286:	2300      	movs	r3, #0
 800a288:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a294:	d10b      	bne.n	800a2ae <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a296:	4b7e      	ldr	r3, [pc, #504]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a298:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a29c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a2a0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	2b60      	cmp	r3, #96	@ 0x60
 800a2a6:	d112      	bne.n	800a2ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a2a8:	4b7a      	ldr	r3, [pc, #488]	@ (800a494 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	e00f      	b.n	800a2ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2b4:	d10b      	bne.n	800a2ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a2b6:	4b76      	ldr	r3, [pc, #472]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a2b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a2bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a2c0:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2c8:	d101      	bne.n	800a2ce <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800a2ca:	4b72      	ldr	r3, [pc, #456]	@ (800a494 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 800a2cc:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f040 80d6 	bne.w	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	2b40      	cmp	r3, #64	@ 0x40
 800a2de:	d003      	beq.n	800a2e8 <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e6:	d13b      	bne.n	800a360 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a2e8:	4b69      	ldr	r3, [pc, #420]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a2f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2f4:	f040 80c4 	bne.w	800a480 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 800a2f8:	4b65      	ldr	r3, [pc, #404]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a300:	2b00      	cmp	r3, #0
 800a302:	f000 80bd 	beq.w	800a480 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800a306:	4b62      	ldr	r3, [pc, #392]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	091b      	lsrs	r3, r3, #4
 800a30c:	f003 030f 	and.w	r3, r3, #15
 800a310:	3301      	adds	r3, #1
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	fbb2 f3f3 	udiv	r3, r2, r3
 800a318:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800a31a:	4b5d      	ldr	r3, [pc, #372]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	0a1b      	lsrs	r3, r3, #8
 800a320:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a324:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800a326:	4b5a      	ldr	r3, [pc, #360]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	0edb      	lsrs	r3, r3, #27
 800a32c:	f003 031f 	and.w	r3, r3, #31
 800a330:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10a      	bne.n	800a34e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800a338:	4b55      	ldr	r3, [pc, #340]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 800a344:	2311      	movs	r3, #17
 800a346:	617b      	str	r3, [r7, #20]
 800a348:	e001      	b.n	800a34e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 800a34a:	2307      	movs	r3, #7
 800a34c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	68fa      	ldr	r2, [r7, #12]
 800a352:	fb03 f202 	mul.w	r2, r3, r2
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a35e:	e08f      	b.n	800a480 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800a360:	69bb      	ldr	r3, [r7, #24]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d13a      	bne.n	800a3dc <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800a366:	4b4a      	ldr	r3, [pc, #296]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a36e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a372:	f040 8086 	bne.w	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800a376:	4b46      	ldr	r3, [pc, #280]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d07f      	beq.n	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800a382:	4b43      	ldr	r3, [pc, #268]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	091b      	lsrs	r3, r3, #4
 800a388:	f003 030f 	and.w	r3, r3, #15
 800a38c:	3301      	adds	r3, #1
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	fbb2 f3f3 	udiv	r3, r2, r3
 800a394:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800a396:	4b3e      	ldr	r3, [pc, #248]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	0a1b      	lsrs	r3, r3, #8
 800a39c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3a0:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800a3a2:	4b3b      	ldr	r3, [pc, #236]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	0edb      	lsrs	r3, r3, #27
 800a3a8:	f003 031f 	and.w	r3, r3, #31
 800a3ac:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10a      	bne.n	800a3ca <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800a3b4:	4b36      	ldr	r3, [pc, #216]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 800a3c0:	2311      	movs	r3, #17
 800a3c2:	617b      	str	r3, [r7, #20]
 800a3c4:	e001      	b.n	800a3ca <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 800a3c6:	2307      	movs	r3, #7
 800a3c8:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	fb03 f202 	mul.w	r2, r3, r2
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d8:	61fb      	str	r3, [r7, #28]
 800a3da:	e052      	b.n	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	2b80      	cmp	r3, #128	@ 0x80
 800a3e0:	d003      	beq.n	800a3ea <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3e8:	d109      	bne.n	800a3fe <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3ea:	4b29      	ldr	r3, [pc, #164]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3f6:	d144      	bne.n	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 800a3f8:	4b27      	ldr	r3, [pc, #156]	@ (800a498 <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 800a3fa:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a3fc:	e041      	b.n	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800a3fe:	69bb      	ldr	r3, [r7, #24]
 800a400:	2b20      	cmp	r3, #32
 800a402:	d003      	beq.n	800a40c <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a40a:	d13a      	bne.n	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800a40c:	4b20      	ldr	r3, [pc, #128]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a418:	d133      	bne.n	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 800a41a:	4b1d      	ldr	r3, [pc, #116]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d02d      	beq.n	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 800a426:	4b1a      	ldr	r3, [pc, #104]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	091b      	lsrs	r3, r3, #4
 800a42c:	f003 030f 	and.w	r3, r3, #15
 800a430:	3301      	adds	r3, #1
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	fbb2 f3f3 	udiv	r3, r2, r3
 800a438:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800a43a:	4b15      	ldr	r3, [pc, #84]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	0a1b      	lsrs	r3, r3, #8
 800a440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a444:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 800a446:	4b12      	ldr	r3, [pc, #72]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	0edb      	lsrs	r3, r3, #27
 800a44c:	f003 031f 	and.w	r3, r3, #31
 800a450:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800a458:	4b0d      	ldr	r3, [pc, #52]	@ (800a490 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 800a464:	2311      	movs	r3, #17
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	e001      	b.n	800a46e <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 800a46a:	2307      	movs	r3, #7
 800a46c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	fb03 f202 	mul.w	r2, r3, r2
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47c:	61fb      	str	r3, [r7, #28]
 800a47e:	e000      	b.n	800a482 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800a480:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800a482:	69fb      	ldr	r3, [r7, #28]
}
 800a484:	4618      	mov	r0, r3
 800a486:	3724      	adds	r7, #36	@ 0x24
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr
 800a490:	40021000 	.word	0x40021000
 800a494:	001fff68 	.word	0x001fff68
 800a498:	00f42400 	.word	0x00f42400

0800a49c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b086      	sub	sp, #24
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	60f8      	str	r0, [r7, #12]
 800a4a4:	60b9      	str	r1, [r7, #8]
 800a4a6:	607a      	str	r2, [r7, #4]
 800a4a8:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	2b02      	cmp	r3, #2
 800a4ae:	d904      	bls.n	800a4ba <HAL_SAI_InitProtocol+0x1e>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	3b03      	subs	r3, #3
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d812      	bhi.n	800a4de <HAL_SAI_InitProtocol+0x42>
 800a4b8:	e008      	b.n	800a4cc <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	68b9      	ldr	r1, [r7, #8]
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 f9fb 	bl	800a8bc <SAI_InitI2S>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a4ca:	e00b      	b.n	800a4e4 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	68b9      	ldr	r1, [r7, #8]
 800a4d2:	68f8      	ldr	r0, [r7, #12]
 800a4d4:	f000 faa4 	bl	800aa20 <SAI_InitPCM>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	75fb      	strb	r3, [r7, #23]
      break;
 800a4dc:	e002      	b.n	800a4e4 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a4e2:	bf00      	nop
  }

  if (status == HAL_OK)
 800a4e4:	7dfb      	ldrb	r3, [r7, #23]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d104      	bne.n	800a4f4 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f000 f808 	bl	800a500 <HAL_SAI_Init>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a4f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
	...

0800a500 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08a      	sub	sp, #40	@ 0x28
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e1c7      	b.n	800a8a2 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d10e      	bne.n	800a53a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a81      	ldr	r2, [pc, #516]	@ (800a728 <HAL_SAI_Init+0x228>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d107      	bne.n	800a536 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d103      	bne.n	800a536 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 800a536:	2301      	movs	r3, #1
 800a538:	e1b3      	b.n	800a8a2 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 800a540:	b2db      	uxtb	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d106      	bne.n	800a554 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f7f9 f820 	bl	8003594 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 fae5 	bl	800ab24 <SAI_Disable>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	e19e      	b.n	800a8a2 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	2b02      	cmp	r3, #2
 800a572:	d00c      	beq.n	800a58e <HAL_SAI_Init+0x8e>
 800a574:	2b02      	cmp	r3, #2
 800a576:	d80d      	bhi.n	800a594 <HAL_SAI_Init+0x94>
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d002      	beq.n	800a582 <HAL_SAI_Init+0x82>
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d003      	beq.n	800a588 <HAL_SAI_Init+0x88>
 800a580:	e008      	b.n	800a594 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a586:	e008      	b.n	800a59a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a588:	2310      	movs	r3, #16
 800a58a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a58c:	e005      	b.n	800a59a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a58e:	2320      	movs	r3, #32
 800a590:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a592:	e002      	b.n	800a59a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 800a594:	2300      	movs	r3, #0
 800a596:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a598:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	2b03      	cmp	r3, #3
 800a5a0:	d81d      	bhi.n	800a5de <HAL_SAI_Init+0xde>
 800a5a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a8 <HAL_SAI_Init+0xa8>)
 800a5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a8:	0800a5b9 	.word	0x0800a5b9
 800a5ac:	0800a5bf 	.word	0x0800a5bf
 800a5b0:	0800a5c7 	.word	0x0800a5c7
 800a5b4:	0800a5cf 	.word	0x0800a5cf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]
      break;
 800a5bc:	e012      	b.n	800a5e4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a5be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5c2:	61fb      	str	r3, [r7, #28]
      break;
 800a5c4:	e00e      	b.n	800a5e4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a5c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a5ca:	61fb      	str	r3, [r7, #28]
      break;
 800a5cc:	e00a      	b.n	800a5e4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a5ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a5d2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d6:	f043 0301 	orr.w	r3, r3, #1
 800a5da:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800a5dc:	e002      	b.n	800a5e4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	61fb      	str	r3, [r7, #28]
      break;
 800a5e2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a4f      	ldr	r2, [pc, #316]	@ (800a728 <HAL_SAI_Init+0x228>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d004      	beq.n	800a5f8 <HAL_SAI_Init+0xf8>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a4e      	ldr	r2, [pc, #312]	@ (800a72c <HAL_SAI_Init+0x22c>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d103      	bne.n	800a600 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 800a5f8:	4a4d      	ldr	r2, [pc, #308]	@ (800a730 <HAL_SAI_Init+0x230>)
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	6013      	str	r3, [r2, #0]
 800a5fe:	e002      	b.n	800a606 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800a600:	4a4c      	ldr	r2, [pc, #304]	@ (800a734 <HAL_SAI_Init+0x234>)
 800a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a604:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d073      	beq.n	800a6f6 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a45      	ldr	r2, [pc, #276]	@ (800a728 <HAL_SAI_Init+0x228>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d004      	beq.n	800a622 <HAL_SAI_Init+0x122>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a43      	ldr	r2, [pc, #268]	@ (800a72c <HAL_SAI_Init+0x22c>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d105      	bne.n	800a62e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a622:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a626:	f7fe fd0d 	bl	8009044 <HAL_RCCEx_GetPeriphCLKFreq>
 800a62a:	61b8      	str	r0, [r7, #24]
 800a62c:	e004      	b.n	800a638 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a62e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a632:	f7fe fd07 	bl	8009044 <HAL_RCCEx_GetPeriphCLKFreq>
 800a636:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a640:	d120      	bne.n	800a684 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a646:	2b04      	cmp	r3, #4
 800a648:	d102      	bne.n	800a650 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a64a:	2340      	movs	r3, #64	@ 0x40
 800a64c:	613b      	str	r3, [r7, #16]
 800a64e:	e00a      	b.n	800a666 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a654:	2b08      	cmp	r3, #8
 800a656:	d103      	bne.n	800a660 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a65c:	613b      	str	r3, [r7, #16]
 800a65e:	e002      	b.n	800a666 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a664:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	005b      	lsls	r3, r3, #1
 800a670:	4619      	mov	r1, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	69db      	ldr	r3, [r3, #28]
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	fb02 f303 	mul.w	r3, r2, r3
 800a67c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	e017      	b.n	800a6b4 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a68c:	d101      	bne.n	800a692 <HAL_SAI_Init+0x192>
 800a68e:	2302      	movs	r3, #2
 800a690:	e000      	b.n	800a694 <HAL_SAI_Init+0x194>
 800a692:	2301      	movs	r3, #1
 800a694:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	4613      	mov	r3, r2
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	005b      	lsls	r3, r3, #1
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	69db      	ldr	r3, [r3, #28]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	fb02 f303 	mul.w	r3, r2, r3
 800a6ac:	021b      	lsls	r3, r3, #8
 800a6ae:	fbb1 f3f3 	udiv	r3, r1, r3
 800a6b2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	4a20      	ldr	r2, [pc, #128]	@ (800a738 <HAL_SAI_Init+0x238>)
 800a6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6bc:	08da      	lsrs	r2, r3, #3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a6c2:	6979      	ldr	r1, [r7, #20]
 800a6c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a738 <HAL_SAI_Init+0x238>)
 800a6c6:	fba3 2301 	umull	r2, r3, r3, r1
 800a6ca:	08da      	lsrs	r2, r3, #3
 800a6cc:	4613      	mov	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4413      	add	r3, r2
 800a6d2:	005b      	lsls	r3, r3, #1
 800a6d4:	1aca      	subs	r2, r1, r3
 800a6d6:	2a08      	cmp	r2, #8
 800a6d8:	d904      	bls.n	800a6e4 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e8:	2b04      	cmp	r3, #4
 800a6ea:	d104      	bne.n	800a6f6 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a1b      	ldr	r3, [r3, #32]
 800a6f0:	085a      	lsrs	r2, r3, #1
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d003      	beq.n	800a706 <HAL_SAI_Init+0x206>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	2b02      	cmp	r3, #2
 800a704:	d109      	bne.n	800a71a <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d101      	bne.n	800a712 <HAL_SAI_Init+0x212>
 800a70e:	2300      	movs	r3, #0
 800a710:	e001      	b.n	800a716 <HAL_SAI_Init+0x216>
 800a712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a716:	623b      	str	r3, [r7, #32]
 800a718:	e012      	b.n	800a740 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d10c      	bne.n	800a73c <HAL_SAI_Init+0x23c>
 800a722:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a726:	e00a      	b.n	800a73e <HAL_SAI_Init+0x23e>
 800a728:	40015404 	.word	0x40015404
 800a72c:	40015424 	.word	0x40015424
 800a730:	40015400 	.word	0x40015400
 800a734:	40015800 	.word	0x40015800
 800a738:	cccccccd 	.word	0xcccccccd
 800a73c:	2300      	movs	r3, #0
 800a73e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6819      	ldr	r1, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	4b58      	ldr	r3, [pc, #352]	@ (800a8ac <HAL_SAI_Init+0x3ac>)
 800a74c:	400b      	ands	r3, r1
 800a74e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6819      	ldr	r1, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a75e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a764:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a76a:	431a      	orrs	r2, r3
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 800a778:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a784:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a1b      	ldr	r3, [r3, #32]
 800a78a:	051b      	lsls	r3, r3, #20
 800a78c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a792:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	430a      	orrs	r2, r1
 800a79a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	685b      	ldr	r3, [r3, #4]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a7aa:	f023 030f 	bic.w	r3, r3, #15
 800a7ae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6859      	ldr	r1, [r3, #4]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	699a      	ldr	r2, [r3, #24]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	430a      	orrs	r2, r1
 800a7cc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	6899      	ldr	r1, [r3, #8]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	4b35      	ldr	r3, [pc, #212]	@ (800a8b0 <HAL_SAI_Init+0x3b0>)
 800a7da:	400b      	ands	r3, r1
 800a7dc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	6899      	ldr	r1, [r3, #8]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7e8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7ee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 800a7f4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 800a7fa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a800:	3b01      	subs	r3, #1
 800a802:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a804:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	68d9      	ldr	r1, [r3, #12]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800a81c:	400b      	ands	r3, r1
 800a81e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	68d9      	ldr	r1, [r3, #12]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a82e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a834:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a836:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a83c:	3b01      	subs	r3, #1
 800a83e:	021b      	lsls	r3, r3, #8
 800a840:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a19      	ldr	r2, [pc, #100]	@ (800a8b4 <HAL_SAI_Init+0x3b4>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d119      	bne.n	800a888 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a854:	4b18      	ldr	r3, [pc, #96]	@ (800a8b8 <HAL_SAI_Init+0x3b8>)
 800a856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a858:	4a17      	ldr	r2, [pc, #92]	@ (800a8b8 <HAL_SAI_Init+0x3b8>)
 800a85a:	f023 0301 	bic.w	r3, r3, #1
 800a85e:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a866:	2b01      	cmp	r3, #1
 800a868:	d10e      	bne.n	800a888 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a872:	3b01      	subs	r3, #1
 800a874:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a876:	4910      	ldr	r1, [pc, #64]	@ (800a8b8 <HAL_SAI_Init+0x3b8>)
 800a878:	4313      	orrs	r3, r2
 800a87a:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800a87c:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b8 <HAL_SAI_Init+0x3b8>)
 800a87e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a880:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b8 <HAL_SAI_Init+0x3b8>)
 800a882:	f043 0301 	orr.w	r3, r3, #1
 800a886:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3728      	adds	r7, #40	@ 0x28
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	f805c010 	.word	0xf805c010
 800a8b0:	fff88000 	.word	0xfff88000
 800a8b4:	40015404 	.word	0x40015404
 800a8b8:	40015400 	.word	0x40015400

0800a8bc <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b087      	sub	sp, #28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <SAI_InitI2S+0x2e>
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d103      	bne.n	800a8f2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a8f0:	e002      	b.n	800a8f8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a8fe:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a906:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.FirstBitOffset  = 0;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	e077      	b.n	800aa12 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d107      	bne.n	800a938 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a934:	661a      	str	r2, [r3, #96]	@ 0x60
 800a936:	e006      	b.n	800a946 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a93e:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2200      	movs	r2, #0
 800a944:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Frame definition */
  switch (datasize)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d84f      	bhi.n	800a9ec <SAI_InitI2S+0x130>
 800a94c:	a201      	add	r2, pc, #4	@ (adr r2, 800a954 <SAI_InitI2S+0x98>)
 800a94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a952:	bf00      	nop
 800a954:	0800a965 	.word	0x0800a965
 800a958:	0800a987 	.word	0x0800a987
 800a95c:	0800a9a9 	.word	0x0800a9a9
 800a960:	0800a9cb 	.word	0x0800a9cb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2280      	movs	r2, #128	@ 0x80
 800a968:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	085b      	lsrs	r3, r3, #1
 800a96e:	015a      	lsls	r2, r3, #5
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	085b      	lsrs	r3, r3, #1
 800a978:	011a      	lsls	r2, r3, #4
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2240      	movs	r2, #64	@ 0x40
 800a982:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a984:	e035      	b.n	800a9f2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2280      	movs	r2, #128	@ 0x80
 800a98a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	085b      	lsrs	r3, r3, #1
 800a990:	019a      	lsls	r2, r3, #6
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	085b      	lsrs	r3, r3, #1
 800a99a:	015a      	lsls	r2, r3, #5
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2280      	movs	r2, #128	@ 0x80
 800a9a4:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a9a6:	e024      	b.n	800a9f2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	22c0      	movs	r2, #192	@ 0xc0
 800a9ac:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	085b      	lsrs	r3, r3, #1
 800a9b2:	019a      	lsls	r2, r3, #6
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	085b      	lsrs	r3, r3, #1
 800a9bc:	015a      	lsls	r2, r3, #5
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2280      	movs	r2, #128	@ 0x80
 800a9c6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a9c8:	e013      	b.n	800a9f2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	22e0      	movs	r2, #224	@ 0xe0
 800a9ce:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	085b      	lsrs	r3, r3, #1
 800a9d4:	019a      	lsls	r2, r3, #6
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	085b      	lsrs	r3, r3, #1
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	655a      	str	r2, [r3, #84]	@ 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2280      	movs	r2, #128	@ 0x80
 800a9e8:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800a9ea:	e002      	b.n	800a9f2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d10b      	bne.n	800aa10 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d102      	bne.n	800aa04 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	2210      	movs	r2, #16
 800aa02:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d102      	bne.n	800aa10 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2208      	movs	r2, #8
 800aa0e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
  }
  return status;
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	371c      	adds	r7, #28
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop

0800aa20 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <SAI_InitPCM+0x2e>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	2b02      	cmp	r3, #2
 800aa4c:	d103      	bne.n	800aa56 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2201      	movs	r2, #1
 800aa52:	64da      	str	r2, [r3, #76]	@ 0x4c
 800aa54:	e002      	b.n	800aa5c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800aa68:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800aa70:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2200      	movs	r2, #0
 800aa76:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai->SlotInit.SlotNumber      = nbslot;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aa84:	671a      	str	r2, [r3, #112]	@ 0x70

  if (protocol == SAI_PCM_SHORT)
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	2b04      	cmp	r3, #4
 800aa8a:	d103      	bne.n	800aa94 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	655a      	str	r2, [r3, #84]	@ 0x54
 800aa92:	e002      	b.n	800aa9a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	220d      	movs	r2, #13
 800aa98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  switch (datasize)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d837      	bhi.n	800ab10 <SAI_InitPCM+0xf0>
 800aaa0:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa8 <SAI_InitPCM+0x88>)
 800aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa6:	bf00      	nop
 800aaa8:	0800aab9 	.word	0x0800aab9
 800aaac:	0800aacf 	.word	0x0800aacf
 800aab0:	0800aae5 	.word	0x0800aae5
 800aab4:	0800aafb 	.word	0x0800aafb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2280      	movs	r2, #128	@ 0x80
 800aabc:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	011a      	lsls	r2, r3, #4
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2240      	movs	r2, #64	@ 0x40
 800aaca:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800aacc:	e023      	b.n	800ab16 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2280      	movs	r2, #128	@ 0x80
 800aad2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	015a      	lsls	r2, r3, #5
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2280      	movs	r2, #128	@ 0x80
 800aae0:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800aae2:	e018      	b.n	800ab16 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	22c0      	movs	r2, #192	@ 0xc0
 800aae8:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2280      	movs	r2, #128	@ 0x80
 800aaf6:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800aaf8:	e00d      	b.n	800ab16 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	22e0      	movs	r2, #224	@ 0xe0
 800aafe:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	015a      	lsls	r2, r3, #5
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	651a      	str	r2, [r3, #80]	@ 0x50
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2280      	movs	r2, #128	@ 0x80
 800ab0c:	669a      	str	r2, [r3, #104]	@ 0x68
      break;
 800ab0e:	e002      	b.n	800ab16 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	75fb      	strb	r3, [r7, #23]
      break;
 800ab14:	bf00      	nop
  }

  return status;
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	371c      	adds	r7, #28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr

0800ab24 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b085      	sub	sp, #20
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800ab2c:	4b18      	ldr	r3, [pc, #96]	@ (800ab90 <SAI_Disable+0x6c>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4a18      	ldr	r2, [pc, #96]	@ (800ab94 <SAI_Disable+0x70>)
 800ab32:	fba2 2303 	umull	r2, r3, r2, r3
 800ab36:	0b1b      	lsrs	r3, r3, #12
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ab4e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10a      	bne.n	800ab6c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab5c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 800ab66:	2303      	movs	r3, #3
 800ab68:	72fb      	strb	r3, [r7, #11]
      break;
 800ab6a:	e009      	b.n	800ab80 <SAI_Disable+0x5c>
    }
    count--;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1e7      	bne.n	800ab50 <SAI_Disable+0x2c>

  return status;
 800ab80:	7afb      	ldrb	r3, [r7, #11]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20000020 	.word	0x20000020
 800ab94:	95cbec1b 	.word	0x95cbec1b

0800ab98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e095      	b.n	800acd6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d108      	bne.n	800abc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800abba:	d009      	beq.n	800abd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	61da      	str	r2, [r3, #28]
 800abc2:	e005      	b.n	800abd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d106      	bne.n	800abf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7f8 fad8 	bl	80031a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ac10:	d902      	bls.n	800ac18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
 800ac16:	e002      	b.n	800ac1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ac18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ac1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ac26:	d007      	beq.n	800ac38 <HAL_SPI_Init+0xa0>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ac30:	d002      	beq.n	800ac38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ac48:	431a      	orrs	r2, r3
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	431a      	orrs	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	f003 0301 	and.w	r3, r3, #1
 800ac5c:	431a      	orrs	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac66:	431a      	orrs	r2, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac70:	431a      	orrs	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6a1b      	ldr	r3, [r3, #32]
 800ac76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac7a:	ea42 0103 	orr.w	r1, r2, r3
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac82:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	699b      	ldr	r3, [r3, #24]
 800ac92:	0c1b      	lsrs	r3, r3, #16
 800ac94:	f003 0204 	and.w	r2, r3, #4
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac9c:	f003 0310 	and.w	r3, r3, #16
 800aca0:	431a      	orrs	r2, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	431a      	orrs	r2, r3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	68db      	ldr	r3, [r3, #12]
 800acb0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800acb4:	ea42 0103 	orr.w	r1, r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	430a      	orrs	r2, r1
 800acc4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800acd4:	2300      	movs	r3, #0
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b088      	sub	sp, #32
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	603b      	str	r3, [r7, #0]
 800acea:	4613      	mov	r3, r2
 800acec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d101      	bne.n	800ad00 <HAL_SPI_Transmit+0x22>
 800acfc:	2302      	movs	r3, #2
 800acfe:	e15f      	b.n	800afc0 <HAL_SPI_Transmit+0x2e2>
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	2201      	movs	r2, #1
 800ad04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad08:	f7fa fc8c 	bl	8005624 <HAL_GetTick>
 800ad0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ad0e:	88fb      	ldrh	r3, [r7, #6]
 800ad10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d002      	beq.n	800ad24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ad1e:	2302      	movs	r3, #2
 800ad20:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad22:	e148      	b.n	800afb6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <HAL_SPI_Transmit+0x52>
 800ad2a:	88fb      	ldrh	r3, [r7, #6]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d102      	bne.n	800ad36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad34:	e13f      	b.n	800afb6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2203      	movs	r2, #3
 800ad3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	88fa      	ldrh	r2, [r7, #6]
 800ad4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	88fa      	ldrh	r2, [r7, #6]
 800ad54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad80:	d10f      	bne.n	800ada2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ada0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adac:	2b40      	cmp	r3, #64	@ 0x40
 800adae:	d007      	beq.n	800adc0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681a      	ldr	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800adc8:	d94f      	bls.n	800ae6a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d002      	beq.n	800add8 <HAL_SPI_Transmit+0xfa>
 800add2:	8afb      	ldrh	r3, [r7, #22]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d142      	bne.n	800ae5e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800addc:	881a      	ldrh	r2, [r3, #0]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ade8:	1c9a      	adds	r2, r3, #2
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	3b01      	subs	r3, #1
 800adf6:	b29a      	uxth	r2, r3
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800adfc:	e02f      	b.n	800ae5e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d112      	bne.n	800ae32 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae10:	881a      	ldrh	r2, [r3, #0]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae1c:	1c9a      	adds	r2, r3, #2
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	b29a      	uxth	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ae30:	e015      	b.n	800ae5e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae32:	f7fa fbf7 	bl	8005624 <HAL_GetTick>
 800ae36:	4602      	mov	r2, r0
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	1ad3      	subs	r3, r2, r3
 800ae3c:	683a      	ldr	r2, [r7, #0]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d803      	bhi.n	800ae4a <HAL_SPI_Transmit+0x16c>
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d102      	bne.n	800ae50 <HAL_SPI_Transmit+0x172>
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d106      	bne.n	800ae5e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800ae5c:	e0ab      	b.n	800afb6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1ca      	bne.n	800adfe <HAL_SPI_Transmit+0x120>
 800ae68:	e080      	b.n	800af6c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <HAL_SPI_Transmit+0x19a>
 800ae72:	8afb      	ldrh	r3, [r7, #22]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d174      	bne.n	800af62 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d912      	bls.n	800aea8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae86:	881a      	ldrh	r2, [r3, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae92:	1c9a      	adds	r2, r3, #2
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	3b02      	subs	r3, #2
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800aea6:	e05c      	b.n	800af62 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	330c      	adds	r3, #12
 800aeb2:	7812      	ldrb	r2, [r2, #0]
 800aeb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeba:	1c5a      	adds	r2, r3, #1
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	3b01      	subs	r3, #1
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800aece:	e048      	b.n	800af62 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	f003 0302 	and.w	r3, r3, #2
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	d12b      	bne.n	800af36 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d912      	bls.n	800af0e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeec:	881a      	ldrh	r2, [r3, #0]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aef8:	1c9a      	adds	r2, r3, #2
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af02:	b29b      	uxth	r3, r3
 800af04:	3b02      	subs	r3, #2
 800af06:	b29a      	uxth	r2, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800af0c:	e029      	b.n	800af62 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	330c      	adds	r3, #12
 800af18:	7812      	ldrb	r2, [r2, #0]
 800af1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af20:	1c5a      	adds	r2, r3, #1
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	3b01      	subs	r3, #1
 800af2e:	b29a      	uxth	r2, r3
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800af34:	e015      	b.n	800af62 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af36:	f7fa fb75 	bl	8005624 <HAL_GetTick>
 800af3a:	4602      	mov	r2, r0
 800af3c:	69bb      	ldr	r3, [r7, #24]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	683a      	ldr	r2, [r7, #0]
 800af42:	429a      	cmp	r2, r3
 800af44:	d803      	bhi.n	800af4e <HAL_SPI_Transmit+0x270>
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af4c:	d102      	bne.n	800af54 <HAL_SPI_Transmit+0x276>
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800af54:	2303      	movs	r3, #3
 800af56:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800af60:	e029      	b.n	800afb6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af66:	b29b      	uxth	r3, r3
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1b1      	bne.n	800aed0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af6c:	69ba      	ldr	r2, [r7, #24]
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 f947 	bl	800b204 <SPI_EndRxTxTransaction>
 800af76:	4603      	mov	r3, r0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2220      	movs	r2, #32
 800af80:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	689b      	ldr	r3, [r3, #8]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10a      	bne.n	800afa0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af8a:	2300      	movs	r3, #0
 800af8c:	613b      	str	r3, [r7, #16]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	68db      	ldr	r3, [r3, #12]
 800af94:	613b      	str	r3, [r7, #16]
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	613b      	str	r3, [r7, #16]
 800af9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	77fb      	strb	r3, [r7, #31]
 800afac:	e003      	b.n	800afb6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2201      	movs	r2, #1
 800afb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800afbe:	7ffb      	ldrb	r3, [r7, #31]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3720      	adds	r7, #32
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	4613      	mov	r3, r2
 800afd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800afd8:	f7fa fb24 	bl	8005624 <HAL_GetTick>
 800afdc:	4602      	mov	r2, r0
 800afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe0:	1a9b      	subs	r3, r3, r2
 800afe2:	683a      	ldr	r2, [r7, #0]
 800afe4:	4413      	add	r3, r2
 800afe6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800afe8:	f7fa fb1c 	bl	8005624 <HAL_GetTick>
 800afec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800afee:	4b39      	ldr	r3, [pc, #228]	@ (800b0d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	015b      	lsls	r3, r3, #5
 800aff4:	0d1b      	lsrs	r3, r3, #20
 800aff6:	69fa      	ldr	r2, [r7, #28]
 800aff8:	fb02 f303 	mul.w	r3, r2, r3
 800affc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800affe:	e054      	b.n	800b0aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b006:	d050      	beq.n	800b0aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b008:	f7fa fb0c 	bl	8005624 <HAL_GetTick>
 800b00c:	4602      	mov	r2, r0
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	1ad3      	subs	r3, r2, r3
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	429a      	cmp	r2, r3
 800b016:	d902      	bls.n	800b01e <SPI_WaitFlagStateUntilTimeout+0x56>
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d13d      	bne.n	800b09a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	685a      	ldr	r2, [r3, #4]
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b02c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b036:	d111      	bne.n	800b05c <SPI_WaitFlagStateUntilTimeout+0x94>
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b040:	d004      	beq.n	800b04c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	689b      	ldr	r3, [r3, #8]
 800b046:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b04a:	d107      	bne.n	800b05c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b05a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b064:	d10f      	bne.n	800b086 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	681a      	ldr	r2, [r3, #0]
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b074:	601a      	str	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b084:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2200      	movs	r2, #0
 800b092:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b096:	2303      	movs	r3, #3
 800b098:	e017      	b.n	800b0ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	689a      	ldr	r2, [r3, #8]
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	bf0c      	ite	eq
 800b0ba:	2301      	moveq	r3, #1
 800b0bc:	2300      	movne	r3, #0
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	79fb      	ldrb	r3, [r7, #7]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d19b      	bne.n	800b000 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3720      	adds	r7, #32
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20000020 	.word	0x20000020

0800b0d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b08a      	sub	sp, #40	@ 0x28
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
 800b0e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b0ea:	f7fa fa9b 	bl	8005624 <HAL_GetTick>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f2:	1a9b      	subs	r3, r3, r2
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b0fa:	f7fa fa93 	bl	8005624 <HAL_GetTick>
 800b0fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	330c      	adds	r3, #12
 800b106:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b108:	4b3d      	ldr	r3, [pc, #244]	@ (800b200 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	00da      	lsls	r2, r3, #3
 800b114:	1ad3      	subs	r3, r2, r3
 800b116:	0d1b      	lsrs	r3, r3, #20
 800b118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b11a:	fb02 f303 	mul.w	r3, r2, r3
 800b11e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b120:	e060      	b.n	800b1e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b128:	d107      	bne.n	800b13a <SPI_WaitFifoStateUntilTimeout+0x62>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d104      	bne.n	800b13a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	b2db      	uxtb	r3, r3
 800b136:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b138:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b140:	d050      	beq.n	800b1e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b142:	f7fa fa6f 	bl	8005624 <HAL_GetTick>
 800b146:	4602      	mov	r2, r0
 800b148:	6a3b      	ldr	r3, [r7, #32]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b14e:	429a      	cmp	r2, r3
 800b150:	d902      	bls.n	800b158 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b154:	2b00      	cmp	r3, #0
 800b156:	d13d      	bne.n	800b1d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685a      	ldr	r2, [r3, #4]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b166:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b170:	d111      	bne.n	800b196 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b17a:	d004      	beq.n	800b186 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b184:	d107      	bne.n	800b196 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b194:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b19a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b19e:	d10f      	bne.n	800b1c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b1be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e010      	b.n	800b1f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	689a      	ldr	r2, [r3, #8]
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	4013      	ands	r3, r2
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d196      	bne.n	800b122 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3728      	adds	r7, #40	@ 0x28
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	20000020 	.word	0x20000020

0800b204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af02      	add	r7, sp, #8
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2200      	movs	r2, #0
 800b218:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f7ff ff5b 	bl	800b0d8 <SPI_WaitFifoStateUntilTimeout>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d007      	beq.n	800b238 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b22c:	f043 0220 	orr.w	r2, r3, #32
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e027      	b.n	800b288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	2200      	movs	r2, #0
 800b240:	2180      	movs	r1, #128	@ 0x80
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff fec0 	bl	800afc8 <SPI_WaitFlagStateUntilTimeout>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d007      	beq.n	800b25e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b252:	f043 0220 	orr.w	r2, r3, #32
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b25a:	2303      	movs	r3, #3
 800b25c:	e014      	b.n	800b288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	2200      	movs	r2, #0
 800b266:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	f7ff ff34 	bl	800b0d8 <SPI_WaitFifoStateUntilTimeout>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d007      	beq.n	800b286 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b27a:	f043 0220 	orr.w	r2, r3, #32
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e000      	b.n	800b288 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3710      	adds	r7, #16
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}

0800b290 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b082      	sub	sp, #8
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e049      	b.n	800b336 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d106      	bne.n	800b2bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7f7 ffb6 	bl	8003228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2202      	movs	r2, #2
 800b2c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	4619      	mov	r1, r3
 800b2ce:	4610      	mov	r0, r2
 800b2d0:	f000 f94a 	bl	800b568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2201      	movs	r2, #1
 800b300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2201      	movs	r2, #1
 800b308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2201      	movs	r2, #1
 800b310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b34c:	2300      	movs	r3, #0
 800b34e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b356:	2b01      	cmp	r3, #1
 800b358:	d101      	bne.n	800b35e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b35a:	2302      	movs	r3, #2
 800b35c:	e0ff      	b.n	800b55e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2201      	movs	r2, #1
 800b362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2b14      	cmp	r3, #20
 800b36a:	f200 80f0 	bhi.w	800b54e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b36e:	a201      	add	r2, pc, #4	@ (adr r2, 800b374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b374:	0800b3c9 	.word	0x0800b3c9
 800b378:	0800b54f 	.word	0x0800b54f
 800b37c:	0800b54f 	.word	0x0800b54f
 800b380:	0800b54f 	.word	0x0800b54f
 800b384:	0800b409 	.word	0x0800b409
 800b388:	0800b54f 	.word	0x0800b54f
 800b38c:	0800b54f 	.word	0x0800b54f
 800b390:	0800b54f 	.word	0x0800b54f
 800b394:	0800b44b 	.word	0x0800b44b
 800b398:	0800b54f 	.word	0x0800b54f
 800b39c:	0800b54f 	.word	0x0800b54f
 800b3a0:	0800b54f 	.word	0x0800b54f
 800b3a4:	0800b48b 	.word	0x0800b48b
 800b3a8:	0800b54f 	.word	0x0800b54f
 800b3ac:	0800b54f 	.word	0x0800b54f
 800b3b0:	0800b54f 	.word	0x0800b54f
 800b3b4:	0800b4cd 	.word	0x0800b4cd
 800b3b8:	0800b54f 	.word	0x0800b54f
 800b3bc:	0800b54f 	.word	0x0800b54f
 800b3c0:	0800b54f 	.word	0x0800b54f
 800b3c4:	0800b50d 	.word	0x0800b50d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	68b9      	ldr	r1, [r7, #8]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 f964 	bl	800b69c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	699a      	ldr	r2, [r3, #24]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f042 0208 	orr.w	r2, r2, #8
 800b3e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	699a      	ldr	r2, [r3, #24]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f022 0204 	bic.w	r2, r2, #4
 800b3f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	6999      	ldr	r1, [r3, #24]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	691a      	ldr	r2, [r3, #16]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	430a      	orrs	r2, r1
 800b404:	619a      	str	r2, [r3, #24]
      break;
 800b406:	e0a5      	b.n	800b554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68b9      	ldr	r1, [r7, #8]
 800b40e:	4618      	mov	r0, r3
 800b410:	f000 f9d4 	bl	800b7bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	699a      	ldr	r2, [r3, #24]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	699a      	ldr	r2, [r3, #24]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6999      	ldr	r1, [r3, #24]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	021a      	lsls	r2, r3, #8
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	430a      	orrs	r2, r1
 800b446:	619a      	str	r2, [r3, #24]
      break;
 800b448:	e084      	b.n	800b554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	68b9      	ldr	r1, [r7, #8]
 800b450:	4618      	mov	r0, r3
 800b452:	f000 fa3d 	bl	800b8d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	69da      	ldr	r2, [r3, #28]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f042 0208 	orr.w	r2, r2, #8
 800b464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	69da      	ldr	r2, [r3, #28]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f022 0204 	bic.w	r2, r2, #4
 800b474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	69d9      	ldr	r1, [r3, #28]
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	691a      	ldr	r2, [r3, #16]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	430a      	orrs	r2, r1
 800b486:	61da      	str	r2, [r3, #28]
      break;
 800b488:	e064      	b.n	800b554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68b9      	ldr	r1, [r7, #8]
 800b490:	4618      	mov	r0, r3
 800b492:	f000 faa5 	bl	800b9e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	69da      	ldr	r2, [r3, #28]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	69da      	ldr	r2, [r3, #28]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	69d9      	ldr	r1, [r3, #28]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	021a      	lsls	r2, r3, #8
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	430a      	orrs	r2, r1
 800b4c8:	61da      	str	r2, [r3, #28]
      break;
 800b4ca:	e043      	b.n	800b554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68b9      	ldr	r1, [r7, #8]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f000 faee 	bl	800bab4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f042 0208 	orr.w	r2, r2, #8
 800b4e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 0204 	bic.w	r2, r2, #4
 800b4f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	691a      	ldr	r2, [r3, #16]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b50a:	e023      	b.n	800b554 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	68b9      	ldr	r1, [r7, #8]
 800b512:	4618      	mov	r0, r3
 800b514:	f000 fb32 	bl	800bb7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b526:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b536:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	021a      	lsls	r2, r3, #8
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	430a      	orrs	r2, r1
 800b54a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b54c:	e002      	b.n	800b554 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	75fb      	strb	r3, [r7, #23]
      break;
 800b552:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	2200      	movs	r2, #0
 800b558:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop

0800b568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a40      	ldr	r2, [pc, #256]	@ (800b67c <TIM_Base_SetConfig+0x114>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d013      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b586:	d00f      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a3d      	ldr	r2, [pc, #244]	@ (800b680 <TIM_Base_SetConfig+0x118>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d00b      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a3c      	ldr	r2, [pc, #240]	@ (800b684 <TIM_Base_SetConfig+0x11c>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d007      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	4a3b      	ldr	r2, [pc, #236]	@ (800b688 <TIM_Base_SetConfig+0x120>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d003      	beq.n	800b5a8 <TIM_Base_SetConfig+0x40>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	4a3a      	ldr	r2, [pc, #232]	@ (800b68c <TIM_Base_SetConfig+0x124>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d108      	bne.n	800b5ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a2f      	ldr	r2, [pc, #188]	@ (800b67c <TIM_Base_SetConfig+0x114>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d01f      	beq.n	800b602 <TIM_Base_SetConfig+0x9a>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5c8:	d01b      	beq.n	800b602 <TIM_Base_SetConfig+0x9a>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a2c      	ldr	r2, [pc, #176]	@ (800b680 <TIM_Base_SetConfig+0x118>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d017      	beq.n	800b602 <TIM_Base_SetConfig+0x9a>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4a2b      	ldr	r2, [pc, #172]	@ (800b684 <TIM_Base_SetConfig+0x11c>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d013      	beq.n	800b602 <TIM_Base_SetConfig+0x9a>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4a2a      	ldr	r2, [pc, #168]	@ (800b688 <TIM_Base_SetConfig+0x120>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00f      	beq.n	800b602 <TIM_Base_SetConfig+0x9a>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	4a29      	ldr	r2, [pc, #164]	@ (800b68c <TIM_Base_SetConfig+0x124>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d00b      	beq.n	800b602 <TIM_Base_SetConfig+0x9a>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	4a28      	ldr	r2, [pc, #160]	@ (800b690 <TIM_Base_SetConfig+0x128>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d007      	beq.n	800b602 <TIM_Base_SetConfig+0x9a>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4a27      	ldr	r2, [pc, #156]	@ (800b694 <TIM_Base_SetConfig+0x12c>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d003      	beq.n	800b602 <TIM_Base_SetConfig+0x9a>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a26      	ldr	r2, [pc, #152]	@ (800b698 <TIM_Base_SetConfig+0x130>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d108      	bne.n	800b614 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	4313      	orrs	r3, r2
 800b612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	695b      	ldr	r3, [r3, #20]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	689a      	ldr	r2, [r3, #8]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a10      	ldr	r2, [pc, #64]	@ (800b67c <TIM_Base_SetConfig+0x114>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d00f      	beq.n	800b660 <TIM_Base_SetConfig+0xf8>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a12      	ldr	r2, [pc, #72]	@ (800b68c <TIM_Base_SetConfig+0x124>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d00b      	beq.n	800b660 <TIM_Base_SetConfig+0xf8>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a11      	ldr	r2, [pc, #68]	@ (800b690 <TIM_Base_SetConfig+0x128>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d007      	beq.n	800b660 <TIM_Base_SetConfig+0xf8>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a10      	ldr	r2, [pc, #64]	@ (800b694 <TIM_Base_SetConfig+0x12c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d003      	beq.n	800b660 <TIM_Base_SetConfig+0xf8>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a0f      	ldr	r2, [pc, #60]	@ (800b698 <TIM_Base_SetConfig+0x130>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d103      	bne.n	800b668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	691a      	ldr	r2, [r3, #16]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	615a      	str	r2, [r3, #20]
}
 800b66e:	bf00      	nop
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	40012c00 	.word	0x40012c00
 800b680:	40000400 	.word	0x40000400
 800b684:	40000800 	.word	0x40000800
 800b688:	40000c00 	.word	0x40000c00
 800b68c:	40013400 	.word	0x40013400
 800b690:	40014000 	.word	0x40014000
 800b694:	40014400 	.word	0x40014400
 800b698:	40014800 	.word	0x40014800

0800b69c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b087      	sub	sp, #28
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a1b      	ldr	r3, [r3, #32]
 800b6b0:	f023 0201 	bic.w	r2, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f023 0303 	bic.w	r3, r3, #3
 800b6d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68fa      	ldr	r2, [r7, #12]
 800b6de:	4313      	orrs	r3, r2
 800b6e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	f023 0302 	bic.w	r3, r3, #2
 800b6e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a2c      	ldr	r2, [pc, #176]	@ (800b7a8 <TIM_OC1_SetConfig+0x10c>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d00f      	beq.n	800b71c <TIM_OC1_SetConfig+0x80>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	4a2b      	ldr	r2, [pc, #172]	@ (800b7ac <TIM_OC1_SetConfig+0x110>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d00b      	beq.n	800b71c <TIM_OC1_SetConfig+0x80>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4a2a      	ldr	r2, [pc, #168]	@ (800b7b0 <TIM_OC1_SetConfig+0x114>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d007      	beq.n	800b71c <TIM_OC1_SetConfig+0x80>
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	4a29      	ldr	r2, [pc, #164]	@ (800b7b4 <TIM_OC1_SetConfig+0x118>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d003      	beq.n	800b71c <TIM_OC1_SetConfig+0x80>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	4a28      	ldr	r2, [pc, #160]	@ (800b7b8 <TIM_OC1_SetConfig+0x11c>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d10c      	bne.n	800b736 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	f023 0308 	bic.w	r3, r3, #8
 800b722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	697a      	ldr	r2, [r7, #20]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	f023 0304 	bic.w	r3, r3, #4
 800b734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4a1b      	ldr	r2, [pc, #108]	@ (800b7a8 <TIM_OC1_SetConfig+0x10c>)
 800b73a:	4293      	cmp	r3, r2
 800b73c:	d00f      	beq.n	800b75e <TIM_OC1_SetConfig+0xc2>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a1a      	ldr	r2, [pc, #104]	@ (800b7ac <TIM_OC1_SetConfig+0x110>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d00b      	beq.n	800b75e <TIM_OC1_SetConfig+0xc2>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a19      	ldr	r2, [pc, #100]	@ (800b7b0 <TIM_OC1_SetConfig+0x114>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d007      	beq.n	800b75e <TIM_OC1_SetConfig+0xc2>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a18      	ldr	r2, [pc, #96]	@ (800b7b4 <TIM_OC1_SetConfig+0x118>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d003      	beq.n	800b75e <TIM_OC1_SetConfig+0xc2>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a17      	ldr	r2, [pc, #92]	@ (800b7b8 <TIM_OC1_SetConfig+0x11c>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d111      	bne.n	800b782 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b76c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	695b      	ldr	r3, [r3, #20]
 800b772:	693a      	ldr	r2, [r7, #16]
 800b774:	4313      	orrs	r3, r2
 800b776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	699b      	ldr	r3, [r3, #24]
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	4313      	orrs	r3, r2
 800b780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	693a      	ldr	r2, [r7, #16]
 800b786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	685a      	ldr	r2, [r3, #4]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	697a      	ldr	r2, [r7, #20]
 800b79a:	621a      	str	r2, [r3, #32]
}
 800b79c:	bf00      	nop
 800b79e:	371c      	adds	r7, #28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr
 800b7a8:	40012c00 	.word	0x40012c00
 800b7ac:	40013400 	.word	0x40013400
 800b7b0:	40014000 	.word	0x40014000
 800b7b4:	40014400 	.word	0x40014400
 800b7b8:	40014800 	.word	0x40014800

0800b7bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b087      	sub	sp, #28
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6a1b      	ldr	r3, [r3, #32]
 800b7d0:	f023 0210 	bic.w	r2, r3, #16
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b7f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	021b      	lsls	r3, r3, #8
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	4313      	orrs	r3, r2
 800b802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	f023 0320 	bic.w	r3, r3, #32
 800b80a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	011b      	lsls	r3, r3, #4
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	4313      	orrs	r3, r2
 800b816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a28      	ldr	r2, [pc, #160]	@ (800b8bc <TIM_OC2_SetConfig+0x100>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d003      	beq.n	800b828 <TIM_OC2_SetConfig+0x6c>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a27      	ldr	r2, [pc, #156]	@ (800b8c0 <TIM_OC2_SetConfig+0x104>)
 800b824:	4293      	cmp	r3, r2
 800b826:	d10d      	bne.n	800b844 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b82e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	011b      	lsls	r3, r3, #4
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	4313      	orrs	r3, r2
 800b83a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b842:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	4a1d      	ldr	r2, [pc, #116]	@ (800b8bc <TIM_OC2_SetConfig+0x100>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d00f      	beq.n	800b86c <TIM_OC2_SetConfig+0xb0>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	4a1c      	ldr	r2, [pc, #112]	@ (800b8c0 <TIM_OC2_SetConfig+0x104>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d00b      	beq.n	800b86c <TIM_OC2_SetConfig+0xb0>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	4a1b      	ldr	r2, [pc, #108]	@ (800b8c4 <TIM_OC2_SetConfig+0x108>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d007      	beq.n	800b86c <TIM_OC2_SetConfig+0xb0>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	4a1a      	ldr	r2, [pc, #104]	@ (800b8c8 <TIM_OC2_SetConfig+0x10c>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d003      	beq.n	800b86c <TIM_OC2_SetConfig+0xb0>
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a19      	ldr	r2, [pc, #100]	@ (800b8cc <TIM_OC2_SetConfig+0x110>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d113      	bne.n	800b894 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b87a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	009b      	lsls	r3, r3, #2
 800b882:	693a      	ldr	r2, [r7, #16]
 800b884:	4313      	orrs	r3, r2
 800b886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	4313      	orrs	r3, r2
 800b892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	693a      	ldr	r2, [r7, #16]
 800b898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68fa      	ldr	r2, [r7, #12]
 800b89e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	697a      	ldr	r2, [r7, #20]
 800b8ac:	621a      	str	r2, [r3, #32]
}
 800b8ae:	bf00      	nop
 800b8b0:	371c      	adds	r7, #28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr
 800b8ba:	bf00      	nop
 800b8bc:	40012c00 	.word	0x40012c00
 800b8c0:	40013400 	.word	0x40013400
 800b8c4:	40014000 	.word	0x40014000
 800b8c8:	40014400 	.word	0x40014400
 800b8cc:	40014800 	.word	0x40014800

0800b8d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b087      	sub	sp, #28
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a1b      	ldr	r3, [r3, #32]
 800b8de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	69db      	ldr	r3, [r3, #28]
 800b8f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f023 0303 	bic.w	r3, r3, #3
 800b90a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	4313      	orrs	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b91c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	021b      	lsls	r3, r3, #8
 800b924:	697a      	ldr	r2, [r7, #20]
 800b926:	4313      	orrs	r3, r2
 800b928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a27      	ldr	r2, [pc, #156]	@ (800b9cc <TIM_OC3_SetConfig+0xfc>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d003      	beq.n	800b93a <TIM_OC3_SetConfig+0x6a>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a26      	ldr	r2, [pc, #152]	@ (800b9d0 <TIM_OC3_SetConfig+0x100>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d10d      	bne.n	800b956 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	021b      	lsls	r3, r3, #8
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	4a1c      	ldr	r2, [pc, #112]	@ (800b9cc <TIM_OC3_SetConfig+0xfc>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d00f      	beq.n	800b97e <TIM_OC3_SetConfig+0xae>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4a1b      	ldr	r2, [pc, #108]	@ (800b9d0 <TIM_OC3_SetConfig+0x100>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d00b      	beq.n	800b97e <TIM_OC3_SetConfig+0xae>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a1a      	ldr	r2, [pc, #104]	@ (800b9d4 <TIM_OC3_SetConfig+0x104>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d007      	beq.n	800b97e <TIM_OC3_SetConfig+0xae>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a19      	ldr	r2, [pc, #100]	@ (800b9d8 <TIM_OC3_SetConfig+0x108>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d003      	beq.n	800b97e <TIM_OC3_SetConfig+0xae>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a18      	ldr	r2, [pc, #96]	@ (800b9dc <TIM_OC3_SetConfig+0x10c>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d113      	bne.n	800b9a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b98c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	695b      	ldr	r3, [r3, #20]
 800b992:	011b      	lsls	r3, r3, #4
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	4313      	orrs	r3, r2
 800b998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	011b      	lsls	r3, r3, #4
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	697a      	ldr	r2, [r7, #20]
 800b9be:	621a      	str	r2, [r3, #32]
}
 800b9c0:	bf00      	nop
 800b9c2:	371c      	adds	r7, #28
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	40012c00 	.word	0x40012c00
 800b9d0:	40013400 	.word	0x40013400
 800b9d4:	40014000 	.word	0x40014000
 800b9d8:	40014400 	.word	0x40014400
 800b9dc:	40014800 	.word	0x40014800

0800b9e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6a1b      	ldr	r3, [r3, #32]
 800b9ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	6a1b      	ldr	r3, [r3, #32]
 800b9f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	021b      	lsls	r3, r3, #8
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	4313      	orrs	r3, r2
 800ba26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ba2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	031b      	lsls	r3, r3, #12
 800ba36:	693a      	ldr	r2, [r7, #16]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a18      	ldr	r2, [pc, #96]	@ (800baa0 <TIM_OC4_SetConfig+0xc0>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d00f      	beq.n	800ba64 <TIM_OC4_SetConfig+0x84>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a17      	ldr	r2, [pc, #92]	@ (800baa4 <TIM_OC4_SetConfig+0xc4>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d00b      	beq.n	800ba64 <TIM_OC4_SetConfig+0x84>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a16      	ldr	r2, [pc, #88]	@ (800baa8 <TIM_OC4_SetConfig+0xc8>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d007      	beq.n	800ba64 <TIM_OC4_SetConfig+0x84>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4a15      	ldr	r2, [pc, #84]	@ (800baac <TIM_OC4_SetConfig+0xcc>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d003      	beq.n	800ba64 <TIM_OC4_SetConfig+0x84>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4a14      	ldr	r2, [pc, #80]	@ (800bab0 <TIM_OC4_SetConfig+0xd0>)
 800ba60:	4293      	cmp	r3, r2
 800ba62:	d109      	bne.n	800ba78 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	695b      	ldr	r3, [r3, #20]
 800ba70:	019b      	lsls	r3, r3, #6
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	685a      	ldr	r2, [r3, #4]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	621a      	str	r2, [r3, #32]
}
 800ba92:	bf00      	nop
 800ba94:	371c      	adds	r7, #28
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	40012c00 	.word	0x40012c00
 800baa4:	40013400 	.word	0x40013400
 800baa8:	40014000 	.word	0x40014000
 800baac:	40014400 	.word	0x40014400
 800bab0:	40014800 	.word	0x40014800

0800bab4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6a1b      	ldr	r3, [r3, #32]
 800bac2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	68fa      	ldr	r2, [r7, #12]
 800baee:	4313      	orrs	r3, r2
 800baf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800baf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	041b      	lsls	r3, r3, #16
 800bb00:	693a      	ldr	r2, [r7, #16]
 800bb02:	4313      	orrs	r3, r2
 800bb04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a17      	ldr	r2, [pc, #92]	@ (800bb68 <TIM_OC5_SetConfig+0xb4>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d00f      	beq.n	800bb2e <TIM_OC5_SetConfig+0x7a>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a16      	ldr	r2, [pc, #88]	@ (800bb6c <TIM_OC5_SetConfig+0xb8>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d00b      	beq.n	800bb2e <TIM_OC5_SetConfig+0x7a>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a15      	ldr	r2, [pc, #84]	@ (800bb70 <TIM_OC5_SetConfig+0xbc>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d007      	beq.n	800bb2e <TIM_OC5_SetConfig+0x7a>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a14      	ldr	r2, [pc, #80]	@ (800bb74 <TIM_OC5_SetConfig+0xc0>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d003      	beq.n	800bb2e <TIM_OC5_SetConfig+0x7a>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a13      	ldr	r2, [pc, #76]	@ (800bb78 <TIM_OC5_SetConfig+0xc4>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d109      	bne.n	800bb42 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	695b      	ldr	r3, [r3, #20]
 800bb3a:	021b      	lsls	r3, r3, #8
 800bb3c:	697a      	ldr	r2, [r7, #20]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	685a      	ldr	r2, [r3, #4]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	621a      	str	r2, [r3, #32]
}
 800bb5c:	bf00      	nop
 800bb5e:	371c      	adds	r7, #28
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	40012c00 	.word	0x40012c00
 800bb6c:	40013400 	.word	0x40013400
 800bb70:	40014000 	.word	0x40014000
 800bb74:	40014400 	.word	0x40014400
 800bb78:	40014800 	.word	0x40014800

0800bb7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b087      	sub	sp, #28
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6a1b      	ldr	r3, [r3, #32]
 800bb8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6a1b      	ldr	r3, [r3, #32]
 800bb90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bbaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	021b      	lsls	r3, r3, #8
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bbc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	051b      	lsls	r3, r3, #20
 800bbca:	693a      	ldr	r2, [r7, #16]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a18      	ldr	r2, [pc, #96]	@ (800bc34 <TIM_OC6_SetConfig+0xb8>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d00f      	beq.n	800bbf8 <TIM_OC6_SetConfig+0x7c>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a17      	ldr	r2, [pc, #92]	@ (800bc38 <TIM_OC6_SetConfig+0xbc>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d00b      	beq.n	800bbf8 <TIM_OC6_SetConfig+0x7c>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	4a16      	ldr	r2, [pc, #88]	@ (800bc3c <TIM_OC6_SetConfig+0xc0>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d007      	beq.n	800bbf8 <TIM_OC6_SetConfig+0x7c>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	4a15      	ldr	r2, [pc, #84]	@ (800bc40 <TIM_OC6_SetConfig+0xc4>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d003      	beq.n	800bbf8 <TIM_OC6_SetConfig+0x7c>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	4a14      	ldr	r2, [pc, #80]	@ (800bc44 <TIM_OC6_SetConfig+0xc8>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d109      	bne.n	800bc0c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bbfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	029b      	lsls	r3, r3, #10
 800bc06:	697a      	ldr	r2, [r7, #20]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	693a      	ldr	r2, [r7, #16]
 800bc24:	621a      	str	r2, [r3, #32]
}
 800bc26:	bf00      	nop
 800bc28:	371c      	adds	r7, #28
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	40012c00 	.word	0x40012c00
 800bc38:	40013400 	.word	0x40013400
 800bc3c:	40014000 	.word	0x40014000
 800bc40:	40014400 	.word	0x40014400
 800bc44:	40014800 	.word	0x40014800

0800bc48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d101      	bne.n	800bc60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	e068      	b.n	800bd32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a2e      	ldr	r2, [pc, #184]	@ (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d004      	beq.n	800bc94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4a2d      	ldr	r2, [pc, #180]	@ (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d108      	bne.n	800bca6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bc9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a1e      	ldr	r2, [pc, #120]	@ (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d01d      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcd2:	d018      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a1b      	ldr	r2, [pc, #108]	@ (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d013      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a1a      	ldr	r2, [pc, #104]	@ (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d00e      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	4a18      	ldr	r2, [pc, #96]	@ (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d009      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	4a13      	ldr	r2, [pc, #76]	@ (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d004      	beq.n	800bd06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a14      	ldr	r2, [pc, #80]	@ (800bd54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d10c      	bne.n	800bd20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	68ba      	ldr	r2, [r7, #8]
 800bd14:	4313      	orrs	r3, r2
 800bd16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3714      	adds	r7, #20
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
 800bd3e:	bf00      	nop
 800bd40:	40012c00 	.word	0x40012c00
 800bd44:	40013400 	.word	0x40013400
 800bd48:	40000400 	.word	0x40000400
 800bd4c:	40000800 	.word	0x40000800
 800bd50:	40000c00 	.word	0x40000c00
 800bd54:	40014000 	.word	0x40014000

0800bd58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d101      	bne.n	800bd74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd70:	2302      	movs	r3, #2
 800bd72:	e065      	b.n	800be40 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2201      	movs	r2, #1
 800bd78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdda:	4313      	orrs	r3, r2
 800bddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	041b      	lsls	r3, r3, #16
 800bdea:	4313      	orrs	r3, r2
 800bdec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a16      	ldr	r2, [pc, #88]	@ (800be4c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d004      	beq.n	800be02 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a14      	ldr	r2, [pc, #80]	@ (800be50 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d115      	bne.n	800be2e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be0c:	051b      	lsls	r3, r3, #20
 800be0e:	4313      	orrs	r3, r2
 800be10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	69db      	ldr	r3, [r3, #28]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	4313      	orrs	r3, r2
 800be2c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800be3e:	2300      	movs	r3, #0
}
 800be40:	4618      	mov	r0, r3
 800be42:	3714      	adds	r7, #20
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr
 800be4c:	40012c00 	.word	0x40012c00
 800be50:	40013400 	.word	0x40013400

0800be54 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 800be54:	b480      	push	{r7}
 800be56:	b08b      	sub	sp, #44	@ 0x2c
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be60:	2300      	movs	r3, #0
 800be62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#else
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));
#endif /* DFSDM1_Channel0 */

  /* Check input state */
  __HAL_LOCK(htim);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d101      	bne.n	800be74 <HAL_TIMEx_ConfigBreakInput+0x20>
 800be70:	2302      	movs	r3, #2
 800be72:	e0af      	b.n	800bfd4 <HAL_TIMEx_ConfigBreakInput+0x180>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	2201      	movs	r2, #1
 800be78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	3b01      	subs	r3, #1
 800be82:	2b07      	cmp	r3, #7
 800be84:	d83a      	bhi.n	800befc <HAL_TIMEx_ConfigBreakInput+0xa8>
 800be86:	a201      	add	r2, pc, #4	@ (adr r2, 800be8c <HAL_TIMEx_ConfigBreakInput+0x38>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800bead 	.word	0x0800bead
 800be90:	0800bec1 	.word	0x0800bec1
 800be94:	0800befd 	.word	0x0800befd
 800be98:	0800bed5 	.word	0x0800bed5
 800be9c:	0800befd 	.word	0x0800befd
 800bea0:	0800befd 	.word	0x0800befd
 800bea4:	0800befd 	.word	0x0800befd
 800bea8:	0800bee9 	.word	0x0800bee9
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_OR2_BKINE;
 800beac:	2301      	movs	r3, #1
 800beae:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKINE_Pos;
 800beb0:	2300      	movs	r3, #0
 800beb2:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKINP;
 800beb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800beb8:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKINP_Pos;
 800beba:	2309      	movs	r3, #9
 800bebc:	613b      	str	r3, [r7, #16]
      break;
 800bebe:	e026      	b.n	800bf0e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP1E;
 800bec0:	2302      	movs	r3, #2
 800bec2:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP1E_Pos;
 800bec4:	2301      	movs	r3, #1
 800bec6:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP1P;
 800bec8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800becc:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP1P_Pos;
 800bece:	230a      	movs	r3, #10
 800bed0:	613b      	str	r3, [r7, #16]
      break;
 800bed2:	e01c      	b.n	800bf0e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_OR2_BKCMP2E;
 800bed4:	2304      	movs	r3, #4
 800bed6:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKCMP2E_Pos;
 800bed8:	2302      	movs	r3, #2
 800beda:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = TIM1_OR2_BKCMP2P;
 800bedc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bee0:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = TIM1_OR2_BKCMP2P_Pos;
 800bee2:	230b      	movs	r3, #11
 800bee4:	613b      	str	r3, [r7, #16]
      break;
 800bee6:	e012      	b.n	800bf0e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#if defined(DFSDM1_Channel0)
    case TIM_BREAKINPUTSOURCE_DFSDM1:
    {
      bkin_enable_mask = TIM1_OR2_BKDF1BK0E;
 800bee8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800beec:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = TIM1_OR2_BKDF1BK0E_Pos;
 800beee:	2308      	movs	r3, #8
 800bef0:	617b      	str	r3, [r7, #20]
      bkin_polarity_mask = 0U;
 800bef2:	2300      	movs	r3, #0
 800bef4:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800bef6:	2300      	movs	r3, #0
 800bef8:	613b      	str	r3, [r7, #16]
      break;
 800befa:	e008      	b.n	800bf0e <HAL_TIMEx_ConfigBreakInput+0xba>
    }
#endif /* DFSDM1_Channel0 */

    default:
    {
      bkin_enable_mask = 0U;
 800befc:	2300      	movs	r3, #0
 800befe:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = 0U;
 800bf00:	2300      	movs	r3, #0
 800bf02:	61bb      	str	r3, [r7, #24]
      bkin_enable_bitpos = 0U;
 800bf04:	2300      	movs	r3, #0
 800bf06:	617b      	str	r3, [r7, #20]
      bkin_polarity_bitpos = 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	613b      	str	r3, [r7, #16]
      break;
 800bf0c:	bf00      	nop
    }
  }

  switch (BreakInput)
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d003      	beq.n	800bf1c <HAL_TIMEx_ConfigBreakInput+0xc8>
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	2b02      	cmp	r3, #2
 800bf18:	d029      	beq.n	800bf6e <HAL_TIMEx_ConfigBreakInput+0x11a>
 800bf1a:	e051      	b.n	800bfc0 <HAL_TIMEx_ConfigBreakInput+0x16c>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_OR2 register value */
      tmporx = htim->Instance->OR2;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf22:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	43db      	mvns	r3, r3
 800bf28:	6a3a      	ldr	r2, [r7, #32]
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	409a      	lsls	r2, r3
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	4013      	ands	r3, r2
 800bf3a:	6a3a      	ldr	r2, [r7, #32]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b08      	cmp	r3, #8
 800bf46:	d00d      	beq.n	800bf64 <HAL_TIMEx_ConfigBreakInput+0x110>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	43db      	mvns	r3, r3
 800bf4c:	6a3a      	ldr	r2, [r7, #32]
 800bf4e:	4013      	ands	r3, r2
 800bf50:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	689a      	ldr	r2, [r3, #8]
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	409a      	lsls	r2, r3
 800bf5a:	69bb      	ldr	r3, [r7, #24]
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	6a3a      	ldr	r2, [r7, #32]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR2 */
      htim->Instance->OR2 = tmporx;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6a3a      	ldr	r2, [r7, #32]
 800bf6a:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800bf6c:	e02c      	b.n	800bfc8 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_OR3 register value */
      tmporx = htim->Instance->OR3;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf74:	623b      	str	r3, [r7, #32]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	43db      	mvns	r3, r3
 800bf7a:	6a3a      	ldr	r2, [r7, #32]
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	623b      	str	r3, [r7, #32]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	409a      	lsls	r2, r3
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	6a3a      	ldr	r2, [r7, #32]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	623b      	str	r3, [r7, #32]

      /* Set the break input polarity */
#if defined(DFSDM1_Channel0)
      if (sBreakInputConfig->Source != TIM_BREAKINPUTSOURCE_DFSDM1)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2b08      	cmp	r3, #8
 800bf98:	d00d      	beq.n	800bfb6 <HAL_TIMEx_ConfigBreakInput+0x162>
#endif /* DFSDM1_Channel0 */
      {
        tmporx &= ~bkin_polarity_mask;
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	43db      	mvns	r3, r3
 800bf9e:	6a3a      	ldr	r2, [r7, #32]
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	623b      	str	r3, [r7, #32]
        tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689a      	ldr	r2, [r3, #8]
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	409a      	lsls	r2, r3
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	4013      	ands	r3, r2
 800bfb0:	6a3a      	ldr	r2, [r7, #32]
 800bfb2:	4313      	orrs	r3, r2
 800bfb4:	623b      	str	r3, [r7, #32]
      }

      /* Set TIMx_OR3 */
      htim->Instance->OR3 = tmporx;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6a3a      	ldr	r2, [r7, #32]
 800bfbc:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800bfbe:	e003      	b.n	800bfc8 <HAL_TIMEx_ConfigBreakInput+0x174>
    }
    default:
      status = HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800bfc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bfd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	372c      	adds	r7, #44	@ 0x2c
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d101      	bne.n	800bff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e042      	b.n	800c078 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d106      	bne.n	800c00a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f7f6 ffe1 	bl	8002fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2224      	movs	r2, #36	@ 0x24
 800c00e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f022 0201 	bic.w	r2, r2, #1
 800c020:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c026:	2b00      	cmp	r3, #0
 800c028:	d002      	beq.n	800c030 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fbb2 	bl	800c794 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f8b3 	bl	800c19c <UART_SetConfig>
 800c036:	4603      	mov	r3, r0
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d101      	bne.n	800c040 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e01b      	b.n	800c078 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c04e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689a      	ldr	r2, [r3, #8]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c05e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f042 0201 	orr.w	r2, r2, #1
 800c06e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fc31 	bl	800c8d8 <UART_CheckIdleState>
 800c076:	4603      	mov	r3, r0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}

0800c080 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08a      	sub	sp, #40	@ 0x28
 800c084:	af02      	add	r7, sp, #8
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	603b      	str	r3, [r7, #0]
 800c08c:	4613      	mov	r3, r2
 800c08e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c096:	2b20      	cmp	r3, #32
 800c098:	d17b      	bne.n	800c192 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d002      	beq.n	800c0a6 <HAL_UART_Transmit+0x26>
 800c0a0:	88fb      	ldrh	r3, [r7, #6]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e074      	b.n	800c194 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2221      	movs	r2, #33	@ 0x21
 800c0b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c0ba:	f7f9 fab3 	bl	8005624 <HAL_GetTick>
 800c0be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	88fa      	ldrh	r2, [r7, #6]
 800c0c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	88fa      	ldrh	r2, [r7, #6]
 800c0cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	689b      	ldr	r3, [r3, #8]
 800c0d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0d8:	d108      	bne.n	800c0ec <HAL_UART_Transmit+0x6c>
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d104      	bne.n	800c0ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	61bb      	str	r3, [r7, #24]
 800c0ea:	e003      	b.n	800c0f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c0f4:	e030      	b.n	800c158 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	2180      	movs	r1, #128	@ 0x80
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f000 fc93 	bl	800ca2c <UART_WaitOnFlagUntilTimeout>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d005      	beq.n	800c118 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2220      	movs	r2, #32
 800c110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e03d      	b.n	800c194 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d10b      	bne.n	800c136 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	881a      	ldrh	r2, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c12a:	b292      	uxth	r2, r2
 800c12c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	3302      	adds	r3, #2
 800c132:	61bb      	str	r3, [r7, #24]
 800c134:	e007      	b.n	800c146 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	781a      	ldrb	r2, [r3, #0]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c140:	69fb      	ldr	r3, [r7, #28]
 800c142:	3301      	adds	r3, #1
 800c144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	3b01      	subs	r3, #1
 800c150:	b29a      	uxth	r2, r3
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c15e:	b29b      	uxth	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1c8      	bne.n	800c0f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	2200      	movs	r2, #0
 800c16c:	2140      	movs	r1, #64	@ 0x40
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f000 fc5c 	bl	800ca2c <UART_WaitOnFlagUntilTimeout>
 800c174:	4603      	mov	r3, r0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d005      	beq.n	800c186 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c182:	2303      	movs	r3, #3
 800c184:	e006      	b.n	800c194 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2220      	movs	r2, #32
 800c18a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	e000      	b.n	800c194 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c192:	2302      	movs	r3, #2
  }
}
 800c194:	4618      	mov	r0, r3
 800c196:	3720      	adds	r7, #32
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c19c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1a0:	b08c      	sub	sp, #48	@ 0x30
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	695b      	ldr	r3, [r3, #20]
 800c1ba:	431a      	orrs	r2, r3
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	69db      	ldr	r3, [r3, #28]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	4baa      	ldr	r3, [pc, #680]	@ (800c474 <UART_SetConfig+0x2d8>)
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	6812      	ldr	r2, [r2, #0]
 800c1d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1d4:	430b      	orrs	r3, r1
 800c1d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	430a      	orrs	r2, r1
 800c1ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a9f      	ldr	r2, [pc, #636]	@ (800c478 <UART_SetConfig+0x2dc>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d004      	beq.n	800c208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c204:	4313      	orrs	r3, r2
 800c206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c212:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	6812      	ldr	r2, [r2, #0]
 800c21a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c21c:	430b      	orrs	r3, r1
 800c21e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c226:	f023 010f 	bic.w	r1, r3, #15
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	430a      	orrs	r2, r1
 800c234:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c236:	697b      	ldr	r3, [r7, #20]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	4a90      	ldr	r2, [pc, #576]	@ (800c47c <UART_SetConfig+0x2e0>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d125      	bne.n	800c28c <UART_SetConfig+0xf0>
 800c240:	4b8f      	ldr	r3, [pc, #572]	@ (800c480 <UART_SetConfig+0x2e4>)
 800c242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c246:	f003 0303 	and.w	r3, r3, #3
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d81a      	bhi.n	800c284 <UART_SetConfig+0xe8>
 800c24e:	a201      	add	r2, pc, #4	@ (adr r2, 800c254 <UART_SetConfig+0xb8>)
 800c250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c254:	0800c265 	.word	0x0800c265
 800c258:	0800c275 	.word	0x0800c275
 800c25c:	0800c26d 	.word	0x0800c26d
 800c260:	0800c27d 	.word	0x0800c27d
 800c264:	2301      	movs	r3, #1
 800c266:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c26a:	e116      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c26c:	2302      	movs	r3, #2
 800c26e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c272:	e112      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c274:	2304      	movs	r3, #4
 800c276:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c27a:	e10e      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c27c:	2308      	movs	r3, #8
 800c27e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c282:	e10a      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c284:	2310      	movs	r3, #16
 800c286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c28a:	e106      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a7c      	ldr	r2, [pc, #496]	@ (800c484 <UART_SetConfig+0x2e8>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d138      	bne.n	800c308 <UART_SetConfig+0x16c>
 800c296:	4b7a      	ldr	r3, [pc, #488]	@ (800c480 <UART_SetConfig+0x2e4>)
 800c298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c29c:	f003 030c 	and.w	r3, r3, #12
 800c2a0:	2b0c      	cmp	r3, #12
 800c2a2:	d82d      	bhi.n	800c300 <UART_SetConfig+0x164>
 800c2a4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2ac <UART_SetConfig+0x110>)
 800c2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2aa:	bf00      	nop
 800c2ac:	0800c2e1 	.word	0x0800c2e1
 800c2b0:	0800c301 	.word	0x0800c301
 800c2b4:	0800c301 	.word	0x0800c301
 800c2b8:	0800c301 	.word	0x0800c301
 800c2bc:	0800c2f1 	.word	0x0800c2f1
 800c2c0:	0800c301 	.word	0x0800c301
 800c2c4:	0800c301 	.word	0x0800c301
 800c2c8:	0800c301 	.word	0x0800c301
 800c2cc:	0800c2e9 	.word	0x0800c2e9
 800c2d0:	0800c301 	.word	0x0800c301
 800c2d4:	0800c301 	.word	0x0800c301
 800c2d8:	0800c301 	.word	0x0800c301
 800c2dc:	0800c2f9 	.word	0x0800c2f9
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2e6:	e0d8      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c2e8:	2302      	movs	r3, #2
 800c2ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2ee:	e0d4      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c2f0:	2304      	movs	r3, #4
 800c2f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2f6:	e0d0      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c2f8:	2308      	movs	r3, #8
 800c2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c2fe:	e0cc      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c300:	2310      	movs	r3, #16
 800c302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c306:	e0c8      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c308:	697b      	ldr	r3, [r7, #20]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a5e      	ldr	r2, [pc, #376]	@ (800c488 <UART_SetConfig+0x2ec>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d125      	bne.n	800c35e <UART_SetConfig+0x1c2>
 800c312:	4b5b      	ldr	r3, [pc, #364]	@ (800c480 <UART_SetConfig+0x2e4>)
 800c314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c318:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c31c:	2b30      	cmp	r3, #48	@ 0x30
 800c31e:	d016      	beq.n	800c34e <UART_SetConfig+0x1b2>
 800c320:	2b30      	cmp	r3, #48	@ 0x30
 800c322:	d818      	bhi.n	800c356 <UART_SetConfig+0x1ba>
 800c324:	2b20      	cmp	r3, #32
 800c326:	d00a      	beq.n	800c33e <UART_SetConfig+0x1a2>
 800c328:	2b20      	cmp	r3, #32
 800c32a:	d814      	bhi.n	800c356 <UART_SetConfig+0x1ba>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <UART_SetConfig+0x19a>
 800c330:	2b10      	cmp	r3, #16
 800c332:	d008      	beq.n	800c346 <UART_SetConfig+0x1aa>
 800c334:	e00f      	b.n	800c356 <UART_SetConfig+0x1ba>
 800c336:	2300      	movs	r3, #0
 800c338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c33c:	e0ad      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c33e:	2302      	movs	r3, #2
 800c340:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c344:	e0a9      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c346:	2304      	movs	r3, #4
 800c348:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c34c:	e0a5      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c34e:	2308      	movs	r3, #8
 800c350:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c354:	e0a1      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c356:	2310      	movs	r3, #16
 800c358:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c35c:	e09d      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a4a      	ldr	r2, [pc, #296]	@ (800c48c <UART_SetConfig+0x2f0>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d125      	bne.n	800c3b4 <UART_SetConfig+0x218>
 800c368:	4b45      	ldr	r3, [pc, #276]	@ (800c480 <UART_SetConfig+0x2e4>)
 800c36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c36e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c372:	2bc0      	cmp	r3, #192	@ 0xc0
 800c374:	d016      	beq.n	800c3a4 <UART_SetConfig+0x208>
 800c376:	2bc0      	cmp	r3, #192	@ 0xc0
 800c378:	d818      	bhi.n	800c3ac <UART_SetConfig+0x210>
 800c37a:	2b80      	cmp	r3, #128	@ 0x80
 800c37c:	d00a      	beq.n	800c394 <UART_SetConfig+0x1f8>
 800c37e:	2b80      	cmp	r3, #128	@ 0x80
 800c380:	d814      	bhi.n	800c3ac <UART_SetConfig+0x210>
 800c382:	2b00      	cmp	r3, #0
 800c384:	d002      	beq.n	800c38c <UART_SetConfig+0x1f0>
 800c386:	2b40      	cmp	r3, #64	@ 0x40
 800c388:	d008      	beq.n	800c39c <UART_SetConfig+0x200>
 800c38a:	e00f      	b.n	800c3ac <UART_SetConfig+0x210>
 800c38c:	2300      	movs	r3, #0
 800c38e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c392:	e082      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c394:	2302      	movs	r3, #2
 800c396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c39a:	e07e      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c39c:	2304      	movs	r3, #4
 800c39e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3a2:	e07a      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c3a4:	2308      	movs	r3, #8
 800c3a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3aa:	e076      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c3ac:	2310      	movs	r3, #16
 800c3ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3b2:	e072      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a35      	ldr	r2, [pc, #212]	@ (800c490 <UART_SetConfig+0x2f4>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d12a      	bne.n	800c414 <UART_SetConfig+0x278>
 800c3be:	4b30      	ldr	r3, [pc, #192]	@ (800c480 <UART_SetConfig+0x2e4>)
 800c3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c3c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3cc:	d01a      	beq.n	800c404 <UART_SetConfig+0x268>
 800c3ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3d2:	d81b      	bhi.n	800c40c <UART_SetConfig+0x270>
 800c3d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3d8:	d00c      	beq.n	800c3f4 <UART_SetConfig+0x258>
 800c3da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3de:	d815      	bhi.n	800c40c <UART_SetConfig+0x270>
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d003      	beq.n	800c3ec <UART_SetConfig+0x250>
 800c3e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3e8:	d008      	beq.n	800c3fc <UART_SetConfig+0x260>
 800c3ea:	e00f      	b.n	800c40c <UART_SetConfig+0x270>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3f2:	e052      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c3f4:	2302      	movs	r3, #2
 800c3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c3fa:	e04e      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c3fc:	2304      	movs	r3, #4
 800c3fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c402:	e04a      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c404:	2308      	movs	r3, #8
 800c406:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c40a:	e046      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c40c:	2310      	movs	r3, #16
 800c40e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c412:	e042      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a17      	ldr	r2, [pc, #92]	@ (800c478 <UART_SetConfig+0x2dc>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d13a      	bne.n	800c494 <UART_SetConfig+0x2f8>
 800c41e:	4b18      	ldr	r3, [pc, #96]	@ (800c480 <UART_SetConfig+0x2e4>)
 800c420:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c424:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c428:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c42c:	d01a      	beq.n	800c464 <UART_SetConfig+0x2c8>
 800c42e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c432:	d81b      	bhi.n	800c46c <UART_SetConfig+0x2d0>
 800c434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c438:	d00c      	beq.n	800c454 <UART_SetConfig+0x2b8>
 800c43a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c43e:	d815      	bhi.n	800c46c <UART_SetConfig+0x2d0>
 800c440:	2b00      	cmp	r3, #0
 800c442:	d003      	beq.n	800c44c <UART_SetConfig+0x2b0>
 800c444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c448:	d008      	beq.n	800c45c <UART_SetConfig+0x2c0>
 800c44a:	e00f      	b.n	800c46c <UART_SetConfig+0x2d0>
 800c44c:	2300      	movs	r3, #0
 800c44e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c452:	e022      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c454:	2302      	movs	r3, #2
 800c456:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c45a:	e01e      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c45c:	2304      	movs	r3, #4
 800c45e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c462:	e01a      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c464:	2308      	movs	r3, #8
 800c466:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c46a:	e016      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c46c:	2310      	movs	r3, #16
 800c46e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c472:	e012      	b.n	800c49a <UART_SetConfig+0x2fe>
 800c474:	cfff69f3 	.word	0xcfff69f3
 800c478:	40008000 	.word	0x40008000
 800c47c:	40013800 	.word	0x40013800
 800c480:	40021000 	.word	0x40021000
 800c484:	40004400 	.word	0x40004400
 800c488:	40004800 	.word	0x40004800
 800c48c:	40004c00 	.word	0x40004c00
 800c490:	40005000 	.word	0x40005000
 800c494:	2310      	movs	r3, #16
 800c496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4aae      	ldr	r2, [pc, #696]	@ (800c758 <UART_SetConfig+0x5bc>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	f040 8097 	bne.w	800c5d4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c4a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c4aa:	2b08      	cmp	r3, #8
 800c4ac:	d823      	bhi.n	800c4f6 <UART_SetConfig+0x35a>
 800c4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c4b4 <UART_SetConfig+0x318>)
 800c4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4b4:	0800c4d9 	.word	0x0800c4d9
 800c4b8:	0800c4f7 	.word	0x0800c4f7
 800c4bc:	0800c4e1 	.word	0x0800c4e1
 800c4c0:	0800c4f7 	.word	0x0800c4f7
 800c4c4:	0800c4e7 	.word	0x0800c4e7
 800c4c8:	0800c4f7 	.word	0x0800c4f7
 800c4cc:	0800c4f7 	.word	0x0800c4f7
 800c4d0:	0800c4f7 	.word	0x0800c4f7
 800c4d4:	0800c4ef 	.word	0x0800c4ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c4d8:	f7fc f998 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 800c4dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c4de:	e010      	b.n	800c502 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c4e0:	4b9e      	ldr	r3, [pc, #632]	@ (800c75c <UART_SetConfig+0x5c0>)
 800c4e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c4e4:	e00d      	b.n	800c502 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c4e6:	f7fc f8f9 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 800c4ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c4ec:	e009      	b.n	800c502 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c4f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c4f4:	e005      	b.n	800c502 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c500:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c504:	2b00      	cmp	r3, #0
 800c506:	f000 8130 	beq.w	800c76a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c50e:	4a94      	ldr	r2, [pc, #592]	@ (800c760 <UART_SetConfig+0x5c4>)
 800c510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c514:	461a      	mov	r2, r3
 800c516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c518:	fbb3 f3f2 	udiv	r3, r3, r2
 800c51c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	685a      	ldr	r2, [r3, #4]
 800c522:	4613      	mov	r3, r2
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	4413      	add	r3, r2
 800c528:	69ba      	ldr	r2, [r7, #24]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d305      	bcc.n	800c53a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c52e:	697b      	ldr	r3, [r7, #20]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c534:	69ba      	ldr	r2, [r7, #24]
 800c536:	429a      	cmp	r2, r3
 800c538:	d903      	bls.n	800c542 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c540:	e113      	b.n	800c76a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c544:	2200      	movs	r2, #0
 800c546:	60bb      	str	r3, [r7, #8]
 800c548:	60fa      	str	r2, [r7, #12]
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c54e:	4a84      	ldr	r2, [pc, #528]	@ (800c760 <UART_SetConfig+0x5c4>)
 800c550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c554:	b29b      	uxth	r3, r3
 800c556:	2200      	movs	r2, #0
 800c558:	603b      	str	r3, [r7, #0]
 800c55a:	607a      	str	r2, [r7, #4]
 800c55c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c560:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c564:	f7f4 fb38 	bl	8000bd8 <__aeabi_uldivmod>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	4610      	mov	r0, r2
 800c56e:	4619      	mov	r1, r3
 800c570:	f04f 0200 	mov.w	r2, #0
 800c574:	f04f 0300 	mov.w	r3, #0
 800c578:	020b      	lsls	r3, r1, #8
 800c57a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c57e:	0202      	lsls	r2, r0, #8
 800c580:	6979      	ldr	r1, [r7, #20]
 800c582:	6849      	ldr	r1, [r1, #4]
 800c584:	0849      	lsrs	r1, r1, #1
 800c586:	2000      	movs	r0, #0
 800c588:	460c      	mov	r4, r1
 800c58a:	4605      	mov	r5, r0
 800c58c:	eb12 0804 	adds.w	r8, r2, r4
 800c590:	eb43 0905 	adc.w	r9, r3, r5
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	469a      	mov	sl, r3
 800c59c:	4693      	mov	fp, r2
 800c59e:	4652      	mov	r2, sl
 800c5a0:	465b      	mov	r3, fp
 800c5a2:	4640      	mov	r0, r8
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	f7f4 fb17 	bl	8000bd8 <__aeabi_uldivmod>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	4613      	mov	r3, r2
 800c5b0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5b2:	6a3b      	ldr	r3, [r7, #32]
 800c5b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5b8:	d308      	bcc.n	800c5cc <UART_SetConfig+0x430>
 800c5ba:	6a3b      	ldr	r3, [r7, #32]
 800c5bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5c0:	d204      	bcs.n	800c5cc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6a3a      	ldr	r2, [r7, #32]
 800c5c8:	60da      	str	r2, [r3, #12]
 800c5ca:	e0ce      	b.n	800c76a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c5d2:	e0ca      	b.n	800c76a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	69db      	ldr	r3, [r3, #28]
 800c5d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5dc:	d166      	bne.n	800c6ac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800c5de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c5e2:	2b08      	cmp	r3, #8
 800c5e4:	d827      	bhi.n	800c636 <UART_SetConfig+0x49a>
 800c5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5ec <UART_SetConfig+0x450>)
 800c5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ec:	0800c611 	.word	0x0800c611
 800c5f0:	0800c619 	.word	0x0800c619
 800c5f4:	0800c621 	.word	0x0800c621
 800c5f8:	0800c637 	.word	0x0800c637
 800c5fc:	0800c627 	.word	0x0800c627
 800c600:	0800c637 	.word	0x0800c637
 800c604:	0800c637 	.word	0x0800c637
 800c608:	0800c637 	.word	0x0800c637
 800c60c:	0800c62f 	.word	0x0800c62f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c610:	f7fc f8fc 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 800c614:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c616:	e014      	b.n	800c642 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c618:	f7fc f90e 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 800c61c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c61e:	e010      	b.n	800c642 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c620:	4b4e      	ldr	r3, [pc, #312]	@ (800c75c <UART_SetConfig+0x5c0>)
 800c622:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c624:	e00d      	b.n	800c642 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c626:	f7fc f859 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 800c62a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c62c:	e009      	b.n	800c642 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c62e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c632:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c634:	e005      	b.n	800c642 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800c636:	2300      	movs	r3, #0
 800c638:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c63a:	2301      	movs	r3, #1
 800c63c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c640:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	2b00      	cmp	r3, #0
 800c646:	f000 8090 	beq.w	800c76a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c64e:	4a44      	ldr	r2, [pc, #272]	@ (800c760 <UART_SetConfig+0x5c4>)
 800c650:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c654:	461a      	mov	r2, r3
 800c656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c658:	fbb3 f3f2 	udiv	r3, r3, r2
 800c65c:	005a      	lsls	r2, r3, #1
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	085b      	lsrs	r3, r3, #1
 800c664:	441a      	add	r2, r3
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c66e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c670:	6a3b      	ldr	r3, [r7, #32]
 800c672:	2b0f      	cmp	r3, #15
 800c674:	d916      	bls.n	800c6a4 <UART_SetConfig+0x508>
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c67c:	d212      	bcs.n	800c6a4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	b29b      	uxth	r3, r3
 800c682:	f023 030f 	bic.w	r3, r3, #15
 800c686:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	085b      	lsrs	r3, r3, #1
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	b29a      	uxth	r2, r3
 800c694:	8bfb      	ldrh	r3, [r7, #30]
 800c696:	4313      	orrs	r3, r2
 800c698:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	8bfa      	ldrh	r2, [r7, #30]
 800c6a0:	60da      	str	r2, [r3, #12]
 800c6a2:	e062      	b.n	800c76a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c6aa:	e05e      	b.n	800c76a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c6ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c6b0:	2b08      	cmp	r3, #8
 800c6b2:	d828      	bhi.n	800c706 <UART_SetConfig+0x56a>
 800c6b4:	a201      	add	r2, pc, #4	@ (adr r2, 800c6bc <UART_SetConfig+0x520>)
 800c6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ba:	bf00      	nop
 800c6bc:	0800c6e1 	.word	0x0800c6e1
 800c6c0:	0800c6e9 	.word	0x0800c6e9
 800c6c4:	0800c6f1 	.word	0x0800c6f1
 800c6c8:	0800c707 	.word	0x0800c707
 800c6cc:	0800c6f7 	.word	0x0800c6f7
 800c6d0:	0800c707 	.word	0x0800c707
 800c6d4:	0800c707 	.word	0x0800c707
 800c6d8:	0800c707 	.word	0x0800c707
 800c6dc:	0800c6ff 	.word	0x0800c6ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c6e0:	f7fc f894 	bl	800880c <HAL_RCC_GetPCLK1Freq>
 800c6e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c6e6:	e014      	b.n	800c712 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6e8:	f7fc f8a6 	bl	8008838 <HAL_RCC_GetPCLK2Freq>
 800c6ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c6ee:	e010      	b.n	800c712 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c6f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c75c <UART_SetConfig+0x5c0>)
 800c6f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c6f4:	e00d      	b.n	800c712 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c6f6:	f7fb fff1 	bl	80086dc <HAL_RCC_GetSysClockFreq>
 800c6fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c6fc:	e009      	b.n	800c712 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c702:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c704:	e005      	b.n	800c712 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800c706:	2300      	movs	r3, #0
 800c708:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c710:	bf00      	nop
    }

    if (pclk != 0U)
 800c712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c714:	2b00      	cmp	r3, #0
 800c716:	d028      	beq.n	800c76a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c71c:	4a10      	ldr	r2, [pc, #64]	@ (800c760 <UART_SetConfig+0x5c4>)
 800c71e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c722:	461a      	mov	r2, r3
 800c724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c726:	fbb3 f2f2 	udiv	r2, r3, r2
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	085b      	lsrs	r3, r3, #1
 800c730:	441a      	add	r2, r3
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	fbb2 f3f3 	udiv	r3, r2, r3
 800c73a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	2b0f      	cmp	r3, #15
 800c740:	d910      	bls.n	800c764 <UART_SetConfig+0x5c8>
 800c742:	6a3b      	ldr	r3, [r7, #32]
 800c744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c748:	d20c      	bcs.n	800c764 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	60da      	str	r2, [r3, #12]
 800c754:	e009      	b.n	800c76a <UART_SetConfig+0x5ce>
 800c756:	bf00      	nop
 800c758:	40008000 	.word	0x40008000
 800c75c:	00f42400 	.word	0x00f42400
 800c760:	08015020 	.word	0x08015020
      }
      else
      {
        ret = HAL_ERROR;
 800c764:	2301      	movs	r3, #1
 800c766:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	2201      	movs	r2, #1
 800c776:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	2200      	movs	r2, #0
 800c77e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	2200      	movs	r2, #0
 800c784:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c786:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3730      	adds	r7, #48	@ 0x30
 800c78e:	46bd      	mov	sp, r7
 800c790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c794 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7a0:	f003 0308 	and.w	r3, r3, #8
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00a      	beq.n	800c7be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00a      	beq.n	800c7e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	430a      	orrs	r2, r1
 800c7de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7e4:	f003 0302 	and.w	r3, r3, #2
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00a      	beq.n	800c802 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	430a      	orrs	r2, r1
 800c800:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c806:	f003 0304 	and.w	r3, r3, #4
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00a      	beq.n	800c824 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	430a      	orrs	r2, r1
 800c822:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c828:	f003 0310 	and.w	r3, r3, #16
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00a      	beq.n	800c846 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	430a      	orrs	r2, r1
 800c844:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c84a:	f003 0320 	and.w	r3, r3, #32
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00a      	beq.n	800c868 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	430a      	orrs	r2, r1
 800c866:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c86c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01a      	beq.n	800c8aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	430a      	orrs	r2, r1
 800c888:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c88e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c892:	d10a      	bne.n	800c8aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00a      	beq.n	800c8cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	430a      	orrs	r2, r1
 800c8ca:	605a      	str	r2, [r3, #4]
  }
}
 800c8cc:	bf00      	nop
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b098      	sub	sp, #96	@ 0x60
 800c8dc:	af02      	add	r7, sp, #8
 800c8de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8e8:	f7f8 fe9c 	bl	8005624 <HAL_GetTick>
 800c8ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f003 0308 	and.w	r3, r3, #8
 800c8f8:	2b08      	cmp	r3, #8
 800c8fa:	d12f      	bne.n	800c95c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c900:	9300      	str	r3, [sp, #0]
 800c902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c904:	2200      	movs	r2, #0
 800c906:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 f88e 	bl	800ca2c <UART_WaitOnFlagUntilTimeout>
 800c910:	4603      	mov	r3, r0
 800c912:	2b00      	cmp	r3, #0
 800c914:	d022      	beq.n	800c95c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91e:	e853 3f00 	ldrex	r3, [r3]
 800c922:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c926:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c92a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	461a      	mov	r2, r3
 800c932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c934:	647b      	str	r3, [r7, #68]	@ 0x44
 800c936:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c938:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c93a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c93c:	e841 2300 	strex	r3, r2, [r1]
 800c940:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1e6      	bne.n	800c916 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2220      	movs	r2, #32
 800c94c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c958:	2303      	movs	r3, #3
 800c95a:	e063      	b.n	800ca24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f003 0304 	and.w	r3, r3, #4
 800c966:	2b04      	cmp	r3, #4
 800c968:	d149      	bne.n	800c9fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c96a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c972:	2200      	movs	r2, #0
 800c974:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f857 	bl	800ca2c <UART_WaitOnFlagUntilTimeout>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d03c      	beq.n	800c9fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98c:	e853 3f00 	ldrex	r3, [r3]
 800c990:	623b      	str	r3, [r7, #32]
   return(result);
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c998:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c9a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9aa:	e841 2300 	strex	r3, r2, [r1]
 800c9ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1e6      	bne.n	800c984 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	3308      	adds	r3, #8
 800c9bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	e853 3f00 	ldrex	r3, [r3]
 800c9c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	f023 0301 	bic.w	r3, r3, #1
 800c9cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	3308      	adds	r3, #8
 800c9d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c9d6:	61fa      	str	r2, [r7, #28]
 800c9d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9da:	69b9      	ldr	r1, [r7, #24]
 800c9dc:	69fa      	ldr	r2, [r7, #28]
 800c9de:	e841 2300 	strex	r3, r2, [r1]
 800c9e2:	617b      	str	r3, [r7, #20]
   return(result);
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1e5      	bne.n	800c9b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2220      	movs	r2, #32
 800c9ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e012      	b.n	800ca24 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2220      	movs	r2, #32
 800ca02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2220      	movs	r2, #32
 800ca0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3758      	adds	r7, #88	@ 0x58
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	60f8      	str	r0, [r7, #12]
 800ca34:	60b9      	str	r1, [r7, #8]
 800ca36:	603b      	str	r3, [r7, #0]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca3c:	e049      	b.n	800cad2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca44:	d045      	beq.n	800cad2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca46:	f7f8 fded 	bl	8005624 <HAL_GetTick>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	1ad3      	subs	r3, r2, r3
 800ca50:	69ba      	ldr	r2, [r7, #24]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d302      	bcc.n	800ca5c <UART_WaitOnFlagUntilTimeout+0x30>
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d101      	bne.n	800ca60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca5c:	2303      	movs	r3, #3
 800ca5e:	e048      	b.n	800caf2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f003 0304 	and.w	r3, r3, #4
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d031      	beq.n	800cad2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	69db      	ldr	r3, [r3, #28]
 800ca74:	f003 0308 	and.w	r3, r3, #8
 800ca78:	2b08      	cmp	r3, #8
 800ca7a:	d110      	bne.n	800ca9e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2208      	movs	r2, #8
 800ca82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	f000 f838 	bl	800cafa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2208      	movs	r2, #8
 800ca8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e029      	b.n	800caf2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800caa8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800caac:	d111      	bne.n	800cad2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 f81e 	bl	800cafa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2220      	movs	r2, #32
 800cac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2200      	movs	r2, #0
 800caca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	e00f      	b.n	800caf2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	69da      	ldr	r2, [r3, #28]
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	4013      	ands	r3, r2
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	429a      	cmp	r2, r3
 800cae0:	bf0c      	ite	eq
 800cae2:	2301      	moveq	r3, #1
 800cae4:	2300      	movne	r3, #0
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	461a      	mov	r2, r3
 800caea:	79fb      	ldrb	r3, [r7, #7]
 800caec:	429a      	cmp	r2, r3
 800caee:	d0a6      	beq.n	800ca3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}

0800cafa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cafa:	b480      	push	{r7}
 800cafc:	b095      	sub	sp, #84	@ 0x54
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb20:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb22:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e6      	bne.n	800cb02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	3308      	adds	r3, #8
 800cb3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3c:	6a3b      	ldr	r3, [r7, #32]
 800cb3e:	e853 3f00 	ldrex	r3, [r3]
 800cb42:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cb4a:	f023 0301 	bic.w	r3, r3, #1
 800cb4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3308      	adds	r3, #8
 800cb56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb60:	e841 2300 	strex	r3, r2, [r1]
 800cb64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1e3      	bne.n	800cb34 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d118      	bne.n	800cba6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	e853 3f00 	ldrex	r3, [r3]
 800cb80:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	f023 0310 	bic.w	r3, r3, #16
 800cb88:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	461a      	mov	r2, r3
 800cb90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb92:	61bb      	str	r3, [r7, #24]
 800cb94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb96:	6979      	ldr	r1, [r7, #20]
 800cb98:	69ba      	ldr	r2, [r7, #24]
 800cb9a:	e841 2300 	strex	r3, r2, [r1]
 800cb9e:	613b      	str	r3, [r7, #16]
   return(result);
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1e6      	bne.n	800cb74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2220      	movs	r2, #32
 800cbaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cbba:	bf00      	nop
 800cbbc:	3754      	adds	r7, #84	@ 0x54
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc4:	4770      	bx	lr

0800cbc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cbc6:	b480      	push	{r7}
 800cbc8:	b085      	sub	sp, #20
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d101      	bne.n	800cbdc <HAL_UARTEx_DisableFifoMode+0x16>
 800cbd8:	2302      	movs	r3, #2
 800cbda:	e027      	b.n	800cc2c <HAL_UARTEx_DisableFifoMode+0x66>
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2201      	movs	r2, #1
 800cbe0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2224      	movs	r2, #36	@ 0x24
 800cbe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f022 0201 	bic.w	r2, r2, #1
 800cc02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cc0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2220      	movs	r2, #32
 800cc1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d101      	bne.n	800cc50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	e02d      	b.n	800ccac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2224      	movs	r2, #36	@ 0x24
 800cc5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f022 0201 	bic.w	r2, r2, #1
 800cc76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	430a      	orrs	r2, r1
 800cc8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f84f 	bl	800cd30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2220      	movs	r2, #32
 800cc9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2200      	movs	r2, #0
 800cca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d101      	bne.n	800cccc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ccc8:	2302      	movs	r3, #2
 800ccca:	e02d      	b.n	800cd28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2201      	movs	r2, #1
 800ccd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2224      	movs	r2, #36	@ 0x24
 800ccd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f022 0201 	bic.w	r2, r2, #1
 800ccf2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	430a      	orrs	r2, r1
 800cd06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f811 	bl	800cd30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2220      	movs	r2, #32
 800cd1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d108      	bne.n	800cd52 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd50:	e031      	b.n	800cdb6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd52:	2308      	movs	r3, #8
 800cd54:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd56:	2308      	movs	r3, #8
 800cd58:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	0e5b      	lsrs	r3, r3, #25
 800cd62:	b2db      	uxtb	r3, r3
 800cd64:	f003 0307 	and.w	r3, r3, #7
 800cd68:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	0f5b      	lsrs	r3, r3, #29
 800cd72:	b2db      	uxtb	r3, r3
 800cd74:	f003 0307 	and.w	r3, r3, #7
 800cd78:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd7a:	7bbb      	ldrb	r3, [r7, #14]
 800cd7c:	7b3a      	ldrb	r2, [r7, #12]
 800cd7e:	4911      	ldr	r1, [pc, #68]	@ (800cdc4 <UARTEx_SetNbDataToProcess+0x94>)
 800cd80:	5c8a      	ldrb	r2, [r1, r2]
 800cd82:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd86:	7b3a      	ldrb	r2, [r7, #12]
 800cd88:	490f      	ldr	r1, [pc, #60]	@ (800cdc8 <UARTEx_SetNbDataToProcess+0x98>)
 800cd8a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
 800cd9a:	7b7a      	ldrb	r2, [r7, #13]
 800cd9c:	4909      	ldr	r1, [pc, #36]	@ (800cdc4 <UARTEx_SetNbDataToProcess+0x94>)
 800cd9e:	5c8a      	ldrb	r2, [r1, r2]
 800cda0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cda4:	7b7a      	ldrb	r2, [r7, #13]
 800cda6:	4908      	ldr	r1, [pc, #32]	@ (800cdc8 <UARTEx_SetNbDataToProcess+0x98>)
 800cda8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdaa:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cdb6:	bf00      	nop
 800cdb8:	3714      	adds	r7, #20
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	08015038 	.word	0x08015038
 800cdc8:	08015040 	.word	0x08015040

0800cdcc <malloc>:
 800cdcc:	4b02      	ldr	r3, [pc, #8]	@ (800cdd8 <malloc+0xc>)
 800cdce:	4601      	mov	r1, r0
 800cdd0:	6818      	ldr	r0, [r3, #0]
 800cdd2:	f000 b825 	b.w	800ce20 <_malloc_r>
 800cdd6:	bf00      	nop
 800cdd8:	20000038 	.word	0x20000038

0800cddc <sbrk_aligned>:
 800cddc:	b570      	push	{r4, r5, r6, lr}
 800cdde:	4e0f      	ldr	r6, [pc, #60]	@ (800ce1c <sbrk_aligned+0x40>)
 800cde0:	460c      	mov	r4, r1
 800cde2:	6831      	ldr	r1, [r6, #0]
 800cde4:	4605      	mov	r5, r0
 800cde6:	b911      	cbnz	r1, 800cdee <sbrk_aligned+0x12>
 800cde8:	f000 fe92 	bl	800db10 <_sbrk_r>
 800cdec:	6030      	str	r0, [r6, #0]
 800cdee:	4621      	mov	r1, r4
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	f000 fe8d 	bl	800db10 <_sbrk_r>
 800cdf6:	1c43      	adds	r3, r0, #1
 800cdf8:	d103      	bne.n	800ce02 <sbrk_aligned+0x26>
 800cdfa:	f04f 34ff 	mov.w	r4, #4294967295
 800cdfe:	4620      	mov	r0, r4
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	1cc4      	adds	r4, r0, #3
 800ce04:	f024 0403 	bic.w	r4, r4, #3
 800ce08:	42a0      	cmp	r0, r4
 800ce0a:	d0f8      	beq.n	800cdfe <sbrk_aligned+0x22>
 800ce0c:	1a21      	subs	r1, r4, r0
 800ce0e:	4628      	mov	r0, r5
 800ce10:	f000 fe7e 	bl	800db10 <_sbrk_r>
 800ce14:	3001      	adds	r0, #1
 800ce16:	d1f2      	bne.n	800cdfe <sbrk_aligned+0x22>
 800ce18:	e7ef      	b.n	800cdfa <sbrk_aligned+0x1e>
 800ce1a:	bf00      	nop
 800ce1c:	200009fc 	.word	0x200009fc

0800ce20 <_malloc_r>:
 800ce20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce24:	1ccd      	adds	r5, r1, #3
 800ce26:	f025 0503 	bic.w	r5, r5, #3
 800ce2a:	3508      	adds	r5, #8
 800ce2c:	2d0c      	cmp	r5, #12
 800ce2e:	bf38      	it	cc
 800ce30:	250c      	movcc	r5, #12
 800ce32:	2d00      	cmp	r5, #0
 800ce34:	4606      	mov	r6, r0
 800ce36:	db01      	blt.n	800ce3c <_malloc_r+0x1c>
 800ce38:	42a9      	cmp	r1, r5
 800ce3a:	d904      	bls.n	800ce46 <_malloc_r+0x26>
 800ce3c:	230c      	movs	r3, #12
 800ce3e:	6033      	str	r3, [r6, #0]
 800ce40:	2000      	movs	r0, #0
 800ce42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf1c <_malloc_r+0xfc>
 800ce4a:	f000 f869 	bl	800cf20 <__malloc_lock>
 800ce4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ce52:	461c      	mov	r4, r3
 800ce54:	bb44      	cbnz	r4, 800cea8 <_malloc_r+0x88>
 800ce56:	4629      	mov	r1, r5
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f7ff ffbf 	bl	800cddc <sbrk_aligned>
 800ce5e:	1c43      	adds	r3, r0, #1
 800ce60:	4604      	mov	r4, r0
 800ce62:	d158      	bne.n	800cf16 <_malloc_r+0xf6>
 800ce64:	f8d8 4000 	ldr.w	r4, [r8]
 800ce68:	4627      	mov	r7, r4
 800ce6a:	2f00      	cmp	r7, #0
 800ce6c:	d143      	bne.n	800cef6 <_malloc_r+0xd6>
 800ce6e:	2c00      	cmp	r4, #0
 800ce70:	d04b      	beq.n	800cf0a <_malloc_r+0xea>
 800ce72:	6823      	ldr	r3, [r4, #0]
 800ce74:	4639      	mov	r1, r7
 800ce76:	4630      	mov	r0, r6
 800ce78:	eb04 0903 	add.w	r9, r4, r3
 800ce7c:	f000 fe48 	bl	800db10 <_sbrk_r>
 800ce80:	4581      	cmp	r9, r0
 800ce82:	d142      	bne.n	800cf0a <_malloc_r+0xea>
 800ce84:	6821      	ldr	r1, [r4, #0]
 800ce86:	1a6d      	subs	r5, r5, r1
 800ce88:	4629      	mov	r1, r5
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	f7ff ffa6 	bl	800cddc <sbrk_aligned>
 800ce90:	3001      	adds	r0, #1
 800ce92:	d03a      	beq.n	800cf0a <_malloc_r+0xea>
 800ce94:	6823      	ldr	r3, [r4, #0]
 800ce96:	442b      	add	r3, r5
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce9e:	685a      	ldr	r2, [r3, #4]
 800cea0:	bb62      	cbnz	r2, 800cefc <_malloc_r+0xdc>
 800cea2:	f8c8 7000 	str.w	r7, [r8]
 800cea6:	e00f      	b.n	800cec8 <_malloc_r+0xa8>
 800cea8:	6822      	ldr	r2, [r4, #0]
 800ceaa:	1b52      	subs	r2, r2, r5
 800ceac:	d420      	bmi.n	800cef0 <_malloc_r+0xd0>
 800ceae:	2a0b      	cmp	r2, #11
 800ceb0:	d917      	bls.n	800cee2 <_malloc_r+0xc2>
 800ceb2:	1961      	adds	r1, r4, r5
 800ceb4:	42a3      	cmp	r3, r4
 800ceb6:	6025      	str	r5, [r4, #0]
 800ceb8:	bf18      	it	ne
 800ceba:	6059      	strne	r1, [r3, #4]
 800cebc:	6863      	ldr	r3, [r4, #4]
 800cebe:	bf08      	it	eq
 800cec0:	f8c8 1000 	streq.w	r1, [r8]
 800cec4:	5162      	str	r2, [r4, r5]
 800cec6:	604b      	str	r3, [r1, #4]
 800cec8:	4630      	mov	r0, r6
 800ceca:	f000 f82f 	bl	800cf2c <__malloc_unlock>
 800cece:	f104 000b 	add.w	r0, r4, #11
 800ced2:	1d23      	adds	r3, r4, #4
 800ced4:	f020 0007 	bic.w	r0, r0, #7
 800ced8:	1ac2      	subs	r2, r0, r3
 800ceda:	bf1c      	itt	ne
 800cedc:	1a1b      	subne	r3, r3, r0
 800cede:	50a3      	strne	r3, [r4, r2]
 800cee0:	e7af      	b.n	800ce42 <_malloc_r+0x22>
 800cee2:	6862      	ldr	r2, [r4, #4]
 800cee4:	42a3      	cmp	r3, r4
 800cee6:	bf0c      	ite	eq
 800cee8:	f8c8 2000 	streq.w	r2, [r8]
 800ceec:	605a      	strne	r2, [r3, #4]
 800ceee:	e7eb      	b.n	800cec8 <_malloc_r+0xa8>
 800cef0:	4623      	mov	r3, r4
 800cef2:	6864      	ldr	r4, [r4, #4]
 800cef4:	e7ae      	b.n	800ce54 <_malloc_r+0x34>
 800cef6:	463c      	mov	r4, r7
 800cef8:	687f      	ldr	r7, [r7, #4]
 800cefa:	e7b6      	b.n	800ce6a <_malloc_r+0x4a>
 800cefc:	461a      	mov	r2, r3
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	42a3      	cmp	r3, r4
 800cf02:	d1fb      	bne.n	800cefc <_malloc_r+0xdc>
 800cf04:	2300      	movs	r3, #0
 800cf06:	6053      	str	r3, [r2, #4]
 800cf08:	e7de      	b.n	800cec8 <_malloc_r+0xa8>
 800cf0a:	230c      	movs	r3, #12
 800cf0c:	6033      	str	r3, [r6, #0]
 800cf0e:	4630      	mov	r0, r6
 800cf10:	f000 f80c 	bl	800cf2c <__malloc_unlock>
 800cf14:	e794      	b.n	800ce40 <_malloc_r+0x20>
 800cf16:	6005      	str	r5, [r0, #0]
 800cf18:	e7d6      	b.n	800cec8 <_malloc_r+0xa8>
 800cf1a:	bf00      	nop
 800cf1c:	20000a00 	.word	0x20000a00

0800cf20 <__malloc_lock>:
 800cf20:	4801      	ldr	r0, [pc, #4]	@ (800cf28 <__malloc_lock+0x8>)
 800cf22:	f000 be42 	b.w	800dbaa <__retarget_lock_acquire_recursive>
 800cf26:	bf00      	nop
 800cf28:	20000b44 	.word	0x20000b44

0800cf2c <__malloc_unlock>:
 800cf2c:	4801      	ldr	r0, [pc, #4]	@ (800cf34 <__malloc_unlock+0x8>)
 800cf2e:	f000 be3d 	b.w	800dbac <__retarget_lock_release_recursive>
 800cf32:	bf00      	nop
 800cf34:	20000b44 	.word	0x20000b44

0800cf38 <__cvt>:
 800cf38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf3c:	ec57 6b10 	vmov	r6, r7, d0
 800cf40:	2f00      	cmp	r7, #0
 800cf42:	460c      	mov	r4, r1
 800cf44:	4619      	mov	r1, r3
 800cf46:	463b      	mov	r3, r7
 800cf48:	bfbb      	ittet	lt
 800cf4a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cf4e:	461f      	movlt	r7, r3
 800cf50:	2300      	movge	r3, #0
 800cf52:	232d      	movlt	r3, #45	@ 0x2d
 800cf54:	700b      	strb	r3, [r1, #0]
 800cf56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cf58:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cf5c:	4691      	mov	r9, r2
 800cf5e:	f023 0820 	bic.w	r8, r3, #32
 800cf62:	bfbc      	itt	lt
 800cf64:	4632      	movlt	r2, r6
 800cf66:	4616      	movlt	r6, r2
 800cf68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cf6c:	d005      	beq.n	800cf7a <__cvt+0x42>
 800cf6e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cf72:	d100      	bne.n	800cf76 <__cvt+0x3e>
 800cf74:	3401      	adds	r4, #1
 800cf76:	2102      	movs	r1, #2
 800cf78:	e000      	b.n	800cf7c <__cvt+0x44>
 800cf7a:	2103      	movs	r1, #3
 800cf7c:	ab03      	add	r3, sp, #12
 800cf7e:	9301      	str	r3, [sp, #4]
 800cf80:	ab02      	add	r3, sp, #8
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	ec47 6b10 	vmov	d0, r6, r7
 800cf88:	4653      	mov	r3, sl
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	f000 fea8 	bl	800dce0 <_dtoa_r>
 800cf90:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cf94:	4605      	mov	r5, r0
 800cf96:	d119      	bne.n	800cfcc <__cvt+0x94>
 800cf98:	f019 0f01 	tst.w	r9, #1
 800cf9c:	d00e      	beq.n	800cfbc <__cvt+0x84>
 800cf9e:	eb00 0904 	add.w	r9, r0, r4
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	4630      	mov	r0, r6
 800cfa8:	4639      	mov	r1, r7
 800cfaa:	f7f3 fda5 	bl	8000af8 <__aeabi_dcmpeq>
 800cfae:	b108      	cbz	r0, 800cfb4 <__cvt+0x7c>
 800cfb0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cfb4:	2230      	movs	r2, #48	@ 0x30
 800cfb6:	9b03      	ldr	r3, [sp, #12]
 800cfb8:	454b      	cmp	r3, r9
 800cfba:	d31e      	bcc.n	800cffa <__cvt+0xc2>
 800cfbc:	9b03      	ldr	r3, [sp, #12]
 800cfbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cfc0:	1b5b      	subs	r3, r3, r5
 800cfc2:	4628      	mov	r0, r5
 800cfc4:	6013      	str	r3, [r2, #0]
 800cfc6:	b004      	add	sp, #16
 800cfc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfcc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cfd0:	eb00 0904 	add.w	r9, r0, r4
 800cfd4:	d1e5      	bne.n	800cfa2 <__cvt+0x6a>
 800cfd6:	7803      	ldrb	r3, [r0, #0]
 800cfd8:	2b30      	cmp	r3, #48	@ 0x30
 800cfda:	d10a      	bne.n	800cff2 <__cvt+0xba>
 800cfdc:	2200      	movs	r2, #0
 800cfde:	2300      	movs	r3, #0
 800cfe0:	4630      	mov	r0, r6
 800cfe2:	4639      	mov	r1, r7
 800cfe4:	f7f3 fd88 	bl	8000af8 <__aeabi_dcmpeq>
 800cfe8:	b918      	cbnz	r0, 800cff2 <__cvt+0xba>
 800cfea:	f1c4 0401 	rsb	r4, r4, #1
 800cfee:	f8ca 4000 	str.w	r4, [sl]
 800cff2:	f8da 3000 	ldr.w	r3, [sl]
 800cff6:	4499      	add	r9, r3
 800cff8:	e7d3      	b.n	800cfa2 <__cvt+0x6a>
 800cffa:	1c59      	adds	r1, r3, #1
 800cffc:	9103      	str	r1, [sp, #12]
 800cffe:	701a      	strb	r2, [r3, #0]
 800d000:	e7d9      	b.n	800cfb6 <__cvt+0x7e>

0800d002 <__exponent>:
 800d002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d004:	2900      	cmp	r1, #0
 800d006:	bfba      	itte	lt
 800d008:	4249      	neglt	r1, r1
 800d00a:	232d      	movlt	r3, #45	@ 0x2d
 800d00c:	232b      	movge	r3, #43	@ 0x2b
 800d00e:	2909      	cmp	r1, #9
 800d010:	7002      	strb	r2, [r0, #0]
 800d012:	7043      	strb	r3, [r0, #1]
 800d014:	dd29      	ble.n	800d06a <__exponent+0x68>
 800d016:	f10d 0307 	add.w	r3, sp, #7
 800d01a:	461d      	mov	r5, r3
 800d01c:	270a      	movs	r7, #10
 800d01e:	461a      	mov	r2, r3
 800d020:	fbb1 f6f7 	udiv	r6, r1, r7
 800d024:	fb07 1416 	mls	r4, r7, r6, r1
 800d028:	3430      	adds	r4, #48	@ 0x30
 800d02a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d02e:	460c      	mov	r4, r1
 800d030:	2c63      	cmp	r4, #99	@ 0x63
 800d032:	f103 33ff 	add.w	r3, r3, #4294967295
 800d036:	4631      	mov	r1, r6
 800d038:	dcf1      	bgt.n	800d01e <__exponent+0x1c>
 800d03a:	3130      	adds	r1, #48	@ 0x30
 800d03c:	1e94      	subs	r4, r2, #2
 800d03e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d042:	1c41      	adds	r1, r0, #1
 800d044:	4623      	mov	r3, r4
 800d046:	42ab      	cmp	r3, r5
 800d048:	d30a      	bcc.n	800d060 <__exponent+0x5e>
 800d04a:	f10d 0309 	add.w	r3, sp, #9
 800d04e:	1a9b      	subs	r3, r3, r2
 800d050:	42ac      	cmp	r4, r5
 800d052:	bf88      	it	hi
 800d054:	2300      	movhi	r3, #0
 800d056:	3302      	adds	r3, #2
 800d058:	4403      	add	r3, r0
 800d05a:	1a18      	subs	r0, r3, r0
 800d05c:	b003      	add	sp, #12
 800d05e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d060:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d064:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d068:	e7ed      	b.n	800d046 <__exponent+0x44>
 800d06a:	2330      	movs	r3, #48	@ 0x30
 800d06c:	3130      	adds	r1, #48	@ 0x30
 800d06e:	7083      	strb	r3, [r0, #2]
 800d070:	70c1      	strb	r1, [r0, #3]
 800d072:	1d03      	adds	r3, r0, #4
 800d074:	e7f1      	b.n	800d05a <__exponent+0x58>
	...

0800d078 <_printf_float>:
 800d078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d07c:	b08d      	sub	sp, #52	@ 0x34
 800d07e:	460c      	mov	r4, r1
 800d080:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d084:	4616      	mov	r6, r2
 800d086:	461f      	mov	r7, r3
 800d088:	4605      	mov	r5, r0
 800d08a:	f000 fd09 	bl	800daa0 <_localeconv_r>
 800d08e:	6803      	ldr	r3, [r0, #0]
 800d090:	9304      	str	r3, [sp, #16]
 800d092:	4618      	mov	r0, r3
 800d094:	f7f3 f904 	bl	80002a0 <strlen>
 800d098:	2300      	movs	r3, #0
 800d09a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d09c:	f8d8 3000 	ldr.w	r3, [r8]
 800d0a0:	9005      	str	r0, [sp, #20]
 800d0a2:	3307      	adds	r3, #7
 800d0a4:	f023 0307 	bic.w	r3, r3, #7
 800d0a8:	f103 0208 	add.w	r2, r3, #8
 800d0ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d0b0:	f8d4 b000 	ldr.w	fp, [r4]
 800d0b4:	f8c8 2000 	str.w	r2, [r8]
 800d0b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d0c0:	9307      	str	r3, [sp, #28]
 800d0c2:	f8cd 8018 	str.w	r8, [sp, #24]
 800d0c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d0ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0ce:	4b9c      	ldr	r3, [pc, #624]	@ (800d340 <_printf_float+0x2c8>)
 800d0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0d4:	f7f3 fd42 	bl	8000b5c <__aeabi_dcmpun>
 800d0d8:	bb70      	cbnz	r0, 800d138 <_printf_float+0xc0>
 800d0da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d0de:	4b98      	ldr	r3, [pc, #608]	@ (800d340 <_printf_float+0x2c8>)
 800d0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d0e4:	f7f3 fd1c 	bl	8000b20 <__aeabi_dcmple>
 800d0e8:	bb30      	cbnz	r0, 800d138 <_printf_float+0xc0>
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	4640      	mov	r0, r8
 800d0f0:	4649      	mov	r1, r9
 800d0f2:	f7f3 fd0b 	bl	8000b0c <__aeabi_dcmplt>
 800d0f6:	b110      	cbz	r0, 800d0fe <_printf_float+0x86>
 800d0f8:	232d      	movs	r3, #45	@ 0x2d
 800d0fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0fe:	4a91      	ldr	r2, [pc, #580]	@ (800d344 <_printf_float+0x2cc>)
 800d100:	4b91      	ldr	r3, [pc, #580]	@ (800d348 <_printf_float+0x2d0>)
 800d102:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d106:	bf94      	ite	ls
 800d108:	4690      	movls	r8, r2
 800d10a:	4698      	movhi	r8, r3
 800d10c:	2303      	movs	r3, #3
 800d10e:	6123      	str	r3, [r4, #16]
 800d110:	f02b 0304 	bic.w	r3, fp, #4
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	f04f 0900 	mov.w	r9, #0
 800d11a:	9700      	str	r7, [sp, #0]
 800d11c:	4633      	mov	r3, r6
 800d11e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d120:	4621      	mov	r1, r4
 800d122:	4628      	mov	r0, r5
 800d124:	f000 f9d2 	bl	800d4cc <_printf_common>
 800d128:	3001      	adds	r0, #1
 800d12a:	f040 808d 	bne.w	800d248 <_printf_float+0x1d0>
 800d12e:	f04f 30ff 	mov.w	r0, #4294967295
 800d132:	b00d      	add	sp, #52	@ 0x34
 800d134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d138:	4642      	mov	r2, r8
 800d13a:	464b      	mov	r3, r9
 800d13c:	4640      	mov	r0, r8
 800d13e:	4649      	mov	r1, r9
 800d140:	f7f3 fd0c 	bl	8000b5c <__aeabi_dcmpun>
 800d144:	b140      	cbz	r0, 800d158 <_printf_float+0xe0>
 800d146:	464b      	mov	r3, r9
 800d148:	2b00      	cmp	r3, #0
 800d14a:	bfbc      	itt	lt
 800d14c:	232d      	movlt	r3, #45	@ 0x2d
 800d14e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d152:	4a7e      	ldr	r2, [pc, #504]	@ (800d34c <_printf_float+0x2d4>)
 800d154:	4b7e      	ldr	r3, [pc, #504]	@ (800d350 <_printf_float+0x2d8>)
 800d156:	e7d4      	b.n	800d102 <_printf_float+0x8a>
 800d158:	6863      	ldr	r3, [r4, #4]
 800d15a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d15e:	9206      	str	r2, [sp, #24]
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	d13b      	bne.n	800d1dc <_printf_float+0x164>
 800d164:	2306      	movs	r3, #6
 800d166:	6063      	str	r3, [r4, #4]
 800d168:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d16c:	2300      	movs	r3, #0
 800d16e:	6022      	str	r2, [r4, #0]
 800d170:	9303      	str	r3, [sp, #12]
 800d172:	ab0a      	add	r3, sp, #40	@ 0x28
 800d174:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d178:	ab09      	add	r3, sp, #36	@ 0x24
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	6861      	ldr	r1, [r4, #4]
 800d17e:	ec49 8b10 	vmov	d0, r8, r9
 800d182:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d186:	4628      	mov	r0, r5
 800d188:	f7ff fed6 	bl	800cf38 <__cvt>
 800d18c:	9b06      	ldr	r3, [sp, #24]
 800d18e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d190:	2b47      	cmp	r3, #71	@ 0x47
 800d192:	4680      	mov	r8, r0
 800d194:	d129      	bne.n	800d1ea <_printf_float+0x172>
 800d196:	1cc8      	adds	r0, r1, #3
 800d198:	db02      	blt.n	800d1a0 <_printf_float+0x128>
 800d19a:	6863      	ldr	r3, [r4, #4]
 800d19c:	4299      	cmp	r1, r3
 800d19e:	dd41      	ble.n	800d224 <_printf_float+0x1ac>
 800d1a0:	f1aa 0a02 	sub.w	sl, sl, #2
 800d1a4:	fa5f fa8a 	uxtb.w	sl, sl
 800d1a8:	3901      	subs	r1, #1
 800d1aa:	4652      	mov	r2, sl
 800d1ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d1b0:	9109      	str	r1, [sp, #36]	@ 0x24
 800d1b2:	f7ff ff26 	bl	800d002 <__exponent>
 800d1b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d1b8:	1813      	adds	r3, r2, r0
 800d1ba:	2a01      	cmp	r2, #1
 800d1bc:	4681      	mov	r9, r0
 800d1be:	6123      	str	r3, [r4, #16]
 800d1c0:	dc02      	bgt.n	800d1c8 <_printf_float+0x150>
 800d1c2:	6822      	ldr	r2, [r4, #0]
 800d1c4:	07d2      	lsls	r2, r2, #31
 800d1c6:	d501      	bpl.n	800d1cc <_printf_float+0x154>
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	6123      	str	r3, [r4, #16]
 800d1cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d0a2      	beq.n	800d11a <_printf_float+0xa2>
 800d1d4:	232d      	movs	r3, #45	@ 0x2d
 800d1d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d1da:	e79e      	b.n	800d11a <_printf_float+0xa2>
 800d1dc:	9a06      	ldr	r2, [sp, #24]
 800d1de:	2a47      	cmp	r2, #71	@ 0x47
 800d1e0:	d1c2      	bne.n	800d168 <_printf_float+0xf0>
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d1c0      	bne.n	800d168 <_printf_float+0xf0>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	e7bd      	b.n	800d166 <_printf_float+0xee>
 800d1ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d1ee:	d9db      	bls.n	800d1a8 <_printf_float+0x130>
 800d1f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d1f4:	d118      	bne.n	800d228 <_printf_float+0x1b0>
 800d1f6:	2900      	cmp	r1, #0
 800d1f8:	6863      	ldr	r3, [r4, #4]
 800d1fa:	dd0b      	ble.n	800d214 <_printf_float+0x19c>
 800d1fc:	6121      	str	r1, [r4, #16]
 800d1fe:	b913      	cbnz	r3, 800d206 <_printf_float+0x18e>
 800d200:	6822      	ldr	r2, [r4, #0]
 800d202:	07d0      	lsls	r0, r2, #31
 800d204:	d502      	bpl.n	800d20c <_printf_float+0x194>
 800d206:	3301      	adds	r3, #1
 800d208:	440b      	add	r3, r1
 800d20a:	6123      	str	r3, [r4, #16]
 800d20c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d20e:	f04f 0900 	mov.w	r9, #0
 800d212:	e7db      	b.n	800d1cc <_printf_float+0x154>
 800d214:	b913      	cbnz	r3, 800d21c <_printf_float+0x1a4>
 800d216:	6822      	ldr	r2, [r4, #0]
 800d218:	07d2      	lsls	r2, r2, #31
 800d21a:	d501      	bpl.n	800d220 <_printf_float+0x1a8>
 800d21c:	3302      	adds	r3, #2
 800d21e:	e7f4      	b.n	800d20a <_printf_float+0x192>
 800d220:	2301      	movs	r3, #1
 800d222:	e7f2      	b.n	800d20a <_printf_float+0x192>
 800d224:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d22a:	4299      	cmp	r1, r3
 800d22c:	db05      	blt.n	800d23a <_printf_float+0x1c2>
 800d22e:	6823      	ldr	r3, [r4, #0]
 800d230:	6121      	str	r1, [r4, #16]
 800d232:	07d8      	lsls	r0, r3, #31
 800d234:	d5ea      	bpl.n	800d20c <_printf_float+0x194>
 800d236:	1c4b      	adds	r3, r1, #1
 800d238:	e7e7      	b.n	800d20a <_printf_float+0x192>
 800d23a:	2900      	cmp	r1, #0
 800d23c:	bfd4      	ite	le
 800d23e:	f1c1 0202 	rsble	r2, r1, #2
 800d242:	2201      	movgt	r2, #1
 800d244:	4413      	add	r3, r2
 800d246:	e7e0      	b.n	800d20a <_printf_float+0x192>
 800d248:	6823      	ldr	r3, [r4, #0]
 800d24a:	055a      	lsls	r2, r3, #21
 800d24c:	d407      	bmi.n	800d25e <_printf_float+0x1e6>
 800d24e:	6923      	ldr	r3, [r4, #16]
 800d250:	4642      	mov	r2, r8
 800d252:	4631      	mov	r1, r6
 800d254:	4628      	mov	r0, r5
 800d256:	47b8      	blx	r7
 800d258:	3001      	adds	r0, #1
 800d25a:	d12b      	bne.n	800d2b4 <_printf_float+0x23c>
 800d25c:	e767      	b.n	800d12e <_printf_float+0xb6>
 800d25e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d262:	f240 80dd 	bls.w	800d420 <_printf_float+0x3a8>
 800d266:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d26a:	2200      	movs	r2, #0
 800d26c:	2300      	movs	r3, #0
 800d26e:	f7f3 fc43 	bl	8000af8 <__aeabi_dcmpeq>
 800d272:	2800      	cmp	r0, #0
 800d274:	d033      	beq.n	800d2de <_printf_float+0x266>
 800d276:	4a37      	ldr	r2, [pc, #220]	@ (800d354 <_printf_float+0x2dc>)
 800d278:	2301      	movs	r3, #1
 800d27a:	4631      	mov	r1, r6
 800d27c:	4628      	mov	r0, r5
 800d27e:	47b8      	blx	r7
 800d280:	3001      	adds	r0, #1
 800d282:	f43f af54 	beq.w	800d12e <_printf_float+0xb6>
 800d286:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d28a:	4543      	cmp	r3, r8
 800d28c:	db02      	blt.n	800d294 <_printf_float+0x21c>
 800d28e:	6823      	ldr	r3, [r4, #0]
 800d290:	07d8      	lsls	r0, r3, #31
 800d292:	d50f      	bpl.n	800d2b4 <_printf_float+0x23c>
 800d294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d298:	4631      	mov	r1, r6
 800d29a:	4628      	mov	r0, r5
 800d29c:	47b8      	blx	r7
 800d29e:	3001      	adds	r0, #1
 800d2a0:	f43f af45 	beq.w	800d12e <_printf_float+0xb6>
 800d2a4:	f04f 0900 	mov.w	r9, #0
 800d2a8:	f108 38ff 	add.w	r8, r8, #4294967295
 800d2ac:	f104 0a1a 	add.w	sl, r4, #26
 800d2b0:	45c8      	cmp	r8, r9
 800d2b2:	dc09      	bgt.n	800d2c8 <_printf_float+0x250>
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	079b      	lsls	r3, r3, #30
 800d2b8:	f100 8103 	bmi.w	800d4c2 <_printf_float+0x44a>
 800d2bc:	68e0      	ldr	r0, [r4, #12]
 800d2be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2c0:	4298      	cmp	r0, r3
 800d2c2:	bfb8      	it	lt
 800d2c4:	4618      	movlt	r0, r3
 800d2c6:	e734      	b.n	800d132 <_printf_float+0xba>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	4652      	mov	r2, sl
 800d2cc:	4631      	mov	r1, r6
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	47b8      	blx	r7
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	f43f af2b 	beq.w	800d12e <_printf_float+0xb6>
 800d2d8:	f109 0901 	add.w	r9, r9, #1
 800d2dc:	e7e8      	b.n	800d2b0 <_printf_float+0x238>
 800d2de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	dc39      	bgt.n	800d358 <_printf_float+0x2e0>
 800d2e4:	4a1b      	ldr	r2, [pc, #108]	@ (800d354 <_printf_float+0x2dc>)
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	4631      	mov	r1, r6
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	47b8      	blx	r7
 800d2ee:	3001      	adds	r0, #1
 800d2f0:	f43f af1d 	beq.w	800d12e <_printf_float+0xb6>
 800d2f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d2f8:	ea59 0303 	orrs.w	r3, r9, r3
 800d2fc:	d102      	bne.n	800d304 <_printf_float+0x28c>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	07d9      	lsls	r1, r3, #31
 800d302:	d5d7      	bpl.n	800d2b4 <_printf_float+0x23c>
 800d304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d308:	4631      	mov	r1, r6
 800d30a:	4628      	mov	r0, r5
 800d30c:	47b8      	blx	r7
 800d30e:	3001      	adds	r0, #1
 800d310:	f43f af0d 	beq.w	800d12e <_printf_float+0xb6>
 800d314:	f04f 0a00 	mov.w	sl, #0
 800d318:	f104 0b1a 	add.w	fp, r4, #26
 800d31c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d31e:	425b      	negs	r3, r3
 800d320:	4553      	cmp	r3, sl
 800d322:	dc01      	bgt.n	800d328 <_printf_float+0x2b0>
 800d324:	464b      	mov	r3, r9
 800d326:	e793      	b.n	800d250 <_printf_float+0x1d8>
 800d328:	2301      	movs	r3, #1
 800d32a:	465a      	mov	r2, fp
 800d32c:	4631      	mov	r1, r6
 800d32e:	4628      	mov	r0, r5
 800d330:	47b8      	blx	r7
 800d332:	3001      	adds	r0, #1
 800d334:	f43f aefb 	beq.w	800d12e <_printf_float+0xb6>
 800d338:	f10a 0a01 	add.w	sl, sl, #1
 800d33c:	e7ee      	b.n	800d31c <_printf_float+0x2a4>
 800d33e:	bf00      	nop
 800d340:	7fefffff 	.word	0x7fefffff
 800d344:	08015048 	.word	0x08015048
 800d348:	0801504c 	.word	0x0801504c
 800d34c:	08015050 	.word	0x08015050
 800d350:	08015054 	.word	0x08015054
 800d354:	08015058 	.word	0x08015058
 800d358:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d35a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d35e:	4553      	cmp	r3, sl
 800d360:	bfa8      	it	ge
 800d362:	4653      	movge	r3, sl
 800d364:	2b00      	cmp	r3, #0
 800d366:	4699      	mov	r9, r3
 800d368:	dc36      	bgt.n	800d3d8 <_printf_float+0x360>
 800d36a:	f04f 0b00 	mov.w	fp, #0
 800d36e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d372:	f104 021a 	add.w	r2, r4, #26
 800d376:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d378:	9306      	str	r3, [sp, #24]
 800d37a:	eba3 0309 	sub.w	r3, r3, r9
 800d37e:	455b      	cmp	r3, fp
 800d380:	dc31      	bgt.n	800d3e6 <_printf_float+0x36e>
 800d382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d384:	459a      	cmp	sl, r3
 800d386:	dc3a      	bgt.n	800d3fe <_printf_float+0x386>
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	07da      	lsls	r2, r3, #31
 800d38c:	d437      	bmi.n	800d3fe <_printf_float+0x386>
 800d38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d390:	ebaa 0903 	sub.w	r9, sl, r3
 800d394:	9b06      	ldr	r3, [sp, #24]
 800d396:	ebaa 0303 	sub.w	r3, sl, r3
 800d39a:	4599      	cmp	r9, r3
 800d39c:	bfa8      	it	ge
 800d39e:	4699      	movge	r9, r3
 800d3a0:	f1b9 0f00 	cmp.w	r9, #0
 800d3a4:	dc33      	bgt.n	800d40e <_printf_float+0x396>
 800d3a6:	f04f 0800 	mov.w	r8, #0
 800d3aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d3ae:	f104 0b1a 	add.w	fp, r4, #26
 800d3b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3b4:	ebaa 0303 	sub.w	r3, sl, r3
 800d3b8:	eba3 0309 	sub.w	r3, r3, r9
 800d3bc:	4543      	cmp	r3, r8
 800d3be:	f77f af79 	ble.w	800d2b4 <_printf_float+0x23c>
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	465a      	mov	r2, fp
 800d3c6:	4631      	mov	r1, r6
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	47b8      	blx	r7
 800d3cc:	3001      	adds	r0, #1
 800d3ce:	f43f aeae 	beq.w	800d12e <_printf_float+0xb6>
 800d3d2:	f108 0801 	add.w	r8, r8, #1
 800d3d6:	e7ec      	b.n	800d3b2 <_printf_float+0x33a>
 800d3d8:	4642      	mov	r2, r8
 800d3da:	4631      	mov	r1, r6
 800d3dc:	4628      	mov	r0, r5
 800d3de:	47b8      	blx	r7
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	d1c2      	bne.n	800d36a <_printf_float+0x2f2>
 800d3e4:	e6a3      	b.n	800d12e <_printf_float+0xb6>
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	9206      	str	r2, [sp, #24]
 800d3ee:	47b8      	blx	r7
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	f43f ae9c 	beq.w	800d12e <_printf_float+0xb6>
 800d3f6:	9a06      	ldr	r2, [sp, #24]
 800d3f8:	f10b 0b01 	add.w	fp, fp, #1
 800d3fc:	e7bb      	b.n	800d376 <_printf_float+0x2fe>
 800d3fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d402:	4631      	mov	r1, r6
 800d404:	4628      	mov	r0, r5
 800d406:	47b8      	blx	r7
 800d408:	3001      	adds	r0, #1
 800d40a:	d1c0      	bne.n	800d38e <_printf_float+0x316>
 800d40c:	e68f      	b.n	800d12e <_printf_float+0xb6>
 800d40e:	9a06      	ldr	r2, [sp, #24]
 800d410:	464b      	mov	r3, r9
 800d412:	4442      	add	r2, r8
 800d414:	4631      	mov	r1, r6
 800d416:	4628      	mov	r0, r5
 800d418:	47b8      	blx	r7
 800d41a:	3001      	adds	r0, #1
 800d41c:	d1c3      	bne.n	800d3a6 <_printf_float+0x32e>
 800d41e:	e686      	b.n	800d12e <_printf_float+0xb6>
 800d420:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d424:	f1ba 0f01 	cmp.w	sl, #1
 800d428:	dc01      	bgt.n	800d42e <_printf_float+0x3b6>
 800d42a:	07db      	lsls	r3, r3, #31
 800d42c:	d536      	bpl.n	800d49c <_printf_float+0x424>
 800d42e:	2301      	movs	r3, #1
 800d430:	4642      	mov	r2, r8
 800d432:	4631      	mov	r1, r6
 800d434:	4628      	mov	r0, r5
 800d436:	47b8      	blx	r7
 800d438:	3001      	adds	r0, #1
 800d43a:	f43f ae78 	beq.w	800d12e <_printf_float+0xb6>
 800d43e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d442:	4631      	mov	r1, r6
 800d444:	4628      	mov	r0, r5
 800d446:	47b8      	blx	r7
 800d448:	3001      	adds	r0, #1
 800d44a:	f43f ae70 	beq.w	800d12e <_printf_float+0xb6>
 800d44e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d452:	2200      	movs	r2, #0
 800d454:	2300      	movs	r3, #0
 800d456:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d45a:	f7f3 fb4d 	bl	8000af8 <__aeabi_dcmpeq>
 800d45e:	b9c0      	cbnz	r0, 800d492 <_printf_float+0x41a>
 800d460:	4653      	mov	r3, sl
 800d462:	f108 0201 	add.w	r2, r8, #1
 800d466:	4631      	mov	r1, r6
 800d468:	4628      	mov	r0, r5
 800d46a:	47b8      	blx	r7
 800d46c:	3001      	adds	r0, #1
 800d46e:	d10c      	bne.n	800d48a <_printf_float+0x412>
 800d470:	e65d      	b.n	800d12e <_printf_float+0xb6>
 800d472:	2301      	movs	r3, #1
 800d474:	465a      	mov	r2, fp
 800d476:	4631      	mov	r1, r6
 800d478:	4628      	mov	r0, r5
 800d47a:	47b8      	blx	r7
 800d47c:	3001      	adds	r0, #1
 800d47e:	f43f ae56 	beq.w	800d12e <_printf_float+0xb6>
 800d482:	f108 0801 	add.w	r8, r8, #1
 800d486:	45d0      	cmp	r8, sl
 800d488:	dbf3      	blt.n	800d472 <_printf_float+0x3fa>
 800d48a:	464b      	mov	r3, r9
 800d48c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d490:	e6df      	b.n	800d252 <_printf_float+0x1da>
 800d492:	f04f 0800 	mov.w	r8, #0
 800d496:	f104 0b1a 	add.w	fp, r4, #26
 800d49a:	e7f4      	b.n	800d486 <_printf_float+0x40e>
 800d49c:	2301      	movs	r3, #1
 800d49e:	4642      	mov	r2, r8
 800d4a0:	e7e1      	b.n	800d466 <_printf_float+0x3ee>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	464a      	mov	r2, r9
 800d4a6:	4631      	mov	r1, r6
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	47b8      	blx	r7
 800d4ac:	3001      	adds	r0, #1
 800d4ae:	f43f ae3e 	beq.w	800d12e <_printf_float+0xb6>
 800d4b2:	f108 0801 	add.w	r8, r8, #1
 800d4b6:	68e3      	ldr	r3, [r4, #12]
 800d4b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d4ba:	1a5b      	subs	r3, r3, r1
 800d4bc:	4543      	cmp	r3, r8
 800d4be:	dcf0      	bgt.n	800d4a2 <_printf_float+0x42a>
 800d4c0:	e6fc      	b.n	800d2bc <_printf_float+0x244>
 800d4c2:	f04f 0800 	mov.w	r8, #0
 800d4c6:	f104 0919 	add.w	r9, r4, #25
 800d4ca:	e7f4      	b.n	800d4b6 <_printf_float+0x43e>

0800d4cc <_printf_common>:
 800d4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d0:	4616      	mov	r6, r2
 800d4d2:	4698      	mov	r8, r3
 800d4d4:	688a      	ldr	r2, [r1, #8]
 800d4d6:	690b      	ldr	r3, [r1, #16]
 800d4d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	bfb8      	it	lt
 800d4e0:	4613      	movlt	r3, r2
 800d4e2:	6033      	str	r3, [r6, #0]
 800d4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4e8:	4607      	mov	r7, r0
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	b10a      	cbz	r2, 800d4f2 <_printf_common+0x26>
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	6033      	str	r3, [r6, #0]
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	0699      	lsls	r1, r3, #26
 800d4f6:	bf42      	ittt	mi
 800d4f8:	6833      	ldrmi	r3, [r6, #0]
 800d4fa:	3302      	addmi	r3, #2
 800d4fc:	6033      	strmi	r3, [r6, #0]
 800d4fe:	6825      	ldr	r5, [r4, #0]
 800d500:	f015 0506 	ands.w	r5, r5, #6
 800d504:	d106      	bne.n	800d514 <_printf_common+0x48>
 800d506:	f104 0a19 	add.w	sl, r4, #25
 800d50a:	68e3      	ldr	r3, [r4, #12]
 800d50c:	6832      	ldr	r2, [r6, #0]
 800d50e:	1a9b      	subs	r3, r3, r2
 800d510:	42ab      	cmp	r3, r5
 800d512:	dc26      	bgt.n	800d562 <_printf_common+0x96>
 800d514:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d518:	6822      	ldr	r2, [r4, #0]
 800d51a:	3b00      	subs	r3, #0
 800d51c:	bf18      	it	ne
 800d51e:	2301      	movne	r3, #1
 800d520:	0692      	lsls	r2, r2, #26
 800d522:	d42b      	bmi.n	800d57c <_printf_common+0xb0>
 800d524:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d528:	4641      	mov	r1, r8
 800d52a:	4638      	mov	r0, r7
 800d52c:	47c8      	blx	r9
 800d52e:	3001      	adds	r0, #1
 800d530:	d01e      	beq.n	800d570 <_printf_common+0xa4>
 800d532:	6823      	ldr	r3, [r4, #0]
 800d534:	6922      	ldr	r2, [r4, #16]
 800d536:	f003 0306 	and.w	r3, r3, #6
 800d53a:	2b04      	cmp	r3, #4
 800d53c:	bf02      	ittt	eq
 800d53e:	68e5      	ldreq	r5, [r4, #12]
 800d540:	6833      	ldreq	r3, [r6, #0]
 800d542:	1aed      	subeq	r5, r5, r3
 800d544:	68a3      	ldr	r3, [r4, #8]
 800d546:	bf0c      	ite	eq
 800d548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d54c:	2500      	movne	r5, #0
 800d54e:	4293      	cmp	r3, r2
 800d550:	bfc4      	itt	gt
 800d552:	1a9b      	subgt	r3, r3, r2
 800d554:	18ed      	addgt	r5, r5, r3
 800d556:	2600      	movs	r6, #0
 800d558:	341a      	adds	r4, #26
 800d55a:	42b5      	cmp	r5, r6
 800d55c:	d11a      	bne.n	800d594 <_printf_common+0xc8>
 800d55e:	2000      	movs	r0, #0
 800d560:	e008      	b.n	800d574 <_printf_common+0xa8>
 800d562:	2301      	movs	r3, #1
 800d564:	4652      	mov	r2, sl
 800d566:	4641      	mov	r1, r8
 800d568:	4638      	mov	r0, r7
 800d56a:	47c8      	blx	r9
 800d56c:	3001      	adds	r0, #1
 800d56e:	d103      	bne.n	800d578 <_printf_common+0xac>
 800d570:	f04f 30ff 	mov.w	r0, #4294967295
 800d574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d578:	3501      	adds	r5, #1
 800d57a:	e7c6      	b.n	800d50a <_printf_common+0x3e>
 800d57c:	18e1      	adds	r1, r4, r3
 800d57e:	1c5a      	adds	r2, r3, #1
 800d580:	2030      	movs	r0, #48	@ 0x30
 800d582:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d586:	4422      	add	r2, r4
 800d588:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d58c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d590:	3302      	adds	r3, #2
 800d592:	e7c7      	b.n	800d524 <_printf_common+0x58>
 800d594:	2301      	movs	r3, #1
 800d596:	4622      	mov	r2, r4
 800d598:	4641      	mov	r1, r8
 800d59a:	4638      	mov	r0, r7
 800d59c:	47c8      	blx	r9
 800d59e:	3001      	adds	r0, #1
 800d5a0:	d0e6      	beq.n	800d570 <_printf_common+0xa4>
 800d5a2:	3601      	adds	r6, #1
 800d5a4:	e7d9      	b.n	800d55a <_printf_common+0x8e>
	...

0800d5a8 <_printf_i>:
 800d5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ac:	7e0f      	ldrb	r7, [r1, #24]
 800d5ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d5b0:	2f78      	cmp	r7, #120	@ 0x78
 800d5b2:	4691      	mov	r9, r2
 800d5b4:	4680      	mov	r8, r0
 800d5b6:	460c      	mov	r4, r1
 800d5b8:	469a      	mov	sl, r3
 800d5ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d5be:	d807      	bhi.n	800d5d0 <_printf_i+0x28>
 800d5c0:	2f62      	cmp	r7, #98	@ 0x62
 800d5c2:	d80a      	bhi.n	800d5da <_printf_i+0x32>
 800d5c4:	2f00      	cmp	r7, #0
 800d5c6:	f000 80d2 	beq.w	800d76e <_printf_i+0x1c6>
 800d5ca:	2f58      	cmp	r7, #88	@ 0x58
 800d5cc:	f000 80b9 	beq.w	800d742 <_printf_i+0x19a>
 800d5d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d5d8:	e03a      	b.n	800d650 <_printf_i+0xa8>
 800d5da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d5de:	2b15      	cmp	r3, #21
 800d5e0:	d8f6      	bhi.n	800d5d0 <_printf_i+0x28>
 800d5e2:	a101      	add	r1, pc, #4	@ (adr r1, 800d5e8 <_printf_i+0x40>)
 800d5e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5e8:	0800d641 	.word	0x0800d641
 800d5ec:	0800d655 	.word	0x0800d655
 800d5f0:	0800d5d1 	.word	0x0800d5d1
 800d5f4:	0800d5d1 	.word	0x0800d5d1
 800d5f8:	0800d5d1 	.word	0x0800d5d1
 800d5fc:	0800d5d1 	.word	0x0800d5d1
 800d600:	0800d655 	.word	0x0800d655
 800d604:	0800d5d1 	.word	0x0800d5d1
 800d608:	0800d5d1 	.word	0x0800d5d1
 800d60c:	0800d5d1 	.word	0x0800d5d1
 800d610:	0800d5d1 	.word	0x0800d5d1
 800d614:	0800d755 	.word	0x0800d755
 800d618:	0800d67f 	.word	0x0800d67f
 800d61c:	0800d70f 	.word	0x0800d70f
 800d620:	0800d5d1 	.word	0x0800d5d1
 800d624:	0800d5d1 	.word	0x0800d5d1
 800d628:	0800d777 	.word	0x0800d777
 800d62c:	0800d5d1 	.word	0x0800d5d1
 800d630:	0800d67f 	.word	0x0800d67f
 800d634:	0800d5d1 	.word	0x0800d5d1
 800d638:	0800d5d1 	.word	0x0800d5d1
 800d63c:	0800d717 	.word	0x0800d717
 800d640:	6833      	ldr	r3, [r6, #0]
 800d642:	1d1a      	adds	r2, r3, #4
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	6032      	str	r2, [r6, #0]
 800d648:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d64c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d650:	2301      	movs	r3, #1
 800d652:	e09d      	b.n	800d790 <_printf_i+0x1e8>
 800d654:	6833      	ldr	r3, [r6, #0]
 800d656:	6820      	ldr	r0, [r4, #0]
 800d658:	1d19      	adds	r1, r3, #4
 800d65a:	6031      	str	r1, [r6, #0]
 800d65c:	0606      	lsls	r6, r0, #24
 800d65e:	d501      	bpl.n	800d664 <_printf_i+0xbc>
 800d660:	681d      	ldr	r5, [r3, #0]
 800d662:	e003      	b.n	800d66c <_printf_i+0xc4>
 800d664:	0645      	lsls	r5, r0, #25
 800d666:	d5fb      	bpl.n	800d660 <_printf_i+0xb8>
 800d668:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d66c:	2d00      	cmp	r5, #0
 800d66e:	da03      	bge.n	800d678 <_printf_i+0xd0>
 800d670:	232d      	movs	r3, #45	@ 0x2d
 800d672:	426d      	negs	r5, r5
 800d674:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d678:	4859      	ldr	r0, [pc, #356]	@ (800d7e0 <_printf_i+0x238>)
 800d67a:	230a      	movs	r3, #10
 800d67c:	e011      	b.n	800d6a2 <_printf_i+0xfa>
 800d67e:	6821      	ldr	r1, [r4, #0]
 800d680:	6833      	ldr	r3, [r6, #0]
 800d682:	0608      	lsls	r0, r1, #24
 800d684:	f853 5b04 	ldr.w	r5, [r3], #4
 800d688:	d402      	bmi.n	800d690 <_printf_i+0xe8>
 800d68a:	0649      	lsls	r1, r1, #25
 800d68c:	bf48      	it	mi
 800d68e:	b2ad      	uxthmi	r5, r5
 800d690:	2f6f      	cmp	r7, #111	@ 0x6f
 800d692:	4853      	ldr	r0, [pc, #332]	@ (800d7e0 <_printf_i+0x238>)
 800d694:	6033      	str	r3, [r6, #0]
 800d696:	bf14      	ite	ne
 800d698:	230a      	movne	r3, #10
 800d69a:	2308      	moveq	r3, #8
 800d69c:	2100      	movs	r1, #0
 800d69e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d6a2:	6866      	ldr	r6, [r4, #4]
 800d6a4:	60a6      	str	r6, [r4, #8]
 800d6a6:	2e00      	cmp	r6, #0
 800d6a8:	bfa2      	ittt	ge
 800d6aa:	6821      	ldrge	r1, [r4, #0]
 800d6ac:	f021 0104 	bicge.w	r1, r1, #4
 800d6b0:	6021      	strge	r1, [r4, #0]
 800d6b2:	b90d      	cbnz	r5, 800d6b8 <_printf_i+0x110>
 800d6b4:	2e00      	cmp	r6, #0
 800d6b6:	d04b      	beq.n	800d750 <_printf_i+0x1a8>
 800d6b8:	4616      	mov	r6, r2
 800d6ba:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6be:	fb03 5711 	mls	r7, r3, r1, r5
 800d6c2:	5dc7      	ldrb	r7, [r0, r7]
 800d6c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6c8:	462f      	mov	r7, r5
 800d6ca:	42bb      	cmp	r3, r7
 800d6cc:	460d      	mov	r5, r1
 800d6ce:	d9f4      	bls.n	800d6ba <_printf_i+0x112>
 800d6d0:	2b08      	cmp	r3, #8
 800d6d2:	d10b      	bne.n	800d6ec <_printf_i+0x144>
 800d6d4:	6823      	ldr	r3, [r4, #0]
 800d6d6:	07df      	lsls	r7, r3, #31
 800d6d8:	d508      	bpl.n	800d6ec <_printf_i+0x144>
 800d6da:	6923      	ldr	r3, [r4, #16]
 800d6dc:	6861      	ldr	r1, [r4, #4]
 800d6de:	4299      	cmp	r1, r3
 800d6e0:	bfde      	ittt	le
 800d6e2:	2330      	movle	r3, #48	@ 0x30
 800d6e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6ec:	1b92      	subs	r2, r2, r6
 800d6ee:	6122      	str	r2, [r4, #16]
 800d6f0:	f8cd a000 	str.w	sl, [sp]
 800d6f4:	464b      	mov	r3, r9
 800d6f6:	aa03      	add	r2, sp, #12
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	4640      	mov	r0, r8
 800d6fc:	f7ff fee6 	bl	800d4cc <_printf_common>
 800d700:	3001      	adds	r0, #1
 800d702:	d14a      	bne.n	800d79a <_printf_i+0x1f2>
 800d704:	f04f 30ff 	mov.w	r0, #4294967295
 800d708:	b004      	add	sp, #16
 800d70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d70e:	6823      	ldr	r3, [r4, #0]
 800d710:	f043 0320 	orr.w	r3, r3, #32
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	4833      	ldr	r0, [pc, #204]	@ (800d7e4 <_printf_i+0x23c>)
 800d718:	2778      	movs	r7, #120	@ 0x78
 800d71a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	6831      	ldr	r1, [r6, #0]
 800d722:	061f      	lsls	r7, r3, #24
 800d724:	f851 5b04 	ldr.w	r5, [r1], #4
 800d728:	d402      	bmi.n	800d730 <_printf_i+0x188>
 800d72a:	065f      	lsls	r7, r3, #25
 800d72c:	bf48      	it	mi
 800d72e:	b2ad      	uxthmi	r5, r5
 800d730:	6031      	str	r1, [r6, #0]
 800d732:	07d9      	lsls	r1, r3, #31
 800d734:	bf44      	itt	mi
 800d736:	f043 0320 	orrmi.w	r3, r3, #32
 800d73a:	6023      	strmi	r3, [r4, #0]
 800d73c:	b11d      	cbz	r5, 800d746 <_printf_i+0x19e>
 800d73e:	2310      	movs	r3, #16
 800d740:	e7ac      	b.n	800d69c <_printf_i+0xf4>
 800d742:	4827      	ldr	r0, [pc, #156]	@ (800d7e0 <_printf_i+0x238>)
 800d744:	e7e9      	b.n	800d71a <_printf_i+0x172>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	f023 0320 	bic.w	r3, r3, #32
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	e7f6      	b.n	800d73e <_printf_i+0x196>
 800d750:	4616      	mov	r6, r2
 800d752:	e7bd      	b.n	800d6d0 <_printf_i+0x128>
 800d754:	6833      	ldr	r3, [r6, #0]
 800d756:	6825      	ldr	r5, [r4, #0]
 800d758:	6961      	ldr	r1, [r4, #20]
 800d75a:	1d18      	adds	r0, r3, #4
 800d75c:	6030      	str	r0, [r6, #0]
 800d75e:	062e      	lsls	r6, r5, #24
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	d501      	bpl.n	800d768 <_printf_i+0x1c0>
 800d764:	6019      	str	r1, [r3, #0]
 800d766:	e002      	b.n	800d76e <_printf_i+0x1c6>
 800d768:	0668      	lsls	r0, r5, #25
 800d76a:	d5fb      	bpl.n	800d764 <_printf_i+0x1bc>
 800d76c:	8019      	strh	r1, [r3, #0]
 800d76e:	2300      	movs	r3, #0
 800d770:	6123      	str	r3, [r4, #16]
 800d772:	4616      	mov	r6, r2
 800d774:	e7bc      	b.n	800d6f0 <_printf_i+0x148>
 800d776:	6833      	ldr	r3, [r6, #0]
 800d778:	1d1a      	adds	r2, r3, #4
 800d77a:	6032      	str	r2, [r6, #0]
 800d77c:	681e      	ldr	r6, [r3, #0]
 800d77e:	6862      	ldr	r2, [r4, #4]
 800d780:	2100      	movs	r1, #0
 800d782:	4630      	mov	r0, r6
 800d784:	f7f2 fd3c 	bl	8000200 <memchr>
 800d788:	b108      	cbz	r0, 800d78e <_printf_i+0x1e6>
 800d78a:	1b80      	subs	r0, r0, r6
 800d78c:	6060      	str	r0, [r4, #4]
 800d78e:	6863      	ldr	r3, [r4, #4]
 800d790:	6123      	str	r3, [r4, #16]
 800d792:	2300      	movs	r3, #0
 800d794:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d798:	e7aa      	b.n	800d6f0 <_printf_i+0x148>
 800d79a:	6923      	ldr	r3, [r4, #16]
 800d79c:	4632      	mov	r2, r6
 800d79e:	4649      	mov	r1, r9
 800d7a0:	4640      	mov	r0, r8
 800d7a2:	47d0      	blx	sl
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	d0ad      	beq.n	800d704 <_printf_i+0x15c>
 800d7a8:	6823      	ldr	r3, [r4, #0]
 800d7aa:	079b      	lsls	r3, r3, #30
 800d7ac:	d413      	bmi.n	800d7d6 <_printf_i+0x22e>
 800d7ae:	68e0      	ldr	r0, [r4, #12]
 800d7b0:	9b03      	ldr	r3, [sp, #12]
 800d7b2:	4298      	cmp	r0, r3
 800d7b4:	bfb8      	it	lt
 800d7b6:	4618      	movlt	r0, r3
 800d7b8:	e7a6      	b.n	800d708 <_printf_i+0x160>
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	4632      	mov	r2, r6
 800d7be:	4649      	mov	r1, r9
 800d7c0:	4640      	mov	r0, r8
 800d7c2:	47d0      	blx	sl
 800d7c4:	3001      	adds	r0, #1
 800d7c6:	d09d      	beq.n	800d704 <_printf_i+0x15c>
 800d7c8:	3501      	adds	r5, #1
 800d7ca:	68e3      	ldr	r3, [r4, #12]
 800d7cc:	9903      	ldr	r1, [sp, #12]
 800d7ce:	1a5b      	subs	r3, r3, r1
 800d7d0:	42ab      	cmp	r3, r5
 800d7d2:	dcf2      	bgt.n	800d7ba <_printf_i+0x212>
 800d7d4:	e7eb      	b.n	800d7ae <_printf_i+0x206>
 800d7d6:	2500      	movs	r5, #0
 800d7d8:	f104 0619 	add.w	r6, r4, #25
 800d7dc:	e7f5      	b.n	800d7ca <_printf_i+0x222>
 800d7de:	bf00      	nop
 800d7e0:	0801505a 	.word	0x0801505a
 800d7e4:	0801506b 	.word	0x0801506b

0800d7e8 <std>:
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	b510      	push	{r4, lr}
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7f6:	6083      	str	r3, [r0, #8]
 800d7f8:	8181      	strh	r1, [r0, #12]
 800d7fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800d7fc:	81c2      	strh	r2, [r0, #14]
 800d7fe:	6183      	str	r3, [r0, #24]
 800d800:	4619      	mov	r1, r3
 800d802:	2208      	movs	r2, #8
 800d804:	305c      	adds	r0, #92	@ 0x5c
 800d806:	f000 f942 	bl	800da8e <memset>
 800d80a:	4b0d      	ldr	r3, [pc, #52]	@ (800d840 <std+0x58>)
 800d80c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d80e:	4b0d      	ldr	r3, [pc, #52]	@ (800d844 <std+0x5c>)
 800d810:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d812:	4b0d      	ldr	r3, [pc, #52]	@ (800d848 <std+0x60>)
 800d814:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d816:	4b0d      	ldr	r3, [pc, #52]	@ (800d84c <std+0x64>)
 800d818:	6323      	str	r3, [r4, #48]	@ 0x30
 800d81a:	4b0d      	ldr	r3, [pc, #52]	@ (800d850 <std+0x68>)
 800d81c:	6224      	str	r4, [r4, #32]
 800d81e:	429c      	cmp	r4, r3
 800d820:	d006      	beq.n	800d830 <std+0x48>
 800d822:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d826:	4294      	cmp	r4, r2
 800d828:	d002      	beq.n	800d830 <std+0x48>
 800d82a:	33d0      	adds	r3, #208	@ 0xd0
 800d82c:	429c      	cmp	r4, r3
 800d82e:	d105      	bne.n	800d83c <std+0x54>
 800d830:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d838:	f000 b9b6 	b.w	800dba8 <__retarget_lock_init_recursive>
 800d83c:	bd10      	pop	{r4, pc}
 800d83e:	bf00      	nop
 800d840:	0800da09 	.word	0x0800da09
 800d844:	0800da2b 	.word	0x0800da2b
 800d848:	0800da63 	.word	0x0800da63
 800d84c:	0800da87 	.word	0x0800da87
 800d850:	20000a04 	.word	0x20000a04

0800d854 <stdio_exit_handler>:
 800d854:	4a02      	ldr	r2, [pc, #8]	@ (800d860 <stdio_exit_handler+0xc>)
 800d856:	4903      	ldr	r1, [pc, #12]	@ (800d864 <stdio_exit_handler+0x10>)
 800d858:	4803      	ldr	r0, [pc, #12]	@ (800d868 <stdio_exit_handler+0x14>)
 800d85a:	f000 b869 	b.w	800d930 <_fwalk_sglue>
 800d85e:	bf00      	nop
 800d860:	2000002c 	.word	0x2000002c
 800d864:	0800f63d 	.word	0x0800f63d
 800d868:	2000003c 	.word	0x2000003c

0800d86c <cleanup_stdio>:
 800d86c:	6841      	ldr	r1, [r0, #4]
 800d86e:	4b0c      	ldr	r3, [pc, #48]	@ (800d8a0 <cleanup_stdio+0x34>)
 800d870:	4299      	cmp	r1, r3
 800d872:	b510      	push	{r4, lr}
 800d874:	4604      	mov	r4, r0
 800d876:	d001      	beq.n	800d87c <cleanup_stdio+0x10>
 800d878:	f001 fee0 	bl	800f63c <_fflush_r>
 800d87c:	68a1      	ldr	r1, [r4, #8]
 800d87e:	4b09      	ldr	r3, [pc, #36]	@ (800d8a4 <cleanup_stdio+0x38>)
 800d880:	4299      	cmp	r1, r3
 800d882:	d002      	beq.n	800d88a <cleanup_stdio+0x1e>
 800d884:	4620      	mov	r0, r4
 800d886:	f001 fed9 	bl	800f63c <_fflush_r>
 800d88a:	68e1      	ldr	r1, [r4, #12]
 800d88c:	4b06      	ldr	r3, [pc, #24]	@ (800d8a8 <cleanup_stdio+0x3c>)
 800d88e:	4299      	cmp	r1, r3
 800d890:	d004      	beq.n	800d89c <cleanup_stdio+0x30>
 800d892:	4620      	mov	r0, r4
 800d894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d898:	f001 bed0 	b.w	800f63c <_fflush_r>
 800d89c:	bd10      	pop	{r4, pc}
 800d89e:	bf00      	nop
 800d8a0:	20000a04 	.word	0x20000a04
 800d8a4:	20000a6c 	.word	0x20000a6c
 800d8a8:	20000ad4 	.word	0x20000ad4

0800d8ac <global_stdio_init.part.0>:
 800d8ac:	b510      	push	{r4, lr}
 800d8ae:	4b0b      	ldr	r3, [pc, #44]	@ (800d8dc <global_stdio_init.part.0+0x30>)
 800d8b0:	4c0b      	ldr	r4, [pc, #44]	@ (800d8e0 <global_stdio_init.part.0+0x34>)
 800d8b2:	4a0c      	ldr	r2, [pc, #48]	@ (800d8e4 <global_stdio_init.part.0+0x38>)
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	2104      	movs	r1, #4
 800d8bc:	f7ff ff94 	bl	800d7e8 <std>
 800d8c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	2109      	movs	r1, #9
 800d8c8:	f7ff ff8e 	bl	800d7e8 <std>
 800d8cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d8d0:	2202      	movs	r2, #2
 800d8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8d6:	2112      	movs	r1, #18
 800d8d8:	f7ff bf86 	b.w	800d7e8 <std>
 800d8dc:	20000b3c 	.word	0x20000b3c
 800d8e0:	20000a04 	.word	0x20000a04
 800d8e4:	0800d855 	.word	0x0800d855

0800d8e8 <__sfp_lock_acquire>:
 800d8e8:	4801      	ldr	r0, [pc, #4]	@ (800d8f0 <__sfp_lock_acquire+0x8>)
 800d8ea:	f000 b95e 	b.w	800dbaa <__retarget_lock_acquire_recursive>
 800d8ee:	bf00      	nop
 800d8f0:	20000b45 	.word	0x20000b45

0800d8f4 <__sfp_lock_release>:
 800d8f4:	4801      	ldr	r0, [pc, #4]	@ (800d8fc <__sfp_lock_release+0x8>)
 800d8f6:	f000 b959 	b.w	800dbac <__retarget_lock_release_recursive>
 800d8fa:	bf00      	nop
 800d8fc:	20000b45 	.word	0x20000b45

0800d900 <__sinit>:
 800d900:	b510      	push	{r4, lr}
 800d902:	4604      	mov	r4, r0
 800d904:	f7ff fff0 	bl	800d8e8 <__sfp_lock_acquire>
 800d908:	6a23      	ldr	r3, [r4, #32]
 800d90a:	b11b      	cbz	r3, 800d914 <__sinit+0x14>
 800d90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d910:	f7ff bff0 	b.w	800d8f4 <__sfp_lock_release>
 800d914:	4b04      	ldr	r3, [pc, #16]	@ (800d928 <__sinit+0x28>)
 800d916:	6223      	str	r3, [r4, #32]
 800d918:	4b04      	ldr	r3, [pc, #16]	@ (800d92c <__sinit+0x2c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d1f5      	bne.n	800d90c <__sinit+0xc>
 800d920:	f7ff ffc4 	bl	800d8ac <global_stdio_init.part.0>
 800d924:	e7f2      	b.n	800d90c <__sinit+0xc>
 800d926:	bf00      	nop
 800d928:	0800d86d 	.word	0x0800d86d
 800d92c:	20000b3c 	.word	0x20000b3c

0800d930 <_fwalk_sglue>:
 800d930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d934:	4607      	mov	r7, r0
 800d936:	4688      	mov	r8, r1
 800d938:	4614      	mov	r4, r2
 800d93a:	2600      	movs	r6, #0
 800d93c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d940:	f1b9 0901 	subs.w	r9, r9, #1
 800d944:	d505      	bpl.n	800d952 <_fwalk_sglue+0x22>
 800d946:	6824      	ldr	r4, [r4, #0]
 800d948:	2c00      	cmp	r4, #0
 800d94a:	d1f7      	bne.n	800d93c <_fwalk_sglue+0xc>
 800d94c:	4630      	mov	r0, r6
 800d94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d952:	89ab      	ldrh	r3, [r5, #12]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d907      	bls.n	800d968 <_fwalk_sglue+0x38>
 800d958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d95c:	3301      	adds	r3, #1
 800d95e:	d003      	beq.n	800d968 <_fwalk_sglue+0x38>
 800d960:	4629      	mov	r1, r5
 800d962:	4638      	mov	r0, r7
 800d964:	47c0      	blx	r8
 800d966:	4306      	orrs	r6, r0
 800d968:	3568      	adds	r5, #104	@ 0x68
 800d96a:	e7e9      	b.n	800d940 <_fwalk_sglue+0x10>

0800d96c <iprintf>:
 800d96c:	b40f      	push	{r0, r1, r2, r3}
 800d96e:	b507      	push	{r0, r1, r2, lr}
 800d970:	4906      	ldr	r1, [pc, #24]	@ (800d98c <iprintf+0x20>)
 800d972:	ab04      	add	r3, sp, #16
 800d974:	6808      	ldr	r0, [r1, #0]
 800d976:	f853 2b04 	ldr.w	r2, [r3], #4
 800d97a:	6881      	ldr	r1, [r0, #8]
 800d97c:	9301      	str	r3, [sp, #4]
 800d97e:	f001 fcc1 	bl	800f304 <_vfiprintf_r>
 800d982:	b003      	add	sp, #12
 800d984:	f85d eb04 	ldr.w	lr, [sp], #4
 800d988:	b004      	add	sp, #16
 800d98a:	4770      	bx	lr
 800d98c:	20000038 	.word	0x20000038

0800d990 <putchar>:
 800d990:	4b02      	ldr	r3, [pc, #8]	@ (800d99c <putchar+0xc>)
 800d992:	4601      	mov	r1, r0
 800d994:	6818      	ldr	r0, [r3, #0]
 800d996:	6882      	ldr	r2, [r0, #8]
 800d998:	f001 be78 	b.w	800f68c <_putc_r>
 800d99c:	20000038 	.word	0x20000038

0800d9a0 <sniprintf>:
 800d9a0:	b40c      	push	{r2, r3}
 800d9a2:	b530      	push	{r4, r5, lr}
 800d9a4:	4b17      	ldr	r3, [pc, #92]	@ (800da04 <sniprintf+0x64>)
 800d9a6:	1e0c      	subs	r4, r1, #0
 800d9a8:	681d      	ldr	r5, [r3, #0]
 800d9aa:	b09d      	sub	sp, #116	@ 0x74
 800d9ac:	da08      	bge.n	800d9c0 <sniprintf+0x20>
 800d9ae:	238b      	movs	r3, #139	@ 0x8b
 800d9b0:	602b      	str	r3, [r5, #0]
 800d9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b6:	b01d      	add	sp, #116	@ 0x74
 800d9b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9bc:	b002      	add	sp, #8
 800d9be:	4770      	bx	lr
 800d9c0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d9c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d9c8:	bf14      	ite	ne
 800d9ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d9ce:	4623      	moveq	r3, r4
 800d9d0:	9304      	str	r3, [sp, #16]
 800d9d2:	9307      	str	r3, [sp, #28]
 800d9d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d9d8:	9002      	str	r0, [sp, #8]
 800d9da:	9006      	str	r0, [sp, #24]
 800d9dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d9e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d9e2:	ab21      	add	r3, sp, #132	@ 0x84
 800d9e4:	a902      	add	r1, sp, #8
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	9301      	str	r3, [sp, #4]
 800d9ea:	f001 fb65 	bl	800f0b8 <_svfiprintf_r>
 800d9ee:	1c43      	adds	r3, r0, #1
 800d9f0:	bfbc      	itt	lt
 800d9f2:	238b      	movlt	r3, #139	@ 0x8b
 800d9f4:	602b      	strlt	r3, [r5, #0]
 800d9f6:	2c00      	cmp	r4, #0
 800d9f8:	d0dd      	beq.n	800d9b6 <sniprintf+0x16>
 800d9fa:	9b02      	ldr	r3, [sp, #8]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	e7d9      	b.n	800d9b6 <sniprintf+0x16>
 800da02:	bf00      	nop
 800da04:	20000038 	.word	0x20000038

0800da08 <__sread>:
 800da08:	b510      	push	{r4, lr}
 800da0a:	460c      	mov	r4, r1
 800da0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da10:	f000 f86c 	bl	800daec <_read_r>
 800da14:	2800      	cmp	r0, #0
 800da16:	bfab      	itete	ge
 800da18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800da1a:	89a3      	ldrhlt	r3, [r4, #12]
 800da1c:	181b      	addge	r3, r3, r0
 800da1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800da22:	bfac      	ite	ge
 800da24:	6563      	strge	r3, [r4, #84]	@ 0x54
 800da26:	81a3      	strhlt	r3, [r4, #12]
 800da28:	bd10      	pop	{r4, pc}

0800da2a <__swrite>:
 800da2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da2e:	461f      	mov	r7, r3
 800da30:	898b      	ldrh	r3, [r1, #12]
 800da32:	05db      	lsls	r3, r3, #23
 800da34:	4605      	mov	r5, r0
 800da36:	460c      	mov	r4, r1
 800da38:	4616      	mov	r6, r2
 800da3a:	d505      	bpl.n	800da48 <__swrite+0x1e>
 800da3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da40:	2302      	movs	r3, #2
 800da42:	2200      	movs	r2, #0
 800da44:	f000 f840 	bl	800dac8 <_lseek_r>
 800da48:	89a3      	ldrh	r3, [r4, #12]
 800da4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800da52:	81a3      	strh	r3, [r4, #12]
 800da54:	4632      	mov	r2, r6
 800da56:	463b      	mov	r3, r7
 800da58:	4628      	mov	r0, r5
 800da5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da5e:	f000 b867 	b.w	800db30 <_write_r>

0800da62 <__sseek>:
 800da62:	b510      	push	{r4, lr}
 800da64:	460c      	mov	r4, r1
 800da66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da6a:	f000 f82d 	bl	800dac8 <_lseek_r>
 800da6e:	1c43      	adds	r3, r0, #1
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	bf15      	itete	ne
 800da74:	6560      	strne	r0, [r4, #84]	@ 0x54
 800da76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800da7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800da7e:	81a3      	strheq	r3, [r4, #12]
 800da80:	bf18      	it	ne
 800da82:	81a3      	strhne	r3, [r4, #12]
 800da84:	bd10      	pop	{r4, pc}

0800da86 <__sclose>:
 800da86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da8a:	f000 b80d 	b.w	800daa8 <_close_r>

0800da8e <memset>:
 800da8e:	4402      	add	r2, r0
 800da90:	4603      	mov	r3, r0
 800da92:	4293      	cmp	r3, r2
 800da94:	d100      	bne.n	800da98 <memset+0xa>
 800da96:	4770      	bx	lr
 800da98:	f803 1b01 	strb.w	r1, [r3], #1
 800da9c:	e7f9      	b.n	800da92 <memset+0x4>
	...

0800daa0 <_localeconv_r>:
 800daa0:	4800      	ldr	r0, [pc, #0]	@ (800daa4 <_localeconv_r+0x4>)
 800daa2:	4770      	bx	lr
 800daa4:	20000178 	.word	0x20000178

0800daa8 <_close_r>:
 800daa8:	b538      	push	{r3, r4, r5, lr}
 800daaa:	4d06      	ldr	r5, [pc, #24]	@ (800dac4 <_close_r+0x1c>)
 800daac:	2300      	movs	r3, #0
 800daae:	4604      	mov	r4, r0
 800dab0:	4608      	mov	r0, r1
 800dab2:	602b      	str	r3, [r5, #0]
 800dab4:	f7f5 feb5 	bl	8003822 <_close>
 800dab8:	1c43      	adds	r3, r0, #1
 800daba:	d102      	bne.n	800dac2 <_close_r+0x1a>
 800dabc:	682b      	ldr	r3, [r5, #0]
 800dabe:	b103      	cbz	r3, 800dac2 <_close_r+0x1a>
 800dac0:	6023      	str	r3, [r4, #0]
 800dac2:	bd38      	pop	{r3, r4, r5, pc}
 800dac4:	20000b40 	.word	0x20000b40

0800dac8 <_lseek_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d07      	ldr	r5, [pc, #28]	@ (800dae8 <_lseek_r+0x20>)
 800dacc:	4604      	mov	r4, r0
 800dace:	4608      	mov	r0, r1
 800dad0:	4611      	mov	r1, r2
 800dad2:	2200      	movs	r2, #0
 800dad4:	602a      	str	r2, [r5, #0]
 800dad6:	461a      	mov	r2, r3
 800dad8:	f7f5 feca 	bl	8003870 <_lseek>
 800dadc:	1c43      	adds	r3, r0, #1
 800dade:	d102      	bne.n	800dae6 <_lseek_r+0x1e>
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	b103      	cbz	r3, 800dae6 <_lseek_r+0x1e>
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	bd38      	pop	{r3, r4, r5, pc}
 800dae8:	20000b40 	.word	0x20000b40

0800daec <_read_r>:
 800daec:	b538      	push	{r3, r4, r5, lr}
 800daee:	4d07      	ldr	r5, [pc, #28]	@ (800db0c <_read_r+0x20>)
 800daf0:	4604      	mov	r4, r0
 800daf2:	4608      	mov	r0, r1
 800daf4:	4611      	mov	r1, r2
 800daf6:	2200      	movs	r2, #0
 800daf8:	602a      	str	r2, [r5, #0]
 800dafa:	461a      	mov	r2, r3
 800dafc:	f7f5 fe58 	bl	80037b0 <_read>
 800db00:	1c43      	adds	r3, r0, #1
 800db02:	d102      	bne.n	800db0a <_read_r+0x1e>
 800db04:	682b      	ldr	r3, [r5, #0]
 800db06:	b103      	cbz	r3, 800db0a <_read_r+0x1e>
 800db08:	6023      	str	r3, [r4, #0]
 800db0a:	bd38      	pop	{r3, r4, r5, pc}
 800db0c:	20000b40 	.word	0x20000b40

0800db10 <_sbrk_r>:
 800db10:	b538      	push	{r3, r4, r5, lr}
 800db12:	4d06      	ldr	r5, [pc, #24]	@ (800db2c <_sbrk_r+0x1c>)
 800db14:	2300      	movs	r3, #0
 800db16:	4604      	mov	r4, r0
 800db18:	4608      	mov	r0, r1
 800db1a:	602b      	str	r3, [r5, #0]
 800db1c:	f7f5 feb6 	bl	800388c <_sbrk>
 800db20:	1c43      	adds	r3, r0, #1
 800db22:	d102      	bne.n	800db2a <_sbrk_r+0x1a>
 800db24:	682b      	ldr	r3, [r5, #0]
 800db26:	b103      	cbz	r3, 800db2a <_sbrk_r+0x1a>
 800db28:	6023      	str	r3, [r4, #0]
 800db2a:	bd38      	pop	{r3, r4, r5, pc}
 800db2c:	20000b40 	.word	0x20000b40

0800db30 <_write_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4d07      	ldr	r5, [pc, #28]	@ (800db50 <_write_r+0x20>)
 800db34:	4604      	mov	r4, r0
 800db36:	4608      	mov	r0, r1
 800db38:	4611      	mov	r1, r2
 800db3a:	2200      	movs	r2, #0
 800db3c:	602a      	str	r2, [r5, #0]
 800db3e:	461a      	mov	r2, r3
 800db40:	f7f5 fe53 	bl	80037ea <_write>
 800db44:	1c43      	adds	r3, r0, #1
 800db46:	d102      	bne.n	800db4e <_write_r+0x1e>
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	b103      	cbz	r3, 800db4e <_write_r+0x1e>
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	bd38      	pop	{r3, r4, r5, pc}
 800db50:	20000b40 	.word	0x20000b40

0800db54 <__errno>:
 800db54:	4b01      	ldr	r3, [pc, #4]	@ (800db5c <__errno+0x8>)
 800db56:	6818      	ldr	r0, [r3, #0]
 800db58:	4770      	bx	lr
 800db5a:	bf00      	nop
 800db5c:	20000038 	.word	0x20000038

0800db60 <__libc_init_array>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	4d0d      	ldr	r5, [pc, #52]	@ (800db98 <__libc_init_array+0x38>)
 800db64:	4c0d      	ldr	r4, [pc, #52]	@ (800db9c <__libc_init_array+0x3c>)
 800db66:	1b64      	subs	r4, r4, r5
 800db68:	10a4      	asrs	r4, r4, #2
 800db6a:	2600      	movs	r6, #0
 800db6c:	42a6      	cmp	r6, r4
 800db6e:	d109      	bne.n	800db84 <__libc_init_array+0x24>
 800db70:	4d0b      	ldr	r5, [pc, #44]	@ (800dba0 <__libc_init_array+0x40>)
 800db72:	4c0c      	ldr	r4, [pc, #48]	@ (800dba4 <__libc_init_array+0x44>)
 800db74:	f001 ffd6 	bl	800fb24 <_init>
 800db78:	1b64      	subs	r4, r4, r5
 800db7a:	10a4      	asrs	r4, r4, #2
 800db7c:	2600      	movs	r6, #0
 800db7e:	42a6      	cmp	r6, r4
 800db80:	d105      	bne.n	800db8e <__libc_init_array+0x2e>
 800db82:	bd70      	pop	{r4, r5, r6, pc}
 800db84:	f855 3b04 	ldr.w	r3, [r5], #4
 800db88:	4798      	blx	r3
 800db8a:	3601      	adds	r6, #1
 800db8c:	e7ee      	b.n	800db6c <__libc_init_array+0xc>
 800db8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db92:	4798      	blx	r3
 800db94:	3601      	adds	r6, #1
 800db96:	e7f2      	b.n	800db7e <__libc_init_array+0x1e>
 800db98:	080153c0 	.word	0x080153c0
 800db9c:	080153c0 	.word	0x080153c0
 800dba0:	080153c0 	.word	0x080153c0
 800dba4:	080153c4 	.word	0x080153c4

0800dba8 <__retarget_lock_init_recursive>:
 800dba8:	4770      	bx	lr

0800dbaa <__retarget_lock_acquire_recursive>:
 800dbaa:	4770      	bx	lr

0800dbac <__retarget_lock_release_recursive>:
 800dbac:	4770      	bx	lr

0800dbae <memcpy>:
 800dbae:	440a      	add	r2, r1
 800dbb0:	4291      	cmp	r1, r2
 800dbb2:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbb6:	d100      	bne.n	800dbba <memcpy+0xc>
 800dbb8:	4770      	bx	lr
 800dbba:	b510      	push	{r4, lr}
 800dbbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbc4:	4291      	cmp	r1, r2
 800dbc6:	d1f9      	bne.n	800dbbc <memcpy+0xe>
 800dbc8:	bd10      	pop	{r4, pc}

0800dbca <quorem>:
 800dbca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbce:	6903      	ldr	r3, [r0, #16]
 800dbd0:	690c      	ldr	r4, [r1, #16]
 800dbd2:	42a3      	cmp	r3, r4
 800dbd4:	4607      	mov	r7, r0
 800dbd6:	db7e      	blt.n	800dcd6 <quorem+0x10c>
 800dbd8:	3c01      	subs	r4, #1
 800dbda:	f101 0814 	add.w	r8, r1, #20
 800dbde:	00a3      	lsls	r3, r4, #2
 800dbe0:	f100 0514 	add.w	r5, r0, #20
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbea:	9301      	str	r3, [sp, #4]
 800dbec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dbf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbf4:	3301      	adds	r3, #1
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dbfc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc00:	d32e      	bcc.n	800dc60 <quorem+0x96>
 800dc02:	f04f 0a00 	mov.w	sl, #0
 800dc06:	46c4      	mov	ip, r8
 800dc08:	46ae      	mov	lr, r5
 800dc0a:	46d3      	mov	fp, sl
 800dc0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc10:	b298      	uxth	r0, r3
 800dc12:	fb06 a000 	mla	r0, r6, r0, sl
 800dc16:	0c02      	lsrs	r2, r0, #16
 800dc18:	0c1b      	lsrs	r3, r3, #16
 800dc1a:	fb06 2303 	mla	r3, r6, r3, r2
 800dc1e:	f8de 2000 	ldr.w	r2, [lr]
 800dc22:	b280      	uxth	r0, r0
 800dc24:	b292      	uxth	r2, r2
 800dc26:	1a12      	subs	r2, r2, r0
 800dc28:	445a      	add	r2, fp
 800dc2a:	f8de 0000 	ldr.w	r0, [lr]
 800dc2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dc38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dc3c:	b292      	uxth	r2, r2
 800dc3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dc42:	45e1      	cmp	r9, ip
 800dc44:	f84e 2b04 	str.w	r2, [lr], #4
 800dc48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dc4c:	d2de      	bcs.n	800dc0c <quorem+0x42>
 800dc4e:	9b00      	ldr	r3, [sp, #0]
 800dc50:	58eb      	ldr	r3, [r5, r3]
 800dc52:	b92b      	cbnz	r3, 800dc60 <quorem+0x96>
 800dc54:	9b01      	ldr	r3, [sp, #4]
 800dc56:	3b04      	subs	r3, #4
 800dc58:	429d      	cmp	r5, r3
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	d32f      	bcc.n	800dcbe <quorem+0xf4>
 800dc5e:	613c      	str	r4, [r7, #16]
 800dc60:	4638      	mov	r0, r7
 800dc62:	f001 f8c5 	bl	800edf0 <__mcmp>
 800dc66:	2800      	cmp	r0, #0
 800dc68:	db25      	blt.n	800dcb6 <quorem+0xec>
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc72:	f8d1 c000 	ldr.w	ip, [r1]
 800dc76:	fa1f fe82 	uxth.w	lr, r2
 800dc7a:	fa1f f38c 	uxth.w	r3, ip
 800dc7e:	eba3 030e 	sub.w	r3, r3, lr
 800dc82:	4403      	add	r3, r0
 800dc84:	0c12      	lsrs	r2, r2, #16
 800dc86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dc8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dc8e:	b29b      	uxth	r3, r3
 800dc90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc94:	45c1      	cmp	r9, r8
 800dc96:	f841 3b04 	str.w	r3, [r1], #4
 800dc9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dc9e:	d2e6      	bcs.n	800dc6e <quorem+0xa4>
 800dca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dca4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dca8:	b922      	cbnz	r2, 800dcb4 <quorem+0xea>
 800dcaa:	3b04      	subs	r3, #4
 800dcac:	429d      	cmp	r5, r3
 800dcae:	461a      	mov	r2, r3
 800dcb0:	d30b      	bcc.n	800dcca <quorem+0x100>
 800dcb2:	613c      	str	r4, [r7, #16]
 800dcb4:	3601      	adds	r6, #1
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	b003      	add	sp, #12
 800dcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcbe:	6812      	ldr	r2, [r2, #0]
 800dcc0:	3b04      	subs	r3, #4
 800dcc2:	2a00      	cmp	r2, #0
 800dcc4:	d1cb      	bne.n	800dc5e <quorem+0x94>
 800dcc6:	3c01      	subs	r4, #1
 800dcc8:	e7c6      	b.n	800dc58 <quorem+0x8e>
 800dcca:	6812      	ldr	r2, [r2, #0]
 800dccc:	3b04      	subs	r3, #4
 800dcce:	2a00      	cmp	r2, #0
 800dcd0:	d1ef      	bne.n	800dcb2 <quorem+0xe8>
 800dcd2:	3c01      	subs	r4, #1
 800dcd4:	e7ea      	b.n	800dcac <quorem+0xe2>
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	e7ee      	b.n	800dcb8 <quorem+0xee>
 800dcda:	0000      	movs	r0, r0
 800dcdc:	0000      	movs	r0, r0
	...

0800dce0 <_dtoa_r>:
 800dce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce4:	69c7      	ldr	r7, [r0, #28]
 800dce6:	b099      	sub	sp, #100	@ 0x64
 800dce8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dcec:	ec55 4b10 	vmov	r4, r5, d0
 800dcf0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dcf2:	9109      	str	r1, [sp, #36]	@ 0x24
 800dcf4:	4683      	mov	fp, r0
 800dcf6:	920e      	str	r2, [sp, #56]	@ 0x38
 800dcf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dcfa:	b97f      	cbnz	r7, 800dd1c <_dtoa_r+0x3c>
 800dcfc:	2010      	movs	r0, #16
 800dcfe:	f7ff f865 	bl	800cdcc <malloc>
 800dd02:	4602      	mov	r2, r0
 800dd04:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd08:	b920      	cbnz	r0, 800dd14 <_dtoa_r+0x34>
 800dd0a:	4ba7      	ldr	r3, [pc, #668]	@ (800dfa8 <_dtoa_r+0x2c8>)
 800dd0c:	21ef      	movs	r1, #239	@ 0xef
 800dd0e:	48a7      	ldr	r0, [pc, #668]	@ (800dfac <_dtoa_r+0x2cc>)
 800dd10:	f001 fd9e 	bl	800f850 <__assert_func>
 800dd14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd18:	6007      	str	r7, [r0, #0]
 800dd1a:	60c7      	str	r7, [r0, #12]
 800dd1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd20:	6819      	ldr	r1, [r3, #0]
 800dd22:	b159      	cbz	r1, 800dd3c <_dtoa_r+0x5c>
 800dd24:	685a      	ldr	r2, [r3, #4]
 800dd26:	604a      	str	r2, [r1, #4]
 800dd28:	2301      	movs	r3, #1
 800dd2a:	4093      	lsls	r3, r2
 800dd2c:	608b      	str	r3, [r1, #8]
 800dd2e:	4658      	mov	r0, fp
 800dd30:	f000 fe24 	bl	800e97c <_Bfree>
 800dd34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dd38:	2200      	movs	r2, #0
 800dd3a:	601a      	str	r2, [r3, #0]
 800dd3c:	1e2b      	subs	r3, r5, #0
 800dd3e:	bfb9      	ittee	lt
 800dd40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dd44:	9303      	strlt	r3, [sp, #12]
 800dd46:	2300      	movge	r3, #0
 800dd48:	6033      	strge	r3, [r6, #0]
 800dd4a:	9f03      	ldr	r7, [sp, #12]
 800dd4c:	4b98      	ldr	r3, [pc, #608]	@ (800dfb0 <_dtoa_r+0x2d0>)
 800dd4e:	bfbc      	itt	lt
 800dd50:	2201      	movlt	r2, #1
 800dd52:	6032      	strlt	r2, [r6, #0]
 800dd54:	43bb      	bics	r3, r7
 800dd56:	d112      	bne.n	800dd7e <_dtoa_r+0x9e>
 800dd58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dd5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dd5e:	6013      	str	r3, [r2, #0]
 800dd60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd64:	4323      	orrs	r3, r4
 800dd66:	f000 854d 	beq.w	800e804 <_dtoa_r+0xb24>
 800dd6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dfc4 <_dtoa_r+0x2e4>
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f000 854f 	beq.w	800e814 <_dtoa_r+0xb34>
 800dd76:	f10a 0303 	add.w	r3, sl, #3
 800dd7a:	f000 bd49 	b.w	800e810 <_dtoa_r+0xb30>
 800dd7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dd82:	2200      	movs	r2, #0
 800dd84:	ec51 0b17 	vmov	r0, r1, d7
 800dd88:	2300      	movs	r3, #0
 800dd8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dd8e:	f7f2 feb3 	bl	8000af8 <__aeabi_dcmpeq>
 800dd92:	4680      	mov	r8, r0
 800dd94:	b158      	cbz	r0, 800ddae <_dtoa_r+0xce>
 800dd96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dd98:	2301      	movs	r3, #1
 800dd9a:	6013      	str	r3, [r2, #0]
 800dd9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dd9e:	b113      	cbz	r3, 800dda6 <_dtoa_r+0xc6>
 800dda0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dda2:	4b84      	ldr	r3, [pc, #528]	@ (800dfb4 <_dtoa_r+0x2d4>)
 800dda4:	6013      	str	r3, [r2, #0]
 800dda6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dfc8 <_dtoa_r+0x2e8>
 800ddaa:	f000 bd33 	b.w	800e814 <_dtoa_r+0xb34>
 800ddae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ddb2:	aa16      	add	r2, sp, #88	@ 0x58
 800ddb4:	a917      	add	r1, sp, #92	@ 0x5c
 800ddb6:	4658      	mov	r0, fp
 800ddb8:	f001 f8ca 	bl	800ef50 <__d2b>
 800ddbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ddc0:	4681      	mov	r9, r0
 800ddc2:	2e00      	cmp	r6, #0
 800ddc4:	d077      	beq.n	800deb6 <_dtoa_r+0x1d6>
 800ddc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ddc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ddcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ddd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ddd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dddc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dde0:	4619      	mov	r1, r3
 800dde2:	2200      	movs	r2, #0
 800dde4:	4b74      	ldr	r3, [pc, #464]	@ (800dfb8 <_dtoa_r+0x2d8>)
 800dde6:	f7f2 fa67 	bl	80002b8 <__aeabi_dsub>
 800ddea:	a369      	add	r3, pc, #420	@ (adr r3, 800df90 <_dtoa_r+0x2b0>)
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f7f2 fc1a 	bl	8000628 <__aeabi_dmul>
 800ddf4:	a368      	add	r3, pc, #416	@ (adr r3, 800df98 <_dtoa_r+0x2b8>)
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	f7f2 fa5f 	bl	80002bc <__adddf3>
 800ddfe:	4604      	mov	r4, r0
 800de00:	4630      	mov	r0, r6
 800de02:	460d      	mov	r5, r1
 800de04:	f7f2 fba6 	bl	8000554 <__aeabi_i2d>
 800de08:	a365      	add	r3, pc, #404	@ (adr r3, 800dfa0 <_dtoa_r+0x2c0>)
 800de0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0e:	f7f2 fc0b 	bl	8000628 <__aeabi_dmul>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	4620      	mov	r0, r4
 800de18:	4629      	mov	r1, r5
 800de1a:	f7f2 fa4f 	bl	80002bc <__adddf3>
 800de1e:	4604      	mov	r4, r0
 800de20:	460d      	mov	r5, r1
 800de22:	f7f2 feb1 	bl	8000b88 <__aeabi_d2iz>
 800de26:	2200      	movs	r2, #0
 800de28:	4607      	mov	r7, r0
 800de2a:	2300      	movs	r3, #0
 800de2c:	4620      	mov	r0, r4
 800de2e:	4629      	mov	r1, r5
 800de30:	f7f2 fe6c 	bl	8000b0c <__aeabi_dcmplt>
 800de34:	b140      	cbz	r0, 800de48 <_dtoa_r+0x168>
 800de36:	4638      	mov	r0, r7
 800de38:	f7f2 fb8c 	bl	8000554 <__aeabi_i2d>
 800de3c:	4622      	mov	r2, r4
 800de3e:	462b      	mov	r3, r5
 800de40:	f7f2 fe5a 	bl	8000af8 <__aeabi_dcmpeq>
 800de44:	b900      	cbnz	r0, 800de48 <_dtoa_r+0x168>
 800de46:	3f01      	subs	r7, #1
 800de48:	2f16      	cmp	r7, #22
 800de4a:	d851      	bhi.n	800def0 <_dtoa_r+0x210>
 800de4c:	4b5b      	ldr	r3, [pc, #364]	@ (800dfbc <_dtoa_r+0x2dc>)
 800de4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800de52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de5a:	f7f2 fe57 	bl	8000b0c <__aeabi_dcmplt>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d048      	beq.n	800def4 <_dtoa_r+0x214>
 800de62:	3f01      	subs	r7, #1
 800de64:	2300      	movs	r3, #0
 800de66:	9312      	str	r3, [sp, #72]	@ 0x48
 800de68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800de6a:	1b9b      	subs	r3, r3, r6
 800de6c:	1e5a      	subs	r2, r3, #1
 800de6e:	bf44      	itt	mi
 800de70:	f1c3 0801 	rsbmi	r8, r3, #1
 800de74:	2300      	movmi	r3, #0
 800de76:	9208      	str	r2, [sp, #32]
 800de78:	bf54      	ite	pl
 800de7a:	f04f 0800 	movpl.w	r8, #0
 800de7e:	9308      	strmi	r3, [sp, #32]
 800de80:	2f00      	cmp	r7, #0
 800de82:	db39      	blt.n	800def8 <_dtoa_r+0x218>
 800de84:	9b08      	ldr	r3, [sp, #32]
 800de86:	970f      	str	r7, [sp, #60]	@ 0x3c
 800de88:	443b      	add	r3, r7
 800de8a:	9308      	str	r3, [sp, #32]
 800de8c:	2300      	movs	r3, #0
 800de8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800de90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de92:	2b09      	cmp	r3, #9
 800de94:	d864      	bhi.n	800df60 <_dtoa_r+0x280>
 800de96:	2b05      	cmp	r3, #5
 800de98:	bfc4      	itt	gt
 800de9a:	3b04      	subgt	r3, #4
 800de9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800de9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dea0:	f1a3 0302 	sub.w	r3, r3, #2
 800dea4:	bfcc      	ite	gt
 800dea6:	2400      	movgt	r4, #0
 800dea8:	2401      	movle	r4, #1
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d863      	bhi.n	800df76 <_dtoa_r+0x296>
 800deae:	e8df f003 	tbb	[pc, r3]
 800deb2:	372a      	.short	0x372a
 800deb4:	5535      	.short	0x5535
 800deb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800deba:	441e      	add	r6, r3
 800debc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dec0:	2b20      	cmp	r3, #32
 800dec2:	bfc1      	itttt	gt
 800dec4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dec8:	409f      	lslgt	r7, r3
 800deca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800dece:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ded2:	bfd6      	itet	le
 800ded4:	f1c3 0320 	rsble	r3, r3, #32
 800ded8:	ea47 0003 	orrgt.w	r0, r7, r3
 800dedc:	fa04 f003 	lslle.w	r0, r4, r3
 800dee0:	f7f2 fb28 	bl	8000534 <__aeabi_ui2d>
 800dee4:	2201      	movs	r2, #1
 800dee6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800deea:	3e01      	subs	r6, #1
 800deec:	9214      	str	r2, [sp, #80]	@ 0x50
 800deee:	e777      	b.n	800dde0 <_dtoa_r+0x100>
 800def0:	2301      	movs	r3, #1
 800def2:	e7b8      	b.n	800de66 <_dtoa_r+0x186>
 800def4:	9012      	str	r0, [sp, #72]	@ 0x48
 800def6:	e7b7      	b.n	800de68 <_dtoa_r+0x188>
 800def8:	427b      	negs	r3, r7
 800defa:	930a      	str	r3, [sp, #40]	@ 0x28
 800defc:	2300      	movs	r3, #0
 800defe:	eba8 0807 	sub.w	r8, r8, r7
 800df02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df04:	e7c4      	b.n	800de90 <_dtoa_r+0x1b0>
 800df06:	2300      	movs	r3, #0
 800df08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	dc35      	bgt.n	800df7c <_dtoa_r+0x29c>
 800df10:	2301      	movs	r3, #1
 800df12:	9300      	str	r3, [sp, #0]
 800df14:	9307      	str	r3, [sp, #28]
 800df16:	461a      	mov	r2, r3
 800df18:	920e      	str	r2, [sp, #56]	@ 0x38
 800df1a:	e00b      	b.n	800df34 <_dtoa_r+0x254>
 800df1c:	2301      	movs	r3, #1
 800df1e:	e7f3      	b.n	800df08 <_dtoa_r+0x228>
 800df20:	2300      	movs	r3, #0
 800df22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df26:	18fb      	adds	r3, r7, r3
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	3301      	adds	r3, #1
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	9307      	str	r3, [sp, #28]
 800df30:	bfb8      	it	lt
 800df32:	2301      	movlt	r3, #1
 800df34:	f8db 001c 	ldr.w	r0, [fp, #28]
 800df38:	2100      	movs	r1, #0
 800df3a:	2204      	movs	r2, #4
 800df3c:	f102 0514 	add.w	r5, r2, #20
 800df40:	429d      	cmp	r5, r3
 800df42:	d91f      	bls.n	800df84 <_dtoa_r+0x2a4>
 800df44:	6041      	str	r1, [r0, #4]
 800df46:	4658      	mov	r0, fp
 800df48:	f000 fcd8 	bl	800e8fc <_Balloc>
 800df4c:	4682      	mov	sl, r0
 800df4e:	2800      	cmp	r0, #0
 800df50:	d13c      	bne.n	800dfcc <_dtoa_r+0x2ec>
 800df52:	4b1b      	ldr	r3, [pc, #108]	@ (800dfc0 <_dtoa_r+0x2e0>)
 800df54:	4602      	mov	r2, r0
 800df56:	f240 11af 	movw	r1, #431	@ 0x1af
 800df5a:	e6d8      	b.n	800dd0e <_dtoa_r+0x2e>
 800df5c:	2301      	movs	r3, #1
 800df5e:	e7e0      	b.n	800df22 <_dtoa_r+0x242>
 800df60:	2401      	movs	r4, #1
 800df62:	2300      	movs	r3, #0
 800df64:	9309      	str	r3, [sp, #36]	@ 0x24
 800df66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800df68:	f04f 33ff 	mov.w	r3, #4294967295
 800df6c:	9300      	str	r3, [sp, #0]
 800df6e:	9307      	str	r3, [sp, #28]
 800df70:	2200      	movs	r2, #0
 800df72:	2312      	movs	r3, #18
 800df74:	e7d0      	b.n	800df18 <_dtoa_r+0x238>
 800df76:	2301      	movs	r3, #1
 800df78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df7a:	e7f5      	b.n	800df68 <_dtoa_r+0x288>
 800df7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	9307      	str	r3, [sp, #28]
 800df82:	e7d7      	b.n	800df34 <_dtoa_r+0x254>
 800df84:	3101      	adds	r1, #1
 800df86:	0052      	lsls	r2, r2, #1
 800df88:	e7d8      	b.n	800df3c <_dtoa_r+0x25c>
 800df8a:	bf00      	nop
 800df8c:	f3af 8000 	nop.w
 800df90:	636f4361 	.word	0x636f4361
 800df94:	3fd287a7 	.word	0x3fd287a7
 800df98:	8b60c8b3 	.word	0x8b60c8b3
 800df9c:	3fc68a28 	.word	0x3fc68a28
 800dfa0:	509f79fb 	.word	0x509f79fb
 800dfa4:	3fd34413 	.word	0x3fd34413
 800dfa8:	08015089 	.word	0x08015089
 800dfac:	080150a0 	.word	0x080150a0
 800dfb0:	7ff00000 	.word	0x7ff00000
 800dfb4:	08015059 	.word	0x08015059
 800dfb8:	3ff80000 	.word	0x3ff80000
 800dfbc:	08015198 	.word	0x08015198
 800dfc0:	080150f8 	.word	0x080150f8
 800dfc4:	08015085 	.word	0x08015085
 800dfc8:	08015058 	.word	0x08015058
 800dfcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dfd0:	6018      	str	r0, [r3, #0]
 800dfd2:	9b07      	ldr	r3, [sp, #28]
 800dfd4:	2b0e      	cmp	r3, #14
 800dfd6:	f200 80a4 	bhi.w	800e122 <_dtoa_r+0x442>
 800dfda:	2c00      	cmp	r4, #0
 800dfdc:	f000 80a1 	beq.w	800e122 <_dtoa_r+0x442>
 800dfe0:	2f00      	cmp	r7, #0
 800dfe2:	dd33      	ble.n	800e04c <_dtoa_r+0x36c>
 800dfe4:	4bad      	ldr	r3, [pc, #692]	@ (800e29c <_dtoa_r+0x5bc>)
 800dfe6:	f007 020f 	and.w	r2, r7, #15
 800dfea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dfee:	ed93 7b00 	vldr	d7, [r3]
 800dff2:	05f8      	lsls	r0, r7, #23
 800dff4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800dff8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800dffc:	d516      	bpl.n	800e02c <_dtoa_r+0x34c>
 800dffe:	4ba8      	ldr	r3, [pc, #672]	@ (800e2a0 <_dtoa_r+0x5c0>)
 800e000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e004:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e008:	f7f2 fc38 	bl	800087c <__aeabi_ddiv>
 800e00c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e010:	f004 040f 	and.w	r4, r4, #15
 800e014:	2603      	movs	r6, #3
 800e016:	4da2      	ldr	r5, [pc, #648]	@ (800e2a0 <_dtoa_r+0x5c0>)
 800e018:	b954      	cbnz	r4, 800e030 <_dtoa_r+0x350>
 800e01a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e022:	f7f2 fc2b 	bl	800087c <__aeabi_ddiv>
 800e026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e02a:	e028      	b.n	800e07e <_dtoa_r+0x39e>
 800e02c:	2602      	movs	r6, #2
 800e02e:	e7f2      	b.n	800e016 <_dtoa_r+0x336>
 800e030:	07e1      	lsls	r1, r4, #31
 800e032:	d508      	bpl.n	800e046 <_dtoa_r+0x366>
 800e034:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e038:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e03c:	f7f2 faf4 	bl	8000628 <__aeabi_dmul>
 800e040:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e044:	3601      	adds	r6, #1
 800e046:	1064      	asrs	r4, r4, #1
 800e048:	3508      	adds	r5, #8
 800e04a:	e7e5      	b.n	800e018 <_dtoa_r+0x338>
 800e04c:	f000 80d2 	beq.w	800e1f4 <_dtoa_r+0x514>
 800e050:	427c      	negs	r4, r7
 800e052:	4b92      	ldr	r3, [pc, #584]	@ (800e29c <_dtoa_r+0x5bc>)
 800e054:	4d92      	ldr	r5, [pc, #584]	@ (800e2a0 <_dtoa_r+0x5c0>)
 800e056:	f004 020f 	and.w	r2, r4, #15
 800e05a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e066:	f7f2 fadf 	bl	8000628 <__aeabi_dmul>
 800e06a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e06e:	1124      	asrs	r4, r4, #4
 800e070:	2300      	movs	r3, #0
 800e072:	2602      	movs	r6, #2
 800e074:	2c00      	cmp	r4, #0
 800e076:	f040 80b2 	bne.w	800e1de <_dtoa_r+0x4fe>
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1d3      	bne.n	800e026 <_dtoa_r+0x346>
 800e07e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e080:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	f000 80b7 	beq.w	800e1f8 <_dtoa_r+0x518>
 800e08a:	4b86      	ldr	r3, [pc, #536]	@ (800e2a4 <_dtoa_r+0x5c4>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	4620      	mov	r0, r4
 800e090:	4629      	mov	r1, r5
 800e092:	f7f2 fd3b 	bl	8000b0c <__aeabi_dcmplt>
 800e096:	2800      	cmp	r0, #0
 800e098:	f000 80ae 	beq.w	800e1f8 <_dtoa_r+0x518>
 800e09c:	9b07      	ldr	r3, [sp, #28]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f000 80aa 	beq.w	800e1f8 <_dtoa_r+0x518>
 800e0a4:	9b00      	ldr	r3, [sp, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	dd37      	ble.n	800e11a <_dtoa_r+0x43a>
 800e0aa:	1e7b      	subs	r3, r7, #1
 800e0ac:	9304      	str	r3, [sp, #16]
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	4b7d      	ldr	r3, [pc, #500]	@ (800e2a8 <_dtoa_r+0x5c8>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	4629      	mov	r1, r5
 800e0b6:	f7f2 fab7 	bl	8000628 <__aeabi_dmul>
 800e0ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0be:	9c00      	ldr	r4, [sp, #0]
 800e0c0:	3601      	adds	r6, #1
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	f7f2 fa46 	bl	8000554 <__aeabi_i2d>
 800e0c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0cc:	f7f2 faac 	bl	8000628 <__aeabi_dmul>
 800e0d0:	4b76      	ldr	r3, [pc, #472]	@ (800e2ac <_dtoa_r+0x5cc>)
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	f7f2 f8f2 	bl	80002bc <__adddf3>
 800e0d8:	4605      	mov	r5, r0
 800e0da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e0de:	2c00      	cmp	r4, #0
 800e0e0:	f040 808d 	bne.w	800e1fe <_dtoa_r+0x51e>
 800e0e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0e8:	4b71      	ldr	r3, [pc, #452]	@ (800e2b0 <_dtoa_r+0x5d0>)
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	f7f2 f8e4 	bl	80002b8 <__aeabi_dsub>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e0f8:	462a      	mov	r2, r5
 800e0fa:	4633      	mov	r3, r6
 800e0fc:	f7f2 fd24 	bl	8000b48 <__aeabi_dcmpgt>
 800e100:	2800      	cmp	r0, #0
 800e102:	f040 828b 	bne.w	800e61c <_dtoa_r+0x93c>
 800e106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e10a:	462a      	mov	r2, r5
 800e10c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e110:	f7f2 fcfc 	bl	8000b0c <__aeabi_dcmplt>
 800e114:	2800      	cmp	r0, #0
 800e116:	f040 8128 	bne.w	800e36a <_dtoa_r+0x68a>
 800e11a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e11e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e122:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e124:	2b00      	cmp	r3, #0
 800e126:	f2c0 815a 	blt.w	800e3de <_dtoa_r+0x6fe>
 800e12a:	2f0e      	cmp	r7, #14
 800e12c:	f300 8157 	bgt.w	800e3de <_dtoa_r+0x6fe>
 800e130:	4b5a      	ldr	r3, [pc, #360]	@ (800e29c <_dtoa_r+0x5bc>)
 800e132:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e136:	ed93 7b00 	vldr	d7, [r3]
 800e13a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	ed8d 7b00 	vstr	d7, [sp]
 800e142:	da03      	bge.n	800e14c <_dtoa_r+0x46c>
 800e144:	9b07      	ldr	r3, [sp, #28]
 800e146:	2b00      	cmp	r3, #0
 800e148:	f340 8101 	ble.w	800e34e <_dtoa_r+0x66e>
 800e14c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e150:	4656      	mov	r6, sl
 800e152:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e156:	4620      	mov	r0, r4
 800e158:	4629      	mov	r1, r5
 800e15a:	f7f2 fb8f 	bl	800087c <__aeabi_ddiv>
 800e15e:	f7f2 fd13 	bl	8000b88 <__aeabi_d2iz>
 800e162:	4680      	mov	r8, r0
 800e164:	f7f2 f9f6 	bl	8000554 <__aeabi_i2d>
 800e168:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e16c:	f7f2 fa5c 	bl	8000628 <__aeabi_dmul>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	4620      	mov	r0, r4
 800e176:	4629      	mov	r1, r5
 800e178:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e17c:	f7f2 f89c 	bl	80002b8 <__aeabi_dsub>
 800e180:	f806 4b01 	strb.w	r4, [r6], #1
 800e184:	9d07      	ldr	r5, [sp, #28]
 800e186:	eba6 040a 	sub.w	r4, r6, sl
 800e18a:	42a5      	cmp	r5, r4
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	f040 8117 	bne.w	800e3c2 <_dtoa_r+0x6e2>
 800e194:	f7f2 f892 	bl	80002bc <__adddf3>
 800e198:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e19c:	4604      	mov	r4, r0
 800e19e:	460d      	mov	r5, r1
 800e1a0:	f7f2 fcd2 	bl	8000b48 <__aeabi_dcmpgt>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	f040 80f9 	bne.w	800e39c <_dtoa_r+0x6bc>
 800e1aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	4629      	mov	r1, r5
 800e1b2:	f7f2 fca1 	bl	8000af8 <__aeabi_dcmpeq>
 800e1b6:	b118      	cbz	r0, 800e1c0 <_dtoa_r+0x4e0>
 800e1b8:	f018 0f01 	tst.w	r8, #1
 800e1bc:	f040 80ee 	bne.w	800e39c <_dtoa_r+0x6bc>
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	4658      	mov	r0, fp
 800e1c4:	f000 fbda 	bl	800e97c <_Bfree>
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	7033      	strb	r3, [r6, #0]
 800e1cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e1ce:	3701      	adds	r7, #1
 800e1d0:	601f      	str	r7, [r3, #0]
 800e1d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	f000 831d 	beq.w	800e814 <_dtoa_r+0xb34>
 800e1da:	601e      	str	r6, [r3, #0]
 800e1dc:	e31a      	b.n	800e814 <_dtoa_r+0xb34>
 800e1de:	07e2      	lsls	r2, r4, #31
 800e1e0:	d505      	bpl.n	800e1ee <_dtoa_r+0x50e>
 800e1e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e1e6:	f7f2 fa1f 	bl	8000628 <__aeabi_dmul>
 800e1ea:	3601      	adds	r6, #1
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	1064      	asrs	r4, r4, #1
 800e1f0:	3508      	adds	r5, #8
 800e1f2:	e73f      	b.n	800e074 <_dtoa_r+0x394>
 800e1f4:	2602      	movs	r6, #2
 800e1f6:	e742      	b.n	800e07e <_dtoa_r+0x39e>
 800e1f8:	9c07      	ldr	r4, [sp, #28]
 800e1fa:	9704      	str	r7, [sp, #16]
 800e1fc:	e761      	b.n	800e0c2 <_dtoa_r+0x3e2>
 800e1fe:	4b27      	ldr	r3, [pc, #156]	@ (800e29c <_dtoa_r+0x5bc>)
 800e200:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e202:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e206:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e20a:	4454      	add	r4, sl
 800e20c:	2900      	cmp	r1, #0
 800e20e:	d053      	beq.n	800e2b8 <_dtoa_r+0x5d8>
 800e210:	4928      	ldr	r1, [pc, #160]	@ (800e2b4 <_dtoa_r+0x5d4>)
 800e212:	2000      	movs	r0, #0
 800e214:	f7f2 fb32 	bl	800087c <__aeabi_ddiv>
 800e218:	4633      	mov	r3, r6
 800e21a:	462a      	mov	r2, r5
 800e21c:	f7f2 f84c 	bl	80002b8 <__aeabi_dsub>
 800e220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e224:	4656      	mov	r6, sl
 800e226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e22a:	f7f2 fcad 	bl	8000b88 <__aeabi_d2iz>
 800e22e:	4605      	mov	r5, r0
 800e230:	f7f2 f990 	bl	8000554 <__aeabi_i2d>
 800e234:	4602      	mov	r2, r0
 800e236:	460b      	mov	r3, r1
 800e238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e23c:	f7f2 f83c 	bl	80002b8 <__aeabi_dsub>
 800e240:	3530      	adds	r5, #48	@ 0x30
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e24a:	f806 5b01 	strb.w	r5, [r6], #1
 800e24e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e252:	f7f2 fc5b 	bl	8000b0c <__aeabi_dcmplt>
 800e256:	2800      	cmp	r0, #0
 800e258:	d171      	bne.n	800e33e <_dtoa_r+0x65e>
 800e25a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e25e:	4911      	ldr	r1, [pc, #68]	@ (800e2a4 <_dtoa_r+0x5c4>)
 800e260:	2000      	movs	r0, #0
 800e262:	f7f2 f829 	bl	80002b8 <__aeabi_dsub>
 800e266:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e26a:	f7f2 fc4f 	bl	8000b0c <__aeabi_dcmplt>
 800e26e:	2800      	cmp	r0, #0
 800e270:	f040 8095 	bne.w	800e39e <_dtoa_r+0x6be>
 800e274:	42a6      	cmp	r6, r4
 800e276:	f43f af50 	beq.w	800e11a <_dtoa_r+0x43a>
 800e27a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e27e:	4b0a      	ldr	r3, [pc, #40]	@ (800e2a8 <_dtoa_r+0x5c8>)
 800e280:	2200      	movs	r2, #0
 800e282:	f7f2 f9d1 	bl	8000628 <__aeabi_dmul>
 800e286:	4b08      	ldr	r3, [pc, #32]	@ (800e2a8 <_dtoa_r+0x5c8>)
 800e288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e28c:	2200      	movs	r2, #0
 800e28e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e292:	f7f2 f9c9 	bl	8000628 <__aeabi_dmul>
 800e296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e29a:	e7c4      	b.n	800e226 <_dtoa_r+0x546>
 800e29c:	08015198 	.word	0x08015198
 800e2a0:	08015170 	.word	0x08015170
 800e2a4:	3ff00000 	.word	0x3ff00000
 800e2a8:	40240000 	.word	0x40240000
 800e2ac:	401c0000 	.word	0x401c0000
 800e2b0:	40140000 	.word	0x40140000
 800e2b4:	3fe00000 	.word	0x3fe00000
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	f7f2 f9b4 	bl	8000628 <__aeabi_dmul>
 800e2c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2c4:	9415      	str	r4, [sp, #84]	@ 0x54
 800e2c6:	4656      	mov	r6, sl
 800e2c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2cc:	f7f2 fc5c 	bl	8000b88 <__aeabi_d2iz>
 800e2d0:	4605      	mov	r5, r0
 800e2d2:	f7f2 f93f 	bl	8000554 <__aeabi_i2d>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	460b      	mov	r3, r1
 800e2da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2de:	f7f1 ffeb 	bl	80002b8 <__aeabi_dsub>
 800e2e2:	3530      	adds	r5, #48	@ 0x30
 800e2e4:	f806 5b01 	strb.w	r5, [r6], #1
 800e2e8:	4602      	mov	r2, r0
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	42a6      	cmp	r6, r4
 800e2ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2f2:	f04f 0200 	mov.w	r2, #0
 800e2f6:	d124      	bne.n	800e342 <_dtoa_r+0x662>
 800e2f8:	4bac      	ldr	r3, [pc, #688]	@ (800e5ac <_dtoa_r+0x8cc>)
 800e2fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2fe:	f7f1 ffdd 	bl	80002bc <__adddf3>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e30a:	f7f2 fc1d 	bl	8000b48 <__aeabi_dcmpgt>
 800e30e:	2800      	cmp	r0, #0
 800e310:	d145      	bne.n	800e39e <_dtoa_r+0x6be>
 800e312:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e316:	49a5      	ldr	r1, [pc, #660]	@ (800e5ac <_dtoa_r+0x8cc>)
 800e318:	2000      	movs	r0, #0
 800e31a:	f7f1 ffcd 	bl	80002b8 <__aeabi_dsub>
 800e31e:	4602      	mov	r2, r0
 800e320:	460b      	mov	r3, r1
 800e322:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e326:	f7f2 fbf1 	bl	8000b0c <__aeabi_dcmplt>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	f43f aef5 	beq.w	800e11a <_dtoa_r+0x43a>
 800e330:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e332:	1e73      	subs	r3, r6, #1
 800e334:	9315      	str	r3, [sp, #84]	@ 0x54
 800e336:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e33a:	2b30      	cmp	r3, #48	@ 0x30
 800e33c:	d0f8      	beq.n	800e330 <_dtoa_r+0x650>
 800e33e:	9f04      	ldr	r7, [sp, #16]
 800e340:	e73e      	b.n	800e1c0 <_dtoa_r+0x4e0>
 800e342:	4b9b      	ldr	r3, [pc, #620]	@ (800e5b0 <_dtoa_r+0x8d0>)
 800e344:	f7f2 f970 	bl	8000628 <__aeabi_dmul>
 800e348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e34c:	e7bc      	b.n	800e2c8 <_dtoa_r+0x5e8>
 800e34e:	d10c      	bne.n	800e36a <_dtoa_r+0x68a>
 800e350:	4b98      	ldr	r3, [pc, #608]	@ (800e5b4 <_dtoa_r+0x8d4>)
 800e352:	2200      	movs	r2, #0
 800e354:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e358:	f7f2 f966 	bl	8000628 <__aeabi_dmul>
 800e35c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e360:	f7f2 fbe8 	bl	8000b34 <__aeabi_dcmpge>
 800e364:	2800      	cmp	r0, #0
 800e366:	f000 8157 	beq.w	800e618 <_dtoa_r+0x938>
 800e36a:	2400      	movs	r4, #0
 800e36c:	4625      	mov	r5, r4
 800e36e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e370:	43db      	mvns	r3, r3
 800e372:	9304      	str	r3, [sp, #16]
 800e374:	4656      	mov	r6, sl
 800e376:	2700      	movs	r7, #0
 800e378:	4621      	mov	r1, r4
 800e37a:	4658      	mov	r0, fp
 800e37c:	f000 fafe 	bl	800e97c <_Bfree>
 800e380:	2d00      	cmp	r5, #0
 800e382:	d0dc      	beq.n	800e33e <_dtoa_r+0x65e>
 800e384:	b12f      	cbz	r7, 800e392 <_dtoa_r+0x6b2>
 800e386:	42af      	cmp	r7, r5
 800e388:	d003      	beq.n	800e392 <_dtoa_r+0x6b2>
 800e38a:	4639      	mov	r1, r7
 800e38c:	4658      	mov	r0, fp
 800e38e:	f000 faf5 	bl	800e97c <_Bfree>
 800e392:	4629      	mov	r1, r5
 800e394:	4658      	mov	r0, fp
 800e396:	f000 faf1 	bl	800e97c <_Bfree>
 800e39a:	e7d0      	b.n	800e33e <_dtoa_r+0x65e>
 800e39c:	9704      	str	r7, [sp, #16]
 800e39e:	4633      	mov	r3, r6
 800e3a0:	461e      	mov	r6, r3
 800e3a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e3a6:	2a39      	cmp	r2, #57	@ 0x39
 800e3a8:	d107      	bne.n	800e3ba <_dtoa_r+0x6da>
 800e3aa:	459a      	cmp	sl, r3
 800e3ac:	d1f8      	bne.n	800e3a0 <_dtoa_r+0x6c0>
 800e3ae:	9a04      	ldr	r2, [sp, #16]
 800e3b0:	3201      	adds	r2, #1
 800e3b2:	9204      	str	r2, [sp, #16]
 800e3b4:	2230      	movs	r2, #48	@ 0x30
 800e3b6:	f88a 2000 	strb.w	r2, [sl]
 800e3ba:	781a      	ldrb	r2, [r3, #0]
 800e3bc:	3201      	adds	r2, #1
 800e3be:	701a      	strb	r2, [r3, #0]
 800e3c0:	e7bd      	b.n	800e33e <_dtoa_r+0x65e>
 800e3c2:	4b7b      	ldr	r3, [pc, #492]	@ (800e5b0 <_dtoa_r+0x8d0>)
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f7f2 f92f 	bl	8000628 <__aeabi_dmul>
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	460d      	mov	r5, r1
 800e3d2:	f7f2 fb91 	bl	8000af8 <__aeabi_dcmpeq>
 800e3d6:	2800      	cmp	r0, #0
 800e3d8:	f43f aebb 	beq.w	800e152 <_dtoa_r+0x472>
 800e3dc:	e6f0      	b.n	800e1c0 <_dtoa_r+0x4e0>
 800e3de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e3e0:	2a00      	cmp	r2, #0
 800e3e2:	f000 80db 	beq.w	800e59c <_dtoa_r+0x8bc>
 800e3e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3e8:	2a01      	cmp	r2, #1
 800e3ea:	f300 80bf 	bgt.w	800e56c <_dtoa_r+0x88c>
 800e3ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e3f0:	2a00      	cmp	r2, #0
 800e3f2:	f000 80b7 	beq.w	800e564 <_dtoa_r+0x884>
 800e3f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e3fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e3fc:	4646      	mov	r6, r8
 800e3fe:	9a08      	ldr	r2, [sp, #32]
 800e400:	2101      	movs	r1, #1
 800e402:	441a      	add	r2, r3
 800e404:	4658      	mov	r0, fp
 800e406:	4498      	add	r8, r3
 800e408:	9208      	str	r2, [sp, #32]
 800e40a:	f000 fb6b 	bl	800eae4 <__i2b>
 800e40e:	4605      	mov	r5, r0
 800e410:	b15e      	cbz	r6, 800e42a <_dtoa_r+0x74a>
 800e412:	9b08      	ldr	r3, [sp, #32]
 800e414:	2b00      	cmp	r3, #0
 800e416:	dd08      	ble.n	800e42a <_dtoa_r+0x74a>
 800e418:	42b3      	cmp	r3, r6
 800e41a:	9a08      	ldr	r2, [sp, #32]
 800e41c:	bfa8      	it	ge
 800e41e:	4633      	movge	r3, r6
 800e420:	eba8 0803 	sub.w	r8, r8, r3
 800e424:	1af6      	subs	r6, r6, r3
 800e426:	1ad3      	subs	r3, r2, r3
 800e428:	9308      	str	r3, [sp, #32]
 800e42a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e42c:	b1f3      	cbz	r3, 800e46c <_dtoa_r+0x78c>
 800e42e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e430:	2b00      	cmp	r3, #0
 800e432:	f000 80b7 	beq.w	800e5a4 <_dtoa_r+0x8c4>
 800e436:	b18c      	cbz	r4, 800e45c <_dtoa_r+0x77c>
 800e438:	4629      	mov	r1, r5
 800e43a:	4622      	mov	r2, r4
 800e43c:	4658      	mov	r0, fp
 800e43e:	f000 fc11 	bl	800ec64 <__pow5mult>
 800e442:	464a      	mov	r2, r9
 800e444:	4601      	mov	r1, r0
 800e446:	4605      	mov	r5, r0
 800e448:	4658      	mov	r0, fp
 800e44a:	f000 fb61 	bl	800eb10 <__multiply>
 800e44e:	4649      	mov	r1, r9
 800e450:	9004      	str	r0, [sp, #16]
 800e452:	4658      	mov	r0, fp
 800e454:	f000 fa92 	bl	800e97c <_Bfree>
 800e458:	9b04      	ldr	r3, [sp, #16]
 800e45a:	4699      	mov	r9, r3
 800e45c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e45e:	1b1a      	subs	r2, r3, r4
 800e460:	d004      	beq.n	800e46c <_dtoa_r+0x78c>
 800e462:	4649      	mov	r1, r9
 800e464:	4658      	mov	r0, fp
 800e466:	f000 fbfd 	bl	800ec64 <__pow5mult>
 800e46a:	4681      	mov	r9, r0
 800e46c:	2101      	movs	r1, #1
 800e46e:	4658      	mov	r0, fp
 800e470:	f000 fb38 	bl	800eae4 <__i2b>
 800e474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e476:	4604      	mov	r4, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f000 81cf 	beq.w	800e81c <_dtoa_r+0xb3c>
 800e47e:	461a      	mov	r2, r3
 800e480:	4601      	mov	r1, r0
 800e482:	4658      	mov	r0, fp
 800e484:	f000 fbee 	bl	800ec64 <__pow5mult>
 800e488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	4604      	mov	r4, r0
 800e48e:	f300 8095 	bgt.w	800e5bc <_dtoa_r+0x8dc>
 800e492:	9b02      	ldr	r3, [sp, #8]
 800e494:	2b00      	cmp	r3, #0
 800e496:	f040 8087 	bne.w	800e5a8 <_dtoa_r+0x8c8>
 800e49a:	9b03      	ldr	r3, [sp, #12]
 800e49c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f040 8089 	bne.w	800e5b8 <_dtoa_r+0x8d8>
 800e4a6:	9b03      	ldr	r3, [sp, #12]
 800e4a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4ac:	0d1b      	lsrs	r3, r3, #20
 800e4ae:	051b      	lsls	r3, r3, #20
 800e4b0:	b12b      	cbz	r3, 800e4be <_dtoa_r+0x7de>
 800e4b2:	9b08      	ldr	r3, [sp, #32]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	9308      	str	r3, [sp, #32]
 800e4b8:	f108 0801 	add.w	r8, r8, #1
 800e4bc:	2301      	movs	r3, #1
 800e4be:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	f000 81b0 	beq.w	800e828 <_dtoa_r+0xb48>
 800e4c8:	6923      	ldr	r3, [r4, #16]
 800e4ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e4ce:	6918      	ldr	r0, [r3, #16]
 800e4d0:	f000 fabc 	bl	800ea4c <__hi0bits>
 800e4d4:	f1c0 0020 	rsb	r0, r0, #32
 800e4d8:	9b08      	ldr	r3, [sp, #32]
 800e4da:	4418      	add	r0, r3
 800e4dc:	f010 001f 	ands.w	r0, r0, #31
 800e4e0:	d077      	beq.n	800e5d2 <_dtoa_r+0x8f2>
 800e4e2:	f1c0 0320 	rsb	r3, r0, #32
 800e4e6:	2b04      	cmp	r3, #4
 800e4e8:	dd6b      	ble.n	800e5c2 <_dtoa_r+0x8e2>
 800e4ea:	9b08      	ldr	r3, [sp, #32]
 800e4ec:	f1c0 001c 	rsb	r0, r0, #28
 800e4f0:	4403      	add	r3, r0
 800e4f2:	4480      	add	r8, r0
 800e4f4:	4406      	add	r6, r0
 800e4f6:	9308      	str	r3, [sp, #32]
 800e4f8:	f1b8 0f00 	cmp.w	r8, #0
 800e4fc:	dd05      	ble.n	800e50a <_dtoa_r+0x82a>
 800e4fe:	4649      	mov	r1, r9
 800e500:	4642      	mov	r2, r8
 800e502:	4658      	mov	r0, fp
 800e504:	f000 fc08 	bl	800ed18 <__lshift>
 800e508:	4681      	mov	r9, r0
 800e50a:	9b08      	ldr	r3, [sp, #32]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	dd05      	ble.n	800e51c <_dtoa_r+0x83c>
 800e510:	4621      	mov	r1, r4
 800e512:	461a      	mov	r2, r3
 800e514:	4658      	mov	r0, fp
 800e516:	f000 fbff 	bl	800ed18 <__lshift>
 800e51a:	4604      	mov	r4, r0
 800e51c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d059      	beq.n	800e5d6 <_dtoa_r+0x8f6>
 800e522:	4621      	mov	r1, r4
 800e524:	4648      	mov	r0, r9
 800e526:	f000 fc63 	bl	800edf0 <__mcmp>
 800e52a:	2800      	cmp	r0, #0
 800e52c:	da53      	bge.n	800e5d6 <_dtoa_r+0x8f6>
 800e52e:	1e7b      	subs	r3, r7, #1
 800e530:	9304      	str	r3, [sp, #16]
 800e532:	4649      	mov	r1, r9
 800e534:	2300      	movs	r3, #0
 800e536:	220a      	movs	r2, #10
 800e538:	4658      	mov	r0, fp
 800e53a:	f000 fa41 	bl	800e9c0 <__multadd>
 800e53e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e540:	4681      	mov	r9, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	f000 8172 	beq.w	800e82c <_dtoa_r+0xb4c>
 800e548:	2300      	movs	r3, #0
 800e54a:	4629      	mov	r1, r5
 800e54c:	220a      	movs	r2, #10
 800e54e:	4658      	mov	r0, fp
 800e550:	f000 fa36 	bl	800e9c0 <__multadd>
 800e554:	9b00      	ldr	r3, [sp, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	4605      	mov	r5, r0
 800e55a:	dc67      	bgt.n	800e62c <_dtoa_r+0x94c>
 800e55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e55e:	2b02      	cmp	r3, #2
 800e560:	dc41      	bgt.n	800e5e6 <_dtoa_r+0x906>
 800e562:	e063      	b.n	800e62c <_dtoa_r+0x94c>
 800e564:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e566:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e56a:	e746      	b.n	800e3fa <_dtoa_r+0x71a>
 800e56c:	9b07      	ldr	r3, [sp, #28]
 800e56e:	1e5c      	subs	r4, r3, #1
 800e570:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e572:	42a3      	cmp	r3, r4
 800e574:	bfbf      	itttt	lt
 800e576:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e578:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e57a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e57c:	1ae3      	sublt	r3, r4, r3
 800e57e:	bfb4      	ite	lt
 800e580:	18d2      	addlt	r2, r2, r3
 800e582:	1b1c      	subge	r4, r3, r4
 800e584:	9b07      	ldr	r3, [sp, #28]
 800e586:	bfbc      	itt	lt
 800e588:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e58a:	2400      	movlt	r4, #0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	bfb5      	itete	lt
 800e590:	eba8 0603 	sublt.w	r6, r8, r3
 800e594:	9b07      	ldrge	r3, [sp, #28]
 800e596:	2300      	movlt	r3, #0
 800e598:	4646      	movge	r6, r8
 800e59a:	e730      	b.n	800e3fe <_dtoa_r+0x71e>
 800e59c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e59e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e5a0:	4646      	mov	r6, r8
 800e5a2:	e735      	b.n	800e410 <_dtoa_r+0x730>
 800e5a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e5a6:	e75c      	b.n	800e462 <_dtoa_r+0x782>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	e788      	b.n	800e4be <_dtoa_r+0x7de>
 800e5ac:	3fe00000 	.word	0x3fe00000
 800e5b0:	40240000 	.word	0x40240000
 800e5b4:	40140000 	.word	0x40140000
 800e5b8:	9b02      	ldr	r3, [sp, #8]
 800e5ba:	e780      	b.n	800e4be <_dtoa_r+0x7de>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5c0:	e782      	b.n	800e4c8 <_dtoa_r+0x7e8>
 800e5c2:	d099      	beq.n	800e4f8 <_dtoa_r+0x818>
 800e5c4:	9a08      	ldr	r2, [sp, #32]
 800e5c6:	331c      	adds	r3, #28
 800e5c8:	441a      	add	r2, r3
 800e5ca:	4498      	add	r8, r3
 800e5cc:	441e      	add	r6, r3
 800e5ce:	9208      	str	r2, [sp, #32]
 800e5d0:	e792      	b.n	800e4f8 <_dtoa_r+0x818>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	e7f6      	b.n	800e5c4 <_dtoa_r+0x8e4>
 800e5d6:	9b07      	ldr	r3, [sp, #28]
 800e5d8:	9704      	str	r7, [sp, #16]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	dc20      	bgt.n	800e620 <_dtoa_r+0x940>
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5e2:	2b02      	cmp	r3, #2
 800e5e4:	dd1e      	ble.n	800e624 <_dtoa_r+0x944>
 800e5e6:	9b00      	ldr	r3, [sp, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f47f aec0 	bne.w	800e36e <_dtoa_r+0x68e>
 800e5ee:	4621      	mov	r1, r4
 800e5f0:	2205      	movs	r2, #5
 800e5f2:	4658      	mov	r0, fp
 800e5f4:	f000 f9e4 	bl	800e9c0 <__multadd>
 800e5f8:	4601      	mov	r1, r0
 800e5fa:	4604      	mov	r4, r0
 800e5fc:	4648      	mov	r0, r9
 800e5fe:	f000 fbf7 	bl	800edf0 <__mcmp>
 800e602:	2800      	cmp	r0, #0
 800e604:	f77f aeb3 	ble.w	800e36e <_dtoa_r+0x68e>
 800e608:	4656      	mov	r6, sl
 800e60a:	2331      	movs	r3, #49	@ 0x31
 800e60c:	f806 3b01 	strb.w	r3, [r6], #1
 800e610:	9b04      	ldr	r3, [sp, #16]
 800e612:	3301      	adds	r3, #1
 800e614:	9304      	str	r3, [sp, #16]
 800e616:	e6ae      	b.n	800e376 <_dtoa_r+0x696>
 800e618:	9c07      	ldr	r4, [sp, #28]
 800e61a:	9704      	str	r7, [sp, #16]
 800e61c:	4625      	mov	r5, r4
 800e61e:	e7f3      	b.n	800e608 <_dtoa_r+0x928>
 800e620:	9b07      	ldr	r3, [sp, #28]
 800e622:	9300      	str	r3, [sp, #0]
 800e624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e626:	2b00      	cmp	r3, #0
 800e628:	f000 8104 	beq.w	800e834 <_dtoa_r+0xb54>
 800e62c:	2e00      	cmp	r6, #0
 800e62e:	dd05      	ble.n	800e63c <_dtoa_r+0x95c>
 800e630:	4629      	mov	r1, r5
 800e632:	4632      	mov	r2, r6
 800e634:	4658      	mov	r0, fp
 800e636:	f000 fb6f 	bl	800ed18 <__lshift>
 800e63a:	4605      	mov	r5, r0
 800e63c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d05a      	beq.n	800e6f8 <_dtoa_r+0xa18>
 800e642:	6869      	ldr	r1, [r5, #4]
 800e644:	4658      	mov	r0, fp
 800e646:	f000 f959 	bl	800e8fc <_Balloc>
 800e64a:	4606      	mov	r6, r0
 800e64c:	b928      	cbnz	r0, 800e65a <_dtoa_r+0x97a>
 800e64e:	4b84      	ldr	r3, [pc, #528]	@ (800e860 <_dtoa_r+0xb80>)
 800e650:	4602      	mov	r2, r0
 800e652:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e656:	f7ff bb5a 	b.w	800dd0e <_dtoa_r+0x2e>
 800e65a:	692a      	ldr	r2, [r5, #16]
 800e65c:	3202      	adds	r2, #2
 800e65e:	0092      	lsls	r2, r2, #2
 800e660:	f105 010c 	add.w	r1, r5, #12
 800e664:	300c      	adds	r0, #12
 800e666:	f7ff faa2 	bl	800dbae <memcpy>
 800e66a:	2201      	movs	r2, #1
 800e66c:	4631      	mov	r1, r6
 800e66e:	4658      	mov	r0, fp
 800e670:	f000 fb52 	bl	800ed18 <__lshift>
 800e674:	f10a 0301 	add.w	r3, sl, #1
 800e678:	9307      	str	r3, [sp, #28]
 800e67a:	9b00      	ldr	r3, [sp, #0]
 800e67c:	4453      	add	r3, sl
 800e67e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e680:	9b02      	ldr	r3, [sp, #8]
 800e682:	f003 0301 	and.w	r3, r3, #1
 800e686:	462f      	mov	r7, r5
 800e688:	930a      	str	r3, [sp, #40]	@ 0x28
 800e68a:	4605      	mov	r5, r0
 800e68c:	9b07      	ldr	r3, [sp, #28]
 800e68e:	4621      	mov	r1, r4
 800e690:	3b01      	subs	r3, #1
 800e692:	4648      	mov	r0, r9
 800e694:	9300      	str	r3, [sp, #0]
 800e696:	f7ff fa98 	bl	800dbca <quorem>
 800e69a:	4639      	mov	r1, r7
 800e69c:	9002      	str	r0, [sp, #8]
 800e69e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e6a2:	4648      	mov	r0, r9
 800e6a4:	f000 fba4 	bl	800edf0 <__mcmp>
 800e6a8:	462a      	mov	r2, r5
 800e6aa:	9008      	str	r0, [sp, #32]
 800e6ac:	4621      	mov	r1, r4
 800e6ae:	4658      	mov	r0, fp
 800e6b0:	f000 fbba 	bl	800ee28 <__mdiff>
 800e6b4:	68c2      	ldr	r2, [r0, #12]
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	bb02      	cbnz	r2, 800e6fc <_dtoa_r+0xa1c>
 800e6ba:	4601      	mov	r1, r0
 800e6bc:	4648      	mov	r0, r9
 800e6be:	f000 fb97 	bl	800edf0 <__mcmp>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	4631      	mov	r1, r6
 800e6c6:	4658      	mov	r0, fp
 800e6c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e6ca:	f000 f957 	bl	800e97c <_Bfree>
 800e6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6d2:	9e07      	ldr	r6, [sp, #28]
 800e6d4:	ea43 0102 	orr.w	r1, r3, r2
 800e6d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6da:	4319      	orrs	r1, r3
 800e6dc:	d110      	bne.n	800e700 <_dtoa_r+0xa20>
 800e6de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e6e2:	d029      	beq.n	800e738 <_dtoa_r+0xa58>
 800e6e4:	9b08      	ldr	r3, [sp, #32]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	dd02      	ble.n	800e6f0 <_dtoa_r+0xa10>
 800e6ea:	9b02      	ldr	r3, [sp, #8]
 800e6ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e6f0:	9b00      	ldr	r3, [sp, #0]
 800e6f2:	f883 8000 	strb.w	r8, [r3]
 800e6f6:	e63f      	b.n	800e378 <_dtoa_r+0x698>
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	e7bb      	b.n	800e674 <_dtoa_r+0x994>
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	e7e1      	b.n	800e6c4 <_dtoa_r+0x9e4>
 800e700:	9b08      	ldr	r3, [sp, #32]
 800e702:	2b00      	cmp	r3, #0
 800e704:	db04      	blt.n	800e710 <_dtoa_r+0xa30>
 800e706:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e708:	430b      	orrs	r3, r1
 800e70a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e70c:	430b      	orrs	r3, r1
 800e70e:	d120      	bne.n	800e752 <_dtoa_r+0xa72>
 800e710:	2a00      	cmp	r2, #0
 800e712:	dded      	ble.n	800e6f0 <_dtoa_r+0xa10>
 800e714:	4649      	mov	r1, r9
 800e716:	2201      	movs	r2, #1
 800e718:	4658      	mov	r0, fp
 800e71a:	f000 fafd 	bl	800ed18 <__lshift>
 800e71e:	4621      	mov	r1, r4
 800e720:	4681      	mov	r9, r0
 800e722:	f000 fb65 	bl	800edf0 <__mcmp>
 800e726:	2800      	cmp	r0, #0
 800e728:	dc03      	bgt.n	800e732 <_dtoa_r+0xa52>
 800e72a:	d1e1      	bne.n	800e6f0 <_dtoa_r+0xa10>
 800e72c:	f018 0f01 	tst.w	r8, #1
 800e730:	d0de      	beq.n	800e6f0 <_dtoa_r+0xa10>
 800e732:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e736:	d1d8      	bne.n	800e6ea <_dtoa_r+0xa0a>
 800e738:	9a00      	ldr	r2, [sp, #0]
 800e73a:	2339      	movs	r3, #57	@ 0x39
 800e73c:	7013      	strb	r3, [r2, #0]
 800e73e:	4633      	mov	r3, r6
 800e740:	461e      	mov	r6, r3
 800e742:	3b01      	subs	r3, #1
 800e744:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e748:	2a39      	cmp	r2, #57	@ 0x39
 800e74a:	d052      	beq.n	800e7f2 <_dtoa_r+0xb12>
 800e74c:	3201      	adds	r2, #1
 800e74e:	701a      	strb	r2, [r3, #0]
 800e750:	e612      	b.n	800e378 <_dtoa_r+0x698>
 800e752:	2a00      	cmp	r2, #0
 800e754:	dd07      	ble.n	800e766 <_dtoa_r+0xa86>
 800e756:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e75a:	d0ed      	beq.n	800e738 <_dtoa_r+0xa58>
 800e75c:	9a00      	ldr	r2, [sp, #0]
 800e75e:	f108 0301 	add.w	r3, r8, #1
 800e762:	7013      	strb	r3, [r2, #0]
 800e764:	e608      	b.n	800e378 <_dtoa_r+0x698>
 800e766:	9b07      	ldr	r3, [sp, #28]
 800e768:	9a07      	ldr	r2, [sp, #28]
 800e76a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e76e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e770:	4293      	cmp	r3, r2
 800e772:	d028      	beq.n	800e7c6 <_dtoa_r+0xae6>
 800e774:	4649      	mov	r1, r9
 800e776:	2300      	movs	r3, #0
 800e778:	220a      	movs	r2, #10
 800e77a:	4658      	mov	r0, fp
 800e77c:	f000 f920 	bl	800e9c0 <__multadd>
 800e780:	42af      	cmp	r7, r5
 800e782:	4681      	mov	r9, r0
 800e784:	f04f 0300 	mov.w	r3, #0
 800e788:	f04f 020a 	mov.w	r2, #10
 800e78c:	4639      	mov	r1, r7
 800e78e:	4658      	mov	r0, fp
 800e790:	d107      	bne.n	800e7a2 <_dtoa_r+0xac2>
 800e792:	f000 f915 	bl	800e9c0 <__multadd>
 800e796:	4607      	mov	r7, r0
 800e798:	4605      	mov	r5, r0
 800e79a:	9b07      	ldr	r3, [sp, #28]
 800e79c:	3301      	adds	r3, #1
 800e79e:	9307      	str	r3, [sp, #28]
 800e7a0:	e774      	b.n	800e68c <_dtoa_r+0x9ac>
 800e7a2:	f000 f90d 	bl	800e9c0 <__multadd>
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	4607      	mov	r7, r0
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	220a      	movs	r2, #10
 800e7ae:	4658      	mov	r0, fp
 800e7b0:	f000 f906 	bl	800e9c0 <__multadd>
 800e7b4:	4605      	mov	r5, r0
 800e7b6:	e7f0      	b.n	800e79a <_dtoa_r+0xaba>
 800e7b8:	9b00      	ldr	r3, [sp, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	bfcc      	ite	gt
 800e7be:	461e      	movgt	r6, r3
 800e7c0:	2601      	movle	r6, #1
 800e7c2:	4456      	add	r6, sl
 800e7c4:	2700      	movs	r7, #0
 800e7c6:	4649      	mov	r1, r9
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	4658      	mov	r0, fp
 800e7cc:	f000 faa4 	bl	800ed18 <__lshift>
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	4681      	mov	r9, r0
 800e7d4:	f000 fb0c 	bl	800edf0 <__mcmp>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	dcb0      	bgt.n	800e73e <_dtoa_r+0xa5e>
 800e7dc:	d102      	bne.n	800e7e4 <_dtoa_r+0xb04>
 800e7de:	f018 0f01 	tst.w	r8, #1
 800e7e2:	d1ac      	bne.n	800e73e <_dtoa_r+0xa5e>
 800e7e4:	4633      	mov	r3, r6
 800e7e6:	461e      	mov	r6, r3
 800e7e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e7ec:	2a30      	cmp	r2, #48	@ 0x30
 800e7ee:	d0fa      	beq.n	800e7e6 <_dtoa_r+0xb06>
 800e7f0:	e5c2      	b.n	800e378 <_dtoa_r+0x698>
 800e7f2:	459a      	cmp	sl, r3
 800e7f4:	d1a4      	bne.n	800e740 <_dtoa_r+0xa60>
 800e7f6:	9b04      	ldr	r3, [sp, #16]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	9304      	str	r3, [sp, #16]
 800e7fc:	2331      	movs	r3, #49	@ 0x31
 800e7fe:	f88a 3000 	strb.w	r3, [sl]
 800e802:	e5b9      	b.n	800e378 <_dtoa_r+0x698>
 800e804:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e806:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e864 <_dtoa_r+0xb84>
 800e80a:	b11b      	cbz	r3, 800e814 <_dtoa_r+0xb34>
 800e80c:	f10a 0308 	add.w	r3, sl, #8
 800e810:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e812:	6013      	str	r3, [r2, #0]
 800e814:	4650      	mov	r0, sl
 800e816:	b019      	add	sp, #100	@ 0x64
 800e818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e81e:	2b01      	cmp	r3, #1
 800e820:	f77f ae37 	ble.w	800e492 <_dtoa_r+0x7b2>
 800e824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e826:	930a      	str	r3, [sp, #40]	@ 0x28
 800e828:	2001      	movs	r0, #1
 800e82a:	e655      	b.n	800e4d8 <_dtoa_r+0x7f8>
 800e82c:	9b00      	ldr	r3, [sp, #0]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	f77f aed6 	ble.w	800e5e0 <_dtoa_r+0x900>
 800e834:	4656      	mov	r6, sl
 800e836:	4621      	mov	r1, r4
 800e838:	4648      	mov	r0, r9
 800e83a:	f7ff f9c6 	bl	800dbca <quorem>
 800e83e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e842:	f806 8b01 	strb.w	r8, [r6], #1
 800e846:	9b00      	ldr	r3, [sp, #0]
 800e848:	eba6 020a 	sub.w	r2, r6, sl
 800e84c:	4293      	cmp	r3, r2
 800e84e:	ddb3      	ble.n	800e7b8 <_dtoa_r+0xad8>
 800e850:	4649      	mov	r1, r9
 800e852:	2300      	movs	r3, #0
 800e854:	220a      	movs	r2, #10
 800e856:	4658      	mov	r0, fp
 800e858:	f000 f8b2 	bl	800e9c0 <__multadd>
 800e85c:	4681      	mov	r9, r0
 800e85e:	e7ea      	b.n	800e836 <_dtoa_r+0xb56>
 800e860:	080150f8 	.word	0x080150f8
 800e864:	0801507c 	.word	0x0801507c

0800e868 <_free_r>:
 800e868:	b538      	push	{r3, r4, r5, lr}
 800e86a:	4605      	mov	r5, r0
 800e86c:	2900      	cmp	r1, #0
 800e86e:	d041      	beq.n	800e8f4 <_free_r+0x8c>
 800e870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e874:	1f0c      	subs	r4, r1, #4
 800e876:	2b00      	cmp	r3, #0
 800e878:	bfb8      	it	lt
 800e87a:	18e4      	addlt	r4, r4, r3
 800e87c:	f7fe fb50 	bl	800cf20 <__malloc_lock>
 800e880:	4a1d      	ldr	r2, [pc, #116]	@ (800e8f8 <_free_r+0x90>)
 800e882:	6813      	ldr	r3, [r2, #0]
 800e884:	b933      	cbnz	r3, 800e894 <_free_r+0x2c>
 800e886:	6063      	str	r3, [r4, #4]
 800e888:	6014      	str	r4, [r2, #0]
 800e88a:	4628      	mov	r0, r5
 800e88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e890:	f7fe bb4c 	b.w	800cf2c <__malloc_unlock>
 800e894:	42a3      	cmp	r3, r4
 800e896:	d908      	bls.n	800e8aa <_free_r+0x42>
 800e898:	6820      	ldr	r0, [r4, #0]
 800e89a:	1821      	adds	r1, r4, r0
 800e89c:	428b      	cmp	r3, r1
 800e89e:	bf01      	itttt	eq
 800e8a0:	6819      	ldreq	r1, [r3, #0]
 800e8a2:	685b      	ldreq	r3, [r3, #4]
 800e8a4:	1809      	addeq	r1, r1, r0
 800e8a6:	6021      	streq	r1, [r4, #0]
 800e8a8:	e7ed      	b.n	800e886 <_free_r+0x1e>
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	b10b      	cbz	r3, 800e8b4 <_free_r+0x4c>
 800e8b0:	42a3      	cmp	r3, r4
 800e8b2:	d9fa      	bls.n	800e8aa <_free_r+0x42>
 800e8b4:	6811      	ldr	r1, [r2, #0]
 800e8b6:	1850      	adds	r0, r2, r1
 800e8b8:	42a0      	cmp	r0, r4
 800e8ba:	d10b      	bne.n	800e8d4 <_free_r+0x6c>
 800e8bc:	6820      	ldr	r0, [r4, #0]
 800e8be:	4401      	add	r1, r0
 800e8c0:	1850      	adds	r0, r2, r1
 800e8c2:	4283      	cmp	r3, r0
 800e8c4:	6011      	str	r1, [r2, #0]
 800e8c6:	d1e0      	bne.n	800e88a <_free_r+0x22>
 800e8c8:	6818      	ldr	r0, [r3, #0]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	6053      	str	r3, [r2, #4]
 800e8ce:	4408      	add	r0, r1
 800e8d0:	6010      	str	r0, [r2, #0]
 800e8d2:	e7da      	b.n	800e88a <_free_r+0x22>
 800e8d4:	d902      	bls.n	800e8dc <_free_r+0x74>
 800e8d6:	230c      	movs	r3, #12
 800e8d8:	602b      	str	r3, [r5, #0]
 800e8da:	e7d6      	b.n	800e88a <_free_r+0x22>
 800e8dc:	6820      	ldr	r0, [r4, #0]
 800e8de:	1821      	adds	r1, r4, r0
 800e8e0:	428b      	cmp	r3, r1
 800e8e2:	bf04      	itt	eq
 800e8e4:	6819      	ldreq	r1, [r3, #0]
 800e8e6:	685b      	ldreq	r3, [r3, #4]
 800e8e8:	6063      	str	r3, [r4, #4]
 800e8ea:	bf04      	itt	eq
 800e8ec:	1809      	addeq	r1, r1, r0
 800e8ee:	6021      	streq	r1, [r4, #0]
 800e8f0:	6054      	str	r4, [r2, #4]
 800e8f2:	e7ca      	b.n	800e88a <_free_r+0x22>
 800e8f4:	bd38      	pop	{r3, r4, r5, pc}
 800e8f6:	bf00      	nop
 800e8f8:	20000a00 	.word	0x20000a00

0800e8fc <_Balloc>:
 800e8fc:	b570      	push	{r4, r5, r6, lr}
 800e8fe:	69c6      	ldr	r6, [r0, #28]
 800e900:	4604      	mov	r4, r0
 800e902:	460d      	mov	r5, r1
 800e904:	b976      	cbnz	r6, 800e924 <_Balloc+0x28>
 800e906:	2010      	movs	r0, #16
 800e908:	f7fe fa60 	bl	800cdcc <malloc>
 800e90c:	4602      	mov	r2, r0
 800e90e:	61e0      	str	r0, [r4, #28]
 800e910:	b920      	cbnz	r0, 800e91c <_Balloc+0x20>
 800e912:	4b18      	ldr	r3, [pc, #96]	@ (800e974 <_Balloc+0x78>)
 800e914:	4818      	ldr	r0, [pc, #96]	@ (800e978 <_Balloc+0x7c>)
 800e916:	216b      	movs	r1, #107	@ 0x6b
 800e918:	f000 ff9a 	bl	800f850 <__assert_func>
 800e91c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e920:	6006      	str	r6, [r0, #0]
 800e922:	60c6      	str	r6, [r0, #12]
 800e924:	69e6      	ldr	r6, [r4, #28]
 800e926:	68f3      	ldr	r3, [r6, #12]
 800e928:	b183      	cbz	r3, 800e94c <_Balloc+0x50>
 800e92a:	69e3      	ldr	r3, [r4, #28]
 800e92c:	68db      	ldr	r3, [r3, #12]
 800e92e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e932:	b9b8      	cbnz	r0, 800e964 <_Balloc+0x68>
 800e934:	2101      	movs	r1, #1
 800e936:	fa01 f605 	lsl.w	r6, r1, r5
 800e93a:	1d72      	adds	r2, r6, #5
 800e93c:	0092      	lsls	r2, r2, #2
 800e93e:	4620      	mov	r0, r4
 800e940:	f000 ffa4 	bl	800f88c <_calloc_r>
 800e944:	b160      	cbz	r0, 800e960 <_Balloc+0x64>
 800e946:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e94a:	e00e      	b.n	800e96a <_Balloc+0x6e>
 800e94c:	2221      	movs	r2, #33	@ 0x21
 800e94e:	2104      	movs	r1, #4
 800e950:	4620      	mov	r0, r4
 800e952:	f000 ff9b 	bl	800f88c <_calloc_r>
 800e956:	69e3      	ldr	r3, [r4, #28]
 800e958:	60f0      	str	r0, [r6, #12]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1e4      	bne.n	800e92a <_Balloc+0x2e>
 800e960:	2000      	movs	r0, #0
 800e962:	bd70      	pop	{r4, r5, r6, pc}
 800e964:	6802      	ldr	r2, [r0, #0]
 800e966:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e96a:	2300      	movs	r3, #0
 800e96c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e970:	e7f7      	b.n	800e962 <_Balloc+0x66>
 800e972:	bf00      	nop
 800e974:	08015089 	.word	0x08015089
 800e978:	08015109 	.word	0x08015109

0800e97c <_Bfree>:
 800e97c:	b570      	push	{r4, r5, r6, lr}
 800e97e:	69c6      	ldr	r6, [r0, #28]
 800e980:	4605      	mov	r5, r0
 800e982:	460c      	mov	r4, r1
 800e984:	b976      	cbnz	r6, 800e9a4 <_Bfree+0x28>
 800e986:	2010      	movs	r0, #16
 800e988:	f7fe fa20 	bl	800cdcc <malloc>
 800e98c:	4602      	mov	r2, r0
 800e98e:	61e8      	str	r0, [r5, #28]
 800e990:	b920      	cbnz	r0, 800e99c <_Bfree+0x20>
 800e992:	4b09      	ldr	r3, [pc, #36]	@ (800e9b8 <_Bfree+0x3c>)
 800e994:	4809      	ldr	r0, [pc, #36]	@ (800e9bc <_Bfree+0x40>)
 800e996:	218f      	movs	r1, #143	@ 0x8f
 800e998:	f000 ff5a 	bl	800f850 <__assert_func>
 800e99c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9a0:	6006      	str	r6, [r0, #0]
 800e9a2:	60c6      	str	r6, [r0, #12]
 800e9a4:	b13c      	cbz	r4, 800e9b6 <_Bfree+0x3a>
 800e9a6:	69eb      	ldr	r3, [r5, #28]
 800e9a8:	6862      	ldr	r2, [r4, #4]
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e9b0:	6021      	str	r1, [r4, #0]
 800e9b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e9b6:	bd70      	pop	{r4, r5, r6, pc}
 800e9b8:	08015089 	.word	0x08015089
 800e9bc:	08015109 	.word	0x08015109

0800e9c0 <__multadd>:
 800e9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c4:	690d      	ldr	r5, [r1, #16]
 800e9c6:	4607      	mov	r7, r0
 800e9c8:	460c      	mov	r4, r1
 800e9ca:	461e      	mov	r6, r3
 800e9cc:	f101 0c14 	add.w	ip, r1, #20
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	f8dc 3000 	ldr.w	r3, [ip]
 800e9d6:	b299      	uxth	r1, r3
 800e9d8:	fb02 6101 	mla	r1, r2, r1, r6
 800e9dc:	0c1e      	lsrs	r6, r3, #16
 800e9de:	0c0b      	lsrs	r3, r1, #16
 800e9e0:	fb02 3306 	mla	r3, r2, r6, r3
 800e9e4:	b289      	uxth	r1, r1
 800e9e6:	3001      	adds	r0, #1
 800e9e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e9ec:	4285      	cmp	r5, r0
 800e9ee:	f84c 1b04 	str.w	r1, [ip], #4
 800e9f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e9f6:	dcec      	bgt.n	800e9d2 <__multadd+0x12>
 800e9f8:	b30e      	cbz	r6, 800ea3e <__multadd+0x7e>
 800e9fa:	68a3      	ldr	r3, [r4, #8]
 800e9fc:	42ab      	cmp	r3, r5
 800e9fe:	dc19      	bgt.n	800ea34 <__multadd+0x74>
 800ea00:	6861      	ldr	r1, [r4, #4]
 800ea02:	4638      	mov	r0, r7
 800ea04:	3101      	adds	r1, #1
 800ea06:	f7ff ff79 	bl	800e8fc <_Balloc>
 800ea0a:	4680      	mov	r8, r0
 800ea0c:	b928      	cbnz	r0, 800ea1a <__multadd+0x5a>
 800ea0e:	4602      	mov	r2, r0
 800ea10:	4b0c      	ldr	r3, [pc, #48]	@ (800ea44 <__multadd+0x84>)
 800ea12:	480d      	ldr	r0, [pc, #52]	@ (800ea48 <__multadd+0x88>)
 800ea14:	21ba      	movs	r1, #186	@ 0xba
 800ea16:	f000 ff1b 	bl	800f850 <__assert_func>
 800ea1a:	6922      	ldr	r2, [r4, #16]
 800ea1c:	3202      	adds	r2, #2
 800ea1e:	f104 010c 	add.w	r1, r4, #12
 800ea22:	0092      	lsls	r2, r2, #2
 800ea24:	300c      	adds	r0, #12
 800ea26:	f7ff f8c2 	bl	800dbae <memcpy>
 800ea2a:	4621      	mov	r1, r4
 800ea2c:	4638      	mov	r0, r7
 800ea2e:	f7ff ffa5 	bl	800e97c <_Bfree>
 800ea32:	4644      	mov	r4, r8
 800ea34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ea38:	3501      	adds	r5, #1
 800ea3a:	615e      	str	r6, [r3, #20]
 800ea3c:	6125      	str	r5, [r4, #16]
 800ea3e:	4620      	mov	r0, r4
 800ea40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea44:	080150f8 	.word	0x080150f8
 800ea48:	08015109 	.word	0x08015109

0800ea4c <__hi0bits>:
 800ea4c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ea50:	4603      	mov	r3, r0
 800ea52:	bf36      	itet	cc
 800ea54:	0403      	lslcc	r3, r0, #16
 800ea56:	2000      	movcs	r0, #0
 800ea58:	2010      	movcc	r0, #16
 800ea5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ea5e:	bf3c      	itt	cc
 800ea60:	021b      	lslcc	r3, r3, #8
 800ea62:	3008      	addcc	r0, #8
 800ea64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea68:	bf3c      	itt	cc
 800ea6a:	011b      	lslcc	r3, r3, #4
 800ea6c:	3004      	addcc	r0, #4
 800ea6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea72:	bf3c      	itt	cc
 800ea74:	009b      	lslcc	r3, r3, #2
 800ea76:	3002      	addcc	r0, #2
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	db05      	blt.n	800ea88 <__hi0bits+0x3c>
 800ea7c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ea80:	f100 0001 	add.w	r0, r0, #1
 800ea84:	bf08      	it	eq
 800ea86:	2020      	moveq	r0, #32
 800ea88:	4770      	bx	lr

0800ea8a <__lo0bits>:
 800ea8a:	6803      	ldr	r3, [r0, #0]
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	f013 0007 	ands.w	r0, r3, #7
 800ea92:	d00b      	beq.n	800eaac <__lo0bits+0x22>
 800ea94:	07d9      	lsls	r1, r3, #31
 800ea96:	d421      	bmi.n	800eadc <__lo0bits+0x52>
 800ea98:	0798      	lsls	r0, r3, #30
 800ea9a:	bf49      	itett	mi
 800ea9c:	085b      	lsrmi	r3, r3, #1
 800ea9e:	089b      	lsrpl	r3, r3, #2
 800eaa0:	2001      	movmi	r0, #1
 800eaa2:	6013      	strmi	r3, [r2, #0]
 800eaa4:	bf5c      	itt	pl
 800eaa6:	6013      	strpl	r3, [r2, #0]
 800eaa8:	2002      	movpl	r0, #2
 800eaaa:	4770      	bx	lr
 800eaac:	b299      	uxth	r1, r3
 800eaae:	b909      	cbnz	r1, 800eab4 <__lo0bits+0x2a>
 800eab0:	0c1b      	lsrs	r3, r3, #16
 800eab2:	2010      	movs	r0, #16
 800eab4:	b2d9      	uxtb	r1, r3
 800eab6:	b909      	cbnz	r1, 800eabc <__lo0bits+0x32>
 800eab8:	3008      	adds	r0, #8
 800eaba:	0a1b      	lsrs	r3, r3, #8
 800eabc:	0719      	lsls	r1, r3, #28
 800eabe:	bf04      	itt	eq
 800eac0:	091b      	lsreq	r3, r3, #4
 800eac2:	3004      	addeq	r0, #4
 800eac4:	0799      	lsls	r1, r3, #30
 800eac6:	bf04      	itt	eq
 800eac8:	089b      	lsreq	r3, r3, #2
 800eaca:	3002      	addeq	r0, #2
 800eacc:	07d9      	lsls	r1, r3, #31
 800eace:	d403      	bmi.n	800ead8 <__lo0bits+0x4e>
 800ead0:	085b      	lsrs	r3, r3, #1
 800ead2:	f100 0001 	add.w	r0, r0, #1
 800ead6:	d003      	beq.n	800eae0 <__lo0bits+0x56>
 800ead8:	6013      	str	r3, [r2, #0]
 800eada:	4770      	bx	lr
 800eadc:	2000      	movs	r0, #0
 800eade:	4770      	bx	lr
 800eae0:	2020      	movs	r0, #32
 800eae2:	4770      	bx	lr

0800eae4 <__i2b>:
 800eae4:	b510      	push	{r4, lr}
 800eae6:	460c      	mov	r4, r1
 800eae8:	2101      	movs	r1, #1
 800eaea:	f7ff ff07 	bl	800e8fc <_Balloc>
 800eaee:	4602      	mov	r2, r0
 800eaf0:	b928      	cbnz	r0, 800eafe <__i2b+0x1a>
 800eaf2:	4b05      	ldr	r3, [pc, #20]	@ (800eb08 <__i2b+0x24>)
 800eaf4:	4805      	ldr	r0, [pc, #20]	@ (800eb0c <__i2b+0x28>)
 800eaf6:	f240 1145 	movw	r1, #325	@ 0x145
 800eafa:	f000 fea9 	bl	800f850 <__assert_func>
 800eafe:	2301      	movs	r3, #1
 800eb00:	6144      	str	r4, [r0, #20]
 800eb02:	6103      	str	r3, [r0, #16]
 800eb04:	bd10      	pop	{r4, pc}
 800eb06:	bf00      	nop
 800eb08:	080150f8 	.word	0x080150f8
 800eb0c:	08015109 	.word	0x08015109

0800eb10 <__multiply>:
 800eb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb14:	4614      	mov	r4, r2
 800eb16:	690a      	ldr	r2, [r1, #16]
 800eb18:	6923      	ldr	r3, [r4, #16]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	bfa8      	it	ge
 800eb1e:	4623      	movge	r3, r4
 800eb20:	460f      	mov	r7, r1
 800eb22:	bfa4      	itt	ge
 800eb24:	460c      	movge	r4, r1
 800eb26:	461f      	movge	r7, r3
 800eb28:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800eb2c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800eb30:	68a3      	ldr	r3, [r4, #8]
 800eb32:	6861      	ldr	r1, [r4, #4]
 800eb34:	eb0a 0609 	add.w	r6, sl, r9
 800eb38:	42b3      	cmp	r3, r6
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	bfb8      	it	lt
 800eb3e:	3101      	addlt	r1, #1
 800eb40:	f7ff fedc 	bl	800e8fc <_Balloc>
 800eb44:	b930      	cbnz	r0, 800eb54 <__multiply+0x44>
 800eb46:	4602      	mov	r2, r0
 800eb48:	4b44      	ldr	r3, [pc, #272]	@ (800ec5c <__multiply+0x14c>)
 800eb4a:	4845      	ldr	r0, [pc, #276]	@ (800ec60 <__multiply+0x150>)
 800eb4c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800eb50:	f000 fe7e 	bl	800f850 <__assert_func>
 800eb54:	f100 0514 	add.w	r5, r0, #20
 800eb58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eb5c:	462b      	mov	r3, r5
 800eb5e:	2200      	movs	r2, #0
 800eb60:	4543      	cmp	r3, r8
 800eb62:	d321      	bcc.n	800eba8 <__multiply+0x98>
 800eb64:	f107 0114 	add.w	r1, r7, #20
 800eb68:	f104 0214 	add.w	r2, r4, #20
 800eb6c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800eb70:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800eb74:	9302      	str	r3, [sp, #8]
 800eb76:	1b13      	subs	r3, r2, r4
 800eb78:	3b15      	subs	r3, #21
 800eb7a:	f023 0303 	bic.w	r3, r3, #3
 800eb7e:	3304      	adds	r3, #4
 800eb80:	f104 0715 	add.w	r7, r4, #21
 800eb84:	42ba      	cmp	r2, r7
 800eb86:	bf38      	it	cc
 800eb88:	2304      	movcc	r3, #4
 800eb8a:	9301      	str	r3, [sp, #4]
 800eb8c:	9b02      	ldr	r3, [sp, #8]
 800eb8e:	9103      	str	r1, [sp, #12]
 800eb90:	428b      	cmp	r3, r1
 800eb92:	d80c      	bhi.n	800ebae <__multiply+0x9e>
 800eb94:	2e00      	cmp	r6, #0
 800eb96:	dd03      	ble.n	800eba0 <__multiply+0x90>
 800eb98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d05b      	beq.n	800ec58 <__multiply+0x148>
 800eba0:	6106      	str	r6, [r0, #16]
 800eba2:	b005      	add	sp, #20
 800eba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba8:	f843 2b04 	str.w	r2, [r3], #4
 800ebac:	e7d8      	b.n	800eb60 <__multiply+0x50>
 800ebae:	f8b1 a000 	ldrh.w	sl, [r1]
 800ebb2:	f1ba 0f00 	cmp.w	sl, #0
 800ebb6:	d024      	beq.n	800ec02 <__multiply+0xf2>
 800ebb8:	f104 0e14 	add.w	lr, r4, #20
 800ebbc:	46a9      	mov	r9, r5
 800ebbe:	f04f 0c00 	mov.w	ip, #0
 800ebc2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ebc6:	f8d9 3000 	ldr.w	r3, [r9]
 800ebca:	fa1f fb87 	uxth.w	fp, r7
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	fb0a 330b 	mla	r3, sl, fp, r3
 800ebd4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ebd8:	f8d9 7000 	ldr.w	r7, [r9]
 800ebdc:	4463      	add	r3, ip
 800ebde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ebe2:	fb0a c70b 	mla	r7, sl, fp, ip
 800ebe6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ebf0:	4572      	cmp	r2, lr
 800ebf2:	f849 3b04 	str.w	r3, [r9], #4
 800ebf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ebfa:	d8e2      	bhi.n	800ebc2 <__multiply+0xb2>
 800ebfc:	9b01      	ldr	r3, [sp, #4]
 800ebfe:	f845 c003 	str.w	ip, [r5, r3]
 800ec02:	9b03      	ldr	r3, [sp, #12]
 800ec04:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec08:	3104      	adds	r1, #4
 800ec0a:	f1b9 0f00 	cmp.w	r9, #0
 800ec0e:	d021      	beq.n	800ec54 <__multiply+0x144>
 800ec10:	682b      	ldr	r3, [r5, #0]
 800ec12:	f104 0c14 	add.w	ip, r4, #20
 800ec16:	46ae      	mov	lr, r5
 800ec18:	f04f 0a00 	mov.w	sl, #0
 800ec1c:	f8bc b000 	ldrh.w	fp, [ip]
 800ec20:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ec24:	fb09 770b 	mla	r7, r9, fp, r7
 800ec28:	4457      	add	r7, sl
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec30:	f84e 3b04 	str.w	r3, [lr], #4
 800ec34:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ec38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec3c:	f8be 3000 	ldrh.w	r3, [lr]
 800ec40:	fb09 330a 	mla	r3, r9, sl, r3
 800ec44:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ec48:	4562      	cmp	r2, ip
 800ec4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ec4e:	d8e5      	bhi.n	800ec1c <__multiply+0x10c>
 800ec50:	9f01      	ldr	r7, [sp, #4]
 800ec52:	51eb      	str	r3, [r5, r7]
 800ec54:	3504      	adds	r5, #4
 800ec56:	e799      	b.n	800eb8c <__multiply+0x7c>
 800ec58:	3e01      	subs	r6, #1
 800ec5a:	e79b      	b.n	800eb94 <__multiply+0x84>
 800ec5c:	080150f8 	.word	0x080150f8
 800ec60:	08015109 	.word	0x08015109

0800ec64 <__pow5mult>:
 800ec64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec68:	4615      	mov	r5, r2
 800ec6a:	f012 0203 	ands.w	r2, r2, #3
 800ec6e:	4607      	mov	r7, r0
 800ec70:	460e      	mov	r6, r1
 800ec72:	d007      	beq.n	800ec84 <__pow5mult+0x20>
 800ec74:	4c25      	ldr	r4, [pc, #148]	@ (800ed0c <__pow5mult+0xa8>)
 800ec76:	3a01      	subs	r2, #1
 800ec78:	2300      	movs	r3, #0
 800ec7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ec7e:	f7ff fe9f 	bl	800e9c0 <__multadd>
 800ec82:	4606      	mov	r6, r0
 800ec84:	10ad      	asrs	r5, r5, #2
 800ec86:	d03d      	beq.n	800ed04 <__pow5mult+0xa0>
 800ec88:	69fc      	ldr	r4, [r7, #28]
 800ec8a:	b97c      	cbnz	r4, 800ecac <__pow5mult+0x48>
 800ec8c:	2010      	movs	r0, #16
 800ec8e:	f7fe f89d 	bl	800cdcc <malloc>
 800ec92:	4602      	mov	r2, r0
 800ec94:	61f8      	str	r0, [r7, #28]
 800ec96:	b928      	cbnz	r0, 800eca4 <__pow5mult+0x40>
 800ec98:	4b1d      	ldr	r3, [pc, #116]	@ (800ed10 <__pow5mult+0xac>)
 800ec9a:	481e      	ldr	r0, [pc, #120]	@ (800ed14 <__pow5mult+0xb0>)
 800ec9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800eca0:	f000 fdd6 	bl	800f850 <__assert_func>
 800eca4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eca8:	6004      	str	r4, [r0, #0]
 800ecaa:	60c4      	str	r4, [r0, #12]
 800ecac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ecb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ecb4:	b94c      	cbnz	r4, 800ecca <__pow5mult+0x66>
 800ecb6:	f240 2171 	movw	r1, #625	@ 0x271
 800ecba:	4638      	mov	r0, r7
 800ecbc:	f7ff ff12 	bl	800eae4 <__i2b>
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ecc6:	4604      	mov	r4, r0
 800ecc8:	6003      	str	r3, [r0, #0]
 800ecca:	f04f 0900 	mov.w	r9, #0
 800ecce:	07eb      	lsls	r3, r5, #31
 800ecd0:	d50a      	bpl.n	800ece8 <__pow5mult+0x84>
 800ecd2:	4631      	mov	r1, r6
 800ecd4:	4622      	mov	r2, r4
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	f7ff ff1a 	bl	800eb10 <__multiply>
 800ecdc:	4631      	mov	r1, r6
 800ecde:	4680      	mov	r8, r0
 800ece0:	4638      	mov	r0, r7
 800ece2:	f7ff fe4b 	bl	800e97c <_Bfree>
 800ece6:	4646      	mov	r6, r8
 800ece8:	106d      	asrs	r5, r5, #1
 800ecea:	d00b      	beq.n	800ed04 <__pow5mult+0xa0>
 800ecec:	6820      	ldr	r0, [r4, #0]
 800ecee:	b938      	cbnz	r0, 800ed00 <__pow5mult+0x9c>
 800ecf0:	4622      	mov	r2, r4
 800ecf2:	4621      	mov	r1, r4
 800ecf4:	4638      	mov	r0, r7
 800ecf6:	f7ff ff0b 	bl	800eb10 <__multiply>
 800ecfa:	6020      	str	r0, [r4, #0]
 800ecfc:	f8c0 9000 	str.w	r9, [r0]
 800ed00:	4604      	mov	r4, r0
 800ed02:	e7e4      	b.n	800ecce <__pow5mult+0x6a>
 800ed04:	4630      	mov	r0, r6
 800ed06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed0a:	bf00      	nop
 800ed0c:	08015164 	.word	0x08015164
 800ed10:	08015089 	.word	0x08015089
 800ed14:	08015109 	.word	0x08015109

0800ed18 <__lshift>:
 800ed18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed1c:	460c      	mov	r4, r1
 800ed1e:	6849      	ldr	r1, [r1, #4]
 800ed20:	6923      	ldr	r3, [r4, #16]
 800ed22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ed26:	68a3      	ldr	r3, [r4, #8]
 800ed28:	4607      	mov	r7, r0
 800ed2a:	4691      	mov	r9, r2
 800ed2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ed30:	f108 0601 	add.w	r6, r8, #1
 800ed34:	42b3      	cmp	r3, r6
 800ed36:	db0b      	blt.n	800ed50 <__lshift+0x38>
 800ed38:	4638      	mov	r0, r7
 800ed3a:	f7ff fddf 	bl	800e8fc <_Balloc>
 800ed3e:	4605      	mov	r5, r0
 800ed40:	b948      	cbnz	r0, 800ed56 <__lshift+0x3e>
 800ed42:	4602      	mov	r2, r0
 800ed44:	4b28      	ldr	r3, [pc, #160]	@ (800ede8 <__lshift+0xd0>)
 800ed46:	4829      	ldr	r0, [pc, #164]	@ (800edec <__lshift+0xd4>)
 800ed48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ed4c:	f000 fd80 	bl	800f850 <__assert_func>
 800ed50:	3101      	adds	r1, #1
 800ed52:	005b      	lsls	r3, r3, #1
 800ed54:	e7ee      	b.n	800ed34 <__lshift+0x1c>
 800ed56:	2300      	movs	r3, #0
 800ed58:	f100 0114 	add.w	r1, r0, #20
 800ed5c:	f100 0210 	add.w	r2, r0, #16
 800ed60:	4618      	mov	r0, r3
 800ed62:	4553      	cmp	r3, sl
 800ed64:	db33      	blt.n	800edce <__lshift+0xb6>
 800ed66:	6920      	ldr	r0, [r4, #16]
 800ed68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ed6c:	f104 0314 	add.w	r3, r4, #20
 800ed70:	f019 091f 	ands.w	r9, r9, #31
 800ed74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ed78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ed7c:	d02b      	beq.n	800edd6 <__lshift+0xbe>
 800ed7e:	f1c9 0e20 	rsb	lr, r9, #32
 800ed82:	468a      	mov	sl, r1
 800ed84:	2200      	movs	r2, #0
 800ed86:	6818      	ldr	r0, [r3, #0]
 800ed88:	fa00 f009 	lsl.w	r0, r0, r9
 800ed8c:	4310      	orrs	r0, r2
 800ed8e:	f84a 0b04 	str.w	r0, [sl], #4
 800ed92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed96:	459c      	cmp	ip, r3
 800ed98:	fa22 f20e 	lsr.w	r2, r2, lr
 800ed9c:	d8f3      	bhi.n	800ed86 <__lshift+0x6e>
 800ed9e:	ebac 0304 	sub.w	r3, ip, r4
 800eda2:	3b15      	subs	r3, #21
 800eda4:	f023 0303 	bic.w	r3, r3, #3
 800eda8:	3304      	adds	r3, #4
 800edaa:	f104 0015 	add.w	r0, r4, #21
 800edae:	4584      	cmp	ip, r0
 800edb0:	bf38      	it	cc
 800edb2:	2304      	movcc	r3, #4
 800edb4:	50ca      	str	r2, [r1, r3]
 800edb6:	b10a      	cbz	r2, 800edbc <__lshift+0xa4>
 800edb8:	f108 0602 	add.w	r6, r8, #2
 800edbc:	3e01      	subs	r6, #1
 800edbe:	4638      	mov	r0, r7
 800edc0:	612e      	str	r6, [r5, #16]
 800edc2:	4621      	mov	r1, r4
 800edc4:	f7ff fdda 	bl	800e97c <_Bfree>
 800edc8:	4628      	mov	r0, r5
 800edca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edce:	f842 0f04 	str.w	r0, [r2, #4]!
 800edd2:	3301      	adds	r3, #1
 800edd4:	e7c5      	b.n	800ed62 <__lshift+0x4a>
 800edd6:	3904      	subs	r1, #4
 800edd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eddc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ede0:	459c      	cmp	ip, r3
 800ede2:	d8f9      	bhi.n	800edd8 <__lshift+0xc0>
 800ede4:	e7ea      	b.n	800edbc <__lshift+0xa4>
 800ede6:	bf00      	nop
 800ede8:	080150f8 	.word	0x080150f8
 800edec:	08015109 	.word	0x08015109

0800edf0 <__mcmp>:
 800edf0:	690a      	ldr	r2, [r1, #16]
 800edf2:	4603      	mov	r3, r0
 800edf4:	6900      	ldr	r0, [r0, #16]
 800edf6:	1a80      	subs	r0, r0, r2
 800edf8:	b530      	push	{r4, r5, lr}
 800edfa:	d10e      	bne.n	800ee1a <__mcmp+0x2a>
 800edfc:	3314      	adds	r3, #20
 800edfe:	3114      	adds	r1, #20
 800ee00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee10:	4295      	cmp	r5, r2
 800ee12:	d003      	beq.n	800ee1c <__mcmp+0x2c>
 800ee14:	d205      	bcs.n	800ee22 <__mcmp+0x32>
 800ee16:	f04f 30ff 	mov.w	r0, #4294967295
 800ee1a:	bd30      	pop	{r4, r5, pc}
 800ee1c:	42a3      	cmp	r3, r4
 800ee1e:	d3f3      	bcc.n	800ee08 <__mcmp+0x18>
 800ee20:	e7fb      	b.n	800ee1a <__mcmp+0x2a>
 800ee22:	2001      	movs	r0, #1
 800ee24:	e7f9      	b.n	800ee1a <__mcmp+0x2a>
	...

0800ee28 <__mdiff>:
 800ee28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee2c:	4689      	mov	r9, r1
 800ee2e:	4606      	mov	r6, r0
 800ee30:	4611      	mov	r1, r2
 800ee32:	4648      	mov	r0, r9
 800ee34:	4614      	mov	r4, r2
 800ee36:	f7ff ffdb 	bl	800edf0 <__mcmp>
 800ee3a:	1e05      	subs	r5, r0, #0
 800ee3c:	d112      	bne.n	800ee64 <__mdiff+0x3c>
 800ee3e:	4629      	mov	r1, r5
 800ee40:	4630      	mov	r0, r6
 800ee42:	f7ff fd5b 	bl	800e8fc <_Balloc>
 800ee46:	4602      	mov	r2, r0
 800ee48:	b928      	cbnz	r0, 800ee56 <__mdiff+0x2e>
 800ee4a:	4b3f      	ldr	r3, [pc, #252]	@ (800ef48 <__mdiff+0x120>)
 800ee4c:	f240 2137 	movw	r1, #567	@ 0x237
 800ee50:	483e      	ldr	r0, [pc, #248]	@ (800ef4c <__mdiff+0x124>)
 800ee52:	f000 fcfd 	bl	800f850 <__assert_func>
 800ee56:	2301      	movs	r3, #1
 800ee58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ee5c:	4610      	mov	r0, r2
 800ee5e:	b003      	add	sp, #12
 800ee60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee64:	bfbc      	itt	lt
 800ee66:	464b      	movlt	r3, r9
 800ee68:	46a1      	movlt	r9, r4
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ee70:	bfba      	itte	lt
 800ee72:	461c      	movlt	r4, r3
 800ee74:	2501      	movlt	r5, #1
 800ee76:	2500      	movge	r5, #0
 800ee78:	f7ff fd40 	bl	800e8fc <_Balloc>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	b918      	cbnz	r0, 800ee88 <__mdiff+0x60>
 800ee80:	4b31      	ldr	r3, [pc, #196]	@ (800ef48 <__mdiff+0x120>)
 800ee82:	f240 2145 	movw	r1, #581	@ 0x245
 800ee86:	e7e3      	b.n	800ee50 <__mdiff+0x28>
 800ee88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ee8c:	6926      	ldr	r6, [r4, #16]
 800ee8e:	60c5      	str	r5, [r0, #12]
 800ee90:	f109 0310 	add.w	r3, r9, #16
 800ee94:	f109 0514 	add.w	r5, r9, #20
 800ee98:	f104 0e14 	add.w	lr, r4, #20
 800ee9c:	f100 0b14 	add.w	fp, r0, #20
 800eea0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800eea4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800eea8:	9301      	str	r3, [sp, #4]
 800eeaa:	46d9      	mov	r9, fp
 800eeac:	f04f 0c00 	mov.w	ip, #0
 800eeb0:	9b01      	ldr	r3, [sp, #4]
 800eeb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800eeb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800eeba:	9301      	str	r3, [sp, #4]
 800eebc:	fa1f f38a 	uxth.w	r3, sl
 800eec0:	4619      	mov	r1, r3
 800eec2:	b283      	uxth	r3, r0
 800eec4:	1acb      	subs	r3, r1, r3
 800eec6:	0c00      	lsrs	r0, r0, #16
 800eec8:	4463      	add	r3, ip
 800eeca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800eece:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800eed8:	4576      	cmp	r6, lr
 800eeda:	f849 3b04 	str.w	r3, [r9], #4
 800eede:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800eee2:	d8e5      	bhi.n	800eeb0 <__mdiff+0x88>
 800eee4:	1b33      	subs	r3, r6, r4
 800eee6:	3b15      	subs	r3, #21
 800eee8:	f023 0303 	bic.w	r3, r3, #3
 800eeec:	3415      	adds	r4, #21
 800eeee:	3304      	adds	r3, #4
 800eef0:	42a6      	cmp	r6, r4
 800eef2:	bf38      	it	cc
 800eef4:	2304      	movcc	r3, #4
 800eef6:	441d      	add	r5, r3
 800eef8:	445b      	add	r3, fp
 800eefa:	461e      	mov	r6, r3
 800eefc:	462c      	mov	r4, r5
 800eefe:	4544      	cmp	r4, r8
 800ef00:	d30e      	bcc.n	800ef20 <__mdiff+0xf8>
 800ef02:	f108 0103 	add.w	r1, r8, #3
 800ef06:	1b49      	subs	r1, r1, r5
 800ef08:	f021 0103 	bic.w	r1, r1, #3
 800ef0c:	3d03      	subs	r5, #3
 800ef0e:	45a8      	cmp	r8, r5
 800ef10:	bf38      	it	cc
 800ef12:	2100      	movcc	r1, #0
 800ef14:	440b      	add	r3, r1
 800ef16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ef1a:	b191      	cbz	r1, 800ef42 <__mdiff+0x11a>
 800ef1c:	6117      	str	r7, [r2, #16]
 800ef1e:	e79d      	b.n	800ee5c <__mdiff+0x34>
 800ef20:	f854 1b04 	ldr.w	r1, [r4], #4
 800ef24:	46e6      	mov	lr, ip
 800ef26:	0c08      	lsrs	r0, r1, #16
 800ef28:	fa1c fc81 	uxtah	ip, ip, r1
 800ef2c:	4471      	add	r1, lr
 800ef2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ef32:	b289      	uxth	r1, r1
 800ef34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ef38:	f846 1b04 	str.w	r1, [r6], #4
 800ef3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef40:	e7dd      	b.n	800eefe <__mdiff+0xd6>
 800ef42:	3f01      	subs	r7, #1
 800ef44:	e7e7      	b.n	800ef16 <__mdiff+0xee>
 800ef46:	bf00      	nop
 800ef48:	080150f8 	.word	0x080150f8
 800ef4c:	08015109 	.word	0x08015109

0800ef50 <__d2b>:
 800ef50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ef54:	460f      	mov	r7, r1
 800ef56:	2101      	movs	r1, #1
 800ef58:	ec59 8b10 	vmov	r8, r9, d0
 800ef5c:	4616      	mov	r6, r2
 800ef5e:	f7ff fccd 	bl	800e8fc <_Balloc>
 800ef62:	4604      	mov	r4, r0
 800ef64:	b930      	cbnz	r0, 800ef74 <__d2b+0x24>
 800ef66:	4602      	mov	r2, r0
 800ef68:	4b23      	ldr	r3, [pc, #140]	@ (800eff8 <__d2b+0xa8>)
 800ef6a:	4824      	ldr	r0, [pc, #144]	@ (800effc <__d2b+0xac>)
 800ef6c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ef70:	f000 fc6e 	bl	800f850 <__assert_func>
 800ef74:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ef78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ef7c:	b10d      	cbz	r5, 800ef82 <__d2b+0x32>
 800ef7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ef82:	9301      	str	r3, [sp, #4]
 800ef84:	f1b8 0300 	subs.w	r3, r8, #0
 800ef88:	d023      	beq.n	800efd2 <__d2b+0x82>
 800ef8a:	4668      	mov	r0, sp
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	f7ff fd7c 	bl	800ea8a <__lo0bits>
 800ef92:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ef96:	b1d0      	cbz	r0, 800efce <__d2b+0x7e>
 800ef98:	f1c0 0320 	rsb	r3, r0, #32
 800ef9c:	fa02 f303 	lsl.w	r3, r2, r3
 800efa0:	430b      	orrs	r3, r1
 800efa2:	40c2      	lsrs	r2, r0
 800efa4:	6163      	str	r3, [r4, #20]
 800efa6:	9201      	str	r2, [sp, #4]
 800efa8:	9b01      	ldr	r3, [sp, #4]
 800efaa:	61a3      	str	r3, [r4, #24]
 800efac:	2b00      	cmp	r3, #0
 800efae:	bf0c      	ite	eq
 800efb0:	2201      	moveq	r2, #1
 800efb2:	2202      	movne	r2, #2
 800efb4:	6122      	str	r2, [r4, #16]
 800efb6:	b1a5      	cbz	r5, 800efe2 <__d2b+0x92>
 800efb8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800efbc:	4405      	add	r5, r0
 800efbe:	603d      	str	r5, [r7, #0]
 800efc0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800efc4:	6030      	str	r0, [r6, #0]
 800efc6:	4620      	mov	r0, r4
 800efc8:	b003      	add	sp, #12
 800efca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800efce:	6161      	str	r1, [r4, #20]
 800efd0:	e7ea      	b.n	800efa8 <__d2b+0x58>
 800efd2:	a801      	add	r0, sp, #4
 800efd4:	f7ff fd59 	bl	800ea8a <__lo0bits>
 800efd8:	9b01      	ldr	r3, [sp, #4]
 800efda:	6163      	str	r3, [r4, #20]
 800efdc:	3020      	adds	r0, #32
 800efde:	2201      	movs	r2, #1
 800efe0:	e7e8      	b.n	800efb4 <__d2b+0x64>
 800efe2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800efe6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800efea:	6038      	str	r0, [r7, #0]
 800efec:	6918      	ldr	r0, [r3, #16]
 800efee:	f7ff fd2d 	bl	800ea4c <__hi0bits>
 800eff2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eff6:	e7e5      	b.n	800efc4 <__d2b+0x74>
 800eff8:	080150f8 	.word	0x080150f8
 800effc:	08015109 	.word	0x08015109

0800f000 <__ssputs_r>:
 800f000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f004:	688e      	ldr	r6, [r1, #8]
 800f006:	461f      	mov	r7, r3
 800f008:	42be      	cmp	r6, r7
 800f00a:	680b      	ldr	r3, [r1, #0]
 800f00c:	4682      	mov	sl, r0
 800f00e:	460c      	mov	r4, r1
 800f010:	4690      	mov	r8, r2
 800f012:	d82d      	bhi.n	800f070 <__ssputs_r+0x70>
 800f014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f018:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f01c:	d026      	beq.n	800f06c <__ssputs_r+0x6c>
 800f01e:	6965      	ldr	r5, [r4, #20]
 800f020:	6909      	ldr	r1, [r1, #16]
 800f022:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f026:	eba3 0901 	sub.w	r9, r3, r1
 800f02a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f02e:	1c7b      	adds	r3, r7, #1
 800f030:	444b      	add	r3, r9
 800f032:	106d      	asrs	r5, r5, #1
 800f034:	429d      	cmp	r5, r3
 800f036:	bf38      	it	cc
 800f038:	461d      	movcc	r5, r3
 800f03a:	0553      	lsls	r3, r2, #21
 800f03c:	d527      	bpl.n	800f08e <__ssputs_r+0x8e>
 800f03e:	4629      	mov	r1, r5
 800f040:	f7fd feee 	bl	800ce20 <_malloc_r>
 800f044:	4606      	mov	r6, r0
 800f046:	b360      	cbz	r0, 800f0a2 <__ssputs_r+0xa2>
 800f048:	6921      	ldr	r1, [r4, #16]
 800f04a:	464a      	mov	r2, r9
 800f04c:	f7fe fdaf 	bl	800dbae <memcpy>
 800f050:	89a3      	ldrh	r3, [r4, #12]
 800f052:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f05a:	81a3      	strh	r3, [r4, #12]
 800f05c:	6126      	str	r6, [r4, #16]
 800f05e:	6165      	str	r5, [r4, #20]
 800f060:	444e      	add	r6, r9
 800f062:	eba5 0509 	sub.w	r5, r5, r9
 800f066:	6026      	str	r6, [r4, #0]
 800f068:	60a5      	str	r5, [r4, #8]
 800f06a:	463e      	mov	r6, r7
 800f06c:	42be      	cmp	r6, r7
 800f06e:	d900      	bls.n	800f072 <__ssputs_r+0x72>
 800f070:	463e      	mov	r6, r7
 800f072:	6820      	ldr	r0, [r4, #0]
 800f074:	4632      	mov	r2, r6
 800f076:	4641      	mov	r1, r8
 800f078:	f000 fbd0 	bl	800f81c <memmove>
 800f07c:	68a3      	ldr	r3, [r4, #8]
 800f07e:	1b9b      	subs	r3, r3, r6
 800f080:	60a3      	str	r3, [r4, #8]
 800f082:	6823      	ldr	r3, [r4, #0]
 800f084:	4433      	add	r3, r6
 800f086:	6023      	str	r3, [r4, #0]
 800f088:	2000      	movs	r0, #0
 800f08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f08e:	462a      	mov	r2, r5
 800f090:	f000 fc22 	bl	800f8d8 <_realloc_r>
 800f094:	4606      	mov	r6, r0
 800f096:	2800      	cmp	r0, #0
 800f098:	d1e0      	bne.n	800f05c <__ssputs_r+0x5c>
 800f09a:	6921      	ldr	r1, [r4, #16]
 800f09c:	4650      	mov	r0, sl
 800f09e:	f7ff fbe3 	bl	800e868 <_free_r>
 800f0a2:	230c      	movs	r3, #12
 800f0a4:	f8ca 3000 	str.w	r3, [sl]
 800f0a8:	89a3      	ldrh	r3, [r4, #12]
 800f0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0ae:	81a3      	strh	r3, [r4, #12]
 800f0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0b4:	e7e9      	b.n	800f08a <__ssputs_r+0x8a>
	...

0800f0b8 <_svfiprintf_r>:
 800f0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0bc:	4698      	mov	r8, r3
 800f0be:	898b      	ldrh	r3, [r1, #12]
 800f0c0:	061b      	lsls	r3, r3, #24
 800f0c2:	b09d      	sub	sp, #116	@ 0x74
 800f0c4:	4607      	mov	r7, r0
 800f0c6:	460d      	mov	r5, r1
 800f0c8:	4614      	mov	r4, r2
 800f0ca:	d510      	bpl.n	800f0ee <_svfiprintf_r+0x36>
 800f0cc:	690b      	ldr	r3, [r1, #16]
 800f0ce:	b973      	cbnz	r3, 800f0ee <_svfiprintf_r+0x36>
 800f0d0:	2140      	movs	r1, #64	@ 0x40
 800f0d2:	f7fd fea5 	bl	800ce20 <_malloc_r>
 800f0d6:	6028      	str	r0, [r5, #0]
 800f0d8:	6128      	str	r0, [r5, #16]
 800f0da:	b930      	cbnz	r0, 800f0ea <_svfiprintf_r+0x32>
 800f0dc:	230c      	movs	r3, #12
 800f0de:	603b      	str	r3, [r7, #0]
 800f0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0e4:	b01d      	add	sp, #116	@ 0x74
 800f0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ea:	2340      	movs	r3, #64	@ 0x40
 800f0ec:	616b      	str	r3, [r5, #20]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0f2:	2320      	movs	r3, #32
 800f0f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f0fc:	2330      	movs	r3, #48	@ 0x30
 800f0fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f29c <_svfiprintf_r+0x1e4>
 800f102:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f106:	f04f 0901 	mov.w	r9, #1
 800f10a:	4623      	mov	r3, r4
 800f10c:	469a      	mov	sl, r3
 800f10e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f112:	b10a      	cbz	r2, 800f118 <_svfiprintf_r+0x60>
 800f114:	2a25      	cmp	r2, #37	@ 0x25
 800f116:	d1f9      	bne.n	800f10c <_svfiprintf_r+0x54>
 800f118:	ebba 0b04 	subs.w	fp, sl, r4
 800f11c:	d00b      	beq.n	800f136 <_svfiprintf_r+0x7e>
 800f11e:	465b      	mov	r3, fp
 800f120:	4622      	mov	r2, r4
 800f122:	4629      	mov	r1, r5
 800f124:	4638      	mov	r0, r7
 800f126:	f7ff ff6b 	bl	800f000 <__ssputs_r>
 800f12a:	3001      	adds	r0, #1
 800f12c:	f000 80a7 	beq.w	800f27e <_svfiprintf_r+0x1c6>
 800f130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f132:	445a      	add	r2, fp
 800f134:	9209      	str	r2, [sp, #36]	@ 0x24
 800f136:	f89a 3000 	ldrb.w	r3, [sl]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	f000 809f 	beq.w	800f27e <_svfiprintf_r+0x1c6>
 800f140:	2300      	movs	r3, #0
 800f142:	f04f 32ff 	mov.w	r2, #4294967295
 800f146:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f14a:	f10a 0a01 	add.w	sl, sl, #1
 800f14e:	9304      	str	r3, [sp, #16]
 800f150:	9307      	str	r3, [sp, #28]
 800f152:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f156:	931a      	str	r3, [sp, #104]	@ 0x68
 800f158:	4654      	mov	r4, sl
 800f15a:	2205      	movs	r2, #5
 800f15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f160:	484e      	ldr	r0, [pc, #312]	@ (800f29c <_svfiprintf_r+0x1e4>)
 800f162:	f7f1 f84d 	bl	8000200 <memchr>
 800f166:	9a04      	ldr	r2, [sp, #16]
 800f168:	b9d8      	cbnz	r0, 800f1a2 <_svfiprintf_r+0xea>
 800f16a:	06d0      	lsls	r0, r2, #27
 800f16c:	bf44      	itt	mi
 800f16e:	2320      	movmi	r3, #32
 800f170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f174:	0711      	lsls	r1, r2, #28
 800f176:	bf44      	itt	mi
 800f178:	232b      	movmi	r3, #43	@ 0x2b
 800f17a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f17e:	f89a 3000 	ldrb.w	r3, [sl]
 800f182:	2b2a      	cmp	r3, #42	@ 0x2a
 800f184:	d015      	beq.n	800f1b2 <_svfiprintf_r+0xfa>
 800f186:	9a07      	ldr	r2, [sp, #28]
 800f188:	4654      	mov	r4, sl
 800f18a:	2000      	movs	r0, #0
 800f18c:	f04f 0c0a 	mov.w	ip, #10
 800f190:	4621      	mov	r1, r4
 800f192:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f196:	3b30      	subs	r3, #48	@ 0x30
 800f198:	2b09      	cmp	r3, #9
 800f19a:	d94b      	bls.n	800f234 <_svfiprintf_r+0x17c>
 800f19c:	b1b0      	cbz	r0, 800f1cc <_svfiprintf_r+0x114>
 800f19e:	9207      	str	r2, [sp, #28]
 800f1a0:	e014      	b.n	800f1cc <_svfiprintf_r+0x114>
 800f1a2:	eba0 0308 	sub.w	r3, r0, r8
 800f1a6:	fa09 f303 	lsl.w	r3, r9, r3
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	9304      	str	r3, [sp, #16]
 800f1ae:	46a2      	mov	sl, r4
 800f1b0:	e7d2      	b.n	800f158 <_svfiprintf_r+0xa0>
 800f1b2:	9b03      	ldr	r3, [sp, #12]
 800f1b4:	1d19      	adds	r1, r3, #4
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	9103      	str	r1, [sp, #12]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	bfbb      	ittet	lt
 800f1be:	425b      	neglt	r3, r3
 800f1c0:	f042 0202 	orrlt.w	r2, r2, #2
 800f1c4:	9307      	strge	r3, [sp, #28]
 800f1c6:	9307      	strlt	r3, [sp, #28]
 800f1c8:	bfb8      	it	lt
 800f1ca:	9204      	strlt	r2, [sp, #16]
 800f1cc:	7823      	ldrb	r3, [r4, #0]
 800f1ce:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1d0:	d10a      	bne.n	800f1e8 <_svfiprintf_r+0x130>
 800f1d2:	7863      	ldrb	r3, [r4, #1]
 800f1d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1d6:	d132      	bne.n	800f23e <_svfiprintf_r+0x186>
 800f1d8:	9b03      	ldr	r3, [sp, #12]
 800f1da:	1d1a      	adds	r2, r3, #4
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	9203      	str	r2, [sp, #12]
 800f1e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1e4:	3402      	adds	r4, #2
 800f1e6:	9305      	str	r3, [sp, #20]
 800f1e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f2ac <_svfiprintf_r+0x1f4>
 800f1ec:	7821      	ldrb	r1, [r4, #0]
 800f1ee:	2203      	movs	r2, #3
 800f1f0:	4650      	mov	r0, sl
 800f1f2:	f7f1 f805 	bl	8000200 <memchr>
 800f1f6:	b138      	cbz	r0, 800f208 <_svfiprintf_r+0x150>
 800f1f8:	9b04      	ldr	r3, [sp, #16]
 800f1fa:	eba0 000a 	sub.w	r0, r0, sl
 800f1fe:	2240      	movs	r2, #64	@ 0x40
 800f200:	4082      	lsls	r2, r0
 800f202:	4313      	orrs	r3, r2
 800f204:	3401      	adds	r4, #1
 800f206:	9304      	str	r3, [sp, #16]
 800f208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f20c:	4824      	ldr	r0, [pc, #144]	@ (800f2a0 <_svfiprintf_r+0x1e8>)
 800f20e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f212:	2206      	movs	r2, #6
 800f214:	f7f0 fff4 	bl	8000200 <memchr>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d036      	beq.n	800f28a <_svfiprintf_r+0x1d2>
 800f21c:	4b21      	ldr	r3, [pc, #132]	@ (800f2a4 <_svfiprintf_r+0x1ec>)
 800f21e:	bb1b      	cbnz	r3, 800f268 <_svfiprintf_r+0x1b0>
 800f220:	9b03      	ldr	r3, [sp, #12]
 800f222:	3307      	adds	r3, #7
 800f224:	f023 0307 	bic.w	r3, r3, #7
 800f228:	3308      	adds	r3, #8
 800f22a:	9303      	str	r3, [sp, #12]
 800f22c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f22e:	4433      	add	r3, r6
 800f230:	9309      	str	r3, [sp, #36]	@ 0x24
 800f232:	e76a      	b.n	800f10a <_svfiprintf_r+0x52>
 800f234:	fb0c 3202 	mla	r2, ip, r2, r3
 800f238:	460c      	mov	r4, r1
 800f23a:	2001      	movs	r0, #1
 800f23c:	e7a8      	b.n	800f190 <_svfiprintf_r+0xd8>
 800f23e:	2300      	movs	r3, #0
 800f240:	3401      	adds	r4, #1
 800f242:	9305      	str	r3, [sp, #20]
 800f244:	4619      	mov	r1, r3
 800f246:	f04f 0c0a 	mov.w	ip, #10
 800f24a:	4620      	mov	r0, r4
 800f24c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f250:	3a30      	subs	r2, #48	@ 0x30
 800f252:	2a09      	cmp	r2, #9
 800f254:	d903      	bls.n	800f25e <_svfiprintf_r+0x1a6>
 800f256:	2b00      	cmp	r3, #0
 800f258:	d0c6      	beq.n	800f1e8 <_svfiprintf_r+0x130>
 800f25a:	9105      	str	r1, [sp, #20]
 800f25c:	e7c4      	b.n	800f1e8 <_svfiprintf_r+0x130>
 800f25e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f262:	4604      	mov	r4, r0
 800f264:	2301      	movs	r3, #1
 800f266:	e7f0      	b.n	800f24a <_svfiprintf_r+0x192>
 800f268:	ab03      	add	r3, sp, #12
 800f26a:	9300      	str	r3, [sp, #0]
 800f26c:	462a      	mov	r2, r5
 800f26e:	4b0e      	ldr	r3, [pc, #56]	@ (800f2a8 <_svfiprintf_r+0x1f0>)
 800f270:	a904      	add	r1, sp, #16
 800f272:	4638      	mov	r0, r7
 800f274:	f7fd ff00 	bl	800d078 <_printf_float>
 800f278:	1c42      	adds	r2, r0, #1
 800f27a:	4606      	mov	r6, r0
 800f27c:	d1d6      	bne.n	800f22c <_svfiprintf_r+0x174>
 800f27e:	89ab      	ldrh	r3, [r5, #12]
 800f280:	065b      	lsls	r3, r3, #25
 800f282:	f53f af2d 	bmi.w	800f0e0 <_svfiprintf_r+0x28>
 800f286:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f288:	e72c      	b.n	800f0e4 <_svfiprintf_r+0x2c>
 800f28a:	ab03      	add	r3, sp, #12
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	462a      	mov	r2, r5
 800f290:	4b05      	ldr	r3, [pc, #20]	@ (800f2a8 <_svfiprintf_r+0x1f0>)
 800f292:	a904      	add	r1, sp, #16
 800f294:	4638      	mov	r0, r7
 800f296:	f7fe f987 	bl	800d5a8 <_printf_i>
 800f29a:	e7ed      	b.n	800f278 <_svfiprintf_r+0x1c0>
 800f29c:	08015260 	.word	0x08015260
 800f2a0:	0801526a 	.word	0x0801526a
 800f2a4:	0800d079 	.word	0x0800d079
 800f2a8:	0800f001 	.word	0x0800f001
 800f2ac:	08015266 	.word	0x08015266

0800f2b0 <__sfputc_r>:
 800f2b0:	6893      	ldr	r3, [r2, #8]
 800f2b2:	3b01      	subs	r3, #1
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	b410      	push	{r4}
 800f2b8:	6093      	str	r3, [r2, #8]
 800f2ba:	da08      	bge.n	800f2ce <__sfputc_r+0x1e>
 800f2bc:	6994      	ldr	r4, [r2, #24]
 800f2be:	42a3      	cmp	r3, r4
 800f2c0:	db01      	blt.n	800f2c6 <__sfputc_r+0x16>
 800f2c2:	290a      	cmp	r1, #10
 800f2c4:	d103      	bne.n	800f2ce <__sfputc_r+0x1e>
 800f2c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2ca:	f000 ba13 	b.w	800f6f4 <__swbuf_r>
 800f2ce:	6813      	ldr	r3, [r2, #0]
 800f2d0:	1c58      	adds	r0, r3, #1
 800f2d2:	6010      	str	r0, [r2, #0]
 800f2d4:	7019      	strb	r1, [r3, #0]
 800f2d6:	4608      	mov	r0, r1
 800f2d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <__sfputs_r>:
 800f2de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2e0:	4606      	mov	r6, r0
 800f2e2:	460f      	mov	r7, r1
 800f2e4:	4614      	mov	r4, r2
 800f2e6:	18d5      	adds	r5, r2, r3
 800f2e8:	42ac      	cmp	r4, r5
 800f2ea:	d101      	bne.n	800f2f0 <__sfputs_r+0x12>
 800f2ec:	2000      	movs	r0, #0
 800f2ee:	e007      	b.n	800f300 <__sfputs_r+0x22>
 800f2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2f4:	463a      	mov	r2, r7
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	f7ff ffda 	bl	800f2b0 <__sfputc_r>
 800f2fc:	1c43      	adds	r3, r0, #1
 800f2fe:	d1f3      	bne.n	800f2e8 <__sfputs_r+0xa>
 800f300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f304 <_vfiprintf_r>:
 800f304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f308:	460d      	mov	r5, r1
 800f30a:	b09d      	sub	sp, #116	@ 0x74
 800f30c:	4614      	mov	r4, r2
 800f30e:	4698      	mov	r8, r3
 800f310:	4606      	mov	r6, r0
 800f312:	b118      	cbz	r0, 800f31c <_vfiprintf_r+0x18>
 800f314:	6a03      	ldr	r3, [r0, #32]
 800f316:	b90b      	cbnz	r3, 800f31c <_vfiprintf_r+0x18>
 800f318:	f7fe faf2 	bl	800d900 <__sinit>
 800f31c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f31e:	07d9      	lsls	r1, r3, #31
 800f320:	d405      	bmi.n	800f32e <_vfiprintf_r+0x2a>
 800f322:	89ab      	ldrh	r3, [r5, #12]
 800f324:	059a      	lsls	r2, r3, #22
 800f326:	d402      	bmi.n	800f32e <_vfiprintf_r+0x2a>
 800f328:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f32a:	f7fe fc3e 	bl	800dbaa <__retarget_lock_acquire_recursive>
 800f32e:	89ab      	ldrh	r3, [r5, #12]
 800f330:	071b      	lsls	r3, r3, #28
 800f332:	d501      	bpl.n	800f338 <_vfiprintf_r+0x34>
 800f334:	692b      	ldr	r3, [r5, #16]
 800f336:	b99b      	cbnz	r3, 800f360 <_vfiprintf_r+0x5c>
 800f338:	4629      	mov	r1, r5
 800f33a:	4630      	mov	r0, r6
 800f33c:	f000 fa18 	bl	800f770 <__swsetup_r>
 800f340:	b170      	cbz	r0, 800f360 <_vfiprintf_r+0x5c>
 800f342:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f344:	07dc      	lsls	r4, r3, #31
 800f346:	d504      	bpl.n	800f352 <_vfiprintf_r+0x4e>
 800f348:	f04f 30ff 	mov.w	r0, #4294967295
 800f34c:	b01d      	add	sp, #116	@ 0x74
 800f34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f352:	89ab      	ldrh	r3, [r5, #12]
 800f354:	0598      	lsls	r0, r3, #22
 800f356:	d4f7      	bmi.n	800f348 <_vfiprintf_r+0x44>
 800f358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f35a:	f7fe fc27 	bl	800dbac <__retarget_lock_release_recursive>
 800f35e:	e7f3      	b.n	800f348 <_vfiprintf_r+0x44>
 800f360:	2300      	movs	r3, #0
 800f362:	9309      	str	r3, [sp, #36]	@ 0x24
 800f364:	2320      	movs	r3, #32
 800f366:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f36a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f36e:	2330      	movs	r3, #48	@ 0x30
 800f370:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f520 <_vfiprintf_r+0x21c>
 800f374:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f378:	f04f 0901 	mov.w	r9, #1
 800f37c:	4623      	mov	r3, r4
 800f37e:	469a      	mov	sl, r3
 800f380:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f384:	b10a      	cbz	r2, 800f38a <_vfiprintf_r+0x86>
 800f386:	2a25      	cmp	r2, #37	@ 0x25
 800f388:	d1f9      	bne.n	800f37e <_vfiprintf_r+0x7a>
 800f38a:	ebba 0b04 	subs.w	fp, sl, r4
 800f38e:	d00b      	beq.n	800f3a8 <_vfiprintf_r+0xa4>
 800f390:	465b      	mov	r3, fp
 800f392:	4622      	mov	r2, r4
 800f394:	4629      	mov	r1, r5
 800f396:	4630      	mov	r0, r6
 800f398:	f7ff ffa1 	bl	800f2de <__sfputs_r>
 800f39c:	3001      	adds	r0, #1
 800f39e:	f000 80a7 	beq.w	800f4f0 <_vfiprintf_r+0x1ec>
 800f3a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f3a4:	445a      	add	r2, fp
 800f3a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f3a8:	f89a 3000 	ldrb.w	r3, [sl]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f000 809f 	beq.w	800f4f0 <_vfiprintf_r+0x1ec>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3bc:	f10a 0a01 	add.w	sl, sl, #1
 800f3c0:	9304      	str	r3, [sp, #16]
 800f3c2:	9307      	str	r3, [sp, #28]
 800f3c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f3c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f3ca:	4654      	mov	r4, sl
 800f3cc:	2205      	movs	r2, #5
 800f3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3d2:	4853      	ldr	r0, [pc, #332]	@ (800f520 <_vfiprintf_r+0x21c>)
 800f3d4:	f7f0 ff14 	bl	8000200 <memchr>
 800f3d8:	9a04      	ldr	r2, [sp, #16]
 800f3da:	b9d8      	cbnz	r0, 800f414 <_vfiprintf_r+0x110>
 800f3dc:	06d1      	lsls	r1, r2, #27
 800f3de:	bf44      	itt	mi
 800f3e0:	2320      	movmi	r3, #32
 800f3e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3e6:	0713      	lsls	r3, r2, #28
 800f3e8:	bf44      	itt	mi
 800f3ea:	232b      	movmi	r3, #43	@ 0x2b
 800f3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3f0:	f89a 3000 	ldrb.w	r3, [sl]
 800f3f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3f6:	d015      	beq.n	800f424 <_vfiprintf_r+0x120>
 800f3f8:	9a07      	ldr	r2, [sp, #28]
 800f3fa:	4654      	mov	r4, sl
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	f04f 0c0a 	mov.w	ip, #10
 800f402:	4621      	mov	r1, r4
 800f404:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f408:	3b30      	subs	r3, #48	@ 0x30
 800f40a:	2b09      	cmp	r3, #9
 800f40c:	d94b      	bls.n	800f4a6 <_vfiprintf_r+0x1a2>
 800f40e:	b1b0      	cbz	r0, 800f43e <_vfiprintf_r+0x13a>
 800f410:	9207      	str	r2, [sp, #28]
 800f412:	e014      	b.n	800f43e <_vfiprintf_r+0x13a>
 800f414:	eba0 0308 	sub.w	r3, r0, r8
 800f418:	fa09 f303 	lsl.w	r3, r9, r3
 800f41c:	4313      	orrs	r3, r2
 800f41e:	9304      	str	r3, [sp, #16]
 800f420:	46a2      	mov	sl, r4
 800f422:	e7d2      	b.n	800f3ca <_vfiprintf_r+0xc6>
 800f424:	9b03      	ldr	r3, [sp, #12]
 800f426:	1d19      	adds	r1, r3, #4
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	9103      	str	r1, [sp, #12]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	bfbb      	ittet	lt
 800f430:	425b      	neglt	r3, r3
 800f432:	f042 0202 	orrlt.w	r2, r2, #2
 800f436:	9307      	strge	r3, [sp, #28]
 800f438:	9307      	strlt	r3, [sp, #28]
 800f43a:	bfb8      	it	lt
 800f43c:	9204      	strlt	r2, [sp, #16]
 800f43e:	7823      	ldrb	r3, [r4, #0]
 800f440:	2b2e      	cmp	r3, #46	@ 0x2e
 800f442:	d10a      	bne.n	800f45a <_vfiprintf_r+0x156>
 800f444:	7863      	ldrb	r3, [r4, #1]
 800f446:	2b2a      	cmp	r3, #42	@ 0x2a
 800f448:	d132      	bne.n	800f4b0 <_vfiprintf_r+0x1ac>
 800f44a:	9b03      	ldr	r3, [sp, #12]
 800f44c:	1d1a      	adds	r2, r3, #4
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	9203      	str	r2, [sp, #12]
 800f452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f456:	3402      	adds	r4, #2
 800f458:	9305      	str	r3, [sp, #20]
 800f45a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f530 <_vfiprintf_r+0x22c>
 800f45e:	7821      	ldrb	r1, [r4, #0]
 800f460:	2203      	movs	r2, #3
 800f462:	4650      	mov	r0, sl
 800f464:	f7f0 fecc 	bl	8000200 <memchr>
 800f468:	b138      	cbz	r0, 800f47a <_vfiprintf_r+0x176>
 800f46a:	9b04      	ldr	r3, [sp, #16]
 800f46c:	eba0 000a 	sub.w	r0, r0, sl
 800f470:	2240      	movs	r2, #64	@ 0x40
 800f472:	4082      	lsls	r2, r0
 800f474:	4313      	orrs	r3, r2
 800f476:	3401      	adds	r4, #1
 800f478:	9304      	str	r3, [sp, #16]
 800f47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f47e:	4829      	ldr	r0, [pc, #164]	@ (800f524 <_vfiprintf_r+0x220>)
 800f480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f484:	2206      	movs	r2, #6
 800f486:	f7f0 febb 	bl	8000200 <memchr>
 800f48a:	2800      	cmp	r0, #0
 800f48c:	d03f      	beq.n	800f50e <_vfiprintf_r+0x20a>
 800f48e:	4b26      	ldr	r3, [pc, #152]	@ (800f528 <_vfiprintf_r+0x224>)
 800f490:	bb1b      	cbnz	r3, 800f4da <_vfiprintf_r+0x1d6>
 800f492:	9b03      	ldr	r3, [sp, #12]
 800f494:	3307      	adds	r3, #7
 800f496:	f023 0307 	bic.w	r3, r3, #7
 800f49a:	3308      	adds	r3, #8
 800f49c:	9303      	str	r3, [sp, #12]
 800f49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4a0:	443b      	add	r3, r7
 800f4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4a4:	e76a      	b.n	800f37c <_vfiprintf_r+0x78>
 800f4a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f4aa:	460c      	mov	r4, r1
 800f4ac:	2001      	movs	r0, #1
 800f4ae:	e7a8      	b.n	800f402 <_vfiprintf_r+0xfe>
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	3401      	adds	r4, #1
 800f4b4:	9305      	str	r3, [sp, #20]
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	f04f 0c0a 	mov.w	ip, #10
 800f4bc:	4620      	mov	r0, r4
 800f4be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4c2:	3a30      	subs	r2, #48	@ 0x30
 800f4c4:	2a09      	cmp	r2, #9
 800f4c6:	d903      	bls.n	800f4d0 <_vfiprintf_r+0x1cc>
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d0c6      	beq.n	800f45a <_vfiprintf_r+0x156>
 800f4cc:	9105      	str	r1, [sp, #20]
 800f4ce:	e7c4      	b.n	800f45a <_vfiprintf_r+0x156>
 800f4d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e7f0      	b.n	800f4bc <_vfiprintf_r+0x1b8>
 800f4da:	ab03      	add	r3, sp, #12
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	462a      	mov	r2, r5
 800f4e0:	4b12      	ldr	r3, [pc, #72]	@ (800f52c <_vfiprintf_r+0x228>)
 800f4e2:	a904      	add	r1, sp, #16
 800f4e4:	4630      	mov	r0, r6
 800f4e6:	f7fd fdc7 	bl	800d078 <_printf_float>
 800f4ea:	4607      	mov	r7, r0
 800f4ec:	1c78      	adds	r0, r7, #1
 800f4ee:	d1d6      	bne.n	800f49e <_vfiprintf_r+0x19a>
 800f4f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f4f2:	07d9      	lsls	r1, r3, #31
 800f4f4:	d405      	bmi.n	800f502 <_vfiprintf_r+0x1fe>
 800f4f6:	89ab      	ldrh	r3, [r5, #12]
 800f4f8:	059a      	lsls	r2, r3, #22
 800f4fa:	d402      	bmi.n	800f502 <_vfiprintf_r+0x1fe>
 800f4fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f4fe:	f7fe fb55 	bl	800dbac <__retarget_lock_release_recursive>
 800f502:	89ab      	ldrh	r3, [r5, #12]
 800f504:	065b      	lsls	r3, r3, #25
 800f506:	f53f af1f 	bmi.w	800f348 <_vfiprintf_r+0x44>
 800f50a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f50c:	e71e      	b.n	800f34c <_vfiprintf_r+0x48>
 800f50e:	ab03      	add	r3, sp, #12
 800f510:	9300      	str	r3, [sp, #0]
 800f512:	462a      	mov	r2, r5
 800f514:	4b05      	ldr	r3, [pc, #20]	@ (800f52c <_vfiprintf_r+0x228>)
 800f516:	a904      	add	r1, sp, #16
 800f518:	4630      	mov	r0, r6
 800f51a:	f7fe f845 	bl	800d5a8 <_printf_i>
 800f51e:	e7e4      	b.n	800f4ea <_vfiprintf_r+0x1e6>
 800f520:	08015260 	.word	0x08015260
 800f524:	0801526a 	.word	0x0801526a
 800f528:	0800d079 	.word	0x0800d079
 800f52c:	0800f2df 	.word	0x0800f2df
 800f530:	08015266 	.word	0x08015266

0800f534 <__sflush_r>:
 800f534:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f53c:	0716      	lsls	r6, r2, #28
 800f53e:	4605      	mov	r5, r0
 800f540:	460c      	mov	r4, r1
 800f542:	d454      	bmi.n	800f5ee <__sflush_r+0xba>
 800f544:	684b      	ldr	r3, [r1, #4]
 800f546:	2b00      	cmp	r3, #0
 800f548:	dc02      	bgt.n	800f550 <__sflush_r+0x1c>
 800f54a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	dd48      	ble.n	800f5e2 <__sflush_r+0xae>
 800f550:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f552:	2e00      	cmp	r6, #0
 800f554:	d045      	beq.n	800f5e2 <__sflush_r+0xae>
 800f556:	2300      	movs	r3, #0
 800f558:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f55c:	682f      	ldr	r7, [r5, #0]
 800f55e:	6a21      	ldr	r1, [r4, #32]
 800f560:	602b      	str	r3, [r5, #0]
 800f562:	d030      	beq.n	800f5c6 <__sflush_r+0x92>
 800f564:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f566:	89a3      	ldrh	r3, [r4, #12]
 800f568:	0759      	lsls	r1, r3, #29
 800f56a:	d505      	bpl.n	800f578 <__sflush_r+0x44>
 800f56c:	6863      	ldr	r3, [r4, #4]
 800f56e:	1ad2      	subs	r2, r2, r3
 800f570:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f572:	b10b      	cbz	r3, 800f578 <__sflush_r+0x44>
 800f574:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f576:	1ad2      	subs	r2, r2, r3
 800f578:	2300      	movs	r3, #0
 800f57a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f57c:	6a21      	ldr	r1, [r4, #32]
 800f57e:	4628      	mov	r0, r5
 800f580:	47b0      	blx	r6
 800f582:	1c43      	adds	r3, r0, #1
 800f584:	89a3      	ldrh	r3, [r4, #12]
 800f586:	d106      	bne.n	800f596 <__sflush_r+0x62>
 800f588:	6829      	ldr	r1, [r5, #0]
 800f58a:	291d      	cmp	r1, #29
 800f58c:	d82b      	bhi.n	800f5e6 <__sflush_r+0xb2>
 800f58e:	4a2a      	ldr	r2, [pc, #168]	@ (800f638 <__sflush_r+0x104>)
 800f590:	410a      	asrs	r2, r1
 800f592:	07d6      	lsls	r6, r2, #31
 800f594:	d427      	bmi.n	800f5e6 <__sflush_r+0xb2>
 800f596:	2200      	movs	r2, #0
 800f598:	6062      	str	r2, [r4, #4]
 800f59a:	04d9      	lsls	r1, r3, #19
 800f59c:	6922      	ldr	r2, [r4, #16]
 800f59e:	6022      	str	r2, [r4, #0]
 800f5a0:	d504      	bpl.n	800f5ac <__sflush_r+0x78>
 800f5a2:	1c42      	adds	r2, r0, #1
 800f5a4:	d101      	bne.n	800f5aa <__sflush_r+0x76>
 800f5a6:	682b      	ldr	r3, [r5, #0]
 800f5a8:	b903      	cbnz	r3, 800f5ac <__sflush_r+0x78>
 800f5aa:	6560      	str	r0, [r4, #84]	@ 0x54
 800f5ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f5ae:	602f      	str	r7, [r5, #0]
 800f5b0:	b1b9      	cbz	r1, 800f5e2 <__sflush_r+0xae>
 800f5b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f5b6:	4299      	cmp	r1, r3
 800f5b8:	d002      	beq.n	800f5c0 <__sflush_r+0x8c>
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	f7ff f954 	bl	800e868 <_free_r>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f5c4:	e00d      	b.n	800f5e2 <__sflush_r+0xae>
 800f5c6:	2301      	movs	r3, #1
 800f5c8:	4628      	mov	r0, r5
 800f5ca:	47b0      	blx	r6
 800f5cc:	4602      	mov	r2, r0
 800f5ce:	1c50      	adds	r0, r2, #1
 800f5d0:	d1c9      	bne.n	800f566 <__sflush_r+0x32>
 800f5d2:	682b      	ldr	r3, [r5, #0]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d0c6      	beq.n	800f566 <__sflush_r+0x32>
 800f5d8:	2b1d      	cmp	r3, #29
 800f5da:	d001      	beq.n	800f5e0 <__sflush_r+0xac>
 800f5dc:	2b16      	cmp	r3, #22
 800f5de:	d11e      	bne.n	800f61e <__sflush_r+0xea>
 800f5e0:	602f      	str	r7, [r5, #0]
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	e022      	b.n	800f62c <__sflush_r+0xf8>
 800f5e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f5ea:	b21b      	sxth	r3, r3
 800f5ec:	e01b      	b.n	800f626 <__sflush_r+0xf2>
 800f5ee:	690f      	ldr	r7, [r1, #16]
 800f5f0:	2f00      	cmp	r7, #0
 800f5f2:	d0f6      	beq.n	800f5e2 <__sflush_r+0xae>
 800f5f4:	0793      	lsls	r3, r2, #30
 800f5f6:	680e      	ldr	r6, [r1, #0]
 800f5f8:	bf08      	it	eq
 800f5fa:	694b      	ldreq	r3, [r1, #20]
 800f5fc:	600f      	str	r7, [r1, #0]
 800f5fe:	bf18      	it	ne
 800f600:	2300      	movne	r3, #0
 800f602:	eba6 0807 	sub.w	r8, r6, r7
 800f606:	608b      	str	r3, [r1, #8]
 800f608:	f1b8 0f00 	cmp.w	r8, #0
 800f60c:	dde9      	ble.n	800f5e2 <__sflush_r+0xae>
 800f60e:	6a21      	ldr	r1, [r4, #32]
 800f610:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f612:	4643      	mov	r3, r8
 800f614:	463a      	mov	r2, r7
 800f616:	4628      	mov	r0, r5
 800f618:	47b0      	blx	r6
 800f61a:	2800      	cmp	r0, #0
 800f61c:	dc08      	bgt.n	800f630 <__sflush_r+0xfc>
 800f61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f626:	81a3      	strh	r3, [r4, #12]
 800f628:	f04f 30ff 	mov.w	r0, #4294967295
 800f62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f630:	4407      	add	r7, r0
 800f632:	eba8 0800 	sub.w	r8, r8, r0
 800f636:	e7e7      	b.n	800f608 <__sflush_r+0xd4>
 800f638:	dfbffffe 	.word	0xdfbffffe

0800f63c <_fflush_r>:
 800f63c:	b538      	push	{r3, r4, r5, lr}
 800f63e:	690b      	ldr	r3, [r1, #16]
 800f640:	4605      	mov	r5, r0
 800f642:	460c      	mov	r4, r1
 800f644:	b913      	cbnz	r3, 800f64c <_fflush_r+0x10>
 800f646:	2500      	movs	r5, #0
 800f648:	4628      	mov	r0, r5
 800f64a:	bd38      	pop	{r3, r4, r5, pc}
 800f64c:	b118      	cbz	r0, 800f656 <_fflush_r+0x1a>
 800f64e:	6a03      	ldr	r3, [r0, #32]
 800f650:	b90b      	cbnz	r3, 800f656 <_fflush_r+0x1a>
 800f652:	f7fe f955 	bl	800d900 <__sinit>
 800f656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d0f3      	beq.n	800f646 <_fflush_r+0xa>
 800f65e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f660:	07d0      	lsls	r0, r2, #31
 800f662:	d404      	bmi.n	800f66e <_fflush_r+0x32>
 800f664:	0599      	lsls	r1, r3, #22
 800f666:	d402      	bmi.n	800f66e <_fflush_r+0x32>
 800f668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f66a:	f7fe fa9e 	bl	800dbaa <__retarget_lock_acquire_recursive>
 800f66e:	4628      	mov	r0, r5
 800f670:	4621      	mov	r1, r4
 800f672:	f7ff ff5f 	bl	800f534 <__sflush_r>
 800f676:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f678:	07da      	lsls	r2, r3, #31
 800f67a:	4605      	mov	r5, r0
 800f67c:	d4e4      	bmi.n	800f648 <_fflush_r+0xc>
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	059b      	lsls	r3, r3, #22
 800f682:	d4e1      	bmi.n	800f648 <_fflush_r+0xc>
 800f684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f686:	f7fe fa91 	bl	800dbac <__retarget_lock_release_recursive>
 800f68a:	e7dd      	b.n	800f648 <_fflush_r+0xc>

0800f68c <_putc_r>:
 800f68c:	b570      	push	{r4, r5, r6, lr}
 800f68e:	460d      	mov	r5, r1
 800f690:	4614      	mov	r4, r2
 800f692:	4606      	mov	r6, r0
 800f694:	b118      	cbz	r0, 800f69e <_putc_r+0x12>
 800f696:	6a03      	ldr	r3, [r0, #32]
 800f698:	b90b      	cbnz	r3, 800f69e <_putc_r+0x12>
 800f69a:	f7fe f931 	bl	800d900 <__sinit>
 800f69e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6a0:	07d8      	lsls	r0, r3, #31
 800f6a2:	d405      	bmi.n	800f6b0 <_putc_r+0x24>
 800f6a4:	89a3      	ldrh	r3, [r4, #12]
 800f6a6:	0599      	lsls	r1, r3, #22
 800f6a8:	d402      	bmi.n	800f6b0 <_putc_r+0x24>
 800f6aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6ac:	f7fe fa7d 	bl	800dbaa <__retarget_lock_acquire_recursive>
 800f6b0:	68a3      	ldr	r3, [r4, #8]
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	60a3      	str	r3, [r4, #8]
 800f6b8:	da05      	bge.n	800f6c6 <_putc_r+0x3a>
 800f6ba:	69a2      	ldr	r2, [r4, #24]
 800f6bc:	4293      	cmp	r3, r2
 800f6be:	db12      	blt.n	800f6e6 <_putc_r+0x5a>
 800f6c0:	b2eb      	uxtb	r3, r5
 800f6c2:	2b0a      	cmp	r3, #10
 800f6c4:	d00f      	beq.n	800f6e6 <_putc_r+0x5a>
 800f6c6:	6823      	ldr	r3, [r4, #0]
 800f6c8:	1c5a      	adds	r2, r3, #1
 800f6ca:	6022      	str	r2, [r4, #0]
 800f6cc:	701d      	strb	r5, [r3, #0]
 800f6ce:	b2ed      	uxtb	r5, r5
 800f6d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6d2:	07da      	lsls	r2, r3, #31
 800f6d4:	d405      	bmi.n	800f6e2 <_putc_r+0x56>
 800f6d6:	89a3      	ldrh	r3, [r4, #12]
 800f6d8:	059b      	lsls	r3, r3, #22
 800f6da:	d402      	bmi.n	800f6e2 <_putc_r+0x56>
 800f6dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6de:	f7fe fa65 	bl	800dbac <__retarget_lock_release_recursive>
 800f6e2:	4628      	mov	r0, r5
 800f6e4:	bd70      	pop	{r4, r5, r6, pc}
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	4622      	mov	r2, r4
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f000 f802 	bl	800f6f4 <__swbuf_r>
 800f6f0:	4605      	mov	r5, r0
 800f6f2:	e7ed      	b.n	800f6d0 <_putc_r+0x44>

0800f6f4 <__swbuf_r>:
 800f6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f6:	460e      	mov	r6, r1
 800f6f8:	4614      	mov	r4, r2
 800f6fa:	4605      	mov	r5, r0
 800f6fc:	b118      	cbz	r0, 800f706 <__swbuf_r+0x12>
 800f6fe:	6a03      	ldr	r3, [r0, #32]
 800f700:	b90b      	cbnz	r3, 800f706 <__swbuf_r+0x12>
 800f702:	f7fe f8fd 	bl	800d900 <__sinit>
 800f706:	69a3      	ldr	r3, [r4, #24]
 800f708:	60a3      	str	r3, [r4, #8]
 800f70a:	89a3      	ldrh	r3, [r4, #12]
 800f70c:	071a      	lsls	r2, r3, #28
 800f70e:	d501      	bpl.n	800f714 <__swbuf_r+0x20>
 800f710:	6923      	ldr	r3, [r4, #16]
 800f712:	b943      	cbnz	r3, 800f726 <__swbuf_r+0x32>
 800f714:	4621      	mov	r1, r4
 800f716:	4628      	mov	r0, r5
 800f718:	f000 f82a 	bl	800f770 <__swsetup_r>
 800f71c:	b118      	cbz	r0, 800f726 <__swbuf_r+0x32>
 800f71e:	f04f 37ff 	mov.w	r7, #4294967295
 800f722:	4638      	mov	r0, r7
 800f724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f726:	6823      	ldr	r3, [r4, #0]
 800f728:	6922      	ldr	r2, [r4, #16]
 800f72a:	1a98      	subs	r0, r3, r2
 800f72c:	6963      	ldr	r3, [r4, #20]
 800f72e:	b2f6      	uxtb	r6, r6
 800f730:	4283      	cmp	r3, r0
 800f732:	4637      	mov	r7, r6
 800f734:	dc05      	bgt.n	800f742 <__swbuf_r+0x4e>
 800f736:	4621      	mov	r1, r4
 800f738:	4628      	mov	r0, r5
 800f73a:	f7ff ff7f 	bl	800f63c <_fflush_r>
 800f73e:	2800      	cmp	r0, #0
 800f740:	d1ed      	bne.n	800f71e <__swbuf_r+0x2a>
 800f742:	68a3      	ldr	r3, [r4, #8]
 800f744:	3b01      	subs	r3, #1
 800f746:	60a3      	str	r3, [r4, #8]
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	1c5a      	adds	r2, r3, #1
 800f74c:	6022      	str	r2, [r4, #0]
 800f74e:	701e      	strb	r6, [r3, #0]
 800f750:	6962      	ldr	r2, [r4, #20]
 800f752:	1c43      	adds	r3, r0, #1
 800f754:	429a      	cmp	r2, r3
 800f756:	d004      	beq.n	800f762 <__swbuf_r+0x6e>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	07db      	lsls	r3, r3, #31
 800f75c:	d5e1      	bpl.n	800f722 <__swbuf_r+0x2e>
 800f75e:	2e0a      	cmp	r6, #10
 800f760:	d1df      	bne.n	800f722 <__swbuf_r+0x2e>
 800f762:	4621      	mov	r1, r4
 800f764:	4628      	mov	r0, r5
 800f766:	f7ff ff69 	bl	800f63c <_fflush_r>
 800f76a:	2800      	cmp	r0, #0
 800f76c:	d0d9      	beq.n	800f722 <__swbuf_r+0x2e>
 800f76e:	e7d6      	b.n	800f71e <__swbuf_r+0x2a>

0800f770 <__swsetup_r>:
 800f770:	b538      	push	{r3, r4, r5, lr}
 800f772:	4b29      	ldr	r3, [pc, #164]	@ (800f818 <__swsetup_r+0xa8>)
 800f774:	4605      	mov	r5, r0
 800f776:	6818      	ldr	r0, [r3, #0]
 800f778:	460c      	mov	r4, r1
 800f77a:	b118      	cbz	r0, 800f784 <__swsetup_r+0x14>
 800f77c:	6a03      	ldr	r3, [r0, #32]
 800f77e:	b90b      	cbnz	r3, 800f784 <__swsetup_r+0x14>
 800f780:	f7fe f8be 	bl	800d900 <__sinit>
 800f784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f788:	0719      	lsls	r1, r3, #28
 800f78a:	d422      	bmi.n	800f7d2 <__swsetup_r+0x62>
 800f78c:	06da      	lsls	r2, r3, #27
 800f78e:	d407      	bmi.n	800f7a0 <__swsetup_r+0x30>
 800f790:	2209      	movs	r2, #9
 800f792:	602a      	str	r2, [r5, #0]
 800f794:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f798:	81a3      	strh	r3, [r4, #12]
 800f79a:	f04f 30ff 	mov.w	r0, #4294967295
 800f79e:	e033      	b.n	800f808 <__swsetup_r+0x98>
 800f7a0:	0758      	lsls	r0, r3, #29
 800f7a2:	d512      	bpl.n	800f7ca <__swsetup_r+0x5a>
 800f7a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7a6:	b141      	cbz	r1, 800f7ba <__swsetup_r+0x4a>
 800f7a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7ac:	4299      	cmp	r1, r3
 800f7ae:	d002      	beq.n	800f7b6 <__swsetup_r+0x46>
 800f7b0:	4628      	mov	r0, r5
 800f7b2:	f7ff f859 	bl	800e868 <_free_r>
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f7c0:	81a3      	strh	r3, [r4, #12]
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	6063      	str	r3, [r4, #4]
 800f7c6:	6923      	ldr	r3, [r4, #16]
 800f7c8:	6023      	str	r3, [r4, #0]
 800f7ca:	89a3      	ldrh	r3, [r4, #12]
 800f7cc:	f043 0308 	orr.w	r3, r3, #8
 800f7d0:	81a3      	strh	r3, [r4, #12]
 800f7d2:	6923      	ldr	r3, [r4, #16]
 800f7d4:	b94b      	cbnz	r3, 800f7ea <__swsetup_r+0x7a>
 800f7d6:	89a3      	ldrh	r3, [r4, #12]
 800f7d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f7dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f7e0:	d003      	beq.n	800f7ea <__swsetup_r+0x7a>
 800f7e2:	4621      	mov	r1, r4
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	f000 f8eb 	bl	800f9c0 <__smakebuf_r>
 800f7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ee:	f013 0201 	ands.w	r2, r3, #1
 800f7f2:	d00a      	beq.n	800f80a <__swsetup_r+0x9a>
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	60a2      	str	r2, [r4, #8]
 800f7f8:	6962      	ldr	r2, [r4, #20]
 800f7fa:	4252      	negs	r2, r2
 800f7fc:	61a2      	str	r2, [r4, #24]
 800f7fe:	6922      	ldr	r2, [r4, #16]
 800f800:	b942      	cbnz	r2, 800f814 <__swsetup_r+0xa4>
 800f802:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f806:	d1c5      	bne.n	800f794 <__swsetup_r+0x24>
 800f808:	bd38      	pop	{r3, r4, r5, pc}
 800f80a:	0799      	lsls	r1, r3, #30
 800f80c:	bf58      	it	pl
 800f80e:	6962      	ldrpl	r2, [r4, #20]
 800f810:	60a2      	str	r2, [r4, #8]
 800f812:	e7f4      	b.n	800f7fe <__swsetup_r+0x8e>
 800f814:	2000      	movs	r0, #0
 800f816:	e7f7      	b.n	800f808 <__swsetup_r+0x98>
 800f818:	20000038 	.word	0x20000038

0800f81c <memmove>:
 800f81c:	4288      	cmp	r0, r1
 800f81e:	b510      	push	{r4, lr}
 800f820:	eb01 0402 	add.w	r4, r1, r2
 800f824:	d902      	bls.n	800f82c <memmove+0x10>
 800f826:	4284      	cmp	r4, r0
 800f828:	4623      	mov	r3, r4
 800f82a:	d807      	bhi.n	800f83c <memmove+0x20>
 800f82c:	1e43      	subs	r3, r0, #1
 800f82e:	42a1      	cmp	r1, r4
 800f830:	d008      	beq.n	800f844 <memmove+0x28>
 800f832:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f836:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f83a:	e7f8      	b.n	800f82e <memmove+0x12>
 800f83c:	4402      	add	r2, r0
 800f83e:	4601      	mov	r1, r0
 800f840:	428a      	cmp	r2, r1
 800f842:	d100      	bne.n	800f846 <memmove+0x2a>
 800f844:	bd10      	pop	{r4, pc}
 800f846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f84a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f84e:	e7f7      	b.n	800f840 <memmove+0x24>

0800f850 <__assert_func>:
 800f850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f852:	4614      	mov	r4, r2
 800f854:	461a      	mov	r2, r3
 800f856:	4b09      	ldr	r3, [pc, #36]	@ (800f87c <__assert_func+0x2c>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	4605      	mov	r5, r0
 800f85c:	68d8      	ldr	r0, [r3, #12]
 800f85e:	b954      	cbnz	r4, 800f876 <__assert_func+0x26>
 800f860:	4b07      	ldr	r3, [pc, #28]	@ (800f880 <__assert_func+0x30>)
 800f862:	461c      	mov	r4, r3
 800f864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f868:	9100      	str	r1, [sp, #0]
 800f86a:	462b      	mov	r3, r5
 800f86c:	4905      	ldr	r1, [pc, #20]	@ (800f884 <__assert_func+0x34>)
 800f86e:	f000 f86f 	bl	800f950 <fiprintf>
 800f872:	f000 f903 	bl	800fa7c <abort>
 800f876:	4b04      	ldr	r3, [pc, #16]	@ (800f888 <__assert_func+0x38>)
 800f878:	e7f4      	b.n	800f864 <__assert_func+0x14>
 800f87a:	bf00      	nop
 800f87c:	20000038 	.word	0x20000038
 800f880:	080152b6 	.word	0x080152b6
 800f884:	08015288 	.word	0x08015288
 800f888:	0801527b 	.word	0x0801527b

0800f88c <_calloc_r>:
 800f88c:	b570      	push	{r4, r5, r6, lr}
 800f88e:	fba1 5402 	umull	r5, r4, r1, r2
 800f892:	b93c      	cbnz	r4, 800f8a4 <_calloc_r+0x18>
 800f894:	4629      	mov	r1, r5
 800f896:	f7fd fac3 	bl	800ce20 <_malloc_r>
 800f89a:	4606      	mov	r6, r0
 800f89c:	b928      	cbnz	r0, 800f8aa <_calloc_r+0x1e>
 800f89e:	2600      	movs	r6, #0
 800f8a0:	4630      	mov	r0, r6
 800f8a2:	bd70      	pop	{r4, r5, r6, pc}
 800f8a4:	220c      	movs	r2, #12
 800f8a6:	6002      	str	r2, [r0, #0]
 800f8a8:	e7f9      	b.n	800f89e <_calloc_r+0x12>
 800f8aa:	462a      	mov	r2, r5
 800f8ac:	4621      	mov	r1, r4
 800f8ae:	f7fe f8ee 	bl	800da8e <memset>
 800f8b2:	e7f5      	b.n	800f8a0 <_calloc_r+0x14>

0800f8b4 <__ascii_mbtowc>:
 800f8b4:	b082      	sub	sp, #8
 800f8b6:	b901      	cbnz	r1, 800f8ba <__ascii_mbtowc+0x6>
 800f8b8:	a901      	add	r1, sp, #4
 800f8ba:	b142      	cbz	r2, 800f8ce <__ascii_mbtowc+0x1a>
 800f8bc:	b14b      	cbz	r3, 800f8d2 <__ascii_mbtowc+0x1e>
 800f8be:	7813      	ldrb	r3, [r2, #0]
 800f8c0:	600b      	str	r3, [r1, #0]
 800f8c2:	7812      	ldrb	r2, [r2, #0]
 800f8c4:	1e10      	subs	r0, r2, #0
 800f8c6:	bf18      	it	ne
 800f8c8:	2001      	movne	r0, #1
 800f8ca:	b002      	add	sp, #8
 800f8cc:	4770      	bx	lr
 800f8ce:	4610      	mov	r0, r2
 800f8d0:	e7fb      	b.n	800f8ca <__ascii_mbtowc+0x16>
 800f8d2:	f06f 0001 	mvn.w	r0, #1
 800f8d6:	e7f8      	b.n	800f8ca <__ascii_mbtowc+0x16>

0800f8d8 <_realloc_r>:
 800f8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8dc:	4680      	mov	r8, r0
 800f8de:	4615      	mov	r5, r2
 800f8e0:	460c      	mov	r4, r1
 800f8e2:	b921      	cbnz	r1, 800f8ee <_realloc_r+0x16>
 800f8e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8e8:	4611      	mov	r1, r2
 800f8ea:	f7fd ba99 	b.w	800ce20 <_malloc_r>
 800f8ee:	b92a      	cbnz	r2, 800f8fc <_realloc_r+0x24>
 800f8f0:	f7fe ffba 	bl	800e868 <_free_r>
 800f8f4:	2400      	movs	r4, #0
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8fc:	f000 f8c5 	bl	800fa8a <_malloc_usable_size_r>
 800f900:	4285      	cmp	r5, r0
 800f902:	4606      	mov	r6, r0
 800f904:	d802      	bhi.n	800f90c <_realloc_r+0x34>
 800f906:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f90a:	d8f4      	bhi.n	800f8f6 <_realloc_r+0x1e>
 800f90c:	4629      	mov	r1, r5
 800f90e:	4640      	mov	r0, r8
 800f910:	f7fd fa86 	bl	800ce20 <_malloc_r>
 800f914:	4607      	mov	r7, r0
 800f916:	2800      	cmp	r0, #0
 800f918:	d0ec      	beq.n	800f8f4 <_realloc_r+0x1c>
 800f91a:	42b5      	cmp	r5, r6
 800f91c:	462a      	mov	r2, r5
 800f91e:	4621      	mov	r1, r4
 800f920:	bf28      	it	cs
 800f922:	4632      	movcs	r2, r6
 800f924:	f7fe f943 	bl	800dbae <memcpy>
 800f928:	4621      	mov	r1, r4
 800f92a:	4640      	mov	r0, r8
 800f92c:	f7fe ff9c 	bl	800e868 <_free_r>
 800f930:	463c      	mov	r4, r7
 800f932:	e7e0      	b.n	800f8f6 <_realloc_r+0x1e>

0800f934 <__ascii_wctomb>:
 800f934:	4603      	mov	r3, r0
 800f936:	4608      	mov	r0, r1
 800f938:	b141      	cbz	r1, 800f94c <__ascii_wctomb+0x18>
 800f93a:	2aff      	cmp	r2, #255	@ 0xff
 800f93c:	d904      	bls.n	800f948 <__ascii_wctomb+0x14>
 800f93e:	228a      	movs	r2, #138	@ 0x8a
 800f940:	601a      	str	r2, [r3, #0]
 800f942:	f04f 30ff 	mov.w	r0, #4294967295
 800f946:	4770      	bx	lr
 800f948:	700a      	strb	r2, [r1, #0]
 800f94a:	2001      	movs	r0, #1
 800f94c:	4770      	bx	lr
	...

0800f950 <fiprintf>:
 800f950:	b40e      	push	{r1, r2, r3}
 800f952:	b503      	push	{r0, r1, lr}
 800f954:	4601      	mov	r1, r0
 800f956:	ab03      	add	r3, sp, #12
 800f958:	4805      	ldr	r0, [pc, #20]	@ (800f970 <fiprintf+0x20>)
 800f95a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f95e:	6800      	ldr	r0, [r0, #0]
 800f960:	9301      	str	r3, [sp, #4]
 800f962:	f7ff fccf 	bl	800f304 <_vfiprintf_r>
 800f966:	b002      	add	sp, #8
 800f968:	f85d eb04 	ldr.w	lr, [sp], #4
 800f96c:	b003      	add	sp, #12
 800f96e:	4770      	bx	lr
 800f970:	20000038 	.word	0x20000038

0800f974 <__swhatbuf_r>:
 800f974:	b570      	push	{r4, r5, r6, lr}
 800f976:	460c      	mov	r4, r1
 800f978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f97c:	2900      	cmp	r1, #0
 800f97e:	b096      	sub	sp, #88	@ 0x58
 800f980:	4615      	mov	r5, r2
 800f982:	461e      	mov	r6, r3
 800f984:	da0d      	bge.n	800f9a2 <__swhatbuf_r+0x2e>
 800f986:	89a3      	ldrh	r3, [r4, #12]
 800f988:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f98c:	f04f 0100 	mov.w	r1, #0
 800f990:	bf14      	ite	ne
 800f992:	2340      	movne	r3, #64	@ 0x40
 800f994:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f998:	2000      	movs	r0, #0
 800f99a:	6031      	str	r1, [r6, #0]
 800f99c:	602b      	str	r3, [r5, #0]
 800f99e:	b016      	add	sp, #88	@ 0x58
 800f9a0:	bd70      	pop	{r4, r5, r6, pc}
 800f9a2:	466a      	mov	r2, sp
 800f9a4:	f000 f848 	bl	800fa38 <_fstat_r>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	dbec      	blt.n	800f986 <__swhatbuf_r+0x12>
 800f9ac:	9901      	ldr	r1, [sp, #4]
 800f9ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f9b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f9b6:	4259      	negs	r1, r3
 800f9b8:	4159      	adcs	r1, r3
 800f9ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9be:	e7eb      	b.n	800f998 <__swhatbuf_r+0x24>

0800f9c0 <__smakebuf_r>:
 800f9c0:	898b      	ldrh	r3, [r1, #12]
 800f9c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9c4:	079d      	lsls	r5, r3, #30
 800f9c6:	4606      	mov	r6, r0
 800f9c8:	460c      	mov	r4, r1
 800f9ca:	d507      	bpl.n	800f9dc <__smakebuf_r+0x1c>
 800f9cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	6123      	str	r3, [r4, #16]
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	6163      	str	r3, [r4, #20]
 800f9d8:	b003      	add	sp, #12
 800f9da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9dc:	ab01      	add	r3, sp, #4
 800f9de:	466a      	mov	r2, sp
 800f9e0:	f7ff ffc8 	bl	800f974 <__swhatbuf_r>
 800f9e4:	9f00      	ldr	r7, [sp, #0]
 800f9e6:	4605      	mov	r5, r0
 800f9e8:	4639      	mov	r1, r7
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	f7fd fa18 	bl	800ce20 <_malloc_r>
 800f9f0:	b948      	cbnz	r0, 800fa06 <__smakebuf_r+0x46>
 800f9f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9f6:	059a      	lsls	r2, r3, #22
 800f9f8:	d4ee      	bmi.n	800f9d8 <__smakebuf_r+0x18>
 800f9fa:	f023 0303 	bic.w	r3, r3, #3
 800f9fe:	f043 0302 	orr.w	r3, r3, #2
 800fa02:	81a3      	strh	r3, [r4, #12]
 800fa04:	e7e2      	b.n	800f9cc <__smakebuf_r+0xc>
 800fa06:	89a3      	ldrh	r3, [r4, #12]
 800fa08:	6020      	str	r0, [r4, #0]
 800fa0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa0e:	81a3      	strh	r3, [r4, #12]
 800fa10:	9b01      	ldr	r3, [sp, #4]
 800fa12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fa16:	b15b      	cbz	r3, 800fa30 <__smakebuf_r+0x70>
 800fa18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa1c:	4630      	mov	r0, r6
 800fa1e:	f000 f81d 	bl	800fa5c <_isatty_r>
 800fa22:	b128      	cbz	r0, 800fa30 <__smakebuf_r+0x70>
 800fa24:	89a3      	ldrh	r3, [r4, #12]
 800fa26:	f023 0303 	bic.w	r3, r3, #3
 800fa2a:	f043 0301 	orr.w	r3, r3, #1
 800fa2e:	81a3      	strh	r3, [r4, #12]
 800fa30:	89a3      	ldrh	r3, [r4, #12]
 800fa32:	431d      	orrs	r5, r3
 800fa34:	81a5      	strh	r5, [r4, #12]
 800fa36:	e7cf      	b.n	800f9d8 <__smakebuf_r+0x18>

0800fa38 <_fstat_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4d07      	ldr	r5, [pc, #28]	@ (800fa58 <_fstat_r+0x20>)
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	4604      	mov	r4, r0
 800fa40:	4608      	mov	r0, r1
 800fa42:	4611      	mov	r1, r2
 800fa44:	602b      	str	r3, [r5, #0]
 800fa46:	f7f3 fef8 	bl	800383a <_fstat>
 800fa4a:	1c43      	adds	r3, r0, #1
 800fa4c:	d102      	bne.n	800fa54 <_fstat_r+0x1c>
 800fa4e:	682b      	ldr	r3, [r5, #0]
 800fa50:	b103      	cbz	r3, 800fa54 <_fstat_r+0x1c>
 800fa52:	6023      	str	r3, [r4, #0]
 800fa54:	bd38      	pop	{r3, r4, r5, pc}
 800fa56:	bf00      	nop
 800fa58:	20000b40 	.word	0x20000b40

0800fa5c <_isatty_r>:
 800fa5c:	b538      	push	{r3, r4, r5, lr}
 800fa5e:	4d06      	ldr	r5, [pc, #24]	@ (800fa78 <_isatty_r+0x1c>)
 800fa60:	2300      	movs	r3, #0
 800fa62:	4604      	mov	r4, r0
 800fa64:	4608      	mov	r0, r1
 800fa66:	602b      	str	r3, [r5, #0]
 800fa68:	f7f3 fef7 	bl	800385a <_isatty>
 800fa6c:	1c43      	adds	r3, r0, #1
 800fa6e:	d102      	bne.n	800fa76 <_isatty_r+0x1a>
 800fa70:	682b      	ldr	r3, [r5, #0]
 800fa72:	b103      	cbz	r3, 800fa76 <_isatty_r+0x1a>
 800fa74:	6023      	str	r3, [r4, #0]
 800fa76:	bd38      	pop	{r3, r4, r5, pc}
 800fa78:	20000b40 	.word	0x20000b40

0800fa7c <abort>:
 800fa7c:	b508      	push	{r3, lr}
 800fa7e:	2006      	movs	r0, #6
 800fa80:	f000 f834 	bl	800faec <raise>
 800fa84:	2001      	movs	r0, #1
 800fa86:	f7f3 fe88 	bl	800379a <_exit>

0800fa8a <_malloc_usable_size_r>:
 800fa8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa8e:	1f18      	subs	r0, r3, #4
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	bfbc      	itt	lt
 800fa94:	580b      	ldrlt	r3, [r1, r0]
 800fa96:	18c0      	addlt	r0, r0, r3
 800fa98:	4770      	bx	lr

0800fa9a <_raise_r>:
 800fa9a:	291f      	cmp	r1, #31
 800fa9c:	b538      	push	{r3, r4, r5, lr}
 800fa9e:	4605      	mov	r5, r0
 800faa0:	460c      	mov	r4, r1
 800faa2:	d904      	bls.n	800faae <_raise_r+0x14>
 800faa4:	2316      	movs	r3, #22
 800faa6:	6003      	str	r3, [r0, #0]
 800faa8:	f04f 30ff 	mov.w	r0, #4294967295
 800faac:	bd38      	pop	{r3, r4, r5, pc}
 800faae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fab0:	b112      	cbz	r2, 800fab8 <_raise_r+0x1e>
 800fab2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fab6:	b94b      	cbnz	r3, 800facc <_raise_r+0x32>
 800fab8:	4628      	mov	r0, r5
 800faba:	f000 f831 	bl	800fb20 <_getpid_r>
 800fabe:	4622      	mov	r2, r4
 800fac0:	4601      	mov	r1, r0
 800fac2:	4628      	mov	r0, r5
 800fac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fac8:	f000 b818 	b.w	800fafc <_kill_r>
 800facc:	2b01      	cmp	r3, #1
 800face:	d00a      	beq.n	800fae6 <_raise_r+0x4c>
 800fad0:	1c59      	adds	r1, r3, #1
 800fad2:	d103      	bne.n	800fadc <_raise_r+0x42>
 800fad4:	2316      	movs	r3, #22
 800fad6:	6003      	str	r3, [r0, #0]
 800fad8:	2001      	movs	r0, #1
 800fada:	e7e7      	b.n	800faac <_raise_r+0x12>
 800fadc:	2100      	movs	r1, #0
 800fade:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fae2:	4620      	mov	r0, r4
 800fae4:	4798      	blx	r3
 800fae6:	2000      	movs	r0, #0
 800fae8:	e7e0      	b.n	800faac <_raise_r+0x12>
	...

0800faec <raise>:
 800faec:	4b02      	ldr	r3, [pc, #8]	@ (800faf8 <raise+0xc>)
 800faee:	4601      	mov	r1, r0
 800faf0:	6818      	ldr	r0, [r3, #0]
 800faf2:	f7ff bfd2 	b.w	800fa9a <_raise_r>
 800faf6:	bf00      	nop
 800faf8:	20000038 	.word	0x20000038

0800fafc <_kill_r>:
 800fafc:	b538      	push	{r3, r4, r5, lr}
 800fafe:	4d07      	ldr	r5, [pc, #28]	@ (800fb1c <_kill_r+0x20>)
 800fb00:	2300      	movs	r3, #0
 800fb02:	4604      	mov	r4, r0
 800fb04:	4608      	mov	r0, r1
 800fb06:	4611      	mov	r1, r2
 800fb08:	602b      	str	r3, [r5, #0]
 800fb0a:	f7f3 fe36 	bl	800377a <_kill>
 800fb0e:	1c43      	adds	r3, r0, #1
 800fb10:	d102      	bne.n	800fb18 <_kill_r+0x1c>
 800fb12:	682b      	ldr	r3, [r5, #0]
 800fb14:	b103      	cbz	r3, 800fb18 <_kill_r+0x1c>
 800fb16:	6023      	str	r3, [r4, #0]
 800fb18:	bd38      	pop	{r3, r4, r5, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20000b40 	.word	0x20000b40

0800fb20 <_getpid_r>:
 800fb20:	f7f3 be23 	b.w	800376a <_getpid>

0800fb24 <_init>:
 800fb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb26:	bf00      	nop
 800fb28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb2a:	bc08      	pop	{r3}
 800fb2c:	469e      	mov	lr, r3
 800fb2e:	4770      	bx	lr

0800fb30 <_fini>:
 800fb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb32:	bf00      	nop
 800fb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb36:	bc08      	pop	{r3}
 800fb38:	469e      	mov	lr, r3
 800fb3a:	4770      	bx	lr
